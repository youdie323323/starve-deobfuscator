(function (og, Mh, b, aj, bj) {
    const cj = window;
    let ye = 20;
    var Fe = 180;
    var dj = 202;
    if (dj === 3) {
        dj = 216;
    }
    if (Fe >= 13) {
        Fe = 26;
    }
    var ej = 50;
    if (ej >= 14) {
        ej = 21;
    }
    Math.floor(138[138 .ΔⲆⲆΔⲆⵠᐃ]);
    const fj = function (a) {
        let b = "";
        for (let c = 0; c < a.length; c++) {
            b += cj.String.fromCharCode(a[c] ^ ye++ % 255);
        }
        return b;
    };
    var a = 171;
    if (a == 6) {
        a = 40;
    }
    var gj = 187;
    if (gj === 2) {
        gj = 107;
    }
    var hj = 201;
    if (hj > 11) {
        hj = 140;
    }
    const ij = 20;
    const l = 100;
    const g = 6;
    const u = 15;
    const jj = undefined;
    const d = 12;
    const c = 0;
    const m = 18;
    const p = 13;
    const v = -8;
    const C = 255;
    const f = -4;
    const z = 11;
    const y = 16;
    const w = false;
    const P = true;
    const A = 256;
    const k = 2;
    const x = 17;
    const J = 4;
    const M = 19;
    const B = 4;
    const E = 15;
    const D = 14;
    const I = 6;
    const S = 10;
    const Q = 9;
    const T = 8;
    const F = P;
    const R = 7;
    const G = 100;
    const j = 2048;
    const L = 2;
    const W = 1 << 12;
    const O = 7;
    const N = 5;
    const q = 10;
    const H = 4;
    const U = 3;
    const Y = 1;
    const K = 12;
    const V = 12;
    let Z;
    let _;
    const kj = w;
    let ie;
    let lj;
    let mj;
    let nj;
    let oj = jj;
    let pj = jj;
    const qj = 12;
    let he = [];
    const le = 1;
    let ge = "_";
    const rj = 17;
    let be;
    const sj = 2;
    let ve;
    let tj = jj;
    const uj = 0;
    let pe;
    const vj = 20;
    const Te = 100;
    function fe(a) {
        const b = Math.floor;
        let c = 0;
        Math.floor = function (a) {
            for (let b = 0; b < 6872; b++) {
                c += b;
            }
            return b(a);
        };
    }
    let ze;
    const wj = 3;
    let Pe;
    let xj = jj;
    let yj = jj;
    const zj = 255;
    const Je = 20;
    let Me;
    let Aj;
    let Bj;
    let Cj = jj;
    const Dj = F;
    function Se(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function Qe(a) {
        return cj.String.fromCharCode(a);
    }
    const _e = w;
    const Re = 10;
    const Ge = 0;
    const je = 14;
    const Le = 15;
    const We = 7;
    let Oe;
    let Ej;
    let Fj = jj;
    const Gj = 20;
    let Ue = jj;
    const Hj = 14;
    let Ke;
    const Ij = 6;
    const Ze = jj;
    let Xe = Ze;
    const Jj = 16;
    const ei = Ze;
    let ii = Ze;
    let Kj;
    let Lj;
    let Mj = ei;
    let Nj = Ze;
    let Oj = jj;
    let Pj = Ze;
    const Qj = 18;
    const li = 13;
    const gi = 256;
    let ui;
    let Rj;
    const Sj = 18;
    const vi = 7;
    const ci = 19;
    let mi;
    let Tj;
    const Uj = 9;
    const Ti = 17;
    let fi;
    const Vj = 4;
    const yi = 4912999;
    const wi = 4912999 .ⵠᐃⲆⲆⵠΔⲆ;
    const Pi = `const ᐃⲆⵠⲆᐃᐃᐃ = (typeof ⲆⵠⵠⲆΔⲆᐃ === "${wi}") ? 1 : 0; return ᐃⲆⵠⲆᐃᐃᐃ;`;
    const Ai = P;
    let ki = ei;
    const Wj = 11;
    const Ji = 5;
    let Mi = jj;
    let Xj = ei;
    const Yj = 2;
    let Di;
    const Zj = 10;
    const Si = 15;
    const Qi = 20;
    const _i = 12;
    let Fi;
    let $j;
    let _j;
    const ak = 14;
    let Li = ei;
    let bk = ei;
    const ck = 8;
    let Ni = jj;
    const dk = 9;
    let Hi;
    let ek;
    let fk = 0;
    let gk = ei;
    if (!cj.WebAssembly || !cj.WebAssembly.instantiate) {
        ⵠᐃⵠⵠΔⵠᐃᐃᐃ();
    }
    const hk = 100;
    const Zi = {
        Date: Date
    };
    const Xi = 17;
    cj.WebAssembly.instantiate(Uint8Array.from(cj.atob(""), function (a) {
        return a.charCodeAt(0);
    }), Zi).then(async function (a) {
        Z = a.instance;
        _ = Z.exports;
        ie = _.memory;
        oj = ie.buffer;
        lj = _.__pin;
        pj = _.__unpin;
        mj = _.__new;
        nj = _.__collect;
        ge = "_";
        for (let b = 0; b < 31; b++) {
            he[b] = _[ge + b];
        }
        be = _.__rtti_base;
        tj = new Float32Array(oj);
        ve = new Float64Array(oj);
        pe = new BigUint64Array(oj);
        ze = new Uint32Array(oj);
        Pe = new Uint16Array(oj);
        xj = new Uint8Array(oj);
        yj = new BigInt64Array(oj);
        Me = new Int32Array(oj);
        Cj = new Int16Array(oj);
        Aj = new Int8Array(oj);
        Hi = he[17];
        fi = he[0];
        ek = he[4];
        Li = he[10];
        Ni = he[25];
        Pj = he[6];
        ki = he[29];
        Tj = he[21];
        Mi = he[5];
        Ej = he[28];
        Oe = he[14];
        Ue = he[22];
        Fi = he[9];
        Kj = he[27];
        Mj = he[1];
        Xj = he[8];
        Ke = he[13];
        Fj = he[2];
        Oj = he[26];
        Di = he[12];
        Rj = he[15];
        ui = he[3];
        ii = he[16];
        Bj = he[11];
        Nj = he[23];
        bk = he[20];
        $j = he[30];
        Lj = he[19];
        _j = he[7];
        Xe = he[24];
        mi = he[18];
        fk = 1;
        if (gk) {
            await gk();
        }
    });
    const $i = 13;
    const ik = 0;
    const jk = function (a) {
        return ze[(be + 4 >>> 2) + (a << 1)];
    };
    const kk = _e;
    function lk(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const mk = 255;
    const nk = F;
    const ok = 6;
    const pk = 20;
    function qk(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return tj;
                case 3:
                    return ve;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return Aj;
                    } else {
                        return xj;
                    }
                case 1:
                    if (b) {
                        return Cj;
                    } else {
                        return Pe;
                    }
                case 2:
                    if (b) {
                        return Me;
                    } else {
                        return ze;
                    }
                case 3:
                    if (b) {
                        return yj;
                    } else {
                        return pe;
                    }
            }
        }
    }
    const rk = 1;
    const sk = 256;
    var tk = cj.Math.acos;
    cj.Math.acos = cj.Math.asin;
    cj.Math.asin = tk;
    var uk = cj.Math.cos;
    function vk(b) {
        const c = ze[b + v >>> 2];
        const d = jk(c);
        const e = lk(d);
        let g = d & 4 ? b : ze[b + 4 >>> 2];
        const h = d & 2 ? ze[b + 12 >>> 2] : ze[g + f >>> 2] >>> e;
        return qk(e, d & 2048, d & W).subarray(g >>>= e, g + h);
    }
    cj.Math.cos = cj.Math.sin;
    cj.Math.sin = uk;
    const wk = 11;
    const xk = 19;
    const yk = ei;
    function zk(b, c, d) {
        const e = ~(b & 4803) & b | ~(b & 4803) & 4803;
        const f = (24 << (c >> 24 & 255)) + (0 << (c & 255)) + (8 << (c >> 8 & 255)) + (16 << (c >> 16 & 255));
        const g = ~(d & 64764) & d | ~(d & 64764) & 64764;
        const a = Fx(e, f, g, e, f, g);
        const h = Fx(e, f, g, e, f, g);
        return (8 << ((a ^ h) >> 8 & 255)) + (0 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (24 << ((a ^ h) >> 16 & 255));
    }
    function Ak(b, c, d) {
        const e = b ^ 24723;
        const f = ~(c & 39227) & 39227 | ~(c & 39227) & c;
        const g = ~(d & 30190) & (d | 30190);
        const a = _w(e, f, g, e, f);
        const h = vb(g, e, f, g, e, f);
        return (8 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (0 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 24 & 255));
    }
    function Bk(a, b, c, d) {
        $j(Hx, a, b, c, d);
        const e = fr(Gx[0], Gx[1], Gx[2], Gx[3], Gx[0], Gx[1]);
        (function (a, b, c, d) {
            ki(Hx, a, b, c, d);
            const e = function (a, b, c, d) {
                Ni(Hx, a, b, c, d);
                const e = op(Gx[0], Gx[1], Gx[2], Gx[3]);
                op(Gx[0], Gx[1], Gx[2], Gx[3]);
                return ~(e & 17868) & (e | 17868);
            }(Gx[0], Gx[1], Gx[2], Gx[3]);
            lt(Gx[0], Gx[1]);
        })(Gx[2], Gx[3], Gx[0], Gx[1]);
        return e ^ 32574;
    }
    const Ck = "development";
    const Dk = "production";
    function Ek(a) {
        this.ⲆᐃΔᐃ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ⲆᐃΔᐃ - 1));
    }
    const Fk = 19;
    const Gk = 11;
    Ek.prototype.random = function () {
        this.state = (this.state * this.a + this.c) % this.ⲆᐃΔᐃ;
        return this.state / this.ⲆᐃΔᐃ;
    };
    const Hk = 4;
    const Ik = 19;
    const Jk = 18;
    const Kk = 13;
    const Lk = 3;
    Ek.prototype.ⵠᐃᐃΔⵠⵠΔ = function (a) {
        this.state = a;
    };
    ΔⲆⲆⲆᐃⵠΔ = 10000;
    const Mk = 10;
    ⲆΔⵠⲆΔⲆⵠ = [];
    const Nk = 13;
    var Ok = new Ek();
    Ok.ⵠᐃᐃΔⵠⵠΔ(new Date().getTime());
    for (var Pk = 0; Pk < ΔⲆⲆⲆᐃⵠΔ; Pk++) {
        ⲆΔⵠⲆΔⲆⵠ.push(Ok.random());
    }
    function Qk(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = An(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = An(a, k, m, h, l);
            Vk(g, a, k, m, h);
            un(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        an(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    function Rk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const k = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = tn(a, m, n, h, l, g);
            tn(a, m, n, h, l, g);
            zn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const h = Sn(a, j, f, i, a);
        tn(j, f, i, a, j, f);
        const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
        return (l | 38630) & ~(l & 38630);
    }
    const Sk = 0;
    const Tk = 100;
    const Uk = 16;
    function Vk(c, d, e, f, i) {
        const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = d ^ 63080;
        const k = ((e + 60304) * 22695477 + 1) % 4294967296;
        const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
        const h = (i | 40165) & ~(i & 40165);
        const l = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = Zk(f, i, a, j);
            const h = wn(f, i, a, j);
            Rk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(j, a, k, m);
        const g = Sn(h, j, a, k, m);
        const n = jn(h, j, a, k, m, h);
        return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
    }
    const Wk = 11;
    function Xk(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = Mn(i, a);
        En(j, k, h, i, a);
        un(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    function Yk(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = Zk(i, a, j, k);
        En(h, i, a, j, k);
        an(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    function Zk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    function $k(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = Qn(j, a);
        const g = Rk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = Rn(c, d, c);
                nn(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ Yk(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = En(a, j, f, i, a);
            Qn(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    const _k = 8;
    const ql = 256;
    const Jl = 7;
    const Op = 12;
    const aq = 0;
    const bq = 1;
    function cq(c, d, e, f, i, j) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
        const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
        const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
        const l = (1 + (39199 + i) * 22695477) % 4294967296;
        const g = j ^ 33037;
        const n = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = ln(e, f, g, e, f);
            const i = jn(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = un(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = Vk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = eq(a, m, n, h);
                                const b = En(l, g, a, m, n);
                                const d = eq(h, l, g, a);
                            })(g, e, f, g, e, f);
                            wn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        zn(d, c, d, c, d);
                        Zk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    nn(j, k, h, i);
                    const g = Xk(a, j, k, h, i);
                })(c, d, c, d, c);
                Mn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, k, m);
        wn(h, l, g, a);
        return ((34159 + (n ^ 2959 ^ eq(k, m, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    const dq = 15;
    function eq(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = An(f, i, a, j, f);
            const h = $k(i, a, j, f, i);
            const l = hn(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        wn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ An(f, g, a, i, f))) * 214013) % 4294967296;
    }
    const en = 10;
    function tn(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (Bn(a, j, k, h, l) ^ wn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ zn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    function nn(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = Qk(f, g, a, i, f, g);
        wn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ an(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const on = 8;
    function an(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (Zk(a, i, d ^ 53590, e ^ 36633) ^ Zk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    const rn = 2;
    const sn = Ai;
    function hn(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = an(d, e, d, e, d, e);
        const g = an(d, e, d, e, d, e);
        Zk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    function ln(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = an(i, a, j, k, h, i);
        const g = Zk(a, j, k, h);
        Rn(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    const gn = 9;
    function un(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = jn(a, m, n, h, l, g);
        Yk(a, m, n, h, l);
        Zk(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    const bn = 5;
    const dn = 14;
    const vn = kk;
    const cn = 0;
    const mn = 17;
    const pn = 11;
    const Cn = 20;
    const Tn = 19;
    const fn = 5;
    function zn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = an(i, a, j, k, h, i);
        const g = un(a, j, k, h, i, a);
        Zk(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    const yn = 16;
    function wn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = Mn(f, g);
        Mn(a, i);
        Sn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    const Pn = 14;
    function An(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = Vk(i, a, j, k, h);
        jn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ Sn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    const kn = 19;
    const xn = yk;
    const Jn = 255;
    function Mn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (Bn(c, d, c, d, c) ^ En(d, c, d, c, d))) % 65357 ^ Zk(c, d, c, d))) * 22695477) % 4294967296;
    }
    function Bn(c, d, e, f, i) {
        const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = d ^ 55978;
        const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(f & 30642) & (f | 30642);
        const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
        const l = En(j, a, k, m, h);
        const g = zn(j, a, k, m, h);
        Zk(j, a, k, m);
        const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
        return ~(n & 23686) & (n | 23686);
    }
    function En(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = jn(i, a, j, k, h, i);
        jn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Zk(j, k, h, i))) * 214013) % 4294967296;
    }
    const Dn = 17;
    const In = 12;
    function Sn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = Yk(j, a, k, m, h);
        const g = Qn(j, a);
        Yk(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    function Qn(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = Xk(d, e, d, e, d);
        const g = Bn(e, d, e, d, e);
        ln(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const _n = 12;
    const Fn = 15;
    function Rn(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = Xk(e, f, g, e, f);
        const h = Xk(g, e, f, g, e);
        Xk(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    const Gn = 19;
    function jn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = hn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = hn(a, j);
        hn(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    const Ln = 8;
    function Wn(a, b, c, d) {
        Ej(Hx, a, b, c, d);
        return ((21 + (Hn(Gx[0], Gx[1], Gx[2]) ^ Hn(Gx[3], Gx[0], Gx[1]))) * 16807 + 0) % 2147483647;
    }
    const On = 1;
    function Nn(b, c, d, e) {
        const f = ((37467 + b) * 214013 + 2531011) % 4294967296;
        const g = c ^ 37806;
        const a = (24 << (d & 255)) + (8 << (d >> 8 & 255)) + (16 << (d >> 24 & 255)) + (0 << (d >> 16 & 255));
        const i = ((26921 + e) * 214013 + 2531011) % 4294967296;
        const j = Fx(f, g, a, i, f, g);
        Ak(a, i, f);
        return (j | 19878) & ~(j & 19878);
    }
    const qn = 6;
    function Hn(a, b, c) {
        ui(Hx, a, b, c);
        const d = ~(Gx[0] & 61908) & 61908 | ~(Gx[0] & 61908) & Gx[0];
        return ~(d & 18443) & (d | 18443);
    }
    const Un = 18;
    function Yn(b, c, d, e, f) {
        const i = (12345 + (b + 30316) * 1103515245) % 2147483648;
        const a = (60145 + c) % 65404;
        const j = ~(d & 45432) & d | ~(d & 45432) & 45432;
        const k = e ^ 30600;
        const h = f ^ 5175;
        const l = ir(i, a, j, k);
        gb(h, i, a, j, k);
        return l ^ 45617;
    }
    const Kn = 10;
    function Vn(b, c, d, e, f) {
        const g = (0 << (b >> 0 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 24 & 255));
        const a = c ^ 59878;
        const h = (1 + (19132 + d) * 22695477) % 4294967296;
        return (44655 + (Ep(g, a, h, (e | 51238) & ~(e & 51238), ~(f & 9583) & f | ~(f & 9583) & 9583) ^ function (b, c, d) {
            const e = (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b & 255));
            const f = ~(c & 37889) & c | ~(c & 37889) & 37889;
            const g = ((d + 43192) * 22695477 + 1) % 4294967296;
            const a = vb(e, f, g, e, f, g);
            const h = function (b, c, d) {
                const e = (16 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (0 << (b >> 16 & 255)) + (24 << (b >> 0 & 255));
                const f = c ^ 49247;
                const g = (2531011 + (8207 + d) * 214013) % 4294967296;
                const a = vb(e, f, g, e, f, g);
                (function (b, c, d, e, f, i) {
                    const a = (24 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (0 << (e >> 24 & 255));
                    const j = (40031 + f) % 65458;
                    const k = ~(i & 54416) & (i | 54416);
                    const h = Ak((b + 5641) % 65307, ((c + 16465) * 1664525 + 1013904223) % 4294967296, (16 << (d >> 16 & 255)) + (8 << (d & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)));
                    const l = function (b, c, d) {
                        const e = ((b + 27254) * 2147483629 + 2147483587) % 2147483647;
                        const f = c ^ 16919;
                        const g = d ^ 27305;
                        const a = function (b, c, d) {
                            const e = b ^ 41283;
                            const f = c ^ 14754;
                            const g = d ^ 7575;
                            const a = function (b, c, d) {
                                const e = b ^ 9764;
                                const f = ~(c & 35810) & 35810 | ~(c & 35810) & c;
                                const g = (d | 28780) & ~(d & 28780);
                                const a = Vw(e, f, g);
                                const h = function (b, c, d, e) {
                                    const f = ~(b & 47310) & b | ~(b & 47310) & 47310;
                                    const g = (2147483587 + (c + 44998) * 2147483629) % 2147483647;
                                    const a = ((29974 + d) * 22695477 + 1) % 4294967296;
                                    const i = (0 << (e & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
                                    const j = function (b, c, d, e, f) {
                                        const g = (24 << (b >> 24 & 255)) + (8 << (b & 255)) + (16 << (b >> 8 & 255)) + (0 << (b >> 16 & 255));
                                        const a = (2531011 + (c + 18994) * 214013) % 4294967296;
                                        const h = Yn(g, a, (2531011 + (34582 + d) * 214013) % 4294967296, (16 << (e & 255)) + (0 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 16 & 255)), ~(f & 64436) & (f | 64436));
                                        Uw(g, a);
                                        return ~(h & 38050) & 38050 | ~(h & 38050) & h;
                                    }(f, g, a, i, f);
                                    Vw(g, a, i);
                                    return ~(j & 3931) & (j | 3931);
                                }(e, f, g, e);
                                return (8875 + (a ^ h)) % 65369;
                            }(e, f, g);
                            const h = zk(e, f, g);
                            return (16 << ((a ^ h) >> 0 & 255)) + (0 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 16 & 255));
                        }(e, f, g);
                        const h = Of(e, f, g, e, f, g);
                        return (16 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (8 << ((a ^ h) >> 8 & 255));
                    }(a, j, k);
                })(e, f, g, e, f, g);
                return ~(a & 21529) & (a | 21529);
            }(e, f, g);
            return (2531011 + (40404 + (a ^ h)) * 214013) % 4294967296;
        }(g, a, h))) % 65301;
    }
    og = {
        ⲆⲆⵠⲆⵠᐃⲆ: () => new Promise((a, b) => {
            cj.grecaptcha.ready(function () {
                cj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (yf) {
                        a(0);
                    } else {
                        console.log(undefined);
                        b(c);
                    }
                });
            });
        }),
        ΔⵠΔᐃᐃⵠⲆᐃΔ: function (a) {
            cj.open(a, "_blank").focus();
        },
        ᐃΔⵠΔⵠΔΔ: function (a) {
            cj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ⲆΔⵠⲆⵠⵠΔ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return w;
                }
            }
            return sn;
        },
        ΔᐃⲆⲆⲆΔᐃᐃΔ: function (a, b) {
            if (a.length != b.length) {
                return w;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ⲆΔⵠⲆⵠⵠΔ(a[c], b[c])) {
                        return false;
                    }
                } else if (a[c] != b[c]) {
                    return false;
                }
            }
            return F;
        },
        ⲆⵠΔⵠⲆⵠⲆ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ΔⵠΔⵠⲆΔⲆ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ⲆᐃᐃΔⲆⲆⵠᐃᐃ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ⲆΔⲆⵠΔᐃΔ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ᐃⵠᐃᐃᐃⵠΔ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ᐃⵠᐃΔⲆⵠᐃ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ᐃⲆⵠⵠᐃᐃⲆ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ΔᐃⵠⵠⲆᐃΔ: function (a, b) {
            return Math.asin(this.ⲆΔⲆⵠΔᐃΔ(a, b) / (this.ᐃⵠᐃᐃᐃⵠΔ(a) * this.ᐃⵠᐃᐃᐃⵠΔ(b))) * this.sign(this.ᐃⵠᐃΔⲆⵠᐃ(a, b));
        },
        ΔⵠⲆⵠⵠΔⵠ: function (a) {
            ΔⵠᐃΔΔΔⵠ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ΔⵠᐃΔΔΔⵠ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ᐃⵠΔⵠΔⵠⵠ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ΔᐃⵠⲆΔⵠⵠ: function (a, b) {
            return this.ΔᐃⵠⵠⲆᐃΔ({
                x: 1,
                y: 0
            }, this.ΔⵠΔⵠⲆΔⲆ(a, b));
        },
        ΔⲆⵠᐃ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ⲆΔᐃⵠᐃⵠΔ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ᐃΔⵠᐃΔⵠΔ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ᐃᐃᐃᐃⲆΔΔ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ΔΔⵠᐃⲆⲆⲆᐃΔ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ΔᐃᐃⵠᐃΔᐃⲆᐃ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ⵠᐃᐃΔⵠ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ⵠᐃⵠΔⵠΔⲆ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ⵠᐃΔⲆⵠΔⲆ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ⵠⲆⵠΔⵠΔⲆ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ⵠⵠⲆⲆᐃΔΔᐃⵠ: function (b, c, d) {
            var e = this.ⵠⲆⵠΔⵠΔⲆ();
            var f = this.ⵠⲆⵠΔⵠΔⲆ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ⲆΔᐃⲆᐃⵠᐃⲆᐃ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ⵠⵠΔ = d;
        },
        ΔΔᐃᐃⲆᐃΔΔⵠ: function (a) {
            ⵠΔΔ = [];
            ⵠΔΔ.push.apply(ⵠΔΔ, a);
            var b = [];
            while (ⵠΔΔ.length > 0) {
                var c = Math.floor(Math.random() * ⵠΔΔ.length);
                b.push(ⵠΔΔ[c]);
                ⵠΔΔ.splice(c, 1);
            }
            return b;
        },
        ⵠⵠΔⲆᐃⲆⲆ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ⲆⵠⲆⲆⵠᐃᐃ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ᐃⲆΔΔᐃᐃⲆ: function (a) {
            return a * (2 - a);
        },
        ⲆᐃᐃᐃΔΔΔ: function (a) {
            return --a * a * a + 1;
        },
        ⲆⵠᐃΔᐃ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ΔⲆⲆΔᐃⵠΔ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ⵠⲆᐃⵠΔⲆΔᐃⲆ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ΔⵠⲆΔⵠᐃΔ: function (a) {
            return 1 - --a * a * a * a;
        },
        ⲆΔⵠⵠᐃΔⲆ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ⵠⵠᐃΔ: function (b, c, d, e, f, g) {
            this.ΔΔⲆ = b;
            this.ᐃᐃⲆ = c;
            this.max = d;
            this.min = e;
            this.ⵠᐃΔΔⵠⲆᐃ = f;
            this.ᐃΔⵠⵠⲆΔⲆ = g;
            this.ΔᐃⵠⵠΔⲆⵠ = 0;
            this.ⵠᐃᐃ = function () {
                if (this.ΔΔⲆ) {
                    if ((a = this.ᐃᐃⲆ + yx * this.ⵠᐃΔΔⵠⲆᐃ) > this.max) {
                        this.ᐃᐃⲆ = this.max;
                        this.ΔΔⲆ = false;
                        return nk;
                    }
                    this.ᐃᐃⲆ = a;
                } else {
                    var a;
                    if ((a = this.ᐃᐃⲆ - yx * this.ᐃΔⵠⵠⲆΔⲆ) < this.min) {
                        this.ᐃᐃⲆ = this.min;
                        this.ΔΔⲆ = true;
                    } else {
                        this.ᐃᐃⲆ = a;
                    }
                }
            };
            return false;
        },
        ⲆⲆⵠⵠᐃ: function (b, c, d, e, f, g) {
            this.ΔⵠΔΔⵠ = b;
            this.ⲆⲆⵠΔⵠ = c;
            this.ⲆΔⲆᐃᐃ = d;
            this.ᐃᐃⲆⵠⲆ = e;
            this.x = f;
            this.ⵠⲆⲆΔⵠ = g;
            this.ⵠΔⵠᐃⵠᐃΔ = function () {
                this.x = this.ᐃᐃⲆⵠⲆᐃΔΔⵠ;
                this.ⲆⲆⵠΔⵠ = 0;
            };
            this.ⲆΔⵠⵠᐃΔᐃ = function (a) {
                if (a !== this.ⵠⲆⲆΔⵠ) {
                    this.ⵠⲆⲆΔⵠ = a;
                    this.ᐃᐃⲆⵠⲆ = this.x;
                    this.ⲆⲆⵠΔⵠ = 0;
                }
                if (this.ⵠⲆⲆΔⵠ !== this.x) {
                    this.ⲆⲆⵠΔⵠ += yx;
                    if (this.ⲆⲆⵠΔⵠ > this.ⲆΔⲆᐃᐃ) {
                        this.x = this.ⵠⲆⲆΔⵠ;
                    } else {
                        var b = this.ΔⵠΔΔⵠ(this.ⲆⲆⵠΔⵠ / this.ⲆΔⲆᐃᐃ);
                        this.x = this.ᐃᐃⲆⵠⲆ + (this.ⵠⲆⲆΔⵠ - this.ᐃᐃⲆⵠⲆ) * b;
                    }
                }
            };
        },
        ⵠᐃᐃⲆⵠᐃᐃ: function (b, c, d, e, f, g, a, i, j) {
            this.ΔⵠΔΔⵠ = b;
            this.ⲆⲆⵠΔⵠ = c;
            this.ⲆΔⲆᐃᐃ = d;
            this.ᐃᐃⲆⵠⲆ = e;
            this.Ⲇⵠⵠⵠⵠ = f;
            this.x = g;
            this.y = a;
            this.ⵠⲆⲆΔⵠ = i;
            this.ᐃⲆΔᐃΔⲆᐃ = j;
            this.ⲆΔⵠⵠᐃΔᐃ = function (a) {
                if (a.x != this.ⵠⲆⲆΔⵠ || a.y != this.ᐃⲆΔᐃΔⲆᐃ) {
                    this.ⵠⲆⲆΔⵠ = a.x;
                    this.ᐃⲆΔᐃΔⲆᐃ = a.y;
                    this.ᐃᐃⲆⵠⲆ = this.x;
                    this.Ⲇⵠⵠⵠⵠ = this.y;
                    this.ⲆⲆⵠΔⵠ = 0;
                }
                if (this.ⵠⲆⲆΔⵠ != this.x || this.ᐃⲆΔᐃΔⲆᐃ != this.y) {
                    this.ⲆⲆⵠΔⵠ += yx;
                    if (this.ⲆⲆⵠΔⵠ > this.ⲆΔⲆᐃᐃ) {
                        this.x = this.ⵠⲆⲆΔⵠ;
                        this.y = this.ᐃⲆΔᐃΔⲆᐃ;
                    } else {
                        var b = this.ΔⵠΔΔⵠ(this.ⲆⲆⵠΔⵠ / this.ⲆΔⲆᐃᐃ);
                        this.x = this.ᐃᐃⲆⵠⲆ + (this.ⵠⲆⲆΔⵠ - this.ᐃᐃⲆⵠⲆ) * b;
                        this.y = this.Ⲇⵠⵠⵠⵠ + (this.ᐃⲆΔᐃΔⲆᐃ - this.Ⲇⵠⵠⵠⵠ) * b;
                    }
                }
            };
        },
        ΔΔΔΔΔⲆᐃ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ⲆΔⲆⲆⲆⲆⲆ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ⲆΔⵠⵠⵠ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ⵠⲆⵠᐃᐃⲆᐃ: function (a, b) {
            return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠⵠΔ;
        },
        ᐃⵠⲆᐃⵠⲆΔ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ᐃⵠⵠⲆⲆⲆⵠ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ⵠⵠΔᐃⲆⵠΔ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ⵠΔᐃΔᐃⵠᐃⵠᐃ;
    };
    const Zn = 12;
    (function (a) {
        var b = false;
        if (typeof ΔᐃᐃⲆᐃⲆᐃ === "function" && ΔᐃᐃⲆᐃⲆᐃ.ⲆⲆᐃΔⲆᐃⵠ) {
            ΔᐃᐃⲆᐃⲆᐃ(a);
            b = true;
        }
        if (typeof ΔΔΔᐃᐃᐃⲆ === "object") {
            ⵠΔΔⵠΔΔΔⲆⵠ.exports = a();
            b = sn;
        }
        if (!b) {
            var c = cj.ᐃⵠⵠΔ;
            var d = cj.ᐃⵠⵠΔ = a();
            d.ⲆᐃᐃᐃⲆⲆⵠᐃΔ = function () {
                cj.ᐃⵠⵠΔ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; a < arguments.length; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        j = b({
                            path: "/"
                        }, d.ΔⵠᐃᐃⲆⵠⵠ, j);
                        if (typeof j.expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ᐃΔⲆⵠⵠⲆⲆⵠΔ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (s === e) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ⵠᐃΔᐃᐃⵠⵠⲆΔ = function () {
                return d.apply({
                    json: Dj
                }, [].slice.call(arguments));
            };
            d.ΔⵠᐃᐃⲆⵠⵠ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ⲆⲆᐃⲆⵠᐃⵠⵠⲆ = a;
            return d;
        }(function () { });
    });
    const Xn = 4;
    const $n = kj;
    var eo = document.getElementById("game_canvas");
    var io = eo.getContext("2d");
    const to = 3;
    var no = eo.width;
    const fq = jj;
    const ao = 7;
    const ro = 13;
    var so = eo.height;
    const gq = 100;
    var lo = eo.width / 2;
    var hq = eo.height / 2;
    var iq = {
        x: lo,
        y: hq
    };
    var jq = 1;
    const kq = F;
    var co = 1;
    var lq = -1;
    const mq = 256;
    var Co = "J" + aa;
    var nq = "S" + Qa;
    var oq = cj;
    const zo = 9;
    var yo;
    const pq = 5;
    var Po = (tq = "O") + "N";
    var qq;
    var rq = 0;
    const xo = 0;
    const Jo = 14;
    var Mo = oq;
    const Bo = 8;
    const Eo = 11;
    const Do = 20;
    var Io;
    nq = "N";
    const sq = 15;
    const Qo = 19;
    var _o = "J";
    var tq = "O" + aa;
    const uq = 5;
    const Go = 2;
    var jo = Mo;
    const Lo = 17;
    var Wo;
    const vq = 255;
    const No = 16;
    const qo = 255;
    const Ho = 255;
    var Uo = jo;
    const Yo = 10;
    Po = "N" + undefined;
    var Ko = Uo;
    const Vo = 6;
    var Zo;
    const wq = 11;
    const $o = 100;
    var ea;
    const xq = 7;
    var ta;
    var yq = Ko;
    const oa = 8;
    var aa;
    const zq = 18;
    var sa = yq;
    const ha = 100;
    const la = 12;
    const ua = 13;
    var ba;
    const Aq = kq;
    const va = w;
    var ca = sa;
    _o = "O";
    const Bq = 18;
    const pa = 11;
    const Ca = 3;
    const Ta = ei;
    const fa = 4;
    const za = 1;
    var ya;
    const Cq = 15;
    const Pa = 4;
    const Aa = 3;
    const ka = 255;
    var xa = ca = sa;
    const Ja = 5;
    const Ma = 0;
    const Ba = 256;
    var Ea;
    const Dq = 17;
    const Ia = 19;
    var Sa = xa;
    var Qa = "J" + (ya = "S");
    eo.oncontextmenu = function () {
        return false;
    };
    Co = "J";
    const _a = 16;
    const Fa = 12;
    function Ra(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ᐃΔᐃⵠⵠΔⲆ = 1;
        return b;
    }
    const Eq = 9;
    const ja = 18;
    const La = 9;
    tq = Po;
    const Wa = 20;
    Po = aa;
    const Oa = 100;
    aa = Qa;
    const Na = 11;
    const qa = 14;
    const Ha = Aq;
    const Ua = 5;
    const Ya = 11;
    const Ka = 16;
    tq = Qa;
    Wo = Zo = Qa + (_o += Co = nq);
    const Va = 9;
    const Za = 7;
    nq = _o + Co;
    const Xa = 256;
    const $a = 4;
    ea = yo = qq = Qa + _o;
    tq = Qa + _o;
    const Fq = 10;
    ta = qq;
    Po = Qa + _o;
    ba = Io = yo;
    const Gq = 8;
    const Hq = 2;
    _o = aa = Qa;
    const Iq = 10;
    const Jq = 18;
    const Kq = 17;
    ya = qq;
    Ea = yo;
    const Lq = 5;
    Co = tq;
    var Mq = cj.devicePixelRatio || 1;
    const Nq = $n;
    const Oq = 15;
    const Pq = 13;
    var Qq = io.ⵠⵠⲆⵠᐃΔΔᐃⲆ || io.ⲆᐃⲆⲆΔΔⲆΔΔ || io.ⵠΔⲆⵠΔⲆᐃⲆⲆ || io.ⵠⲆⲆⵠⵠⵠⵠⲆΔ || io.ⲆⲆⲆⵠⲆΔⵠⲆΔ || 1;
    const Rq = 4;
    ;
    const Sq = 17;
    const Tq = 6;
    const Uq = 5;
    function Vq() {
        if (cj.innerWidth != eo.width) {
            eo.width = cj.innerWidth;
            no = eo.width;
            lo = eo.width / 2;
        }
        if (cj.innerHeight != eo.height) {
            eo.height = cj.innerHeight;
            so = eo.height;
            hq = eo.height / 2;
        }
        iq = {
            x: lo,
            y: hq
        };
        var a = eo.width;
        var b = eo.height;
        co = lq === -1 ? Mq / Qq : lq;
        eo.width = a * co;
        eo.height = b * co;
        eo.style.width = a + "px";
        eo.style.height = b + "px";
        io.scale(co, co);
        if (rx) {
            rx.ΔᐃⲆ.ΔΔⵠⲆⵠᐃⲆ = a;
            rx.ΔᐃⲆ.ᐃⵠΔⵠᐃᐃⲆ = b;
        }
        if (zx.ⵠⲆⲆΔⲆ) {
            zx.ⵠᐃᐃ();
        } else if (nx.ⵠⲆⲆΔⲆ) {
            nx.ⵠᐃᐃ();
        } else if (tx.ⵠⲆⲆΔⲆ) {
            tx.ⵠᐃᐃ();
        } else if (sx.ⵠⲆⲆΔⲆ) {
            sx.ⵠᐃᐃ();
        }
    }
    const Wq = 255;
    var Xq = document.getElementById("game_body");
    const Yq = 18;
    const Zq = 14;
    function $q(b, c, d, e) {
        const f = ~(b & 63490) & (b | 63490);
        const g = (1477 + c) % 65521;
        const a = ((d + 59376) * 1664525 + 1013904223) % 4294967296;
        const i = e ^ 39746;
        const j = function (b, c, d, e, f, i) {
            const a = (b | 57586) & ~(b & 57586);
            const j = e ^ 31980;
            const k = (0 << (f >> 16 & 255)) + (8 << (f & 255)) + (24 << (f >> 8 & 255)) + (16 << (f >> 24 & 255));
            const h = (24 << (i >> 16 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 24 & 255)) + (0 << (i & 255));
            const l = Vw(a, ((c + 13281) * 1103515245 + 12345) % 2147483648, ((d + 51433) * 2147483629 + 2147483587) % 2147483647);
            const g = Nn(j, k, h, a);
            return ((2031 + (l ^ g)) * 22695477 + 1) % 4294967296;
        }(f, g, a, i, f, g);
        Ff(a, i, f, g, a, i);
        return (j | 30200) & ~(j & 30200);
    }
    Xq.ondragstart = function () {
        return false;
    };
    Xq.ondrop = function () {
        return _e;
    };
    Xq.onresize = Vq;
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !cj.requestAnimationFrame; ++c) {
            cj.requestAnimationFrame = cj[a[c] + "RequestAnimationFrame"];
            cj.cancelAnimationFrame = cj[a[c] + "CancelAnimationFrame"] || cj[a[c] + "CancelRequestAnimationFrame"];
        }
        if (!cj.requestAnimationFrame) {
            cj.requestAnimationFrame = function (c, d) {
                var e = new Date().getTime();
                var f = Math.max(0, 16 - (e - b));
                var a = cj.setTimeout(function () {
                    c(e + f);
                }, f);
                b = e + f;
                return a;
            };
        }
        if (!cj.cancelAnimationFrame) {
            cj.cancelAnimationFrame = function (a) {
                clearTimeout(a);
            };
        }
    })();
    const _q = nk;
    const ar = 100;
    const br = ei;
    const cr = 6;
    const dr = 1;
    function er(a, b) {
        Pj(Hx, a, b);
        return ((226 + (lt(Gx[0], Gx[1]) ^ lt(Gx[0], Gx[1]))) * 8121 + 28411) % 134456;
    }
    function fr(b, c, d, e, f, g) {
        Oe(Hx, b, c, d, e, f, g);
        return ((95 + (Nf(Gx[0], Gx[1], Gx[2], Gx[3], Gx[4], Gx[5]) ^ Nf(Gx[0], Gx[1], Gx[2], Gx[3], Gx[4], Gx[5]))) * 75 + 74) % 65537;
    }
    function gr(b, c, d, e, f) {
        Nj(Hx, b, c, d, e, f);
        const g = function (b, c, d, e, f, g) {
            Li(Hx, b, c, d, e, f, g);
            const a = Wn(Gx[0], Gx[1], Gx[2], Gx[3]);
            const h = Wf(Gx[4], Gx[5], Gx[0], Gx[1], Gx[2], Gx[3]);
            return ((128 + (a ^ h)) * 16807 + 0) % 2147483647;
        }(Gx[0], Gx[1], Gx[2], Gx[3], Gx[4], Gx[0]);
        ab(Gx[1], Gx[2], Gx[3], Gx[4], Gx[0], Gx[1]);
        return (g | 46114) & ~(g & 46114);
    }
    const hr = function () {
        let e = 0;
        let j = 0;
        let k = 0;
        const q = og.ⲆΔⵠⵠⵠ([115, 116, 97, 99, 107]);
        const o = og.ⲆΔⵠⵠⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
        const a = og.ⲆΔⵠⵠⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
        const r = og.ⲆΔⵠⵠⵠ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
        og.ⲆΔⵠⵠⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
        const s = og.ⲆΔⵠⵠⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
        const h = og.ⲆΔⵠⵠⵠ([105, 110, 100, 101, 120, 79, 102]);
        const l = og.ⲆΔⵠⵠⵠ([77, 97, 116, 104]);
        og.ⲆΔⵠⵠⵠ([99, 101, 105, 108]);
        const g = og.ⲆΔⵠⵠⵠ([102, 108, 111, 111, 114]);
        const u = og.ⲆΔⵠⵠⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
        const b = og.ⲆΔⵠⵠⵠ([115, 101, 110, 100]);
        const d = og.ⲆΔⵠⵠⵠ([115, 105, 103, 110]);
        const v = og.ⲆΔⵠⵠⵠ([102, 105, 108, 108, 82, 101, 99, 116]);
        const c = og.ⲆΔⵠⵠⵠ([103, 117, 105, 102, 121]);
        const m = og.ⲆΔⵠⵠⵠ([101, 118, 97, 108]);
        const p = og.ⲆΔⵠⵠⵠ([83, 101, 116, 116, 105, 110, 103, 115, 46, 88, 114, 97, 121]);
        const w = og.ⲆΔⵠⵠⵠ([67, 66, 79]);
        const x = og.ⲆΔⵠⵠⵠ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
        function f(a) {
            try {
                a();
            } catch (a) {
                if (a[q][h](s) !== -1) {
                    return 1;
                } else {
                    return 0;
                }
            }
            return 0;
        }
        function z(a) {
            try {
                cj[m](a);
                return 1;
            } catch (a) {
                return 0;
            }
        }
        return {
            ⵠⵠⵠⲆⵠⲆᐃ: function () {
                j++;
                if (j > 1000) {
                    j = 0;
                    e = f(cj[o][a][r]) || e;
                    e = f(cj[o][a][v]) || e;
                    e = f(cj[u][a][b]) || e;
                    e = function (a) {
                        try {
                            new a();
                        } catch (a) {
                            if (a[q][h](s) !== -1) {
                                return 1;
                            } else {
                                return 0;
                            }
                        }
                        return 0;
                    }(cj[u]) || e;
                    e = z(x) || e;
                    e = z(w) || e;
                    e = z(p) || e;
                    if (cj[c] !== fq) {
                        e = 1;
                    }
                }
                if (e === 1) {
                    k++;
                    if (k > 10000) {
                        k = 0;
                        cj[l][g] = cj[l][d];
                    }
                }
            },
            ΔⲆⲆⵠΔⲆᐃ: function () {
                return e;
            }
        };
    }();
    function ir(b, c, d, e) {
        const f = ((28435 + b) * 22695477 + 1) % 4294967296;
        const g = ~(c & 46280) & (c | 46280);
        const a = (d + 25068) % 65330;
        const h = e ^ 49840;
        return ((32672 + (zt(f, g, a) ^ zw(h, f, g, a, h))) * 1664525 + 1013904223) % 4294967296;
    }
    const kr = 19;
    function lr(b, c, d, e, f) {
        Xe(Hx, b, c, d, e, f);
        const g = function (b, c, d, e, f) {
            ek(Hx, b, c, d, e, f);
            const g = function (a, b, c) {
                Xj(Hx, a, b, c);
                const d = Wf(Gx[0], Gx[1], Gx[2], Gx[0], Gx[1], Gx[2]);
                const e = function (b, c, d, e, f, g) {
                    Hi(Hx, b, c, d, e, f, g);
                    const a = Wn(Gx[0], Gx[1], Gx[2], Gx[3]);
                    gr(Gx[4], Gx[5], Gx[0], Gx[1], Gx[2]);
                    return a ^ 53447;
                }(Gx[0], Gx[1], Gx[2], Gx[0], Gx[1], Gx[2]);
                return (8 << ((d ^ e) >> 8 & 255)) + (16 << ((d ^ e) >> 24 & 255)) + (0 << ((d ^ e) >> 16 & 255)) + (24 << ((d ^ e) >> 0 & 255));
            }(Gx[0], Gx[1], Gx[2]);
            const a = Nf(Gx[3], Gx[4], Gx[0], Gx[1], Gx[2], Gx[3]);
            return (31061 + (g ^ a)) % 65329;
        }(Gx[0], Gx[1], Gx[2], Gx[3], Gx[4]);
        fr(Gx[0], Gx[1], Gx[2], Gx[3], Gx[4], Gx[0]);
        return ~(g & 12750) & (g | 12750);
    }
    var mr = navigator.language || navigator.userLanguage;
    const nr = 255;
    var or = -new Date().getTimezoneOffset() / 60;
    var pr = "Europe";
    const rr = 16;
    var jr = "South America";
    const sr = 4;
    const tr = 18;
    var ur = pr;
    if (or >= -2 && or <= 2) {
        ur = pr;
    } else if (or > 2 && or <= 5) {
        ur = "Russia";
    } else if (or > 5 && or <= 9) {
        ur = "Asia";
    } else if (or > 9) {
        ur = "Australia";
    } else if (or >= -5 && or < -2) {
        ur = mr === "pt-BR" || mr === "pt-br" || mr === "pt" || mr === "pt-pt" ? jr : "North America";
    } else if (or < -5) {
        ur = mr === "pt-BR" || mr === "pt-br" || mr === "pt" || mr === "pt-pt" ? jr : "West America";
    }
    var Ek = {
        ⲆⲆⲆⲆⲆΔΔ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor((b - 1) * Math.random());
            this.ᐃᐃᐃⲆΔ = function (a) {
                c = a || Math.floor((b - 1) * Math.random());
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    (function b() {
        const c = {
            ΔⵠⲆⲆⵠᐃⵠᐃᐃ: 0
        };
        let d = 0;
        for (let a in c) {
            d = a;
        }
        const f = [];
        for (let a = 0; a < 12; a++) {
            f.push(cj.Math.floor(1 + cj.Math.random() * 10));
        }
        let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
        for (let a = 0; a < f[1]; a++) {
            g += f[a] + ";debugger;";
        }
        for (let a = 0; a < f[2]; a++) {
            g += "debugger;";
        }
        g += "}";
        const e = new cj.Function(g);
        cj.setTimeout(b, 10000);
        e();
    })();
    const vr = 11;
    function qr(a, b, c) {
        Mj(Hx, a, b, c);
        return (25861 + (gr(Gx[0], Gx[1], Gx[2], Gx[0], Gx[1]) ^ function (a, b, c, d) {
            Fi(Hx, a, b, c, d);
            const e = lr(Gx[0], Gx[1], Gx[2], Gx[3], Gx[0]);
            Wf(Gx[1], Gx[2], Gx[3], Gx[0], Gx[1], Gx[2]);
            return e ^ 22615;
        }(Gx[2], Gx[0], Gx[1], Gx[2]))) % 65503;
    }
    var wr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    var xr = 0;
    const yr = String.fromCharCode;
    const zr = yr(101);
    const Ar = yr(118);
    const Br = yr(97);
    const Cr = yr(108);
    const Dr = _q;
    var Er = {
        ᐃΔᐃᐃΔ: ["#133A2B", "#042b30"],
        ΔᐃⵠⵠⲆⲆΔⲆⲆ: ["#EBF2F0", "#136167"],
        ⵠΔᐃᐃⵠⲆᐃ: ["#4EB687", "#187484"],
        ⲆᐃᐃΔᐃⵠⵠ: ["#664516", "#13474C"],
        ⲆⲆΔⲆᐃⲆⵠ: ["#FCEFBB", "#0F4D48"],
        ⲆΔⵠⵠᐃⵠᐃ: ["#C1AA7E", "#0F423D"],
        ΔΔΔᐃᐃⵠⲆ: ["#594837", "#163A3A"],
        ⵠⲆⲆᐃⲆⲆΔ: ["#A5D6D6", "#539CA0"],
        ⲆᐃⲆᐃⵠ: ["#0B6A84", "#09373F"],
        ⵠⲆᐃⲆᐃⲆⲆ: ["#2A8B9B", "#0F464C"],
        ΔⲆⵠⵠΔᐃⲆ: ["#A9D6D3", "#115E60"],
        ΔⵠⵠⲆᐃⲆⵠ: ["#ECF7F9", "#539CA0"],
        ⵠᐃᐃΔⲆᐃⲆ: ["#FFF", "#FFF"],
        ⲆΔᐃᐃⵠᐃᐃ: ["#FFF", "#FFF"],
        ᐃᐃⲆⵠΔᐃᐃ: ["#1C9BA4", "#00272F"],
        ⲆⵠⵠΔᐃ: ["#2D2017", "#031C1E"],
        ᐃⲆΔ: 0,
        ⲆⲆⲆ: 1,
        ᐃΔⲆⲆⵠⲆⲆΔⵠ: 2300,
        ⵠⲆⵠⵠⵠⵠⲆⲆⲆ: 2290,
        ⵠᐃᐃⲆⵠⲆᐃ: 34,
        ⵠⲆⲆᐃΔⲆⲆ: 5,
        ⵠⵠⲆΔⵠΔⲆ: 68,
        ΔᐃᐃᐃⵠΔⲆ: 34,
        ᐃᐃⵠⵠⵠΔΔ: 5,
        ᐃⲆᐃⵠⵠⲆᐃ: 1,
        ⲆⵠⲆΔⵠⲆⲆ: 0.6,
        ⲆᐃᐃⵠᐃⲆᐃ: 0.25,
        ⵠᐃΔᐃⵠⲆΔ: 50,
        ΔᐃΔΔᐃⵠᐃ: 10,
        ⲆᐃⵠⲆⲆΔⵠ: 75,
        ⲆΔΔᐃᐃⵠᐃ: 20,
        ᐃᐃⵠⲆⵠⵠⵠ: 5,
        ᐃⲆΔᐃΔ: 0,
        ⵠⵠⵠΔΔ: 1,
        ⵠⵠⵠⲆⵠ: 2,
        ᐃⵠᐃⵠⵠ: 3,
        ΔᐃⲆᐃᐃ: 4,
        ΔⲆΔⲆⲆ: 5,
        ⲆᐃΔⲆᐃ: 6,
        ⵠⵠΔⵠᐃ: 7,
        ᐃⵠⵠⲆⵠ: 8,
        ᐃΔⲆᐃΔ: 9,
        ⵠⲆᐃΔΔ: 10,
        ⵠΔⲆΔΔ: 11,
        ⵠⵠⲆⲆⵠ: 12,
        ⵠΔᐃⲆΔ: 13,
        ⲆΔᐃⵠΔ: 14,
        ΔΔΔⵠⲆ: 15,
        ⲆⲆⵠⵠΔ: 16,
        ΔⵠᐃᐃⲆ: 17,
        ᐃⲆⵠⲆΔ: 18,
        ᐃⵠΔⲆⵠ: 19,
        ⵠΔⲆᐃⵠ: 20,
        ⲆⵠΔᐃᐃ: 21,
        ΔᐃⵠΔⲆ: 22,
        ⵠᐃⲆⵠⲆ: 23,
        ΔⵠⲆⵠΔ: 24,
        ᐃΔⲆᐃᐃ: 25,
        ᐃᐃⲆⲆΔ: 26,
        ΔᐃⲆΔⲆ: 27,
        ΔⲆᐃⵠⲆ: 28,
        ΔⵠᐃΔ: 29,
        ⵠⲆᐃⲆΔ: 30,
        ᐃΔᐃⵠΔ: 31,
        ⲆᐃⲆⵠⲆ: 32,
        ⵠΔⵠⵠⲆ: 33,
        ⲆΔⲆΔᐃ: 34,
        ⵠⲆⵠⲆΔ: 35,
        ⲆᐃⵠΔΔ: 36,
        ⵠᐃⵠΔᐃ: 37,
        ⵠΔᐃᐃᐃ: 38,
        ᐃⲆⵠΔΔ: 39,
        ᐃᐃⵠⲆⵠ: 40,
        ⲆΔⵠⲆᐃ: 41,
        ᐃΔⲆⲆΔ: 42,
        ⲆⵠⲆⵠⵠ: 43,
        ΔΔⵠⲆⵠ: 44,
        ⲆᐃᐃΔᐃ: 45,
        ᐃΔΔⵠᐃ: 46,
        ⵠⲆᐃⵠΔ: 47,
        ⲆⲆᐃⵠⵠ: 48,
        ᐃΔⵠⲆⵠ: 49,
        ⲆⲆᐃΔᐃ: 50,
        ΔⲆⵠΔᐃ: 51,
        ᐃⵠⵠΔΔ: 52,
        ⵠΔᐃᐃⲆ: 53,
        ΔⲆᐃᐃⲆ: 54,
        ΔⲆⵠⲆⵠ: 55,
        ⵠᐃⲆⲆⵠ: 56,
        ⵠᐃⲆⵠᐃ: 57,
        ᐃᐃⲆΔⵠ: 58,
        ΔᐃⲆΔΔ: 59,
        ⵠⵠⲆᐃΔ: 60,
        ⵠΔΔΔⵠ: 61,
        ᐃⲆⵠⲆⲆ: 62,
        ⵠⵠⵠᐃⲆ: 63,
        ΔΔⲆⵠᐃ: 64,
        ⵠⵠΔᐃᐃ: 65,
        ⵠᐃᐃᐃⲆ: 66,
        ⵠⲆⵠᐃⵠ: 67,
        ᐃⵠⲆΔⲆ: 68,
        ⵠⵠΔᐃⲆ: 69,
        ΔᐃⲆⵠⵠ: 70,
        ΔΔΔⲆΔ: 71,
        ᐃⵠⵠⵠᐃ: 72,
        ᐃΔⵠⵠⲆ: 73,
        ⲆΔΔⲆⵠ: 74,
        ⵠᐃⲆⵠΔ: 75,
        ΔⲆΔⲆᐃ: 76,
        ⵠⲆⲆⵠⵠ: 77,
        ⲆⵠⲆΔΔ: 78,
        ΔⵠᐃⲆⵠ: 79,
        ᐃⵠᐃΔⲆ: 80,
        ᐃⵠᐃⲆᐃ: 81,
        ⵠⵠΔⵠⲆ: 82,
        ⵠΔⲆⲆⵠ: 83,
        ᐃⲆⲆⵠⵠ: 84,
        Ⲇᐃⵠⵠᐃ: 85,
        ΔΔΔΔⵠ: 86,
        ᐃΔᐃⲆⲆ: 87,
        ΔᐃⵠᐃⲆ: 88,
        ⲆⲆΔⵠᐃ: 89,
        ᐃΔⲆᐃⲆ: 90,
        ⵠᐃⵠᐃᐃ: 91,
        ᐃⲆⲆΔⵠ: 92,
        ⲆⲆⵠⲆⵠ: 93,
        ᐃᐃⲆΔΔ: 94,
        ᐃΔⲆⵠΔ: 95,
        ⲆⵠⲆⵠᐃ: 96,
        ⲆⵠⵠⲆⲆ: 97,
        ᐃᐃⵠⲆⲆ: 98,
        ᐃᐃᐃΔⵠ: 99,
        ᐃᐃⵠΔⲆᐃᐃᐃⲆ: 100,
        ΔᐃⵠⵠΔ: 101,
        ᐃᐃΔΔⵠ: 102,
        ⵠᐃᐃⲆΔ: 103,
        Ⲇᐃⵠⵠⵠ: 104,
        ΔⵠⲆⵠᐃ: 105,
        ⲆⲆΔⲆᐃ: 106,
        ⵠⲆⵠᐃᐃ: 107,
        ⲆⵠⲆⲆⲆ: 108,
        ΔᐃᐃⲆ: 109,
        ΔⲆΔⲆΔ: 110,
        ᐃΔⲆΔ: 111,
        ⵠⵠⵠⵠ: 112,
        ⲆⵠᐃⲆΔΔΔ: 113,
        ΔⲆⲆᐃⵠ: 114,
        ΔᐃⵠⲆΔΔⵠ: 115,
        ᐃΔΔᐃⵠ: 116,
        ΔⲆᐃΔⵠ: 117,
        ᐃΔⲆΔⲆᐃⵠ: 118,
        ΔᐃⲆⲆⵠᐃΔ: 119,
        ᐃᐃⲆᐃΔ: 120,
        ⲆⲆΔΔ: 121,
        ᐃᐃⲆΔᐃ: 122,
        ΔⵠΔᐃⲆ: 123,
        ⵠᐃⵠⲆΔΔᐃ: 124,
        ᐃⲆⵠᐃⲆ: 125,
        ⵠⵠΔⵠⵠ: 126,
        Ⲇⵠᐃᐃᐃ: 127,
        ⲆᐃΔΔᐃ: 128,
        ⲆᐃⵠΔⵠ: 129,
        ⲆΔΔΔⵠ: 130,
        ⵠΔΔⵠᐃ: 131,
        ᐃΔⵠᐃⵠ: 132,
        ᐃΔᐃⲆΔ: 133,
        ⲆⵠΔᐃΔ: 134,
        ᐃᐃᐃⲆⲆ: 135,
        ⵠᐃⵠⲆᐃ: 136,
        ⲆⵠⲆΔⵠ: 137,
        ᐃⲆΔᐃⵠ: 138,
        Ⲇᐃᐃⵠᐃ: 139,
        ΔⲆᐃⵠⲆⲆΔ: 140,
        ⲆⵠΔⵠⵠ: 141,
        ⲆⵠⲆⲆⲆⵠⵠ: 142,
        ᐃᐃΔⵠᐃΔΔ: 143,
        ᐃⵠⵠⵠⲆΔᐃ: 144,
        ⲆΔᐃⲆⵠΔΔ: 145,
        ΔΔΔⵠᐃ: 146,
        ᐃΔᐃⲆⵠ: 147,
        ⲆⲆⵠᐃᐃ: 148,
        ΔⲆⵠⵠⵠ: 149,
        ⲆⲆⲆⵠⲆ: 150,
        Δᐃᐃⵠᐃ: 151,
        ᐃᐃᐃᐃⵠ: 152,
        ⲆΔⲆΔΔ: 153,
        ⵠΔⵠᐃᐃ: 154,
        ΔⵠⲆⵠⵠ: 155,
        Δⵠᐃⵠⵠ: 156,
        ΔⲆᐃᐃᐃ: 157,
        ᐃᐃΔⵠᐃ: 158,
        ᐃΔⵠΔⵠ: 159,
        ΔΔⵠⲆᐃ: 160,
        ⲆΔⵠᐃⵠ: 161,
        ΔᐃᐃⵠⲆ: 162,
        ΔⲆⵠⲆΔ: 163,
        ᐃΔⵠⵠΔ: 164,
        ΔⲆⵠᐃⲆ: 165,
        ᐃⵠΔΔⲆΔᐃ: 166,
        ⲆⵠⵠᐃⲆ: 167,
        ⵠΔⵠⲆᐃ: 168,
        ⵠᐃΔᐃΔ: 169,
        ⵠΔΔⲆᐃ: 170,
        ⲆⲆⲆⵠᐃⲆⵠ: 171,
        ⵠⵠⵠΔⵠⵠⵠ: 172,
        ⵠΔⵠⵠᐃⵠΔ: 173,
        ΔΔⵠΔⵠ: 174,
        ⲆⵠⲆᐃΔΔΔ: 175,
        ⵠⲆΔᐃΔⲆΔ: 176,
        ΔⵠᐃⲆᐃΔⲆ: 177,
        ⲆΔⵠΔᐃⲆⵠ: 178,
        ⲆⵠⵠᐃΔⵠⵠ: 179,
        ΔΔⲆᐃΔΔⲆ: 180,
        ᐃⲆΔⲆΔᐃⵠ: 181,
        ⵠⵠᐃⵠⵠΔΔ: 182,
        ⲆᐃⲆΔⵠ: 183,
        ⵠΔᐃⲆᐃ: 184,
        ᐃΔⲆΔᐃ: 185,
        ⲆⵠⵠΔⵠ: 186,
        ΔᐃⵠⲆᐃ: 187,
        ᐃⵠⲆᐃⲆᐃⵠ: 188,
        ⲆΔΔⵠⲆ: 189,
        Δᐃᐃⵠⵠ: 190,
        ΔᐃΔΔⲆᐃⲆ: 191,
        ⵠⲆΔΔⲆ: 192,
        ⵠᐃⲆⲆⲆΔⲆ: 193,
        ᐃᐃⲆⵠᐃ: 194,
        ΔⵠⵠᐃΔ: 195,
        ⲆᐃⵠⵠⵠΔⲆ: 196,
        ⲆⵠΔⲆⲆΔᐃ: 197,
        ΔⵠⲆΔΔ: 198,
        ΔᐃΔⲆᐃ: 199,
        ⲆⲆΔⵠΔΔⲆ: 200,
        ⲆΔᐃᐃⵠ: 201,
        ⵠᐃⲆⲆ: 202,
        ᐃᐃᐃⲆⵠ: 203,
        ΔΔⵠⵠⵠᐃᐃ: 204,
        ᐃᐃⲆⵠΔ: 205,
        ᐃΔΔⲆΔᐃⵠ: 206,
        ⲆᐃⲆΔΔ: 207,
        ᐃΔᐃΔᐃᐃⲆ: 208,
        ᐃΔΔⲆΔ: 209,
        ᐃΔⲆⲆⵠᐃⵠ: 210,
        ⲆⲆⲆⲆᐃΔᐃ: 211,
        ᐃⵠⲆΔⵠ: 212,
        ΔⵠΔⵠᐃ: 213,
        ΔΔᐃⲆⲆ: 214,
        ⵠⲆⲆⵠⲆ: 215,
        ⲆⲆⲆΔᐃ: 216,
        ᐃᐃⲆΔⲆ: 217,
        ⲆⵠᐃⵠΔ: 218,
        ⲆⲆᐃᐃⲆ: 219,
        ⵠⵠⲆⵠⵠ: 220,
        ΔᐃⵠΔΔ: 221,
        ᐃΔΔᐃᐃ: 222,
        ΔⲆⲆⵠᐃ: 223,
        ΔᐃⲆΔᐃ: 224,
        ᐃⵠΔᐃᐃΔΔ: 225,
        ⵠⵠⲆΔⲆΔᐃ: 226,
        ⲆᐃᐃⲆⵠ: 227,
        ⲆΔⵠᐃΔⲆⲆ: 228,
        ᐃᐃᐃΔⲆ: 229,
        ⲆΔᐃⲆΔ: 230,
        ⵠᐃΔⲆΔ: 231,
        ΔⲆⲆΔᐃ: 232,
        ⲆⵠΔΔᐃ: 233,
        ⲆⵠΔᐃᐃΔⵠ: 234,
        ᐃΔᐃΔΔ: 235,
        ⵠᐃⵠⵠᐃ: 236,
        ᐃᐃᐃᐃⲆ: 237,
        ⲆΔΔΔⲆ: 238,
        ⵠⲆⵠᐃΔ: 239,
        ⵠⲆⲆⲆΔ: 240,
        ⲆⵠⵠⲆᐃ: 241,
        ᐃⲆΔⵠⲆ: 242,
        ᐃⲆⲆⲆᐃⲆⲆ: 243,
        ΔⵠΔΔⲆ: 244,
        ᐃⲆⵠⲆᐃ: 245,
        ⲆⲆΔΔΔⲆᐃ: 246,
        ΔΔΔΔⲆ: 247,
        ᐃⲆΔⲆΔ: 248,
        ΔΔⲆᐃⲆⵠᐃ: 249,
        ΔⵠⵠΔᐃ: 250,
        ⵠⵠⵠⲆᐃ: 251,
        ᐃΔⵠΔᐃⵠⲆ: 252,
        ⲆⲆΔⲆⲆⲆⲆ: 253,
        ⵠⲆⵠⲆⲆᐃᐃ: 254,
        ⲆΔⵠᐃᐃΔᐃ: 255,
        ⲆᐃⵠⲆΔᐃᐃ: 256,
        ᐃⲆⵠᐃΔΔΔ: 257,
        Ⲇⵠᐃᐃᐃⵠᐃ: 258,
        ⲆᐃΔⲆⲆᐃΔ: 259,
        Ⲇⵠᐃⵠⵠ: 260,
        ⵠⲆⲆΔΔΔⵠ: 261,
        ᐃⵠⲆⲆΔΔΔ: 262,
        ⲆⵠⲆⵠᐃⵠⲆ: 263,
        ⵠⲆΔⵠⲆ: 264,
        ᐃΔᐃⲆΔᐃⲆ: 265,
        ⵠᐃⵠⲆⵠᐃΔ: 266,
        ᐃⵠⲆⵠⵠⲆⲆ: 267,
        ᐃΔΔᐃⲆⲆⵠ: 268,
        ᐃⵠⵠᐃⵠᐃΔ: 269,
        ΔᐃⵠⵠⵠᐃΔ: 270,
        ΔΔⵠⲆⲆⵠΔ: 271,
        ⵠΔⲆᐃᐃΔᐃ: 272,
        ⲆⵠᐃⵠᐃⲆⵠ: 273,
        ⵠⵠⵠⲆᐃᐃᐃ: 274,
        ΔᐃᐃⲆⵠⵠᐃ: 275,
        ΔΔᐃΔΔᐃⵠ: 276,
        ᐃⵠᐃⲆⵠⲆⵠ: 277,
        ⲆⵠⲆΔΔΔΔ: 278,
        ΔⲆⵠⲆ: 279,
        ᐃΔⵠⵠᐃ: 280,
        ΔΔⲆΔΔⲆⵠ: 281,
        ᐃⵠⵠΔⲆⵠᐃ: 282,
        ⵠᐃ: 283,
        ⲆⵠⵠᐃⵠᐃΔ: 284,
        ⲆⵠⲆᐃⲆ: 285,
        ΔⲆⵠⲆⲆ: 286,
        ⵠΔⲆΔⵠⲆⲆ: 287,
        ⵠΔΔΔΔ: 288,
        ⲆⲆΔⵠⵠⲆⲆ: 289,
        ᐃⲆΔΔᐃᐃᐃ: 290,
        ⵠΔⲆᐃⲆᐃᐃ: 291,
        ᐃⵠΔⵠᐃⵠⵠ: 292,
        ΔᐃΔⵠⲆⵠᐃ: 293,
        ⵠⲆⲆᐃᐃ: 294,
        ᐃⵠΔⵠΔᐃⲆ: 295,
        ⲆΔⲆᐃⵠΔⵠ: 296,
        ⵠⵠΔᐃⲆᐃⵠ: 297,
        ΔⲆΔΔⵠᐃⲆ: 298,
        ΔⲆⵠᐃᐃ: 299,
        ⵠΔⲆΔᐃⵠⲆ: 300,
        ΔΔⵠⵠΔⵠⵠ: 301,
        ⵠⲆΔᐃⲆⲆᐃ: 302,
        ⵠⵠᐃⲆⲆⲆᐃ: 303,
        ᐃⵠⲆΔΔΔᐃ: 304,
        ⵠⵠᐃⲆⲆᐃᐃ: 305,
        ⵠⵠⵠᐃⵠᐃⵠ: 306,
        ΔⵠΔⵠΔ: 307,
        Δⵠᐃⵠᐃⵠᐃ: 308,
        ⲆᐃΔΔΔᐃᐃ: 309,
        ⵠⵠΔΔⵠᐃᐃ: 310,
        ΔΔΔᐃΔⲆᐃ: 311,
        ⵠⲆⲆΔΔᐃΔ: 312,
        ᐃⵠᐃⵠⲆᐃⵠ: 313,
        ⵠⲆⲆⵠⲆΔΔ: 314,
        ⵠⲆΔⵠⲆΔⲆ: 315,
        ᐃⵠᐃΔᐃⲆΔ: 316,
        ΔᐃΔⲆᐃᐃⵠ: 317,
        ⲆⵠΔⲆᐃⲆⲆ: 318,
        Ⲇᐃⵠᐃᐃⵠⵠ: 319,
        ᐃⲆᐃΔⵠⲆⵠ: 320,
        ᐃᐃⵠᐃⲆ: 321,
        ⲆⲆᐃΔΔⲆⵠ: 322,
        ᐃᐃᐃⲆΔⲆⲆ: 323,
        ᐃΔⵠⵠᐃΔΔ: 324,
        ⲆᐃᐃΔᐃΔᐃ: 325,
        ⵠⲆΔⲆⲆⲆᐃ: 326,
        ⲆⲆⵠΔⲆᐃᐃ: 327,
        ᐃΔᐃΔⵠⵠΔ: 328,
        ⲆⲆⵠⵠΔⲆᐃ: 329,
        ⲆᐃΔⵠⲆⵠⲆ: 330,
        ΔⵠᐃⲆⵠΔΔ: 331,
        ΔⲆⲆⲆΔⵠΔ: 332,
        ΔΔⵠⲆΔΔΔ: 333,
        ⲆΔᐃⵠⲆⵠⵠ: 334,
        ⲆⵠⲆⲆΔΔΔ: 335,
        ΔᐃⵠⵠΔΔⲆ: 336,
        ᐃⲆⲆⵠΔΔᐃ: 337,
        ΔᐃⵠᐃⲆⲆΔ: 338,
        ⵠᐃⲆᐃⵠⲆᐃ: 339,
        ΔⵠᐃᐃΔⲆᐃ: 340,
        ⲆΔΔⵠⵠΔΔ: 341,
        ᐃⲆᐃΔⲆΔᐃ: 342,
        ᐃΔΔⲆⲆⵠΔ: 343,
        ⵠⲆΔⵠⲆⵠΔ: 344,
        ΔⵠᐃΔⲆⲆⲆ: 345,
        ⲆⲆⲆΔⵠⲆΔ: 346,
        ᐃᐃᐃΔᐃᐃᐃᐃⲆ: 347,
        ᐃⲆⲆᐃᐃⵠⲆ: 348,
        ΔΔᐃᐃΔⲆΔ: 349,
        Ⲇᐃⵠᐃᐃᐃᐃ: 350,
        ⲆⵠⲆΔᐃⲆⵠ: 351,
        ᐃⵠⵠᐃⲆΔⵠ: 352,
        ⲆⵠⲆⲆⲆⵠΔ: 353,
        ᐃΔΔΔⲆᐃᐃ: 354,
        ᐃⲆᐃᐃⲆⵠᐃ: 355,
        ⵠᐃⵠⵠΔⲆᐃ: 356,
        ⵠⲆⲆΔᐃΔⲆ: 357,
        ⵠᐃⵠⲆΔᐃⲆ: 358,
        ᐃⲆⵠᐃΔⲆᐃ: 359,
        ⲆⵠΔΔⲆⵠⵠ: 360,
        ⲆᐃᐃΔⵠⵠⵠ: 361,
        ⲆⵠΔⵠΔⲆΔ: 362,
        ⲆⲆⵠⵠᐃᐃΔ: 363,
        ᐃⲆⵠΔΔⵠᐃ: 364,
        ᐃΔΔΔᐃΔⵠ: 365,
        ᐃⲆⵠΔⲆΔⵠ: 366,
        ᐃⵠᐃΔᐃᐃΔ: 367,
        ⲆΔᐃⲆⵠⲆᐃ: 368,
        ᐃⲆⵠⲆΔΔᐃ: 369,
        ⵠΔⲆᐃΔⵠΔ: 370,
        ⲆΔⲆⵠⲆⵠⵠ: 371,
        ⵠΔⵠΔⵠᐃⵠ: 372,
        ⵠⵠⵠΔΔⵠᐃ: 373,
        ⲆᐃᐃᐃΔⲆⲆ: 374,
        ΔΔⲆⲆΔᐃⵠ: 375,
        ΔⲆΔⲆⲆⲆⲆ: 376,
        ⲆΔⲆⲆⵠⵠⲆ: 377,
        ⵠΔᐃᐃⲆΔΔ: 378,
        ᐃΔᐃᐃⵠⲆⵠ: 379,
        ⵠΔᐃⵠⲆⵠΔ: 380,
        ⲆΔⲆᐃⲆᐃᐃ: 381,
        ⵠⵠᐃΔΔⵠᐃ: 382,
        ⲆⲆⵠΔⵠⲆΔ: 383,
        ⵠᐃᐃⵠⵠⲆᐃ: 384,
        ᐃΔᐃⵠⲆⲆⵠ: 385,
        ⵠΔᐃⲆΔᐃⲆ: 386,
        ⲆⵠΔΔΔⲆⵠ: 387,
        ΔᐃᐃΔⵠⵠᐃ: 388,
        ΔΔⵠⵠᐃⲆΔ: 389,
        Ⲇⵠⵠⵠᐃⵠᐃ: 390,
        ⲆΔⵠᐃⲆⲆᐃ: 391,
        ᐃⵠᐃⵠⵠᐃᐃ: 392,
        ⵠⲆΔᐃⵠᐃⲆ: 393,
        ⲆⵠⲆⵠᐃⵠΔ: 394,
        ΔⵠⲆᐃⵠᐃᐃ: 395,
        ᐃΔᐃⲆⵠΔΔ: 396,
        ⲆᐃⲆᐃᐃᐃⲆ: 397,
        ⵠⲆⵠⵠᐃⲆⲆ: 398,
        ᐃΔⲆⲆΔᐃΔ: 399,
        ΔΔΔΔΔⵠᐃ: 400,
        ⲆΔᐃᐃᐃⵠᐃ: 401,
        ⵠⵠΔΔⵠⵠⲆ: 402,
        ᐃΔᐃᐃΔᐃⲆ: 403,
        ᐃᐃΔΔΔΔⲆ: 404,
        ΔⲆⵠΔᐃΔⵠ: 405,
        ⲆⲆΔⲆⵠΔⲆ: 406,
        ΔⲆΔⵠⵠⵠΔ: 407,
        ΔᐃΔⲆⲆⵠΔ: 408,
        ΔΔᐃᐃⵠⵠΔ: 409,
        ᐃᐃᐃⵠᐃⵠΔ: 410,
        ᐃΔⲆᐃᐃⲆⲆ: 411,
        ΔᐃΔᐃᐃⲆⵠ: 412,
        ᐃⵠⲆⲆⲆ: 413,
        ᐃΔᐃᐃΔᐃⲆⲆⲆ: 414,
        ⵠΔⲆᐃΔ: 415,
        ⵠⵠⵠⵠⵠ: 416,
        ⲆΔᐃᐃᐃᐃⵠⵠⵠ: 417,
        ΔⵠΔⲆⵠᐃΔ: 418,
        ΔᐃⲆᐃΔ: 419,
        ⵠⵠᐃⲆⵠⲆᐃ: 420,
        ᐃᐃΔⵠⵠⲆΔ: 421,
        ᐃⲆⵠᐃΔΔᐃ: 422,
        ΔΔⵠⵠⵠᐃⲆ: 423,
        ΔⲆⲆΔⲆⵠΔ: 424,
        ᐃᐃΔⵠΔΔΔ: 425,
        ᐃΔⲆΔΔⵠⲆ: 426,
        ⵠⲆⵠᐃⲆⵠΔ: 427,
        ΔⵠⵠΔⲆⵠᐃ: 428,
        ⵠⲆΔΔⲆⲆᐃ: 429,
        ⲆⲆᐃⲆΔᐃᐃ: 430,
        ᐃᐃⵠΔⵠⵠⲆ: 431,
        ΔΔᐃⵠⲆⲆⲆ: 432,
        ᐃΔⵠⵠᐃᐃⵠ: 433,
        ⲆⲆⵠⲆᐃᐃᐃ: 434,
        ᐃᐃⲆᐃⵠᐃⵠ: 435,
        ⵠΔⵠᐃΔⲆΔ: 436,
        ΔᐃⵠⲆⲆⵠΔ: 437,
        ᐃⵠⵠⵠΔⲆΔ: 438,
        ⵠᐃⲆⵠᐃΔⲆ: 439,
        ⵠⵠΔᐃⵠᐃⵠ: 440,
        ᐃᐃΔᐃⵠⵠᐃ: 441,
        ΔⲆᐃⵠⵠΔΔ: 442,
        ΔΔΔΔᐃⵠⵠ: 443,
        ΔⵠᐃⵠⵠᐃⲆΔⵠ: 444,
        ᐃⲆΔⵠᐃ: 445,
        ΔⵠᐃΔᐃᐃⵠ: 446,
        ⵠΔΔᐃΔᐃΔ: 447,
        ΔⵠᐃᐃⲆⵠᐃⲆⵠ: 448,
        ⲆⲆᐃⲆΔ: 449,
        ⵠⲆᐃᐃΔ: 450,
        ⵠᐃⲆᐃⲆᐃⲆ: 451,
        ⲆⵠᐃΔⲆᐃⵠ: 452,
        ⵠⵠⲆΔⲆⲆᐃ: 453,
        ΔⲆⲆⲆⲆΔⲆ: 454,
        ᐃⵠⵠΔᐃⲆⵠ: 455,
        ᐃΔΔⲆᐃΔⵠ: 456,
        ᐃⲆΔⲆᐃΔᐃ: 457,
        ᐃᐃΔᐃᐃⵠᐃ: 458,
        ᐃᐃΔΔⵠΔΔ: 459,
        ⵠⵠⲆᐃᐃΔⲆ: 460,
        ⵠⲆᐃΔⲆΔⲆ: 461,
        ᐃⲆⵠⲆⵠΔⲆ: 462,
        ᐃᐃΔᐃⵠⵠⵠ: 463,
        ᐃᐃᐃᐃΔⲆⲆ: 464,
        ᐃᐃᐃⲆᐃΔⵠ: 465,
        ΔᐃᐃⵠᐃⵠΔ: 466,
        ᐃΔΔⲆⲆⵠⲆ: 467,
        ΔᐃⲆⵠⵠΔᐃ: 468,
        ⵠΔΔᐃΔⵠΔ: 469,
        ΔΔΔᐃᐃΔΔ: 470,
        ⲆⲆⵠⲆⵠᐃΔ: 471,
        ⲆΔᐃΔᐃⵠᐃ: 472,
        ⵠᐃᐃᐃⵠⲆᐃ: 473,
        ⵠⵠΔⵠⲆᐃⵠ: 474,
        ΔⵠΔΔⵠⲆᐃ: 475,
        ᐃΔⵠᐃᐃᐃⲆ: 476,
        ᐃⲆⵠⵠᐃⵠΔ: 477,
        ⵠΔᐃⵠⵠᐃⲆ: 478,
        ⲆⵠⵠⲆⵠⲆⵠ: 479,
        ᐃᐃΔΔΔΔΔ: 480,
        ΔᐃⲆΔΔᐃᐃ: 481,
        ΔⵠᐃᐃΔⵠⵠ: 482,
        ᐃⵠⲆⵠⵠᐃⵠ: 483,
        ⵠⵠⲆΔΔⵠΔ: 484,
        ⵠᐃᐃⵠⲆⵠΔ: 485,
        ΔⲆᐃΔⲆΔᐃ: 486,
        ⵠᐃᐃΔΔᐃⵠ: 487,
        ᐃΔᐃᐃΔⲆΔ: 488,
        ΔΔᐃᐃⵠⲆΔ: 489,
        ⲆΔΔΔⲆⲆⲆ: 490,
        ⲆᐃⲆΔⲆᐃᐃ: 491,
        ΔᐃΔⲆΔΔΔ: 492,
        ⵠⵠⵠⵠⲆⲆⲆ: 493,
        ⲆⵠⲆⲆΔᐃⵠ: 494,
        ΔⵠⵠΔΔⵠⵠ: 495,
        ⵠⵠⲆⲆⲆᐃᐃ: 496,
        ⲆⵠⲆᐃⲆⲆᐃ: 497,
        ⵠⲆⵠᐃΔⲆᐃ: 498,
        ᐃⲆⵠⵠⵠⵠΔ: 499,
        ⲆⵠⲆⵠⲆΔᐃ: 500,
        ⵠΔᐃᐃⲆᐃΔ: 501,
        ΔΔⲆᐃⵠᐃⲆ: 502,
        ᐃΔΔᐃⵠΔⵠ: 503,
        ⲆⲆΔΔⲆΔΔ: 504,
        ⲆⲆᐃΔⵠᐃⲆ: 505,
        ΔΔᐃⲆᐃⵠⲆ: 506,
        ᐃᐃᐃⲆᐃΔⵠ: 507,
        ⵠⵠⲆᐃⵠΔᐃ: 508,
        ΔΔⲆΔⲆΔΔ: 509,
        ⵠᐃⲆΔⵠⲆⲆ: 510,
        ᐃⲆⵠᐃᐃⲆΔ: 511,
        ⲆⲆᐃᐃⲆΔⲆ: 512,
        ᐃⲆᐃᐃⲆᐃⵠ: 513,
        ΔΔᐃᐃⵠᐃⲆ: 514,
        ΔⲆΔⲆⲆⵠⵠ: 515,
        ⲆΔΔΔⵠⲆᐃ: 516,
        ᐃⲆⵠΔᐃⵠᐃ: 517,
        ᐃⲆⵠᐃⵠᐃᐃ: 518,
        ᐃᐃᐃⵠⵠΔⵠ: 519,
        ΔΔⲆΔⵠⵠⲆ: 520,
        ⵠⲆⵠⵠᐃΔᐃ: 521,
        ΔΔⲆΔᐃΔⵠ: 522,
        ⵠⲆᐃΔΔᐃⲆ: 523,
        ⵠᐃⵠⲆᐃΔⲆ: 524,
        ⲆᐃⲆⲆⲆⵠᐃ: 525,
        ⲆΔᐃᐃᐃᐃⲆ: 526,
        ᐃΔΔΔΔᐃⵠ: 527,
        ⲆΔⵠⲆⵠⲆⲆ: 528,
        ΔΔᐃⵠᐃΔΔ: 529,
        ᐃⵠⲆᐃⲆⵠⲆ: 530,
        ⲆⲆΔΔᐃⵠᐃ: 531,
        ⲆⵠΔⵠΔⲆⲆ: 532,
        ΔᐃⲆΔᐃⲆΔ: 533,
        ΔⵠᐃᐃᐃΔⵠ: 534,
        ᐃᐃᐃᐃΔⲆⵠ: 535,
        ᐃᐃΔᐃᐃⲆⵠ: 536,
        ΔⵠᐃⵠⲆⲆᐃ: 537,
        ᐃⲆⵠΔΔⲆΔ: 538,
        ΔⲆᐃᐃⲆⲆⵠⲆⲆ: 539,
        ⵠΔⲆΔᐃⲆⵠ: 540,
        ΔΔⲆᐃⵠΔΔ: 541,
        ⵠΔⵠᐃⵠⵠΔ: 542,
        ΔⲆᐃⵠⲆⵠᐃ: 543,
        ᐃⲆⵠⵠᐃΔᐃⵠⲆ: 544,
        POINTS: 545,
        ⲆⵠⲆⵠⵠⲆΔ: 546,
        ⲆᐃᐃΔᐃⵠᐃ: 547,
        ᐃᐃᐃΔᐃⲆᐃ: 548,
        ᐃⵠⵠⵠᐃⲆⵠ: 549,
        ᐃᐃⲆⵠΔⵠΔ: 550,
        ΔⵠⵠᐃΔⵠⲆ: 551,
        ΔᐃⲆⵠⲆΔⲆ: 552,
        ᐃⵠΔΔⲆⲆⵠ: 553,
        ⵠᐃⵠᐃΔΔⵠ: 554,
        ΔᐃⵠΔⵠᐃᐃ: 555,
        ⲆᐃᐃⲆΔᐃⵠ: 556,
        ⲆⲆⲆⲆⲆⲆⲆ: 557,
        ⵠⵠⲆΔᐃⲆΔ: 558,
        ⵠⲆⵠΔᐃⵠⵠ: 559,
        ᐃⵠⲆⵠᐃⵠⲆ: 560,
        ΔᐃⲆⵠⲆⵠⵠ: 561,
        ⲆΔᐃⲆᐃⵠⵠ: 562,
        ᐃΔⲆΔⲆᐃΔ: 563,
        ΔⲆᐃⲆΔᐃⲆ: 564,
        ⲆⵠⲆⲆᐃⲆΔ: 565,
        ᐃΔⵠⵠΔΔᐃ: 566,
        ⵠΔⲆᐃΔΔⲆ: 567,
        ⲆᐃⵠⵠⲆⲆⵠ: 568,
        ⵠΔΔⵠⵠΔᐃ: 569,
        ΔⵠⵠᐃⵠΔⵠ: 570,
        ⲆⲆΔᐃⵠᐃⲆ: 571,
        ΔᐃΔΔᐃᐃⲆ: 572,
        ᐃᐃΔΔΔᐃⲆ: 573,
        ⵠⲆⵠΔⲆᐃⲆ: 574,
        ᐃΔⲆⵠᐃⲆΔ: 575,
        ⲆΔⲆⵠΔⲆⲆ: 576,
        ⵠⲆᐃΔⵠᐃⵠ: 577,
        ᐃΔⲆΔᐃᐃⵠ: 578,
        ⵠΔⵠⲆΔⲆᐃ: 579,
        ⲆⵠᐃΔⲆΔⲆ: 580,
        ⵠΔⲆⲆⵠΔᐃ: 581,
        ΔΔΔΔᐃΔⵠ: 582,
        ⵠⵠΔⵠⵠⲆⵠ: 583,
        ⵠⲆⲆᐃᐃⵠⲆ: 584,
        ⵠⲆᐃᐃⲆΔⵠ: 585,
        ᐃⲆᐃⵠⵠΔⵠ: 586,
        ⵠⲆⲆΔⵠΔⵠ: 587,
        ᐃΔᐃᐃΔΔΔ: 588,
        ⲆⵠᐃᐃᐃⲆⵠ: 589,
        ⵠᐃⲆⲆⵠΔᐃ: 590,
        ᐃⲆⵠⲆⲆⵠⲆ: 591,
        ⲆⲆᐃⲆᐃⵠᐃ: 592,
        ⲆⲆᐃΔΔΔᐃⵠΔ: 593,
        ⵠⲆⵠΔⵠᐃᐃ: 594,
        ⵠⵠΔΔΔᐃⵠⲆΔ: 595,
        ᐃⲆᐃⵠⵠΔⲆ: 596,
        ᐃᐃⲆΔΔⵠᐃⵠΔ: 597,
        ᐃⲆᐃᐃⵠⵠⵠⵠⲆ: 598,
        ᐃⲆⲆⵠⲆᐃⵠⲆΔ: 599,
        ᐃᐃⲆⲆΔⲆᐃΔΔ: 600,
        ⲆᐃⵠⵠⲆⵠΔⵠⲆ: 601,
        ⵠⵠⵠΔΔᐃΔ: 602,
        Δⵠᐃᐃⵠ: 603,
        ΔΔᐃᐃⵠΔΔ: 604,
        ΔⲆⵠⵠΔⵠΔ: 605,
        ᐃⲆᐃᐃⲆᐃᐃ: 606,
        ΔⲆⵠΔᐃᐃⵠΔⵠ: 607,
        ΔⲆᐃᐃΔᐃⲆ: 608,
        ⵠⵠΔⲆΔⵠΔ: 609,
        ᐃᐃΔΔⵠΔⵠ: 610,
        ᐃᐃΔⲆⵠᐃΔ: 611,
        ᐃᐃᐃⲆⲆⵠᐃ: 612,
        ᐃⵠΔⲆᐃΔⲆ: 613,
        ΔᐃⵠⵠⲆⵠᐃ: 614,
        ⲆΔΔⵠᐃⲆⵠ: 615,
        ⲆⲆΔᐃⵠΔⲆ: 616,
        ⲆᐃⲆΔⲆΔⲆ: 617,
        ΔⵠⵠΔⵠⵠⵠ: 618,
        ⵠⵠⲆⲆΔ: 619,
        ⵠΔᐃΔΔ: 620,
        ᐃⲆⲆⲆⵠ: 621,
        ᐃⵠΔΔΔⵠⵠⵠⵠ: 622,
        ⲆᐃΔⲆⲆⲆᐃ: 623,
        ᐃΔᐃᐃⵠᐃⵠ: 624,
        ᐃⵠᐃⵠΔᐃⲆ: 625,
        ᐃΔᐃⵠᐃⲆⲆ: 626,
        ⲆⵠΔΔᐃⵠΔ: 627,
        ΔⲆΔⵠⵠᐃⲆ: 628,
        ⵠΔᐃⲆΔΔΔ: 629,
        ⲆⵠⲆⲆⵠⵠⵠ: 630,
        ΔⲆⲆⲆᐃᐃΔ: 631,
        ⵠⵠᐃΔᐃΔⵠ: 632,
        ΔⵠⲆᐃΔⲆⲆ: 633,
        ᐃⲆΔΔΔᐃⵠ: 634,
        ⵠⵠⵠᐃⵠΔᐃ: 635,
        ᐃΔΔⲆⲆⲆⵠ: 636,
        ΔⲆⵠᐃⵠ: 637,
        ⲆⵠᐃⲆᐃᐃⵠ: 638,
        ⲆⵠⵠᐃΔⲆΔ: 639,
        ⲆᐃΔΔᐃⵠⵠ: 640,
        ᐃⵠⵠᐃΔⲆⲆ: 641,
        ᐃⵠⵠᐃⲆⲆⲆ: 642,
        ᐃⲆᐃᐃΔⵠᐃ: 643,
        ᐃⵠⵠΔⵠⵠⲆ: 644,
        ⵠΔΔᐃᐃⲆΔ: 645,
        ΔⵠΔⵠⲆᐃΔ: 646,
        ᐃΔⲆΔΔΔᐃ: 647,
        ⵠᐃⵠⵠⲆⲆᐃ: 648,
        ᐃΔⲆⵠΔᐃⲆ: 649,
        ⲆᐃΔⲆⵠΔⲆ: 650,
        ᐃΔᐃⲆΔⵠⵠ: 651,
        ⲆΔⵠᐃⲆᐃⵠ: 652,
        ᐃᐃᐃᐃⵠᐃⲆ: 653,
        ΔΔΔΔⲆᐃᐃ: 654,
        ΔⵠⲆⲆⵠⲆΔ: 655,
        ⲆⵠᐃᐃⲆⵠⵠ: 656,
        ᐃⲆⲆⲆᐃᐃΔ: 657,
        ᐃΔⲆΔⲆⵠⲆ: 658,
        ⵠⵠⵠΔᐃΔΔ: 659,
        ⵠΔⵠΔΔᐃⵠ: 660,
        ᐃΔᐃΔΔⵠⲆ: 661,
        ᐃⵠᐃᐃᐃⵠⲆ: 662,
        ΔᐃⲆⲆⵠΔⲆ: 663,
        ⲆᐃⲆⵠΔᐃᐃ: 664,
        ΔΔⵠᐃⲆᐃⵠ: 665,
        ᐃⵠⵠᐃⲆⲆⵠ: 666,
        ΔⲆΔⲆⵠᐃΔ: 667,
        ⵠᐃⵠΔᐃⲆⲆ: 668,
        ᐃⲆⲆⵠⲆΔⵠ: 669,
        ΔⲆⲆⲆⵠⲆᐃ: 670,
        ᐃⵠⵠΔΔⲆⵠ: 671,
        ᐃΔΔΔⲆⲆᐃ: 672,
        ΔᐃⲆⵠᐃ: 673,
        ⵠⲆⵠᐃᐃⲆΔ: 674,
        ⵠⵠᐃⲆⵠⵠⲆ: 675,
        ⵠⵠᐃⲆⲆ: 676,
        ΔⲆΔΔⵠΔⵠⵠᐃ: 677,
        ⵠⵠⵠᐃᐃΔᐃ: 678,
        ⵠΔⲆⵠⲆ: 679,
        ᐃⲆⲆᐃΔⲆᐃ: 680,
        ᐃⲆᐃᐃⲆᐃΔ: 681,
        ⲆᐃⲆⲆᐃⵠⵠ: 682,
        ⲆⵠⲆⲆⲆᐃⲆ: 683,
        ⵠᐃⲆⵠⲆⵠᐃ: 684,
        ⲆΔΔΔΔΔⵠ: 685,
        ⵠΔⵠᐃΔⵠΔ: 686,
        ᐃΔΔⵠᐃᐃⵠ: 687,
        ᐃⲆΔⵠⲆᐃⵠ: 688,
        ᐃⵠⵠΔⵠΔⲆ: 689,
        ⲆᐃᐃᐃⲆⵠΔ: 690,
        ⲆⵠᐃⲆⲆ: 691,
        ⲆΔΔⲆᐃ: 692,
        ΔᐃΔΔⵠ: 693,
        ⵠⲆⲆᐃⵠ: 694,
        ⵠᐃⲆΔᐃ: 695,
        ⵠⲆᐃᐃᐃⵠⲆ: 696,
        ᐃᐃⲆⲆⵠⲆⲆ: 697,
        ΔΔⵠⲆᐃΔⵠ: 698,
        ᐃⵠΔⵠᐃⵠⲆ: 699,
        ⵠⲆⵠΔⲆᐃᐃ: 700,
        ⵠⲆⲆⵠΔⲆᐃ: 701,
        ᐃⵠⲆⵠᐃΔⲆ: 702,
        ⲆᐃⵠΔⲆⲆⲆ: 703,
        ⵠⵠⲆᐃΔΔΔ: 704,
        ᐃᐃᐃΔΔᐃΔ: 705,
        ΔⲆᐃⵠⵠᐃⵠ: 706,
        ⵠⲆΔᐃΔⵠᐃ: 707,
        ⵠΔᐃᐃⵠⲆⵠ: 708,
        ᐃᐃⵠΔΔⵠⵠ: 709,
        ⲆⵠΔΔΔᐃⲆ: 710,
        ⲆⲆⲆⲆⲆⵠⲆ: 711,
        ⲆⲆΔⲆΔᐃΔ: 712,
        ⲆⲆⲆΔᐃᐃⲆ: 713,
        ⵠⵠᐃⵠⲆⲆⲆ: 714,
        ΔⲆⵠᐃΔⵠⵠ: 715,
        ᐃⲆⲆⲆⲆⵠⲆ: 716,
        ⲆⵠΔⵠⲆⲆⲆ: 717,
        ⲆᐃⲆⵠⲆⵠⲆ: 718,
        ⵠᐃΔΔᐃΔⲆ: 719,
        ᐃᐃΔΔⲆⵠᐃ: 720,
        ⵠᐃⵠⵠᐃΔΔⵠᐃ: 721,
        ⲆⵠⵠⵠⵠᐃΔ: 722,
        ᐃⵠΔᐃⲆᐃᐃ: 723,
        ⲆⲆᐃᐃᐃᐃⲆ: 724,
        ΔᐃⵠΔᐃⲆᐃ: 725,
        ⵠⲆⵠᐃΔΔᐃ: 726,
        ᐃⲆΔⵠΔⲆⵠ: 727,
        ⵠᐃᐃΔᐃᐃΔ: 728,
        ⲆⵠⲆᐃΔᐃᐃ: 729,
        ΔΔⲆⵠⲆⵠᐃ: 730,
        ⵠᐃⲆΔⲆΔⲆ: 731,
        ΔⵠΔⵠΔᐃΔ: 732,
        ⲆⲆᐃᐃᐃⵠⵠ: 733,
        ΔΔᐃⲆΔⵠᐃ: 734,
        ΔᐃⲆⲆᐃᐃΔ: 735,
        ⵠᐃΔⵠⵠⲆᐃ: 736,
        ⲆΔⵠᐃΔᐃⵠ: 737,
        ⵠΔⲆᐃⲆΔΔ: 738,
        ⲆᐃⵠΔΔⲆⲆ: 739,
        ᐃΔⵠΔᐃⲆⵠ: 740,
        ⲆⲆᐃⵠⲆΔᐃ: 741,
        ᐃⵠΔᐃΔΔᐃ: 742,
        ᐃⲆᐃΔⵠᐃΔ: 743,
        ⲆᐃᐃᐃΔⲆⵠ: 744,
        ᐃᐃⲆΔᐃⲆᐃ: 745,
        ⲆΔᐃᐃᐃⲆⵠ: 746,
        ⵠⵠΔⲆΔⵠⵠ: 747,
        ⲆᐃᐃΔⲆΔᐃ: 748,
        ⲆΔΔⵠⲆⲆⲆ: 749,
        ⲆᐃᐃⵠΔΔΔ: 750,
        ΔᐃⵠⲆⵠΔⵠ: 751,
        ΔᐃⵠᐃΔᐃΔ: 752,
        ⲆΔⵠΔⵠⲆΔ: 753,
        ᐃⵠΔᐃΔΔⵠ: 754,
        ⵠⵠⵠΔⲆᐃⲆ: 755,
        ΔⵠⵠⲆⵠⲆⵠ: 756,
        ᐃᐃⵠΔΔΔⲆ: 757,
        ΔΔⲆᐃⲆⲆᐃ: 758,
        ᐃΔΔᐃᐃΔΔ: 759,
        ΔᐃⲆⵠΔᐃᐃ: 760,
        ᐃⵠⲆⲆᐃᐃⵠ: 761,
        ⲆΔⵠᐃΔΔΔ: 762,
        ΔⵠⲆⲆⲆΔⵠ: 763,
        ⲆⵠᐃⲆΔⲆⵠ: 764,
        ⲆⵠⲆⵠΔⲆⲆ: 765,
        ΔⲆᐃⵠⲆⲆⲆ: 766,
        ⵠΔΔⲆⲆΔΔ: 767,
        ⲆΔⵠᐃᐃⵠΔ: 768,
        ᐃⲆΔΔΔᐃᐃ: 769,
        ⲆΔΔΔᐃᐃᐃ: 770,
        ᐃᐃᐃⲆᐃᐃᐃ: 771,
        ⲆⵠⲆⵠⲆᐃⵠ: 772,
        ΔᐃᐃⲆⵠᐃᐃ: 773,
        ⵠⲆΔᐃΔᐃᐃ: 774,
        ⵠΔᐃᐃᐃΔⵠ: 775,
        ΔⲆᐃⲆⲆΔᐃ: 776,
        ᐃᐃⲆⲆᐃΔⵠ: 777,
        ⲆᐃᐃΔᐃⲆⵠ: 778,
        ⵠⲆⲆΔⵠΔᐃ: 779,
        ΔΔᐃⵠΔΔᐃ: 780,
        ⲆⵠΔⵠΔΔⵠ: 781,
        ⵠⲆⵠⲆΔⲆᐃ: 782,
        ΔΔⵠⵠΔᐃⲆ: 783,
        ᐃⵠᐃᐃᐃⲆⲆ: 784,
        ᐃᐃᐃⵠᐃΔⲆ: 785,
        ⵠᐃΔⵠⵠᐃⲆ: 786,
        ⲆΔⲆⵠᐃΔᐃ: 787,
        ᐃⵠᐃⲆΔⲆᐃ: 788,
        ᐃⵠᐃⵠΔΔⲆ: 789,
        ΔⲆᐃΔᐃΔⲆ: 790,
        ᐃⲆⲆⵠⵠΔⵠ: 791,
        ᐃΔΔᐃⵠⵠⲆ: 792,
        ⵠᐃⲆⲆΔ: 793,
        ᐃⲆΔⵠΔΔⵠ: 794,
        ⲆᐃᐃΔⵠΔⵠ: 795,
        ΔⵠᐃⲆⲆ: 796,
        ΔᐃΔᐃⵠⲆΔ: 797,
        ΔΔΔᐃⵠᐃΔ: 798,
        ⲆⲆΔᐃΔⲆᐃ: 799,
        ⲆⵠⲆⵠᐃᐃⵠ: 800,
        ⲆⵠΔⲆᐃⲆΔ: 801,
        ⵠᐃⵠⵠⵠ: 802,
        ⲆⲆΔⵠᐃⵠⵠ: 803,
        ⵠⵠΔⵠⲆΔᐃᐃⵠ: 804,
        ᐃᐃⵠΔΔⲆⵠⲆᐃ: 805,
        ΔⵠΔᐃⵠᐃΔᐃⵠ: 806,
        ⲆᐃⲆᐃΔΔΔΔⵠ: 807,
        ⵠᐃᐃΔΔΔᐃ: 808,
        ΔⲆᐃⵠᐃᐃΔ: 809,
        ᐃᐃⵠⲆΔⵠⲆ: 810,
        ⵠⲆΔⵠᐃⵠⲆ: 811,
        ΔⲆᐃⲆⲆⲆⵠ: 812,
        ᐃᐃᐃΔᐃⲆΔ: 813,
        ΔⵠΔΔΔⵠᐃ: 814,
        ⵠΔⲆⲆⵠᐃⵠ: 815,
        ⵠⲆⵠΔᐃᐃᐃ: 816,
        ⵠⵠᐃᐃᐃᐃⲆ: 817,
        ᐃΔⲆⲆᐃ: 818,
        ⲆᐃⵠⲆⲆ: 819,
        ⵠⵠΔⵠⵠⵠⵠ: 820,
        ⲆⵠᐃⲆⲆᐃⵠ: 821,
        ᐃⲆΔᐃⵠⵠᐃ: 822,
        ᐃⵠΔⵠⵠΔⲆ: 823,
        ⵠΔⵠⵠᐃⵠᐃ: 824,
        ⵠⲆᐃⵠⵠᐃΔ: 825,
        ⵠⲆᐃⵠⲆⲆᐃ: 826,
        ⵠⵠᐃᐃᐃⲆΔ: 827,
        ⲆⲆⲆⲆΔΔⵠ: 828,
        ⵠΔⵠⲆⵠΔᐃ: 829,
        ΔΔᐃΔΔⵠΔ: 830,
        ⵠⵠⲆᐃⵠⵠⲆ: 831,
        ⲆᐃᐃⵠᐃⲆᐃΔΔ: 832,
        ⵠⲆΔⵠᐃⵠΔⲆⲆ: 833,
        ⲆΔᐃΔⵠΔᐃ: 834,
        ⲆⲆⵠᐃΔⲆᐃ: 835,
        ΔⲆⲆⲆⲆᐃⵠ: 836,
        ⲆΔⵠⵠⲆⵠⵠ: 837,
        ᐃⲆⲆΔⵠⲆᐃ: 838,
        ⵠⵠᐃΔⵠᐃΔ: 839,
        ⲆⵠⵠᐃⵠⲆᐃ: 840,
        ΔⲆⲆⵠⵠᐃⵠ: 841,
        ΔᐃⵠⲆⵠΔΔ: 842,
        ᐃᐃⵠΔⲆᐃΔ: 843,
        ΔⲆⲆⵠΔⵠᐃ: 844,
        ⲆΔⵠᐃΔΔⵠ: 845,
        ᐃⵠⲆΔⲆΔΔ: 846,
        ᐃⵠⲆⵠΔⲆⵠ: 847,
        ᐃⵠΔⲆⵠⵠᐃ: 848,
        ⲆⵠⵠⵠⵠⲆⲆ: 849,
        ᐃⲆⵠΔΔᐃⲆ: 850,
        ⲆⲆⵠⲆⵠⲆⵠ: 851,
        ᐃᐃⵠΔⲆⵠⵠᐃⵠ: 852,
        ⵠᐃΔΔΔⲆⲆ: 853,
        ᐃⵠⵠⵠⵠ: 854,
        ⲆⲆⵠΔⲆⲆᐃᐃΔ: 855,
        ᐃᐃⲆⵠᐃⲆᐃⲆΔ: 856,
        ΔᐃⲆᐃⲆᐃΔᐃⲆ: 857,
        ΔᐃⲆᐃⲆⲆΔΔΔ: 858,
        ⵠᐃⲆⲆⵠⲆΔ: 859,
        ⲆⲆᐃΔⲆⲆⵠ: 860,
        ΔⵠⲆⲆᐃⵠᐃ: 861,
        ΔᐃᐃⲆᐃⵠᐃ: 862,
        ⵠᐃΔΔᐃⵠΔ: 863,
        ⵠⵠⲆΔΔΔⲆᐃᐃ: 864,
        ⵠⲆΔΔΔᐃⵠ: 865,
        ⵠᐃΔΔᐃⲆⵠ: 866,
        ΔⲆⲆᐃΔⵠΔ: 867,
        ⵠᐃᐃᐃⵠᐃΔ: 868,
        ᐃⲆΔⲆᐃⵠⲆ: 869,
        ΔΔᐃⲆⵠⲆⵠ: 870,
        ᐃⲆΔᐃΔⲆⵠ: 871,
        ⵠⵠΔⲆᐃ: 872,
        ⲆΔⵠΔΔᐃᐃᐃⲆ: 873,
        ⵠΔⵠⲆⲆⵠⵠ: 874,
        ΔᐃⵠᐃᐃⵠΔ: 875,
        ⵠᐃᐃⵠΔᐃⲆ: 876,
        ⲆΔᐃᐃⵠΔᐃ: 877,
        ΔΔΔⲆᐃⵠⵠ: 878,
        ⵠΔΔᐃΔΔΔ: 879,
        ᐃⲆⵠᐃⵠΔΔ: 880,
        ᐃⵠⵠᐃⵠΔΔ: 881,
        ⵠᐃⵠΔⲆᐃⵠ: 882,
        ᐃᐃᐃⵠΔΔᐃ: 883,
        ⵠⵠΔⲆΔⲆΔ: 884,
        ΔΔΔΔᐃᐃᐃ: 885,
        ⵠⵠⲆⲆᐃΔᐃ: 886,
        ᐃⵠᐃᐃⵠ: 887,
        ⲆΔΔⲆⲆᐃⲆ: 888,
        ⵠⵠΔᐃⵠⲆⵠ: 889,
        ⵠΔΔⲆⲆⵠⵠ: 890,
        ᐃⵠᐃᐃΔⲆΔ: 891,
        ⲆᐃⵠᐃⲆΔᐃ: 892,
        ΔᐃⵠⵠᐃⲆⵠ: 893,
        ⲆⵠⲆᐃΔⲆⲆ: 894,
        ⵠΔⵠΔⲆΔΔ: 895,
        ⵠᐃᐃᐃᐃⲆΔ: 896,
        ᐃᐃⲆⵠⵠΔⵠ: 897,
        ⵠΔᐃⵠⲆΔᐃ: 898,
        ⵠⲆᐃΔⵠⵠᐃ: 899,
        ᐃⵠⵠᐃᐃⵠⵠ: 900,
        ⵠΔⲆⵠᐃΔⲆ: 901,
        ⲆⲆⵠᐃⵠᐃΔ: 902,
        ΔᐃΔⵠⲆΔᐃ: 903,
        ᐃᐃᐃᐃⲆⲆⵠ: 904,
        ⵠⵠⲆᐃⵠᐃΔ: 905,
        ᐃⲆΔᐃᐃⵠⵠ: 906,
        ⵠᐃⵠΔΔⵠⵠ: 907,
        ᐃᐃᐃⵠᐃᐃⲆ: 908,
        ⲆⵠΔᐃᐃⵠᐃ: 909,
        ⲆⵠⵠⵠⵠⲆᐃ: 910,
        ⲆⵠⵠΔⵠᐃᐃ: 911,
        ΔΔΔᐃᐃⵠᐃ: 912,
        ΔⵠⲆⲆⵠⵠⵠ: 913,
        ⵠΔⲆᐃᐃⲆⵠΔᐃ: 914,
        ᐃΔⲆⵠⲆⵠⲆⵠⵠ: 915,
        ⲆᐃⵠⲆⲆⲆΔⵠΔ: 916,
        ΔΔⵠᐃΔⲆⵠⵠΔ: 917,
        ΔΔⵠⵠⵠΔⵠ: 918,
        ⲆⵠⲆⲆⲆΔᐃ: 919,
        ⵠⲆⲆⵠΔ: 920,
        ⲆΔᐃᐃⲆⵠⲆ: 921,
        ᐃⲆΔΔⲆⵠⵠ: 922,
        ⲆᐃⵠᐃᐃⲆΔ: 923,
        ᐃΔⵠᐃⲆⵠⵠ: 924,
        ⲆᐃⲆⵠⲆᐃⵠ: 925,
        ⲆᐃⵠΔⵠⵠⲆ: 926,
        ᐃΔΔⲆᐃΔᐃ: 927,
        ΔᐃⵠⲆⵠⲆᐃ: 928,
        ΔⲆⲆⵠᐃⲆᐃ: 929,
        ⵠᐃᐃᐃᐃⵠᐃ: 930,
        ⲆᐃᐃⵠᐃⲆΔ: 931,
        ΔΔΔⲆⲆⲆⵠ: 932,
        ⵠᐃⲆΔⲆⲆⵠ: 933,
        ⲆⲆⲆⲆᐃΔⲆ: 934,
        ⵠᐃΔⲆⲆᐃⵠ: 935,
        ⵠΔⲆⵠⲆΔⲆ: 936,
        ⵠᐃᐃⲆⵠⲆⵠ: 937,
        ⵠᐃⵠΔΔΔΔ: 938,
        ⵠⲆⵠⲆΔΔᐃ: 939,
        ΔⵠⵠΔᐃᐃΔⵠⵠ: 940,
        ΔΔⲆⲆⲆ: 941,
        ⲆΔⵠᐃΔᐃΔ: 942,
        ᐃΔΔΔΔΔᐃ: 943,
        ⲆΔΔᐃⲆⵠᐃ: 944,
        ΔΔΔⲆⵠⵠᐃ: 945,
        ᐃⲆⵠⵠΔⲆᐃ: 946,
        ΔᐃⵠⵠΔⵠΔ: 947,
        ⵠᐃⲆᐃⲆⵠΔ: 948,
        ΔᐃᐃⵠⲆΔᐃ: 949,
        ΔⲆⲆⵠⲆΔΔ: 950,
        ΔΔΔⵠⵠΔⲆ: 951,
        ⵠΔⲆΔΔⵠⲆ: 952,
        ⲆΔⲆⲆⵠⲆⲆ: 953,
        ⵠⲆᐃⵠⲆⵠⲆ: 954,
        ⵠⲆᐃⵠⲆΔᐃ: 955,
        ⵠᐃⵠᐃᐃΔⲆ: 956,
        ᐃΔⵠᐃⲆⲆΔ: 957,
        ⵠⵠⵠΔᐃᐃⲆ: 958,
        ΔᐃΔᐃⲆⲆᐃ: 959,
        ⵠᐃⵠⵠⲆΔⵠ: 960,
        ΔᐃⲆⵠⲆⵠΔ: 961,
        ᐃᐃΔΔⵠᐃᐃ: 962,
        ⲆᐃΔᐃᐃⵠⵠ: 963,
        ⲆⵠⲆⵠⵠⵠᐃΔⲆ: 964,
        ⲆᐃᐃⵠⵠⵠΔ: 965,
        ᐃⵠᐃᐃⲆΔΔ: 966,
        ᐃⲆⲆΔᐃⲆᐃ: 967,
        ⲆⵠⵠᐃⲆΔⲆ: 968,
        ΔΔⲆΔⲆⲆⵠ: 969,
        ⲆΔΔᐃⲆⲆᐃ: 970,
        ⲆⵠⵠᐃⲆᐃⵠ: 971,
        ᐃⵠⲆᐃᐃΔⲆ: 972,
        ΔᐃⵠⵠⵠⲆⲆ: 973,
        ⲆⵠⵠᐃᐃⲆΔ: 974,
        ᐃⵠΔᐃⵠᐃᐃ: 975,
        ᐃᐃΔᐃΔⵠᐃ: 976,
        ΔⵠⵠⵠᐃΔᐃ: 977,
        ⵠΔⵠΔⲆⵠᐃ: 978,
        ΔⲆⵠΔΔᐃⲆ: 979,
        ⵠⲆᐃⲆⲆⲆΔ: 980,
        ⲆⵠᐃⲆⲆⲆΔ: 981,
        ΔⵠⵠᐃᐃⵠΔ: 982,
        ΔΔΔⵠⲆⲆᐃ: 983,
        ᐃⵠⲆⵠΔᐃⵠ: 984,
        ᐃⲆᐃΔΔΔᐃ: 985,
        ΔΔⲆᐃⵠΔᐃ: 986,
        ⲆⵠⲆⵠΔⲆⵠ: 987,
        ⵠⵠⲆΔΔᐃᐃ: 988,
        ᐃⲆᐃⲆⵠ: 989,
        ΔⲆⵠⵠᐃⵠΔ: 990,
        ⵠⵠⲆⲆΔΔⵠ: 991,
        ᐃⵠᐃⵠᐃⲆᐃ: 992,
        ᐃΔⲆⲆⵠΔⵠ: 993,
        ⲆⲆΔⲆⵠⲆⵠ: 994,
        ΔⵠⵠΔⵠⲆᐃ: 995,
        ᐃΔΔΔⵠᐃᐃ: 996,
        ⲆᐃΔⵠⲆᐃᐃ: 997,
        ΔΔⲆⵠⵠⵠⵠ: 998,
        ⲆᐃΔᐃΔⲆΔ: 999,
        ΔΔᐃᐃΔⵠⲆ: 1000,
        ᐃΔᐃᐃΔΔⲆ: 1001,
        ⵠᐃⵠᐃΔᐃᐃ: 1002,
        ⲆΔΔΔⲆᐃΔ: 1003,
        ⲆⵠⵠΔⲆⵠⵠ: 1004,
        ⲆᐃⲆⲆⲆᐃⵠ: 1005,
        ⵠᐃⵠᐃⲆⵠΔ: 1006,
        ᐃΔΔΔᐃⵠⵠ: 1007,
        ⲆᐃⲆⵠΔᐃⵠ: 1008,
        ΔⵠⲆⵠᐃΔᐃ: 1009,
        ᐃᐃΔᐃⲆⵠⲆ: 1010,
        ⲆⲆⵠⲆⵠⲆᐃ: 1011,
        ᐃⵠᐃᐃⵠⲆᐃ: 1012,
        ΔΔΔⵠᐃΔΔ: 1013,
        ᐃᐃΔⵠⵠᐃᐃ: 1014,
        ⵠⲆᐃᐃⲆᐃΔ: 1015,
        ⲆΔⵠΔΔⵠᐃ: 1016,
        ⲆⲆᐃⲆᐃΔⲆ: 1017,
        ⵠᐃⵠⵠⲆᐃᐃ: 1018,
        ΔΔᐃⵠⲆᐃΔ: 1019,
        ᐃᐃⵠΔᐃⵠᐃ: 1020,
        ΔᐃⲆⲆⵠᐃᐃ: 1021,
        ⵠΔⲆΔΔΔᐃ: 1022,
        ΔΔΔᐃⵠⵠΔ: 1023,
        ⵠⵠᐃⵠ: 1024,
        ⵠⲆᐃΔ: 1025,
        ΔⵠΔⵠΔΔⵠ: 1026,
        ⲆΔⲆⵠⲆⲆⲆ: 1027,
        ⵠⵠⵠΔᐃⲆⵠ: 1028,
        ⲆᐃΔⲆᐃⲆⵠ: 1029,
        ᐃⵠΔᐃⲆⵠⲆ: 1030,
        ᐃⵠᐃⲆⵠᐃΔ: 1031,
        ⵠᐃΔΔⲆΔΔ: 1032,
        ΔΔⵠⵠᐃ: 1033,
        ⵠⲆⵠᐃΔⵠⵠ: 1034,
        ΔⵠⲆΔⵠ: 1035,
        ΔⲆⵠⵠⲆⲆⵠ: 1036,
        ᐃᐃΔⵠⲆ: 1037,
        ᐃᐃᐃᐃΔⵠᐃ: 1038,
        ⲆᐃⲆᐃΔ: 1039,
        ⵠⲆⵠᐃᐃᐃⲆ: 1040,
        ⵠⲆᐃΔⲆ: 1041,
        ⵠⲆⵠΔⵠ: 1042,
        ᐃⵠᐃⲆᐃᐃᐃ: 1043,
        ⵠⵠΔⵠΔᐃᐃ: 1044,
        ⲆΔᐃΔⵠⵠⵠ: 1045,
        ⲆᐃⲆⵠᐃᐃᐃ: 1046,
        ΔΔᐃⲆⲆⲆⵠ: 1047,
        ᐃⵠⲆⵠⵠⲆⵠ: 1048,
        ⵠⵠᐃⲆΔⵠᐃ: 1049,
        ⲆⲆΔᐃⲆⲆᐃ: 1050,
        ΔⲆᐃⲆᐃⵠᐃ: 1051,
        ΔⲆᐃΔᐃ: 1052,
        ⵠᐃΔⵠᐃⵠⵠ: 1053,
        ⵠᐃΔⲆΔ: 1054,
        ⵠⲆⵠΔΔⲆⲆ: 1055,
        ΔᐃⵠΔⵠᐃΔ: 1056,
        ΔΔΔΔⲆⵠᐃ: 1057,
        ΔⲆⲆⲆᐃⵠⲆ: 1058,
        ⵠΔⵠⲆΔⵠΔ: 1059,
        ΔᐃᐃⲆᐃΔΔ: 1060,
        ⲆⲆᐃᐃⲆⵠⵠⵠⵠ: 1061,
        ΔᐃᐃΔᐃⲆⵠ: 1062,
        ⵠᐃⲆⲆΔΔΔ: 1063,
        ᐃⵠⲆᐃⵠⵠⵠᐃᐃ: 1064,
        ⲆⵠⵠⲆⵠΔⵠ: 1065,
        ⲆᐃᐃⵠⲆΔΔ: 1066,
        ⲆΔⲆⲆᐃᐃᐃ: 1067,
        ΔᐃⲆΔᐃᐃΔ: 1068,
        ΔⲆⲆΔᐃ: 1069,
        ⵠⵠΔⵠΔΔᐃ: 1070,
        ΔᐃⵠⵠᐃⲆΔ: 1071,
        ⵠⲆᐃΔΔⵠᐃ: 1072,
        ⲆᐃᐃⵠΔⵠΔ: 1073,
        ⵠᐃΔΔᐃⲆⲆ: 1074,
        ΔΔⵠᐃΔⲆⵠ: 1075,
        ⵠᐃⲆⵠⲆᐃΔ: 1076,
        ⵠᐃⵠⲆΔΔⵠ: 1077,
        ⲆΔᐃⵠᐃᐃⵠ: 1078,
        ᐃᐃⵠⵠΔΔⵠ: 1079,
        ᐃⲆᐃΔΔⵠΔ: 1080,
        ᐃⲆⵠⲆⵠᐃᐃ: 1081,
        ⵠⵠⲆⲆΔᐃⵠ: 1082,
        ᐃᐃᐃⲆⵠⲆⵠ: 1083,
        ⲆⵠΔΔᐃ: 1084,
        ᐃᐃⲆᐃΔⲆΔ: 1085,
        ᐃΔΔⵠΔⵠⲆ: 1086,
        ᐃᐃΔⵠΔⵠⲆ: 1087,
        ⵠΔⵠⵠⵠⲆⵠ: 1088,
        ΔΔᐃᐃⲆⵠᐃ: 1089,
        ΔⲆⲆΔΔΔΔ: 1090,
        ᐃⵠⲆⲆⲆⲆᐃ: 1091,
        ⲆⲆᐃᐃᐃⵠΔ: 1092,
        ΔΔⲆⲆⲆⵠⲆ: 1093,
        ᐃⵠⵠⲆⲆⵠⵠ: 1094,
        ⵠⵠⵠⵠⵠⵠⵠ: 1095,
        ᐃⵠⵠⲆΔΔᐃ: 1096,
        ⲆᐃⵠΔⲆⵠΔ: 1097,
        ⲆⵠᐃⵠⵠΔΔ: 1098,
        ᐃΔᐃΔΔ: 1099,
        ⵠⲆΔΔⵠᐃⵠ: 1100,
        ⲆⲆΔⲆᐃᐃⲆ: 1101,
        ⵠⵠΔΔᐃΔⵠ: 1102,
        ᐃⵠⵠΔⲆⵠⲆ: 1103,
        ΔᐃⵠⵠΔⲆⲆ: 1104,
        ΔⲆᐃᐃⲆΔⲆ: 1105,
        ⵠⲆⲆᐃⲆⲆᐃ: 1106,
        ᐃⲆⲆΔⲆΔΔ: 1107,
        ΔᐃΔΔⵠΔⵠ: 1108,
        ᐃᐃΔⵠⵠⵠⵠ: 1109,
        ᐃᐃⵠⵠⵠᐃⵠ: 1110,
        ᐃⵠⵠᐃⵠⲆᐃ: 1111,
        Δᐃᐃⵠⵠⵠᐃ: 1112,
        ΔⲆⵠⲆⲆΔᐃ: 1113,
        ⲆⵠᐃᐃⲆΔⲆ: 1114,
        ΔΔΔΔⲆⵠⲆ: 1115,
        ⵠᐃΔⲆⵠᐃⲆ: 1116,
        ΔᐃΔᐃⲆⵠⲆ: 1117,
        Δⵠᐃᐃᐃⵠⵠ: 1118,
        ΔΔᐃᐃⵠⵠⵠ: 1119,
        ⲆΔΔΔⲆ: 1120,
        ⵠⵠⲆⲆⲆᐃⲆ: 1121,
        ΔΔᐃⵠΔΔⲆ: 1122,
        ⵠⲆΔᐃΔΔⵠ: 1123,
        ᐃᐃⵠᐃⲆΔⲆ: 1124,
        ΔᐃⲆⲆⵠⵠⲆ: 1125,
        ΔⵠΔⲆⲆΔⵠ: 1126,
        ΔᐃⲆΔⵠᐃᐃ: 1127,
        ⵠⲆᐃᐃⲆᐃⵠ: 1128,
        ⵠⲆᐃΔⲆⵠᐃ: 1129,
        ⵠⲆΔΔⲆⲆⲆ: 1130,
        ⵠᐃᐃΔⵠᐃⲆ: 1131,
        ⲆᐃⵠⲆⵠᐃⲆ: 1132,
        ᐃᐃᐃⵠΔⲆΔ: 1133,
        ᐃᐃⵠᐃᐃⲆᐃ: 1134,
        ⵠⲆⵠΔⵠⵠⵠ: 1135,
        ΔᐃΔΔⵠⵠⲆ: 1136,
        ΔⵠᐃᐃⲆⲆⲆ: 1137,
        ⲆΔΔᐃᐃΔⵠ: 1138,
        ᐃⵠᐃⲆᐃⵠᐃ: 1139,
        ΔⲆᐃΔⵠᐃⵠ: 1140,
        ᐃᐃᐃᐃⵠᐃΔ: 1141,
        ΔⵠΔⵠΔⵠⵠ: 1142,
        ⲆⲆⲆⵠⲆᐃΔ: 1143,
        ⲆΔᐃΔΔⵠⲆ: 1144,
        ⲆⲆᐃⲆⲆΔⵠ: 1145,
        ⵠⵠΔⲆⲆΔⲆ: 1146,
        ᐃⵠⵠᐃΔΔⲆ: 1147,
        ΔⵠᐃΔΔᐃᐃ: 1148,
        ΔⵠΔΔⵠΔΔ: ["#E9CF96", "#144940"],
        ΔⲆΔΔⲆⵠΔ: 1149,
        ⲆΔΔᐃΔⲆΔ: 1150,
        ΔΔΔⲆⵠⵠΔ: 1151,
        ⲆⵠⲆⵠΔΔⲆ: 1152,
        ⵠΔⵠⵠⵠᐃⵠ: 1153,
        ΔⲆⲆⲆⵠΔⵠ: 1154,
        ΔΔΔᐃΔᐃⲆ: 1155,
        ᐃⵠⵠⵠⲆ: 1156,
        ⵠⲆⲆΔⵠᐃᐃ: 1157,
        ΔⲆᐃᐃΔⲆⵠ: 1158,
        ΔᐃⵠⲆⲆΔⵠ: 1159,
        ᐃⲆⲆⲆᐃΔΔ: 1160,
        ⲆⲆⲆᐃᐃⵠⲆ: 1161,
        ⵠⲆⲆΔᐃⲆΔ: 1162,
        ⵠⲆᐃᐃΔⲆᐃ: 1163,
        ⲆⵠⲆΔⲆⲆⵠ: 1164,
        ⲆⵠᐃᐃⲆᐃⲆ: 1165,
        ⲆⵠⲆⲆⵠΔⲆ: 1166,
        ⲆⵠⲆⲆᐃⵠΔ: 1167,
        ᐃⲆⵠΔⵠΔⵠ: 1168,
        ΔᐃΔᐃᐃⵠᐃ: 1169,
        ᐃᐃⵠⲆᐃᐃᐃ: 1170,
        ⵠⵠⲆᐃΔⵠⵠ: 1171,
        ᐃᐃⲆᐃΔⵠⵠ: 1172,
        ΔⵠᐃⵠΔⵠⲆ: 1173,
        ᐃΔⵠⵠⵠᐃᐃ: 1174,
        ΔΔⵠΔⵠⲆΔ: 1175,
        ᐃᐃⲆᐃᐃⲆⲆ: 1176,
        ⵠΔᐃᐃᐃⵠᐃ: 1177,
        ⵠⲆᐃⵠᐃⵠᐃ: 1178,
        ⵠⲆΔⵠΔⵠᐃ: 1179,
        ⵠᐃΔⵠᐃⲆᐃ: 1180,
        ΔⲆᐃΔΔⵠΔ: 1181,
        ΔᐃΔᐃⲆᐃⲆ: 1182,
        ΔⵠᐃⵠᐃΔⲆ: 1183,
        ᐃΔⲆΔΔⵠᐃ: 1184,
        ⲆⵠᐃᐃⵠⲆⵠ: 1185,
        ΔᐃⵠᐃΔⵠⲆ: 1186,
        ⵠᐃΔⵠⲆⵠⵠ: 1187,
        ⲆΔᐃⲆΔⲆᐃ: 1188,
        ⲆⲆᐃⵠⲆᐃⲆ: 1189,
        ΔⵠΔⵠᐃⲆⵠ: 1190,
        ᐃᐃⲆⲆⵠΔᐃ: 1191,
        ⵠᐃⲆⵠⵠⵠⲆ: 1192,
        ᐃⵠⲆⵠⵠⵠᐃ: 1193,
        ΔⲆΔᐃⲆⵠᐃ: 1194,
        ΔᐃᐃⵠΔΔᐃ: 1195,
        ᐃⲆⵠΔⲆⲆⲆ: 1196,
        ⲆΔⲆⵠΔⲆΔ: 1197,
        ΔⵠⲆⲆⵠΔⲆ: 1198,
        ⵠᐃᐃΔᐃⵠⵠ: 1199,
        ΔⲆⲆᐃⲆᐃΔ: 1200,
        ΔⲆⲆⲆᐃᐃᐃ: 1201,
        ⵠᐃΔⵠⲆΔᐃ: 1202,
        ᐃⲆⵠᐃᐃⲆᐃ: 1203,
        ⵠᐃⲆᐃᐃᐃⵠ: 1204,
        Δⵠⵠⵠᐃᐃᐃ: 1205,
        ΔΔⵠᐃᐃΔΔ: 1206,
        ᐃⲆⵠⵠⲆⵠⲆ: 1207,
        ᐃⵠⵠⲆⵠⵠⲆ: 1208,
        ⵠⵠⵠᐃⲆⲆᐃ: 1209,
        ⲆᐃᐃⵠⲆᐃⵠ: 1210,
        ᐃⵠΔⵠⲆⵠΔ: 1211,
        ⵠⲆⵠⵠⵠᐃᐃ: 1212,
        ⵠΔⲆⵠΔᐃⵠ: 1213,
        ΔᐃΔⵠᐃⵠⵠ: 1214,
        ⲆᐃⲆΔⵠᐃⵠ: 1215,
        ᐃⲆᐃᐃⵠⲆⵠ: 1216,
        ᐃⵠᐃᐃⵠΔⵠ: 1217,
        ⲆⲆᐃᐃᐃ: 1218,
        ⲆⲆⵠᐃΔⵠⲆ: 1219,
        ᐃⲆΔⲆΔ: 1220,
        ⵠᐃⲆΔΔᐃᐃ: 1221,
        ᐃⲆᐃᐃΔⲆᐃ: 1222,
        ⲆⵠΔΔⵠⵠⲆ: 1223,
        ⵠⵠᐃᐃⵠⲆᐃ: 1224,
        ⵠΔᐃⵠᐃΔΔ: 1225,
        ΔΔⲆΔⵠⵠᐃ: 1226,
        ΔᐃᐃⲆΔⲆⲆ: 1227,
        ᐃⲆⲆⲆᐃⵠⵠ: 1228,
        ⲆⵠⲆᐃⵠΔΔ: 1229,
        ᐃⲆⲆⵠᐃⲆᐃ: 1230,
        ⵠⲆⵠᐃᐃⲆⲆ: 1231,
        ᐃⲆΔΔⵠⵠᐃ: 1232,
        ᐃⵠᐃⵠⲆΔᐃ: 1233,
        ⵠⲆⵠΔⲆᐃⵠ: 1234,
        ⲆⵠΔⵠΔⲆⵠ: 1235,
        ⵠⵠⲆⲆⵠΔⵠ: 1236,
        ᐃⵠΔΔⵠⵠⵠ: 1237,
        ᐃᐃⵠⲆΔΔⵠ: 1238,
        ⲆⲆⵠⲆⲆⲆΔ: 1239,
        ⲆᐃΔᐃΔⵠΔ: 1240,
        ⵠΔᐃᐃⵠⵠᐃ: 1241,
        ⵠᐃⵠΔⲆⲆᐃ: 1242,
        ⵠⲆⵠΔΔⵠΔ: 1243,
        ⲆⲆⵠΔⵠⵠⲆ: 1244,
        ᐃᐃΔᐃᐃΔᐃ: 1245,
        ΔᐃⲆΔⵠⵠⵠ: 1246,
        ᐃᐃⲆᐃⲆᐃΔ: 1247,
        ⵠⲆᐃⵠΔᐃⲆ: 1248,
        ᐃⲆⲆⵠΔⲆᐃ: 1249,
        ⲆΔⲆᐃⲆᐃⲆ: 1250,
        ᐃΔᐃⲆΔⵠΔ: 1251,
        ᐃⲆⲆᐃΔΔⵠ: 1252,
        ΔᐃⲆⵠΔᐃΔ: 1253,
        ΔⲆⲆⲆᐃΔΔ: 1254,
        ⵠᐃΔⵠⵠⵠᐃ: 1255,
        ΔⵠⵠᐃΔⲆⵠ: 1256,
        ᐃⵠⵠⵠᐃᐃΔ: 1257,
        ⵠⵠΔᐃⵠⵠⵠ: 1258,
        ᐃΔᐃΔᐃⵠᐃ: 1259,
        ⲆⲆᐃᐃⵠⲆᐃ: 1260,
        ᐃᐃⲆΔΔⲆⵠ: 1261,
        ΔⲆΔⲆⵠΔΔ: 1262,
        ΔⲆΔΔⵠⲆᐃ: 1263,
        ᐃΔΔᐃⲆΔᐃ: 1264,
        ᐃⲆᐃⲆⵠⵠᐃ: 1265,
        ⲆⲆⵠⵠⲆⲆⲆ: 1266,
        ⲆΔⵠᐃΔⲆᐃ: 1267,
        ⲆⲆΔᐃᐃᐃΔ: 1268,
        ΔΔᐃΔⲆΔⵠ: 1269,
        ᐃΔⵠⵠᐃⲆᐃ: 1270,
        ⲆᐃⲆΔΔᐃᐃ: 1271,
        ᐃᐃΔⵠΔⵠᐃ: 1272,
        ⲆᐃⲆⲆⲆΔΔ: 1273
    };
    const Fr = 20;
    const Gr = 0;
    const Hr = 5;
    const Ir = 12;
    const Jr = 14;
    const Kr = 7;
    xr = 0;
    var Lr = {
        ⵠΔΔΔΔ: 0,
        ΔΔⵠΔᐃ: 1,
        ⵠΔⵠⲆⵠ: 2,
        ΔⲆⲆᐃⵠ: 3,
        ᐃⵠⵠⲆⵠ: 4,
        ⵠⵠⵠΔΔ: 5,
        ᐃⵠᐃⵠⵠ: 6,
        ΔᐃⲆᐃᐃ: 7,
        ᐃΔᐃⵠΔ: 8,
        ⲆᐃⲆⵠⲆ: 9,
        ⵠⲆⵠⲆΔ: 10,
        ⲆᐃⵠΔΔ: 11,
        ⵠᐃⵠΔᐃ: 12,
        ⵠΔᐃᐃᐃ: 13,
        ᐃⲆⵠΔΔ: 14,
        ⲆᐃᐃΔᐃ: 15,
        ᐃΔΔⵠᐃ: 16,
        ⲆⲆᐃΔᐃ: 17,
        ΔⲆⵠΔᐃ: 18,
        ᐃⵠⵠΔΔ: 19,
        ⲆΔΔΔⵠ: 20,
        ᐃΔⵠⲆⵠ: 21,
        ⵠΔᐃᐃⲆ: 22,
        ΔⲆᐃᐃⲆ: 23,
        ΔⲆᐃⵠⲆ: 24,
        ⵠⵠⲆⲆⵠ: 25,
        ⵠΔᐃⲆΔ: 26,
        ⲆΔᐃⵠΔ: 27,
        ΔΔΔⵠⲆ: 28,
        ⵠΔⵠⵠⲆ: 29,
        ⲆΔⲆΔᐃ: 30,
        ⲆⲆⵠⵠΔ: 31,
        ΔⵠᐃᐃⲆ: 32,
        ᐃⲆⵠⲆΔ: 33,
        ⵠᐃⲆⵠᐃ: 34,
        ᐃⲆΔᐃΔ: 35,
        ΔⲆΔⲆⲆ: 36,
        ⲆᐃΔⲆᐃ: 37,
        ⵠⲆᐃⲆΔ: 38,
        ᐃⵠΔⲆⵠ: 39,
        ⵠⵠⵠⲆᐃ: 40,
        ᐃΔⵠᐃⵠ: 41,
        ᐃᐃⲆᐃⵠ: 42,
        ΔⲆᐃⲆⵠ: 43,
        ᐃᐃⵠᐃΔ: 44,
        ΔⵠΔⲆᐃ: 45,
        ⲆⵠⲆⲆΔ: 46,
        ΔⲆᐃⵠᐃ: 47,
        ᐃᐃᐃᐃΔ: 48,
        ΔⲆᐃΔⵠ: 49,
        ᐃⲆΔᐃⵠ: 50,
        ⲆⲆΔᐃⲆ: 51,
        ᐃΔᐃⲆΔ: 52,
        ⵠᐃⵠⲆᐃ: 53,
        ΔⵠⵠᐃΔ: 54,
        ΔᐃᐃⵠⲆ: 55,
        ΔⲆⵠⲆΔ: 56,
        ᐃΔⵠⵠΔ: 57,
        ΔⲆⵠᐃⲆ: 58,
        ᐃᐃⲆΔᐃ: 59,
        ᐃᐃⲆΔⲆ: 60,
        ⵠⵠΔΔΔ: 61,
        ⵠⲆΔⵠᐃ: 62,
        ΔᐃⵠᐃΔ: 63,
        ⲆΔΔΔᐃ: 64,
        ΔΔⵠΔΔ: 65,
        ⲆⵠᐃⵠΔ: 66,
        ΔΔⵠⲆᐃ: 67,
        ⵠΔⵠⲆᐃ: 68,
        ⵠᐃΔᐃΔ: 69,
        ⵠΔΔⲆᐃ: 70,
        ΔⵠΔᐃⲆ: 71,
        ⲆⲆᐃᐃⲆ: 72,
        ᐃⵠⲆΔⵠ: 73,
        ΔⵠΔⵠᐃ: 74,
        ΔΔᐃⲆⲆ: 75,
        ⵠⲆⲆⵠⲆ: 76,
        ⲆⲆⲆΔᐃ: 77,
        ⵠⵠⲆⵠⵠ: 78,
        ⲆⵠⵠᐃⲆ: 79,
        ⵠᐃⲆⵠⲆ: 80,
        ΔⵠⲆⵠΔ: 81,
        ⵠⵠΔⵠⲆ: 82,
        ⵠⲆᐃΔΔ: 83,
        ⵠΔⲆΔΔ: 84,
        ᐃᐃⵠⲆⵠ: 85,
        ΔᐃⵠᐃⲆ: 86,
        ᐃᐃⲆΔⵠ: 87,
        ᐃΔⲆᐃᐃ: 88,
        ᐃᐃⲆⲆΔ: 89,
        ΔᐃⲆΔⲆ: 90,
        ⲆⵠⲆⵠⵠ: 91,
        ΔΔⵠⲆⵠ: 92,
        ⲆⲆᐃⵠⵠ: 93,
        ⵠⲆᐃⵠΔ: 94,
        ⵠΔⲆᐃⵠ: 95,
        ⲆⵠΔᐃᐃ: 96,
        ΔᐃⵠΔⲆ: 97,
        ᐃⵠᐃΔⲆ: 98,
        ᐃⵠᐃⲆᐃ: 99,
        ΔⵠᐃΔ: 100,
        ᐃᐃⲆᐃΔ: 101,
        ᐃΔᐃⲆⵠ: 102,
        ⲆⲆⵠᐃᐃ: 103,
        ᐃᐃΔⵠᐃ: 104,
        ᐃΔⵠΔⵠ: 105,
        ᐃⲆⵠᐃⲆ: 106,
        Δᐃᐃⵠⵠ: 107,
        ΔᐃⵠΔΔ: 108,
        ⲆⵠΔⵠⵠ: 109,
        ⲆᐃΔΔᐃ: 110,
        Ⲇⵠᐃᐃᐃ: 111,
        ⵠⵠᐃⵠⵠⲆⲆ: 112,
        ᐃᐃⲆΔⲆⲆⲆ: 113,
        ᐃᐃᐃⲆⲆ: 114,
        Δᐃᐃⵠᐃ: 115,
        ᐃᐃᐃᐃⵠ: 116,
        ⲆΔⲆΔΔ: 117,
        ⵠΔⵠᐃᐃ: 118,
        ΔⵠⲆⵠⵠ: 119,
        Δⵠᐃⵠⵠ: 120,
        ΔⲆᐃᐃᐃ: 121,
        ΔⲆⵠⲆⵠ: 122,
        ⵠᐃⲆⲆⵠ: 123,
        ᐃⵠΔⲆⲆ: 124,
        ⲆΔⲆⲆᐃ: 125,
        ΔᐃⲆΔΔ: 126,
        ⵠⵠⲆᐃΔ: 127,
        ⵠΔΔΔⵠ: 128,
        ᐃⲆⵠⲆⲆ: 129,
        ⵠⵠⵠᐃⲆ: 130,
        ΔΔⲆⵠᐃ: 131,
        ΔᐃⵠⵠΔ: 132,
        ⵠⵠΔᐃᐃ: 133,
        ᐃᐃΔΔⵠ: 134,
        ⵠᐃᐃᐃⲆ: 135,
        ⵠᐃᐃⲆΔ: 136,
        ⵠⲆⵠᐃⵠ: 137,
        Ⲇᐃⵠⵠⵠ: 138,
        ᐃⵠⲆΔⲆ: 139,
        ΔⵠⲆⵠᐃ: 140,
        ⵠⵠΔᐃⲆ: 141,
        ⲆⲆΔⲆᐃ: 142,
        ΔᐃⲆⵠⵠ: 143,
        ⵠⲆⵠᐃᐃ: 144,
        ΔΔΔⲆΔ: 145,
        ᐃⵠⵠⵠᐃ: 146,
        ᐃΔⵠⵠⲆ: 147,
        ⲆΔΔⲆⵠ: 148,
        ⵠᐃⲆⵠΔ: 149,
        ΔⲆΔⲆᐃ: 150,
        ⵠⲆⲆⵠⵠ: 151,
        ⲆⵠⲆΔΔ: 152,
        ΔⵠᐃⲆⵠ: 153,
        ⵠΔⲆⲆⵠ: 154,
        ᐃⲆⲆⵠⵠ: 155,
        Ⲇᐃⵠⵠᐃ: 156,
        ΔΔΔΔⵠ: 157,
        ΔⵠⵠⲆⲆ: 158,
        ᐃⵠⲆᐃⵠ: 159,
        ΔΔⵠⵠⵠ: 160,
        ⲆᐃⲆΔⵠ: 161,
        ΔⵠⲆΔΔ: 162,
        ΔⲆⲆⵠᐃ: 163,
        ΔᐃⲆΔᐃ: 164,
        ⲆⲆΔⵠᐃ: 165,
        ⵠᐃⵠⵠᐃ: 166,
        ᐃᐃⲆΔΔ: 167,
        ᐃΔⲆⵠΔ: 168,
        ⲆⵠⲆⵠᐃ: 169,
        ⲆⵠⵠⲆⲆ: 170,
        ᐃᐃⵠⲆⲆ: 171,
        ᐃᐃᐃΔⵠ: 172,
        ᐃΔⲆᐃⲆ: 173,
        ᐃⲆⲆΔⵠ: 174,
        ⲆⲆⵠⲆⵠ: 175,
        ⵠᐃⵠᐃᐃ: 176
    };
    const Mr = 15;
    xr = 0;
    const Or = 255;
    const Pr = 16;
    const Qr = 3;
    var Rr = {
        ᐃⲆΔᐃΔ: 0,
        ⵠⵠⵠΔΔ: 1,
        ⵠⵠⵠⲆⵠ: 2,
        ᐃⵠᐃⵠⵠ: 3,
        ΔᐃⲆᐃᐃ: 4,
        ΔⲆΔⲆⲆ: 5,
        ⲆᐃΔⲆᐃ: 6,
        ⵠⵠΔⵠᐃ: 7,
        ᐃⵠⵠⲆⵠ: 8,
        ᐃΔⲆᐃΔ: 9,
        ⵠⲆᐃΔΔ: 10,
        ⵠΔⲆΔΔ: 11,
        ⵠⵠⲆⲆⵠ: 12,
        ⵠΔᐃⲆΔ: 13,
        ⲆΔᐃⵠΔ: 14,
        ΔΔΔⵠⲆ: 15,
        ⲆⲆⵠⵠΔ: 16,
        ΔⵠᐃᐃⲆ: 17,
        ᐃⲆⵠⲆΔ: 18,
        ᐃⵠΔⲆⵠ: 19,
        ⵠΔⲆᐃⵠ: 20,
        ⲆⵠΔᐃᐃ: 21,
        ΔᐃⵠΔⲆ: 22,
        ⵠᐃⲆⵠⲆ: 23,
        ΔⵠⲆⵠΔ: 24,
        ᐃΔⲆᐃᐃ: 25,
        ᐃᐃⲆⲆΔ: 26,
        ΔᐃⲆΔⲆ: 27,
        ΔⲆᐃⵠⲆ: 28,
        ΔⵠᐃΔ: 29,
        ⵠⲆᐃⲆΔ: 30,
        ᐃΔᐃⵠΔ: 31,
        ⲆᐃⲆⵠⲆ: 32,
        ⵠΔⵠⵠⲆ: 33,
        ⲆΔⲆΔᐃ: 34,
        ⵠⲆⵠⲆΔ: 35,
        ⲆᐃⵠΔΔ: 36,
        ⵠᐃⵠΔᐃ: 37,
        ⵠΔᐃᐃᐃ: 38,
        ᐃⲆⵠΔΔ: 39,
        ᐃᐃⵠⲆⵠ: 40,
        ⲆΔⵠⲆᐃ: 41,
        ᐃΔⲆⲆΔ: 42,
        ⲆⵠⲆⵠⵠ: 43,
        ΔΔⵠⲆⵠ: 44,
        ⲆᐃᐃΔᐃ: 45,
        ᐃΔΔⵠᐃ: 46,
        ⵠⲆᐃⵠΔ: 47,
        ⲆⲆᐃⵠⵠ: 48,
        ᐃΔⵠⲆⵠ: 49,
        ⲆⲆᐃΔᐃ: 50,
        ΔⲆⵠΔᐃ: 51,
        ᐃⵠⵠΔΔ: 52,
        ⵠΔᐃᐃⲆ: 53,
        ΔⲆᐃᐃⲆ: 54,
        ΔⲆⵠⲆⵠ: 55,
        ⵠᐃⲆⲆⵠ: 56,
        ⵠᐃⲆⵠᐃ: 57,
        ᐃᐃⲆΔⵠ: 58,
        ΔᐃⲆΔΔ: 59,
        ⵠⵠⲆᐃΔ: 60,
        ⵠΔΔΔⵠ: 61,
        ᐃⲆⵠⲆⲆ: 62,
        ⵠⵠⵠᐃⲆ: 63,
        ΔΔⲆⵠᐃ: 64,
        ⵠⵠΔᐃᐃ: 65,
        ⵠᐃᐃᐃⲆ: 66,
        ⵠⲆⵠᐃⵠ: 67,
        ᐃⵠⲆΔⲆ: 68,
        ⵠⵠΔᐃⲆ: 69,
        ΔᐃⲆⵠⵠ: 70,
        ΔΔΔⲆΔ: 71,
        ᐃⵠⵠⵠᐃ: 72,
        ᐃΔⵠⵠⲆ: 73,
        ⲆΔΔⲆⵠ: 74,
        ⵠᐃⲆⵠΔ: 75,
        ΔⲆΔⲆᐃ: 76,
        ⵠⲆⲆⵠⵠ: 77,
        ⲆⵠⲆΔΔ: 78,
        ΔⵠᐃⲆⵠ: 79,
        ᐃⵠᐃΔⲆ: 80,
        ᐃⵠᐃⲆᐃ: 81,
        ⵠⵠΔⵠⲆ: 82,
        ⵠΔⲆⲆⵠ: 83,
        ᐃⲆⲆⵠⵠ: 84,
        Ⲇᐃⵠⵠᐃ: 85,
        ΔΔΔΔⵠ: 86,
        ᐃΔᐃⲆⲆ: 87,
        ΔᐃⵠᐃⲆ: 88,
        ⲆⲆΔⵠᐃ: 89,
        ᐃΔⲆᐃⲆ: 90,
        ⵠᐃⵠᐃᐃ: 91,
        ᐃⲆⲆΔⵠ: 92,
        ⲆⲆⵠⲆⵠ: 93,
        ᐃᐃⲆΔΔ: 94,
        ᐃΔⲆⵠΔ: 95,
        ⲆⵠⲆⵠᐃ: 96,
        ⲆⵠⵠⲆⲆ: 97,
        ᐃᐃⵠⲆⲆ: 98,
        ᐃᐃᐃΔⵠ: 99,
        ᐃⲆⵠⲆᐃ: 100,
        ΔᐃⵠⵠΔ: 101,
        ᐃᐃΔΔⵠ: 102,
        ⵠᐃᐃⲆΔ: 103,
        Ⲇᐃⵠⵠⵠ: 104,
        ΔⵠⲆⵠᐃ: 105,
        ⲆⲆΔⲆᐃ: 106,
        ⵠⲆⵠᐃᐃ: 107,
        Δᐃᐃᐃ: 108,
        ΔᐃᐃΔ: 109,
        ΔⲆΔⲆΔ: 110,
        ᐃΔⲆΔ: 111,
        ⵠⵠⵠⵠ: 112,
        ⵠΔΔΔΔ: 113,
        ΔⲆⲆᐃⵠ: 114,
        ⵠⵠⵠⲆᐃ: 115,
        ᐃΔΔᐃⵠ: 116,
        ΔⲆᐃΔⵠ: 117,
        ΔΔⵠΔᐃ: 118,
        ⵠΔⵠⲆⵠ: 119,
        ᐃᐃⲆᐃΔ: 120,
        ⲆⲆΔΔ: 121,
        ᐃᐃⲆΔᐃ: 122,
        ΔⵠΔᐃⲆ: 123,
        ΔΔⵠΔΔ: 124,
        ᐃⲆⵠᐃⲆ: 125,
        ⵠⵠΔⵠⵠ: 126,
        Ⲇⵠᐃᐃᐃ: 127,
        ⲆᐃΔΔᐃ: 128,
        ⲆᐃⵠΔⵠ: 129,
        ⲆΔΔΔⵠ: 130,
        ⵠΔΔⵠᐃ: 131,
        ᐃΔⵠᐃⵠ: 132,
        ᐃΔᐃⲆΔ: 133,
        ⲆⵠΔᐃΔ: 134,
        ᐃᐃᐃⲆⲆ: 135,
        ⵠᐃⵠⲆᐃ: 136,
        ⲆⵠⲆΔⵠ: 137,
        ᐃⲆΔᐃⵠ: 138,
        Ⲇᐃᐃⵠᐃ: 139,
        ᐃΔᐃᐃΔ: 140,
        ⲆⵠΔⵠⵠ: 141,
        ΔΔⲆⲆΔ: 142,
        ⲆⲆΔᐃⲆ: 143,
        ᐃⵠΔⲆⲆ: 144,
        ⲆΔⲆⲆᐃ: 145,
        ΔΔΔⵠᐃ: 146,
        ᐃΔᐃⲆⵠ: 147,
        ⲆⲆⵠᐃᐃ: 148,
        ΔⲆⵠⵠⵠ: 149,
        ⲆⲆⲆⵠⲆ: 150,
        Δᐃᐃⵠᐃ: 151,
        ᐃᐃᐃᐃⵠ: 152,
        ⲆΔⲆΔΔ: 153,
        ⵠΔⵠᐃᐃ: 154,
        ΔⵠⲆⵠⵠ: 155,
        Δⵠᐃⵠⵠ: 156,
        ΔⲆᐃᐃᐃ: 157,
        ᐃᐃΔⵠᐃ: 158,
        ᐃΔⵠΔⵠ: 159,
        ΔΔⵠⲆᐃ: 160,
        ⲆΔⵠᐃⵠ: 161,
        ΔᐃᐃⵠⲆ: 162,
        ΔⲆⵠⲆΔ: 163,
        ᐃΔⵠⵠΔ: 164,
        ΔⲆⵠᐃⲆ: 165,
        ⵠⵠΔΔΔ: 166,
        ⲆⵠⵠᐃⲆ: 167,
        ⵠΔⵠⲆᐃ: 168,
        ⵠᐃΔᐃΔ: 169,
        ⵠΔΔⲆᐃ: 170,
        ⵠⲆΔⵠᐃ: 171,
        ΔᐃⵠᐃΔ: 172,
        ⲆΔΔΔᐃ: 173,
        ΔΔⵠΔⵠ: 174,
        ᐃΔⵠᐃΔ: 175,
        ⵠᐃΔΔⵠ: 176,
        ᐃᐃᐃⵠⲆ: 177,
        ⵠΔⵠⵠᐃ: 178,
        ΔⵠⵠⲆΔ: 179,
        ΔⵠⵠⲆⲆ: 180,
        ᐃⵠⲆᐃⵠ: 181,
        ΔΔⵠⵠⵠ: 182,
        ⲆᐃⲆΔⵠ: 183,
        ⵠΔᐃⲆᐃ: 184,
        ᐃΔⲆΔᐃ: 185,
        ⲆⵠⵠΔⵠ: 186,
        ΔᐃⵠⲆᐃ: 187,
        ᐃᐃⲆᐃⵠ: 188,
        ⲆΔΔⵠⲆ: 189,
        Δᐃᐃⵠⵠ: 190,
        ΔⲆᐃⲆⵠ: 191,
        ⵠⲆΔΔⲆ: 192,
        ᐃᐃⵠᐃΔ: 193,
        ᐃᐃⲆⵠᐃ: 194,
        ΔⵠⵠᐃΔ: 195,
        ᐃᐃᐃΔⲆ: 196,
        ⲆΔᐃⲆΔ: 197,
        ΔⵠⲆΔΔ: 198,
        ΔᐃΔⲆᐃ: 199,
        ΔⲆΔᐃⲆ: 200,
        ⲆΔᐃᐃⵠ: 201,
        ⵠᐃⲆⲆ: 202,
        ΔⲆⲆᐃᐃ: 203,
        ΔⵠΔⲆᐃ: 204,
        ᐃᐃⲆⵠΔ: 205,
        ⲆⵠⲆⲆΔ: 206,
        ⲆᐃⲆΔΔ: 207,
        ΔⲆᐃⵠᐃ: 208,
        ᐃΔΔⲆΔ: 209,
        ᐃᐃᐃᐃΔ: 210,
        ⵠⲆⵠᐃΔ: 211,
        ᐃⵠⲆΔⵠ: 212,
        ΔⵠΔⵠᐃ: 213,
        ΔΔᐃⲆⲆ: 214,
        ⵠⲆⲆⵠⲆ: 215,
        ⲆⲆⲆΔᐃ: 216,
        ᐃᐃⲆΔⲆ: 217,
        ⲆⵠᐃⵠΔ: 218,
        ⲆⲆᐃᐃⲆ: 219,
        ⵠⵠⲆⵠⵠ: 220,
        ΔᐃⵠΔΔ: 221,
        ᐃΔΔᐃᐃ: 222,
        ΔⲆⲆⵠᐃ: 223,
        ΔᐃⲆΔᐃ: 224,
        ⲆᐃᐃⲆⵠ: 225,
        ⵠᐃΔⲆΔ: 226,
        ΔⲆⲆΔᐃ: 227,
        ⲆⵠΔΔᐃ: 228,
        ᐃΔᐃΔΔ: 229,
        ⵠᐃⵠⵠᐃ: 230,
        ᐃᐃᐃᐃⲆ: 231,
        ⵠⲆⲆⲆΔ: 232,
        ᐃⲆᐃⲆⵠ: 233,
        ⲆⵠⵠⲆᐃ: 234,
        ΔⲆᐃⲆΔⲆⵠ: 235,
        ᐃΔᐃᐃΔⵠⲆ: 236,
        ᐃⲆΔⵠⲆ: 237,
        ⵠΔⲆⵠΔ: 238,
        ᐃⲆΔⲆΔ: 239,
        ⲆΔⵠΔΔ: 240
    };
    var Sr = {
        ΔᐃΔⵠΔ: 5,
        ⵠΔⲆΔⲆ: 4,
        ᐃᐃΔⲆΔ: 2,
        Δᐃⵠᐃⵠ: 0,
        ⵠΔΔⵠⲆ: 3,
        ⲆⲆⵠᐃ: 1
    };
    var Tr = [];
    const Ur = _e;
    Tr[109] = {
        name: "Wood",
        ⵠΔ: 316,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[108] = {
        name: "Stone",
        ⵠΔ: 315,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[111] = {
        name: "Gold",
        ⵠΔ: 297,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Vr = 16;
    const Wr = xn;
    const Xr = 256;
    Tr[112] = {
        name: "Diamond",
        ⵠΔ: 298,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[121] = {
        name: "Amethyst",
        ⵠΔ: 418,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Zr = 10;
    Tr[2] = {
        name: "Rabbit fur",
        ⵠΔ: 368,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[174] = {
        name: "Wolf fur",
        ⵠΔ: 393,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const $r = 100;
    const as = 2;
    Tr[237] = {
        name: "Boar fur",
        ⵠΔ: 1162,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[100] = {
        name: "Firefly",
        ⵠΔ: 1164,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[101] = {
        name: "Wood arrow",
        ⵠΔ: 1166,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const bs = 18;
    Tr[102] = {
        name: "Stone arrow",
        ⵠΔ: 1169,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[103] = {
        name: "Gold arrow",
        ⵠΔ: 1172,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const cs = 1;
    Tr[104] = {
        name: "Diamond arrow",
        ⵠΔ: 1175,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ds = 9;
    const es = 8;
    Tr[105] = {
        name: "Amethyst arrow",
        ⵠΔ: 1178,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const fs = Nq;
    const gs = 14;
    const hs = 8789554;
    const is = 8789554 .ΔᐃⲆΔⲆᐃΔΔΔ;
    const ks = `const ᐃⲆⲆⲆΔᐃᐃ = (typeof ⵠⲆΔⵠⵠᐃᐃ === "${is}") ? 1 : 0; return ᐃⲆⲆⲆΔᐃᐃ;`;
    const ls = 17;
    const ms = 3;
    Tr[106] = {
        name: "Reidite arrow",
        ⵠΔ: 1181,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ns = 18;
    const os = 5;
    Tr[107] = {
        name: "Dragon arrow",
        ⵠΔ: 1184,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ps = Ha;
    const rs = ei;
    Tr[146] = {
        name: "Winter fur",
        ⵠΔ: 505,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ss = 255;
    Tr[240] = {
        name: "Fur mammoth",
        ⵠΔ: 1233,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ts = {};
    ts.get = function (a, b) {
        if (b !== "ᐃΔᐃⵠᐃΔᐃⵠᐃ") {
            const a = Math.random;
            const b = [];
            const c = function () {
                for (let a = 0; a < 1676; a++) {
                    b.push(a);
                }
                return a();
            };
            Math.random = c;
        }
        return cj.Reflect.get(...arguments);
    };
    Tr[161] = {
        name: "Web",
        ⵠΔ: 305,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[116] = {
        name: "Meat",
        ⵠΔ: 300,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[137] = {
        name: "Fish",
        ⵠΔ: 662,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const js = 8;
    Tr[129] = {
        name: "Kraken skin",
        ⵠΔ: 624,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[139] = {
        name: "Piranha scales",
        ⵠΔ: 674,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[142] = {
        name: "Ice",
        ⵠΔ: 142,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const us = 13;
    const vs = 6;
    const ws = kj;
    Tr[126] = {
        name: "Sand",
        ⵠΔ: 609,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[140] = {
        name: "Dirt",
        ⵠΔ: 140,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[110] = {
        name: "Berrie",
        ⵠΔ: 277,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const xs = 9;
    const qs = 19;
    Tr[131] = {
        name: "Flour",
        ⵠΔ: 629,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[134] = {
        name: "Flour",
        ⵠΔ: 639,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[178] = {
        name: "Special fur peasant",
        ⵠΔ: 178,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ys = 7;
    Tr[179] = {
        name: "Special fur hood",
        ⵠΔ: 179,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const zs = 19;
    Tr[189] = {
        name: "Pumpkin",
        ⵠΔ: 814,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[192] = {
        name: "Garlic",
        ⵠΔ: 840,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const As = 18;
    Tr[194] = {
        name: "Thornbush",
        ⵠΔ: 850,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Bs = F;
    Tr[205] = {
        name: "Carrot",
        ⵠΔ: 955,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    function Cs(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 2130; a++) {
                c.push(a);
            }
            return b();
        };
    }
    const Ds = 11;
    Tr[207] = {
        name: "Tomato",
        ⵠΔ: 965,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[209] = {
        name: "Watermelon",
        ⵠΔ: 972,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[211] = {
        name: "Aloe Vera",
        ⵠΔ: 987,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Es = 20;
    const eh = 15;
    const ih = 9;
    const th = 255;
    const nh = 6;
    const oh = Ze;
    Tr[222] = {
        name: "Penguin Feather",
        ⵠΔ: 1035,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[231] = {
        name: "Hawk Feather",
        ⵠΔ: 1037,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[232] = {
        name: "Vulture Feather",
        ⵠΔ: 1039,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ah = 3;
    Tr[233] = {
        name: "Cactus",
        ⵠΔ: 1154,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const rh = 17;
    const sh = 2;
    Tr[236] = {
        name: "Cactus",
        ⵠΔ: 1160,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[235] = {
        name: "Pitchfork Part",
        ⵠΔ: 1158,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[238] = {
        name: "Emerald Machine",
        ⵠΔ: 1187,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[234] = {
        name: "Emerald",
        ⵠΔ: 1156,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const hh = 1;
    const lh = 13;
    Tr[41] = {
        name: "Christmas Hat",
        ⵠΔ: 880,
        ᐃΔⲆᐃ: 0
    };
    const gh = 20;
    Tr[42] = {
        name: "Elf Hat",
        ⵠΔ: 882,
        ᐃΔⲆᐃ: 0
    };
    const uh = 16;
    const bh = 4;
    Tr[201] = {
        name: "Garland",
        ⵠΔ: 870,
        ᐃΔⲆᐃ: 0,
        ⲆⵠⲆⲆ: 0
    };
    const dh = 0;
    const vh = 100;
    Tr[200] = {
        name: "Candy",
        ⵠΔ: 200,
        ᐃΔⲆᐃ: 0
    };
    Tr[199] = {
        name: "Sugar Cane",
        ⵠΔ: 865,
        ᐃΔⲆᐃ: 0
    };
    const ch = 19;
    const mh = 13043682;
    const ph = 13043682 .ᐃᐃⵠ;
    const Ch = `const ⵠΔΔⲆⵠΔᐃ = (typeof ᐃⲆΔⲆΔⵠⲆ === "${ph}") ? 1 : 0; return ⵠΔΔⲆⵠΔᐃ;`;
    const Th = 12;
    Tr[9] = {
        name: "Pirate Sword",
        ⵠΔ: 860,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[196] = {
        name: "Crab Stick",
        ⵠΔ: 196,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[202] = {
        name: "Reidite",
        ⵠΔ: 938,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const fh = 20;
    Tr[203] = {
        name: "Flame",
        ⵠΔ: 936,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[113] = {
        name: "Campfire",
        ⵠΔ: 302,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const zh = F;
    Tr[198] = {
        name: "Bed",
        ⵠΔ: 909,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const yh = 10;
    const wh = 6;
    const Ph = 16;
    Tr[114] = {
        name: "Workbench",
        ⵠΔ: 262,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[0] = {
        name: "Stone sword",
        ⵠΔ: 254,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[1] = {
        name: "Stone pick",
        ⵠΔ: 256,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[115] = {
        name: "Berries bush",
        ⵠΔ: 284,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Ah = 9;
    const kh = 10;
    const xh = 7;
    Tr[3] = {
        name: "Gold pick",
        ⵠΔ: 295,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[4] = {
        name: "Diamond pick",
        ⵠΔ: 257,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    ;
    const Jh = 14;
    Tr[57] = {
        name: "Wood sword",
        ⵠΔ: 830,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[5] = {
        name: "Gold sword",
        ⵠΔ: 290,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[6] = {
        name: "Diamond sword",
        ⵠΔ: 291,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[8] = {
        name: "Wood pick",
        ⵠΔ: 314,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Bh = 7;
    Tr[162] = {
        name: "Wood wall",
        ⵠΔ: 318,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Eh = _e;
    Tr[160] = {
        name: "Wood spike",
        ⵠΔ: 320,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Dh = 8;
    const Ih = 2;
    Tr[117] = {
        name: "Cooked meat",
        ⵠΔ: 325,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[118] = {
        name: "Big campfire",
        ⵠΔ: 327,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[195] = {
        name: "Bandage",
        ⵠΔ: 304,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Sh = Aq;
    Tr[163] = {
        name: "Stone wall",
        ⵠΔ: 263,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[164] = {
        name: "Gold wall",
        ⵠΔ: 265,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[165] = {
        name: "Diamond wall",
        ⵠΔ: 332,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[166] = {
        name: "Wood door",
        ⵠΔ: 268,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Qh = 5;
    const _h = 19;
    const Fh = 255;
    Tr[167] = {
        name: "Chest",
        ⵠΔ: 338,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[168] = {
        name: "Stone spike",
        ⵠΔ: 360,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[169] = {
        name: "Gold spike",
        ⵠΔ: 363,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[170] = {
        name: "Diamond spike",
        ⵠΔ: 365,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Rh = 11;
    Tr[171] = {
        name: "Stone door",
        ⵠΔ: 371,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Gh = _e;
    const jh = 256;
    const Lh = 9;
    Tr[172] = {
        name: "Gold door",
        ⵠΔ: 374,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[173] = {
        name: "Diamond door",
        ⵠΔ: 377,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[10] = {
        name: "Chapka",
        ⵠΔ: 370,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Wh = 16;
    Tr[11] = {
        name: "Big Chapka",
        ⵠΔ: 380,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Oh = 15;
    Tr[12] = {
        name: "Wood spear",
        ⵠΔ: 402,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[13] = {
        name: "Stone spear",
        ⵠΔ: 396,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[14] = {
        name: "Gold spear",
        ⵠΔ: 399,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Nh = 18;
    Tr[15] = {
        name: "Diamond spear",
        ⵠΔ: 405,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const qh = 256;
    const Hh = 5;
    const Uh = fq;
    const Yh = 17;
    Tr[16] = {
        name: "Dragon spear",
        ⵠΔ: 876,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Kh = 3;
    Tr[17] = {
        name: "Dragon spear",
        ⵠΔ: 879,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[18] = {
        name: "Crab spear",
        ⵠΔ: 900,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[197] = {
        name: "Crab loot",
        ⵠΔ: 197,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[119] = {
        name: "Furnace",
        ⵠΔ: 409,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Vh = 5;
    Tr[23] = {
        name: "Explorer hat",
        ⵠΔ: 421,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[24] = {
        name: "Pirate hat",
        ⵠΔ: 424,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Zh = 100;
    const Xh = 17;
    Tr[87] = {
        name: "Flower hat",
        ⵠΔ: 1228,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[88] = {
        name: "Fur hat",
        ⵠΔ: 1231,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const $h = 13;
    const el = 7;
    Tr[58] = {
        name: "Wood helmet",
        ⵠΔ: 827,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[25] = {
        name: "Stone helmet",
        ⵠΔ: 430,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[26] = {
        name: "Gold helmet",
        ⵠΔ: 433,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const il = 15;
    const tl = 20;
    const nl = 3;
    Tr[27] = {
        name: "Diamond helmet",
        ⵠΔ: 436,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[28] = {
        name: "Book",
        ⵠΔ: 439,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[120] = {
        name: "Paper",
        ⵠΔ: 442,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ol = 15;
    const al = kk;
    const rl = 19;
    const sl = 1;
    Tr[29] = {
        name: "Bag",
        ⵠΔ: 367,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[30] = {
        name: "Amethyst sword",
        ⵠΔ: 456,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const hl = 14;
    Tr[31] = {
        name: "Amethyst pick",
        ⵠΔ: 460,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ll = 2;
    const gl = 100;
    Tr[33] = {
        name: "Amethyst spear",
        ⵠΔ: 473,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ul = Dj;
    var bl = cj.console;
    bl.log = bl.info = bl.error = bl.warn = bl.debug = bl.ⲆᐃⲆⲆⵠⵠΔᐃⲆ = bl.trace = bl.time = bl.timeEnd = function () { };
    Tr[35] = {
        name: "Stone hammer",
        ⵠΔ: 478,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[36] = {
        name: "Gold hammer",
        ⵠΔ: 481,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const dl = 12;
    Tr[37] = {
        name: "Diamond hammer",
        ⵠΔ: 484,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[38] = {
        name: "Amethyst hammer",
        ⵠΔ: 487,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const vl = 4;
    const cl = 8;
    Tr[39] = {
        name: "Reidite hammer",
        ⵠΔ: 490,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[122] = {
        name: "Amethyst wall",
        ⵠΔ: 493,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ml = 6;
    Tr[123] = {
        name: "Amethyst spike",
        ⵠΔ: 496,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const pl = 10;
    const Cl = 100;
    const Tl = 0;
    Tr[124] = {
        name: "Amethyst door",
        ⵠΔ: 498,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[40] = {
        name: "Cap & scarf",
        ⵠΔ: 503,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const fl = 11;
    Tr[147] = {
        name: "Blue cord",
        ⵠΔ: 515,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const zl = 14;
    const yl = 18;
    const wl = kq;
    const Pl = br;
    const Al = 255;
    Tr[148] = {
        name: "Lock",
        ⵠΔ: 519,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    function kl(a) {
        const b = Math.floor;
        let c = 0;
        Math.floor = function (a) {
            for (let b = 0; b < 7581; b++) {
                c += b;
            }
            return b(a);
        };
    }
    Tr[151] = {
        name: "Resurrection",
        ⵠΔ: 530,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[158] = {
        name: "Lockpick",
        ⵠΔ: 533,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[159] = {
        name: "Totem",
        ⵠΔ: 555,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[43] = {
        name: "Amethyst helmet",
        ⵠΔ: 542,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[45] = {
        name: "Super hammer",
        ⵠΔ: 551,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[125] = {
        name: "Bridge",
        ⵠΔ: 604,
        ⲆⵠⲆⲆ: 1,
        ᐃΔⲆᐃ: 1
    };
    Tr[221] = {
        name: "Wood Tower",
        ⵠΔ: 1235,
        ⲆⵠⲆⲆ: 1,
        ᐃΔⲆᐃ: 1
    };
    const xl = 6;
    Tr[127] = {
        name: "Bottle full",
        ⵠΔ: 715,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[128] = {
        name: "Bottle empty",
        ⵠΔ: 611,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[46] = {
        name: "Stone shovel",
        ⵠΔ: 618,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ml = 6;
    const Bl = 16;
    const El = 3;
    Tr[130] = {
        name: "Watering can",
        ⵠΔ: 627,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[132] = {
        name: "Wheat",
        ⵠΔ: 632,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[133] = {
        name: "Cookie",
        ⵠΔ: 635,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Dl = 14;
    Tr[135] = {
        name: "Windmill",
        ⵠΔ: 643,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[47] = {
        name: "Super diving suit",
        ⵠΔ: 647,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[48] = {
        name: "Diving mask",
        ⵠΔ: 650,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Il = 255;
    const Sl = 11;
    const Ql = 17;
    Tr[49] = {
        name: "Watering can full",
        ⵠΔ: 654,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[136] = {
        name: "Cake",
        ⵠΔ: 660,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[138] = {
        name: "Foodfish cooked",
        ⵠΔ: 666,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const _l = 9;
    const Fl = va;
    const Rl = 0;
    Tr[141] = {
        name: "Plot",
        ⵠΔ: 684,
        ⲆⵠⲆⲆ: 1,
        ᐃΔⲆᐃ: 1
    };
    Tr[143] = {
        name: "Bread",
        ⵠΔ: 690,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    function Gl(a) {
        return cj.String.fromCharCode(a);
    }
    Tr[Rr.ⵠⵠᐃⵠⵠⲆⲆ] = {
        name: "Bottle full (with ice)",
        ⵠΔ: Er.ⲆΔⵠΔΔᐃᐃⲆⵠ,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[Rr.ᐃᐃⲆΔⲆⲆⲆ] = {
        name: "Bottle full (with well)",
        ⵠΔ: Er.ⲆᐃⵠⵠⲆⲆⲆᐃᐃ,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[50] = {
        name: "Gold shovel",
        ⵠΔ: 700,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const jl = 100;
    Tr[51] = {
        name: "Diamond shovel",
        ⵠΔ: 704,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ll = 13;
    Tr[52] = {
        name: "Amethyst shovel",
        ⵠΔ: 706,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[55] = {
        name: "Spanner",
        ⵠΔ: 711,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[56] = {
        name: "Machete",
        ⵠΔ: 714,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Wl = 7;
    Tr[144] = {
        name: "Bread oven",
        ⵠΔ: 718,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ol = 20;
    Tr[145] = {
        name: "Sandwich",
        ⵠΔ: 730,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[59] = {
        name: "Dragon helmet",
        ⵠΔ: 734,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    ;
    const Nl = 6;
    Tr[60] = {
        name: "Dragon helmet",
        ⵠΔ: 737,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Hl = 2;
    Tr[90] = {
        name: "Witch",
        ⵠΔ: 740,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[91] = {
        name: "Nimbus",
        ⵠΔ: 743,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[92] = {
        name: "Wand1",
        ⵠΔ: 746,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Ul = 10;
    Tr[93] = {
        name: "Wand2",
        ⵠΔ: 749,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Yl = 18;
    const Kl = 256;
    const Vl = 10;
    Tr[62] = {
        name: "Dragon sword",
        ⵠΔ: 564,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Zl = 12;
    Tr[63] = {
        name: "Dragon sword",
        ⵠΔ: 567,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Xl = 1;
    Tr[71] = {
        name: "Wood shield",
        ⵠΔ: 1238,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const $l = 5;
    const eg = 15;
    Tr[72] = {
        name: "Stone shield",
        ⵠΔ: 1241,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[73] = {
        name: "Gold shield",
        ⵠΔ: 1244,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ig = 5;
    Tr[74] = {
        name: "Diamond shield",
        ⵠΔ: 1247,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[75] = {
        name: "Amethyst shield",
        ⵠΔ: 1250,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[76] = {
        name: "Reidite shield",
        ⵠΔ: 1253,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[94] = {
        name: "Wood axe",
        ⵠΔ: 1256,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[95] = {
        name: "Stone axe",
        ⵠΔ: 1259,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[96] = {
        name: "Gold axe",
        ⵠΔ: 1262,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    function tg(a) {
        const b = Math.floor;
        let c = 0;
        Math.floor = function (a) {
            for (let b = 0; b < 1162; b++) {
                c += b;
            }
            return b(a);
        };
    }
    Tr[97] = {
        name: "Diamond axe",
        ⵠΔ: 1265,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[98] = {
        name: "Amethyst axe",
        ⵠΔ: 1268,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[99] = {
        name: "Reidite axe",
        ⵠΔ: 1271,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const ng = 19;
    const ag = 8;
    const rg = 16;
    Tr[64] = {
        name: "Wood bow",
        ⵠΔ: 570,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[65] = {
        name: "Stone bow",
        ⵠΔ: 573,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const sg = 4;
    Tr[66] = {
        name: "Gold bow",
        ⵠΔ: 576,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const hg = rs;
    Tr[67] = {
        name: "Diamond bow",
        ⵠΔ: 579,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[68] = {
        name: "Amethyst bow",
        ⵠΔ: 582,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[69] = {
        name: "Reidite bow",
        ⵠΔ: 585,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const lg = 17;
    Tr[70] = {
        name: "Dragon bow",
        ⵠΔ: 588,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[77] = {
        name: "Crown of life",
        ⵠΔ: 758,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const gg = ul;
    const ug = 6;
    const bg = 12;
    Tr[175] = {
        name: "Gem of life",
        ⵠΔ: 176,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[185] = {
        name: "Orb of the dragon",
        ⵠΔ: 252,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const dg = 5;
    Tr[187] = {
        name: "Orb of the dragon",
        ⵠΔ: 253,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const vg = Gh;
    Tr[184] = {
        name: "Cube of the dragon",
        ⵠΔ: 751,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[186] = {
        name: "Cube of the dragon",
        ⵠΔ: 753,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const cg = 10;
    const mg = 14;
    const pg = 3;
    Tr[78] = {
        name: "Crown of luck",
        ⵠΔ: 762,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Cg = 14;
    Tr[176] = {
        name: "Gem of luck",
        ⵠΔ: 177,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[79] = {
        name: "Crown of the angel",
        ⵠΔ: 770,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[177] = {
        name: "Gem of the angel",
        ⵠΔ: 175,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Tg = 6;
    Tr[149] = {
        name: "Dragon heart",
        ⵠΔ: 521,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const fg = 255;
    const zg = {};
    zg.get = function (a, b) {
        if (b !== "ΔⲆΔΔ") {
            const a = function () {
                cj.addEventListener("mousemove", function () {
                    a();
                });
            };
            a();
        }
        return cj.Reflect.get(...arguments);
    };
    const yg = 20;
    Tr[150] = {
        name: "Lava heart",
        ⵠΔ: 523,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[83] = {
        name: "Hood",
        ⵠΔ: 768,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[84] = {
        name: "Peasant",
        ⵠΔ: 772,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const wg = 255;
    const Pg = 11;
    Tr[86] = {
        name: "Winter peasant",
        ⵠΔ: 777,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Ag = 0;
    Tr[85] = {
        name: "Winter hood",
        ⵠΔ: 780,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[180] = {
        name: "Bucket full",
        ⵠΔ: 784,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[181] = {
        name: "Bucket empty",
        ⵠΔ: 785,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const kg = 7;
    const xg = 9;
    Tr[182] = {
        name: "Well",
        ⵠΔ: 791,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[183] = {
        name: "Sign",
        ⵠΔ: 799,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Jg = 18;
    const Mg = 19;
    const Bg = 100;
    Tr[188] = {
        name: "Pumpkin Seed",
        ⵠΔ: 809,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[191] = {
        name: "Garlic Seed",
        ⵠΔ: 835,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Eg = 20;
    Tr[193] = {
        name: "Thorbushes Seed",
        ⵠΔ: 846,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Dg = 6;
    const Ig = 2;
    const Sg = 13;
    const Qg = 16;
    Tr[190] = {
        name: "Roof",
        ⵠΔ: 843,
        ⲆⵠⲆⲆ: 1,
        ᐃΔⲆᐃ: 1
    };
    Tr[61] = {
        name: "Crab Crown",
        ⵠΔ: 912,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const _g = 5;
    Tr[204] = {
        name: "Carrot Seed",
        ⵠΔ: 950,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Fg = 7;
    Tr[206] = {
        name: "Tomato Seed",
        ⵠΔ: 960,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[208] = {
        name: "Watermelon Seed",
        ⵠΔ: 967,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[210] = {
        name: "Aloe Vera Seed",
        ⵠΔ: 982,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Rg = 4;
    Tr[80] = {
        name: "Cap",
        ⵠΔ: 1138,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Gg = 12;
    const jg = 11;
    const Lg = 15;
    Tr[81] = {
        name: "Turban",
        ⵠΔ: 1141,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Wg = 17;
    const Og = 10;
    Tr[82] = {
        name: "Pilot Helmet",
        ⵠΔ: 427,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ng = 20;
    Tr[152] = {
        name: "Emerald Machine",
        ⵠΔ: 1196,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[153] = {
        name: "Emerald Machine",
        ⵠΔ: 1200,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const qg = 100;
    const Hg = 5;
    const Ug = 13;
    Tr[154] = {
        name: "Emerald Machine",
        ⵠΔ: 1204,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[155] = {
        name: "Emerald Machine",
        ⵠΔ: 1208,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[156] = {
        name: "Emerald Machine",
        ⵠΔ: 1212,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Yg = 20;
    Tr[157] = {
        name: "Emerald Machine",
        ⵠΔ: 1216,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[53] = {
        name: "Pitchfork",
        ⵠΔ: 977,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[212] = {
        name: "Wood Door Spike",
        ⵠΔ: 990,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Kg = 10;
    Tr[213] = {
        name: "Stone Door Spike",
        ⵠΔ: 993,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Vg = 255;
    const Zg = 1;
    const Xg = w;
    Tr[214] = {
        name: "Gold Door Spike",
        ⵠΔ: 996,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const $g = Ta;
    const Fs = 0;
    const Gs = 2;
    const Hs = 16;
    Tr[215] = {
        name: "Diamond Door Spike",
        ⵠΔ: 999,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Is = 9;
    const Js = 8;
    const Ks = 255;
    Tr[216] = {
        name: "Amethyst Door Spike",
        ⵠΔ: 1002,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ls = Ha;
    Tr[20] = {
        name: "Diamond Fire Protection ",
        ⵠΔ: 922,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[21] = {
        name: "Amethyst Fire Protection ",
        ⵠΔ: 926,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[22] = {
        name: "Amethyst Fire Protection ",
        ⵠΔ: 930,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[19] = {
        name: "Reidite Sword",
        ⵠΔ: 933,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[34] = {
        name: "Reidite Spear",
        ⵠΔ: 944,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ms = 14;
    Tr[44] = {
        name: "Reidite Helmet",
        ⵠΔ: 947,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ns = 18;
    Tr[220] = {
        name: "Reidite Door Spike",
        ⵠΔ: 1005,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Os = 8;
    Tr[218] = {
        name: "Reidite Door",
        ⵠΔ: 1008,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[219] = {
        name: "Reidite Spike",
        ⵠΔ: 1011,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[217] = {
        name: "Reidite Wall",
        ⵠΔ: 1014,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    Tr[32] = {
        name: "Reidite pick",
        ⵠΔ: 1019,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ps = 4;
    Tr[223] = {
        name: "Boat",
        ⵠΔ: 1027,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Qs = 4;
    Tr[224] = {
        name: "Sled",
        ⵠΔ: 1030,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Rs = 14;
    const Ss = 13;
    Tr[89] = {
        name: "Saddle",
        ⵠΔ: 1048,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 1
    };
    const Ts = rs;
    Tr[225] = {
        name: "Mount Boar",
        ⵠΔ: 1051,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Us = 16;
    Tr[226] = {
        name: "Mount King Crab",
        ⵠΔ: 1191,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Vs = 256;
    Tr[227] = {
        name: "Mount Baby Dragon",
        ⵠΔ: 1082,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[228] = {
        name: "Mount Baby Lava",
        ⵠΔ: 1097,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const Ws = String.fromCharCode;
    const Xs = Ws(101);
    const Ys = Ws(118);
    const Zs = Ws(97);
    const $s = Ws(108);
    function _s(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function at(a) {
        return cj.String.fromCharCode(a);
    }
    ;
    const bt = 100;
    Tr[229] = {
        name: "Mount Hawk",
        ⵠΔ: 1112,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const ct = 0;
    const dt = 20;
    Tr[230] = {
        name: "Plane",
        ⵠΔ: 1116,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    Tr[54] = {
        name: "Pitchfork 2",
        ⵠΔ: 980,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    const et = 18;
    const ft = 1;
    Tr[239] = {
        name: "Baby Mammoth",
        ⵠΔ: 1226,
        ⲆⵠⲆⲆ: 0,
        ᐃΔⲆᐃ: 0
    };
    var gt = undefined;
    const ht = 17;
    const it = 7;
    const jt = vn;
    var kt = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 0,
        ⵠΔⵠΔ: 113,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 1,
        ⵠΔⵠΔ: 118,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 2,
        ⵠΔⵠΔ: 119,
        time: 1 / 20,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 3,
        ⵠΔⵠΔ: 114,
        time: 1 / 6,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 4,
        ⵠΔⵠΔ: 8,
        time: 1 / 3,
        ᐃⲆⲆ: 0
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 5,
        ⵠΔⵠΔ: 1,
        time: 1 / 8,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 6,
        ⵠΔⵠΔ: 3,
        time: 1 / 12,
        ᐃⲆⲆ: 0
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 7,
        ⵠΔⵠΔ: 4,
        time: 1 / 20,
        ᐃⲆⲆ: 0
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 8,
        ⵠΔⵠΔ: 31,
        time: 0.016666666666666666,
        ᐃⲆⲆ: 0
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 9,
        ⵠΔⵠΔ: 32,
        time: 0.011111111111111112,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 10,
        ⵠΔⵠΔ: 35,
        time: 1 / 10,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 11,
        ⵠΔⵠΔ: 36,
        time: 1 / 15,
        ᐃⲆⲆ: 0
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 12,
        ⵠΔⵠΔ: 37,
        time: 1 / 20,
        ᐃⲆⲆ: 0
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 13,
        ⵠΔⵠΔ: 38,
        time: 1 / 60,
        ᐃⲆⲆ: 0
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 14,
        ⵠΔⵠΔ: 39,
        time: 0.011111111111111112,
        ᐃⲆⲆ: 0
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 15,
        ⵠΔⵠΔ: 45,
        time: 1 / 120,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 16,
        ⵠΔⵠΔ: 46,
        time: 1 / 5,
        ᐃⲆⲆ: 0
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 17,
        ⵠΔⵠΔ: 50,
        time: 0.1,
        ᐃⲆⲆ: 0
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 18,
        ⵠΔⵠΔ: 51,
        time: 0.05,
        ᐃⲆⲆ: 0
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 19,
        ⵠΔⵠΔ: 52,
        time: 1 / 40,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 20,
        ⵠΔⵠΔ: 130,
        time: 1 / 5,
        ᐃⲆⲆ: 0
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ΔΔⲆ: 1,
        e: 0,
        id: 21,
        ⵠΔⵠΔ: 49,
        time: 1 / 5,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 22,
        ⵠΔⵠΔ: 53,
        time: 1 / 10,
        ᐃⲆⲆ: 0
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 23,
        ⵠΔⵠΔ: 54,
        time: 0.016666666666666666,
        ᐃⲆⲆ: 0
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 24,
        ⵠΔⵠΔ: 28,
        time: 1 / 15,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 25,
        ⵠΔⵠΔ: 12,
        time: 1 / 5,
        ᐃⲆⲆ: 1
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 26,
        ⵠΔⵠΔ: 13,
        time: 0.1,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 27,
        ⵠΔⵠΔ: 14,
        ᐃⲆⲆ: 1,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 28,
        ⵠΔⵠΔ: 15,
        time: 0.03333333333333333,
        ᐃⲆⲆ: 1
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 29,
        ⵠΔⵠΔ: 33,
        time: 1 / 60,
        ᐃⲆⲆ: 1
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 30,
        ⵠΔⵠΔ: 34,
        time: 1 / 90,
        ᐃⲆⲆ: 1
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 31,
        ⵠΔⵠΔ: 16,
        time: 1 / 120,
        ᐃⲆⲆ: 1
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 32,
        ⵠΔⵠΔ: 17,
        time: 1 / 200,
        ᐃⲆⲆ: 1
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 33,
        ⵠΔⵠΔ: 18,
        time: 1 / 30,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 34,
        ⵠΔⵠΔ: 57,
        time: 1 / 5,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 35,
        ⵠΔⵠΔ: 0,
        time: 0.1,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 36,
        ⵠΔⵠΔ: 5,
        time: 1 / 20,
        ᐃⲆⲆ: 1
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 37,
        ⵠΔⵠΔ: 6,
        time: 1 / 30,
        ᐃⲆⲆ: 1
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 38,
        ⵠΔⵠΔ: 30,
        time: 1 / 60,
        ᐃⲆⲆ: 1
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 39,
        ⵠΔⵠΔ: 19,
        time: 1 / 90,
        ᐃⲆⲆ: 1
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 40,
        ⵠΔⵠΔ: 115,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 41,
        ⵠΔⵠΔ: 132,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 42,
        ⵠΔⵠΔ: 188,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 43,
        ⵠΔⵠΔ: 191,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 44,
        ⵠΔⵠΔ: 193,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 45,
        ⵠΔⵠΔ: 204,
        time: 0.2,
        ᐃⲆⲆ: 3
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 46,
        ⵠΔⵠΔ: 206,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 47,
        ⵠΔⵠΔ: 208,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 48,
        ⵠΔⵠΔ: 210,
        time: 0.2,
        ᐃⲆⲆ: 3
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 49,
        ⵠΔⵠΔ: 117,
        time: 0.2,
        ᐃⲆⲆ: 3
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 50,
        ⵠΔⵠΔ: 138,
        time: 1 / 3,
        ᐃⲆⲆ: 3
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 51,
        ⵠΔⵠΔ: 143,
        time: 1 / 3,
        ᐃⲆⲆ: 3
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 52,
        ⵠΔⵠΔ: 133,
        time: 1 / 3,
        ᐃⲆⲆ: 3
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 53,
        ⵠΔⵠΔ: 136,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 54,
        ⵠΔⵠΔ: 195,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 55,
        ⵠΔⵠΔ: 162,
        time: 1 / 5,
        ᐃⲆⲆ: 5
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 56,
        ⵠΔⵠΔ: 163,
        time: 1 / 5,
        ᐃⲆⲆ: 5
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 57,
        ⵠΔⵠΔ: 164,
        time: 1 / 5,
        ᐃⲆⲆ: 5
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 58,
        ⵠΔⵠΔ: 165,
        time: 1 / 5,
        ᐃⲆⲆ: 5
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 59,
        ⵠΔⵠΔ: 122,
        time: 1 / 5,
        ᐃⲆⲆ: 5
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 60,
        ⵠΔⵠΔ: 217,
        time: 1 / 5,
        ᐃⲆⲆ: 5
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 61,
        ⵠΔⵠΔ: 166,
        time: 0.125,
        ᐃⲆⲆ: 5
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 62,
        ⵠΔⵠΔ: 171,
        time: 1 / 8,
        ᐃⲆⲆ: 5
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 63,
        ⵠΔⵠΔ: 172,
        time: 1 / 8,
        ᐃⲆⲆ: 5
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 64,
        ⵠΔⵠΔ: 173,
        time: 1 / 8,
        ᐃⲆⲆ: 5
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 65,
        ⵠΔⵠΔ: 124,
        time: 1 / 8,
        ᐃⲆⲆ: 5
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 66,
        ⵠΔⵠΔ: 218,
        time: 0.125,
        ᐃⲆⲆ: 5
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 67,
        ⵠΔⵠΔ: 160,
        time: 0.05,
        ᐃⲆⲆ: 5
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 68,
        ⵠΔⵠΔ: 168,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 69,
        ⵠΔⵠΔ: 169,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 70,
        ⵠΔⵠΔ: 170,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 71,
        ⵠΔⵠΔ: 123,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 72,
        ⵠΔⵠΔ: 219,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 73,
        ⵠΔⵠΔ: 212,
        time: 0.05,
        ᐃⲆⲆ: 5
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 74,
        ⵠΔⵠΔ: 213,
        time: 0.05,
        ᐃⲆⲆ: 5
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 75,
        ⵠΔⵠΔ: 214,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 76,
        ⵠΔⵠΔ: 215,
        time: 0.05,
        ᐃⲆⲆ: 5
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 77,
        ⵠΔⵠΔ: 216,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 78,
        ⵠΔⵠΔ: 220,
        time: 1 / 20,
        ᐃⲆⲆ: 5
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 79,
        ⵠΔⵠΔ: 167,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 80,
        ⵠΔⵠΔ: 23,
        time: 1 / 5,
        ᐃⲆⲆ: 2
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 81,
        ⵠΔⵠΔ: 24,
        time: 1 / 30,
        ᐃⲆⲆ: 2
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 82,
        ⵠΔⵠΔ: 82,
        time: 1 / 60,
        ᐃⲆⲆ: 2
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 83,
        ⵠΔⵠΔ: 10,
        time: 0.2,
        ᐃⲆⲆ: 2
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 84,
        ⵠΔⵠΔ: 11,
        time: 0.08333333333333333,
        ᐃⲆⲆ: 2
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 85,
        ⵠΔⵠΔ: 40,
        time: 0.03333333333333333,
        ᐃⲆⲆ: 2
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 86,
        ⵠΔⵠΔ: 88,
        time: 1 / 50,
        ᐃⲆⲆ: 2
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 87,
        ⵠΔⵠΔ: 58,
        time: 0.2,
        ᐃⲆⲆ: 2
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 88,
        ⵠΔⵠΔ: 25,
        time: 1 / 10,
        ᐃⲆⲆ: 2
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 89,
        ⵠΔⵠΔ: 26,
        time: 1 / 20,
        ᐃⲆⲆ: 2
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 90,
        ⵠΔⵠΔ: 27,
        time: 0.03333333333333333,
        ᐃⲆⲆ: 2
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 91,
        ⵠΔⵠΔ: 43,
        time: 0.016666666666666666,
        ᐃⲆⲆ: 2
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 92,
        ⵠΔⵠΔ: 44,
        time: 1 / 90,
        ᐃⲆⲆ: 2
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 93,
        ⵠΔⵠΔ: 48,
        time: 0.05,
        ᐃⲆⲆ: 2
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 94,
        ⵠΔⵠΔ: 47,
        time: 0.011111111111111112,
        ᐃⲆⲆ: 2
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 95,
        ⵠΔⵠΔ: 20,
        time: 1 / 20,
        ᐃⲆⲆ: 2
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 96,
        ⵠΔⵠΔ: 21,
        time: 0.016666666666666666,
        ᐃⲆⲆ: 2
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 97,
        ⵠΔⵠΔ: 22,
        time: 0.011111111111111112,
        ᐃⲆⲆ: 2
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 98,
        ⵠΔⵠΔ: 80,
        time: 1 / 15,
        ᐃⲆⲆ: 2
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 99,
        ⵠΔⵠΔ: 81,
        time: 0.006666666666666667,
        ᐃⲆⲆ: 2
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 100,
        ⵠΔⵠΔ: 29,
        time: 1 / 15,
        ᐃⲆⲆ: 2
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 101,
        ⵠΔⵠΔ: 120,
        time: 0.3333333333333333,
        ᐃⲆⲆ: 4
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 102,
        ⵠΔⵠΔ: 147,
        time: 1 / 3,
        ᐃⲆⲆ: 4
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 103,
        ⵠΔⵠΔ: 148,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 104,
        ⵠΔⵠΔ: 158,
        time: 1 / 60,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 105,
        ⵠΔⵠΔ: 159,
        time: 0.1,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 106,
        ⵠΔⵠΔ: 125,
        time: 0.2,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 107,
        ⵠΔⵠΔ: 190,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 108,
        ⵠΔⵠΔ: 221,
        time: 0.06666666666666667,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 109,
        ⵠΔⵠΔ: 141,
        time: 0.2,
        ᐃⲆⲆ: 4
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 110,
        ⵠΔⵠΔ: 128,
        time: 0.2,
        ᐃⲆⲆ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ΔΔⲆ: 1,
        e: 0,
        id: 111,
        ⵠΔⵠΔ: 127,
        time: 1 / 5,
        ᐃⲆⲆ: 3
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 112,
        ⵠΔⵠΔ: 127,
        time: 1 / 10,
        ᐃⲆⲆ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 1,
        id: 113,
        ⵠΔⵠΔ: 127,
        time: 1 / 3,
        ᐃⲆⲆ: 3
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 114,
        ⵠΔⵠΔ: 135,
        time: 1 / 10,
        ᐃⲆⲆ: 4
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 115,
        ⵠΔⵠΔ: 151,
        time: 0.05,
        ᐃⲆⲆ: 4
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 116,
        ⵠΔⵠΔ: 152,
        time: 1 / 200,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 117,
        ⵠΔⵠΔ: 153,
        time: 1 / 90,
        ᐃⲆⲆ: 4
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 118,
        ⵠΔⵠΔ: 154,
        time: 1 / 90,
        ᐃⲆⲆ: 4
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 119,
        ⵠΔⵠΔ: 155,
        time: 0.011111111111111112,
        ᐃⲆⲆ: 4
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 120,
        ⵠΔⵠΔ: 156,
        time: 1 / 90,
        ᐃⲆⲆ: 4
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 121,
        ⵠΔⵠΔ: 157,
        time: 1 / 90,
        ᐃⲆⲆ: 4
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 122,
        ⵠΔⵠΔ: 55,
        time: 0.1,
        ᐃⲆⲆ: 0
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 123,
        ⵠΔⵠΔ: 56,
        time: 1 / 10,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 124,
        ⵠΔⵠΔ: 144,
        time: 1 / 10,
        ᐃⲆⲆ: 4
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 125,
        ⵠΔⵠΔ: 145,
        time: 1 / 3,
        ᐃⲆⲆ: 3
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 126,
        ⵠΔⵠΔ: 59,
        time: 1 / 120,
        ᐃⲆⲆ: 2
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 127,
        ⵠΔⵠΔ: 60,
        time: 0.005555555555555556,
        ᐃⲆⲆ: 2
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 128,
        ⵠΔⵠΔ: 61,
        time: 0.016666666666666666,
        ᐃⲆⲆ: 2
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 129,
        ⵠΔⵠΔ: 62,
        time: 1 / 120,
        ᐃⲆⲆ: 1
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 130,
        ⵠΔⵠΔ: 63,
        time: 0.005555555555555556,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 131,
        ⵠΔⵠΔ: 64,
        time: 1 / 20,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 132,
        ⵠΔⵠΔ: 101,
        time: 0.2,
        ᐃⲆⲆ: 1
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 133,
        ⵠΔⵠΔ: 65,
        time: 0.04,
        ᐃⲆⲆ: 1
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 134,
        ⵠΔⵠΔ: 102,
        time: 0.2,
        ᐃⲆⲆ: 1
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 135,
        ⵠΔⵠΔ: 66,
        time: 1 / 30,
        ᐃⲆⲆ: 1
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 136,
        ⵠΔⵠΔ: 103,
        time: 1 / 10,
        ᐃⲆⲆ: 1
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 137,
        ⵠΔⵠΔ: 67,
        time: 0.02857142857142857,
        ᐃⲆⲆ: 1
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 138,
        ⵠΔⵠΔ: 104,
        time: 1 / 10,
        ᐃⲆⲆ: 1
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 139,
        ⵠΔⵠΔ: 68,
        time: 1 / 40,
        ᐃⲆⲆ: 1
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 140,
        ⵠΔⵠΔ: 105,
        time: 1 / 15,
        ᐃⲆⲆ: 1
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 141,
        ⵠΔⵠΔ: 69,
        time: 1 / 45,
        ᐃⲆⲆ: 1
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 142,
        ⵠΔⵠΔ: 106,
        time: 0.06666666666666667,
        ᐃⲆⲆ: 1
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 143,
        ⵠΔⵠΔ: 70,
        time: 1 / 50,
        ᐃⲆⲆ: 1
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 144,
        ⵠΔⵠΔ: 107,
        time: 1 / 20,
        ᐃⲆⲆ: 1
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 145,
        ⵠΔⵠΔ: 71,
        time: 0.04,
        ᐃⲆⲆ: 1
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 146,
        ⵠΔⵠΔ: 72,
        time: 1 / 40,
        ᐃⲆⲆ: 1
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 147,
        ⵠΔⵠΔ: 73,
        time: 0.02,
        ᐃⲆⲆ: 1
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 148,
        ⵠΔⵠΔ: 74,
        time: 0.014285714285714285,
        ᐃⲆⲆ: 1
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 149,
        ⵠΔⵠΔ: 75,
        time: 1 / 90,
        ᐃⲆⲆ: 1
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 150,
        ⵠΔⵠΔ: 76,
        time: 1 / 120,
        ᐃⲆⲆ: 1
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 151,
        ⵠΔⵠΔ: 77,
        time: 1 / 60,
        ᐃⲆⲆ: 2
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 152,
        ⵠΔⵠΔ: 78,
        time: 0.016666666666666666,
        ᐃⲆⲆ: 2
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ΔΔⲆ: 1,
        e: 0,
        id: 153,
        ⵠΔⵠΔ: 79,
        time: 1 / 60,
        ᐃⲆⲆ: 2
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 154,
        ⵠΔⵠΔ: 83,
        time: 0.1,
        ᐃⲆⲆ: 2
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 155,
        ⵠΔⵠΔ: 84,
        time: 0.1,
        ᐃⲆⲆ: 2
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 156,
        ⵠΔⵠΔ: 85,
        time: 1 / 60,
        ᐃⲆⲆ: 2
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 157,
        ⵠΔⵠΔ: 86,
        time: 1 / 60,
        ᐃⲆⲆ: 2
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ΔΔⲆ: 1,
        e: 0,
        id: 158,
        ⵠΔⵠΔ: 180,
        time: 1 / 5,
        ᐃⲆⲆ: 0
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 159,
        ⵠΔⵠΔ: 181,
        time: 1 / 5,
        ᐃⲆⲆ: 0
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ΔΔⲆ: 0,
        e: 0,
        id: 160,
        ⵠΔⵠΔ: 182,
        time: 1 / 10,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 161,
        ⵠΔⵠΔ: 183,
        time: 1 / 5,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 162,
        ⵠΔⵠΔ: 198,
        time: 1 / 20,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 163,
        ⵠΔⵠΔ: 223,
        time: 0.02,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 164,
        ⵠΔⵠΔ: 224,
        time: 0.02,
        ᐃⲆⲆ: 4
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 165,
        ⵠΔⵠΔ: 89,
        time: 1 / 20,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 166,
        ⵠΔⵠΔ: 230,
        time: 0.02,
        ᐃⲆⲆ: 4
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 167,
        ⵠΔⵠΔ: 94,
        time: 0.2,
        ᐃⲆⲆ: 1
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 168,
        ⵠΔⵠΔ: 95,
        time: 1 / 10,
        ᐃⲆⲆ: 1
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 169,
        ⵠΔⵠΔ: 96,
        time: 1 / 20,
        ᐃⲆⲆ: 1
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 170,
        ⵠΔⵠΔ: 97,
        time: 1 / 30,
        ᐃⲆⲆ: 1
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 171,
        ⵠΔⵠΔ: 98,
        time: 1 / 60,
        ᐃⲆⲆ: 1
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ΔΔⲆ: 0,
        e: 0,
        id: 172,
        ⵠΔⵠΔ: 99,
        time: 1 / 90,
        ᐃⲆⲆ: 1
    }];
    function lt(a, b) {
        Rj(Hx, a, b);
        const c = Hn(Gx[0], Gx[1], Gx[0]);
        fr(Gx[1], Gx[0], Gx[1], Gx[0], Gx[1], Gx[0]);
        return c ^ 51425;
    }
    xr = 300;
    const mt = 7;
    var nt;
    nt = {
        ᐃΔᐃⲆΔᐃᐃ: 300,
        ⲆⲆΔⵠⵠΔⲆ: 301,
        ΔⲆⵠⲆᐃᐃⲆ: 302,
        ⲆⵠⵠΔᐃᐃΔ: 303,
        ᐃⲆⵠⲆⵠᐃⵠ: 304,
        ⲆⵠⲆⲆΔⲆᐃ: 305,
        ᐃᐃΔⲆΔᐃⲆ: 306,
        ᐃⲆⵠⲆᐃⵠΔ: 307,
        ᐃᐃⵠΔⵠⵠΔ: 308,
        ᐃⵠᐃⲆΔᐃΔ: 309,
        ᐃⵠⵠⲆⲆⵠᐃ: 310,
        ⵠⵠΔᐃⲆⲆᐃ: 311,
        EMPTY: 312,
        ΔⵠⵠⲆⲆᐃΔ: 313,
        ΔΔΔⵠΔᐃⲆ: 314,
        ΔΔΔⲆⵠᐃΔ: 315,
        ⵠⵠᐃΔⲆᐃⵠ: 316,
        ᐃⲆᐃᐃⵠΔⲆ: 317,
        ⲆⲆΔⵠⵠᐃⵠ: 318,
        ᐃᐃᐃⵠᐃⲆⲆ: 319,
        ⵠᐃⲆΔΔⵠⲆ: 320,
        ⵠⵠⵠᐃΔΔΔ: 321,
        ΔΔⵠⲆⲆ: 322,
        ⲆᐃΔᐃᐃΔᐃ: 323,
        ⵠⲆΔᐃ: 324,
        ΔⵠⲆⵠⵠᐃⲆ: 325,
        ⵠΔⲆᐃⵠᐃᐃ: 326,
        ⵠΔⲆΔᐃⲆΔ: 327,
        ⵠⵠⲆⵠⵠᐃΔ: 328,
        ⵠΔⵠⲆⵠⵠⲆ: 329,
        ⲆⲆᐃΔΔⵠⵠ: 330,
        ᐃΔⵠⲆᐃᐃᐃ: 331,
        POINTS: 332,
        ⲆΔΔⲆΔⲆΔ: 333,
        ⲆΔΔᐃΔⵠᐃ: 334,
        ᐃΔᐃᐃⲆⲆᐃ: 335,
        ΔⲆⵠΔⲆᐃⲆ: 336,
        ⵠⵠⲆΔᐃⲆⵠ: 337,
        ᐃᐃⲆᐃⲆⲆⲆ: 338,
        ᐃⲆΔΔΔⵠΔ: 339,
        ⵠⵠⲆⵠΔⲆⵠ: 340,
        ΔⵠΔΔΔⲆⵠ: 341,
        ⲆᐃΔΔⵠᐃᐃ: 342,
        ᐃⲆⵠᐃⲆⵠⵠ: 343
    };
    const ot = 19;
    const pt = yk;
    function qt(a) {
        const b = function () {
            cj.addEventListener("mousemove", function () {
                b();
            });
        };
        b();
    }
    const rt = 3;
    function st(a) {
        if (a > 0) {
            return a * a;
        } else {
            return a;
        }
    }
    function tt(a) {
        return cj.String.fromCharCode(a);
    }
    function ut() {
        zb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        zb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        zb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        zb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        zb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        zb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        zb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        zb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        zb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        zb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        zb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        zb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        zb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        zb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        zb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        zb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        zb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        zb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        zb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        zb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        zb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        zb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        zb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        zb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        zb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        zb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        zb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        zb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        zb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        zb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        zb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        zb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        zb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        zb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        zb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        zb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        zb[232] = ["Vulture Feather", "From a deadly vulture"];
        zb[234] = ["Emerald", "How many golden breads can you get from it?"];
        zb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        zb[80] = ["Turban", "Useful to survive in the desert."];
        zb[81] = ["Ninja outfit", "Essential to survive in the desert"];
        zb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        zb[236] = ["Pilot Glasses"];
        zb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        zb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        zb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        zb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        zb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        zb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        zb[89] = ["Saddle", "Hit a boar with it to tame it."];
        zb[90] = ["Witch Hat", "You're a wizard Starvy!"];
        zb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        zb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        zb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        zb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        zb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        zb[224] = ["Sled", "You are faster with it in the snow"];
        zb[223] = ["Boat", "You are faster with it in the water"];
        zb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        zb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        zb[222] = ["Penguin Feather", "From a deadly cute penguin."];
        zb[231] = ["Hawk Feather", "From a deadly hawk."];
        zb[233] = ["Cactus", "Food : 20", "Water : 10"];
        zb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        zb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        zb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        zb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        zb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        zb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        zb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        zb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        zb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        zb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        zb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        zb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        zb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        zb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        zb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        zb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        zb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        zb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        zb[53] = ["Pitchfork", "Perfect for gathering"];
        zb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        zb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        zb[Rr.ⵠⵠⵠΔⲆⵠⵠ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        zb[Rr.ⵠⲆⵠΔⲆⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        zb[Rr.ΔΔⵠⲆⵠⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        zb[Rr.ⵠᐃⵠⲆⵠᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        zb[Rr.ⲆⲆⲆᐃⲆΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        zb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        zb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        zb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        zb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        zb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        zb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        zb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        zb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        zb[203] = ["Flame", "It's hot!"];
        zb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        zb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        zb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        zb[202] = ["Reidite", "The ultimate ore"];
        zb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ct[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        Ct[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        Ct[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        Ct[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        Ct[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        Ct[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        Ct[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        Ct[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        Ct[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        Ct[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        Ct[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        Ct[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        Ct[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        Ct[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        Ct[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        Ct[38] = ["You died crushed by an angry baby mammoth."];
        Ct[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        Ct[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[341] = "A sandstorm is approaching in a few seconds.";
        zb[340] = "The sandstorm will soon stop.";
        zb[343] = "A blizzard is approaching in a few seconds.";
        zb[342] = "The blizzard will soon stop.";
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Hand"];
        zb[140] = ["Dirt", "Dirty!"];
        zb[126] = ["Sand", "I got it in my eyes!"];
        zb[109] = ["Wood", "You can't get enough of it!"];
        zb[108] = ["Stone", "Also called a rock"];
        zb[111] = ["Gold", "Be generous, give it to others"];
        zb[112] = ["Diamond", "What will you make with it?"];
        zb[121] = ["Amethyst", "It's Mauve like Lapa"];
        zb[131] = ["Flour", "Used in cooking"];
        zb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        zb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        zb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        zb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        zb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        zb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        zb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        zb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        zb[200] = ["Candies", "Only for children!", "Food: 20"];
        zb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        zb[201] = ["Garland", "Perfect decoration for roofs"];
        zb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        zb[110] = ["Berry", "Berry tasty!", "Food: 10"];
        zb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        zb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        zb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        zb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        zb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        zb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        zb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        zb[194] = ["Thorn bush", "It stings!"];
        zb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        zb[142] = ["Ice", "Useful for making cakes and water"];
        zb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        zb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        zb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        zb[178] = ["Pure Fur", "You're a bread factory"];
        zb[179] = ["Dark Fur", "You get ready to do something wrong"];
        zb[146] = ["Winter Fur", "These animals just wanted a hug..."];
        zb[139] = ["Scales", "It smells like fish!"];
        zb[129] = ["Kraken Skin", "Weren't you too scared?"];
        zb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        zb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        zb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        zb[161] = ["Cord", "Used in crafting Hats and Bag"];
        zb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        zb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        zb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        zb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        zb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        zb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        zb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        zb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        zb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        zb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        zb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        zb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        zb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        zb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        zb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        zb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        zb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        zb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        zb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        zb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        zb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        zb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        zb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        zb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        zb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        zb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        zb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        zb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        zb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        zb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        zb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        zb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        zb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        zb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        zb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        zb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        zb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        zb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        zb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        zb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        zb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        zb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        zb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        zb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        zb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        zb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        zb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        zb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        zb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        zb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        zb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        zb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        zb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        zb[177] = ["Blue Gemstone", "For too kind people"];
        zb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        zb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        zb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        zb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        zb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        zb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        zb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        zb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        zb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        zb[29] = ["Bag", "More space for your items!"];
        zb[120] = ["Paper", "Used in book-crafting"];
        zb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        zb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        zb[148] = ["Lock", "Allow you to lock your chest"];
        zb[158] = ["Lock-pick", "Allows you to unlock one chest"];
        zb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        zb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        zb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        zb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        zb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        zb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        zb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        zb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        zb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        zb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        zb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        zb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        zb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        zb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        zb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        zb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        zb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        zb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        zb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        zb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        zb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        zb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        zb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        zb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        zb[300] = "You cannot join this server";
        zb[301] = "Kicked: ";
        zb[302] = "Your key is already used by someone else";
        zb[303] = "Your key is wrong";
        zb[304] = "You have an old version, you need to clear your cache";
        zb[338] = "Your client version is too recent for this server. The server is being updated";
        zb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        zb[305] = "There are no more new resources";
        zb[306] = "You survived 1 day";
        zb[307] = "You survived ";
        zb[308] = " days";
        zb[309] = "You are dead ;-;";
        zb[310] = "Server cannot find spawn location! Spam the play button!";
        zb[311] = "Server is full! Spam the play button!";
        zb[312] = "Resource is empty";
        zb[313] = "Inventory is full (right-click to empty items)";
        zb[314] = " is dead";
        zb[315] = "This is not the right tool";
        zb[316] = "You joined a team";
        zb[317] = "You are dead";
        zb[318] = " joined the team";
        zb[319] = "Your team was destroyed";
        zb[320] = "You left the team";
        zb[321] = " left the team";
        zb[322] = "Someone stole your token :>";
        zb[323] = "Choose a server";
        zb[324] = "players";
        zb[325] = "total players";
        zb[326] = "players on this mode";
        zb[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        Ct[0] = ["You were killed for no reason"];
        Ct[1] = ["You starved to death, as the name of the game implies"];
        Ct[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        Ct[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        Ct[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        Ct[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        Ct[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        Ct[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        Ct[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        Ct[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        Ct[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        Ct[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        Ct[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        Ct[13] = ["You died of thirst. Better drink your own piss."];
        Ct[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        Ct[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        Ct[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        Ct[17] = ["Your skin's falling apart, the sun killed you."];
        Ct[18] = ["Garlic stored in your pockets boiled your brain."];
        Ct[19] = ["As a vampire, don't stand near the garlic cloves."];
        Ct[20] = ["You ate garlic as a vampire, what did you expect?"];
        Ct[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    function vt() {
        zb[184] = ["You feel a great power emanating from this orb"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Рука"];
        zb[140] = ["Земля", "Грязно!"];
        zb[126] = ["Песок", "Он в моих глазах!"];
        zb[109] = ["Дерево", "Постоянно нужно больше!"];
        zb[108] = ["Камень", "Твердый"];
        zb[111] = ["Золото", "Будьте щедры, давайте его другим"];
        zb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        zb[121] = ["Аметист", "Он сиреневый, как Lapa"];
        zb[131] = ["Мука", "Используется в готовке"];
        zb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        zb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        zb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        zb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        zb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        zb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        zb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        zb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        zb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        zb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        zb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        zb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        zb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        zb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        zb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        zb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        zb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        zb[194] = ["Колючий Куст", "Это больно!"];
        zb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        zb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        zb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        zb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        zb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        zb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        zb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        zb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        zb[139] = ["Чешуя", "Она пахнет рыбой!"];
        zb[129] = ["Шкура Кракена", "Вы не испугались?"];
        zb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        zb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        zb[114] = ["Верстак", "Необходим для создания многих предметов"];
        zb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        zb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        zb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        zb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        zb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        zb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        zb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        zb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        zb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        zb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        zb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        zb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        zb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        zb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        zb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        zb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        zb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        zb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        zb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        zb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        zb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        zb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        zb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        zb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        zb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        zb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        zb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        zb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        zb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        zb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        zb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        zb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        zb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        zb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        zb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        zb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        zb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        zb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        zb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        zb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        zb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        zb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        zb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        zb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        zb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        zb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        zb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        zb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        zb[185] = ["Шар Дракона", "Даётся за квест"];
        zb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        zb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        zb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        zb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        zb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        zb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        zb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        zb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        zb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        zb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        zb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        zb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        zb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        zb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        zb[120] = ["Бумага", "Используется при создании книги"];
        zb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        zb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        zb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        zb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        zb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        zb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        zb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        zb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        zb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        zb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        zb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        zb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        zb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        zb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        zb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        zb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        zb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        zb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        zb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        zb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        zb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        zb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        zb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        zb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        zb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        zb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        zb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        zb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        zb[300] = "Вы не можете зайти на этот сервер";
        zb[301] = "Выгнаны: ";
        zb[302] = "Ваш ключ уже используется кем-то";
        zb[303] = "Ваш ключ неправильный";
        zb[304] = "У вас старая версия, вам нужно очистить кеш";
        zb[305] = "Ресурсов больше нет";
        zb[306] = "Вы выжили 1 день";
        zb[307] = "Вы выжили ";
        zb[308] = " дней";
        zb[309] = "Вы умерли ;-;";
        zb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        zb[311] = "Сервер заполнен! Спамьте кнопку играть!";
        zb[312] = "Ресурсы закончились";
        zb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        zb[314] = " умер";
        zb[315] = "Это не тот инструмент";
        zb[316] = "Вы вошли в команду";
        zb[317] = "Вы умерли";
        zb[318] = " вошёл в команду";
        zb[319] = "Ваша команда была разрушена";
        zb[320] = "Вы покинули команду";
        zb[321] = " покинул команду";
        zb[322] = "Кто-то использует ваш токен :>";
        zb[323] = "Выберите сервер";
        zb[324] = "игроков";
        zb[325] = "игроков всего";
        zb[326] = "игроков в этом режиме";
        zb[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        Ct[0] = ["Вы были убиты без причины"];
        Ct[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        Ct[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        Ct[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        Ct[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        Ct[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        Ct[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        Ct[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        Ct[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        Ct[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        Ct[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        Ct[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        Ct[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        Ct[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        Ct[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        Ct[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        Ct[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        Ct[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        Ct[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        Ct[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        Ct[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        Ct[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    const xt = 15;
    function yt() {
        zb[184] = ["You feel a great power emanating from this orb"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["mão"];
        zb[140] = ["terra", "está sujo!"];
        zb[126] = ["areia", "entrou nos meus olhos!"];
        zb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        zb[108] = ["pedra", "também chamado rocha"];
        zb[111] = ["ouro", "seja generoso, dê para outros"];
        zb[112] = ["diamante", "o que você irá fazer com isso?"];
        zb[121] = ["ametista", "é mauve como lapa"];
        zb[131] = ["farinha", "usada na cozinha"];
        zb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        zb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        zb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        zb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        zb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        zb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        zb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        zb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        zb[200] = ["doces", "apenas para crianças!", "comida: 100"];
        zb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        zb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        zb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        zb[110] = ["berry", "Berry saborosa!", "comida: 10"];
        zb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        zb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        zb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        zb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        zb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        zb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        zb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        zb[194] = ["mato de espinhos", "pica!"];
        zb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        zb[142] = ["gelo", "útil para fazer bolo e água"];
        zb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        zb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        zb[2] = ["pele de coelho", "o coelho era tão fofo..."];
        zb[178] = ["pele pura", "você é uma fábrica de pão"];
        zb[179] = ["pele negra", "você está pronto para fazer algo errado"];
        zb[146] = ["pele de inverno", "ele só queria um abraço"];
        zb[139] = ["escala", "é pequeno como peixe!"];
        zb[129] = ["pele do kraken", "você não está com medo?"];
        zb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        zb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        zb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        zb[161] = ["linha", "usada para fazer chapéus e mochila"];
        zb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        zb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        zb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        zb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        zb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        zb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        zb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        zb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        zb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        zb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        zb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        zb[Rr.ⵠⵠᐃᐃᐃΔⵠᐃⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        zb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        zb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        zb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        zb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        zb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        zb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        zb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        zb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        zb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        zb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        zb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        zb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        zb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        zb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        zb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        zb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        zb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        zb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        zb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        zb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        zb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        zb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        zb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        zb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        zb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        zb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        zb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        zb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        zb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        zb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        zb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        zb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        zb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        zb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        zb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[185] = ["esfera do dragão", "dado na questt"];
        zb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        zb[175] = ["pedra verde", "você não vai trapacear, promete?"];
        zb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        zb[177] = ["pedra azul", "para pessoas muito gentis"];
        zb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        zb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        zb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        zb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        zb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        zb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        zb[49] = ["regador", "permite regar as plantas", "dano: 1"];
        zb[29] = ["mochila", "mais espaço para seus itens!"];
        zb[120] = ["papel", "usado para fazer o livro"];
        zb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        zb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        zb[148] = ["fechadura", "permite você trancar seu baú"];
        zb[158] = ["chave", "permite destrancar um baú"];
        zb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        zb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        zb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        zb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        zb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        zb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        zb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        zb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        zb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        zb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        zb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        zb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        zb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        zb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        zb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        zb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        zb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        zb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        zb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        zb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        zb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        zb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        zb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        zb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        zb[300] = "você não pode entrar no servidor";
        zb[301] = "kickado: ";
        zb[302] = "sua chave está em uso por outra pessoa";
        zb[303] = "sua chave está errada";
        zb[304] = "você tem uma versão velha, limpe seu cache";
        zb[305] = "não tem mais recursos";
        zb[306] = "você sobreviveu 1 dia";
        zb[307] = "você sobreviveu ";
        zb[308] = " dias";
        zb[309] = "você está morto ;-;";
        zb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        zb[311] = "servidor está cheio! spam o botão de play!";
        zb[312] = "não tem recursos";
        zb[313] = "inventário está cheio (botão direito para deletar itens)";
        zb[314] = " está morto";
        zb[315] = "essa não é a ferramenta certa";
        zb[316] = "você entrou no time";
        zb[317] = "você está morto";
        zb[318] = "entrou no time";
        zb[319] = "seu time foi destruido";
        zb[320] = "você saiu do time";
        zb[321] = " saiu do time";
        zb[322] = "alguém roubou sua ficha :>";
        zb[323] = "escolha um servidor";
        zb[324] = "jogadores";
        zb[325] = "jogadores totais";
        zb[326] = "jogadores nesse modo";
        zb[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        Ct[0] = ["você morreu sem motivo"];
        Ct[1] = ["você morreu de fome, como o jogo diz"];
        Ct[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        Ct[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        Ct[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        Ct[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        Ct[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        Ct[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        Ct[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        Ct[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        Ct[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        Ct[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        Ct[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        Ct[13] = ["você morreu de sede. melhor beber sua própria urina."];
        Ct[14] = ["você sabia que você morre afogado? agora você sabe."];
        Ct[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        Ct[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        Ct[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        Ct[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        Ct[19] = ["como vampiro, não chegue perto do alho."];
        Ct[20] = ["você comeu alho como vampiro, o que você esperava?"];
        Ct[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    function zt(a, b, c) {
        const d = (a | 19792) & ~(a & 19792) ^ 3526;
        return ~(d & 29697) & d | ~(d & 29697) & 29697;
    }
    function At(b, c, d, e, f, i) {
        const a = (1 + (7781 + b) * 22695477) % 4294967296;
        const j = ((57442 + d) * 214013 + 2531011) % 4294967296;
        const k = e ^ 9975;
        const h = (2531011 + (36975 + f) * 214013) % 4294967296;
        const l = ~(i & 1436) & 1436 | ~(i & 1436) & i;
        return (1 + (51695 + (function (a, b) {
            const c = a ^ 52130;
            const d = (b | 11730) & ~(b & 11730);
            const e = Uw(c, d);
            (function (b, c) {
                const d = (8 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (0 << (b & 255));
                const e = (8 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255)) + (24 << (c >> 16 & 255));
                const f = Vn(d, e, d, e, d);
                const g = ir(e, d, e, d);
            })(c, d);
            return e ^ 59855;
        }(a, c ^ 28123) ^ _w(j, k, h, l, a))) * 22695477) % 4294967296;
    }
    const Bt = 9;
    const eb = 7;
    function ib() {
        zb[184] = ["You feel a great power emanating from this orb"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Mano"];
        zb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        zb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        zb[109] = ["Madera", "¡Nunca hay suficiente!"];
        zb[108] = ["Piedra", "También llamada roca."];
        zb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        zb[112] = ["Diamante", "¿Que vas a hacer con él?"];
        zb[121] = ["Amatista", "Es Mauve como Lapa"];
        zb[131] = ["Harina", "Usada para cocinar."];
        zb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        zb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        zb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        zb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        zb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        zb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        zb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        zb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        zb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        zb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        zb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        zb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        zb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        zb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        zb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        zb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        zb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        zb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        zb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        zb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        zb[194] = ["Planta de Espinas", "¡Te daña!"];
        zb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        zb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        zb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        zb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        zb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        zb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        zb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        zb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        zb[139] = ["Escamas", "¡Huele a pescado!"];
        zb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        zb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        zb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        zb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        zb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        zb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        zb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        zb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        zb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        zb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        zb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        zb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        zb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        zb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        zb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        zb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        zb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        zb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        zb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        zb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        zb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        zb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        zb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        zb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        zb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        zb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        zb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        zb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        zb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        zb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        zb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        zb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        zb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        zb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        zb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        zb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        zb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        zb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        zb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        zb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        zb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        zb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        zb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        zb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        zb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        zb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        zb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        zb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        zb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        zb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        zb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        zb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        zb[185] = ["Esfera del Dragón", "Dada en la misión"];
        zb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        zb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        zb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        zb[177] = ["Gema Azul", "Para gente muy amable"];
        zb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        zb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        zb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        zb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        zb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        zb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        zb[128] = ["Botella Vacia", "La puedes llenar de agua"];
        zb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        zb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        zb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        zb[120] = ["Hoja", "Usada para hacer un libro"];
        zb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        zb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        zb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        zb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        zb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        zb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        zb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        zb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        zb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        zb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        zb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        zb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        zb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        zb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        zb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        zb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        zb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        zb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        zb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        zb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        zb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        zb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        zb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        zb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        zb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        zb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        zb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        zb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        zb[300] = "No puedes unirte a este servidor";
        zb[301] = "Expulsado: ";
        zb[302] = "Tu llave ya está usada";
        zb[303] = "Tu llave está mal";
        zb[304] = "Tienes una versión antigua, limpia tu cache";
        zb[305] = "No hay mas recursos";
        zb[306] = "Has sobrevivido 1 día";
        zb[307] = "Has sobrevivido ";
        zb[308] = " días";
        zb[309] = "Estás muerto ;-;";
        zb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        zb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        zb[312] = "Recurso vacio";
        zb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        zb[314] = " está muerto";
        zb[315] = "Esta no es la herramienta correcta";
        zb[316] = "Te has unido a un equipo";
        zb[317] = "Estás muerto";
        zb[318] = " se unió al equipo";
        zb[319] = "Tu equipo ha sido destruido";
        zb[320] = "Has dejado el equipo";
        zb[321] = " dejo el equipo ";
        zb[322] = "Alguien te robó tu token :>";
        zb[323] = "Elige un servidor";
        zb[324] = "jugadores";
        zb[325] = "total de jugadores";
        zb[326] = "Jugadores en este modo de juego";
        zb[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        Ct[0] = ["Has muerto por ninguna razón"];
        Ct[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        Ct[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        Ct[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        Ct[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        Ct[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        Ct[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        Ct[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        Ct[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        Ct[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        Ct[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        Ct[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        Ct[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        Ct[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        Ct[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        Ct[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        Ct[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        Ct[17] = ["Tu piel se cayó, el sol te quemó."];
        Ct[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        Ct[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        Ct[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        Ct[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    const tb = 4;
    function nb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Hand"];
        zb[140] = ["Boden", "Dreckig!"];
        zb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        zb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        zb[108] = ["Stein", "Auch Fels gennant"];
        zb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        zb[112] = ["Diamant", "Was wirst du daraus machen?"];
        zb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        zb[131] = ["Mehl", "wird fürs Backen gebraucht"];
        zb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        zb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        zb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        zb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        zb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        zb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        zb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        zb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        zb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        zb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        zb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        zb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        zb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        zb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        zb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        zb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        zb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        zb[194] = ["Dornenbusch", "Es sticht!"];
        zb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        zb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        zb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        zb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        zb[2] = ["Hasenfell", "Der Hase war so süß..."];
        zb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        zb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        zb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        zb[139] = ["Schuppen", "Es riecht wie Fisch!"];
        zb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        zb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        zb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        zb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        zb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        zb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        zb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        zb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        zb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        zb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        zb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        zb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        zb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        zb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        zb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        zb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        zb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        zb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        zb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        zb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        zb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        zb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        zb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        zb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        zb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        zb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        zb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        zb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        zb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        zb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        zb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        zb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        zb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        zb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        zb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        zb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        zb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        zb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        zb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        zb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        zb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        zb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        zb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        zb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        zb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        zb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        zb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        zb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        zb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        zb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        zb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        zb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        zb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        zb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        zb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        zb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        zb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        zb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        zb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        zb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        zb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        zb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        zb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        zb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        zb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        zb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        zb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        zb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        zb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        zb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        zb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        zb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        zb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        zb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        zb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        zb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        zb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        zb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        zb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        zb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        zb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        zb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        zb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        zb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        zb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        zb[300] = "Du kannst diesem Server nicht beitreten";
        zb[301] = "Gekickt: ";
        zb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        zb[303] = "Dein Schlüssel ist falsch";
        zb[304] = "Deine Version ist veraltet, säubere dein Cache";
        zb[305] = "Es gibt keine neuen Ressourcen";
        zb[306] = "Du hast einen Tag überlebt";
        zb[307] = "Du hast überlebt ";
        zb[308] = " Tage";
        zb[309] = "Du bist gestorben ;-;";
        zb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        zb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        zb[312] = "Ressource ist leer";
        zb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        zb[314] = " ist gestorben";
        zb[315] = "Das ist nicht das richtige Werkzeug";
        zb[316] = "Du bist einem Team beigetreten";
        zb[317] = "Du bist gestorben";
        zb[318] = " ist dem Team beigetreten";
        zb[319] = "Dein Team wurde zerstört";
        zb[320] = "Du hast das Team verlassen";
        zb[321] = " hat das Team verlassen";
        zb[322] = "Jemand hat dein Token gestohlen :>";
        zb[323] = "Suche dir ein Server aus";
        zb[324] = "Spieler";
        zb[325] = "alle Spieler";
        zb[326] = "Spieler in diesem Modus";
        zb[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        Ct[0] = ["Du wurdest ohne Grund getötet"];
        Ct[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        Ct[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        Ct[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        Ct[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        Ct[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        Ct[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        Ct[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        Ct[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        Ct[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        Ct[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        Ct[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        Ct[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        Ct[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        Ct[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        Ct[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        Ct[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        Ct[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        Ct[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        Ct[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        Ct[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        Ct[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    const ob = 11;
    function ab(b, c, d, e, f, g) {
        _j(Hx, b, c, d, e, f, g);
        return ((49 + (function (a, b, c) {
            Mi(Hx, a, b, c);
            const d = Bk(Gx[0], Gx[1], Gx[2], Gx[0]);
            op(Gx[1], Gx[2], Gx[0], Gx[1]);
            return d ^ 51651;
        }(Gx[0], Gx[1], Gx[2]) ^ lt(Gx[3], Gx[4]))) * 16807 + 0) % 2147483647;
    }
    function rb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " BACK TO THE GAME";
        zb[329] = " Share on Twitter";
        zb[330] = " Share on Facebook";
        zb[331] = "You can buy items on the shop in the next game with your points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Kill";
        zb[335] = "Days survived";
        zb[336] = "Building method: Free. Press G to change";
        zb[337] = "Building method: Grid. Press G to change";
        zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        zb[7] = ["Ręka"];
        zb[140] = ["Ziemia", "Brudna!"];
        zb[126] = ["Piasek", "Mam go w oczach!"];
        zb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        zb[108] = ["Kamień", "Także nazywany skałą"];
        zb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        zb[112] = ["Diament", "Co z nim zrobisz?"];
        zb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        zb[131] = ["Mąka", "Używana w gotowaniu"];
        zb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        zb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        zb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        zb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        zb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        zb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        zb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        zb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        zb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        zb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        zb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        zb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        zb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        zb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        zb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        zb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        zb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        zb[194] = ["Kolczasty krzew", "Kłuje!"];
        zb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        zb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        zb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        zb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        zb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        zb[178] = ["Skóra", "Jesteś fabryką chleba"];
        zb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        zb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        zb[139] = ["Łuski", "Pachnie jak ryba!"];
        zb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        zb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        zb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        zb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        zb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        zb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        zb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        zb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        zb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        zb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        zb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        zb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        zb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        zb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        zb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        zb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        zb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        zb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        zb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        zb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        zb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        zb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        zb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        zb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        zb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        zb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        zb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        zb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        zb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        zb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        zb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        zb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        zb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        zb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        zb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        zb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        zb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        zb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        zb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        zb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        zb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        zb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        zb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        zb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        zb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        zb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        zb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        zb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        zb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        zb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        zb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        zb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        zb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        zb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        zb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        zb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        zb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        zb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        zb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        zb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        zb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        zb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        zb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        zb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        zb[120] = ["Papier", "Używany w tworzeniu książki"];
        zb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        zb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        zb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        zb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        zb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        zb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        zb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        zb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        zb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        zb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        zb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        zb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        zb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        zb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        zb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        zb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        zb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        zb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        zb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        zb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        zb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        zb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        zb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        zb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        zb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        zb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        zb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        zb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        zb[300] = "Nie możesz dołączyć do tego serwera";
        zb[301] = "Wyrzucony: ";
        zb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        zb[303] = "Twój klucz jest nieprawidłowy";
        zb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        zb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        zb[306] = "Przeżyłeś 1 dzień";
        zb[307] = "Przeżyłeś ";
        zb[308] = " dni";
        zb[309] = "Jesteś martwy ;-;";
        zb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        zb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        zb[312] = "Źródło jest puste";
        zb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        zb[314] = " jest martwy";
        zb[315] = "To nie jest właściwe narzędzie";
        zb[316] = "Dołączyłeś do drużyny";
        zb[317] = "Jesteś martwy";
        zb[318] = " dołączył do drużyny";
        zb[319] = "Twoja drużyna została zniszczona";
        zb[320] = " Opuściłeś drużynę";
        zb[321] = " opuścił drużynę";
        zb[322] = "Ktoś ukradł twój żeton :>";
        zb[323] = "Wybierz serwer";
        zb[324] = "graczy";
        zb[325] = "wszystkich graczy";
        zb[326] = "graczy w tym trybie";
        zb[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        Ct[0] = ["Zostałeś zabity bez powodu"];
        Ct[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        Ct[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        Ct[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        Ct[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        Ct[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        Ct[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        Ct[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        Ct[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        Ct[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        Ct[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        Ct[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        Ct[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        Ct[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        Ct[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        Ct[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        Ct[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        Ct[17] = ["Twoja skóra odpada, słońce cię zabija."];
        Ct[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        Ct[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        Ct[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        Ct[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    const sb = 12;
    const hb = 6;
    const lb = 100;
    function gb(b, c, d, e, f) {
        const g = (8 << (d >> 8 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (0 << (d & 255));
        const a = (8 << (e >> 0 & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (0 << (e >> 24 & 255));
        const h = Ww((b + 18598) % 65476, (c | 9792) & ~(c & 9792));
        Ww(g, a);
        return h ^ 20396;
    }
    function ub(b, c, d, e, f, i) {
        const a = ~(b & 52300) & b | ~(b & 52300) & 52300;
        const j = ((9216 + c) * 22695477 + 1) % 4294967296;
        const k = e ^ 34111;
        const h = (4962 + f) % 65290;
        const l = (0 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (16 << (i & 255)) + (24 << (i >> 24 & 255));
        return ((25759 + (function (b, c, d) {
            const e = (0 << (b >> 0 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 24 & 255));
            const f = ~(c & 41750) & 41750 | ~(c & 41750) & c;
            const g = ((d + 44709) * 1664525 + 1013904223) % 4294967296;
            const a = Cb(e, f, g);
            const h = $q(e, f, g, e);
            return ((35204 + (a ^ h)) * 1664525 + 1013904223) % 4294967296;
        }(a, j, (0 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d >> 24 & 255)) + (8 << (d >> 0 & 255))) ^ ix(k, h, l, a, j))) * 22695477 + 1) % 4294967296;
    }
    const bb = 0;
    const db = 9;
    function vb(b, c, d, e, f, i) {
        const a = ~(b & 1601) & (b | 1601);
        const j = ((c + 32301) * 2147483629 + 2147483587) % 2147483647;
        const k = (1013904223 + (49151 + d) * 1664525) % 4294967296;
        const h = e ^ 10722;
        const l = (2531011 + (f + 21739) * 214013) % 4294967296;
        const g = Of(a, j, k, h, l, ~(i & 12192) & 12192 | ~(i & 12192) & i);
        zw(a, j, k, h, l);
        return ~(g & 29852) & g | ~(g & 29852) & 29852;
    }
    const cb = _e;
    const mb = 1;
    const pb = 17;
    function Cb(b, c, d) {
        const e = (1013904223 + (b + 62721) * 1664525) % 4294967296;
        const f = ((c + 42349) * 214013 + 2531011) % 4294967296;
        const g = (24 << (d >> 8 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (0 << (d & 255));
        return (2147483587 + (61789 + (Yn(e, f, g, e, f) ^ ix(g, e, f, g, e))) * 2147483629) % 2147483647;
    }
    const Tb = 13;
    function fb() {
        zb[184] = ["You feel a great power emanating from this orb"];
        Ct[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        zb[328] = " RETOUR AU JEU";
        zb[329] = " Partage sur Twitter";
        zb[330] = " Partage sur Facebook";
        zb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        zb[332] = "points";
        zb[333] = "Score";
        zb[334] = "Tués";
        zb[335] = "Jours survécus";
        zb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        zb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        zb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        zb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        zb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        zb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        zb[7] = ["Main"];
        zb[140] = ["Terre", "C'est sale!"];
        zb[126] = ["Sable", "J'en ai dans les yeux"];
        zb[109] = ["Bois", "Tu n'en auras jamais trop!"];
        zb[108] = ["Pierre", "Aussi appelée roche"];
        zb[111] = ["Or", "Sois généreux, donne en aux autres"];
        zb[112] = ["Diamant", "Comme tes yeux! wesh"];
        zb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        zb[131] = ["Farine", "Utile pour la cuisine"];
        zb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        zb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        zb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        zb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        zb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        zb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        zb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        zb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        zb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        zb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        zb[201] = ["Guirlandes", "Utilisable sur les toits"];
        zb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        zb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        zb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        zb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        zb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        zb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        zb[194] = ["Ronces", "Ça pique!"];
        zb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        zb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        zb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        zb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        zb[2] = ["Peau de lapin", "Vous êtes un monstre"];
        zb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        zb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        zb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        zb[139] = ["Écailles", "Ça sent le poisson!"];
        zb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        zb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        zb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        zb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        zb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        zb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        zb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        zb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        zb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        zb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        zb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        zb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        zb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        zb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        zb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        zb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        zb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        zb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        zb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        zb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        zb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        zb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        zb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        zb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        zb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        zb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        zb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        zb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        zb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        zb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        zb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        zb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        zb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        zb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        zb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        zb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        zb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        zb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        zb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        zb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        zb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        zb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        zb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        zb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        zb[185] = ["Orbe du Dragon", "Donné en Quête"];
        zb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        zb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        zb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        zb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        zb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        zb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        zb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        zb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        zb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        zb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        zb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        zb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        zb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        zb[29] = ["Sac", "Plus de place dans ton inventaire!"];
        zb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        zb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        zb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        zb[148] = ["Cadenas", "Pour verrouiller un coffre"];
        zb[158] = ["Clé", "Pour déverrouiller un coffre"];
        zb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        zb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        zb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        zb[190] = ["Toit", "Te cache un peu et te réchauffe"];
        zb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        zb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        zb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        zb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        zb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        zb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        zb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        zb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        zb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        zb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        zb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        zb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        zb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        zb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        zb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        zb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        zb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        zb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        zb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        zb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        zb[300] = "Tu ne peux pas rejoindre le serveur";
        zb[301] = "Expulsé: ";
        zb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        zb[303] = "Ta clé est fausse";
        zb[304] = "Tu as une vieille version, rafraichis tes caches";
        zb[305] = "Il n'y a plus de nouvelles ressources";
        zb[306] = "Tu as survécu 1 jour";
        zb[307] = "Tu as survécu ";
        zb[308] = " jours";
        zb[309] = "Tu es mort ;-;";
        zb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        zb[311] = "Le serveur est complet! Spam le bouton jouer";
        zb[312] = "Cette ressource est vide";
        zb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        zb[314] = " est mort";
        zb[315] = "Ce n'est pas le bon outil";
        zb[316] = "Tu as rejoins une équipe";
        zb[317] = "Tu es mort";
        zb[318] = " a rejoint l'équipe";
        zb[319] = "Ton équipe a été détruite";
        zb[320] = "Tu as quitté l'équipe";
        zb[321] = " a quitté l'équipe";
        zb[322] = "Quelqu'un a volé ton token :>";
        zb[323] = "Choisis un serveur";
        zb[324] = "joueurs";
        zb[325] = "joueurs";
        zb[326] = "joueurs dans ce mode";
        zb[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        Ct[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        Ct[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        Ct[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        Ct[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        Ct[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        Ct[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        Ct[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        Ct[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        Ct[8] = ["Cet ours voulait juste un câlin."];
        Ct[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        Ct[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        Ct[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        Ct[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        Ct[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        Ct[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        Ct[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        Ct[16] = ["Un kraken a 'kraké' tes os."];
        Ct[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        Ct[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        Ct[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        Ct[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        Ct[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ⵠⵠⵠⵠᐃ = "Uuunnnggg";
        ⵠΔᐃᐃⲆⵠᐃ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    var zb = [];
    const yb = 14;
    const wb = 10;
    for (var Pb = 0; Pb < 344; Pb++) {
        zb[Pb] = "";
    }
    var Ct = [];
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            ut();
        } else if (a === "Français") {
            fb();
        } else if (a === "Deutsch") {
            nb();
        } else if (a === "Español") {
            ib();
        } else if (a === "Português") {
            yt();
        } else if (a === "Русский") {
            vt();
        } else if (a === "Polski") {
            rb();
        }
        ᐃΔⲆᐃⵠ = [];
        rx.ⲆΔⲆᐃ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    const kb = 8;
    mr = "EN";
    const xb = Aq;
    switch (navigator.language || navigator.userLanguage) {
        case "ru":
            mr = "RU";
            break;
        case "en":
            mr = "EN";
            break;
        case "es":
            mr = "SP";
            break;
        case "fr":
            mr = "FR";
            break;
        case "pl":
            mr = "PL";
            break;
        case "de":
            mr = "DE";
            break;
        case "pt":
            mr = "PT";
    }
    var Jb;
    const Dt = 15;
    const Bb = 12;
    if (mr === "FR") {
        $(".md-languages label button").text("Français");
        Jb = fb;
    } else if (mr === "PL") {
        $(".md-languages label button").text("Polski");
        Jb = rb;
    } else if (mr === "PT") {
        $(".md-languages label button").text("Português");
        Jb = yt;
    } else if (mr === "SP") {
        $(".md-languages label button").text("Español");
        Jb = ib;
    } else if (mr === "RU") {
        $(".md-languages label button").text("Русский");
        Jb = vt;
    } else if (mr === "DE") {
        $(".md-languages label button").text("Deutsch");
        Jb = nb;
    } else {
        $(".md-languages label button").text("English");
        Jb = ut;
    }
    Mh = {
        ⵠⵠⵠⵠⲆᐃΔⲆΔ: "img/logo.png",
        ΔⲆⲆᐃΔΔⲆ: "img/mapday.png",
        ⵠΔΔⲆⲆⵠᐃ: "img/mapnight.png",
        ΔⵠᐃⵠⵠᐃⲆᐃⲆ: "img/bigzday.png",
        ΔⵠⲆⲆΔⵠᐃΔᐃ: "img/bigznight.png",
        ᐃᐃⲆⵠᐃΔⲆ: "img/bigday-river1.png",
        ᐃⵠᐃΔᐃⲆΔⵠΔ: "img/bigday-lake.png",
        ᐃᐃΔⲆⲆΔᐃ: "img/bigday-berry.png",
        ⲆⵠΔⵠᐃⲆⲆ: "img/bigday-stone1.png",
        ΔΔⲆΔΔΔΔ: "img/bigday-stone2.png",
        ⵠⲆⵠΔⲆΔᐃ: "img/bigday-gold1.png",
        ΔⵠⵠΔⵠⵠⲆ: "img/bigday-gold2.png",
        ⲆⲆᐃⵠᐃⲆⵠ: "img/bigday-emerald1.png",
        ᐃᐃⵠΔⲆΔΔ: "img/bigday-emerald2.png",
        ⲆⵠΔᐃⲆΔⲆ: "img/bigday-amethyst.png",
        ᐃⲆΔΔⲆΔᐃ: "img/bigday-bear.png",
        ⲆΔⲆΔΔΔᐃ: "img/bigday-cave.png",
        ⵠⲆᐃⵠⲆⵠᐃ: "img/bigday-diamond.png",
        ⵠⲆⲆⵠΔⲆⲆ: "img/bigday-island.png",
        ᐃⵠᐃⲆⲆΔⲆ: "img/bigday-reidite.png",
        ⵠᐃⵠⲆΔΔΔ: "img/bigday-spider.png",
        ΔⵠⲆΔᐃΔⲆ: "img/bigday-wolf.png",
        ᐃᐃⵠⲆᐃⲆΔ: "img/bigday-fir-tree.png",
        ⵠᐃᐃⲆⵠⲆΔ: "img/bigday-fox.png",
        ⵠⵠᐃᐃⲆⲆᐃ: "img/bigday-kraken.png",
        ⲆⲆⲆⲆᐃⲆᐃ: "img/bigday-piranha.png",
        ⲆΔⵠⵠⵠⲆᐃ: "img/bigday-cactus.png",
        ΔΔΔⲆᐃⲆᐃ: "img/bigday-magma.png",
        ⵠΔΔᐃⵠⲆᐃ: "img/bigday-river1.png",
        ᐃᐃⵠᐃΔⲆΔΔⵠ: "img/bignight-lake.png",
        ᐃΔⲆΔⵠⲆⵠⲆᐃ: "img/bignight-berry.png",
        ΔΔⲆⲆⲆᐃⵠ: "img/bignight-stone1.png",
        ⵠⲆΔΔᐃⵠⵠ: "img/bignight-stone2.png",
        ⵠᐃᐃΔΔᐃᐃ: "img/bignight-gold1.png",
        ᐃᐃⲆΔᐃΔΔ: "img/bignight-gold2.png",
        ᐃᐃⲆⲆⵠᐃᐃ: "img/bignight-emerald1.png",
        ΔⲆᐃⵠⵠΔⲆ: "img/bignight-emerald2.png",
        ⲆᐃΔΔᐃᐃᐃ: "img/bignight-amethyst.png",
        ⲆⲆΔΔⵠⵠᐃ: "img/bignight-bear.png",
        ⵠᐃΔⲆⲆᐃΔ: "img/bignight-cave.png",
        ⲆⵠᐃⲆΔⵠᐃ: "img/bignight-diamond.png",
        ⲆⵠᐃⵠⵠΔⵠ: "img/bignight-island.png",
        ᐃⲆⵠᐃᐃΔᐃ: "img/bignight-reidite.png",
        ⲆᐃⲆⵠΔⵠⲆ: "img/bignight-spider.png",
        ⲆΔⵠᐃⵠᐃΔ: "img/bignight-wolf.png",
        ⵠⲆΔΔⵠᐃᐃ: "img/bignight-fir-tree.png",
        ΔᐃΔΔᐃⵠⵠ: "img/bignight-fox.png",
        ΔⵠΔΔΔᐃⲆ: "img/bignight-kraken.png",
        ΔⲆⵠΔΔⵠⵠ: "img/bignight-piranha.png",
        ⲆΔⵠᐃⲆΔⵠ: "img/bignight-cactus.png",
        ΔᐃⵠΔⵠⲆᐃ: "img/bignight-magma.png",
        ᐃᐃⲆᐃⲆⵠΔ: "img/bigday-desert.png",
        ⵠΔⲆⵠⵠⵠⲆ: "img/bigday-winter.png",
        ᐃᐃⵠΔᐃⲆΔ: "img/bigday-lava.png",
        ⵠⵠⲆⲆⵠⲆᐃ: "img/bigday-forest.png",
        ΔⵠⵠⵠΔΔⲆ: "img/bignight-desert.png",
        ⵠΔᐃᐃⲆⵠΔ: "img/bignight-winter.png",
        ⵠΔΔⵠⵠⵠⵠ: "img/bignight-lava.png",
        ᐃⲆᐃΔⲆᐃΔ: "img/bignight-forest.png",
        ⵠⲆⲆᐃⲆΔⲆ: "img/day-river-wave.png",
        ΔⵠⵠⵠⲆΔΔ: "img/night-river-wave.png",
        ⵠΔᐃΔᐃⵠⵠ: "img/day-fog0.png",
        ⵠᐃⵠⵠΔΔⵠ: "img/day-fog1.png",
        ᐃᐃᐃⵠⲆΔⲆ: "img/day-fog2.png",
        ᐃⲆⲆᐃⲆΔⵠ: "img/night-fog0.png",
        ⲆⲆⲆᐃⲆΔⲆ: "img/night-fog1.png",
        ⵠΔⵠⵠᐃⲆΔ: "img/night-fog2.png",
        ⵠᐃᐃⲆᐃⲆⲆ: "img/day-fogdesert0.png",
        ᐃᐃⵠⵠΔᐃᐃ: "img/day-fogdesert1.png",
        ⲆⵠΔⲆΔⲆᐃ: "img/day-fogdesert2.png",
        ᐃⲆⲆᐃⲆⵠᐃ: "img/night-fogdesert0.png",
        ⵠⲆΔⵠᐃⵠᐃ: "img/night-fogdesert1.png",
        ⲆΔⲆΔᐃΔᐃ: "img/night-fogdesert2.png",
        ᐃⲆⲆᐃⵠᐃⲆ: "img/day-cross-server.png",
        ⵠᐃⲆΔΔⲆΔ: "img/day-here-server.png",
        ΔΔⲆⵠᐃⲆⲆ: "img/day-finish-server.png",
        ⲆᐃᐃΔᐃᐃⲆ: "img/day-item-server.png",
        ᐃⲆⵠⲆⵠⲆΔ: "img/day-skull-server.png",
        ⲆⲆⵠᐃᐃⵠⵠ: "img/night-cross-server.png",
        ᐃΔΔΔⲆΔΔ: "img/night-here-server.png",
        ᐃⵠΔⲆⵠΔΔ: "img/night-finish-server.png",
        ⲆΔⵠᐃⵠΔⲆ: "img/night-item-server.png",
        ᐃᐃⲆΔⵠⵠᐃ: "img/night-skull-server.png",
        ΔⲆⵠΔⵠΔΔ: "img/day-reidite0.png",
        ⲆⵠⵠⵠⲆⵠΔ: "img/night-reidite0.png",
        ⵠⲆⵠᐃⲆΔΔ: "img/day-reidite1.png",
        ᐃⵠⲆⲆΔΔⵠ: "img/night-reidite1.png",
        ⵠᐃⵠⵠᐃⵠᐃ: "img/day-reidite2.png",
        ⲆⲆᐃᐃⲆⵠᐃ: "img/night-reidite2.png",
        ⵠⵠⲆᐃⲆⲆΔ: "img/day-lava1.png",
        ΔΔᐃΔΔᐃⲆ: "img/night-lava1.png",
        ΔᐃⵠΔⵠⲆⲆ: "img/day-lava2.png",
        ΔΔⲆᐃᐃⵠⲆ: "img/night-lava2.png",
        ⵠᐃⵠᐃΔΔᐃ: "img/day-lava3.png",
        ⲆΔᐃᐃⵠⵠΔ: "img/night-lava3.png",
        ⲆⲆⵠᐃⵠᐃⲆ: "img/day-lava4.png",
        ⵠⵠᐃⵠΔⵠᐃ: "img/night-lava4.png",
        ΔⵠⲆⵠⵠⲆⲆ: "img/day-lava5.png",
        ⲆᐃΔΔⵠΔΔ: "img/night-lava5.png",
        ᐃⲆⲆⲆΔⲆⲆ: "img/day-lava6.png",
        ⲆⲆᐃᐃⲆΔΔ: "img/night-lava6.png",
        ᐃⵠⵠᐃⲆⵠⲆ: "img/day-lava-ground1.png",
        ⵠᐃⲆⲆΔᐃᐃ: "img/night-lava-ground1.png",
        ΔᐃⲆᐃⲆᐃΔ: "img/day-lava-ground2.png",
        ΔⲆΔⵠΔᐃⵠ: "img/night-lava-ground2.png",
        ᐃΔⵠΔΔΔᐃ: "img/day-lava-ground3.png",
        ⵠⵠⵠⵠᐃⲆⲆ: "img/night-lava-ground3.png",
        ᐃⲆⲆⲆⲆⲆⵠ: "img/day-lava-ground4.png",
        ΔⲆΔᐃᐃⲆⲆ: "img/night-lava-ground4.png",
        ΔⵠⲆⲆⵠᐃⲆ: "img/day-lava-ground5.png",
        ⵠΔⲆΔΔΔⲆ: "img/night-lava-ground5.png",
        ᐃⲆΔᐃΔᐃΔ: "img/day-lava-ground6.png",
        ᐃᐃⲆⵠᐃΔΔ: "img/night-lava-ground6.png",
        ᐃⵠΔΔⵠΔᐃ: "img/day-fire-mob.png",
        ⵠΔΔⵠᐃΔⵠ: "img/night-fire-mob.png",
        ΔⵠⵠΔⲆΔⵠ: "img/hurt-fire-mob.png",
        ᐃΔⲆΔᐃⲆᐃ: "img/day-diamond-protection.png",
        ΔⵠᐃⵠΔⵠᐃ: "img/night-diamond-protection.png",
        ⲆⵠⲆⲆⲆⵠᐃ: "img/day-hand-diamond-protection.png",
        ⲆⲆᐃⲆΔᐃⵠ: "img/night-hand-diamond-protection.png",
        ⲆⵠΔⵠⵠΔᐃ: "img/inv-diamond-protection-out.png",
        ⵠΔᐃΔΔⵠΔ: "img/inv-diamond-protection-in.png",
        ΔᐃⲆᐃΔᐃᐃ: "img/inv-diamond-protection-click.png",
        ᐃⲆᐃⵠⵠⲆⵠ: "img/day-amethyst-protection.png",
        ᐃⵠᐃΔⲆΔⲆ: "img/night-amethyst-protection.png",
        ΔᐃⵠⵠᐃΔᐃᐃΔ: "img/day-hand-amethyst-protection.png",
        ⵠᐃⵠᐃΔΔⵠΔΔ: "img/night-hand-amethyst-protection.png",
        ⵠᐃᐃⲆⲆᐃᐃ: "img/inv-amethyst-protection-out.png",
        ᐃⲆᐃⵠⵠΔᐃ: "img/inv-amethyst-protection-in.png",
        ᐃᐃΔⵠᐃΔⵠ: "img/inv-amethyst-protection-click.png",
        ⲆΔⵠΔⲆⵠⲆ: "img/day-reidite-sword.png",
        ⲆⲆΔᐃᐃⵠΔ: "img/night-reidite-sword.png",
        ⵠⵠΔΔᐃⲆⲆ: "img/inv-reidite-sword-out.png",
        ΔⲆⵠΔΔΔᐃ: "img/inv-reidite-sword-in.png",
        ⲆΔΔΔᐃⵠΔ: "img/inv-reidite-sword-click.png",
        ᐃΔⲆⵠⵠᐃΔ: "img/inv-reidite-out.png",
        ᐃⵠⲆⵠᐃⵠΔ: "img/inv-reidite-in.png",
        ΔᐃΔᐃⲆⲆⲆ: "img/inv-reidite-click.png",
        ⵠᐃⲆⲆⵠⲆⲆ: "img/inv-flame-out.png",
        ΔΔⲆⲆΔᐃΔ: "img/inv-flame-in.png",
        ᐃΔᐃΔΔⵠᐃ: "img/inv-flame-click.png",
        ΔᐃΔⵠΔΔⲆ: "img/day-magma-buble0.png",
        ᐃⵠⵠⵠΔᐃⵠ: "img/night-magma-buble0.png",
        ΔΔⵠⲆⵠⲆᐃ: "img/day-magma-buble1.png",
        ΔᐃᐃᐃᐃⲆⵠ: "img/night-magma-buble1.png",
        ⲆΔⵠᐃᐃᐃⵠ: "img/day-magma-buble2.png",
        ᐃᐃᐃⲆΔᐃⲆ: "img/night-magma-buble2.png",
        ⵠᐃⲆΔΔᐃⲆ: "img/day-lava-dragon.png",
        ᐃⲆⲆⲆⵠⲆⵠ: "img/night-lava-dragon.png",
        ΔΔⵠᐃⵠⲆⵠⵠⵠ: "img/day-fire-dragon.png",
        ΔⵠΔⵠⵠᐃᐃΔⲆ: "img/night-fire-dragon.png",
        ᐃᐃᐃᐃΔⲆⲆ: "img/hurt-lava-dragon.png",
        ⵠᐃⲆⵠΔᐃᐃ: "img/day-lava-wing-left.png",
        Ⲇⵠⵠᐃᐃᐃⵠ: "img/night-lava-wing-left.png",
        ⵠⲆᐃΔΔⲆⵠ: "img/day-lava-wing-right.png",
        ᐃΔᐃΔΔⲆᐃ: "img/night-lava-wing-right.png",
        ΔᐃⲆⵠⵠΔᐃ: "img/hurt-lava-wing-left.png",
        ⵠΔΔᐃΔⵠΔ: "img/hurt-lava-wing-right.png",
        ΔⵠᐃⵠΔⲆⲆ: "img/day-reidite-spear.png",
        ⵠΔᐃⵠⵠΔⲆ: "img/night-reidite-spear.png",
        ⵠⵠΔⵠᐃⲆᐃ: "img/inv-reidite-spear-out.png",
        ⲆⲆΔⵠⲆΔⲆ: "img/inv-reidite-spear-in.png",
        ⲆΔΔⵠⵠᐃΔ: "img/inv-reidite-spear-click.png",
        ΔⵠᐃⲆⲆᐃΔ: "img/day-reidite-helmet.png",
        ᐃΔᐃⵠⲆᐃⲆ: "img/night-reidite-helmet.png",
        ⵠᐃⵠΔΔᐃⵠ: "img/inv-reidite-helmet-out.png",
        ΔⵠᐃⲆΔⵠⲆ: "img/inv-reidite-helmet-in.png",
        ⵠⲆΔⵠᐃΔᐃ: "img/inv-reidite-helmet-click.png",
        ᐃⵠⲆΔᐃⲆⵠ: "img/day-hand-reidite-protection.png",
        ΔⲆΔⲆⲆⵠⲆ: "img/night-hand-reidite-protection.png",
        ᐃΔⵠⲆⲆᐃΔ: "img/day-reidite-protection.png",
        ᐃⵠⲆⲆΔΔⲆ: "img/night-reidite-protection.png",
        ⲆᐃΔⲆⲆᐃⵠ: "img/inv-reidite-protection-out.png",
        ⵠᐃᐃΔᐃΔᐃ: "img/inv-reidite-protection-in.png",
        ΔⵠᐃΔⵠΔⲆ: "img/inv-reidite-protection-click.png",
        ᐃⵠᐃⵠⲆⵠⲆ: "img/day-lava-dragon-sword.png",
        ᐃⲆⵠΔΔⵠΔ: "img/night-lava-dragon-sword.png",
        ⲆᐃΔⵠΔⲆⵠ: "img/inv-lava-dragon-sword-out.png",
        ⲆⲆⲆΔⵠᐃᐃ: "img/inv-lava-dragon-sword-in.png",
        ⵠᐃᐃⲆΔᐃⲆ: "img/inv-lava-dragon-sword-click.png",
        ΔᐃᐃΔⵠΔⵠ: "img/day-lava-spear.png",
        ΔⵠⵠᐃⲆⵠΔ: "img/night-lava-spear.png",
        ⲆΔⵠᐃⲆΔΔ: "img/inv-lava-spear-out.png",
        ⵠᐃᐃⲆᐃᐃⵠ: "img/inv-lava-spear-in.png",
        ΔⲆᐃⲆΔⵠᐃ: "img/inv-lava-spear-click.png",
        ⲆᐃⵠⲆⵠⲆⵠ: "img/day-lava-helmet.png",
        ΔΔᐃΔᐃⵠⵠ: "img/night-lava-helmet.png",
        ⲆᐃⵠᐃΔⲆⵠ: "img/inv-lava-helmet-out.png",
        ᐃᐃⵠⵠΔᐃⲆ: "img/inv-lava-helmet-in.png",
        ⲆⲆⲆⵠΔⵠΔ: "img/inv-lava-helmet-click.png",
        ᐃⲆΔⵠΔⵠⵠ: "img/day-witch-hat.png",
        ⲆΔⲆΔⲆᐃᐃ: "img/night-witch-hat.png",
        ᐃⲆΔⲆⵠⲆΔ: "img/inv-witch-hat-out.png",
        ΔᐃⲆⵠⵠᐃᐃ: "img/inv-witch-hat-in.png",
        ⲆⵠᐃⵠΔᐃᐃ: "img/inv-witch-hat-click.png",
        ᐃⵠᐃᐃⲆᐃⲆ: "img/day-nimbus2000.png",
        ᐃⵠⲆᐃΔⵠⵠ: "img/night-nimbus2000.png",
        ᐃΔⲆΔᐃⲆⵠ: "img/inv-nimbus2000-out.png",
        ᐃⵠⲆΔΔⲆⲆ: "img/inv-nimbus2000-in.png",
        ⵠΔⲆᐃⵠΔᐃ: "img/inv-nimbus2000-click.png",
        ⵠᐃⲆΔᐃⵠΔ: "img/day-accessory1-pacques.png",
        ⲆΔⲆΔⲆᐃⵠ: "img/night-accessory1-pacques.png",
        ⲆⲆⵠΔⲆΔⵠ: "img/day-accessory2-pacques.png",
        ᐃᐃᐃⲆΔᐃΔ: "img/night-accessory2-pacques.png",
        ⵠᐃΔΔⵠⵠⵠ: "img/day-accessory3-pacques.png",
        ᐃⵠⲆⲆⵠΔᐃ: "img/night-accessory3-pacques.png",
        ᐃⵠⵠᐃΔⲆⵠ: "img/day-accessory5-pacques.png",
        ᐃⲆΔᐃⲆⵠΔ: "img/night-accessory5-pacques.png",
        ⵠᐃΔⲆⵠⲆΔ: "img/day-accessory6-pacques.png",
        ᐃᐃⲆⲆᐃᐃᐃ: "img/night-accessory6-pacques.png",
        ⵠΔᐃⲆΔⵠᐃ: "img/day-accessory7-pacques.png",
        ΔⲆᐃⲆⲆⵠⵠ: "img/night-accessory7-pacques.png",
        ΔᐃΔⲆᐃΔⲆ: "img/day-accessory8-pacques.png",
        ⲆΔᐃᐃᐃⵠⲆ: "img/night-accessory8-pacques.png",
        ΔⲆⵠᐃᐃᐃᐃ: "img/day-bag-pacques.png",
        ⲆⲆⲆⲆΔᐃΔ: "img/night-bag-pacques.png",
        ΔΔⵠΔΔⲆΔ: "img/day-carrot.png",
        ΔΔᐃⵠⵠⲆⲆ: "img/night-carrot.png",
        ΔⲆⲆⵠΔⵠⵠ: "img/day-carrot-dried.png",
        ⲆΔᐃⵠΔᐃⵠ: "img/night-carrot-dried.png",
        ⵠⵠᐃⵠⵠΔⵠ: "img/day-tomato-herb.png",
        ⲆⲆΔⵠⲆⵠΔ: "img/night-tomato-herb.png",
        ⵠΔᐃⵠΔᐃΔ: "img/day-tomato-herb-dried.png",
        ᐃΔⲆⲆΔⲆΔ: "img/night-tomato-herb-dried.png",
        ⲆⲆᐃⵠΔᐃᐃ: "img/day-tomato.png",
        ΔⵠⲆΔᐃᐃⲆ: "img/night-tomato.png",
        ΔⲆᐃⲆⵠΔΔ: "img/inv-carrot-out.png",
        ⵠⵠΔᐃⲆⲆⵠ: "img/inv-carrot-in.png",
        ᐃᐃΔΔⵠᐃⲆ: "img/inv-carrot-click.png",
        ΔⲆΔⲆΔᐃΔ: "img/inv-tomato-out.png",
        ΔⵠᐃΔΔⲆΔ: "img/inv-tomato-in.png",
        ᐃᐃᐃᐃΔⵠΔ: "img/inv-tomato-click.png",
        ⵠᐃⲆᐃΔⲆΔ: "img/day-player0.png",
        ⵠᐃΔΔᐃᐃᐃ: "img/night-player0.png",
        ᐃⲆⲆΔΔⲆⲆ: "img/day-player1.png",
        ⲆⲆᐃᐃⲆΔᐃ: "img/night-player1.png",
        ᐃⲆⲆⵠΔⲆⲆ: "img/day-player2.png",
        ⲆⲆⵠᐃⵠΔⲆ: "img/night-player22.png",
        ΔⲆⲆⵠᐃᐃⵠ: "img/day-player3.png",
        ΔΔᐃᐃΔⵠⵠ: "img/night-player33.png",
        ⵠⵠΔΔΔⲆⵠ: "img/day-player4.png",
        ⲆΔᐃⲆⲆⵠΔ: "img/night-player4.png",
        ⲆᐃᐃⲆⵠⲆᐃ: "img/day-player5.png",
        ΔⵠⲆᐃⲆⲆⵠ: "img/night-player5.png",
        ΔⵠᐃⲆⵠⲆΔ: "img/day-player6.png",
        ⲆᐃᐃΔⵠΔΔ: "img/night-player6.png",
        ᐃᐃᐃⲆⵠᐃⲆ: "img/day-player7.png",
        ΔⲆⲆⲆⵠᐃⲆ: "img/night-player7.png",
        ⲆΔⵠⲆᐃⲆⵠ: "img/day-player8.png",
        ⵠΔⵠⵠⲆⲆΔ: "img/night-player8.png",
        ⵠⵠΔⵠΔⵠⲆ: "img/day-player9.png",
        ᐃⵠⵠΔΔᐃᐃ: "img/night-player9.png",
        ⵠᐃⵠΔⵠᐃⲆ: "img/day-player10.png",
        ⵠᐃⲆᐃᐃⵠΔ: "img/night-player10.png",
        ⲆᐃⵠΔⲆⵠᐃ: "img/day-player11.png",
        ⵠᐃΔⵠⵠⵠⲆ: "img/night-player11.png",
        ΔᐃᐃᐃᐃⲆΔ: "img/day-player12.png",
        ᐃΔⲆᐃⲆᐃⵠ: "img/night-player12.png",
        ΔΔᐃᐃᐃⲆΔ: "img/day-player13.png",
        ᐃᐃⵠⵠΔⲆΔ: "img/night-player13.png",
        ᐃᐃⲆΔΔᐃⲆ: "img/day-player14.png",
        ⲆΔⵠⵠᐃⵠⲆ: "img/night-player14.png",
        ΔᐃⵠⲆⵠⲆΔ: "img/day-player15.png",
        ΔΔⲆⲆΔΔΔ: "img/night-player15.png",
        ᐃᐃⲆΔΔΔⵠ: "img/day-player16.png",
        ⲆⵠⵠᐃⵠΔⲆ: "img/night-player16.png",
        ⵠΔᐃΔΔⵠⵠ: "img/day-player17.png",
        ⵠⲆⵠⵠⲆⵠΔ: "img/night-player17.png",
        ΔⲆⲆΔⲆᐃⵠ: "img/day-player18.png",
        ᐃⲆⵠᐃΔⵠⵠ: "img/night-player18.png",
        ⵠᐃⵠⵠⲆⵠⲆ: "img/day-player19.png",
        ⲆⵠᐃⵠΔⲆⲆ: "img/night-player19.png",
        ΔΔᐃΔⵠΔⲆ: "img/day-hand-player0.png",
        ΔΔΔΔᐃᐃⲆ: "img/night-hand-player0.png",
        ᐃΔᐃΔᐃⵠⵠ: "img/day-hand-player1.png",
        ⵠΔᐃΔᐃⲆᐃ: "img/night-hand-player1.png",
        ΔΔΔΔⲆᐃΔ: "img/day-hand-player2.png",
        ΔΔⵠᐃⵠΔΔ: "img/night-hand-player22.png",
        ΔΔⲆᐃᐃΔⲆ: "img/day-hand-player3.png",
        ᐃΔᐃⵠⲆⵠᐃ: "img/night-hand-player33.png",
        ⵠⵠΔᐃΔⲆΔ: "img/day-hand-player4.png",
        ΔᐃᐃⵠⵠⲆⵠ: "img/night-hand-player4.png",
        ⵠΔⲆⲆΔΔᐃ: "img/day-hand-player5.png",
        ᐃᐃΔᐃΔᐃᐃ: "img/night-hand-player5.png",
        ΔᐃⵠⲆⲆⵠᐃ: "img/day-hand-player6.png",
        ⵠΔⵠᐃᐃᐃΔ: "img/night-hand-player6.png",
        ⵠⵠΔᐃᐃⵠᐃ: "img/day-hand-player7.png",
        ᐃᐃᐃⵠΔᐃΔ: "img/night-hand-player7.png",
        ⵠΔΔⵠⲆⲆΔ: "img/day-hand-player8.png",
        ⵠⵠⲆᐃⵠᐃⵠ: "img/night-hand-player8.png",
        ⲆΔᐃⵠΔⲆⵠ: "img/day-hand-player9.png",
        ΔᐃⵠⵠᐃⵠΔ: "img/night-hand-player9.png",
        ᐃⵠⵠⲆΔⲆⲆ: "img/day-hand-player10.png",
        ᐃⲆΔⲆΔΔᐃ: "img/night-hand-player10.png",
        ⲆΔⵠΔΔΔΔ: "img/day-hand-player11.png",
        ⵠⵠⵠᐃⵠⲆⲆ: "img/night-hand-player11.png",
        ᐃⵠΔᐃΔᐃΔ: "img/day-hand-player12.png",
        ΔΔᐃᐃⵠⵠⲆ: "img/night-hand-player12.png",
        ΔᐃⵠΔΔⲆⵠ: "img/day-hand-player13.png",
        ᐃᐃΔⵠᐃⲆΔ: "img/night-hand-player13.png",
        ΔᐃⵠΔⵠᐃⵠ: "img/day-hand-player14.png",
        ⲆᐃᐃⲆⲆΔⵠ: "img/night-hand-player14.png",
        ⵠΔΔΔⲆΔᐃ: "img/day-hand-player15.png",
        ⵠⵠᐃᐃⵠⵠⵠ: "img/night-hand-player15.png",
        ⲆⲆⵠⲆᐃΔΔ: "img/day-hand-player16.png",
        ᐃΔⲆᐃⵠⲆΔ: "img/night-hand-player16.png",
        ⵠⵠⲆᐃᐃⲆⲆ: "img/day-hand-player17.png",
        ΔⲆⲆᐃᐃⲆⲆ: "img/night-hand-player17.png",
        ⲆⵠⲆⵠⲆᐃΔ: "img/day-hand-player18.png",
        ΔⵠⲆⵠⵠΔᐃ: "img/night-hand-player18.png",
        ᐃΔⵠᐃΔᐃⵠ: "img/day-hand-player19.png",
        ᐃⲆΔⲆΔΔΔ: "img/night-hand-player19.png",
        ᐃⲆΔⵠⵠⲆⵠ: "img/day-accessory4.png",
        ΔⲆᐃᐃⵠΔᐃ: "img/night-accessory4.png",
        ⲆΔΔᐃΔΔᐃ: "img/day-accessory9.png",
        ΔᐃⲆΔΔⲆᐃ: "img/night-accessory9.png",
        ⲆΔⲆᐃᐃⵠⲆ: "img/day-accessory10.png",
        ᐃⲆⲆΔⲆⲆⵠ: "img/night-accessory10.png",
        ⲆᐃᐃⲆⲆⲆⲆ: "img/day-accessory11.png",
        ⲆΔⵠⵠⵠⵠⲆ: "img/night-accessory11.png",
        ΔⵠⵠⵠΔΔΔ: "img/day-accessory12.png",
        ᐃΔᐃⵠⵠᐃᐃ: "img/night-accessory12.png",
        ⵠΔΔΔⵠᐃΔ: "img/day-bag.png",
        ⲆⲆⲆⵠΔΔΔ: "img/night-bag.png",
        ᐃⵠΔΔⵠΔⲆ: "img/inv-bag-out.png",
        ΔⲆⵠⵠᐃⲆⵠ: "img/inv-bag-in.png",
        ⲆⵠⲆΔⵠⵠⵠ: "img/inv-bag-click.png",
        ᐃΔᐃⲆᐃⵠⵠ: "img/day-pitchfork.png",
        ⲆᐃΔⵠⵠΔⲆ: "img/night-pitchfork.png",
        ⵠⵠⲆᐃᐃⵠⲆ: "img/inv-pitchfork-out.png",
        ⲆᐃᐃⲆΔⵠⲆ: "img/inv-pitchfork-in.png",
        ΔᐃⵠΔᐃⵠᐃ: "img/inv-pitchfork-click.png",
        ΔΔⵠᐃⵠᐃⵠ: "img/inv-wood-spike-door-out.png",
        ⵠΔⵠᐃᐃᐃᐃ: "img/inv-wood-spike-door-in.png",
        ⵠΔΔⲆᐃΔⵠ: "img/inv-wood-spike-door-click.png",
        ⲆΔⲆᐃᐃΔⵠ: "img/inv-stone-spike-door-out.png",
        ⲆΔⲆⲆᐃΔⲆ: "img/inv-stone-spike-door-in.png",
        ⲆΔΔⵠΔⲆᐃ: "img/inv-stone-spike-door-click.png",
        ⵠᐃⲆᐃᐃⲆᐃ: "img/inv-gold-spike-door-out.png",
        ΔⲆⲆᐃⵠⵠᐃ: "img/inv-gold-spike-door-in.png",
        ᐃⵠΔΔⲆΔⵠ: "img/inv-gold-spike-door-click.png",
        ⵠⲆⲆΔⵠⵠΔ: "img/inv-diamond-spike-door-out.png",
        ᐃᐃⲆⲆⲆΔⵠ: "img/inv-diamond-spike-door-in.png",
        ⵠᐃⵠⵠⵠⲆⲆ: "img/inv-diamond-spike-door-click.png",
        ⲆΔⲆᐃⲆᐃⵠ: "img/inv-amethyst-spike-door-out.png",
        ⵠΔᐃⲆᐃᐃⲆ: "img/inv-amethyst-spike-door-in.png",
        ⲆⵠⲆΔᐃᐃΔ: "img/inv-amethyst-spike-door-click.png",
        ⲆⵠᐃⵠΔΔᐃ: "img/day-wood-spike-door.png",
        ⲆⲆᐃⲆΔⵠᐃ: "img/night-wood-spike-door.png",
        ᐃᐃⵠⲆⲆᐃᐃ: "img/day-stone-spike-door.png",
        ⵠⲆⵠΔᐃΔᐃ: "img/night-stone-spike-door.png",
        ᐃⲆᐃΔᐃⲆⵠ: "img/day-gold-spike-door.png",
        ΔⵠᐃΔⵠᐃⲆ: "img/night-gold-spike-door.png",
        ΔⵠⵠᐃⲆⵠⲆ: "img/day-diamond-spike-door.png",
        ⲆⵠΔᐃⲆⵠᐃ: "img/night-diamond-spike-door.png",
        ⲆΔᐃΔⵠᐃⵠ: "img/day-amethyst-spike-door.png",
        ⲆⲆᐃⵠⲆⲆᐃ: "img/night-amethyst-spike-door.png",
        ⵠⵠΔⵠᐃⵠΔ: "img/inv-reidite-spike-door-out.png",
        ᐃᐃⵠⵠᐃⲆⲆ: "img/inv-reidite-spike-door-in.png",
        ⵠᐃⵠⲆⵠⲆⵠ: "img/inv-reidite-spike-door-click.png",
        ⵠⲆⵠⲆΔⲆⲆ: "img/inv-reidite-door-out.png",
        ΔΔⲆⲆⵠⵠΔ: "img/inv-reidite-door-in.png",
        ᐃᐃᐃΔᐃⲆⵠ: "img/inv-reidite-door-click.png",
        ⵠⵠΔⲆᐃᐃᐃ: "img/inv-reidite-spike-out.png",
        ΔⲆΔⲆᐃⵠᐃ: "img/inv-reidite-spike-in.png",
        ⵠΔᐃΔⲆⲆⲆ: "img/inv-reidite-spike-click.png",
        ᐃᐃⵠΔⵠΔᐃ: "img/inv-reidite-wall-out.png",
        ⵠⵠΔⵠᐃⲆⵠ: "img/inv-reidite-wall-in.png",
        ⲆⵠⲆΔⲆΔΔ: "img/inv-reidite-wall-click.png",
        ΔᐃⲆⲆΔΔΔ: "img/day-reidite-wall.png",
        ⵠᐃᐃΔⲆⵠⲆ: "img/night-reidite-wall.png",
        ᐃⲆⵠΔⵠΔⲆ: "img/day-reidite-door.png",
        ⲆⵠᐃⵠᐃᐃⲆ: "img/night-reidite-door.png",
        ᐃᐃⲆᐃⲆⲆᐃ: "img/day-reidite-spike.png",
        ⵠΔⵠᐃⵠⲆⲆ: "img/night-reidite-spike.png",
        ⵠⵠⵠⲆᐃΔⵠ: "img/day-reidite-spike-door.png",
        ⲆΔⵠⵠᐃΔⵠ: "img/night-reidite-spike-door.png",
        ΔΔⵠⲆⲆⵠⲆ: "img/inv-reidite-pickaxe-out.png",
        ΔᐃᐃⵠΔⵠᐃ: "img/inv-reidite-pickaxe-in.png",
        ⵠⲆⲆⵠΔΔᐃ: "img/inv-reidite-pickaxe-click.png",
        ⵠΔⲆⵠⵠΔᐃ: "img/day-reidite-pickaxe.png",
        ΔᐃⲆᐃΔⲆᐃ: "img/night-reidite-pickaxe.png",
        ΔᐃⲆⵠⵠᐃⲆ: "img/inv-reidite-hammer-out.png",
        ΔⵠⲆⲆᐃᐃⲆ: "img/inv-reidite-hammer-in.png",
        ᐃᐃΔⲆᐃΔⲆ: "img/inv-reidite-hammer-click.png",
        ⵠᐃᐃΔΔᐃΔ: "img/day-reidite-hammer.png",
        ᐃⵠⲆΔᐃᐃΔ: "img/night-reidite-hammer.png",
        ⲆᐃⲆⲆᐃᐃⵠ: "img/day-watermelon1.png",
        ΔΔⵠⵠΔᐃⵠ: "img/night-watermelon1.png",
        ᐃᐃΔⵠᐃΔᐃ: "img/day-watermelon-dried1.png",
        ⲆᐃⵠΔᐃⲆΔ: "img/night-watermelon-dried1.png",
        ᐃⵠΔᐃᐃᐃᐃ: "img/inv-watermelon-out.png",
        ⵠⲆᐃΔΔᐃⵠ: "img/inv-watermelon-in.png",
        ⲆⵠⵠⲆⲆⲆΔ: "img/inv-watermelon-click.png",
        ⲆⲆᐃΔⲆᐃΔ: "img/day-boat.png",
        ⵠᐃⵠᐃΔΔΔ: "img/night-boat.png",
        ᐃⵠᐃΔⵠⵠΔ: "img/day-boat-wave.png",
        ⲆΔᐃᐃΔᐃᐃ: "img/night-boat-wave.png",
        ᐃⲆⲆⲆⵠᐃΔ: "img/inv-boat-out.png",
        ⵠΔΔⵠⲆⵠΔ: "img/inv-boat-in.png",
        ⲆᐃΔᐃⵠᐃⵠ: "img/inv-boat-click.png",
        ⲆᐃⵠΔⲆᐃⲆ: "img/day-plane.png",
        ⵠⲆΔⲆⵠⲆΔ: "img/night-plane.png",
        ᐃΔΔΔⲆⵠⲆ: "img/inv-plane-out.png",
        ⵠⵠΔⲆⲆⵠⵠ: "img/inv-plane-in.png",
        ᐃᐃⲆⵠᐃⲆⵠ: "img/inv-plane-click.png",
        Ⲇⵠⵠⵠⵠⵠⵠ: "img/day-sled.png",
        ᐃⵠⲆΔᐃΔⵠ: "img/night-sled.png",
        ⵠⵠⵠΔⲆⲆΔ: "img/day-sled-wave.png",
        ⲆⲆᐃΔⵠᐃΔ: "img/night-sled-wave.png",
        ᐃⲆΔⲆᐃⲆᐃ: "img/inv-sled-out.png",
        ⵠᐃΔᐃⵠⲆᐃ: "img/inv-sled-in.png",
        ΔᐃⵠᐃΔⲆΔ: "img/inv-sled-click.png",
        ΔⵠⲆΔⵠⲆⵠ: "img/day-pirate-hat.png",
        ΔⲆᐃᐃᐃΔᐃ: "img/night-pirate-hat.png",
        ΔΔⲆᐃᐃⵠⵠ: "img/inv-pirate-hat-out.png",
        ⲆⲆΔⲆΔⲆⲆ: "img/inv-pirate-hat-in.png",
        ⵠⲆⲆΔΔⵠΔ: "img/inv-pirate-hat-click.png",
        ⲆᐃⵠⲆⵠΔⲆ: "img/day-penguin.png",
        ⲆᐃⲆᐃⵠⲆΔ: "img/night-penguin.png",
        ⵠⲆⵠᐃΔⵠⵠ: "img/hurt-penguin.png",
        ΔⵠⲆΔⵠ: "img/inv-penguin-feather-click.png",
        ᐃᐃΔⵠⲆ: "img/inv-hawk-feather-click.png",
        ⵠΔᐃΔⵠΔΔ: "img/day-boar1.png",
        ᐃΔⲆᐃᐃⵠⲆ: "img/day-boar1-tamed.png",
        ⲆΔⵠΔΔⲆΔ: "img/day-boar1-angry.png",
        ΔⵠΔᐃᐃⵠⲆ: "img/night-boar1.png",
        ᐃⲆΔΔᐃΔᐃ: "img/night-boar1-tamed.png",
        ᐃⲆΔᐃΔΔᐃ: "img/night-boar1-angry.png",
        ᐃΔⲆΔⵠΔⲆ: "img/inv-mount-boar-out.png",
        ΔⲆⲆΔⵠⵠΔ: "img/inv-mount-boar-in.png",
        ⲆⵠᐃΔⵠⲆΔ: "img/inv-mount-boar-click.png",
        ⲆΔᐃΔⵠⵠⵠ: "img/day-hurt-boar1.png",
        ⲆΔⵠᐃΔⲆⲆ: "img/boar1-step.png",
        ΔΔⵠⲆΔⲆᐃ: "img/day-saddle1.png",
        ᐃΔⲆⵠᐃᐃⵠ: "img/night-saddle1.png",
        ⲆⲆΔⲆᐃⵠᐃ: "img/inv-saddle-out.png",
        ΔᐃᐃΔⲆᐃᐃ: "img/inv-saddle-in.png",
        ⵠΔⲆΔΔⵠᐃ: "img/inv-saddle-click.png",
        Δᐃⵠⵠᐃⵠⵠ: "img/day-magic-wand0.png",
        ⵠΔΔᐃⲆⲆΔ: "img/night-magic-wand0.png",
        Ⲇⵠⵠⵠⵠⵠᐃ: "img/day-light-wand1.png",
        ΔᐃΔΔⲆⵠᐃ: "img/night-light-wand1.png",
        ⲆⵠⵠΔᐃⵠⲆ: "img/inv-magic-wand0-out.png",
        ⵠΔⵠΔⵠΔΔ: "img/inv-magic-wand0-in.png",
        ⵠⲆⵠᐃⵠΔⲆ: "img/inv-magic-wand0-click.png",
        ᐃΔⲆᐃⵠⲆᐃ: "img/day-magic-wand1.png",
        ΔⲆⵠⵠⵠⲆⵠ: "img/night-magic-wand1.png",
        ΔⵠⵠⵠΔⲆᐃ: "img/day-light-wand0.png",
        ⵠᐃᐃΔΔⵠᐃ: "img/night-light-wand0.png",
        ᐃⵠⵠⵠᐃⵠᐃ: "img/inv-magic-wand1-out.png",
        ⲆΔΔᐃΔⵠⵠ: "img/inv-magic-wand1-in.png",
        Δⵠⵠⵠᐃⵠⵠ: "img/inv-magic-wand1-click.png",
        ΔΔΔⲆᐃⲆΔ: "img/day-firefly.png",
        ⵠⲆⵠΔⲆΔⵠ: "img/night-firefly.png",
        ⲆⲆΔΔΔⲆᐃ: "img/hurt-firefly.png",
        ⵠᐃᐃΔⵠΔⵠ: "img/inv-firefly-out.png",
        ᐃΔⵠᐃᐃⲆⲆ: "img/inv-firefly-in.png",
        ⲆᐃⵠᐃⲆⲆⲆ: "img/inv-firefly-click.png",
        ⲆᐃΔⲆᐃⵠΔ: "img/day-baby-dragon.png",
        ⲆΔᐃᐃⵠⲆᐃ: "img/night-baby-dragon.png",
        ⲆΔᐃⲆⵠΔⲆ: "img/day-baby-dragon-angry.png",
        ⵠⵠⲆⵠΔΔⵠ: "img/night-baby-dragon-angry.png",
        ⵠᐃΔⵠⲆⵠΔ: "img/day-baby-dragon-tamed.png",
        ᐃΔⲆᐃᐃⲆᐃ: "img/night-baby-dragon-tamed.png",
        ⲆΔⲆΔⵠΔΔ: "img/day-wing-dragon-left-angry.png",
        ⵠⲆᐃⲆᐃᐃⲆ: "img/night-dragon-wing-left-angry.png",
        ⵠⲆᐃⲆᐃᐃⵠ: "img/day-wing-dragon-right-angry.png",
        ΔⵠᐃⲆᐃⲆⲆ: "img/night-dragon-wing-right-angry.png",
        ⵠⵠⲆⲆᐃⵠⲆ: "img/day-wing-dragon-left-tamed.png",
        ᐃⲆⲆΔⲆⵠᐃ: "img/night-dragon-wing-left-tamed.png",
        ⲆᐃᐃⲆⲆⵠΔ: "img/day-wing-dragon-right-tamed.png",
        ΔᐃⲆⲆᐃⲆΔ: "img/night-wing-dragon-right-tamed.png",
        ΔⲆΔᐃⵠᐃⵠ: "img/day-wing-dragon-left.png",
        ΔⲆⵠⲆΔⲆΔ: "img/night-dragon-wing-left.png",
        ⲆⵠΔΔⲆΔΔ: "img/day-wing-dragon-right.png",
        ⲆⲆⵠⵠⲆΔⲆ: "img/night-wing-dragon-right.png",
        ⵠᐃⵠⲆΔΔⵠ: "img/hurt-baby-dragon.png",
        ⲆΔᐃⵠᐃᐃⵠ: "img/hurt-baby-dragon-wing-left.png",
        ᐃᐃⵠⵠΔΔⵠ: "img/hurt-baby-dragon-wing-right.png",
        ⲆⲆⲆΔᐃΔⲆ: "img/inv-baby-dragon-out.png",
        ⲆⲆⵠᐃⲆⲆᐃ: "img/inv-baby-dragon-in.png",
        ᐃΔᐃⲆᐃⲆⵠ: "img/inv-baby-dragon-click.png",
        ⵠⲆⵠᐃΔᐃᐃ: "img/day-baby-lava.png",
        ⵠⵠΔⲆᐃⲆᐃ: "img/night-baby-lava.png",
        ⲆᐃᐃΔᐃⲆΔ: "img/day-baby-lava-angry.png",
        ᐃΔΔᐃⵠⵠᐃ: "img/night-baby-lava-angry.png",
        ᐃⲆⵠⲆⲆⵠΔ: "img/day-baby-lava-tamed.png",
        ⵠΔᐃΔⲆⲆⵠ: "img/night-baby-lava-tamed.png",
        ᐃᐃⵠⲆⵠⲆᐃ: "img/day-wing-lava-left-angry.png",
        ⵠΔΔⲆⲆⲆⵠ: "img/night-wing-lava-left-angry.png",
        ⵠᐃⵠᐃΔⵠΔ: "img/day-wing-lava-right-angry.png",
        ⲆⵠⲆΔΔⵠΔ: "img/night-wing-lava-right-angry.png",
        ⵠᐃⵠⵠᐃⲆΔ: "img/day-wing-lava-left-tamed.png",
        Δᐃᐃⵠᐃⵠᐃ: "img/night-wing-lava-left-tamed.png",
        ⵠΔΔⲆⲆΔᐃ: "img/day-wing-lava-right-tamed.png",
        ⵠᐃⵠⵠᐃⵠΔ: "img/night-wing-lava-right-tamed.png",
        ⵠⲆΔⵠⲆⵠᐃ: "img/day-wing-lava-left.png",
        ΔΔⲆⲆⲆΔᐃ: "img/night-wing-lava-left.png",
        ᐃⵠⵠΔⵠⲆΔ: "img/day-wing-lava-right.png",
        ⲆᐃⵠⲆⲆⵠΔ: "img/night-wing-lava-right.png",
        ⲆⲆᐃᐃᐃⵠΔ: "img/hurt-baby-lava.png",
        ΔΔⲆⲆⲆⵠⲆ: "img/hurt-baby-lava-wing-left.png",
        ᐃⵠⵠⲆⲆⵠⵠ: "img/hurt-baby-lava-wing-right.png",
        ⵠᐃⲆⵠᐃᐃⵠ: "img/inv-baby-lava-out.png",
        ⲆⵠⵠⲆⵠᐃᐃ: "img/inv-baby-lava-in.png",
        ᐃⵠⵠⲆⵠᐃⲆ: "img/inv-baby-lava-click.png",
        ΔᐃⵠⲆΔᐃⵠ: "img/day-falcon.png",
        ⵠΔⲆΔⵠⵠΔ: "img/night-falcon.png",
        ⲆⵠᐃⲆᐃΔⲆ: "img/day-falcon-angry.png",
        ΔΔᐃᐃᐃΔΔ: "img/night-falcon-angry.png",
        ⲆⲆⲆⵠᐃⲆᐃ: "img/day-falcon-ground.png",
        ⲆΔΔⵠᐃᐃⵠ: "img/night-falcon-ground.png",
        ⵠⵠⲆⲆⵠⵠⲆ: "img/day-falcon-ground-angry.png",
        ⵠⵠⵠⲆⲆⲆⲆ: "img/night-falcon-ground-angry.png",
        ᐃᐃᐃⲆⵠᐃΔ: "img/day-falcon-wings-left.png",
        Δⵠⵠᐃⵠᐃᐃ: "img/night-falcon-wings-left.png",
        ⲆⵠᐃΔᐃᐃᐃ: "img/day-falcon-wings-right.png",
        ᐃᐃΔᐃᐃΔⲆ: "img/night-falcon-wings-right.png",
        ΔΔⵠⲆⵠΔΔ: "img/day-falcon-angry-wings-left.png",
        ⵠⲆᐃᐃΔᐃΔ: "img/night-falcon-angry-wings-left.png",
        ΔΔᐃⵠⵠᐃᐃ: "img/day-falcon-angry-wings-right.png",
        ⲆⲆΔⵠΔⵠΔ: "img/night-falcon-angry-wings-right.png",
        ΔΔⵠΔᐃⵠⵠ: "img/day-falcon-wings-left-tamed.png",
        ⲆᐃⵠΔⲆΔᐃ: "img/night-falcon-wings-left-tamed.png",
        ⲆⵠⲆⵠΔⲆΔ: "img/day-falcon-wings-right-tamed.png",
        ⲆΔⲆΔⵠΔⲆ: "img/night-falcon-wings-right-tamed.png",
        ΔᐃΔΔⲆⵠⵠ: "img/day-falcon-tamed.png",
        ⵠⲆⵠⲆⲆⵠⵠ: "img/night-falcon-tamed.png",
        ΔΔΔΔⲆⵠⲆ: "img/hurt-falcon-ground.png",
        ᐃⲆⲆΔⲆΔΔ: "img/hurt-falcon.png",
        ΔᐃΔΔⵠΔⵠ: "img/hurt-falcon-wings-left.png",
        ᐃᐃΔⵠⵠⵠⵠ: "img/hurt-falcon-wings-right.png",
        ᐃᐃⲆΔⲆⵠⵠ: "img/inv-falcon-out.png",
        ⲆⵠᐃⵠΔⲆᐃ: "img/inv-falcon-in.png",
        ⵠᐃⵠⵠᐃᐃⲆ: "img/inv-falcon-click.png",
        ᐃⲆⵠΔΔⲆⲆ: "img/day-crab-boss.png",
        ⵠΔΔᐃⵠⵠΔ: "img/night-crab-boss.png",
        ΔᐃᐃⲆⲆⲆⵠ: "img/day-crab-boss-angry.png",
        ⲆⲆⲆⵠΔᐃⵠ: "img/night-crab-boss-angry.png",
        ⵠⵠⵠΔΔⵠⵠ: "img/day-crab-boss-tamed.png",
        Δⵠᐃⵠᐃᐃᐃ: "img/night-crab-boss-tamed.png",
        ᐃᐃⵠⲆᐃΔⲆ: "img/day-crab-boss-claw-left-attack.png",
        ⵠᐃⵠⲆⲆᐃᐃ: "img/night-crab-boss-claw-left-attack.png",
        ⵠⲆⲆⵠᐃⵠΔ: "img/day-crab-boss-claw-right-attack.png",
        ⵠΔⵠΔᐃⲆᐃ: "img/night-crab-boss-claw-right-attack.png",
        ᐃⵠᐃΔᐃᐃΔᐃⲆ: "img/day-crab-boss-claw-left-tamed.png",
        ᐃΔΔⲆⵠⵠᐃΔⲆ: "img/night-crab-boss-claw-left-tamed.png",
        ⵠᐃⲆᐃΔⲆᐃΔᐃ: "img/day-crab-boss-claw-right-tamed.png",
        ⵠⵠⵠⲆⲆᐃⲆΔⵠ: "img/night-crab-boss-claw-right-tamed.png",
        ΔⲆᐃⲆⵠⲆΔ: "img/day-crab-boss-claw-left.png",
        ᐃΔⵠⲆᐃⵠⲆ: "img/night-crab-boss-claw-left.png",
        ⵠⲆⵠⵠΔⲆᐃ: "img/day-crab-boss-claw-right.png",
        ΔΔⵠⲆⲆᐃΔ: "img/night-crab-boss-claw-right.png",
        ΔᐃⵠΔⵠᐃΔ: "img/hurt-crab-boss.png",
        ΔΔΔΔⲆⵠᐃ: "img/hurt-crab-boss-claw-left.png",
        ΔⲆⲆⲆᐃⵠⲆ: "img/hurt-crab-boss-claw-right.png",
        ⲆⵠⵠⲆⵠΔⵠ: "img/heal-crab-boss.png",
        ⲆᐃᐃⵠⲆΔΔ: "img/heal-crab-boss-claw-left.png",
        ⲆΔⲆⲆᐃᐃᐃ: "img/heal-crab-boss-claw-right.png",
        ⲆⵠΔᐃᐃΔⵠ: "img/crab-step.png",
        ᐃᐃΔⵠᐃⵠⵠ: "img/inv-crab-boss-out.png",
        ΔⲆⵠΔᐃΔⲆ: "img/inv-crab-boss-in.png",
        ᐃⲆⲆⲆᐃⵠΔ: "img/inv-crab-boss-click.png",
        ⲆᐃⲆⲆⲆⵠΔ: "img/day-cactus10.png",
        ΔⵠⵠⵠⲆⲆⲆ: "img/night-cactus10.png",
        ⵠⲆᐃⲆΔᐃᐃ: "img/inv-cactus-out.png",
        ⲆᐃᐃᐃⲆΔⲆ: "img/inv-cactus-in.png",
        ᐃΔΔΔⲆᐃΔ: "img/inv-cactus-click.png",
        ᐃΔⵠΔΔⵠΔ: "img/day-scorpion.png",
        ᐃⵠΔⵠᐃⲆⵠ: "img/night-scorpion.png",
        ᐃᐃⲆᐃⵠᐃᐃ: "img/day-scorpion-hand-left.png",
        ⵠᐃΔⲆⲆⵠΔ: "img/night-scorpion-hand-left.png",
        ⲆⵠᐃⲆΔⲆΔ: "img/day-scorpion-hand-right.png",
        ⵠᐃΔⲆᐃᐃⲆ: "img/night-scorpion-hand-right.png",
        ⲆΔᐃΔΔⵠⲆ: "img/hurt-scorpion.png",
        ᐃⵠⵠᐃΔΔⲆ: "img/hurt-scorpion-hand-left.png",
        ΔⵠᐃΔΔᐃᐃ: "img/hurt-scorpion-hand-right.png",
        ᐃⵠⵠΔᐃⵠᐃ: "img/day-vulture.png",
        ΔΔⵠᐃⵠⲆᐃ: "img/night-vulture.png",
        ΔΔⵠⵠⲆᐃⵠ: "img/day-vulture-angry.png",
        ⲆΔⲆᐃⲆⵠⵠ: "img/night-vulture-angry.png",
        ⲆⵠⲆⲆⲆⲆΔ: "img/day-vulture-ground.png",
        ⵠⲆΔⲆⵠΔⵠ: "img/night-vulture-ground.png",
        ⲆⲆΔⵠᐃⲆⲆ: "img/day-vulture-ground-angry.png",
        ⲆⵠⵠⲆⲆⲆⲆ: "img/night-vulture-ground-angry.png",
        ⲆᐃΔⵠⲆΔⵠ: "img/day-vulture-wings-left.png",
        ⲆᐃᐃⲆⲆΔᐃ: "img/night-vulture-wings-left.png",
        ΔⵠᐃⵠⲆΔⵠ: "img/day-vulture-wings-right.png",
        ⲆⵠⵠᐃΔᐃᐃ: "img/night-vulture-wings-right.png",
        ᐃⲆᐃⵠΔⲆᐃ: "img/day-vulture-angry-wings-left.png",
        ΔᐃΔⲆΔⲆⲆ: "img/night-vulture-angry-wings-left.png",
        ΔᐃⵠⵠᐃᐃΔ: "img/day-vulture-angry-wings-right.png",
        ⲆΔΔⵠⵠⲆⵠ: "img/night-vulture-angry-wings-right.png",
        ΔᐃᐃᐃΔΔᐃ: "img/day-vulture-wings-left-tamed.png",
        ᐃᐃᐃⵠⵠⵠΔ: "img/night-vulture-wings-left-tamed.png",
        ᐃⲆⵠᐃⲆᐃΔ: "img/day-vulture-wings-right-tamed.png",
        ⲆⵠᐃᐃⵠΔⵠ: "img/night-vulture-wings-right-tamed.png",
        ⲆΔⵠⵠΔⲆΔ: "img/day-vulture-tamed.png",
        ΔⵠΔⲆΔᐃᐃ: "img/night-vulture-tamed.png",
        ΔᐃΔΔⵠⵠⲆ: "img/hurt-vulture-ground.png",
        ⵠⲆᐃᐃⲆᐃⵠ: "img/hurt-vulture.png",
        ⵠⲆᐃΔⲆⵠᐃ: "img/hurt-vulture-wings-left.png",
        ⵠⲆΔΔⲆⲆⲆ: "img/hurt-vulture-wings-right.png",
        ⵠⵠⵠⵠⲆⵠΔ: "img/day-aloe-vera.png",
        ⵠⵠⲆⲆΔᐃᐃ: "img/night-aloe-vera.png",
        ⲆΔΔⵠⵠⵠᐃ: "img/inv-aloe-vera-out.png",
        ⵠᐃᐃΔᐃᐃⲆ: "img/inv-aloe-vera-in.png",
        ᐃΔⵠⲆΔⵠⲆ: "img/inv-aloe-vera-click.png",
        ᐃΔⲆΔᐃᐃΔ: "img/day-aloe-vera-grown.png",
        ⲆⲆⵠⲆΔᐃⲆ: "img/night-aloe-vera-grown.png",
        ΔⲆⵠᐃⲆⲆᐃ: "img/day-aloe-vera-dried.png",
        ᐃΔΔᐃⵠΔΔ: "img/night-aloe-vera-dried.png",
        ΔⵠᐃⵠⲆΔΔ: "img/day-turban1.png",
        ΔⲆⲆⲆⵠΔΔ: "img/night-turban1.png",
        ⲆΔⵠⲆΔᐃᐃ: "img/day-turban2.png",
        ⲆⲆᐃⲆᐃᐃᐃ: "img/night-turban2.png",
        ⵠⲆΔΔⲆᐃΔ: "img/inv-turban2-out.png",
        ⵠⵠᐃⲆⵠΔⲆ: "img/inv-turban2-in.png",
        ⵠᐃⲆΔⲆⵠΔ: "img/inv-turban2-click.png",
        ⲆΔⵠⲆⵠⲆⵠ: "img/inv-turban1-out.png",
        ⲆⵠΔⲆⵠᐃⲆ: "img/inv-turban1-in.png",
        ⵠΔⵠⵠΔΔⲆ: "img/inv-turban1-click.png",
        ⵠᐃΔᐃⵠⵠΔ: "img/day-pitchfork2.png",
        ΔⲆⲆᐃⵠⲆⵠ: "img/night-pitchfork2.png",
        ⲆᐃΔⲆⲆᐃᐃ: "img/inv-pitchfork2-out.png",
        ΔⵠⵠⲆⲆΔⲆ: "img/inv-pitchfork2-in.png",
        ⲆΔΔⲆΔⲆⵠ: "img/inv-pitchfork2-click.png",
        ⲆⵠⵠⲆⲆΔΔ: "img/inv-gold-fork-click.png",
        ΔΔⲆⵠᐃⵠⵠ: "img/inv-pilot-glasses-click.png",
        ⵠᐃⲆⲆⲆⲆᐃ: "img/day-pilot-helmet.png",
        ΔⲆⲆΔⲆⲆⲆ: "img/night-pilot-helmet.png",
        ᐃⵠⵠⲆᐃΔⲆ: "img/inv-pilot-helmet-out.png",
        ΔᐃⲆⲆᐃᐃᐃ: "img/inv-pilot-helmet-in.png",
        ΔⵠⵠⵠΔⵠⵠ: "img/inv-pilot-helmet-click.png",
        ⵠΔΔⲆⵠⲆᐃⵠΔ: "img/day-sandworm0.png",
        ⲆΔⲆΔⵠᐃᐃ: "img/day-sandworm1.png",
        ΔΔⵠᐃⲆⵠΔ: "img/day-sandworm2.png",
        ⵠⵠΔΔᐃⵠΔᐃᐃ: "img/night-sandworm0.png",
        ΔⵠΔⵠⲆΔⵠ: "img/night-sandworm1.png",
        ᐃⵠᐃᐃⲆⲆⵠ: "img/night-sandworm2.png",
        ΔⲆΔΔⲆⵠΔ: "img/hurt-sandworm0.png",
        ΔΔΔⲆⵠⵠΔ: "img/hurt-sandworm1.png",
        ⵠΔⵠⵠⵠᐃⵠ: "img/hurt-sandworm2.png",
        ⲆᐃⲆᐃΔ: "img/inv-vulture-feather-click.png",
        ΔΔΔᐃΔⲆⲆ: "img/day-emerald0.png",
        ΔⲆⵠᐃⵠΔⵠ: "img/night-emerald0.png",
        ⲆⵠⵠⵠⲆⲆΔ: "img/day-emerald1.png",
        ΔᐃⲆᐃⵠᐃᐃ: "img/night-emerald1.png",
        ΔⲆⵠᐃΔⲆⲆ: "img/day-emerald2.png",
        ΔⵠⵠΔⲆᐃⵠ: "img/night-emerald2.png",
        ᐃⵠⵠⵠⲆ: "img/inv-emerald-click.png",
        Δⵠᐃⵠⵠⵠⵠ: "img/inv-sworm-juice-out.png",
        ΔⲆΔⲆΔⵠⲆ: "img/inv-sworm-juice-in.png",
        ΔⵠⲆⲆⵠΔⵠ: "img/inv-sworm-juice-click.png",
        ⵠⲆΔᐃᐃⵠⵠ: "img/day-point-machine.png",
        ⵠΔᐃⵠΔⲆⲆ: "img/night-point-machine.png",
        ΔᐃⲆΔⲆⵠᐃ: "img/day-point-machine-hole.png",
        ⲆᐃⵠΔΔΔⲆ: "img/night-point-machine-hole.png",
        ΔⲆⲆΔᐃⲆⲆ: "img/day-point-machine-ground.png",
        ⲆⲆΔΔᐃⵠΔ: "img/night-point-machine-ground.png",
        ⲆΔᐃⵠΔΔᐃ: "img/day-point-machine-rotate.png",
        ΔᐃⲆΔᐃᐃⲆ: "img/night-point-machine-rotate.png",
        ⲆΔⲆΔⵠΔᐃ: "img/inv-point-machine-out.png",
        ⵠᐃᐃᐃⵠᐃⲆ: "img/inv-point-machine-in.png",
        ⲆᐃⵠⵠΔⲆΔ: "img/inv-point-machine-click.png",
        ΔⲆⲆⲆⲆⵠⲆ: "img/day-extractor-machine0-stone.png",
        ΔᐃⵠΔΔⵠⲆ: "img/night-extractor-machine0-stone.png",
        ⵠⵠⲆⵠᐃⵠᐃ: "img/day-extractor-machine-stone.png",
        ΔΔⲆΔⵠⲆⵠ: "img/night-extractor-machine-stone.png",
        ⵠΔΔⵠⵠⲆᐃ: "img/inv-extractor-machine-stone-out.png",
        ⲆᐃⲆⵠᐃᐃΔ: "img/inv-extractor-machine-stone-in.png",
        ΔΔΔⵠⲆⲆⲆ: "img/inv-extractor-machine-stone-click.png",
        ᐃΔⲆⵠⵠᐃⲆ: "img/day-extractor-machine0-gold.png",
        ⵠᐃᐃᐃⵠᐃⵠ: "img/night-extractor-machine0-gold.png",
        ⲆⵠⵠⲆⵠᐃⵠ: "img/day-extractor-machine-gold.png",
        ⲆⵠᐃᐃⵠΔΔ: "img/night-extractor-machine-gold.png",
        ᐃᐃᐃᐃⵠᐃⵠ: "img/inv-extractor-machine-gold-out.png",
        ⵠΔΔᐃⵠⵠⵠ: "img/inv-extractor-machine-gold-in.png",
        ⵠΔⲆⵠⲆⲆᐃ: "img/inv-extractor-machine-gold-click.png",
        ΔⲆΔⲆΔⵠᐃ: "img/day-extractor-machine0-diamond.png",
        ᐃΔΔⲆⵠΔΔ: "img/night-extractor-machine0-diamond.png",
        ΔᐃⲆⵠⲆⲆΔ: "img/day-extractor-machine-diamond.png",
        ΔΔⲆΔΔⵠⵠ: "img/night-extractor-machine-diamond.png",
        ⲆᐃⲆᐃᐃⲆΔ: "img/inv-extractor-machine-diamond-out.png",
        ΔᐃᐃⵠΔΔⲆ: "img/inv-extractor-machine-diamond-in.png",
        ΔΔⲆᐃᐃᐃΔ: "img/inv-extractor-machine-diamond-click.png",
        ⲆⲆⲆΔⵠⲆⲆ: "img/day-extractor-machine0-amethyst.png",
        ᐃᐃΔᐃᐃᐃⲆ: "img/night-extractor-machine0-amethyst.png",
        ⵠⵠⵠⲆᐃᐃΔ: "img/day-extractor-machine-amethyst.png",
        ᐃⵠⵠΔᐃᐃᐃ: "img/night-extractor-machine-amethyst.png",
        ⵠⲆᐃΔΔⲆᐃ: "img/inv-extractor-machine-amethyst-out.png",
        ᐃᐃⲆⵠⵠΔᐃ: "img/inv-extractor-machine-amethyst-in.png",
        ᐃⲆⲆΔⵠⲆⲆ: "img/inv-extractor-machine-amethyst-click.png",
        ΔⵠⵠⵠⵠΔᐃ: "img/day-extractor-machine0-reidite.png",
        ᐃⵠΔⵠⵠᐃⵠ: "img/night-extractor-machine0-reidite.png",
        ⵠⲆΔⵠⵠⵠᐃ: "img/day-extractor-machine-reidite.png",
        ⲆⲆⵠΔᐃΔⵠ: "img/night-extractor-machine-reidite.png",
        ᐃⲆⲆⲆΔΔⲆ: "img/inv-extractor-machine-reidite-out.png",
        ⵠΔᐃᐃᐃΔⲆ: "img/inv-extractor-machine-reidite-in.png",
        ⲆⲆᐃᐃΔᐃⵠ: "img/inv-extractor-machine-reidite-click.png",
        ⲆⵠᐃᐃⲆⵠⵠ: "img/extractor-cases.png",
        ΔⲆⵠⲆᐃⲆⵠ: "img/day-golden-hen.png",
        ⲆⵠᐃⵠⲆΔᐃ: "img/night-golden-hen.png",
        ⲆᐃⵠᐃⵠⲆⵠ: "img/day-golden-chicken.png",
        Δⵠⵠᐃⵠⵠⵠ: "img/night-golden-chicken.png",
        ⵠΔⲆΔΔΔᐃ: "img/hurt-golden-hen.png",
        ΔΔΔᐃⵠⵠΔ: "img/hurt-golden-chicken.png",
        ΔᐃᐃⵠΔⲆᐃ: "img/logo-interface.png",
        ⲆΔⵠⵠΔΔⲆ: "img/forest-mode-hover.png",
        ⵠᐃᐃⵠΔⵠᐃ: "img/normal-mode-hover.png",
        ΔᐃΔⵠᐃΔΔ: "img/vampire-mode-hover.png",
        ⵠΔⲆᐃⵠⲆⵠ: "img/zombie-mode-hover.png",
        ⲆⵠⲆⲆⵠⲆⵠ: "img/community-mode-hover2.png",
        ⲆᐃᐃΔⲆᐃΔ: "img/experimental-mode-hover.png",
        ᐃᐃᐃᐃΔΔⲆ: "img/zombie-mode-out.png",
        ᐃΔⲆΔⵠⵠⵠ: "img/zombie-mode-in.png",
        ⲆΔΔⵠᐃᐃΔ: "img/zombie-mode-click.png",
        ᐃᐃⲆⲆΔⵠΔ: "img/vampire-mode-out.png",
        ΔΔΔΔⵠⲆΔ: "img/vampire-mode-in.png",
        ᐃⵠⵠⵠᐃΔΔ: "img/vampire-mode-click.png",
        ⲆⲆⵠᐃⲆᐃᐃ: "img/normal-mode-out.png",
        ⵠΔⲆⲆᐃⲆΔ: "img/normal-mode-in.png",
        ᐃᐃⲆᐃⲆⵠⵠ: "img/normal-mode-click.png",
        ΔᐃᐃᐃΔⲆⲆ: "img/forest-mode-out.png",
        ⲆΔⲆᐃΔΔⵠ: "img/forest-mode-in.png",
        ⲆᐃⵠⲆⵠⲆⲆ: "img/forest-mode-click.png",
        ᐃᐃΔⵠΔⵠⵠ: "img/community-mode-out.png",
        ΔΔᐃΔᐃⵠᐃ: "img/community-mode-in.png",
        ⵠΔΔⵠΔᐃⲆ: "img/community-mode-click.png",
        ⵠΔⵠᐃⲆⲆᐃ: "img/experimental-modes-out.png",
        ⲆᐃᐃⵠⲆⲆⲆ: "img/experimental-modes-in.png",
        ⵠΔΔⵠⲆΔⵠ: "img/experimental-modes-click.png",
        ⲆᐃⲆⲆⵠⵠΔ: "img/youtube-button-out.png",
        ⲆⲆⲆΔⲆⲆΔ: "img/youtube-button-in.png",
        ⲆⵠⲆⵠⲆⵠⲆ: "img/youtube-button-click.png",
        ⲆⲆⲆⵠΔⲆⵠ: "img/wiki-button-out.png",
        ⵠᐃᐃⵠᐃΔⵠ: "img/wiki-button-in.png",
        ᐃΔᐃⵠⵠⵠᐃ: "img/wiki-button-click.png",
        ⵠⵠⲆⲆᐃᐃⵠ: "img/twitter-button-out.png",
        ⲆΔⵠⵠᐃⲆᐃ: "img/twitter-button-in.png",
        ⵠΔΔⵠⲆΔΔ: "img/twitter-button-click.png",
        ⲆᐃⲆⲆᐃᐃΔ: "img/facebook-button-out.png",
        ᐃⲆᐃⵠᐃⲆⲆ: "img/facebook-button-in.png",
        ᐃⲆΔⵠⵠᐃᐃ: "img/facebook-button-click.png",
        ⲆⲆΔⵠᐃΔΔ: "img/reddit-button-out.png",
        ΔⲆᐃΔⲆΔⵠ: "img/reddit-button-in.png",
        ⵠᐃᐃΔⲆΔⵠ: "img/reddit-button-click.png",
        ᐃⵠⵠⲆᐃⲆⵠ: "img/discord-button-out.png",
        ΔᐃᐃᐃᐃΔⲆ: "img/discord-button-in.png",
        ⵠᐃᐃⲆⵠΔᐃ: "img/discord-button-click.png",
        ⲆⲆΔᐃᐃⲆⲆ: "img/merch-button-out.png",
        ⲆΔᐃΔⲆⵠΔ: "img/merch-button-in.png",
        ᐃᐃⵠᐃΔᐃⲆ: "img/merch-button-click.png",
        ⲆⵠⵠΔᐃⵠΔΔⵠ: "img/terminal-button-out.png",
        ⵠⵠᐃΔΔⲆⵠⲆᐃ: "img/terminal-button-in.png",
        ΔᐃΔᐃᐃᐃΔΔΔ: "img/terminal-button-click.png",
        ⲆⵠᐃᐃᐃⵠΔ: "img/restart-out.png",
        ⵠᐃⲆᐃⲆⵠᐃ: "img/restart-in.png",
        ⵠᐃⲆⲆⲆΔᐃ: "img/restart-click.png",
        ΔⵠⲆⵠᐃᐃⲆ: "img/guide-out.png",
        ΔΔΔⲆᐃⵠΔ: "img/guide-in.png",
        ⵠᐃᐃⲆΔⲆⲆ: "img/guide-click.png",
        ⵠⲆΔⵠΔⲆⲆ: "img/copy-paste-out.png",
        ⲆⲆⲆᐃⲆΔᐃ: "img/copy-paste-in.png",
        ⵠⲆΔⲆⵠⲆⵠ: "img/copy-paste-click.png",
        ΔΔⵠⵠᐃⲆⲆ: "img/link-buttons-bg.png",
        ΔⲆⵠⵠᐃᐃⲆ: "img/changelog-box2.png",
        ⵠᐃΔᐃⵠΔⲆ: "img/changelog_31.png",
        ⵠⵠΔΔΔΔⲆ: "img/banner-taming.png",
        ⵠᐃΔᐃᐃⲆᐃ: "img/profile-button-out.png",
        ⵠⵠⵠⵠᐃⲆⵠ: "img/profile-button-in.png",
        ΔΔΔΔΔⵠⲆ: "img/profile-button-click.png",
        ⵠᐃΔΔⲆᐃⵠ: "img/login-button-out.png",
        ⵠΔⵠⲆᐃⲆΔ: "img/login-button-in.png",
        ΔⲆⲆΔⲆΔⵠ: "img/login-button-click.png",
        ⵠⲆᐃⵠΔⲆⵠ: "img/login-google-out.png",
        ⵠⵠᐃᐃΔⵠᐃ: "img/login-google-in.png",
        ⵠⵠᐃⲆⵠᐃᐃ: "img/login-google-click.png",
        ⵠⵠᐃⵠⵠⵠⲆ: "img/login-facebook-out.png",
        ᐃⲆⲆΔⲆΔᐃ: "img/login-facebook-in.png",
        ᐃΔᐃᐃⲆⵠΔ: "img/login-facebook-click.png",
        ᐃΔⵠⲆⵠᐃⵠ: "img/account-box.png",
        ⵠⵠᐃΔᐃᐃⲆⵠⵠ: "img/account-under-maintenance.png",
        ⵠⲆⲆⵠⵠⲆΔ: "img/close-button-account-out.png",
        ΔΔΔⲆⵠΔᐃ: "img/close-button-account-in.png",
        ⲆⲆᐃᐃⲆᐃΔ: "img/close-button-account-click.png",
        ⲆᐃⵠⵠΔⵠⲆ: "img/play-button-out.png",
        ⵠᐃᐃΔⲆⵠᐃ: "img/play-button-in.png",
        ⲆⲆᐃⵠⵠⵠⵠ: "img/play-button-click.png",
        ᐃⲆⵠⲆⲆΔⵠⵠᐃ: "img/app-store-badge.png",
        ᐃᐃᐃⲆⲆⵠΔᐃⵠ: "img/play-store-badge.png",
        ᐃᐃⲆᐃΔᐃⲆΔⵠ: "img/mobile-boxad.png",
        ΔᐃΔⵠⵠⲆᐃ: "img/modify-name-out.png",
        ⲆⲆⲆⵠⵠΔⲆ: "img/modify-name-in.png",
        ΔⵠΔⵠⵠᐃⲆ: "img/modify-name-click.png",
        ⵠⵠⲆΔΔΔⲆ: "img/copy-id-button-out.png",
        ⵠⲆΔⲆᐃΔⲆ: "img/copy-id-button-hover.png",
        ⵠᐃⵠⲆⲆⵠΔ: "img/copy-id-button-active.png",
        ⵠⲆⲆΔⲆΔⵠ: "img/yes-button-out.png",
        ΔΔΔΔΔΔⲆ: "img/yes-button-in.png",
        ⵠᐃⵠⲆⲆΔΔ: "img/yes-button-click.png",
        ⵠΔⲆΔⲆΔΔ: "img/yes-300-button-out.png",
        ⵠᐃᐃⵠᐃᐃⵠ: "img/yes-300-button-in.png",
        ᐃΔⵠⲆΔΔᐃ: "img/yes-300-button-click.png",
        ΔⵠΔⲆⲆⲆⵠ: "img/no-button-out.png",
        ⵠΔΔΔΔᐃᐃ: "img/no-button-in.png",
        ᐃⲆⲆⲆΔΔᐃ: "img/no-button-click.png",
        ᐃᐃΔⵠΔᐃⲆ: "img/no-thanks-button-out.png",
        ⵠΔⵠⲆᐃⵠⵠ: "img/no-thanks-button-in.png",
        ⲆⵠⲆΔⲆⵠⲆ: "img/no-thanks-button-click.png",
        ΔⵠⵠⵠᐃΔⵠ: "img/shop-button-out.png",
        ΔΔⵠⲆᐃΔΔ: "img/shop-button-in.png",
        ᐃΔⵠⲆᐃⲆⲆ: "img/shop-button-click.png",
        ⵠⵠⵠΔⲆⵠᐃ: "img/logout-out.png",
        ⲆᐃⲆᐃΔⲆⲆ: "img/logout-in.png",
        ΔᐃΔⲆⵠΔΔ: "img/logout-click.png",
        ΔᐃΔⵠΔᐃⲆ: "img/terms-button-out.png",
        ⵠΔⲆⲆⲆΔⲆ: "img/terms-button-in.png",
        ⵠⵠⲆᐃᐃΔⵠ: "img/terms-button-click.png",
        ΔᐃⲆⵠΔⵠⵠ: "img/tutorial-icon.png",
        ⲆⵠⲆΔᐃᐃⵠ: "img/skins-icon.png",
        ⵠⲆᐃᐃΔᐃⲆ: "img/shop-icon.png",
        ⵠᐃⵠⲆᐃΔᐃⲆᐃ: "img/paint-icon.png",
        ΔᐃⵠΔΔᐃᐃ: "img/leaderboard-icon.png",
        ⵠΔΔⵠΔⵠΔ: "img/start-icon.png",
        ⲆⵠⵠΔⲆΔⲆ: "img/profile-icon.png",
        ᐃⲆΔⵠᐃⵠΔ: "img/server-access-icon2.png",
        ᐃᐃΔⲆⲆⲆΔ: "img/button-homepage-bg-out.png",
        ΔⵠⲆⲆΔⲆᐃ: "img/button-homepage-bg-in.png",
        ΔⲆⲆⲆⲆᐃⲆ: "img/button-homepage-bg-click.png",
        ᐃⲆΔᐃⵠᐃΔ: "img/button-bottom-homepage-bg-out.png",
        ⵠΔΔᐃᐃΔΔ: "img/button-bottom-homepage-bg-in.png",
        ᐃⵠⲆⲆΔᐃΔ: "img/button-bottom-homepage-bg-click.png",
        ⲆᐃⲆΔⵠⲆⵠ: "img/lvl-player.png",
        ⲆⵠᐃᐃΔΔᐃ: "img/avatar-player.png",
        ΔⲆⲆⲆᐃⲆΔ: "img/avatar-player1.png",
        ⵠΔⵠᐃᐃΔᐃ: "img/avatar-player2.png",
        ᐃⵠⵠΔᐃⲆᐃ: "img/avatar-player3.png",
        ᐃⵠΔᐃΔⲆΔ: "img/avatar-player4.png",
        ⵠᐃⲆᐃΔⵠΔ: "img/avatar-player5.png",
        ΔᐃⵠⲆᐃᐃⲆ: "img/avatar-player6.png",
        ⲆⲆᐃⵠᐃⵠᐃ: "img/avatar-player7.png",
        ᐃⵠⵠⲆΔⲆⵠ: "img/avatar-player8.png",
        ΔᐃᐃⲆⵠΔΔ: "img/avatar-player9.png",
        ΔⵠⲆⲆᐃᐃᐃ: "img/avatar-player10.png",
        ⵠΔΔᐃⲆⵠⵠ: "img/avatar-player11.png",
        ⲆⵠⲆΔΔᐃᐃ: "img/avatar-player12.png",
        ΔⵠΔⲆΔΔΔ: "img/avatar-player13.png",
        ⲆⵠᐃⵠᐃⲆΔ: "img/avatar-player14.png",
        ᐃⲆᐃⲆⲆΔΔ: "img/avatar-player14.png",
        ΔᐃΔⲆᐃⲆⲆ: "img/avatar-player14.png",
        ᐃⵠⵠᐃΔΔⵠ: "img/avatar-player14.png",
        ⵠⵠΔⲆᐃⲆⵠᐃⵠ: "img/golden-bread.png",
        ᐃᐃⲆⲆΔΔⵠ: "img/buy-bread-out.png",
        ᐃᐃⲆΔᐃᐃᐃ: "img/buy-bread-in.png",
        ⲆᐃΔΔΔⵠΔ: "img/buy-bread-click.png",
        ᐃᐃΔⵠⵠΔᐃ: "img/gauge.png",
        ⵠᐃΔΔⵠⵠᐃⵠⵠ: "img/season-4-out.png",
        ⵠᐃⲆⲆⲆⲆΔⵠᐃ: "img/season-4-in.png",
        ⲆΔⵠⵠΔᐃΔⲆⲆ: "img/season-4-click.png",
        ΔΔΔⵠΔᐃΔΔᐃ: "img/season4-box.png",
        ΔⵠᐃⲆΔⵠᐃΔⵠ: "img/season-5-out.png",
        ⵠΔΔⲆΔΔⲆΔⵠ: "img/season-5-in.png",
        ⲆΔⵠΔⲆΔⲆᐃⵠ: "img/season-5-click.png",
        ΔΔᐃⲆΔᐃⵠⵠΔ: "img/season5-box.png",
        ⵠΔⲆⲆⲆΔᐃ: "img/season-6-out.png",
        ᐃⲆᐃΔⵠᐃᐃ: "img/season-6-in.png",
        ⵠᐃⲆⲆᐃⵠᐃ: "img/season-6-click.png",
        ΔᐃⵠⲆᐃⵠⲆ: "img/season6-box.png",
        ᐃΔⵠⲆᐃΔⵠ: "img/profile3-box.png",
        ΔΔⵠᐃⵠᐃᐃ: "img/skins-box.png",
        ⲆⵠⲆΔΔᐃⵠ: "img/shop-box.png",
        ΔᐃᐃΔᐃⲆΔⲆⵠ: "img/private-server-box.png",
        ⲆᐃⲆⲆᐃᐃᐃ: "img/location-box.png",
        ᐃⲆΔⲆⵠΔⲆ: "img/server-duration-box.png",
        ΔⵠⲆᐃΔⲆⵠ: "img/tutorial-box.png",
        ΔⲆⲆⵠⲆⵠΔ: "img/leaderboard2-box.png",
        ᐃΔᐃᐃᐃⲆⲆ: "img/buy-breads-box.png",
        ⵠⵠⲆᐃᐃⵠΔ: "img/bag-box.png",
        ΔΔΔⵠⲆΔᐃ: "img/deadbox-box.png",
        ΔⵠⵠⲆⵠⵠᐃ: "img/book-box.png",
        ⲆⵠⲆⲆⲆⲆⵠ: "img/accessories-box.png",
        ⲆⲆΔⵠΔⵠᐃ: "img/customskin-box.png",
        ⵠⲆΔΔⵠΔΔ: "img/bag-lasts.png",
        ᐃΔⵠᐃⵠᐃⵠ: "img/server-lasts.png",
        ᐃⵠⲆⵠᐃΔᐃ: "img/server-access-box3.png",
        ΔᐃⲆΔᐃⲆⲆ: "img/lootbox-box.png",
        ΔⵠⲆᐃⲆΔΔ: "img/change-nickname0.png",
        ᐃⲆᐃΔΔᐃᐃ: "img/change-nickname1.png",
        ⲆΔᐃⲆⲆⲆᐃ: "img/cheating-box.png",
        ΔⵠⵠᐃΔⵠⵠᐃΔ: "img/daily-quest-box.png",
        ᐃⵠΔΔⲆΔΔᐃΔ: "img/daily-5-bread.png",
        ⵠᐃᐃⲆⲆⵠᐃΔⵠ: "img/daily-10-bread.png",
        ΔⵠᐃⲆⲆΔᐃⲆⵠ: "img/daily-valid.png",
        ΔΔⲆⵠᐃΔⵠ: "img/normal-profile-out.png",
        ᐃᐃⵠⵠᐃⵠⵠ: "img/normal-profile-in.png",
        ⵠⵠΔΔⲆⲆⵠ: "img/normal-profile-click.png",
        Ⲇᐃⵠⵠᐃⵠⵠ: "img/forest-profile-out.png",
        ⵠⵠΔᐃᐃΔᐃ: "img/forest-profile-in.png",
        ᐃⵠⵠᐃⵠⵠᐃ: "img/forest-profile-click.png",
        ΔΔⲆⲆᐃⲆⲆ: "img/zombie-profile-out.png",
        ⵠⵠΔⵠⲆⲆᐃ: "img/zombie-profile-in.png",
        ⲆΔⲆᐃⲆⵠΔ: "img/zombie-profile-click.png",
        ᐃΔⵠΔᐃΔⲆ: "img/vampire-profile-out.png",
        ⲆᐃⵠⵠᐃΔΔ: "img/vampire-profile-in.png",
        ⲆⲆΔᐃᐃΔⲆ: "img/vampire-profile-click.png",
        ⵠΔᐃΔⲆⲆΔ: "img/total-profile-out.png",
        ⵠᐃⲆⲆⵠⵠⵠ: "img/total-profile-in.png",
        ᐃⲆᐃᐃᐃΔⲆ: "img/total-profile-click.png",
        ⵠⲆᐃΔⲆΔΔ: "img/season1-out.png",
        ⵠΔⵠⲆⲆⵠᐃ: "img/season1-in.png",
        ⲆᐃⵠⵠΔⵠΔ: "img/season1-click.png",
        ΔⲆⵠⵠᐃⵠⲆ: "img/season2-out.png",
        ΔⵠᐃⵠᐃⲆΔ: "img/season2-in.png",
        ⲆⵠⵠΔⲆⵠΔ: "img/season2-click.png",
        ⲆⲆᐃⵠΔᐃΔ: "img/season3-out.png",
        ⵠⲆⲆΔⲆⵠⵠ: "img/season3-in.png",
        ⵠⲆⵠⲆΔⵠⵠ: "img/season3-click.png",
        ᐃᐃΔᐃⵠΔⲆ: "img/season4-out.png",
        ⵠᐃᐃⲆᐃⲆᐃ: "img/season4-in.png",
        ⵠⲆΔⵠⲆΔⵠ: "img/season4-click.png",
        ⵠΔΔᐃⵠⲆⲆ: "img/season5-out.png",
        ΔⲆᐃⲆΔΔⲆ: "img/season5-in.png",
        ᐃΔⵠⲆⲆⵠᐃ: "img/season5-click.png",
        ᐃⲆⲆⲆΔⵠⲆ: "img/season6-out.png",
        ⲆᐃⲆⵠΔⵠᐃ: "img/season6-in.png",
        ⲆᐃⲆΔΔΔΔ: "img/season6-click.png",
        ⲆⲆⲆⵠⲆΔⵠ: "img/locked-skin-alert.png",
        ᐃⵠⲆⲆΔΔᐃ: "img/locked-custom-alert.png",
        ⵠᐃΔⲆΔΔΔ: "img/bg-red-locked.png",
        ᐃⵠⲆᐃⲆᐃᐃ: "img/skin-button-out.png",
        ᐃⲆⵠⲆⲆⵠⵠ: "img/skin-button-in.png",
        ΔᐃⲆⲆⲆⵠᐃ: "img/skin-button-click.png",
        ΔⲆⲆᐃᐃⵠⵠ: "img/accessory-button-out.png",
        ⲆΔᐃΔⵠᐃⲆ: "img/accessory-button-in.png",
        ΔΔⵠⵠΔᐃᐃ: "img/accessory-button-click.png",
        ⵠΔᐃⲆⲆᐃΔ: "img/bag-button-out.png",
        ⲆⵠΔⵠⲆⲆΔ: "img/bag-button-in.png",
        ᐃΔⲆⲆᐃⵠΔ: "img/bag-button-click.png",
        ⵠⲆⵠⵠᐃⵠⲆ: "img/book-button-out.png",
        ⲆⲆⲆⵠⲆΔΔ: "img/book-button-in.png",
        ⲆΔᐃᐃⲆⲆΔ: "img/book-button-click.png",
        ⵠⲆΔⲆⲆᐃΔ: "img/deadbox-button-out.png",
        ΔⲆᐃⵠⲆⲆᐃ: "img/deadbox-button-in.png",
        ᐃΔⵠⵠⲆⵠⵠ: "img/deadbox-button-click.png",
        ⲆᐃΔⵠΔᐃⲆ: "img/loot-button-out.png",
        ΔᐃᐃⲆⵠⵠⲆ: "img/loot-button-in.png",
        ⵠΔⲆΔᐃᐃⲆ: "img/loot-button-click.png",
        ⵠΔⵠⲆᐃⵠᐃ: "img/free-item-out.png",
        ⵠⵠⲆⵠᐃⲆΔ: "img/free-item-in.png",
        ᐃⵠⵠᐃᐃΔΔ: "img/free-item-click.png",
        ΔΔⲆΔ: "img/wood-item-out.png",
        ᐃⵠⵠⵠ: "img/wood-item-in.png",
        ⲆΔᐃⵠ: "img/wood-item-click.png",
        ΔⵠΔⵠⵠᐃΔ: "img/stone-item.png",
        ΔⲆⲆΔⲆⲆⵠ: "img/stone-item-in.png",
        ⵠᐃᐃⲆΔΔΔ: "img/stone-item-click.png",
        ⲆᐃᐃⲆΔΔᐃ: "img/gold-item.png",
        ᐃⵠᐃᐃΔⲆᐃ: "img/gold-item-in.png",
        ⲆⵠⲆᐃΔⵠⲆ: "img/gold-item-click.png",
        ΔⲆⲆᐃᐃΔⲆ: "img/diamond-item.png",
        ⵠᐃⲆᐃΔᐃΔ: "img/diamond-item-in.png",
        ᐃⵠΔⵠⲆᐃΔ: "img/diamond-item-click.png",
        ⲆΔⵠΔᐃⲆᐃ: "img/amethyst-item.png",
        ⵠᐃⵠⲆᐃᐃⲆ: "img/amethyst-item-in.png",
        ΔⲆⲆⵠΔⲆΔ: "img/amethyst-item-click.png",
        ⲆⵠΔᐃΔⲆⵠ: "img/reidite-item.png",
        ⲆⵠⵠⲆⵠⵠⲆ: "img/reidite-item-in.png",
        ΔΔᐃΔΔⵠᐃ: "img/reidite-item-click.png",
        ⵠᐃᐃⲆᐃⲆΔ: "img/special-item-out.png",
        ΔⵠΔΔᐃΔⵠ: "img/special-item-in.png",
        ⲆΔᐃᐃᐃᐃΔ: "img/special-item-click.png",
        ⵠⲆⵠⲆⵠᐃⲆ: "img/level-item-out.png",
        ⵠΔⲆΔⲆⵠΔ: "img/level-item-in.png",
        ⵠⵠΔⲆᐃᐃⵠ: "img/level-item-click.png",
        ⲆⲆΔⲆΔⵠᐃ: "img/skin-previous-out.png",
        ⵠⵠᐃⵠᐃⲆⵠ: "img/skin-previous-in.png",
        ᐃᐃΔᐃΔⵠⲆ: "img/skin-previous-click.png",
        ᐃΔⵠⵠᐃᐃΔ: "img/skin-next-out.png",
        ᐃⵠⲆⲆΔⲆΔ: "img/skin-next-in.png",
        ᐃⵠⵠⵠⵠⲆⵠ: "img/skin-next-click.png",
        ⵠΔΔⲆⵠ: "img/back-button-out.png",
        ᐃΔᐃᐃⲆ: "img/back-button-in.png",
        ΔΔᐃᐃⲆ: "img/back-button-click.png",
        ᐃᐃᐃΔΔⲆΔ: "img/get-more-button-out.png",
        ⲆᐃᐃΔⵠΔⲆ: "img/get-more-button-in.png",
        ⲆᐃⵠⲆⵠΔⵠ: "img/get-more-button-click.png",
        ⲆΔᐃᐃᐃⵠⵠ: "img/currency1-out.png",
        ⵠⵠᐃᐃᐃᐃΔ: "img/currency1-in.png",
        ΔⵠⲆΔΔⵠⵠ: "img/currency1-click.png",
        ᐃⲆⵠⲆⲆΔᐃ: "img/currency2-out.png",
        ΔⲆᐃⵠᐃⵠⵠ: "img/currency2-in.png",
        ⲆᐃⵠⲆⵠⵠᐃ: "img/currency2-click.png",
        ⵠⵠᐃⵠᐃⲆΔ: "img/currency3-out.png",
        ΔⵠΔᐃⵠΔⵠ: "img/currency3-in.png",
        ⵠΔⲆⲆⲆⵠⵠ: "img/currency3-click.png",
        ᐃⵠΔΔⲆⲆΔ: "img/currency4-out.png",
        ᐃⲆⵠᐃⵠΔⲆ: "img/currency4-in.png",
        ⵠⲆᐃᐃⲆⵠᐃ: "img/currency4-click.png",
        ⵠᐃΔᐃⲆΔⲆ: "img/currency5-out.png",
        ⲆⲆᐃΔⲆΔΔ: "img/currency5-in.png",
        ⵠᐃⲆⲆᐃᐃᐃ: "img/currency5-click.png",
        ⲆⵠⵠΔⲆᐃⵠ: "img/price1-out.png",
        ᐃΔᐃⵠΔⵠᐃ: "img/price1-in.png",
        ⲆΔᐃᐃᐃⲆⲆ: "img/price1-click.png",
        ᐃᐃΔᐃⲆᐃΔ: "img/price2-out.png",
        Ⲇᐃⵠⵠⵠⵠⵠ: "img/price2-in.png",
        ᐃⵠⲆᐃᐃΔΔ: "img/price2-click.png",
        ⲆⵠⵠⵠⵠΔⲆ: "img/price3-out.png",
        ⲆΔⵠⵠⲆΔⲆ: "img/price3-in.png",
        ᐃⵠᐃⵠⵠΔⲆ: "img/price3-click.png",
        ⲆΔᐃⵠᐃᐃᐃ: "img/price4-out.png",
        ΔΔⵠᐃΔᐃᐃ: "img/price4-in.png",
        ᐃᐃᐃΔⲆᐃⵠ: "img/price4-click.png",
        ᐃᐃᐃⵠⲆΔΔ: "img/price5-out.png",
        ⲆⲆΔⲆⵠΔⵠ: "img/price5-in.png",
        ᐃΔᐃᐃᐃΔᐃ: "img/price5-click.png",
        ⲆᐃᐃΔⲆⵠⲆⵠⵠ: "img/buy-private-server-out.png",
        ⲆⲆⵠΔⵠⲆⵠⲆᐃ: "img/buy-private-server-in.png",
        ᐃΔⵠΔΔᐃⵠᐃΔ: "img/buy-private-server-click.png",
        ⵠᐃⲆⵠΔⲆΔ: "img/atlanta-button-out.png",
        ⲆᐃⲆᐃⲆᐃΔ: "img/atlanta-button-in.png",
        ᐃⵠΔᐃⵠΔⵠ: "img/atlanta-button-click.png",
        ΔᐃⲆᐃⲆⲆᐃ: "img/los-angeles-button-out.png",
        ᐃⵠⵠⵠΔΔΔ: "img/los-angeles-button-in.png",
        ⵠᐃΔⵠⵠⲆⲆ: "img/los-angeles-button-click.png",
        ⲆᐃΔΔⲆᐃΔ: "img/sydney-button-out.png",
        ⵠΔⲆΔⵠΔΔ: "img/sydney-button-in.png",
        ΔⲆⲆΔᐃΔⵠ: "img/sydney-button-click.png",
        ⲆᐃⵠⵠⵠⵠⲆ: "img/frankfurt-button-out.png",
        ᐃᐃΔⵠⲆᐃΔ: "img/frankfurt-button-in.png",
        ⲆⲆΔΔΔⲆⲆ: "img/frankfurt-button-click.png",
        ΔΔᐃⲆⵠᐃⲆ: "img/osaka-button-out.png",
        ᐃⲆΔΔⵠΔΔ: "img/osaka-button-in.png",
        ⲆⵠᐃΔⲆᐃᐃ: "img/osaka-button-click.png",
        ᐃᐃᐃΔᐃΔᐃᐃΔ: "img/yes-location-out.png",
        ΔⲆΔⵠⲆⲆΔΔᐃ: "img/yes-location-in.png",
        ⲆⵠΔⵠⲆⵠⵠⲆΔ: "img/yes-location-click.png",
        ΔⲆⵠⲆⲆⵠⲆ: "img/3days-button-out.png",
        ΔᐃᐃΔⵠⲆⵠ: "img/3days-button-in.png",
        ᐃΔΔΔᐃΔΔ: "img/3days-button-click.png",
        ⲆᐃⵠΔΔⵠⲆ: "img/7days-button-out.png",
        ᐃⵠⲆⲆⵠᐃⲆ: "img/7days-button-in.png",
        ⲆΔⲆᐃⲆⲆΔ: "img/7days-button-click.png",
        ᐃⵠᐃⵠΔᐃΔ: "img/30days-button-out.png",
        ᐃⲆᐃΔᐃᐃⲆ: "img/30days-button-in.png",
        ⵠΔⵠⲆⲆⵠⲆ: "img/30days-button-click.png",
        ⵠΔⵠⲆⲆⲆΔ: "img/90days-button-out.png",
        ᐃᐃⵠΔΔⲆⵠ: "img/90days-button-in.png",
        ⲆΔⲆΔᐃⲆᐃ: "img/90days-button-click.png",
        ⵠⲆⲆⵠⵠⲆᐃ: "img/spin1.png",
        ΔⲆᐃΔΔᐃΔ: "img/spin2.png",
        ᐃΔΔⵠⵠⲆⵠ: "img/spin3.png",
        ᐃΔⵠⵠⵠΔⵠ: "img/spin4.png",
        ᐃᐃΔΔᐃⲆⲆ: "img/spin5.png",
        ⲆⵠⵠᐃⲆⲆⲆ: "img/spin6.png",
        ⵠⵠᐃᐃΔΔⵠ: "img/arrow-spin.png",
        ΔᐃΔᐃⵠⲆᐃ: "img/spin-button-1-out.png",
        ΔᐃΔⵠΔⵠᐃ: "img/spin-button-1-in.png",
        ⲆΔⲆΔⲆⲆᐃ: "img/spin-button-1-click.png",
        ΔΔⲆᐃΔᐃⲆ: "img/spin-button-2-out.png",
        ΔΔⲆⲆᐃⵠΔ: "img/spin-button-2-in.png",
        ⲆⲆΔΔᐃⲆⵠ: "img/spin-button-2-click.png",
        Ⲇⵠᐃⵠⵠᐃᐃ: "img/spin-button-3-out.png",
        ⲆᐃΔⵠᐃⵠᐃ: "img/spin-button-3-in.png",
        ᐃΔⵠⲆⲆᐃᐃ: "img/spin-button-3-click.png",
        ᐃⲆⵠⵠⲆᐃⲆ: "img/spin-button-4-out.png",
        ⲆⲆⵠⵠⲆᐃⲆ: "img/spin-button-4-in.png",
        ᐃⲆΔⲆⵠᐃᐃ: "img/spin-button-4-click.png",
        ⵠᐃⵠⵠᐃΔΔ: "img/spin-button-5-out.png",
        ⲆⵠΔⵠΔⵠᐃ: "img/spin-button-5-in.png",
        ΔΔΔᐃⲆᐃΔ: "img/spin-button-5-click.png",
        ΔΔΔΔΔⲆΔ: "img/spin-light.png",
        ᐃΔΔΔⵠᐃⲆ: "img/tuto-wiki-out.png",
        ΔΔΔᐃᐃⲆⵠ: "img/tuto-wiki-in.png",
        ΔⵠΔⲆΔΔⵠ: "img/tuto-wiki-click.png",
        ᐃΔᐃⲆΔⲆΔ: "img/tuto-previous-out.png",
        ΔⵠᐃⲆΔΔⲆ: "img/tuto-previous-in.png",
        ⵠⲆᐃⵠⵠⵠΔ: "img/tuto-previous-click.png",
        ᐃΔΔᐃⵠᐃΔ: "img/tuto-next-out.png",
        ᐃⲆᐃΔⲆⵠⲆ: "img/tuto-next-in.png",
        ᐃΔΔᐃⵠⵠΔ: "img/tuto-next-click.png",
        ΔⵠⲆⲆΔΔᐃ: "img/time-leaderboard-out.png",
        ⲆⲆⲆⲆⲆΔⵠ: "img/time-leaderboard-in.png",
        ΔΔΔᐃⲆⲆΔ: "img/time-leaderboard-click.png",
        ᐃᐃΔΔΔΔⵠ: "img/score-leaderboard-out.png",
        ΔΔᐃᐃⵠⲆⵠ: "img/score-leaderboard-in.png",
        ᐃΔⵠⵠⲆᐃᐃ: "img/score-leaderboard-click.png",
        ⲆⵠⵠⲆᐃᐃⲆ: "img/lvl-leaderboard-out.png",
        ΔⵠΔᐃΔⲆᐃ: "img/lvl-leaderboard-in.png",
        ⲆⵠᐃⲆⵠⵠΔ: "img/lvl-leaderboard-click.png",
        ⵠⲆⲆΔⵠⲆΔ: "img/kill-leaderboard-out.png",
        ⵠⵠᐃᐃⵠΔⵠ: "img/kill-leaderboard-in.png",
        ⵠΔΔⲆⵠⵠᐃ: "img/kill-leaderboard-click.png",
        ΔⵠⲆⲆᐃΔᐃ: "img/all-leaderboard-out.png",
        ΔⵠⲆⲆⲆⲆΔ: "img/all-leaderboard-in.png",
        ΔᐃⲆΔⵠⵠΔ: "img/all-leaderboard-click.png",
        ᐃᐃⲆⵠⲆᐃΔ: "img/today-leaderboard-out.png",
        ⲆⲆΔⲆᐃᐃΔ: "img/today-leaderboard-in.png",
        ⲆⵠⲆⵠⲆⵠΔ: "img/today-leaderboard-click.png",
        ⲆⲆⲆᐃΔⵠⵠ: "img/week-leaderboard-out.png",
        ⵠⵠⲆΔⲆΔⲆ: "img/week-leaderboard-in.png",
        ΔⲆⵠⲆⵠⵠᐃ: "img/week-leaderboard-click.png",
        ⲆⵠᐃᐃⲆΔᐃ: "img/season1-out.png",
        ⵠⲆᐃⲆᐃᐃΔ: "img/season1-in.png",
        ΔⲆⵠΔᐃⵠⲆ: "img/season1-click.png",
        ΔⲆⵠⵠⲆⵠᐃ: "img/season2-out.png",
        ⲆᐃⲆⵠᐃΔΔ: "img/season2-in.png",
        ⲆⵠⲆⲆⲆΔⲆ: "img/season2-click.png",
        ᐃⵠΔᐃⵠⵠᐃ: "img/season3-out.png",
        ⲆⵠⲆΔⵠⵠΔ: "img/season3-in.png",
        ⵠⲆⵠΔΔⲆΔ: "img/season3-click.png",
        ⲆⵠΔΔΔⲆᐃ: "img/season4-out.png",
        ΔⵠΔⲆⲆⵠⵠ: "img/season4-in.png",
        ΔΔΔᐃⲆⵠᐃ: "img/season4-click.png",
        ⲆⲆⵠⵠⵠΔⵠ: "img/season5-out.png",
        ΔΔᐃΔΔᐃΔ: "img/season5-in.png",
        ⲆⵠΔⵠΔΔΔ: "img/season5-click.png",
        ᐃⲆᐃⲆᐃΔⲆ: "img/season6-out.png",
        ⲆⲆⵠᐃⲆᐃΔ: "img/season6-in.png",
        ᐃΔⲆⲆᐃᐃⲆ: "img/season6-click.png",
        ⲆⲆΔΔⵠΔΔ: "img/total-lead-out.png",
        ᐃⵠⵠΔⲆΔⵠ: "img/total-lead-in.png",
        ᐃΔᐃᐃΔᐃⵠ: "img/total-lead-click.png",
        ⵠΔⲆⵠᐃᐃΔ: "img/normal-lead-out.png",
        ᐃΔΔᐃᐃⲆᐃ: "img/normal-lead-in.png",
        ⲆᐃⵠⲆⲆᐃⵠ: "img/normal-lead-click.png",
        ᐃⵠᐃΔΔⲆΔ: "img/forest-lead-out.png",
        ΔⲆⵠⲆⲆΔΔ: "img/forest-lead-in.png",
        ⲆⲆⵠᐃⵠⵠⲆ: "img/forest-lead-click.png",
        ᐃⵠᐃΔⲆⵠΔ: "img/vampire-lead-out.png",
        ᐃⵠⲆⲆⲆΔⵠ: "img/vampire-lead-in.png",
        ⲆᐃΔΔᐃⲆᐃ: "img/vampire-lead-click.png",
        ⲆΔⲆⵠΔᐃⲆ: "img/zombie-lead-out.png",
        ⵠΔΔΔⲆⵠΔ: "img/zombie-lead-in.png",
        ⵠⵠᐃⵠⲆⲆΔ: "img/zombie-lead-click.png",
        ⲆⲆΔⲆⵠⵠⲆ: "img/day-level5.png",
        ΔⲆᐃᐃⲆΔᐃ: "img/night-level5.png",
        ᐃⵠΔᐃⵠᐃⲆ: "img/day-level10.png",
        ᐃⲆⵠΔⵠⲆⵠ: "img/night-level10.png",
        ΔⲆⵠⵠⵠⵠΔ: "img/day-level15.png",
        ⲆΔΔⲆⲆᐃᐃ: "img/night-level15.png",
        Ⲇᐃⵠⵠⵠⵠᐃ: "img/day-level20.png",
        ⵠᐃⵠⲆⵠΔΔ: "img/night-level20.png",
        ΔᐃᐃΔΔΔⲆ: "img/day-level25.png",
        ΔᐃΔᐃⲆΔⲆ: "img/night-level25.png",
        ᐃⵠΔⵠⵠⵠᐃ: "img/day-level30.png",
        ΔΔΔⵠᐃΔⵠ: "img/night-level30.png",
        ⲆΔⵠⲆᐃⲆᐃ: "img/day-level35.png",
        ⵠⵠᐃⲆΔᐃⵠ: "img/night-level35.png",
        ΔᐃΔᐃΔᐃⵠ: "img/day-level40.png",
        ΔᐃⲆⵠⲆᐃΔ: "img/night-level40.png",
        ⲆⲆΔΔⲆⲆⵠ: "img/day-level45.png",
        ΔᐃΔⲆΔΔⵠ: "img/night-level45.png",
        ⵠⲆⲆⵠⲆᐃⵠ: "img/day-level50.png",
        ⵠΔⲆᐃΔᐃⲆ: "img/night-level50.png",
        ΔᐃᐃᐃⵠᐃⲆ: "img/day-level55.png",
        ᐃᐃⲆⵠⵠⲆᐃ: "img/night-level55.png",
        ΔᐃⲆⵠᐃΔⲆ: "img/day-level60.png",
        ΔⲆⵠⵠᐃᐃᐃ: "img/night-level60.png",
        ⲆⲆⲆᐃᐃⲆⵠ: "img/day-skin-devast0.png",
        ᐃΔᐃⲆⲆⲆⵠ: "img/night-skin-devast0.png",
        ΔΔⲆᐃⵠⵠΔ: "img/day-hand-devaster.png",
        ⵠᐃⲆⲆΔΔⵠ: "img/night-hand-devaster.png",
        ⵠΔⲆⲆⲆⲆΔ: "img/day-skin-star0.png",
        ᐃᐃⲆⵠⵠⲆΔ: "img/night-skin-star0.png",
        ⲆⵠⲆᐃⲆΔⵠ: "img/day-hand-star0.png",
        ᐃⵠⲆΔⵠⲆⵠ: "img/night-hand-star0.png",
        ᐃᐃⵠⲆΔⲆᐃ: "img/day-vampire.png",
        Ⲇⵠⵠᐃⵠᐃⵠ: "img/night-vampire.png",
        ⲆⵠⲆΔⵠᐃΔ: "img/day-hand-vampire.png",
        ᐃⵠΔⵠⵠᐃⲆ: "img/night-hand-vampire.png",
        ⵠⲆΔⵠⵠᐃΔ: "img/day-zombie.png",
        ⵠᐃⲆⵠⲆⵠⵠ: "img/night-zombie.png",
        ΔᐃᐃⵠⲆⵠΔ: "img/day-hand-zombie.png",
        ΔⵠⲆⵠΔⵠᐃ: "img/night-hand-zombie.png",
        ᐃΔⲆΔΔⲆⵠ: "img/day-skin113.png",
        ⵠΔⲆⵠⲆⵠΔ: "img/night-skin113.png",
        ᐃΔΔᐃᐃⲆⵠ: "img/day-hand-skin113.png",
        ⲆᐃⲆⲆΔⲆⲆ: "img/night-hand-skin113.png",
        ᐃⲆⲆⲆᐃᐃⲆ: "img/day-skin0.png",
        ΔΔⲆⲆⵠᐃⵠ: "img/night-skin0.png",
        ᐃᐃΔⵠΔᐃᐃ: "img/day-skin1.png",
        ⵠᐃⵠᐃΔΔⲆ: "img/night-skin1.png",
        ᐃⵠⵠⲆⵠⲆⵠ: "img/day-skin2.png",
        ⲆⵠᐃΔⵠⲆⵠ: "img/night-skin2.png",
        ⲆΔΔⵠΔⵠⲆ: "img/day-skin3.png",
        ΔΔᐃᐃⲆⵠⲆ: "img/night-skin3.png",
        ᐃᐃⲆΔΔⵠΔ: "img/day-skin4.png",
        ᐃⵠⲆⵠΔⲆⲆ: "img/night-skin4.png",
        ΔⲆⲆⵠΔᐃᐃ: "img/day-skin5.png",
        ⲆᐃⲆⵠᐃΔᐃ: "img/night-skin5.png",
        ΔΔⲆΔⵠΔⵠ: "img/day-skin6.png",
        ⲆⲆΔΔⵠⵠΔ: "img/night-skin6.png",
        ⲆⲆⲆⲆᐃⵠⲆ: "img/day-skin7.png",
        ⵠⵠⲆⵠΔᐃⲆ: "img/night-skin7.png",
        ΔΔΔΔⲆᐃⵠ: "img/day-skin8.png",
        ΔⲆΔⲆᐃⵠΔ: "img/night-skin8.png",
        ΔⲆⵠⲆⵠⲆᐃ: "img/day-skin9.png",
        ΔⲆᐃⲆⵠᐃⲆ: "img/night-skin9.png",
        ᐃⵠⲆⵠⵠⲆΔ: "img/day-skin10.png",
        ⵠⲆⵠΔᐃⲆⵠ: "img/night-skin10.png",
        ΔⲆΔᐃᐃᐃⲆ: "img/day-skin11.png",
        ⵠᐃⲆⲆΔⲆΔ: "img/night-skin11.png",
        ⵠᐃⵠΔⵠⲆΔ: "img/day-skin12.png",
        ΔⲆΔΔⲆΔᐃ: "img/night-skin12.png",
        ΔᐃΔⲆᐃⲆᐃ: "img/day-skin13.png",
        ⵠΔᐃᐃᐃᐃⲆ: "img/night-skin13.png",
        ᐃΔΔᐃᐃΔᐃ: "img/day-skin14.png",
        ⵠᐃᐃᐃΔΔⲆ: "img/night-skin14.png",
        ΔⲆⵠⲆⲆⲆᐃ: "img/day-skin15.png",
        ᐃⵠΔⲆⵠⲆⲆ: "img/night-skin15.png",
        ⲆⲆΔⲆΔΔᐃ: "img/day-skin16.png",
        ⲆⵠⲆᐃΔⲆᐃ: "img/night-skin16.png",
        ⲆᐃᐃᐃⵠΔΔ: "img/day-skin17.png",
        ⵠⵠⵠⵠⵠⲆⵠ: "img/night-skin17.png",
        ⵠΔⵠⵠᐃΔⲆ: "img/day-skin18.png",
        ΔΔⲆⵠᐃⵠΔ: "img/night-skin18.png",
        ⵠⲆⲆⲆⵠΔⲆ: "img/day-skin19.png",
        ΔⵠᐃⲆⲆΔⵠ: "img/night-skin19.png",
        ᐃᐃΔᐃⵠᐃΔ: "img/day-skin20.png",
        ΔᐃⲆᐃᐃᐃΔ: "img/night-skin20.png",
        ⲆⲆⲆΔⵠᐃΔ: "img/day-skin21.png",
        ⵠΔΔⲆⵠΔΔ: "img/night-skin21.png",
        ⲆᐃΔⲆᐃⵠⲆ: "img/day-skin22.png",
        ⵠⲆᐃᐃᐃⲆᐃ: "img/night-skin22.png",
        ΔΔⲆᐃΔΔⵠ: "img/day-skin23.png",
        ⵠⲆⵠᐃΔΔⲆ: "img/night-skin23.png",
        ⲆⲆΔΔΔᐃⵠ: "img/day-skin24.png",
        ⲆⵠⲆᐃᐃⲆΔ: "img/night-skin24.png",
        ᐃᐃⵠⵠᐃᐃΔ: "img/day-skin25.png",
        ᐃⵠⲆΔᐃⵠΔ: "img/night-skin25.png",
        ᐃⲆᐃᐃΔΔΔ: "img/day-skin26.png",
        ΔⲆᐃⵠΔⲆⲆ: "img/night-skin26.png",
        ΔⵠⵠᐃΔᐃⲆ: "img/day-skin27.png",
        ⵠⵠΔᐃⵠᐃΔ: "img/night-skin27.png",
        ΔⲆⲆΔᐃΔⲆ: "img/day-skin28.png",
        ⵠΔⵠΔΔᐃⲆ: "img/night-skin28.png",
        ΔⲆⲆΔΔᐃΔ: "img/day-skin29.png",
        ⲆΔᐃⵠⲆΔΔ: "img/night-skin29.png",
        ΔΔᐃⵠᐃΔᐃ: "img/day-skin30.png",
        ΔΔⲆᐃⵠᐃⵠ: "img/night-skin30.png",
        ⲆΔⲆΔᐃᐃⲆ: "img/day-skin31.png",
        ⲆΔⵠᐃⲆⲆⲆ: "img/night-skin31.png",
        ⵠⵠⵠⵠⵠᐃⵠ: "img/day-skin32.png",
        ⵠⵠⵠⲆΔᐃⲆ: "img/night-skin32.png",
        ΔⲆΔᐃΔⲆⵠ: "img/day-skin33.png",
        ⵠⵠᐃⲆᐃᐃΔ: "img/night-skin33.png",
        ⲆᐃΔᐃⲆⵠⲆ: "img/day-skin34.png",
        ⵠᐃΔⲆᐃⵠⵠ: "img/night-skin34.png",
        ᐃᐃΔⲆᐃⵠⵠ: "img/day-skin35.png",
        ⲆⲆⲆᐃᐃᐃᐃ: "img/night-skin35.png",
        ⲆᐃᐃΔⲆᐃᐃ: "img/day-skin36.png",
        ᐃⲆⵠΔᐃᐃᐃ: "img/night-skin36.png",
        ΔⵠⵠΔⲆⵠⲆ: "img/day-skin37.png",
        ᐃⵠᐃΔΔⲆⵠ: "img/night-skin37.png",
        ΔᐃΔΔⲆᐃΔ: "img/day-skin38.png",
        ᐃⵠⲆⲆⵠᐃⵠ: "img/night-skin38.png",
        ᐃⲆⲆⵠΔΔΔ: "img/day-skin39.png",
        Δᐃᐃⵠⵠⵠⵠ: "img/night-skin39.png",
        ΔⵠΔΔⵠⵠⲆ: "img/day-skin40.png",
        ΔᐃΔⵠⲆⵠΔ: "img/night-skin40.png",
        ⵠⵠⵠΔⲆⵠⲆ: "img/day-skin41.png",
        ΔⲆᐃΔⵠΔⲆ: "img/night-skin41.png",
        ᐃⲆⲆᐃΔΔⲆ: "img/day-skin42.png",
        ΔⲆΔⲆⲆⲆⵠ: "img/night-skin42.png",
        ΔᐃΔᐃⵠΔΔ: "img/day-skin43.png",
        ΔⵠᐃΔⵠⲆᐃ: "img/night-skin43.png",
        ΔⵠᐃᐃⵠΔⲆ: "img/day-skin44.png",
        ΔᐃⲆΔᐃᐃᐃ: "img/night-skin44.png",
        ⵠⵠΔⵠᐃⲆΔ: "img/day-skin45.png",
        ⲆⲆᐃⵠᐃΔᐃ: "img/night-skin45.png",
        ⵠΔⵠⲆᐃᐃⲆ: "img/day-skin46.png",
        ΔⵠᐃΔⵠⵠᐃ: "img/night-skin46.png",
        ΔᐃⵠᐃⲆᐃᐃ: "img/day-skin47.png",
        ΔⲆᐃᐃᐃᐃⵠ: "img/night-skin47.png",
        ᐃⵠΔⲆⲆΔΔ: "img/day-skin48.png",
        ⵠⲆⲆᐃᐃΔΔ: "img/night-skin48.png",
        ΔᐃᐃΔⲆⲆᐃ: "img/day-skin49.png",
        ⵠⵠᐃᐃΔⲆⵠ: "img/night-skin49.png",
        ⵠⵠⲆᐃΔⵠΔ: "img/day-skin50.png",
        ⲆΔΔⲆⵠⵠⵠ: "img/night-skin50.png",
        ΔᐃᐃⲆΔᐃⲆ: "img/day-skin51.png",
        ⵠⲆᐃΔΔᐃΔ: "img/night-skin51.png",
        ΔⵠⵠᐃⲆⲆⲆ: "img/day-skin52.png",
        ⵠᐃᐃⲆΔᐃⵠ: "img/night-skin52.png",
        ⵠⵠᐃⲆⲆⲆΔ: "img/day-skin53.png",
        ΔⲆΔΔⲆⵠᐃ: "img/night-skin53.png",
        ᐃᐃΔΔⲆⲆᐃ: "img/day-skin54.png",
        ⲆᐃΔᐃⲆΔΔ: "img/night-skin54.png",
        ⲆᐃΔⲆᐃⲆΔ: "img/day-skin55.png",
        ΔⲆΔⵠⲆΔᐃ: "img/night-skin55.png",
        ΔⵠΔΔⵠᐃΔ: "img/day-skin56.png",
        ⵠᐃⲆⲆΔⵠⲆ: "img/night-skin56.png",
        ⲆⵠⵠⵠΔΔᐃ: "img/day-skin57.png",
        ⵠⲆⵠᐃⲆⲆᐃ: "img/night-skin57.png",
        ⲆΔⲆⵠΔⵠⵠ: "img/day-skin58.png",
        ⵠᐃⵠⲆΔᐃᐃ: "img/night-skin58.png",
        ⲆᐃΔΔΔⲆΔ: "img/day-skin59.png",
        ⵠⵠΔⵠᐃⲆⲆ: "img/night-skin59.png",
        ᐃΔⵠᐃⵠᐃⲆ: "img/day-skin60.png",
        ᐃΔⲆⵠⲆΔΔ: "img/night-skin60.png",
        ᐃⵠᐃⲆΔⲆⵠ: "img/day-skin61.png",
        ⵠⵠᐃΔⲆΔⵠ: "img/night-skin61.png",
        ΔΔⲆΔᐃⵠⵠ: "img/day-skin62.png",
        ⲆΔΔΔⲆΔᐃ: "img/night-skin62.png",
        ᐃⵠΔΔΔⲆⵠ: "img/day-skin63.png",
        ⵠⵠᐃⵠⲆⲆᐃ: "img/night-skin63.png",
        ⵠⲆΔⲆΔΔᐃ: "img/day-skin64.png",
        ᐃᐃΔⲆΔΔΔ: "img/night-skin64.png",
        ⵠⲆⵠⵠⲆⵠⵠ: "img/day-skin65.png",
        ΔⵠⲆⵠΔᐃⲆ: "img/night-skin65.png",
        ⵠⵠⲆΔᐃⵠⲆ: "img/day-skin66.png",
        ᐃⲆⵠΔΔᐃᐃ: "img/night-skin66.png",
        ΔⵠⲆⲆⲆⵠᐃ: "img/day-skin67.png",
        ᐃⵠⲆᐃⵠΔⵠ: "img/night-skin67.png",
        ⲆⲆⵠΔⵠⲆⲆ: "img/day-skin68.png",
        ⲆᐃⵠΔᐃΔⲆ: "img/night-skin68.png",
        ⵠⲆΔⲆⵠⵠⵠ: "img/day-skin69.png",
        ΔΔⵠⵠⵠΔΔ: "img/night-skin69.png",
        ᐃΔᐃᐃⲆᐃΔ: "img/day-skin70.png",
        ΔⵠΔⵠᐃΔⲆ: "img/night-skin70.png",
        ΔⵠΔⲆⲆⵠⲆ: "img/day-skin71.png",
        ⲆⵠⵠᐃΔΔⵠ: "img/night-skin71.png",
        ᐃΔΔΔᐃᐃᐃ: "img/day-skin72.png",
        ⵠᐃΔᐃⵠⲆⲆ: "img/night-skin72.png",
        ᐃⵠⲆⵠΔⲆΔ: "img/day-skin73.png",
        ⵠⲆΔΔᐃⲆⵠ: "img/night-skin73.png",
        ⲆⲆⵠⵠⲆⵠᐃ: "img/day-skin74.png",
        ΔⲆⵠⵠᐃⲆΔ: "img/night-skin74.png",
        ΔⵠΔⵠΔᐃⵠ: "img/day-skin75.png",
        ᐃⵠⲆⵠᐃⲆᐃ: "img/night-skin75.png",
        ΔⲆⲆⵠⵠΔⲆ: "img/day-skin76.png",
        ⲆⲆⲆΔΔⵠⲆ: "img/night-skin76.png",
        ΔⲆⵠⲆᐃⲆⲆ: "img/day-skin77.png",
        ⵠⵠⵠΔⵠᐃᐃ: "img/night-skin77.png",
        ᐃᐃΔᐃΔΔⵠ: "img/day-skin78.png",
        ⲆᐃΔⵠᐃΔⵠ: "img/night-skin78.png",
        ᐃᐃⲆⵠⵠⵠᐃ: "img/day-skin79.png",
        ⵠΔⵠⲆⲆΔᐃ: "img/night-skin79.png",
        ⵠᐃΔⵠΔᐃΔ: "img/day-skin80.png",
        ⲆΔΔΔᐃⲆⲆ: "img/night-skin80.png",
        ⵠⲆⲆⵠⵠᐃⲆ: "img/day-skin81.png",
        ᐃⲆⲆᐃⲆᐃΔ: "img/night-skin81.png",
        ᐃⲆⵠᐃⲆᐃᐃ: "img/day-skin82.png",
        ΔⵠᐃⵠᐃⲆⵠ: "img/night-skin82.png",
        ⲆⲆΔΔΔⵠⵠ: "img/day-skin83.png",
        ΔⲆⲆᐃᐃᐃⵠ: "img/night-skin83.png",
        ΔⵠᐃⲆᐃΔΔ: "img/day-skin84.png",
        ΔⲆΔᐃΔⲆᐃ: "img/night-skin84.png",
        ᐃΔⲆⲆⵠΔᐃ: "img/day-skin85.png",
        ᐃΔⲆⲆΔⲆⵠ: "img/night-skin85.png",
        ⲆΔⵠⲆᐃᐃⵠ: "img/day-skin86.png",
        ΔΔⲆᐃⲆΔⵠ: "img/night-skin86.png",
        ⲆΔⲆⲆⲆⵠⲆ: "img/day-skin87.png",
        ⵠΔΔᐃᐃᐃⲆ: "img/night-skin87.png",
        ⵠᐃΔⲆⵠⲆⲆ: "img/day-skin88.png",
        ⲆᐃΔⲆⲆΔⵠ: "img/night-skin88.png",
        ΔΔⲆΔᐃⲆⵠ: "img/day-skin89.png",
        ᐃΔⲆⵠΔⵠΔ: "img/night-skin89.png",
        ᐃΔⲆΔⲆⵠΔ: "img/day-skin90.png",
        ΔⵠⲆⲆᐃΔⵠ: "img/night-skin90.png",
        ΔⲆΔⵠⲆΔⲆ: "img/day-skin91.png",
        ⵠⵠᐃᐃᐃⲆᐃ: "img/night-skin91.png",
        ⲆⵠⵠᐃΔⲆⲆ: "img/day-skin92.png",
        ᐃᐃⵠᐃⵠⲆᐃ: "img/night-skin92.png",
        ᐃΔᐃⲆᐃⲆᐃ: "img/day-skin93.png",
        ⲆᐃⵠΔΔⲆᐃ: "img/night-skin93.png",
        ⵠᐃᐃᐃΔⲆⲆ: "img/day-skin94.png",
        ΔᐃⲆⲆⲆΔⲆ: "img/night-skin94.png",
        ΔΔᐃΔᐃᐃⲆ: "img/day-skin95.png",
        ᐃⵠⵠΔⵠⵠᐃ: "img/night-skin95.png",
        ⲆΔᐃᐃⵠΔⵠ: "img/day-skin96.png",
        ⵠᐃⲆᐃᐃⵠᐃ: "img/night-skin96.png",
        ᐃⵠⲆΔᐃᐃᐃ: "img/day-skin97.png",
        ΔⵠΔΔᐃⲆᐃ: "img/night-skin97.png",
        ⲆⲆⵠΔⵠᐃⵠ: "img/day-skin98.png",
        ᐃᐃΔᐃⵠⲆΔ: "img/night-skin98.png",
        ⵠⲆᐃⵠΔΔⲆ: "img/day-skin99.png",
        ⲆᐃΔᐃᐃⲆⲆ: "img/night-skin99.png",
        ⵠⵠⵠΔΔᐃⲆ: "img/day-skin100.png",
        ⲆⵠΔⵠⲆΔⵠ: "img/night-skin100.png",
        ⲆᐃⲆᐃΔⵠᐃ: "img/day-skin101.png",
        ΔⲆᐃⲆⵠΔⵠ: "img/night-skin101.png",
        ᐃⲆⲆΔΔᐃΔ: "img/day-skin102.png",
        ᐃΔⲆⵠᐃᐃΔ: "img/night-skin102.png",
        ⲆᐃΔᐃⲆΔⵠ: "img/day-skin103.png",
        ⲆΔⵠⲆΔΔⵠ: "img/night-skin103.png",
        ⲆᐃΔᐃⲆⵠⵠ: "img/day-skin104.png",
        ⲆΔᐃⵠⵠΔⵠ: "img/night-skin104.png",
        ⲆⲆΔⲆⵠΔΔ: "img/day-skin105.png",
        ⵠⵠⵠΔᐃⵠΔ: "img/night-skin105.png",
        ⵠⵠΔⲆΔᐃΔ: "img/day-skin106.png",
        ᐃⲆΔΔΔⵠⲆ: "img/night-skin106.png",
        ΔⲆᐃⲆΔⲆᐃ: "img/day-skin107.png",
        ⵠⵠΔⲆᐃⲆⵠ: "img/night-skin107.png",
        ⵠⲆᐃⲆΔⲆⲆ: "img/day-skin108.png",
        ⵠⲆⵠᐃᐃᐃΔ: "img/night-skin108.png",
        ⲆᐃⵠⵠⲆᐃΔ: "img/day-skin109.png",
        ⵠᐃΔⵠⲆᐃᐃ: "img/night-skin109.png",
        ΔⲆⲆⵠⵠⲆΔ: "img/day-skin110.png",
        ⵠⲆⲆⲆⵠⲆⲆ: "img/night-skin110.png",
        ⵠΔⵠⵠᐃⲆᐃ: "img/day-skin111.png",
        ⵠⵠΔⲆⲆⵠΔ: "img/night-skin111.png",
        ⲆᐃΔᐃΔᐃᐃ: "img/day-skin112.png",
        ᐃᐃΔΔⲆⵠⲆ: "img/night-skin112.png",
        ΔΔⲆᐃⵠᐃⲆΔΔ: "img/day-skin113.png",
        ᐃⵠⲆᐃΔⵠⲆΔⲆ: "img/night-skin113.png",
        ⲆⵠΔΔΔᐃⵠ: "img/day-skin114.png",
        ⲆⵠⲆᐃⵠⲆᐃ: "img/night-skin114.png",
        ᐃΔⵠΔᐃᐃᐃ: "img/day-skin115.png",
        ⲆᐃⵠⵠⲆⲆΔ: "img/night-skin115.png",
        ΔᐃᐃᐃΔⲆⵠ: "img/day-skin116.png",
        ⲆⲆⲆᐃΔΔΔ: "img/night-skin116.png",
        ⵠΔΔᐃⵠⵠⲆ: "img/day-skin117.png",
        ΔⲆᐃΔΔᐃⵠ: "img/night-skin117.png",
        ᐃⲆⲆⵠᐃᐃᐃ: "img/day-skin118.png",
        ΔⵠⲆⲆⲆⵠⵠ: "img/night-skin118.png",
        ᐃΔΔᐃⲆⵠᐃ: "img/day-skin119.png",
        ⵠᐃᐃⲆᐃΔᐃ: "img/night-skin119.png",
        ᐃΔⵠⵠⲆΔΔ: "img/day-skin120.png",
        ⵠⲆⵠⲆⲆΔⲆ: "img/night-skin120.png",
        ᐃᐃⲆΔⲆᐃΔ: "img/day-skin121.png",
        ⵠΔⲆᐃᐃᐃΔ: "img/night-skin121.png",
        ⲆⵠᐃⵠΔⵠⲆ: "img/day-skin122.png",
        ⲆⲆΔᐃⲆⲆⲆ: "img/night-skin122.png",
        ΔⵠⲆⲆⲆΔⲆ: "img/day-skin123.png",
        ⵠᐃΔᐃΔⵠⵠ: "img/night-skin123.png",
        ⵠⵠⲆΔΔⲆᐃ: "img/day-skin124.png",
        ⲆᐃⲆΔⵠⵠΔ: "img/night-skin124.png",
        ᐃⲆᐃⵠⵠⲆΔ: "img/day-skin125.png",
        ⲆΔΔⵠⲆᐃⵠ: "img/night-skin125.png",
        ⵠΔⵠᐃᐃⵠⵠ: "img/day-skin126.png",
        Ⲇᐃᐃᐃⵠᐃᐃ: "img/night-skin126.png",
        ⲆⵠΔΔᐃᐃⲆ: "img/day-skin127.png",
        ΔⲆᐃᐃᐃⵠΔ: "img/night-skin127.png",
        ΔⵠΔΔᐃᐃΔ: "img/day-skin128.png",
        ΔᐃᐃᐃᐃΔΔ: "img/night-skin128.png",
        ⵠⵠΔⲆⵠΔⲆ: "img/day-skin129.png",
        ⵠⵠᐃⵠⵠᐃᐃ: "img/night-skin129.png",
        Ⲇᐃᐃⵠⵠⵠⵠ: "img/day-skin130-1.png",
        ⲆΔᐃΔⵠⵠⲆ: "img/night-skin130-1.png",
        ⲆΔⵠⵠⵠᐃⲆ: "img/day-skin131.png",
        ᐃᐃⲆᐃᐃΔΔ: "img/night-skin131.png",
        ΔⲆⵠⵠⲆᐃᐃ: "img/day-skin132.png",
        ⲆᐃᐃΔⲆⵠᐃ: "img/night-skin132.png",
        ᐃᐃΔⲆⲆᐃⵠ: "img/day-skin133.png",
        ⲆᐃΔΔᐃΔΔ: "img/night-skin133.png",
        ⵠⵠΔⲆⵠⲆⲆ: "img/day-skin134.png",
        ΔⵠⲆᐃⲆⵠⵠ: "img/night-skin134.png",
        ΔⵠΔⲆⵠⵠΔ: "img/day-skin135.png",
        ⵠΔΔᐃⲆᐃⲆ: "img/night-skin135.png",
        ᐃⵠΔⲆⲆᐃΔ: "img/day-skin136.png",
        ΔΔⵠᐃⲆⲆⵠ: "img/night-skin136.png",
        ⲆⲆⲆⲆⲆⵠᐃ: "img/day-skin137.png",
        ⵠΔᐃⲆΔᐃᐃ: "img/night-skin137.png",
        ⵠⲆⲆⲆⲆΔΔ: "img/day-skin138.png",
        ⵠⲆᐃⵠⲆⲆΔ: "img/night-skin138.png",
        ᐃᐃᐃΔⵠⵠⵠ: "img/day-skin139.png",
        ⵠⲆᐃᐃᐃⵠᐃ: "img/night-skin139.png",
        ⲆⲆⲆⵠⲆⲆⵠ: "img/day-skin140.png",
        ⲆᐃᐃΔⵠᐃΔ: "img/night-skin140.png",
        ⲆⲆⵠⵠΔⲆⵠ: "img/day-skin141.png",
        ΔᐃⲆⲆᐃⵠᐃ: "img/night-skin141.png",
        ᐃⵠᐃⲆΔⵠⵠ: "img/day-skin142.png",
        ΔⲆⵠΔΔⲆⵠ: "img/night-skin142.png",
        ⲆⲆΔᐃᐃΔΔ: "img/day-skin143.png",
        ⲆᐃⲆⵠⲆΔⲆ: "img/night-skin143.png",
        ⵠⵠⲆΔⵠΔΔ: "img/day-skin144.png",
        ΔⵠΔⲆΔⵠⵠ: "img/night-skin144.png",
        ⲆⵠⲆⲆᐃⵠᐃ: "img/day-skin145.png",
        ΔⵠⲆⲆᐃΔⲆ: "img/night-skin145.png",
        ΔⲆⵠⲆⲆᐃⵠ: "img/day-skin146.png",
        ⲆⵠⵠⵠⲆᐃⵠ: "img/night-skin146.png",
        ⲆΔⲆΔᐃⵠΔ: "img/day-skin147.png",
        ⲆⲆΔⵠᐃᐃᐃ: "img/night-skin147.png",
        ΔⲆᐃΔΔΔⲆ: "img/day-skin148.png",
        ⲆΔᐃᐃⲆΔⲆ: "img/night-skin148.png",
        ᐃⵠⲆⵠΔⲆᐃ: "img/day-skin149.png",
        ⲆⵠΔⵠᐃΔΔ: "img/night-skin149.png",
        ⲆᐃⲆΔᐃⵠⵠ: "img/day-skin150.png",
        ⲆⲆᐃΔⵠⵠⲆ: "img/night-skin150.png",
        ᐃⵠⵠⲆᐃⵠᐃ: "img/day-skin151.png",
        ᐃⵠᐃⵠΔΔᐃ: "img/night-skin151.png",
        ᐃΔΔⲆⲆᐃΔ: "img/day-skin152.png",
        ⵠⲆΔᐃΔⵠΔ: "img/night-skin152.png",
        ΔΔΔᐃⲆⵠΔ: "img/day-skin153.png",
        ᐃⵠᐃⲆᐃΔⲆ: "img/night-skin153.png",
        ᐃⵠᐃᐃΔⵠⵠ: "img/day-skin154.png",
        ⵠⲆΔⵠⵠᐃⵠ: "img/night-skin154.png",
        ⵠΔΔᐃⵠᐃⵠ: "img/day-skin155.png",
        ΔⲆΔⵠΔΔⲆ: "img/night-skin155.png",
        ᐃΔⲆᐃⵠᐃⲆ: "img/day-skin156.png",
        ⲆΔⵠᐃᐃΔΔ: "img/night-skin156.png",
        ⵠⵠⵠᐃΔⵠⲆ: "img/day-skin157.png",
        ⵠⵠΔΔΔⲆΔ: "img/night-skin157.png",
        ⵠⵠⲆⵠΔⵠⲆ: "img/day-skin158.png",
        ⵠⲆᐃⲆⵠᐃⲆ: "img/night-skin158.png",
        ⵠᐃⲆⵠⲆⲆⵠ: "img/day-skin159.png",
        ᐃⲆⵠΔᐃᐃⵠ: "img/night-skin159.png",
        ᐃⵠΔᐃⵠⲆΔ: "img/day-skin160.png",
        Δⵠⵠⵠⵠⵠⵠ: "img/night-skin160.png",
        ᐃΔΔΔᐃᐃⵠ: "img/day-skin161.png",
        ᐃⵠᐃΔΔᐃⲆ: "img/night-skin161.png",
        ⲆⵠⵠⲆⵠᐃⲆ: "img/day-skin162.png",
        ᐃᐃᐃᐃᐃᐃΔ: "img/night-skin162.png",
        ΔᐃⲆⵠⵠΔΔ: "img/day-skin163.png",
        ⵠΔⵠΔΔΔⲆ: "img/night-skin163.png",
        ΔΔⲆⵠᐃΔⲆ: "img/day-skin164.png",
        ⲆΔΔΔΔΔΔ: "img/night-skin164.png",
        ΔⲆⵠⲆⲆⵠΔ: "img/day-skin165.png",
        ᐃᐃⲆⵠⲆᐃⵠ: "img/night-skin165.png",
        ᐃⲆΔⵠΔⲆⲆ: "img/day-skin166.png",
        ⵠⵠⲆᐃΔⲆⲆ: "img/night-skin166.png",
        ⲆᐃᐃᐃⵠⲆΔ: "img/day-skin167.png",
        ⲆⲆⵠⲆᐃΔⲆ: "img/night-skin167.png",
        ᐃᐃⵠⵠⲆᐃⵠ: "img/day-skin168.png",
        ⲆΔᐃⵠΔⲆΔ: "img/night-skin168.png",
        ⲆᐃⲆΔΔⲆⵠ: "img/day-skin169.png",
        ΔⵠⵠᐃᐃΔΔ: "img/night-skin169.png",
        ΔΔᐃⲆΔⲆⲆ: "img/day-skin170.png",
        ⲆⲆΔⵠⵠΔⵠ: "img/night-skin170.png",
        ⵠⵠΔⵠⲆΔΔ: "img/day-skin171.png",
        ΔⲆΔⲆⲆΔᐃ: "img/night-skin171.png",
        ΔᐃΔⵠᐃⵠΔ: "img/day-skin172.png",
        Δᐃⵠⵠⵠⵠᐃ: "img/night-skin172.png",
        ᐃⵠΔΔⲆⵠⲆ: "img/day-skin173.png",
        ΔᐃⲆᐃᐃᐃᐃ: "img/night-skin173.png",
        ΔᐃΔᐃⵠΔⵠ: "img/day-skin174.png",
        ΔⵠⵠⵠⲆⲆᐃ: "img/night-skin174.png",
        ΔᐃⲆⲆΔᐃⲆ: "img/day-skin175.png",
        ΔⲆⲆⲆⵠⵠⵠ: "img/night-skin175.png",
        ⵠΔⲆⲆᐃⵠⲆ: "img/day-skin176.png",
        ΔⲆⲆᐃⲆΔΔ: "img/night-skin176.png",
        ᐃⲆᐃΔΔΔΔ: "img/day-skin177.png",
        ᐃⵠⵠᐃᐃⲆᐃ: "img/night-skin177.png",
        ΔⵠᐃⲆᐃᐃⵠ: "img/day-skin178.png",
        ⵠᐃⲆⵠΔⲆⲆ: "img/night-skin178.png",
        ᐃΔⵠⲆΔΔΔ: "img/day-skin179.png",
        ⵠᐃΔⲆΔᐃᐃ: "img/night-skin179.png",
        ΔⵠᐃⲆΔⲆᐃ: "img/day-skin180.png",
        ⲆⲆⲆⵠΔⵠⲆ: "img/night-skin180.png",
        ⵠⲆⲆⵠⵠⵠⵠ: "img/day-skin181.png",
        ᐃΔⵠⵠⲆΔᐃ: "img/night-skin181.png",
        ⵠⵠᐃΔΔᐃΔ: "img/day-skin182.png",
        ΔⲆⵠᐃⲆΔⲆ: "img/night-skin182.png",
        ᐃΔⵠΔⵠᐃⵠ: "img/day-skin183.png",
        ΔⵠⲆΔⲆΔΔ: "img/night-skin183.png",
        ⲆᐃᐃⵠⵠⲆᐃ: "img/day-skin184.png",
        ⵠⲆⵠⲆᐃⲆᐃ: "img/night-skin184.png",
        ⲆⵠΔᐃΔⵠⲆ: "img/day-skin185.png",
        ᐃΔᐃΔⲆⲆⲆ: "img/night-skin185.png",
        ΔᐃΔⵠⵠΔⵠ: "img/day-skin186.png",
        ⲆⲆⵠⵠΔᐃΔ: "img/night-skin186.png",
        ⲆⲆⵠⲆⲆⵠΔ: "img/day-skin187.png",
        ⵠΔᐃⲆⵠⲆⵠ: "img/night-skin187.png",
        ⲆᐃᐃⲆⲆΔΔ: "img/day-skin188.png",
        ⲆΔᐃⵠΔΔΔ: "img/night-skin188.png",
        ΔⵠᐃⲆⵠⲆᐃ: "img/day-skin189.png",
        ⵠᐃⲆⲆⲆⲆΔ: "img/night-skin189.png",
        ΔⲆΔᐃⲆΔᐃ: "img/day-skin190.png",
        ΔⲆⵠᐃⲆᐃⲆ: "img/night-skin190.png",
        ΔⲆⲆΔΔΔᐃ: "img/day-skin191.png",
        ΔΔᐃⲆⵠⲆⲆ: "img/night-skin191.png",
        ᐃⵠᐃᐃⵠⵠᐃ: "img/day-skin192.png",
        ᐃΔΔⲆΔⵠΔ: "img/night-skin192.png",
        ⲆⲆⲆΔⵠᐃⲆ: "img/day-skin193.png",
        ⵠΔΔⵠΔΔᐃ: "img/night-skin193.png",
        ΔⲆᐃᐃΔᐃΔ: "img/day-skin194.png",
        ⵠⲆᐃᐃΔⵠᐃ: "img/night-skin194.png",
        ΔᐃⵠⵠⵠᐃⲆ: "img/day-skin195.png",
        ⵠΔⵠⲆⲆⵠΔ: "img/night-skin195.png",
        ΔᐃⲆΔⵠΔΔ: "img/day-skin196.png",
        ⵠⲆⲆⲆΔᐃⲆ: "img/night-skin196.png",
        ᐃⵠᐃⵠⵠⲆᐃ: "img/day-skin197.png",
        ⲆⵠⵠⲆⵠΔᐃ: "img/night-skin197.png",
        ⲆᐃΔΔΔⲆᐃ: "img/day-skin198.png",
        ⵠⲆΔⲆⵠⵠᐃ: "img/night-skin198.png",
        ᐃⲆⲆⵠⲆΔΔ: "img/day-skin199.png",
        ᐃΔᐃΔⲆᐃⵠ: "img/night-skin199.png",
        ⵠⲆΔⵠⵠⲆⵠ: "img/day-skin200.png",
        ΔᐃΔᐃΔΔᐃ: "img/night-skin200.png",
        ⲆᐃΔⲆΔᐃⲆ: "img/day-skin201.png",
        ᐃⲆΔⵠᐃΔᐃ: "img/night-skin201.png",
        ΔΔᐃⲆᐃⲆⵠ: "img/day-skin202.png",
        ⵠⵠⲆⲆΔⲆⲆ: "img/night-skin202.png",
        ⵠᐃⵠΔⲆⵠⵠ: "img/day-skin203.png",
        ⲆⲆᐃᐃᐃⲆⲆ: "img/night-skin203.png",
        ⵠⲆⲆᐃⲆΔⵠ: "img/day-skin204.png",
        ᐃΔⲆΔⵠⲆⵠ: "img/night-skin204.png",
        ⵠⲆⵠⲆⲆⲆⵠ: "img/day-skin205.png",
        ⵠᐃⵠⵠⵠᐃᐃ: "img/night-skin205.png",
        ⲆⵠⵠⵠΔᐃΔ: "img/day-skin206.png",
        ⵠⲆⵠⲆᐃΔᐃ: "img/night-skin206.png",
        ΔΔⵠⵠᐃᐃⵠ: "img/day-skin207.png",
        ᐃᐃᐃΔⲆⲆΔ: "img/night-skin207.png",
        ᐃΔᐃΔⵠⲆᐃ: "img/day-skin208.png",
        ⲆΔⵠΔⵠⲆⵠ: "img/night-skin208.png",
        ΔⲆⲆⵠᐃΔⵠ: "img/day-skin209.png",
        ⵠⲆⲆΔΔⲆⲆ: "img/night-skin209.png",
        ⲆΔⵠⲆΔⵠᐃ: "img/day-skin210.png",
        ΔΔⵠᐃᐃᐃⵠ: "img/night-skin210.png",
        ⲆⵠⵠΔⲆᐃΔ: "img/day-skin211.png",
        ⲆᐃⵠⵠΔᐃᐃ: "img/night-skin211.png",
        ⵠⵠⵠⵠⵠᐃΔ: "img/day-skin212.png",
        ⲆⵠⲆⵠⵠⵠΔ: "img/night-skin212.png",
        ⲆⲆⵠⲆⵠᐃᐃ: "img/day-hand-skin0.png",
        ⲆΔΔᐃⲆⲆⲆ: "img/night-hand-skin0.png",
        ᐃᐃⵠᐃᐃⵠΔ: "img/day-hand-skin1.png",
        ᐃⲆⲆᐃⵠⲆΔ: "img/night-hand-skin1.png",
        ΔⲆⵠΔⲆⵠΔ: "img/day-hand-skin2.png",
        ⲆⲆᐃⲆⵠⲆⲆ: "img/night-hand-skin2.png",
        ⲆⲆⵠⵠᐃⵠΔ: "img/day-hand-skin3.png",
        ᐃⲆⲆᐃⲆΔᐃ: "img/night-hand-skin3.png",
        ⵠⵠΔⵠΔᐃⲆ: "img/day-hand-skin4.png",
        ⲆΔⵠⲆᐃⲆⲆ: "img/night-hand-skin4.png",
        ᐃΔᐃᐃⲆΔⲆ: "img/day-hand-skin5.png",
        ⵠⲆΔΔΔⵠⲆ: "img/night-hand-skin5.png",
        ⵠᐃΔΔⲆΔⲆ: "img/day-hand-skin6.png",
        ⵠΔⵠΔⲆⵠⵠΔΔ: "img/night-hand-skin6.png",
        ΔᐃⵠΔⲆᐃΔ: "img/day-hand-skin6.png",
        ⵠⲆᐃᐃᐃᐃΔ: "img/night-hand-skin6.png",
        ΔⵠⵠⵠⵠⲆⵠ: "img/day-hand-skin8.png",
        ⲆⲆᐃΔᐃⵠᐃ: "img/night-hand-skin8.png",
        ᐃΔΔᐃᐃᐃⲆ: "img/day-hand-skin9.png",
        ᐃᐃΔⲆⵠΔⲆ: "img/night-hand-skin9.png",
        ᐃᐃⲆᐃᐃⲆΔ: "img/day-hand-skin10.png",
        ⵠⵠᐃᐃᐃⵠᐃ: "img/night-hand-skin10.png",
        ⵠⲆᐃᐃΔᐃⵠ: "img/day-hand-skin11.png",
        ᐃᐃᐃΔΔⵠᐃ: "img/night-hand-skin11.png",
        ᐃΔΔⲆⵠᐃΔ: "img/day-hand-skin12.png",
        ⲆⲆΔΔΔⵠΔ: "img/night-hand-skin12.png",
        ⲆⲆⲆᐃⲆᐃⵠ: "img/day-hand-skin13.png",
        ⲆⲆΔΔⵠⲆⲆ: "img/night-hand-skin13.png",
        ΔⵠⲆⵠⲆⵠᐃ: "img/day-hand-skin14.png",
        ⲆᐃⵠⵠᐃⲆΔ: "img/night-hand-skin14.png",
        ⵠⲆΔᐃⵠΔⲆ: "img/day-hand-skin15.png",
        ⲆⲆᐃⵠΔᐃⵠ: "img/night-hand-skin15.png",
        ΔⲆᐃᐃⲆᐃⵠ: "img/day-hand-skin16.png",
        ᐃᐃᐃⵠⵠⵠⲆ: "img/night-hand-skin16.png",
        ⵠⵠⲆᐃⲆⵠⵠ: "img/day-hand-skin17.png",
        ⲆⵠᐃΔΔⲆⵠ: "img/night-hand-skin17.png",
        ᐃᐃΔᐃΔᐃⵠ: "img/day-hand-skin18.png",
        ᐃⵠⲆⵠⵠⵠⵠ: "img/night-hand-skin18.png",
        ⲆⵠΔΔᐃᐃΔ: "img/day-hand-skin19.png",
        ⲆΔΔᐃᐃΔⲆ: "img/night-hand-skin19.png",
        ᐃᐃᐃⵠⲆⵠᐃ: "img/day-hand-skin20.png",
        ⵠΔᐃⲆⵠᐃⵠ: "img/night-hand-skin20.png",
        ⲆⵠⵠΔⵠᐃⲆ: "img/day-hand-skin21.png",
        ⲆⵠⵠⲆⲆⵠⲆ: "img/night-hand-skin21.png",
        ⲆⲆᐃⲆᐃⲆⲆ: "img/day-hand-skin22.png",
        ⵠΔⲆⲆⵠᐃᐃ: "img/night-hand-skin22.png",
        ᐃⵠΔΔⵠⵠΔ: "img/day-hand-skin23.png",
        ⵠᐃᐃⲆⵠᐃⵠ: "img/night-hand-skin23.png",
        ᐃΔΔⲆⵠⵠᐃ: "img/day-hand-skin24.png",
        ⵠΔⵠΔᐃΔᐃ: "img/night-hand-skin24.png",
        ⲆⵠΔΔⵠΔⲆ: "img/day-hand-skin25.png",
        ᐃᐃⲆⵠΔⲆⵠ: "img/night-hand-skin25.png",
        ᐃᐃⲆΔᐃⵠⲆ: "img/day-hand-skin26.png",
        ⲆⲆᐃΔΔᐃⵠ: "img/night-hand-skin26.png",
        ΔᐃⵠᐃⲆⲆⲆ: "img/day-hand-skin27.png",
        ΔΔⵠᐃⲆΔᐃ: "img/night-hand-skin27.png",
        ΔⲆⲆᐃᐃᐃⲆ: "img/day-hand-skin28.png",
        ⵠⵠᐃΔⵠⵠΔ: "img/night-hand-skin28.png",
        ΔⲆⵠᐃⵠᐃΔ: "img/day-hand-skin29.png",
        ⲆΔᐃⲆΔⵠⵠ: "img/night-hand-skin29.png",
        ᐃᐃⵠΔᐃⵠⵠ: "img/day-hand-skin30.png",
        ⲆᐃⵠΔΔᐃΔ: "img/night-hand-skin30.png",
        ⵠⵠᐃⲆᐃᐃᐃ: "img/day-hand-skin31.png",
        ΔⲆᐃⵠⲆⵠΔ: "img/night-hand-skin31.png",
        ΔΔΔᐃⲆⵠⵠ: "img/day-hand-skin32.png",
        ΔⵠΔⲆᐃⲆⲆ: "img/night-hand-skin32.png",
        ᐃᐃⵠᐃⲆΔᐃ: "img/day-hand-skin33.png",
        ⵠⵠⲆᐃⵠΔⵠ: "img/night-hand-skin33.png",
        ⲆᐃⵠᐃΔΔᐃ: "img/day-hand-skin34.png",
        ΔᐃⲆᐃⲆⲆⵠ: "img/night-hand-skin34.png",
        ⲆⲆᐃⲆⵠᐃⵠ: "img/day-hand-skin35.png",
        ⵠᐃᐃⵠⲆⲆⲆ: "img/night-hand-skin35.png",
        ⵠⲆᐃⵠⵠᐃⵠ: "img/day-hand-skin36.png",
        ᐃⲆΔⲆΔⲆΔ: "img/night-hand-skin36.png",
        ΔⵠⲆΔⵠⲆⲆ: "img/day-hand-skin37.png",
        ᐃⲆⲆᐃⲆΔⲆ: "img/night-hand-skin37.png",
        ⵠΔⵠΔᐃⲆⲆ: "img/day-hand-skin38.png",
        ᐃᐃⲆⵠᐃⵠΔ: "img/night-hand-skin38.png",
        ⵠᐃΔᐃⲆⲆⵠ: "img/day-hand-skin39.png",
        ᐃⲆⲆⲆΔᐃⵠ: "img/night-hand-skin39.png",
        ⲆⵠⵠⲆΔᐃΔ: "img/day-hand-skin40.png",
        ⵠⲆⵠᐃᐃⵠⲆ: "img/night-hand-skin40.png",
        ⲆΔᐃⲆⲆⲆⵠ: "img/day-hand-skin41.png",
        ᐃⵠΔΔⵠⲆᐃ: "img/night-hand-skin41.png",
        ⲆⲆⲆᐃᐃⵠᐃ: "img/day-hand-skin42.png",
        ⵠᐃⲆᐃⵠᐃⵠ: "img/night-hand-skin42.png",
        ᐃΔᐃᐃⵠⵠΔ: "img/day-hand-skin43.png",
        ΔᐃᐃⵠⵠᐃⲆ: "img/night-hand-skin43.png",
        ΔⲆⵠᐃΔⵠᐃ: "img/day-hand-skin16.png",
        ΔⲆᐃⲆⲆᐃΔ: "img/night-hand-skin16.png",
        ⵠΔᐃΔⲆⵠΔ: "img/day-hand-skin45.png",
        ΔⲆᐃᐃΔΔΔ: "img/night-hand-skin45.png",
        ⵠᐃⲆᐃⵠᐃᐃ: "img/day-hand-skin46.png",
        ⲆᐃⲆⵠⲆⲆᐃ: "img/night-hand-skin46.png",
        ΔⲆΔΔΔⲆⲆ: "img/day-hand-skin47.png",
        ΔⵠᐃᐃᐃΔΔ: "img/night-hand-skin47.png",
        ΔⲆⵠⲆᐃΔⵠ: "img/day-hand-skin48.png",
        ⲆΔΔⵠⲆΔΔ: "img/night-hand-skin48.png",
        ⵠⵠⵠⲆⵠᐃⲆ: "img/day-hand-skin49.png",
        ⲆⵠⵠⲆᐃⲆⵠ: "img/night-hand-skin49.png",
        ⵠᐃⲆⲆᐃⲆᐃ: "img/day-hand-skin49.png",
        ⲆᐃᐃⲆⵠΔⵠ: "img/night-hand-skin49.png",
        ⵠⵠᐃⲆⲆⲆⲆ: "img/day-hand-skin51.png",
        ΔⵠⵠᐃΔⵠⵠ: "img/night-hand-skin51.png",
        ⵠⲆΔⲆⵠⲆⲆ: "img/day-hand-skin52.png",
        ΔⵠⵠⵠⲆᐃᐃ: "img/night-hand-skin52.png",
        ⲆΔⵠΔᐃΔᐃ: "img/day-hand-skin53.png",
        ⲆⵠᐃᐃᐃΔΔ: "img/night-hand-skin53.png",
        ⵠΔⲆᐃⵠⲆΔ: "img/day-hand-skin53.png",
        ⲆⵠⵠΔⲆΔᐃ: "img/night-hand-skin53.png",
        ΔⵠᐃΔⵠⲆΔ: "img/day-hand-skin55.png",
        ⲆⵠΔⲆᐃⵠΔ: "img/night-hand-skin55.png",
        ΔᐃⲆᐃΔᐃⲆ: "img/day-hand-skin56.png",
        ⲆΔⵠΔⵠⵠᐃ: "img/night-hand-skin56.png",
        ⵠⵠᐃⵠΔⲆⲆ: "img/day-hand-skin57.png",
        ΔΔⲆⲆⲆⵠⵠ: "img/night-hand-skin57.png",
        ΔⵠᐃᐃⵠⲆΔ: "img/day-hand-skin58.png",
        ᐃⵠᐃⲆΔΔⲆ: "img/night-hand-skin58.png",
        ΔΔⲆⵠⵠⲆⵠ: "img/day-hand-skin59.png",
        ΔΔΔΔΔⲆⵠ: "img/night-hand-skin59.png",
        ᐃⵠΔᐃᐃⵠⲆ: "img/day-hand-skin61.png",
        ⲆΔΔᐃⲆΔⵠ: "img/night-hand-skin61.png",
        ⵠΔⵠΔΔΔⵠ: "img/day-hand-skin61.png",
        ΔᐃΔⲆᐃᐃΔ: "img/night-hand-skin61.png",
        ΔⲆᐃⵠᐃⵠΔ: "img/day-hand-skin62.png",
        ΔⲆᐃⲆΔⲆΔ: "img/night-hand-skin62.png",
        ΔᐃⵠⲆⲆᐃⲆ: "img/day-hand-skin63.png",
        ⵠⵠΔⲆΔᐃᐃ: "img/night-hand-skin63.png",
        ⲆⲆⵠᐃⵠⲆⲆ: "img/day-hand-skin64.png",
        ⲆⲆⵠᐃᐃΔΔ: "img/night-hand-skin64.png",
        ΔⲆΔΔⲆⵠⵠ: "img/day-hand-skin65.png",
        ΔⲆΔᐃⲆᐃⲆ: "img/night-hand-skin65.png",
        ΔⵠⲆᐃΔⵠΔ: "img/day-hand-skin66.png",
        ⲆᐃⵠⵠⲆⲆᐃ: "img/night-hand-skin66.png",
        ⲆⵠⲆᐃⵠᐃⲆ: "img/day-hand-skin67.png",
        ⲆⲆᐃⲆⲆᐃⲆ: "img/night-hand-skin67.png",
        ΔΔⵠᐃΔⵠⵠ: "img/day-hand-skin68.png",
        ᐃΔᐃᐃΔᐃΔ: "img/night-hand-skin68.png",
        ᐃΔΔᐃᐃⲆΔ: "img/day-hand-skin69.png",
        ⵠⲆᐃⵠⵠⵠⵠ: "img/night-hand-skin69.png",
        ᐃᐃⵠΔⲆΔᐃ: "img/day-hand-skin70.png",
        ⵠⲆᐃΔⲆⲆᐃ: "img/night-hand-skin70.png",
        ΔⲆᐃⲆⲆⲆⲆ: "img/day-hand-skin71.png",
        ⲆⵠᐃᐃΔⵠΔ: "img/night-hand-skin71.png",
        ⲆΔᐃᐃⲆΔᐃ: "img/day-hand-skin72.png",
        ⵠⲆΔⵠᐃᐃᐃ: "img/night-hand-skin72.png",
        ⵠᐃⲆⵠⵠΔⵠ: "img/day-hand-skin73.png",
        ΔΔᐃⲆⲆⲆᐃ: "img/night-hand-skin73.png",
        ΔⵠΔⲆΔⲆΔ: "img/day-hand-skin74.png",
        ⵠⲆⲆⵠⵠⵠⲆ: "img/night-hand-skin74.png",
        ΔⲆⲆᐃⲆⵠᐃ: "img/day-hand-skin75.png",
        ⵠⲆⵠΔⲆⵠⲆ: "img/night-hand-skin75.png",
        ᐃⵠᐃⲆᐃⵠⲆ: "img/day-hand-skin76.png",
        ⵠⵠⵠΔΔⵠⲆ: "img/night-hand-skin76.png",
        ᐃᐃᐃⲆⲆⵠΔ: "img/day-hand-skin77.png",
        ⲆⲆⲆᐃᐃΔᐃ: "img/night-hand-skin77.png",
        ⵠΔᐃᐃⲆΔⲆ: "img/day-hand-skin78.png",
        ΔᐃᐃⲆⵠⵠΔ: "img/night-hand-skin78.png",
        ᐃᐃⵠⲆΔᐃⵠ: "img/day-hand-skin79.png",
        ⵠΔᐃⲆΔⲆⵠ: "img/night-hand-skin79.png",
        ΔⲆᐃᐃΔⵠⵠ: "img/day-hand-skin80.png",
        ᐃΔⲆⲆⲆⲆⵠ: "img/night-hand-skin80.png",
        ᐃᐃᐃᐃⲆⲆᐃ: "img/day-hand-skin81.png",
        ΔΔⵠⲆΔᐃᐃ: "img/night-hand-skin81.png",
        ⵠⲆⲆΔⵠⲆⵠ: "img/day-hand-skin82.png",
        ⵠⲆⲆⲆᐃΔᐃ: "img/night-hand-skin82.png",
        ΔⵠⵠⵠᐃᐃⲆ: "img/day-hand-skin83.png",
        ΔᐃⵠⵠⵠⵠΔ: "img/night-hand-skin83.png",
        ⵠⲆΔⵠΔⵠⵠ: "img/day-hand-skin84.png",
        ᐃⲆⵠⵠΔᐃⵠ: "img/night-hand-skin84.png",
        ᐃΔᐃᐃⲆⵠⲆ: "img/day-hand-skin85.png",
        ΔⵠΔΔⵠⵠⵠ: "img/night-hand-skin85.png",
        ᐃⵠⲆⲆⲆⵠᐃ: "img/day-hand-skin86.png",
        ᐃⵠΔⲆⲆΔᐃ: "img/night-hand-skin86.png",
        ΔΔⵠⵠⵠΔᐃ: "img/day-hand-skin87.png",
        ⵠΔᐃΔⵠΔⵠ: "img/night-hand-skin87.png",
        ᐃⵠΔⲆᐃⵠⵠ: "img/day-hand-skin88.png",
        ⵠᐃⵠᐃᐃᐃᐃ: "img/night-hand-skin88.png",
        ⲆΔᐃⲆⲆⲆΔ: "img/day-hand-skin89.png",
        ΔᐃⲆΔⵠⲆΔ: "img/night-hand-skin89.png",
        ΔⲆᐃⲆΔᐃⵠ: "img/day-hand-skin90.png",
        ᐃᐃΔᐃᐃΔΔ: "img/night-hand-skin90.png",
        ᐃⵠᐃⲆᐃᐃⵠ: "img/day-hand-skin91.png",
        ⲆΔⲆΔⵠⲆⲆ: "img/night-hand-skin91.png",
        ⵠΔⲆᐃᐃⲆⵠ: "img/day-hand-skin92.png",
        ⵠΔΔΔⵠⵠⲆ: "img/night-hand-skin92.png",
        ᐃⵠᐃΔⵠΔⲆ: "img/day-hand-skin93.png",
        ᐃⵠᐃᐃⵠⲆⲆ: "img/night-hand-skin93.png",
        ΔᐃⵠⵠᐃΔⵠ: "img/day-hand-skin94.png",
        ᐃΔΔⵠⵠⵠΔ: "img/night-hand-skin94.png",
        Ⲇᐃᐃⵠⵠⵠᐃ: "img/day-hand-skin95.png",
        ⲆᐃⵠⲆⲆⲆᐃ: "img/night-hand-skin95.png",
        ΔΔⵠⵠⵠⵠⲆ: "img/day-hand-skin96.png",
        ᐃᐃⵠᐃⵠⵠΔ: "img/night-hand-skin96.png",
        ⲆΔⵠΔΔⵠⲆ: "img/day-hand-skin97.png",
        ΔᐃΔⲆΔⵠᐃ: "img/night-hand-skin97.png",
        ⵠⵠⲆⲆᐃΔΔ: "img/day-hand-skin98.png",
        ΔΔΔⲆⵠⲆΔ: "img/night-hand-skin98.png",
        ᐃΔᐃᐃⲆΔⵠ: "img/day-hand-skin99.png",
        ⲆᐃⲆⵠΔⲆᐃ: "img/night-hand-skin99.png",
        ⲆⲆᐃⵠᐃᐃᐃ: "img/day-hand-skin100.png",
        ⲆΔⵠΔΔΔⵠ: "img/night-hand-skin100.png",
        ⲆᐃⲆⲆⲆⲆᐃ: "img/day-hand-skin101.png",
        ΔⵠᐃⲆᐃΔⵠ: "img/night-hand-skin101.png",
        ᐃᐃΔᐃᐃᐃⵠ: "img/day-hand-skin102.png",
        ⵠⲆΔⵠⵠⵠⵠ: "img/night-hand-skin102.png",
        ΔⵠⲆⲆⵠⲆⵠ: "img/day-hand-skin103.png",
        ᐃⲆΔᐃⵠᐃᐃ: "img/night-hand-skin103.png",
        ⲆⲆⵠΔⲆᐃⲆ: "img/day-hand-skin104.png",
        ⲆⵠⵠΔⵠᐃⵠ: "img/night-hand-skin104.png",
        ᐃⲆᐃⵠⲆᐃⲆ: "img/day-hand-skin105.png",
        ΔⵠⲆⲆΔΔⲆ: "img/night-hand-skin105.png",
        ᐃΔⵠⵠⵠᐃⲆ: "img/day-hand-skin106.png",
        ⲆΔⲆⵠⵠΔⵠ: "img/night-hand-skin106.png",
        ΔⲆᐃⲆⵠⵠΔ: "img/day-hand-skin107.png",
        ⵠⲆᐃⲆΔᐃⵠ: "img/night-hand-skin107.png",
        ᐃⵠΔᐃᐃⵠⵠ: "img/day-hand-skin108.png",
        ⵠΔⲆᐃⵠᐃΔ: "img/night-hand-skin108.png",
        ⲆᐃⵠⲆΔⵠⲆ: "img/day-hand-skin109.png",
        ΔⵠⵠⲆᐃⵠΔ: "img/night-hand-skin109.png",
        ᐃΔⵠⵠⲆᐃⵠ: "img/day-hand-skin110.png",
        ΔᐃⲆᐃᐃΔΔ: "img/night-hand-skin110.png",
        ᐃΔⵠⵠⵠΔⲆ: "img/day-hand-skin111.png",
        ΔⲆⵠⲆⲆⵠⵠ: "img/night-hand-skin111.png",
        ᐃΔΔΔΔᐃⲆ: "img/day-hand-skin112.png",
        ⲆΔΔᐃᐃⵠΔ: "img/night-hand-skin112.png",
        ⵠΔΔⲆⲆⲆΔᐃΔ: "img/day-hand-skin113.png",
        ᐃΔⲆᐃΔΔΔⲆᐃ: "img/night-hand-skin113.png",
        ⵠⵠⵠⲆⵠⲆⵠ: "img/day-hand-skin114.png",
        ᐃΔⵠⲆⲆⲆⵠ: "img/night-hand-skin114.png",
        ΔⵠΔᐃΔΔᐃ: "img/day-hand-skin115.png",
        ᐃᐃᐃⲆⵠⲆⲆ: "img/night-hand-skin115.png",
        ΔⲆᐃΔⲆⲆΔ: "img/day-hand-skin116.png",
        ⲆΔⵠᐃΔᐃᐃ: "img/night-hand-skin116.png",
        ᐃⲆΔᐃΔⵠΔ: "img/day-hand-skin117.png",
        ᐃⲆΔΔⲆΔⵠ: "img/night-hand-skin117.png",
        ΔᐃΔΔΔⲆⲆ: "img/day-hand-skin118.png",
        ᐃⲆⲆᐃⲆⲆΔ: "img/night-hand-skin118.png",
        ΔᐃᐃⲆΔᐃⵠ: "img/day-hand-skin119.png",
        ⲆⲆⵠΔᐃⲆⵠ: "img/night-hand-skin119.png",
        ΔⲆⵠᐃᐃⵠΔ: "img/day-hand-skin120.png",
        ΔⵠΔⲆΔⵠⲆ: "img/night-hand-skin120.png",
        ᐃΔᐃⵠᐃⲆᐃ: "img/day-hand-skin122.png",
        ᐃΔⲆⲆᐃΔᐃ: "img/night-hand-skin122.png",
        ᐃⲆᐃᐃⲆᐃⲆ: "img/day-hand-skin122.png",
        ᐃⲆⲆᐃᐃΔΔ: "img/night-hand-skin122.png",
        ⲆᐃⵠⲆⲆⲆⵠ: "img/day-hand-skin122.png",
        ᐃΔΔᐃΔⲆⵠ: "img/night-hand-skin122.png",
        ᐃⵠⵠⵠⲆΔΔ: "img/day-hand-skin124.png",
        ΔᐃΔΔΔⲆᐃ: "img/night-hand-skin124.png",
        ᐃΔⲆΔⲆⲆᐃ: "img/day-hand-skin125.png",
        ⵠᐃΔΔⲆΔᐃ: "img/night-hand-skin125.png",
        ᐃΔᐃⵠⲆⵠⵠ: "img/day-hand-skin126.png",
        ᐃⵠⲆΔⲆΔⲆ: "img/night-hand-skin126.png",
        ΔᐃΔΔⲆᐃⵠ: "img/day-hand-skin127.png",
        ΔᐃΔⵠⵠᐃⲆ: "img/night-hand-skin127.png",
        ᐃⲆΔᐃΔⵠⵠ: "img/day-hand-skin128.png",
        ᐃᐃᐃᐃⵠΔⵠ: "img/night-hand-skin128.png",
        ⵠΔᐃⵠΔᐃᐃ: "img/day-hand-skin129.png",
        ΔΔΔΔⵠⵠⵠ: "img/night-hand-skin129.png",
        ΔⵠᐃⲆᐃⵠᐃ: "img/day-hand-skin130.png",
        ⵠⲆᐃΔⵠΔΔ: "img/night-hand-skin130.png",
        ΔΔΔⵠΔⲆⵠ: "img/day-hand-skin131.png",
        ⲆᐃΔⵠᐃⵠⲆ: "img/night-hand-skin131.png",
        ᐃᐃⵠᐃΔⲆᐃ: "img/day-hand-skin130.png",
        ⵠⲆⵠⵠⵠⵠᐃ: "img/night-hand-skin130.png",
        ΔΔᐃᐃⲆᐃᐃ: "img/day-hand-skin133.png",
        ⵠⵠⲆⵠⵠⵠⲆ: "img/night-hand-skin133.png",
        ᐃⲆⲆΔᐃⵠⵠ: "img/day-hand-skin134.png",
        ⲆⵠᐃᐃΔΔΔ: "img/night-hand-skin134.png",
        ΔⵠᐃΔⲆᐃⲆ: "img/day-hand-skin135.png",
        ⵠᐃᐃⲆⲆᐃⲆ: "img/night-hand-skin135.png",
        ⵠᐃⲆΔΔΔΔ: "img/day-hand-skin136.png",
        ΔⵠⵠΔΔⵠⲆ: "img/night-hand-skin136.png",
        ⵠᐃᐃⲆⵠΔΔ: "img/day-hand-skin137.png",
        ᐃᐃᐃⲆΔⵠΔ: "img/night-hand-skin137.png",
        ⲆⵠⵠⲆⲆⲆᐃ: "img/day-hand-skin138.png",
        ⲆΔⲆΔΔⵠⲆ: "img/night-hand-skin138.png",
        ΔΔⵠⲆⲆⲆΔ: "img/day-hand-skin139.png",
        ᐃⲆᐃⵠᐃΔᐃ: "img/night-hand-skin139.png",
        ΔᐃⲆⲆⲆⲆⵠ: "img/day-hand-skin140.png",
        ᐃᐃⲆΔᐃⲆΔ: "img/night-hand-skin140.png",
        ⵠⲆᐃⲆΔⲆᐃ: "img/day-hand-skin141.png",
        ᐃΔᐃⲆᐃᐃᐃ: "img/night-hand-skin141.png",
        ᐃΔΔⵠⵠⵠⲆ: "img/day-hand-skin142.png",
        ⲆⲆⵠⲆⵠⵠΔ: "img/night-hand-skin142.png",
        ΔⵠⵠⲆᐃΔᐃ: "img/day-hand-skin143.png",
        ⲆⲆΔⵠΔᐃⵠ: "img/night-hand-skin143.png",
        ΔⲆᐃΔⲆᐃᐃ: "img/day-hand-skin144.png",
        ⲆⵠⲆΔⲆΔⵠ: "img/night-hand-skin144.png",
        ᐃᐃⵠⵠᐃᐃᐃ: "img/day-hand-skin145.png",
        ᐃⵠᐃⵠⵠᐃⵠ: "img/night-hand-skin145.png",
        ⲆⲆᐃΔᐃΔⲆ: "img/day-hand-skin146.png",
        ⲆⲆΔⵠⲆⵠⲆ: "img/night-hand-skin146.png",
        ᐃᐃΔⲆΔⲆΔ: "img/day-hand-skin147.png",
        ᐃΔⲆᐃΔΔᐃ: "img/night-hand-skin147.png",
        ⵠⲆᐃᐃⲆⵠΔ: "img/day-hand-skin148.png",
        ⲆΔⲆᐃᐃΔᐃ: "img/night-hand-skin148.png",
        ⲆⲆⵠⵠΔΔⵠ: "img/day-hand-skin149.png",
        ᐃⲆⲆⵠᐃΔΔ: "img/night-hand-skin149.png",
        ⵠᐃᐃⲆΔⲆΔ: "img/day-hand-skin150.png",
        ᐃΔΔⲆⲆᐃⵠ: "img/night-hand-skin150.png",
        ⲆΔᐃΔΔΔⵠ: "img/day-hand-skin151.png",
        ⲆⵠΔΔᐃΔΔ: "img/night-hand-skin151.png",
        ΔΔᐃᐃⲆⲆᐃ: "img/day-hand-skin152.png",
        ᐃᐃⵠᐃΔⲆⵠ: "img/night-hand-skin152.png",
        ⲆⵠⲆⲆⲆⵠⲆ: "img/day-hand-skin153.png",
        ⵠᐃⵠΔⵠⵠΔ: "img/night-hand-skin153.png",
        ⲆⲆⲆⲆΔΔᐃ: "img/day-hand-skin154.png",
        ΔᐃΔⵠⲆᐃΔ: "img/night-hand-skin154.png",
        ⵠᐃⵠΔⵠⵠᐃ: "img/day-hand-skin155.png",
        ᐃⲆᐃΔᐃⵠⲆ: "img/night-hand-skin155.png",
        ΔᐃᐃⲆⲆⲆᐃ: "img/day-hand-skin156.png",
        ᐃΔᐃΔΔᐃΔ: "img/night-hand-skin156.png",
        ⲆΔᐃⵠᐃⲆⲆ: "img/day-hand-skin157.png",
        ᐃᐃⵠⲆᐃΔΔ: "img/night-hand-skin157.png",
        ΔⲆΔⲆΔΔⲆ: "img/day-hand-skin158.png",
        ⲆⵠΔΔΔΔᐃ: "img/night-hand-skin158.png",
        ⵠⵠΔⵠᐃᐃΔ: "img/day-hand-skin159.png",
        ⲆΔΔⵠⲆᐃΔ: "img/night-hand-skin159.png",
        ⲆⵠΔⵠᐃⲆᐃ: "img/day-hand-skin160.png",
        ΔᐃⲆⵠᐃⲆΔ: "img/night-hand-skin160.png",
        ᐃⵠΔⲆⵠⵠΔ: "img/day-hand-skin161.png",
        ⵠΔᐃⵠⵠᐃΔ: "img/night-hand-skin161.png",
        ᐃᐃΔⵠΔⲆⵠ: "img/day-hand-skin162.png",
        ᐃΔⵠⲆᐃᐃⲆ: "img/night-hand-skin162.png",
        ⲆΔⲆⲆᐃⵠΔ: "img/day-hand-skin163.png",
        Ⲇⵠⵠᐃᐃⵠⵠ: "img/night-hand-skin163.png",
        ⵠᐃⲆⵠⲆΔⲆ: "img/day-hand-skin164.png",
        ⵠⵠᐃᐃⲆᐃⵠ: "img/night-hand-skin164.png",
        ⲆᐃⲆⵠⵠΔⵠ: "img/day-hand-skin165.png",
        ᐃⲆⲆΔⲆⲆⲆ: "img/night-hand-skin165.png",
        ⲆⵠⵠⵠⵠⲆⵠ: "img/day-hand-skin166.png",
        ⲆᐃⲆⲆᐃⲆⲆ: "img/night-hand-skin166.png",
        ᐃⲆⵠⵠⲆⲆⵠ: "img/day-hand-skin167.png",
        ᐃΔⲆⵠΔⲆᐃ: "img/night-hand-skin167.png",
        ⵠΔⵠⵠⵠⵠᐃ: "img/day-hand-skin168.png",
        ⲆⵠᐃⵠΔᐃⲆ: "img/night-hand-skin168.png",
        ΔΔⲆΔᐃᐃⵠ: "img/day-hand-skin169.png",
        ⵠΔⲆⲆⵠⵠΔ: "img/night-hand-skin169.png",
        ⲆΔⵠⲆⵠΔⵠ: "img/day-hand-skin170.png",
        ᐃΔΔⵠΔⲆᐃ: "img/night-hand-skin170.png",
        ⵠⲆⵠΔᐃⵠΔ: "img/day-hand-skin171.png",
        ᐃⵠᐃⲆⵠⲆΔ: "img/night-hand-skin171.png",
        ⵠᐃᐃⵠⲆᐃⵠ: "img/day-hand-skin172.png",
        ΔᐃⲆⵠᐃΔᐃ: "img/night-hand-skin172.png",
        ⲆⲆΔⲆⵠⲆᐃ: "img/day-hand-skin173.png",
        ᐃⵠΔⲆᐃΔᐃ: "img/night-hand-skin173.png",
        ΔΔⵠᐃⲆⲆΔ: "img/day-hand-skin174.png",
        ⲆᐃᐃⵠΔⵠᐃ: "img/night-hand-skin174.png",
        ⵠᐃΔⵠΔᐃᐃ: "img/day-hand-skin175.png",
        ⲆⲆᐃΔⵠⲆⵠ: "img/night-hand-skin175.png",
        ᐃⲆⵠⲆⵠΔᐃ: "img/day-hand-skin176.png",
        ⵠⵠⲆⵠⵠⵠⵠ: "img/night-hand-skin176.png",
        ⵠⲆΔΔⲆⲆΔ: "img/day-hand-skin177.png",
        ⲆⲆΔⵠⵠⲆᐃ: "img/night-hand-skin177.png",
        ⲆᐃΔⲆⵠⵠⲆ: "img/day-hand-skin178.png",
        ⵠⵠⲆΔᐃⵠᐃ: "img/night-hand-skin178.png",
        ⲆΔⵠΔⵠⵠⲆ: "img/day-hand-skin179.png",
        ⲆⲆΔⲆⵠⲆΔ: "img/night-hand-skin179.png",
        ᐃⵠᐃΔⵠⲆⲆ: "img/day-hand-skin180.png",
        ᐃⵠⵠⵠⵠΔⵠ: "img/night-hand-skin180.png",
        ΔΔΔΔᐃⲆⲆ: "img/day-hand-skin181.png",
        ⲆⲆᐃⲆᐃⲆⵠ: "img/night-hand-skin181.png",
        ⲆⲆⲆⲆⵠⵠᐃ: "img/day-hand-skin182.png",
        ΔΔⵠⲆᐃᐃΔ: "img/night-hand-skin182.png",
        ⲆΔΔΔⲆΔⵠ: "img/day-hand-skin183.png",
        ⵠΔΔΔΔΔⵠ: "img/night-hand-skin183.png",
        ᐃᐃⲆᐃⵠⲆᐃ: "img/day-hand-skin184.png",
        ᐃᐃΔⲆᐃᐃᐃ: "img/night-hand-skin184.png",
        ⲆΔΔᐃⲆΔᐃ: "img/day-hand-skin185.png",
        ᐃⲆⲆᐃᐃᐃᐃ: "img/night-hand-skin185.png",
        ΔΔΔᐃΔᐃᐃ: "img/day-hand-skin186.png",
        ⲆᐃΔΔⵠΔᐃ: "img/night-hand-skin186.png",
        ⲆΔΔΔᐃΔᐃ: "img/day-hand-skin187.png",
        ᐃΔΔⵠⲆᐃᐃ: "img/night-hand-skin187.png",
        ⲆⵠᐃΔⵠⵠⵠ: "img/day-hand-skin188.png",
        ᐃΔᐃᐃⲆᐃᐃ: "img/night-hand-skin188.png",
        ⲆⲆⲆᐃⲆⵠᐃ: "img/day-hand-skin189.png",
        ⲆᐃⵠⲆⵠⵠΔ: "img/night-hand-skin189.png",
        ⲆΔⵠⵠΔⵠΔ: "img/day-hand-skin190.png",
        ᐃⵠⲆⲆΔⵠⵠ: "img/night-hand-skin190.png",
        ⵠⵠᐃΔⲆⵠΔ: "img/day-hand-skin191.png",
        ᐃᐃⲆᐃΔᐃᐃ: "img/night-hand-skin191.png",
        ΔⲆΔⲆᐃᐃᐃ: "img/day-hand-skin192.png",
        ⲆⲆⲆΔᐃᐃⵠ: "img/night-hand-skin192.png",
        ΔᐃⲆΔΔⲆⵠ: "img/day-hand-skin193.png",
        ⵠⵠᐃⲆΔⲆⵠ: "img/night-hand-skin193.png",
        ⲆⲆⲆⲆᐃΔⵠ: "img/day-hand-skin194.png",
        ΔΔΔⵠᐃΔⲆ: "img/night-hand-skin194.png",
        ⵠⵠᐃⵠⲆΔᐃ: "img/day-hand-skin195.png",
        ⵠⲆⲆⲆΔⲆΔ: "img/night-hand-skin195.png",
        ⲆΔⲆᐃΔⵠᐃ: "img/day-hand-skin196.png",
        ᐃⲆⵠΔⵠⵠⲆ: "img/night-hand-skin196.png",
        ⵠⵠΔΔΔΔᐃ: "img/day-hand-skin197.png",
        ᐃᐃΔⲆⵠⲆᐃ: "img/night-hand-skin197.png",
        ⲆⲆⵠⵠΔⵠⵠ: "img/day-hand-skin198.png",
        ᐃⵠΔⲆⲆΔⵠ: "img/night-hand-skin198.png",
        ΔᐃⵠᐃⲆΔΔ: "img/day-hand-skin199.png",
        ᐃᐃⲆⲆᐃⲆⲆ: "img/night-hand-skin199.png",
        ⵠⲆⵠΔⵠⲆⲆ: "img/day-hand-skin200.png",
        ΔᐃᐃΔᐃΔⵠ: "img/night-hand-skin200.png",
        ⲆᐃⲆᐃΔⵠⲆ: "img/day-hand-skin201.png",
        Ⲇᐃᐃⵠᐃᐃⵠ: "img/night-hand-skin201.png",
        ΔΔⲆᐃⲆⲆⲆ: "img/day-hand-skin202.png",
        ΔᐃⵠⲆⲆⵠⲆ: "img/night-hand-skin202.png",
        ᐃⲆⵠΔᐃⲆⵠ: "img/day-hand-skin203.png",
        ᐃⲆⲆᐃΔⵠⵠ: "img/night-hand-skin203.png",
        ΔΔΔΔΔⵠⵠ: "img/day-hand-skin204.png",
        ⲆᐃᐃΔⵠⵠᐃ: "img/night-hand-skin204.png",
        ⲆⵠΔᐃⵠⵠⵠ: "img/day-hand-skin205.png",
        ⲆᐃᐃⲆᐃΔΔ: "img/night-hand-skin205.png",
        ⵠⲆⲆⲆⲆⲆᐃ: "img/day-hand-skin206.png",
        ⵠⵠⲆⲆⵠⲆⲆ: "img/night-hand-skin206.png",
        ⲆⲆᐃⵠᐃΔΔ: "img/day-hand-skin207.png",
        ΔΔᐃᐃᐃⵠᐃ: "img/night-hand-skin207.png",
        ΔΔⵠⲆΔⲆⵠ: "img/day-hand-skin208.png",
        ᐃⲆⲆᐃⵠΔᐃ: "img/night-hand-skin208.png",
        ⲆⲆΔⲆⲆΔᐃ: "img/day-hand-skin209.png",
        ᐃⲆᐃⲆⲆΔⵠ: "img/night-hand-skin209.png",
        ᐃΔΔⵠᐃΔᐃ: "img/day-hand-skin210.png",
        ⵠΔⵠᐃΔⵠⲆ: "img/night-hand-skin210.png",
        ⲆᐃⵠⲆᐃⵠⲆ: "img/day-hand-skin211.png",
        ⲆⲆΔΔⵠᐃᐃ: "img/night-hand-skin211.png",
        ⵠⵠᐃΔⵠⲆⲆ: "img/day-hand-skin212.png",
        ⵠⵠᐃⲆΔΔⵠ: "img/night-hand-skin212.png",
        ⲆᐃᐃΔⲆΔΔ: "img/day-bag-star0.png",
        ⵠΔⵠⲆᐃⵠⲆ: "img/night-bag-star0.png",
        ⲆⵠᐃᐃⵠᐃΔ: "img/day-bag0.png",
        ΔⵠⲆΔⲆⵠΔ: "img/night-bag0.png",
        ΔΔᐃΔⲆⲆⲆ: "img/day-bag1.png",
        ΔⵠΔΔΔΔⲆ: "img/night-bag1.png",
        ⵠⵠⵠⵠᐃⵠⲆ: "img/day-bag2.png",
        ᐃⲆᐃⵠᐃᐃⲆ: "img/night-bag2.png",
        ᐃΔΔⵠⲆΔⲆ: "img/day-bag3.png",
        ᐃⲆⲆⲆᐃⵠᐃ: "img/night-bag3.png",
        ΔᐃΔᐃᐃⵠⵠ: "img/day-bag4.png",
        ⵠⵠⵠΔⵠⲆⲆ: "img/night-bag4.png",
        ⲆⵠΔⲆⲆΔΔ: "img/day-bag5.png",
        ⵠⵠⵠⲆⵠⵠⲆ: "img/night-bag5.png",
        ⵠΔΔΔΔⵠᐃ: "img/day-bag6.png",
        ᐃᐃΔⲆΔΔⵠ: "img/night-bag6.png",
        ⵠⲆᐃΔⵠΔⵠ: "img/day-bag7.png",
        ᐃΔⲆⵠΔⲆⵠ: "img/night-bag7.png",
        ᐃᐃⵠᐃᐃⵠᐃ: "img/day-bag8.png",
        ⲆⲆⲆⲆⵠⲆⲆ: "img/night-bag8.png",
        ΔⲆⵠⲆⲆᐃΔ: "img/day-bag9.png",
        ⵠᐃᐃⵠⲆⲆᐃ: "img/night-bag9.png",
        ΔⵠΔⲆⲆⵠΔ: "img/day-bag10.png",
        ⲆⲆⲆⲆⲆΔᐃ: "img/night-bag10.png",
        ᐃⵠⲆΔⲆⵠⲆ: "img/day-bag11.png",
        ⲆⵠᐃΔⲆⵠᐃ: "img/night-bag11.png",
        ΔⵠΔⵠΔᐃᐃ: "img/day-bag13.png",
        ᐃΔᐃⵠⲆⵠⲆ: "img/night-bag13.png",
        ⵠΔⵠΔᐃⵠⲆ: "img/day-bag14.png",
        ΔᐃⵠⵠⲆⵠΔ: "img/night-bag14.png",
        ⵠΔⵠⵠΔΔⵠ: "img/day-bag16.png",
        ᐃᐃⲆⵠᐃⲆᐃ: "img/night-bag16.png",
        ⵠⵠΔⲆⵠⵠᐃ: "img/day-bag17.png",
        ᐃⵠᐃᐃⲆⵠⵠ: "img/night-bag17.png",
        ⲆⵠΔᐃⲆΔΔ: "img/day-bag18.png",
        ᐃᐃΔⲆⵠⵠΔ: "img/night-bag18.png",
        ⲆᐃΔᐃⵠⵠΔ: "img/day-bag19.png",
        ⲆᐃᐃⲆⲆⲆΔ: "img/night-bag19.png",
        ᐃⵠΔΔᐃᐃⵠ: "img/day-bag20.png",
        ⲆⵠⵠΔⵠΔⲆ: "img/night-bag20.png",
        ΔⲆⲆⲆΔⲆⲆ: "img/day-bag21.png",
        ΔᐃⵠᐃⲆⵠⵠ: "img/night-bag21.png",
        ⵠΔⵠΔΔⵠⵠ: "img/day-bag22.png",
        ⲆΔᐃⵠⲆⲆΔ: "img/night-bag22.png",
        ᐃⵠⲆᐃΔⵠΔ: "img/day-bag23.png",
        ᐃᐃᐃΔⲆΔΔ: "img/night-bag23.png",
        ⵠⲆᐃΔⲆᐃⲆ: "img/day-bag24.png",
        ⵠΔΔΔⲆᐃΔ: "img/night-bag24.png",
        ⲆⲆΔⵠⲆΔⵠ: "img/day-bag25.png",
        ΔⵠⲆΔΔΔⵠ: "img/night-bag25.png",
        ⵠⵠΔⵠⲆⵠⵠ: "img/day-bag26.png",
        ΔⵠⲆⲆΔᐃΔ: "img/night-bag26.png",
        ΔⲆⵠⵠΔᐃᐃ: "img/day-bag27.png",
        ΔΔᐃΔΔⵠⵠ: "img/night-bag27.png",
        ᐃⲆⵠⲆᐃⵠⵠ: "img/day-bag28.png",
        ᐃΔⲆⲆΔΔᐃ: "img/night-bag28.png",
        ᐃⲆⲆⲆΔⲆⵠ: "img/day-bag29.png",
        ⵠⵠⲆᐃᐃΔΔ: "img/night-bag29.png",
        ᐃΔⲆΔᐃΔᐃ: "img/day-bag30.png",
        ⲆⵠΔᐃⵠᐃᐃ: "img/night-bag30.png",
        ⵠᐃΔΔᐃΔⵠ: "img/day-bag31.png",
        ΔᐃᐃᐃΔᐃⵠ: "img/night-bag31.png",
        ⵠΔΔΔΔᐃΔ: "img/day-bag32.png",
        ᐃᐃⲆᐃⲆᐃⵠ: "img/night-bag32.png",
        ⲆΔΔᐃⲆᐃⵠ: "img/day-bag33.png",
        ᐃΔΔⲆⵠᐃⲆ: "img/night-bag33.png",
        ΔᐃΔⵠΔᐃΔ: "img/day-bag34.png",
        ΔΔⵠⲆᐃⵠⵠ: "img/night-bag34.png",
        ᐃᐃᐃΔᐃΔⵠ: "img/day-bag35.png",
        ΔΔΔᐃⲆⲆᐃ: "img/night-bag35.png",
        ΔⲆᐃⵠⲆΔⲆ: "img/day-bag36.png",
        ⵠΔΔⵠᐃⲆⵠ: "img/night-bag36.png",
        ᐃⲆⲆⵠⲆᐃⵠ: "img/day-bag37.png",
        ⵠⵠⵠᐃᐃⲆΔ: "img/night-bag37.png",
        ᐃᐃΔΔᐃⵠⲆ: "img/day-bag38.png",
        ⲆⲆⲆⲆⲆᐃⵠ: "img/night-bag38.png",
        ΔΔⲆⲆⲆΔΔ: "img/day-bag39.png",
        ᐃⲆᐃᐃⲆⲆᐃ: "img/night-bag39.png",
        ΔⵠΔⲆⲆᐃⵠ: "img/day-bag40.png",
        ⵠⲆΔᐃⲆΔⵠ: "img/night-bag40.png",
        ⲆⵠⲆᐃⵠⵠⲆ: "img/day-bag41.png",
        ΔΔⲆⵠⵠΔⵠ: "img/night-bag41.png",
        ᐃⲆᐃⵠΔⵠⲆ: "img/day-bag42.png",
        ᐃⲆⵠᐃⵠⵠᐃ: "img/night-bag42.png",
        ᐃⵠⲆⵠᐃⲆⵠ: "img/day-bag43.png",
        ᐃᐃᐃΔⲆΔⵠ: "img/night-bag43.png",
        ⲆᐃΔⲆΔΔΔ: "img/day-bag44.png",
        ⲆⵠⲆᐃⵠⲆΔ: "img/night-bag44.png",
        ᐃᐃⲆⲆᐃⵠΔ: "img/day-bag45.png",
        ⲆΔⵠΔᐃⲆⲆ: "img/night-bag45.png",
        ᐃᐃⲆΔⲆⵠᐃ: "img/day-bag46.png",
        ΔΔⵠⵠᐃΔᐃ: "img/night-bag46.png",
        ⵠⲆⲆᐃᐃᐃᐃ: "img/day-bag47.png",
        ᐃᐃΔᐃᐃΔⵠ: "img/night-bag47.png",
        ⵠⵠᐃΔⵠᐃⲆ: "img/day-bag48.png",
        ΔᐃⵠᐃᐃⲆΔ: "img/night-bag48.png",
        ⲆⲆᐃΔᐃⲆⲆ: "img/day-bag49.png",
        ΔᐃᐃᐃᐃΔⵠ: "img/night-bag49.png",
        ⵠⵠᐃΔⲆⲆⵠ: "img/day-bag50.png",
        ᐃᐃⵠⲆᐃⲆⵠ: "img/night-bag50.png",
        ᐃⲆⲆⵠⵠⵠΔ: "img/day-bag51.png",
        ⵠⲆⵠΔΔⵠᐃ: "img/night-bag51.png",
        ⵠΔᐃⲆⲆᐃⵠ: "img/day-bag52.png",
        ΔⵠⵠΔΔⵠΔ: "img/night-bag52.png",
        ΔΔᐃΔⲆᐃⲆ: "img/day-bag53.png",
        ᐃⲆᐃⵠⲆᐃⵠ: "img/night-bag53.png",
        ⵠΔᐃᐃᐃⵠⵠ: "img/day-bag54.png",
        ⲆⲆᐃⵠⲆΔΔ: "img/night-bag54.png",
        ᐃᐃⲆⵠⵠⵠΔ: "img/day-bag55.png",
        ⵠΔⲆⵠᐃⲆΔ: "img/night-bag55.png",
        ᐃᐃΔΔⲆΔᐃ: "img/day-bag56.png",
        ⲆⲆⵠⵠᐃΔⵠ: "img/night-bag56.png",
        ⵠⲆⵠⲆᐃΔⵠ: "img/day-bag57.png",
        ⵠᐃⵠᐃᐃⲆΔ: "img/night-bag57.png",
        ⲆΔΔᐃᐃⲆᐃ: "img/day-bag58.png",
        ⲆⵠⲆᐃᐃⲆⵠ: "img/night-bag58.png",
        ᐃⲆⵠⵠΔⲆⲆ: "img/day-bag59.png",
        ᐃⲆⵠᐃⲆⲆⵠ: "img/night-bag59.png",
        ⵠΔⲆΔⲆⵠⲆ: "img/day-bag60.png",
        ⵠΔΔⲆⵠΔⲆ: "img/night-bag60.png",
        ⵠΔⲆⲆⲆᐃⵠ: "img/day-bag61.png",
        ΔᐃᐃᐃⲆⲆⲆ: "img/night-bag61.png",
        ᐃⵠᐃΔᐃΔᐃ: "img/day-bag62.png",
        ⵠⵠΔᐃⵠΔⲆ: "img/night-bag62.png",
        ⲆⵠΔΔΔⵠⲆ: "img/day-bag63.png",
        ⲆΔᐃᐃΔᐃⲆ: "img/night-bag63.png",
        ΔᐃⲆⵠΔⵠⲆ: "img/day-bag64.png",
        ⲆΔⲆᐃⵠⲆᐃ: "img/night-bag64.png",
        ΔⵠΔᐃⲆⲆΔ: "img/day-bag65.png",
        ⵠⲆⲆᐃΔᐃΔ: "img/night-bag65.png",
        ⵠΔΔⲆⵠⲆⵠ: "img/day-bag66.png",
        ᐃⲆᐃⵠΔⵠᐃ: "img/night-bag66.png",
        ΔⵠᐃⵠⵠᐃΔ: "img/day-bag67.png",
        ⵠⵠⲆᐃⵠⵠᐃ: "img/night-bag67.png",
        ΔᐃᐃⲆΔᐃᐃ: "img/day-bag68.png",
        ΔⵠᐃᐃᐃⵠΔ: "img/night-bag68.png",
        ⵠⲆΔⲆᐃⲆⲆ: "img/day-bag69.png",
        ⵠΔⵠΔΔΔᐃ: "img/night-bag69.png",
        ⲆΔⲆⵠⲆΔΔ: "img/day-bag70.png",
        ⲆᐃΔᐃΔⵠᐃ: "img/night-bag70.png",
        ⲆⲆⲆᐃⲆⵠⵠ: "img/day-bag71.png",
        ⵠⵠⲆⲆⲆᐃⵠ: "img/night-bag71.png",
        ⵠΔⲆᐃⵠⵠΔ: "img/day-bag72.png",
        ⵠᐃⵠⵠⵠⲆⵠ: "img/night-bag72.png",
        ᐃⵠⲆⵠⲆΔΔ: "img/day-bag73.png",
        ⵠΔᐃΔΔᐃΔ: "img/night-bag73.png",
        ᐃⵠⲆⵠΔᐃⲆ: "img/day-bag74.png",
        ΔⲆΔⵠΔⲆⲆ: "img/night-bag74.png",
        ⲆⲆᐃᐃᐃΔⲆ: "img/day-bag75.png",
        ᐃΔΔΔⲆΔᐃ: "img/night-bag75.png",
        ᐃᐃⵠⲆⵠⲆΔ: "img/day-bag76.png",
        ⵠⵠΔΔᐃᐃΔ: "img/night-bag76.png",
        ⲆⵠᐃⵠⲆⵠⲆ: "img/day-bag77.png",
        ⵠΔⵠⲆΔⲆⵠ: "img/night-bag77.png",
        ⲆΔⲆᐃⵠⲆΔ: "img/day-bag78.png",
        ᐃᐃⵠᐃΔΔⲆ: "img/night-bag78.png",
        ᐃⵠᐃΔᐃⲆⲆ: "img/day-bag79.png",
        ⵠᐃΔΔΔΔᐃ: "img/night-bag79.png",
        ⲆΔⲆΔⵠⲆⵠ: "img/day-bag80.png",
        ᐃⵠⵠⵠⲆᐃΔ: "img/night-bag80.png",
        ᐃⵠⵠΔΔⲆⲆ: "img/day-accessory0.png",
        ΔΔᐃΔⵠᐃⲆ: "img/day-accessory0-pacques.png",
        ΔΔΔΔΔⵠΔ: "img/night-accessory0-pacques.png",
        ΔᐃⵠⵠΔΔΔ: "img/day-accessory13.png",
        ᐃᐃⵠΔⵠⲆΔ: "img/night-accessory13.png",
        ⲆⲆⵠᐃᐃⲆΔ: "img/day-accessory14.png",
        ΔΔΔⵠⲆⲆⵠ: "img/night-accessory14.png",
        ⲆⵠⵠⲆΔᐃᐃ: "img/day-accessory15.png",
        ΔᐃΔΔᐃⲆⵠ: "img/night-accessory15.png",
        ⵠΔᐃⵠᐃⲆⵠ: "img/day-accessory16.png",
        ΔⲆΔΔΔᐃΔ: "img/night-accessory16.png",
        ⵠΔᐃᐃᐃⲆΔ: "img/day-accessory17.png",
        ⵠⲆΔⲆᐃⲆΔ: "img/day-accessory17.png",
        ΔΔⵠⵠⲆⵠΔ: "img/day-accessory19.png",
        ᐃⲆⵠⲆᐃⵠⲆ: "img/night-accessory19.png",
        ᐃⲆⲆⵠⲆⲆⵠ: "img/day-accessory20.png",
        ᐃΔᐃΔᐃⲆⵠ: "img/night-accessory20.png",
        ⲆⲆⵠΔⵠⲆⵠ: "img/day-accessory21.png",
        ΔΔΔᐃΔᐃΔ: "img/night-accessory21.png",
        ᐃᐃⲆⵠᐃⲆΔ: "img/day-accessory22.png",
        ⵠⲆΔⲆᐃᐃᐃ: "img/night-accessory22.png",
        ⵠⵠΔⵠⵠⲆⲆ: "img/day-accessory23.png",
        ΔΔᐃⲆⵠΔⵠ: "img/night-accessory23.png",
        ᐃᐃᐃⵠⲆΔⵠ: "img/day-accessory24.png",
        ⲆⲆⵠⲆⲆΔⵠ: "img/night-accessory24.png",
        ⵠⲆΔⲆΔⵠⵠ: "img/day-accessory25.png",
        ΔⵠΔⵠᐃⵠΔ: "img/night-accessory25.png",
        ⵠᐃᐃⵠⵠⵠΔ: "img/day-accessory26.png",
        ⵠᐃᐃᐃⲆᐃⲆ: "img/night-accessory26.png",
        ᐃᐃⲆΔⵠᐃⲆ: "img/day-accessory27.png",
        ΔΔΔⲆΔᐃⵠ: "img/night-accessory27.png",
        ⲆⲆᐃΔⵠΔᐃ: "img/day-accessory18.png",
        ΔΔΔⵠΔⵠΔ: "img/night-accessory18.png",
        ΔⵠᐃⵠⵠⲆⲆ: "img/day-accessory29.png",
        ΔⵠᐃᐃᐃᐃΔ: "img/night-accessory29.png",
        ⵠΔⲆᐃΔᐃⵠ: "img/day-accessory30.png",
        ⵠΔⵠⲆⵠΔⵠ: "img/night-accessory30.png",
        ᐃΔΔᐃⵠΔⲆ: "img/day-accessory31.png",
        ΔⵠᐃΔⲆᐃΔ: "img/night-accessory31.png",
        ΔΔⵠᐃΔⵠⲆ: "img/day-accessory32.png",
        ᐃⵠⵠᐃⵠᐃⵠ: "img/night-accessory32.png",
        ⲆΔΔΔⵠⲆΔ: "img/day-accessory33.png",
        ᐃᐃⵠΔⲆᐃⵠ: "img/night-accessory33.png",
        ⵠⲆⵠΔΔᐃᐃ: "img/day-accessory34.png",
        ᐃⲆⲆⲆᐃᐃᐃ: "img/night-accessory34.png",
        ᐃⵠⲆⲆⲆᐃᐃ: "img/day-accessory35.png",
        ⵠᐃⵠⵠⲆΔⲆ: "img/night-accessory35.png",
        ⲆⲆᐃΔΔΔΔ: "img/day-accessory28.png",
        ⲆⵠᐃⲆⵠⲆᐃ: "img/night-accessory28.png",
        ⵠⲆⲆⲆΔᐃⵠ: "img/day-accessory36.png",
        ᐃᐃⵠⵠⲆⵠΔ: "img/night-accessory36.png",
        ᐃᐃᐃΔⲆⵠⲆ: "img/day-accessory37.png",
        ᐃⲆΔΔⲆΔΔ: "img/night-accessory37.png",
        ΔᐃΔᐃᐃⵠⲆ: "img/day-accessory39.png",
        ᐃᐃΔΔΔⲆΔ: "img/night-accessory39.png",
        ⵠΔⵠᐃᐃΔⲆ: "img/day-accessory40.png",
        ᐃⵠΔΔΔΔΔ: "img/night-accessory40.png",
        ᐃᐃᐃᐃⲆⲆΔ: "img/day-accessory41.png",
        ᐃΔⲆΔⵠⲆᐃ: "img/night-accessory41.png",
        ⲆᐃᐃΔⵠⵠⲆ: "img/day-accessory42.png",
        ΔⵠΔᐃΔᐃᐃ: "img/night-accessory42.png",
        ΔⲆᐃᐃⲆⲆΔ: "img/day-accessory43.png",
        ᐃⲆΔⲆⲆᐃⲆ: "img/night-accessory43.png",
        ᐃΔⵠⲆⲆΔᐃ: "img/day-accessory44.png",
        ⲆⲆⵠⲆⵠΔⵠ: "img/night-accessory44.png",
        ⲆⵠΔΔΔⵠⵠ: "img/day-accessory38.png",
        ⵠᐃⲆⲆⵠΔⵠ: "img/night-accessory38.png",
        ⲆΔᐃⵠᐃⲆΔ: "img/day-accessory46.png",
        ⵠⲆⵠᐃⵠⵠⵠ: "img/night-accessory46.png",
        ⵠⲆᐃⲆᐃⵠⲆ: "img/day-accessory47.png",
        ᐃᐃᐃⵠΔΔΔ: "img/night-accessory47.png",
        ⲆⲆⲆⵠⲆⲆΔ: "img/day-accessory48.png",
        ⵠΔⲆΔΔⲆⲆ: "img/night-accessory48.png",
        ᐃΔⵠᐃᐃⲆᐃ: "img/day-accessory49.png",
        ⵠⲆᐃⲆⵠᐃΔ: "img/night-accessory49.png",
        ⲆΔΔᐃⲆⲆⵠ: "img/day-accessory45.png",
        ⲆⵠΔⲆΔᐃⵠ: "img/night-accessory45.png",
        ⵠᐃᐃⵠⲆᐃᐃ: "img/day-accessory50.png",
        ⲆΔⵠⲆΔᐃΔ: "img/night-accessory50.png",
        ᐃⵠΔⵠᐃΔⲆ: "img/day-accessory51.png",
        ΔΔⵠᐃᐃᐃΔ: "img/night-accessory51.png",
        ᐃⲆⵠᐃⲆⵠΔ: "img/day-accessory52.png",
        ᐃΔⲆⲆΔⵠΔ: "img/night-accessory52.png",
        ᐃΔⵠᐃⵠⵠⵠ: "img/day-accessory53.png",
        ΔⵠΔⵠⲆᐃⲆ: "img/night-accessory53.png",
        ᐃᐃⵠᐃΔᐃⵠ: "img/day-accessory54.png",
        ᐃΔΔΔⵠⵠⲆ: "img/night-accessory54.png",
        ᐃᐃⵠΔⵠⲆⲆ: "img/day-accessory55.png",
        ΔⲆⲆᐃⲆⲆⵠ: "img/night-accessory55.png",
        ⵠⲆᐃΔⲆΔᐃ: "img/day-accessory56.png",
        ⵠΔᐃᐃⵠᐃⲆ: "img/night-accessory56.png",
        ᐃΔⲆⵠⵠᐃⵠ: "img/day-accessory57.png",
        ⵠΔΔⵠᐃⵠᐃ: "img/night-accessory57.png",
        ᐃⵠΔⵠⵠⵠⲆ: "img/day-accessory58.png",
        ᐃⵠΔΔᐃᐃΔ: "img/night-accessory58.png",
        ΔⵠΔᐃⵠᐃⲆ: "img/day-accessory59.png",
        ⲆⲆᐃⲆⵠᐃⲆ: "img/night-accessory59.png",
        ᐃΔᐃⲆⲆⲆΔ: "img/day-accessory60.png",
        ΔᐃⵠΔⵠⵠⲆ: "img/night-accessory60.png",
        ⲆΔΔⲆⵠΔⲆ: "img/day-accessory61.png",
        ΔᐃᐃΔⵠⵠΔ: "img/night-accessory61.png",
        ⵠᐃᐃⵠᐃΔⲆ: "img/day-accessory62.png",
        ⲆⵠΔᐃⵠΔΔ: "img/night-accessory62.png",
        ⲆⲆⵠⵠⵠⵠᐃ: "img/day-accessory63.png",
        ⲆᐃⵠⲆᐃⵠΔ: "img/night-accessory63.png",
        ΔᐃⲆᐃΔⵠⵠ: "img/day-accessory64.png",
        ⵠⵠᐃⵠⵠᐃΔ: "img/night-accessory64.png",
        ΔᐃΔⵠᐃⲆⲆ: "img/day-accessory65.png",
        ⵠⵠᐃΔᐃᐃⵠ: "img/night-accessory65.png",
        ⵠᐃⲆⵠⵠⵠΔ: "img/day-accessory66.png",
        ⲆΔΔⲆⵠⵠⲆ: "img/night-accessory66.png",
        ⲆᐃⵠᐃΔⵠⲆ: "img/day-accessory67.png",
        ᐃⵠⲆΔΔⲆΔ: "img/night-accessory67.png",
        ⲆΔⵠⲆⲆⵠᐃ: "img/day-accessory68.png",
        ⲆⲆⵠᐃⲆΔⲆ: "img/night-accessory68.png",
        ⲆⲆᐃⲆΔⵠⵠ: "img/day-accessory69.png",
        ⲆᐃⲆΔᐃΔⵠ: "img/night-accessory69.png",
        ΔΔⲆᐃΔΔᐃ: "img/day-accessory70.png",
        ⲆΔᐃᐃᐃⵠΔ: "img/night-accessory70.png",
        ⲆⵠⵠⲆⲆⲆⵠ: "img/day-accessory71.png",
        ΔⵠᐃΔΔⲆⵠ: "img/night-accessory71.png",
        ⲆᐃⲆΔⲆⵠΔ: "img/day-accessory72.png",
        ⵠΔᐃⵠᐃⲆΔ: "img/night-accessory72.png",
        ⵠⵠΔΔⵠΔΔ: "img/day-accessory73.png",
        ⵠᐃΔⲆᐃᐃⵠ: "img/night-accessory73.png",
        ᐃⵠⲆⲆᐃⲆⵠ: "img/day-accessory74.png",
        ΔⲆⵠⲆΔᐃⵠ: "img/night-accessory74.png",
        ⲆⲆⲆᐃⵠⲆⵠ: "img/day-accessory75.png",
        ⲆΔᐃᐃΔⵠΔ: "img/night-accessory75.png",
        ΔᐃᐃⲆⲆᐃΔ: "img/day-accessory76.png",
        ᐃⵠⲆⲆⲆⲆΔ: "img/night-accessory76.png",
        ⵠᐃⵠⲆΔⲆⲆ: "img/day-accessory77.png",
        ⵠⵠᐃⵠⲆᐃⵠ: "img/night-accessory77.png",
        ⲆΔΔΔⵠᐃΔ: "img/day-accessory78.png",
        ΔⵠΔⲆⵠⵠⲆ: "img/night-accessory78.png",
        ⵠΔⵠⲆⲆᐃΔ: "img/day-accessory79.png",
        ⵠΔΔΔᐃΔⵠ: "img/night-accessory79.png",
        ᐃⵠⲆΔⲆΔᐃ: "img/day-accessory80.png",
        ⲆⵠᐃᐃⲆᐃⵠ: "img/night-accessory80.png",
        ΔⵠΔⲆΔⵠΔ: "img/day-accessory81.png",
        ᐃΔⲆⲆᐃΔΔ: "img/night-accessory81.png",
        ⲆⵠᐃⵠⲆᐃΔ: "img/day-accessory83.png",
        ΔᐃᐃᐃⲆⲆⵠ: "img/night-accessory83.png",
        ΔΔᐃΔⲆᐃᐃ: "img/day-accessory84.png",
        ᐃΔᐃΔⲆⵠⵠ: "img/night-accessory84.png",
        ΔⲆΔᐃΔᐃⲆ: "img/day-accessory85.png",
        ⲆⵠΔᐃⲆⲆⲆ: "img/night-accessory85.png",
        ⵠΔⲆᐃⵠᐃⲆ: "img/day-accessory86.png",
        ⵠⵠⲆᐃᐃⲆⵠ: "img/night-accessory86.png",
        ⲆΔΔᐃⵠΔΔ: "img/day-accessory87.png",
        ⵠΔᐃⵠᐃⵠΔ: "img/night-accessory87.png",
        ᐃᐃᐃᐃⵠΔⲆ: "img/day-accessory88.png",
        ⵠΔΔⲆᐃᐃᐃ: "img/night-accessory88.png",
        ⵠᐃⲆᐃΔⲆⵠ: "img/day-accessory89.png",
        ΔⲆⲆⲆⵠΔⲆ: "img/night-accessory89.png",
        ⵠⵠΔᐃⵠⲆᐃ: "img/day-accessory90.png",
        ⲆⵠⵠΔᐃⲆᐃ: "img/night-accessory90.png",
        ᐃΔⵠΔΔΔⲆ: "img/day-accessory91.png",
        ⲆⵠΔᐃⵠⲆⲆ: "img/night-accessory91.png",
        ᐃΔΔⵠΔΔΔ: "img/day-accessory92.png",
        ΔΔⲆⲆΔⲆΔ: "img/night-accessory92.png",
        ⲆΔⵠᐃᐃⲆⵠ: "img/day-accessory93.png",
        ⵠᐃⲆΔᐃΔᐃ: "img/night-accessory93.png",
        ᐃⲆᐃⲆⲆⵠⵠ: "img/day-accessory94.png",
        ⲆΔⵠⲆⲆΔᐃ: "img/night-accessory94.png",
        ⲆΔΔⵠᐃΔΔ: "img/day-accessory95.png",
        ⵠᐃⲆⲆⵠᐃΔ: "img/night-accessory95.png",
        ᐃᐃⲆⲆΔⲆⲆ: "img/day-accessory96.png",
        ⵠΔΔⲆᐃΔⲆ: "img/night-accessory96.png",
        ⲆⲆⵠᐃΔᐃⵠ: "img/day-accessory97.png",
        ⲆⵠᐃΔⲆΔᐃ: "img/night-accessory97.png",
        ⲆⲆᐃΔᐃⵠⲆ: "img/day-accessory98.png",
        ᐃⲆⲆⲆᐃΔᐃ: "img/night-accessory98.png",
        ᐃΔⲆΔⵠⵠΔ: "img/day-accessory99.png",
        ΔᐃⵠΔΔΔᐃ: "img/night-accessory99.png",
        ᐃⵠᐃⵠⲆᐃᐃ: "img/day-accessory100.png",
        ᐃⵠᐃΔᐃⵠⲆ: "img/night-accessory100.png",
        ᐃᐃᐃⲆⲆΔⲆ: "img/day-accessory101.png",
        ⵠⲆⲆᐃᐃⲆⲆ: "img/night-accessory101.png",
        ⲆⵠⵠⵠΔⵠⲆ: "img/day-accessory102.png",
        ΔⵠΔⲆᐃΔΔ: "img/night-accessory102.png",
        ᐃᐃΔⵠΔᐃΔ: "img/day-accessory103.png",
        ⲆΔⲆΔⲆⵠⵠ: "img/night-accessory103.png",
        ⵠⲆⲆⵠᐃΔⵠ: "img/day-accessory104.png",
        ⲆⵠᐃᐃΔᐃΔ: "img/night-accessory104.png",
        ΔᐃᐃⲆⵠᐃⵠ: "img/day-accessory105.png",
        ⲆΔΔᐃⵠⵠᐃ: "img/night-accessory105.png",
        ᐃΔᐃᐃⵠΔⵠΔⵠ: "img/day-accessory106.png",
        ᐃᐃΔⵠΔᐃⲆΔΔ: "img/night-accessory106.png",
        ⵠΔΔⲆᐃⵠᐃⲆᐃ: "img/day-accessory107.png",
        ⵠᐃᐃᐃⵠΔⵠⲆᐃ: "img/night-accessory107.png",
        ΔΔⲆᐃΔⵠⵠ: "img/day-accessory82.png",
        ⵠⲆⵠⵠΔⵠⲆ: "img/night-accessory82.png",
        ᐃⲆⵠΔᐃΔⵠ: "img/day-book0.png",
        ΔⲆᐃΔⲆⵠΔ: "img/night-book0.png",
        ⵠⲆⲆᐃⵠⲆᐃ: "img/day-book1.png",
        ⲆΔᐃⵠΔᐃⲆ: "img/night-book1.png",
        Δᐃᐃᐃⵠᐃᐃ: "img/day-book2.png",
        ⵠΔΔⲆⵠᐃᐃ: "img/night-book2.png",
        ⵠⵠⵠⲆΔΔⵠ: "img/day-book3.png",
        ΔᐃΔⵠⵠΔΔ: "img/night-book3.png",
        ⵠⲆᐃΔⵠⵠΔ: "img/day-book4.png",
        ⵠⵠᐃᐃⲆⵠⵠ: "img/night-book4.png",
        ⲆⵠⵠⲆΔⲆΔ: "img/day-book5.png",
        ⲆⵠΔΔᐃⲆΔ: "img/night-book5.png",
        ᐃⲆΔⲆΔᐃᐃ: "img/day-book6.png",
        ᐃᐃⵠΔΔΔΔ: "img/night-book6.png",
        ΔⲆⲆᐃΔⵠⵠ: "img/day-book7.png",
        ⲆⵠⲆΔΔΔⵠ: "img/night-book7.png",
        ⲆⲆⲆᐃΔΔᐃ: "img/day-book8.png",
        ⲆᐃΔⲆⵠⲆᐃ: "img/night-book8.png",
        ⲆᐃⵠⲆⲆⵠⵠ: "img/day-book9.png",
        ⵠⲆⵠᐃⵠⵠᐃ: "img/night-book9.png",
        ΔᐃⵠᐃᐃΔⲆ: "img/day-book10.png",
        ᐃΔΔᐃΔᐃⲆ: "img/night-book10.png",
        ᐃᐃᐃᐃⲆᐃⲆ: "img/day-book11.png",
        ᐃⵠⲆⵠΔΔᐃ: "img/night-book11.png",
        ⲆⲆᐃΔⲆΔⵠ: "img/day-book12.png",
        ᐃΔⲆᐃΔᐃⵠ: "img/night-book12.png",
        ⵠⵠⵠᐃⲆⲆΔ: "img/day-book13.png",
        ΔΔΔⵠⵠᐃᐃ: "img/night-book13.png",
        ⲆΔⲆⵠΔΔᐃ: "img/day-book14.png",
        ⲆΔⲆⲆⲆΔΔ: "img/night-book14.png",
        ᐃᐃΔⵠⲆΔᐃ: "img/day-book15.png",
        ⲆⵠⵠⲆᐃⵠⲆ: "img/night-book15.png",
        ᐃᐃᐃⵠΔⵠⲆ: "img/day-book16.png",
        ᐃΔΔⵠⲆᐃⵠ: "img/night-book16.png",
        ᐃᐃᐃΔⵠⵠⲆ: "img/day-book17.png",
        ᐃⵠⲆᐃΔᐃⵠ: "img/night-book17.png",
        ⵠΔⵠΔᐃⵠⵠ: "img/day-book18.png",
        ΔⵠⵠⲆⵠᐃᐃ: "img/night-book18.png",
        ⵠᐃΔᐃⵠᐃⵠ: "img/day-book19.png",
        ⵠΔⲆΔΔⲆⵠ: "img/night-book19.png",
        ᐃⲆⵠΔᐃⲆΔ: "img/day-book20.png",
        ⲆⵠᐃⲆᐃᐃΔ: "img/night-book20.png",
        ⲆᐃⲆⲆⲆⵠⲆ: "img/day-book21.png",
        ᐃΔᐃⵠⵠᐃΔ: "img/night-book21.png",
        ⵠΔⲆⲆⵠⵠᐃ: "img/day-book22.png",
        ⲆⵠΔΔᐃⵠⲆ: "img/night-book22.png",
        ᐃΔⵠⲆᐃⲆᐃ: "img/day-book23.png",
        ⵠᐃⵠⵠⵠⵠⵠ: "img/night-book23.png",
        ⵠⵠᐃΔΔⲆΔ: "img/day-book24.png",
        ᐃᐃᐃⵠΔⲆⲆ: "img/night-book24.png",
        ᐃᐃᐃⵠΔⲆᐃ: "img/day-book25.png",
        ΔᐃᐃⲆⵠᐃΔ: "img/night-book25.png",
        ΔᐃΔΔⲆⲆΔ: "img/day-book26.png",
        ⵠⵠᐃⲆᐃⵠⵠ: "img/night-book26.png",
        ᐃΔᐃᐃᐃⲆⵠ: "img/day-book27.png",
        ΔΔΔⵠⲆᐃᐃ: "img/night-book27.png",
        ΔⵠᐃΔⵠᐃΔ: "img/day-book28.png",
        ΔⲆⵠΔⵠΔᐃ: "img/night-book28.png",
        ⲆΔⲆΔᐃⵠⵠ: "img/day-book29.png",
        ᐃΔⲆⲆⵠⵠΔ: "img/night-book29.png",
        ᐃⲆᐃᐃⵠⵠⲆ: "img/day-book30.png",
        ⲆⲆⲆΔⲆⵠᐃ: "img/night-book30.png",
        ΔⲆⵠⵠΔⵠᐃ: "img/day-book31.png",
        ΔⲆᐃᐃᐃᐃⲆ: "img/night-book31.png",
        ᐃⵠⵠΔΔᐃΔ: "img/day-book32.png",
        ΔⲆΔⲆⲆⵠᐃ: "img/night-book32.png",
        ⵠⲆⲆⲆᐃΔⲆ: "img/day-book33.png",
        ⲆᐃᐃⵠΔⲆᐃ: "img/night-book33.png",
        ΔᐃⲆⵠᐃⵠⲆ: "img/day-book34.png",
        ⵠΔᐃⲆΔⵠⵠ: "img/night-book34.png",
        ⵠᐃⵠⲆᐃⵠⵠ: "img/day-book35.png",
        ΔⲆⲆⵠⲆΔⵠ: "img/night-book35.png",
        ΔΔΔⲆⲆⵠᐃ: "img/day-book36.png",
        ΔΔⲆⲆΔΔⵠ: "img/night-book36.png",
        ⲆⲆⵠΔⲆΔΔΔⲆ: "img/day-book37.png",
        ᐃⵠⲆᐃᐃᐃΔΔⲆ: "img/night-book37.png",
        ⵠᐃⲆΔΔⲆⲆ: "img/day-book38.png",
        ΔⲆᐃᐃᐃⲆΔ: "img/night-book38.png",
        ᐃᐃᐃᐃᐃⲆⵠ: "img/day-book39.png",
        ⲆⵠⵠΔⲆⲆᐃ: "img/night-book39.png",
        ᐃΔᐃΔΔᐃⲆ: "img/day-book40.png",
        ΔΔⵠⵠᐃΔⲆ: "img/night-book40.png",
        ᐃΔⲆⵠᐃⲆᐃ: "img/day-book41.png",
        ᐃⲆΔᐃⲆΔᐃ: "img/night-book41.png",
        ΔᐃⵠⵠᐃⵠⲆ: "img/day-book42.png",
        ΔΔΔⲆⲆᐃᐃ: "img/night-book42.png",
        ᐃᐃΔⵠᐃⵠⲆ: "img/day-book43.png",
        ⲆⵠⲆΔΔΔᐃ: "img/night-book43.png",
        ΔⲆⲆⵠⲆΔⲆ: "img/day-book44.png",
        ⵠᐃⲆᐃᐃⲆⵠ: "img/night-book44.png",
        ᐃΔⵠᐃⲆΔⵠ: "img/day-book45.png",
        ⲆᐃΔⵠΔᐃⵠ: "img/night-book45.png",
        ΔⲆⵠᐃⵠΔᐃ: "img/day-book46.png",
        ᐃᐃⲆΔⵠⵠⲆ: "img/night-book46.png",
        ᐃⵠⲆᐃᐃⲆⵠ: "img/day-book47.png",
        ᐃⲆΔΔⲆᐃΔ: "img/night-book47.png",
        Δᐃᐃᐃⵠⵠᐃ: "img/day-book48.png",
        ᐃⲆⵠⲆⲆΔⲆ: "img/night-book48.png",
        ΔΔᐃΔⵠⲆⲆ: "img/day-book49.png",
        ΔⵠΔⵠΔⵠᐃ: "img/night-book49.png",
        ᐃⵠⲆⵠⵠᐃΔ: "img/day-book50.png",
        ᐃⵠᐃⵠⵠⵠⵠ: "img/night-book50.png",
        ᐃⵠᐃⲆⵠⲆⲆ: "img/day-crate1.png",
        ⲆⲆΔⲆΔΔⲆ: "img/night-crate1.png",
        ⲆⵠΔⵠΔᐃΔ: "img/day-crate2.png",
        ᐃⵠΔΔΔᐃⵠ: "img/night-crate2.png",
        ᐃΔΔⵠⵠᐃⲆ: "img/day-crate3.png",
        ⲆⲆⲆΔⲆⵠⵠ: "img/night-crate3.png",
        ΔᐃΔᐃⲆΔⵠ: "img/day-crate4.png",
        ᐃⲆᐃᐃⲆⲆⲆ: "img/night-crate4.png",
        ᐃⵠΔΔᐃⵠⵠ: "img/day-crate5.png",
        ⲆⵠΔΔⵠᐃⲆ: "img/night-crate5.png",
        ᐃⲆΔⵠΔᐃΔ: "img/day-crate6.png",
        ᐃⲆⵠⲆⵠⵠⲆ: "img/night-crate6.png",
        ᐃᐃⵠΔⵠΔⲆ: "img/day-crate7.png",
        ⲆⲆΔⲆΔᐃᐃ: "img/night-crate7.png",
        ΔⵠᐃΔⲆΔΔ: "img/day-crate8.png",
        ⵠΔⵠⲆᐃⲆⲆ: "img/night-crate8.png",
        ᐃΔⵠⲆⲆΔⲆ: "img/day-crate9.png",
        ⲆⲆᐃᐃⲆⲆⵠ: "img/night-crate9.png",
        ⲆⲆⵠΔᐃⵠᐃ: "img/day-crate10.png",
        ⲆⵠΔᐃΔᐃΔ: "img/night-crate10.png",
        ΔⵠⲆᐃΔΔⵠ: "img/day-crate11.png",
        Δᐃⵠⵠᐃⵠᐃ: "img/night-crate11.png",
        ᐃᐃᐃⵠⲆᐃⵠ: "img/day-crate12.png",
        ⵠⲆᐃᐃⵠΔᐃ: "img/night-crate12.png",
        ⵠΔⲆⲆⵠᐃⲆ: "img/day-crate13.png",
        ⲆᐃΔᐃᐃΔΔ: "img/night-crate13.png",
        ᐃⲆΔⲆⲆᐃᐃ: "img/day-crate14.png",
        ΔⵠᐃⲆᐃᐃⲆ: "img/night-crate14.png",
        ⵠⵠⵠⵠΔΔᐃ: "img/day-crate15.png",
        ⵠⵠᐃⲆᐃⲆⲆ: "img/night-crate15.png",
        ⲆⵠΔⲆᐃᐃⲆ: "img/day-crate16.png",
        ⵠᐃᐃΔᐃΔⲆ: "img/night-crate16.png",
        ⲆⵠⲆᐃⲆⵠⵠ: "img/day-crate17.png",
        ⵠᐃⵠᐃⵠⲆᐃ: "img/night-crate17.png",
        ⵠᐃⲆΔΔΔⲆ: "img/day-crate18.png",
        ᐃΔᐃⵠΔⵠⵠ: "img/night-crate18.png",
        ΔᐃΔⲆⵠᐃⲆ: "img/day-crate19.png",
        ᐃⲆᐃᐃΔⲆⲆ: "img/night-crate19.png",
        ᐃⲆⲆΔᐃᐃⲆ: "img/day-crate20.png",
        ᐃᐃⲆⵠⲆⵠⲆ: "img/night-crate20.png",
        ⲆᐃΔⲆΔⲆΔ: "img/day-crate21.png",
        ΔⲆᐃᐃⵠⵠΔ: "img/night-crate21.png",
        ᐃⲆⵠΔᐃⲆᐃ: "img/day-crate22.png",
        ΔⲆΔⵠΔΔⵠ: "img/night-crate22.png",
        ⲆⲆᐃⵠΔΔᐃ: "img/day-crate23.png",
        ᐃᐃΔⲆΔⲆⵠ: "img/night-crate23.png",
        ΔⵠⵠⵠⲆⵠⵠ: "img/day-crate24.png",
        ⵠⵠⲆⵠᐃΔⲆ: "img/night-crate24.png",
        ⵠᐃᐃΔⲆᐃⵠ: "img/day-crate25.png",
        ⲆⵠᐃⵠⵠᐃΔ: "img/night-crate25.png",
        ⵠⲆⲆⲆΔΔᐃ: "img/day-crate26.png",
        ᐃⵠⵠⵠᐃᐃⵠ: "img/night-crate26.png",
        ⲆⵠΔΔΔΔⲆ: "img/day-crate27.png",
        ᐃⲆⲆⵠⲆᐃᐃ: "img/night-crate27.png",
        ⲆⲆᐃⵠᐃⲆⲆ: "img/day-crate28.png",
        ΔⵠᐃΔⲆⲆᐃ: "img/night-crate28.png",
        ΔⲆΔⲆⵠᐃⵠ: "img/day-crate29.png",
        ⵠⲆΔΔⲆⵠⲆ: "img/night-crate29.png",
        ⵠΔΔⲆⲆⲆⲆ: "img/day-crate30.png",
        ⲆΔᐃΔⵠΔⵠ: "img/night-crate30.png",
        ᐃᐃⲆⲆⵠⵠᐃ: "img/day-crate31.png",
        ᐃⵠᐃΔⲆⵠⵠ: "img/night-crate31.png",
        ᐃⵠⵠⵠΔΔⵠ: "img/day-crate32.png",
        ⲆⵠⵠΔΔⵠΔ: "img/night-crate32.png",
        ᐃⵠΔⲆⲆⵠᐃ: "img/day-crate33.png",
        ᐃᐃΔᐃΔⲆᐃ: "img/night-crate33.png",
        ᐃⲆⲆⵠΔⲆⵠ: "img/day-crate34.png",
        ⵠⵠⲆᐃⵠⲆⲆ: "img/night-crate34.png",
        ⵠᐃΔᐃⲆⵠⵠ: "img/day-crate35.png",
        ⵠⲆⵠᐃΔⵠᐃ: "img/night-crate35.png",
        ΔⲆΔΔΔⵠᐃ: "img/day-crate36.png",
        ΔΔⲆΔᐃⲆⲆ: "img/night-crate36.png",
        ᐃᐃⲆⵠᐃⵠᐃ: "img/day-crate37.png",
        ᐃᐃΔⲆᐃᐃΔ: "img/night-crate37.png",
        ᐃⲆᐃⵠⲆΔᐃ: "img/day-crate38.png",
        ⵠΔᐃᐃΔᐃᐃ: "img/night-crate38.png",
        ⵠΔⵠᐃⲆᐃᐃ: "img/day-crate39.png",
        ᐃⵠⲆᐃΔΔᐃ: "img/night-crate39.png",
        ΔΔΔⵠⲆΔⲆ: "img/day-crate40.png",
        ⲆⲆΔⲆⵠΔᐃ: "img/night-crate40.png",
        ᐃⵠᐃⵠΔⲆⵠ: "img/day-crate41.png",
        ⵠⵠᐃΔⲆΔΔ: "img/night-crate41.png",
        ⲆⵠΔⵠⲆᐃᐃ: "img/day-crate42.png",
        ⵠⲆⵠⲆⲆⵠⲆ: "img/night-crate42.png",
        ⵠⲆⵠⵠⲆⵠᐃ: "img/day-crate43.png",
        ⲆⵠᐃⵠᐃΔᐃ: "img/night-crate43.png",
        ᐃΔΔΔⵠᐃⵠ: "img/day-crate44.png",
        ⵠⲆΔⵠᐃⲆΔ: "img/night-crate44.png",
        ΔᐃⵠⲆΔᐃΔ: "img/day-crate45.png",
        ᐃⵠᐃΔⵠΔΔ: "img/night-crate45.png",
        ᐃᐃⵠᐃⵠⲆⲆ: "img/day-crate46.png",
        ᐃⲆⵠⲆΔⲆΔ: "img/night-crate46.png",
        ⲆⲆᐃΔΔΔᐃ: "img/day-crate47.png",
        ΔⲆⵠⲆᐃⵠⲆ: "img/night-crate47.png",
        ᐃⵠⵠᐃᐃΔᐃ: "img/day-crate48.png",
        ΔⵠᐃⲆᐃⲆⵠ: "img/night-crate48.png",
        ⵠⲆᐃⵠᐃΔᐃ: "img/day-crate49.png",
        ⵠᐃΔᐃⵠΔⵠ: "img/night-crate49.png",
        ΔΔⵠⵠⲆⲆᐃ: "img/day-crate50.png",
        ⵠⵠᐃⲆᐃΔⵠ: "img/night-crate50.png",
        ΔⵠᐃⲆⵠΔⲆ: "img/day-crate51.png",
        ⲆΔᐃᐃΔⲆᐃ: "img/night-crate51.png",
        ⵠΔᐃⲆᐃⲆᐃ: "img/day-crate52.png",
        ⲆⲆⲆᐃΔⵠⲆ: "img/night-crate52.png",
        ⵠⲆᐃΔᐃΔⵠ: "img/day-crate53.png",
        ⵠⲆΔⵠᐃⲆᐃ: "img/night-crate53.png",
        ⵠⲆᐃⲆᐃⲆⵠ: "img/day-crate54.png",
        ⵠⵠᐃⲆᐃΔⲆ: "img/night-crate54.png",
        ⲆᐃΔⵠⲆⲆⵠ: "img/day-crate55.png",
        ᐃΔⲆⲆⲆΔΔ: "img/night-crate55.png",
        ⵠᐃΔᐃⵠᐃᐃ: "img/day-crate56.png",
        ᐃⲆⲆⲆⵠⵠⵠ: "img/night-crate56.png",
        ⵠᐃⵠⵠᐃⲆⲆ: "img/day-crate57.png",
        ⲆΔΔΔⲆⲆΔ: "img/night-crate57.png",
        ⲆΔⲆΔᐃⵠⲆ: "img/day-crate58.png",
        ΔⲆⲆⲆⵠⲆⲆ: "img/night-crate58.png",
        ΔⲆⲆⲆⲆⲆⲆ: "img/day-crate59.png",
        ⵠⲆⲆᐃⵠⲆⵠ: "img/night-crate59.png",
        ⵠⲆΔⲆΔᐃⲆ: "img/day-crate60.png",
        ⲆⲆΔΔΔⲆΔ: "img/night-crate60.png",
        ᐃᐃⵠⵠΔⲆⵠ: "img/day-crate61.png",
        ᐃⲆⵠⲆΔΔⲆ: "img/night-crate61.png",
        ⲆⲆᐃⲆᐃⵠⲆ: "img/day-crate62.png",
        ⲆⲆⵠᐃⲆⲆΔ: "img/night-crate62.png",
        ⵠΔΔΔⵠⲆᐃ: "img/day-crate63.png",
        ΔᐃⲆⲆⲆΔΔ: "img/night-crate63.png",
        ΔᐃⵠΔⲆΔⵠ: "img/day-crate64.png",
        ⲆⲆΔⵠᐃΔᐃ: "img/night-crate64.png",
        ⲆΔⲆⲆΔΔⵠ: "img/day-crate65.png",
        ⲆⲆⵠᐃᐃΔⵠ: "img/night-crate65.png",
        ΔⲆⲆⲆⲆⵠᐃ: "img/day-crate66.png",
        ⵠⵠᐃⵠΔᐃΔ: "img/night-crate66.png",
        ᐃΔΔΔΔⲆⲆ: "img/day-crate67.png",
        ΔᐃΔⵠⲆΔΔ: "img/night-crate67.png",
        ᐃⲆᐃⵠⲆⲆᐃ: "img/day-crate68.png",
        ᐃⵠΔⵠΔΔᐃ: "img/night-crate68.png",
        ΔᐃᐃΔⲆΔⲆ: "img/day-crate69.png",
        ⵠⵠⲆⲆⲆⵠᐃ: "img/night-crate69.png",
        ⲆⵠⲆᐃⵠⵠΔ: "img/day-crate70.png",
        ⵠⲆΔᐃΔᐃΔ: "img/night-crate70.png",
        ᐃᐃⲆⲆⲆⵠΔ: "img/day-crate71.png",
        ᐃⲆΔⲆᐃⲆⵠ: "img/night-crate71.png",
        Ⲇᐃᐃᐃⵠⵠⵠ: "img/day-crate72.png",
        ⵠᐃⲆⲆⵠᐃᐃ: "img/night-crate72.png",
        ᐃⵠᐃⵠᐃⲆΔ: "img/day-crate73.png",
        ΔΔΔᐃⵠⵠⲆ: "img/night-crate73.png",
        ΔⵠⵠᐃⲆΔΔ: "img/day-crate74.png",
        ΔⲆⵠⵠᐃᐃΔ: "img/night-crate74.png",
        ᐃⲆΔⲆΔⲆⵠ: "img/day-crate75.png",
        ᐃᐃⵠⵠⲆΔᐃ: "img/night-crate75.png",
        ⵠΔⲆⵠⵠᐃⵠ: "img/day-crate76.png",
        ⲆⲆⵠⵠΔⲆΔ: "img/night-crate76.png",
        ⵠⵠⵠΔΔⲆΔ: "img/day-crate77.png",
        ΔⲆᐃⲆⲆΔⵠ: "img/night-crate77.png",
        ᐃΔⲆⵠⲆⵠⵠ: "img/day-crate78.png",
        ΔⵠΔᐃΔⲆⲆ: "img/night-crate78.png",
        ⵠⵠΔΔΔⵠᐃ: "img/day-crate79.png",
        ΔᐃⲆΔΔⵠΔ: "img/night-crate79.png",
        ⵠⲆᐃⵠΔⵠΔ: "img/day-herb0.png",
        ⵠⲆⵠΔⲆᐃΔ: "img/day-herb1.png",
        ⲆⵠⲆⵠⵠⲆᐃ: "img/day-herb2.png",
        ΔᐃΔⵠⵠⵠⵠ: "img/day-herb3.png",
        ᐃⵠⵠⵠΔⵠⵠ: "img/day-herb4.png",
        ⵠᐃᐃᐃⲆᐃⵠ: "img/day-herb5.png",
        ΔⲆⵠⵠΔⵠⵠ: "img/day-herb6.png",
        Δⵠⵠⵠⵠᐃᐃ: "img/day-herb7.png",
        ᐃⲆΔΔⵠⲆΔ: "img/day-herb8.png",
        ᐃⲆΔᐃⵠΔᐃ: "img/day-herb9.png",
        ⵠⲆⵠΔⲆΔⲆ: "img/day-herb10.png",
        ⲆⲆΔⵠⲆΔᐃ: "img/day-herb11.png",
        ΔΔΔΔΔᐃᐃ: "img/day-herb12.png",
        ᐃᐃⵠᐃⲆΔΔ: "img/day-herb13.png",
        ⵠᐃᐃᐃᐃⵠΔ: "img/day-herb14.png",
        ᐃⵠⵠⲆⵠⲆᐃ: "img/day-herb15.png",
        ᐃᐃⲆⵠⲆⲆⵠ: "img/day-shell0.png",
        ⲆΔᐃⵠⵠⲆⲆ: "img/day-shell1.png",
        ᐃᐃⵠΔΔᐃⲆ: "img/day-shell2.png",
        ᐃⲆⵠᐃΔⲆⲆ: "img/day-leaf1.png",
        ΔⲆⲆⲆⲆΔΔ: "img/day-leaf2.png",
        ᐃΔᐃⵠΔᐃⵠ: "img/day-leaf3.png",
        ⲆᐃΔΔᐃΔᐃ: "img/day-leaf4.png",
        ⵠⵠᐃⲆⵠⲆΔ: "img/day-leaf5.png",
        ⲆΔⵠⵠⲆⲆΔ: "img/day-leaf6.png",
        ⵠⲆᐃᐃᐃⵠⵠ: "img/day-leaf7.png",
        ⵠΔᐃᐃΔΔⲆ: "img/day-leaf8.png",
        ⲆⲆⲆᐃⵠΔᐃ: "img/day-rock0.png",
        ⵠΔⲆⵠΔᐃΔ: "img/day-rock1.png",
        ⲆⵠⲆⲆⲆΔⵠ: "img/day-rock2.png",
        ᐃΔⵠⵠᐃⵠΔ: "img/day-rock3.png",
        ⲆⲆⵠΔⵠⵠⵠ: "img/day-rock4.png",
        ΔᐃΔΔᐃⲆᐃ: "img/day-rock5.png",
        ΔⲆᐃᐃᐃⲆⲆ: "img/day-rock6.png",
        ⵠⲆΔⵠⲆᐃᐃ: "img/day-rock7.png",
        ΔⵠΔΔΔΔⵠ: "img/day-rock8.png",
        ᐃᐃⲆΔᐃΔⵠ: "img/day-rock9.png",
        ΔⲆᐃᐃΔⵠΔ: "img/day-rock10.png",
        ⲆΔᐃΔᐃⲆᐃ: "img/day-rock11.png",
        ᐃΔⵠᐃⲆⵠⲆ: "img/day-rock12.png",
        ⲆᐃⲆᐃⵠΔΔ: "img/day-rock13.png",
        ⲆᐃᐃᐃᐃⵠΔ: "img/day-flower1.png",
        ᐃᐃᐃⵠΔΔⲆ: "img/day-flower2.png",
        ⵠⲆΔⵠᐃᐃΔ: "img/day-flower3.png",
        ᐃⲆᐃⲆⵠᐃΔ: "img/day-flower4.png",
        ⵠⵠᐃⲆΔΔΔ: "img/day-flower5.png",
        ᐃⲆΔⵠᐃⲆΔ: "img/day-flower6.png",
        ᐃⲆᐃΔⲆⲆⵠ: "img/day-flower7.png",
        ΔΔⵠΔᐃᐃᐃ: "img/day-flower8.png",
        ⵠΔⵠⵠΔⲆᐃ: "img/day-flower9.png",
        ΔⲆΔᐃΔᐃᐃ: "img/day-herb16.png",
        ⵠᐃⵠⵠᐃⵠⲆ: "img/day-herb17.png",
        ΔΔΔᐃΔΔᐃ: "img/day-herb18.png",
        ᐃΔⲆᐃΔΔⲆ: "img/day-herb19.png",
        ᐃⲆᐃΔⵠⵠΔ: "img/day-herb20.png",
        ⵠⵠᐃᐃⲆᐃⲆ: "img/day-herb21.png",
        ⲆᐃⵠᐃΔᐃⵠ: "img/night-herb0.png",
        ⵠᐃΔⲆⲆᐃⲆ: "img/night-herb1.png",
        ᐃᐃⵠᐃⵠΔⵠ: "img/night-herb2.png",
        ᐃᐃⵠΔΔⵠⲆ: "img/night-herb3.png",
        ⵠᐃⵠⵠᐃΔⲆ: "img/night-herb4.png",
        ⲆⵠⵠΔⵠⵠⵠ: "img/night-herb5.png",
        ⲆⵠΔⲆⲆᐃΔ: "img/night-herb6.png",
        ᐃⲆΔⲆⵠⵠⵠ: "img/night-herb7.png",
        ⲆⵠΔΔⵠᐃΔ: "img/night-herb8.png",
        ΔⵠΔⵠΔΔᐃ: "img/night-herb9.png",
        ΔᐃΔᐃΔⵠⲆ: "img/night-herb10.png",
        ΔᐃΔⲆⵠⲆⲆ: "img/night-herb11.png",
        ⲆⵠⲆⵠⲆᐃⲆ: "img/night-herb12.png",
        ⲆⲆⵠⵠⲆΔΔ: "img/night-herb13.png",
        ΔΔⵠΔⵠⵠⲆ: "img/night-herb14.png",
        ⵠⲆᐃᐃΔⵠⲆ: "img/night-herb15.png",
        ᐃᐃⵠⲆΔⲆΔ: "img/night-shell0.png",
        ⵠΔⵠⵠΔᐃᐃ: "img/night-shell1.png",
        ᐃⲆⵠⲆΔΔΔ: "img/night-shell2.png",
        ⵠᐃᐃⲆⵠⵠΔ: "img/night-leaf1.png",
        ΔΔⲆᐃᐃᐃⲆ: "img/night-leaf2.png",
        ᐃΔᐃΔΔⲆΔ: "img/night-leaf3.png",
        ᐃⵠⵠⲆⲆᐃⵠ: "img/night-leaf4.png",
        ΔΔⲆⵠⲆᐃᐃ: "img/night-leaf5.png",
        ΔⵠⵠᐃⵠⲆⲆ: "img/night-leaf6.png",
        ⵠΔΔⵠᐃΔⲆ: "img/night-leaf7.png",
        ⵠⵠᐃᐃⵠΔΔ: "img/night-leaf8.png",
        ΔⵠⲆᐃⲆⲆᐃ: "img/night-rock0.png",
        ⲆⵠⵠΔⲆⲆΔ: "img/night-rock1.png",
        ᐃⲆⵠᐃⵠⵠΔ: "img/night-rock2.png",
        ⲆΔⵠᐃⲆᐃᐃ: "img/night-rock3.png",
        ⲆΔΔᐃᐃᐃΔ: "img/night-rock4.png",
        ⲆⲆⵠᐃΔΔᐃ: "img/night-rock5.png",
        ᐃᐃⲆⵠⲆⵠⵠ: "img/night-rock6.png",
        ⲆⲆⵠⵠⵠᐃᐃ: "img/night-rock7.png",
        ᐃⲆⵠⲆⵠΔΔ: "img/night-rock8.png",
        ⲆΔⵠⲆᐃⲆΔ: "img/night-rock9.png",
        ⵠⵠⲆΔΔⵠⵠ: "img/night-rock10.png",
        ᐃⲆᐃᐃⵠⲆᐃ: "img/night-rock11.png",
        ᐃⵠΔⲆⵠᐃΔ: "img/night-rock12.png",
        ᐃⲆΔⲆΔⵠᐃ: "img/night-rock13.png",
        ⵠⲆᐃᐃΔⵠⵠ: "img/night-flower1.png",
        ᐃⲆⲆᐃΔⲆΔ: "img/night-flower2.png",
        ΔⵠΔᐃᐃᐃᐃ: "img/night-flower3.png",
        ⲆΔⵠⵠⲆⲆⵠ: "img/night-flower4.png",
        ⲆⵠⲆΔΔᐃⲆ: "img/night-flower5.png",
        ⵠⵠΔⵠΔⲆᐃ: "img/night-flower6.png",
        ⵠᐃΔΔⵠⵠΔ: "img/night-flower7.png",
        ⵠΔΔᐃⵠᐃᐃ: "img/night-flower8.png",
        ΔⵠⵠΔᐃᐃΔ: "img/night-flower9.png",
        ΔⲆⵠᐃΔΔⲆ: "img/night-herb16.png",
        ⲆⵠⲆΔⲆⲆᐃ: "img/night-herb17.png",
        ᐃⵠᐃᐃᐃⲆᐃ: "img/night-herb18.png",
        ᐃⵠΔⲆⵠⲆΔ: "img/night-herb19.png",
        ᐃΔᐃⵠᐃⵠⲆ: "img/night-herb20.png",
        ΔⲆⲆᐃΔᐃΔ: "img/night-herb21.png",
        ᐃⵠᐃᐃⵠΔΔ: "img/day-river000-010-000.png",
        ⵠΔᐃᐃΔⵠⲆ: "img/day-river000-010-010.png",
        ΔⵠΔⵠⵠⵠΔ: "img/day-river000-011-000.png",
        ⲆⵠⵠⲆᐃⲆΔ: "img/day-river000-011-010.png",
        ⲆᐃᐃⵠⲆⲆⵠ: "img/day-river000-011-011.png",
        ⲆΔΔⲆⵠⲆⵠ: "img/day-river000-110-000.png",
        ⲆΔΔⲆᐃⲆⵠ: "img/day-river000-110-010.png",
        ⵠⲆⲆⵠⵠΔΔ: "img/day-river000-110-110.png",
        ⲆⵠⵠᐃⲆⲆⵠ: "img/day-river000-111-000.png",
        ΔⵠⵠⵠΔᐃᐃ: "img/day-river000-111-010.png",
        ΔⲆⲆⵠΔᐃⵠ: "img/day-river000-111-011.png",
        ⲆⲆᐃᐃⵠᐃΔ: "img/day-river000-111-110.png",
        ΔᐃᐃΔⵠᐃΔ: "img/day-river000-111-111.png",
        ᐃᐃΔΔⵠⲆᐃ: "img/day-river010-010-000.png",
        ᐃⲆⵠⵠⵠᐃⵠ: "img/day-river010-010-010.png",
        ⵠᐃᐃΔⲆⵠⵠ: "img/day-river010-011-000.png",
        ⲆⲆΔⵠⵠᐃΔ: "img/day-river010-011-010.png",
        ⲆᐃᐃᐃⵠᐃΔ: "img/day-river010-011-011.png",
        ᐃΔⵠΔΔⲆⲆ: "img/day-river010-110-000.png",
        ᐃΔⵠΔⲆⲆᐃ: "img/day-river010-110-010.png",
        ΔᐃⲆΔΔΔⲆ: "img/day-river010-110-110.png",
        ΔⵠΔᐃⵠⵠⲆ: "img/day-river010-111-000.png",
        ᐃⲆⵠᐃⲆⲆΔ: "img/day-river010-111-010.png",
        ΔᐃΔΔΔⵠⲆ: "img/day-river010-111-011.png",
        ΔⵠⲆᐃΔᐃΔ: "img/day-river010-111-110.png",
        ⲆᐃᐃⵠΔΔⵠ: "img/day-river010-111-111.png",
        ⵠᐃⲆⲆΔⲆᐃ: "img/day-river011-011-000.png",
        ΔⵠΔⵠᐃⵠⲆ: "img/day-river011-011-010.png",
        ᐃΔΔⵠᐃᐃᐃ: "img/day-river011-011-011.png",
        ⲆⲆᐃⲆⵠΔⲆ: "img/day-river011-111-000.png",
        ΔⵠᐃᐃΔΔⲆ: "img/day-river011-111-010.png",
        ⵠᐃΔⲆᐃᐃΔ: "img/day-river011-111-011.png",
        ⲆᐃΔᐃΔᐃⲆ: "img/day-river011-111-110.png",
        ⲆΔⲆⲆⲆⲆⵠ: "img/day-river011-111-111.png",
        ΔᐃᐃⲆᐃᐃⵠ: "img/day-river110-110-000.png",
        ᐃⲆⲆᐃⵠⵠᐃ: "img/day-river110-110-010.png",
        ⵠΔᐃⵠⲆᐃⵠ: "img/day-river110-110-110.png",
        ⵠⲆΔⵠⵠΔᐃ: "img/day-river110-111-000.png",
        ᐃⲆⲆᐃⵠⵠⵠ: "img/day-river110-111-010.png",
        ΔⵠΔᐃⵠᐃΔ: "img/day-river110-111-011.png",
        ᐃᐃᐃᐃⵠⵠⵠ: "img/day-river110-111-110.png",
        ΔⵠᐃⵠᐃΔᐃ: "img/day-river110-111-111.png",
        Ⲇᐃᐃᐃⵠᐃⵠ: "img/day-river111-111-011.png",
        ᐃΔⵠⵠΔᐃⵠ: "img/day-river111-111-110.png",
        Ⲇᐃᐃᐃⵠᐃⵠ: "img/day-river111-111-011.png",
        ΔΔᐃΔⵠᐃΔ: "img/day-river111-111-000.png",
        ΔΔⲆΔᐃᐃⲆ: "img/day-river111-111-111.png",
        ΔΔᐃΔⵠⲆⵠ: "img/day-river111-111-010.png",
        ⲆᐃⲆᐃⵠΔᐃ: "img/night-river000-010-000.png",
        ΔᐃⵠΔᐃᐃⲆ: "img/night-river000-010-010.png",
        ⲆⵠⲆᐃⵠᐃᐃ: "img/night-river000-011-000.png",
        ⲆⲆⲆⵠᐃᐃΔ: "img/night-river000-011-010.png",
        ⵠⵠⵠΔᐃᐃΔ: "img/night-river000-011-011.png",
        ᐃⵠⵠⵠⵠⵠⵠ: "img/night-river000-110-000.png",
        ᐃⲆΔΔΔᐃΔ: "img/night-river000-110-010.png",
        ⲆΔᐃⲆΔᐃΔ: "img/night-river000-110-110.png",
        ⲆⵠⵠⲆⵠⵠΔ: "img/night-river000-111-000.png",
        ⵠΔⲆⵠⲆⵠⲆ: "img/night-river000-111-010.png",
        ΔΔⵠⵠΔⵠⲆ: "img/night-river000-111-011.png",
        ⵠΔⵠᐃΔΔⵠ: "img/night-river000-111-110.png",
        ᐃⵠΔⵠΔᐃΔ: "img/night-river000-111-111.png",
        ⵠⵠᐃΔᐃⵠᐃ: "img/night-river010-010-000.png",
        ⵠᐃⵠᐃⲆⲆⲆ: "img/night-river010-010-010.png",
        ⲆⵠⵠⲆΔⲆⲆ: "img/night-river010-011-000.png",
        ⵠⲆⲆⵠᐃΔⲆ: "img/night-river010-011-010.png",
        ⲆⵠΔΔᐃᐃᐃ: "img/night-river010-011-011.png",
        ⲆΔᐃΔᐃᐃᐃ: "img/night-river010-110-000.png",
        ⲆⵠᐃⲆᐃⲆⲆ: "img/night-river010-110-010.png",
        ⵠΔⵠᐃΔⵠᐃ: "img/night-river010-110-110.png",
        ΔΔΔΔⵠᐃᐃ: "img/night-river010-111-000.png",
        ΔⵠⵠᐃⲆᐃᐃ: "img/night-river010-111-010.png",
        ⲆᐃⲆΔⵠⵠⲆ: "img/night-river010-111-011.png",
        ΔᐃᐃΔΔⵠᐃ: "img/night-river010-111-110.png",
        ΔΔⲆⲆⲆⲆⵠ: "img/night-river010-111-111.png",
        ᐃᐃⵠΔⲆⵠᐃ: "img/night-river011-011-000.png",
        ⲆΔΔΔⵠΔᐃ: "img/night-river011-011-010.png",
        ⵠΔΔⲆⵠⵠⵠ: "img/night-river011-011-011.png",
        ⲆⲆⲆᐃⵠᐃⵠ: "img/night-river011-111-000.png",
        ⲆΔᐃΔⵠⵠΔ: "img/night-river011-111-010.png",
        ΔⲆᐃⵠⲆΔⵠ: "img/night-river011-111-011.png",
        ΔᐃᐃΔΔⲆΔ: "img/night-river011-111-110.png",
        ᐃⲆΔⵠᐃᐃᐃ: "img/night-river011-111-111.png",
        ΔⲆⲆΔᐃⵠⲆ: "img/night-river110-110-000.png",
        ⵠⲆΔⵠΔⲆⵠ: "img/night-river110-110-010.png",
        ⵠΔΔⲆΔΔᐃ: "img/night-river110-110-110.png",
        ᐃΔᐃⵠⵠᐃⲆ: "img/night-river110-111-000.png",
        ΔᐃⵠⲆⲆᐃΔ: "img/night-river110-111-010.png",
        ⵠⵠⵠⵠⲆⵠⵠ: "img/night-river110-111-011.png",
        ΔΔⲆⵠⵠⵠΔ: "img/night-river110-111-110.png",
        ΔⲆⵠΔⲆⲆⵠ: "img/night-river110-111-111.png",
        ΔⵠⲆⲆᐃⵠⵠ: "img/night-river111-111-011.png",
        ᐃᐃᐃΔⵠⲆⲆ: "img/night-river111-111-110.png",
        ΔⵠⲆⲆᐃⵠⵠ: "img/night-river111-111-011.png",
        ᐃΔⲆⲆⲆⵠⵠ: "img/night-river111-111-000.png",
        ΔᐃⵠΔᐃⲆⲆ: "img/night-river111-111-111.png",
        ᐃᐃᐃⲆᐃΔΔ: "img/night-river111-111-010.png",
        ΔᐃⲆΔⲆⲆⵠ: "img/day-pebblecompo1.png",
        ⵠⲆᐃΔⵠ: "img/day-pebblecompo2.png",
        ΔⵠᐃⲆᐃ: "img/day-pebblecompo3.png",
        ΔⵠᐃⲆΔᐃⲆ: "img/day-pebblecompo4.png",
        ᐃⵠᐃⵠΔ: "img/day-pebblecompo5.png",
        ⲆᐃⵠⲆⵠ: "img/day-pebblecompo6.png",
        ΔⵠΔⲆΔ: "img/day-pebblecompo7.png",
        ᐃΔⵠⲆᐃⵠᐃ: "img/day-pebblecompo8.png",
        ᐃΔΔᐃⵠⵠⵠ: "img/day-pebblecompo9.png",
        ⲆⵠⲆᐃⵠⲆⵠ: "img/day-pebblecompo10.png",
        ⵠᐃΔᐃⲆ: "img/day-pebblecompo11.png",
        ⵠⲆⵠᐃᐃⵠᐃ: "img/day-pebblecompo12.png",
        ⵠⵠⵠⲆⲆⵠᐃ: "img/day-pebblecompo13.png",
        ᐃⵠⲆΔⵠΔΔ: "img/day-pebblecompo14.png",
        ⲆⵠⲆⵠⵠᐃᐃ: "img/day-pebblecompo15.png",
        ⲆⲆⵠⵠⵠᐃΔ: "img/day-pebblecompo16.png",
        ⲆⵠⵠⵠΔ: "img/day-pebblecompo17.png",
        ᐃⵠᐃⵠⲆᐃⲆ: "img/day-pebblecompo18.png",
        ᐃⵠᐃΔᐃᐃⵠ: "img/day-pebblecompo19.png",
        ᐃΔΔⵠΔ: "img/day-pebblecompo20.png",
        ⵠⲆΔᐃΔ: "img/day-pebblecompo21.png",
        ΔⵠⲆⵠⲆᐃᐃ: "img/day-pebblecompo22.png",
        ᐃᐃΔΔⵠΔᐃ: "img/day-pebblecompo23.png",
        ΔᐃⲆᐃΔΔⲆ: "img/day-pebblecompo24.png",
        ΔΔΔⲆᐃ: "img/day-pebblecompo25.png",
        ⵠᐃⲆΔⵠ: "img/day-pebblecompo26.png",
        ⲆᐃⵠⲆᐃᐃⲆ: "img/day-pebblecompo27.png",
        ⵠⵠⲆΔᐃ: "img/day-pebblecompo28.png",
        ΔⲆⲆΔⵠⲆⲆ: "img/night-pebblecompo1.png",
        ᐃᐃⵠᐃⵠ: "img/night-pebblecompo2.png",
        ΔⲆΔⵠⲆ: "img/night-pebblecompo3.png",
        ΔΔΔᐃΔΔⲆ: "img/night-pebblecompo4.png",
        ᐃⲆⵠΔⵠ: "img/night-pebblecompo5.png",
        ⲆᐃⵠΔⲆ: "img/night-pebblecompo6.png",
        ⵠⵠΔⲆΔ: "img/night-pebblecompo7.png",
        ᐃᐃⵠⵠⲆᐃΔ: "img/night-pebblecompo8.png",
        ⵠΔⲆⲆΔΔΔ: "img/night-pebblecompo9.png",
        ᐃⵠΔⵠΔΔΔ: "img/night-pebblecompo10.png",
        ΔΔᐃⲆᐃ: "img/night-pebblecompo11.png",
        ⵠᐃⵠⵠΔᐃⲆ: "img/night-pebblecompo12.png",
        ⵠⲆⵠΔⵠⲆᐃ: "img/night-pebblecompo13.png",
        ⲆᐃⲆΔΔΔⲆ: "img/night-pebblecompo14.png",
        ⵠΔⲆᐃⲆΔⲆ: "img/night-pebblecompo15.png",
        ΔᐃΔⵠⲆⲆᐃ: "img/night-pebblecompo16.png",
        ΔᐃᐃΔⵠ: "img/night-pebblecompo17.png",
        ΔⵠⵠⵠⵠⲆⲆ: "img/night-pebblecompo18.png",
        ᐃᐃⲆⵠΔᐃΔ: "img/night-pebblecompo19.png",
        ⲆᐃⵠⵠΔ: "img/night-pebblecompo20.png",
        ⵠΔᐃⲆⵠ: "img/night-pebblecompo21.png",
        ΔⵠΔⲆⲆᐃⲆ: "img/night-pebblecompo22.png",
        ⲆⵠⵠⲆⲆᐃⲆ: "img/night-pebblecompo23.png",
        ᐃⵠΔⵠⲆΔΔ: "img/night-pebblecompo24.png",
        ᐃⵠⵠᐃⲆ: "img/night-pebblecompo25.png",
        ΔᐃΔᐃⲆ: "img/night-pebblecompo26.png",
        ΔᐃΔⲆᐃⲆⵠ: "img/night-pebblecompo27.png",
        ΔᐃΔΔᐃ: "img/night-pebblecompo28.png",
        ⵠΔⵠᐃΔⲆᐃ: "img/day-baby-mammoth.png",
        ⵠᐃᐃⲆⵠΔⲆ: "img/day-baby-mammoth-tamed.png",
        ΔᐃⵠⵠⵠⵠⲆ: "img/day-baby-mammoth-angry.png",
        ⲆⲆᐃⵠᐃᐃΔ: "img/night-baby-mammoth.png",
        ⲆΔⲆᐃΔⲆΔ: "img/night-baby-mammoth-tamed.png",
        ⵠᐃⵠΔΔⵠⲆ: "img/night-baby-mammoth-angry.png",
        ΔᐃⲆΔᐃⵠⲆ: "img/inv-mammoth-out.png",
        ΔᐃᐃᐃⵠⲆⵠ: "img/inv-mammoth-in.png",
        ⲆΔⲆⵠⵠᐃᐃ: "img/inv-mammoth-click.png",
        ⲆⵠΔΔⵠⵠⲆ: "img/hurt-baby-mammoth.png",
        ΔΔⲆᐃⲆⵠᐃ: "img/baby-mammoth-step.png",
        ᐃⲆⲆⵠᐃᐃⵠ: "img/day-flower-hat.png",
        ᐃΔΔΔΔΔΔ: "img/night-flower-hat.png",
        ⲆΔⵠΔⲆⲆⲆ: "img/inv-flower-hat-out.png",
        ΔⲆⲆᐃⲆⲆΔ: "img/inv-flower-hat-in.png",
        ⵠᐃᐃⵠⵠᐃⲆ: "img/inv-flower-hat-click.png",
        ⵠⵠΔⲆᐃⵠⲆ: "img/day-fur-hat.png",
        ᐃⵠⲆⵠΔΔⵠ: "img/night-fur-hat.png",
        ΔΔᐃⲆΔΔⵠ: "img/inv-fur-hat-out.png",
        ᐃΔⲆⲆᐃΔⲆ: "img/inv-fur-hat-in.png",
        ⲆⲆᐃΔⲆⲆᐃ: "img/inv-fur-hat-click.png",
        ⵠⲆⲆΔΔᐃⵠ: "img/day-mammoth.png",
        ⵠΔⲆᐃᐃᐃⵠ: "img/night-mammoth.png",
        ⲆⲆⵠᐃΔⵠⲆ: "img/hurt-mammoth.png",
        ᐃⲆΔΔⵠⲆⲆ: "img/inv-mammoth-fur-out.png",
        ⵠΔΔⲆΔⵠΔ: "img/inv-mammoth-fur-in.png",
        ⲆⵠΔⲆⲆΔⲆ: "img/inv-mammoth-fur-click.png",
        ⵠⲆⲆΔⵠᐃΔ: "img/inv-wood-bow-out.png",
        ΔᐃΔΔⲆΔΔ: "img/inv-wood-bow-in.png",
        ΔᐃⵠⲆⲆᐃᐃ: "img/inv-wood-bow-click.png",
        ΔᐃⵠΔΔⲆᐃⲆᐃ: "img/inv-wood-arrow-out.png",
        ΔⵠⵠΔΔⵠΔΔΔ: "img/inv-wood-arrow-in.png",
        ⵠⵠⵠΔΔᐃᐃⲆⲆ: "img/inv-wood-arrow-click.png",
        ᐃᐃⲆⵠⵠᐃⵠⲆᐃ: "img/day-wood-bow2.png",
        ΔᐃⵠⵠⲆΔⵠᐃⲆ: "img/night-wood-bow2.png",
        ΔΔⲆⲆⵠᐃⲆ: "img/day-wood-arrow.png",
        ΔΔΔΔⲆⲆⵠ: "img/night-wood-arrow.png",
        ᐃⲆΔⲆⵠⵠⵠᐃΔ: "img/inv-stone-bow-out.png",
        ΔᐃΔⲆΔⲆⵠᐃᐃ: "img/inv-stone-bow-in.png",
        ᐃⵠᐃᐃⵠⵠᐃⲆΔ: "img/inv-stone-bow-click.png",
        ⲆΔⲆᐃᐃΔⲆⵠΔ: "img/inv-stone-arrow-out.png",
        ΔᐃⲆᐃⲆᐃᐃΔΔ: "img/inv-stone-arrow-in.png",
        ⲆⲆΔᐃΔᐃⵠΔΔ: "img/inv-stone-arrow-click.png",
        ΔΔⵠⲆΔᐃⵠΔΔ: "img/day-stone-bow.png",
        ⲆᐃⵠⵠⵠⲆⲆΔΔ: "img/night-stone-bow.png",
        ⵠΔⵠᐃⲆΔᐃ: "img/day-stone-arrow.png",
        ΔᐃΔⲆΔᐃᐃ: "img/night-stone-arrow.png",
        ΔⲆⲆΔⵠⵠΔΔΔ: "img/inv-gold-bow-out.png",
        ᐃᐃⲆⲆᐃᐃΔⲆᐃ: "img/inv-gold-bow-in.png",
        ⲆΔⵠⲆⲆⲆⲆᐃⲆ: "img/inv-gold-bow-click.png",
        ΔΔᐃⲆΔᐃⲆᐃⵠ: "img/inv-gold-arrow-out.png",
        ⵠᐃΔⵠΔΔⲆⵠᐃ: "img/inv-gold-arrow-in.png",
        ᐃⲆΔᐃⵠΔⵠⲆⲆ: "img/inv-gold-arrow-click.png",
        ⵠΔΔⵠΔᐃⲆΔᐃ: "img/day-gold-bow.png",
        ⵠⵠⵠⵠⲆᐃΔⵠΔ: "img/night-gold-bow.png",
        ⵠᐃᐃΔⲆᐃᐃ: "img/day-gold-arrow.png",
        ⲆⲆΔΔⵠⲆⵠ: "img/night-gold-arrow.png",
        ΔΔᐃⵠᐃⵠᐃΔⵠ: "img/inv-diamond-bow-out.png",
        ΔⲆⵠⵠⲆⲆᐃⲆΔ: "img/inv-diamond-bow-in.png",
        ᐃⲆⲆⲆⵠΔᐃᐃⵠ: "img/inv-diamond-bow-click.png",
        ΔⵠΔⵠΔΔⲆⵠᐃ: "img/inv-diamond-arrow-out.png",
        ᐃⵠᐃⲆⲆᐃⲆⲆⵠ: "img/inv-diamond-arrow-in.png",
        ΔΔⵠⲆⵠⲆⲆᐃⲆ: "img/inv-diamond-arrow-click.png",
        ΔⲆΔΔᐃⲆᐃΔΔ: "img/day-diamond-bow.png",
        ⲆⵠⵠΔᐃⲆⲆΔⲆ: "img/night-diamond-bow.png",
        ᐃⵠᐃⵠΔⵠⵠ: "img/day-diamond-arrow.png",
        ⲆⵠⵠⲆᐃᐃⵠ: "img/night-diamond-arrow.png",
        ᐃⲆΔⲆΔΔΔᐃΔ: "img/inv-amethyst-bow-out.png",
        ⲆΔΔΔⵠⵠᐃⵠᐃ: "img/inv-amethyst-bow-in.png",
        ⵠᐃᐃΔᐃⲆⵠΔⵠ: "img/inv-amethyst-bow-click.png",
        ⵠᐃⵠⲆⵠⲆⲆΔᐃ: "img/inv-amethyst-arrow-out.png",
        ⲆⵠᐃⵠᐃⲆᐃΔᐃ: "img/inv-amethyst-arrow-in.png",
        ΔΔᐃⲆⵠᐃⵠᐃⲆ: "img/inv-amethyst-arrow-click.png",
        ⵠΔⵠΔⲆᐃᐃΔⵠ: "img/day-amethyst-bow.png",
        ᐃᐃⵠⲆᐃⵠΔΔⲆ: "img/night-amethyst-bow.png",
        ᐃΔⵠᐃΔⵠⵠ: "img/day-amethyst-arrow.png",
        ⲆⵠⲆᐃⲆᐃΔ: "img/night-amethyst-arrow.png",
        ⲆⲆᐃⲆΔⲆⵠⲆⵠ: "img/inv-dragon-bow-out.png",
        ⲆⵠⵠΔⵠⲆⵠᐃⵠ: "img/inv-dragon-bow-in.png",
        ⲆⲆᐃΔΔⲆΔⵠⵠ: "img/inv-dragon-bow-click.png",
        ⵠᐃⲆⲆⲆⲆⵠΔⲆ: "img/inv-dragon-arrow-out.png",
        ⲆΔΔⲆⲆⵠⵠⵠᐃ: "img/inv-dragon-arrow-in.png",
        ΔΔⵠΔⵠΔΔΔⲆ: "img/inv-dragon-arrow-click.png",
        ᐃᐃⵠⲆΔⲆΔⵠⵠ: "img/day-dragon-bow.png",
        ⲆⲆⵠᐃⲆⵠⵠᐃᐃ: "img/night-dragon-bow.png",
        ⵠⲆⵠⲆΔⲆΔ: "img/day-dragon-arrow.png",
        ⵠᐃⵠᐃΔᐃΔ: "img/night-dragon-arrow.png",
        ᐃΔⲆⵠΔⵠⲆⵠᐃ: "img/inv-reidite-bow-out.png",
        ⲆⵠⲆᐃⲆⵠⲆΔⵠ: "img/inv-reidite-bow-in.png",
        ΔΔᐃΔⵠᐃΔᐃᐃ: "img/inv-reidite-bow-click.png",
        ⵠⲆᐃΔᐃΔⵠⵠⵠ: "img/inv-reidite-arrow-out.png",
        ᐃⵠⲆΔᐃⲆⲆⵠΔ: "img/inv-reidite-arrow-in.png",
        ᐃⲆⵠⲆᐃΔΔⵠᐃ: "img/inv-reidite-arrow-click.png",
        ΔΔᐃⵠᐃⵠⵠⲆⵠ: "img/day-reidite-bow.png",
        ⵠⵠⵠΔΔᐃⲆⲆⵠ: "img/night-reidite-bow.png",
        ⵠᐃⵠⵠΔⵠⵠ: "img/day-reidite-arrow.png",
        ⵠᐃⵠΔΔᐃΔⵠⵠ: "img/night-reidite-arrow.png",
        ᐃᐃᐃᐃⵠⵠⲆΔⵠ: "img/inv-wooden-axe-out.png",
        ⲆᐃΔⵠΔⵠⲆⲆᐃ: "img/inv-wooden-axe-in.png",
        ⵠⵠⲆⲆⵠⵠᐃⵠΔ: "img/inv-wooden-axe-click.png",
        ⵠΔΔⲆⲆΔΔᐃᐃ: "img/day-wooden-axe.png",
        ΔᐃⵠΔᐃⲆⵠᐃᐃ: "img/night-wooden-axe.png",
        ⲆΔⵠⲆⲆᐃΔⵠⵠ: "img/inv-stone-axe-out.png",
        ⲆᐃΔⵠᐃⵠⵠᐃΔ: "img/inv-stone-axe-in.png",
        ΔᐃᐃᐃΔΔᐃΔⲆ: "img/inv-stone-axe-click.png",
        ⵠⵠΔⵠΔΔᐃⲆΔ: "img/day-stone-axe.png",
        ΔΔⵠⲆᐃᐃᐃᐃᐃ: "img/night-stone-axe.png",
        ⵠᐃⲆΔΔΔⵠΔᐃ: "img/inv-golden-axe-out.png",
        ⲆⲆΔᐃⵠΔΔΔᐃ: "img/inv-golden-axe-in.png",
        ⵠⲆⵠⲆᐃΔᐃᐃᐃ: "img/inv-golden-axe-click.png",
        ΔⵠⵠⲆᐃⲆⲆⵠᐃ: "img/day-golden-axe.png",
        ⲆΔⲆⵠⵠᐃⵠⲆⵠ: "img/night-golden-axe.png",
        ⵠΔᐃΔᐃΔΔⲆⵠ: "img/inv-diamond-axe-out.png",
        ⲆᐃΔΔΔΔᐃΔᐃ: "img/inv-diamond-axe-in.png",
        ᐃΔⲆⵠⵠᐃΔⲆᐃ: "img/inv-diamond-axe-click.png",
        ᐃⵠⵠⲆΔᐃⵠΔΔ: "img/day-diamond-axe.png",
        ΔⵠⵠᐃⵠⵠΔΔΔ: "img/night-diamond-axe.png",
        ⲆΔⲆⲆΔᐃⵠⲆᐃ: "img/inv-amethyst-axe-out.png",
        ΔⲆⲆᐃΔⲆⲆⵠⲆ: "img/inv-amethyst-axe-in.png",
        ⲆⲆⵠΔⵠⲆⵠⵠᐃ: "img/inv-amethyst-axe-click.png",
        ᐃⵠⵠΔⵠⲆᐃⵠⵠ: "img/day-amethyst-axe.png",
        ᐃᐃⵠᐃΔⵠΔⵠᐃ: "img/night-amethyst-axe.png",
        ⵠᐃⲆⲆⵠᐃᐃΔⵠ: "img/inv-reidite-axe-out.png",
        ⵠⲆΔⲆⵠΔⵠⲆΔ: "img/inv-reidite-axe-in.png",
        ⲆΔⵠᐃⵠᐃⲆΔⵠ: "img/inv-reidite-axe-click.png",
        ⵠⲆⵠⲆⲆΔΔⲆⵠ: "img/day-reidite-axe.png",
        ᐃΔⲆⲆΔⲆᐃⵠⵠ: "img/night-reidite-axe.png",
        ⲆᐃᐃΔᐃⵠᐃ: "img/bandage-activated.png",
        ⲆⵠⲆⵠⵠⲆΔ: "img/auto-feed.png",
        ᐃⵠⵠⵠᐃⲆⵠ: "img/stop-regeneration.png",
        ᐃᐃᐃΔᐃⲆᐃ: "img/stop-regeneration2.png",
        ΔⲆⲆᐃⵠΔᐃⲆⲆ: "img/day-wood-platform.png",
        ΔⵠⵠᐃⵠⲆᐃΔΔ: "img/night-wood-platform.png",
        ⵠΔᐃⵠⵠⵠΔᐃᐃ: "img/inv-wood-platform-in.png",
        ⵠΔᐃⲆᐃⵠᐃΔⵠ: "img/inv-wood-platform-out.png",
        ᐃΔⲆᐃⵠⲆⵠΔᐃ: "img/inv-wood-platform-click.png",
        ᐃⵠΔᐃΔᐃⲆΔΔ: "img/day-wood-shield.png",
        ΔⵠⲆⵠᐃⵠΔⵠΔ: "img/night-wood-shield.png",
        ᐃⲆᐃⲆᐃᐃΔᐃᐃ: "img/day-stone-shield.png",
        ⲆᐃΔᐃⵠⵠᐃⵠΔ: "img/night-stone-shield.png",
        ᐃⲆΔᐃᐃΔⲆᐃΔ: "img/day-gold-shield.png",
        ᐃΔⲆΔᐃⲆΔⲆⵠ: "img/night-gold-shield.png",
        ᐃΔⵠΔⵠⵠΔⵠΔ: "img/day-diamond-shield.png",
        ΔⵠΔᐃⵠⵠⵠⲆᐃ: "img/night-diamond-shield.png",
        ΔⲆᐃⲆᐃΔΔᐃΔ: "img/day-amethyst-shield.png",
        ᐃᐃⲆΔᐃᐃᐃΔⲆ: "img/night-amethyst-shield.png",
        ᐃΔΔⵠⵠᐃᐃΔⲆ: "img/day-reidite-shield.png",
        ᐃᐃΔⵠΔᐃΔᐃᐃ: "img/night-reidite-shield.png",
        ΔⵠⲆⲆΔⵠⲆⵠᐃ: "img/inv-wood-shield-in.png",
        ⵠⲆⲆᐃⲆⵠΔΔᐃ: "img/inv-wood-shield-out.png",
        ΔⵠⲆⵠⵠⵠⲆⵠᐃ: "img/inv-wood-shield-click.png",
        ΔⵠⲆΔⵠⲆⵠⲆⲆ: "img/inv-stone-shield-in.png",
        ⵠΔⵠΔⲆΔⵠᐃⵠ: "img/inv-stone-shield-out.png",
        ᐃΔⲆᐃᐃⵠᐃⲆⵠ: "img/inv-stone-shield-click.png",
        ᐃΔⲆΔΔⵠⲆⲆⲆ: "img/inv-gold-shield-in.png",
        ᐃⵠⵠⲆᐃⵠᐃΔⲆ: "img/inv-gold-shield-out.png",
        ⵠⲆⲆΔΔⵠΔᐃᐃ: "img/inv-gold-shield-click.png",
        ᐃⵠⵠᐃᐃⲆΔⲆⲆ: "img/inv-diamond-shield-in.png",
        ΔΔΔⵠⲆⲆΔᐃⲆ: "img/inv-diamond-shield-out.png",
        ⲆᐃΔⲆᐃⲆᐃⵠⵠ: "img/inv-diamond-shield-click.png",
        ⲆⲆᐃᐃⲆⲆᐃⲆⵠ: "img/inv-amethyst-shield-in.png",
        ΔⲆᐃⲆⲆⵠΔⲆⵠ: "img/inv-amethyst-shield-out.png",
        ⵠΔⲆⲆΔΔⲆΔⵠ: "img/inv-amethyst-shield-click.png",
        ΔⵠⵠⵠΔΔⵠᐃᐃ: "img/inv-reidite-shield-in.png",
        ΔⵠⵠⵠⵠⵠᐃⲆΔ: "img/inv-reidite-shield-out.png",
        ΔⲆΔᐃⵠΔⵠᐃⲆ: "img/inv-reidite-shield-click.png",
        ᐃΔᐃᐃⲆⵠᐃᐃᐃ: "img/day-machete.png",
        ⲆᐃᐃΔΔⵠⲆᐃⵠ: "img/night-machete.png",
        ΔⲆᐃΔΔⲆΔΔΔ: "img/inv-machete-in.png",
        ᐃΔⲆΔᐃᐃⲆᐃΔ: "img/inv-machete-out.png",
        ᐃΔΔⲆⵠᐃᐃⲆⲆ: "img/inv-machete-click.png"
    };
    ⲆᐃΔⵠᐃΔᐃ = [{}];
    ⲆᐃΔⵠᐃΔᐃ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    b = {};
    const Eb = 2;
    const Db = 16;
    const Ib = 1;
    var Sb;
    Sb = {};
    for (var Pb in Mh) {
        b[Pb] = Mh[Pb];
    }
    function Et(b, c, d) {
        const e = b ^ 42898;
        const f = ~(c & 30120) & 30120 | ~(c & 30120) & c;
        const g = ~(d & 28283) & d | ~(d & 28283) & 28283;
        const a = ir(e, f, g, e);
        Cb(f, g, e);
        return (a | 3) & ~(a & 3);
    }
    ᐃⵠ = [];
    aj = {};
    aj.ⲆⵠⲆⲆⵠ = 0;
    aj.ΔᐃᐃΔ = 1;
    aj.Δᐃᐃᐃ = 2;
    aj.ᐃΔⲆΔ = 3;
    aj.ⵠⵠⵠⵠ = 4;
    aj.ⲆⲆΔΔ = 5;
    aj.ⵠᐃⲆⲆ = 6;
    const Qb = 4;
    const _b = 15;
    aj.ⲆⵠⲆᐃᐃⵠᐃ = 7;
    aj.Ⲇⵠᐃⵠᐃ = 8;
    const Fb = 11;
    bj = {};
    ⲆᐃΔⲆ = [];
    const Rb = 13;
    ᐃⲆΔᐃᐃΔⲆ = function (a, b) {
        for (var c = 0; c < a.length; c++) {
            if (b === a[c].id) {
                return c;
            }
        }
        return -1;
    };
    var Gb = [];
    const Ft = ei;
    function Lb(a, b) {
        for (var c = 0; c < Gb.length; c += b) {
            var d = Gb[c];
            if (d[0] === a) {
                Nb(d[0], d[1], d[2], d[3]);
            }
        }
    }
    const Wb = 0;
    const Ob = 8;
    function Nb(b, c, d, e) {
        var f = ⲆᐃΔⲆ[b];
        if (f !== undefined) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / qx.ᐃᐃΔᐃᐃ;
                var m = d * 193 / qx.ⵠΔᐃΔⵠ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                ᐃⵠ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / qx.ᐃᐃΔᐃᐃ;
                m = d * 600 / qx.ⵠΔᐃΔⵠ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                ᐃⵠ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    function qb(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    function Hb(b, c, d, e, f, g) {
        if (g * 2 > e) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    function Ub(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    ΔΔⵠΔᐃᐃΔΔⵠ = function () {
        for (var b = 0; b < 2; b++) {
            ᐃⵠ[818][b].clearRect(0, 0, 193, 193);
            ᐃⵠ[818][b].drawImage(ⲆᐃΔⲆ.MAP[b], 0, 0, 193, 193);
            ᐃⵠ[819][b].clearRect(0, 0, 600, 600);
            ᐃⵠ[819][b].drawImage(ⲆᐃΔⲆ.MAP[b], 0, 0, 600, 600);
            for (var c = qx.ⲆⲆΔⲆ.length - 1; c >= 0; c--) {
                var d = qx.ⲆⲆΔⲆ[c];
                var f = d.x1 * 193 / (qx.ᐃᐃΔᐃᐃ * 100);
                var j = d.y1 * 193 / (qx.ⵠΔᐃΔⵠ * 100);
                var k = d.w * 193 / (qx.ᐃᐃΔᐃᐃ * 100);
                var m = d.ⵠⵠΔ * 193 / (qx.ⵠΔᐃΔⵠ * 100);
                var p = d.x1 * 600 / (qx.ᐃᐃΔᐃᐃ * 100);
                var q = d.y1 * 600 / (qx.ⵠΔᐃΔⵠ * 100);
                var u = d.w * 600 / (qx.ᐃᐃΔᐃᐃ * 100);
                var v = d.ⵠⵠΔ * 600 / (qx.ⵠΔᐃΔⵠ * 100);
                if (qx.ⵠᐃΔⲆⲆ === d.ᐃⲆⲆ) {
                    ᐃⵠ[818][b].drawImage(ⲆᐃΔⲆ.FOREST[b], f, j, k, m);
                    ᐃⵠ[819][b].drawImage(ⲆᐃΔⲆ.FOREST[b], p, q, u, v);
                }
                if (qx.ⲆⲆⵠΔⲆᐃΔ === d.ᐃⲆⲆ) {
                    ᐃⵠ[818][b].drawImage(ⲆᐃΔⲆ.WINTER[b], f, j, k, m);
                    ᐃⵠ[819][b].drawImage(ⲆᐃΔⲆ.WINTER[b], p, q, u, v);
                }
                if (d.ᐃⲆⲆ === qx.ΔᐃⵠⲆΔⲆⲆ) {
                    ᐃⵠ[818][b].drawImage(ⲆᐃΔⲆ.LAVA[b], f, j, k, m);
                    ᐃⵠ[819][b].drawImage(ⲆᐃΔⲆ.LAVA[b], p, q, u, v);
                }
                if (d.ᐃⲆⲆ === qx.ᐃⲆΔⲆⲆΔⲆ) {
                    ᐃⵠ[818][b].drawImage(ⲆᐃΔⲆ.CAVE[b], f, j, k, m);
                    ᐃⵠ[819][b].drawImage(ⲆᐃΔⲆ.CAVE[b], p, q, u, v);
                }
                if (d.ᐃⲆⲆ === qx.ΔΔⵠΔⵠⲆⵠ) {
                    ᐃⵠ[818][b].drawImage(ⲆᐃΔⲆ.DESERT[b], f, j, k, m);
                    ᐃⵠ[819][b].drawImage(ⲆᐃΔⲆ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ⵠΔΔΔⲆΔⲆΔᐃ = function () {
        bj = {
            ΔⲆⵠΔΔ: [{
                id: 0,
                ᐃᐃΔ: Mh.ⵠᐃⲆᐃΔⲆΔ,
                ΔᐃΔ: Mh.ⵠᐃΔΔᐃᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ΔΔᐃΔⵠΔⲆ,
                ⲆᐃᐃΔ: Mh.ΔΔΔΔᐃᐃⲆ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                ᐃᐃΔ: Mh.ΔⲆⲆⵠᐃᐃⵠ,
                ΔᐃΔ: Mh.ΔΔᐃᐃΔⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ΔΔⲆᐃᐃΔⲆ,
                ⲆᐃᐃΔ: Mh.ᐃΔᐃⵠⲆⵠᐃ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠΔⲆⲆ,
                ΔᐃΔ: Mh.ⲆⲆⵠᐃⵠΔⲆ,
                ⵠⵠⵠⲆ: Mh.ΔΔΔΔⲆᐃΔ,
                ⲆᐃᐃΔ: Mh.ΔΔⵠᐃⵠΔΔ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                ᐃᐃΔ: Mh.ⵠⵠΔⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ᐃⵠⵠΔΔᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆΔᐃⵠΔⲆⵠ,
                ⲆᐃᐃΔ: Mh.ΔᐃⵠⵠᐃⵠΔ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                ᐃᐃΔ: Mh.ᐃⲆⲆΔΔⲆⲆ,
                ΔᐃΔ: Mh.ⲆⲆᐃᐃⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃΔᐃⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⵠΔᐃΔᐃⲆᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                ᐃᐃΔ: Mh.ⵠⵠΔΔΔⲆⵠ,
                ΔᐃΔ: Mh.ⲆΔᐃⲆⲆⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠΔᐃΔⲆΔ,
                ⲆᐃᐃΔ: Mh.ΔᐃᐃⵠⵠⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                ᐃᐃΔ: Mh.ⲆᐃᐃⲆⵠⲆᐃ,
                ΔᐃΔ: Mh.ΔⵠⲆᐃⲆⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠΔⲆⲆΔΔᐃ,
                ⲆᐃᐃΔ: Mh.ᐃᐃΔᐃΔᐃᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                ᐃᐃΔ: Mh.ΔⵠᐃⲆⵠⲆΔ,
                ΔᐃΔ: Mh.ⲆᐃᐃΔⵠΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠⲆⲆⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⵠΔⵠᐃᐃᐃΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                ᐃᐃΔ: Mh.ᐃᐃᐃⲆⵠᐃⲆ,
                ΔᐃΔ: Mh.ΔⲆⲆⲆⵠᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠΔᐃᐃⵠᐃ,
                ⲆᐃᐃΔ: Mh.ᐃᐃᐃⵠΔᐃΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                ᐃᐃΔ: Mh.ⲆΔⵠⲆᐃⲆⵠ,
                ΔᐃΔ: Mh.ⵠΔⵠⵠⲆⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⵠΔΔⵠⲆⲆΔ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⲆᐃⵠᐃⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                ᐃᐃΔ: Mh.ⵠᐃⵠΔⵠᐃⲆ,
                ΔᐃΔ: Mh.ⵠᐃⲆᐃᐃⵠΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠⵠⲆΔⲆⲆ,
                ⲆᐃᐃΔ: Mh.ᐃⲆΔⲆΔΔᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                ᐃᐃΔ: Mh.ⲆᐃⵠΔⲆⵠᐃ,
                ΔᐃΔ: Mh.ⵠᐃΔⵠⵠⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⵠΔΔΔΔ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⵠᐃⵠⲆⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                ᐃᐃΔ: Mh.ΔᐃᐃᐃᐃⲆΔ,
                ΔᐃΔ: Mh.ᐃΔⲆᐃⲆᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠΔᐃΔᐃΔ,
                ⲆᐃᐃΔ: Mh.ΔΔᐃᐃⵠⵠⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                ᐃᐃΔ: Mh.ΔΔᐃᐃᐃⲆΔ,
                ΔᐃΔ: Mh.ᐃᐃⵠⵠΔⲆΔ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠΔΔⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃᐃΔⵠᐃⲆΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                ᐃᐃΔ: Mh.ᐃᐃⲆΔΔᐃⲆ,
                ΔᐃΔ: Mh.ⲆΔⵠⵠᐃⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠΔⵠᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃᐃⲆⲆΔⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                ᐃᐃΔ: Mh.ΔᐃⵠⲆⵠⲆΔ,
                ΔᐃΔ: Mh.ΔΔⲆⲆΔΔΔ,
                ⵠⵠⵠⲆ: Mh.ⵠΔΔΔⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⵠᐃᐃⵠⵠⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                ᐃᐃΔ: Mh.ᐃᐃⲆΔΔΔⵠ,
                ΔᐃΔ: Mh.ⲆⵠⵠᐃⵠΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠⲆᐃΔΔ,
                ⲆᐃᐃΔ: Mh.ᐃΔⲆᐃⵠⲆΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                ᐃᐃΔ: Mh.ⵠΔᐃΔΔⵠⵠ,
                ΔᐃΔ: Mh.ⵠⲆⵠⵠⲆⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠⲆᐃᐃⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔⲆⲆᐃᐃⲆⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                ᐃᐃΔ: Mh.ΔⲆⲆΔⲆᐃⵠ,
                ΔᐃΔ: Mh.ᐃⲆⵠᐃΔⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⲆⵠⲆᐃΔ,
                ⲆᐃᐃΔ: Mh.ΔⵠⲆⵠⵠΔᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                ᐃᐃΔ: Mh.ⵠᐃⵠⵠⲆⵠⲆ,
                ΔᐃΔ: Mh.ⲆⵠᐃⵠΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃΔⵠᐃΔᐃⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆΔⲆΔΔΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                ᐃᐃΔ: Mh.ⲆⲆⲆⲆᐃⵠⲆ,
                ΔᐃΔ: Mh.ⵠⵠⲆⵠΔᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠΔⲆᐃΔ,
                ⲆᐃᐃΔ: Mh.ⵠⲆᐃᐃᐃᐃΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                ᐃᐃΔ: Mh.ᐃⲆⲆⲆᐃᐃⲆ,
                ΔᐃΔ: Mh.ΔΔⲆⲆⵠᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠⲆⵠᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔᐃⲆⲆⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                ᐃᐃΔ: Mh.ᐃᐃΔᐃΔΔⵠ,
                ΔᐃΔ: Mh.ⲆᐃΔⵠᐃΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠΔᐃᐃⲆΔⲆ,
                ⲆᐃᐃΔ: Mh.ΔᐃᐃⲆⵠⵠΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                ᐃᐃΔ: Mh.ⵠᐃΔⵠΔᐃΔ,
                ΔᐃΔ: Mh.ⲆΔΔΔᐃⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃᐃΔⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔⲆⲆⲆⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                ᐃᐃΔ: Mh.ⵠⲆⲆⵠⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃⲆⲆᐃⲆᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃᐃᐃⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ΔΔⵠⲆΔᐃᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                ᐃᐃΔ: Mh.ᐃⵠᐃⵠⵠⲆᐃ,
                ΔᐃΔ: Mh.ⲆⵠⵠⲆⵠΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠΔΔΔΔᐃ,
                ⲆᐃᐃΔ: Mh.ᐃᐃΔⲆⵠⲆᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                ᐃᐃΔ: Mh.ᐃᐃⲆⵠⵠⵠᐃ,
                ΔᐃΔ: Mh.ⵠΔⵠⲆⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠⲆΔᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⵠΔᐃⲆΔⲆⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                ᐃᐃΔ: Mh.ᐃᐃⵠⲆΔⲆᐃ,
                ΔᐃΔ: Mh.Ⲇⵠⵠᐃⵠᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⲆΔⵠᐃΔ,
                ⲆᐃᐃΔ: Mh.ᐃⵠΔⵠⵠᐃⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                ᐃᐃΔ: Mh.ⵠⲆΔⵠⵠᐃΔ,
                ΔᐃΔ: Mh.ⵠᐃⲆⵠⲆⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ΔᐃᐃⵠⲆⵠΔ,
                ⲆᐃᐃΔ: Mh.ΔⵠⲆⵠΔⵠᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                ᐃᐃΔ: Mh.ⲆⲆⲆᐃᐃⲆⵠ,
                ΔᐃΔ: Mh.ᐃΔᐃⲆⲆⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ΔΔⲆᐃⵠⵠΔ,
                ⲆᐃᐃΔ: Mh.ⵠᐃⲆⲆΔΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                ᐃᐃΔ: Mh.ΔⲆΔⵠⲆΔⲆ,
                ΔᐃΔ: Mh.ⵠⵠᐃᐃᐃⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠᐃⲆᐃᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⲆΔⲆΔⵠⲆⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                ᐃᐃΔ: Mh.ⵠⲆⲆⲆⵠΔⲆ,
                ΔᐃΔ: Mh.ΔⵠᐃⲆⲆΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠΔΔᐃᐃΔ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔᐃᐃΔⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                ᐃᐃΔ: Mh.ᐃᐃΔᐃⵠᐃΔ,
                ΔᐃΔ: Mh.ΔᐃⲆᐃᐃᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃᐃⵠⲆⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⵠΔᐃⲆⵠᐃⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                ᐃᐃΔ: Mh.ⲆⲆΔΔΔᐃⵠ,
                ΔᐃΔ: Mh.ⲆⵠⲆᐃᐃⲆΔ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔⲆⵠⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⵠΔⵠΔᐃΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                ᐃᐃΔ: Mh.ⲆᐃΔᐃⲆⵠⲆ,
                ΔᐃΔ: Mh.ⵠᐃΔⲆᐃⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⵠᐃΔΔᐃ,
                ⲆᐃᐃΔ: Mh.ΔᐃⲆᐃⲆⲆⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                ᐃᐃΔ: Mh.ΔⲆΔᐃΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠᐃⲆᐃᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠᐃⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⲆᐃⵠΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                ᐃᐃΔ: Mh.ⵠⲆΔⲆⵠⵠⵠ,
                ΔᐃΔ: Mh.ΔΔⵠⵠⵠΔΔ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔᐃᐃⲆΔ,
                ⲆᐃᐃΔ: Mh.ⵠⲆᐃⵠⵠⵠⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                ᐃᐃΔ: Mh.ΔⵠᐃⲆᐃΔΔ,
                ΔᐃΔ: Mh.ΔⲆΔᐃΔⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆΔⵠΔⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⵠⵠΔᐃⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                ᐃᐃΔ: Mh.ΔΔⲆΔᐃⲆⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆⵠΔⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⲆΔᐃⲆⲆⲆΔ,
                ⲆᐃᐃΔ: Mh.ΔᐃⲆΔⵠⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                ᐃᐃΔ: Mh.ΔΔᐃΔᐃᐃⲆ,
                ΔᐃΔ: Mh.ᐃⵠⵠΔⵠⵠᐃ,
                ⵠⵠⵠⲆ: Mh.Ⲇᐃᐃⵠⵠⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⵠⲆⲆⲆᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                ᐃᐃΔ: Mh.ⲆᐃⵠⵠⲆᐃΔ,
                ΔᐃΔ: Mh.ⵠᐃΔⵠⲆᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⵠⲆΔⵠⲆ,
                ⲆᐃᐃΔ: Mh.ΔⵠⵠⲆᐃⵠΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                ᐃᐃΔ: Mh.ΔⲆⲆⵠⵠⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆⲆⲆⵠⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃΔⵠⵠⲆᐃⵠ,
                ⲆᐃᐃΔ: Mh.ΔᐃⲆᐃᐃΔΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                ᐃᐃΔ: Mh.ⵠΔⵠⵠᐃⲆᐃ,
                ΔᐃΔ: Mh.ⵠⵠΔⲆⲆⵠΔ,
                ⵠⵠⵠⲆ: Mh.ᐃΔⵠⵠⵠΔⲆ,
                ⲆᐃᐃΔ: Mh.ΔⲆⵠⲆⲆⵠⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                ᐃᐃΔ: Mh.ⲆᐃΔᐃΔᐃᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔΔⲆⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔΔΔᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔᐃᐃⵠΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                ᐃᐃΔ: Mh.ⲆⵠΔΔΔᐃⵠ,
                ΔᐃΔ: Mh.ⲆⵠⲆᐃⵠⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠⵠⲆⵠⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔⵠⲆⲆⲆⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                ᐃᐃΔ: Mh.ᐃΔⵠΔᐃᐃᐃ,
                ΔᐃΔ: Mh.ⲆᐃⵠⵠⲆⲆΔ,
                ⵠⵠⵠⲆ: Mh.ΔⵠΔᐃΔΔᐃ,
                ⲆᐃᐃΔ: Mh.ᐃᐃᐃⲆⵠⲆⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                ᐃᐃΔ: Mh.ΔᐃᐃᐃΔⲆⵠ,
                ΔᐃΔ: Mh.ⲆⲆⲆᐃΔΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃΔⲆⲆΔ,
                ⲆᐃᐃΔ: Mh.ⲆΔⵠᐃΔᐃᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                ᐃᐃΔ: Mh.ⵠΔΔᐃⵠⵠⲆ,
                ΔᐃΔ: Mh.ΔⲆᐃΔΔᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆΔᐃΔⵠΔ,
                ⲆᐃᐃΔ: Mh.ᐃⲆΔΔⲆΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠᐃᐃᐃ,
                ΔᐃΔ: Mh.ΔⵠⲆⲆⲆⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ΔᐃΔΔΔⲆⲆ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃⲆⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                ᐃᐃΔ: Mh.ⵠⵠⲆΔΔⲆᐃ,
                ΔᐃΔ: Mh.ⲆᐃⲆΔⵠⵠΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠⵠⵠⲆΔΔ,
                ⲆᐃᐃΔ: Mh.ΔᐃΔΔΔⲆᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                ᐃᐃΔ: Mh.ᐃⲆᐃⵠⵠⲆΔ,
                ΔᐃΔ: Mh.ⲆΔΔⵠⲆᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃΔⲆΔⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ⵠᐃΔΔⲆΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                ᐃᐃΔ: Mh.ⵠΔⵠᐃᐃⵠⵠ,
                ΔᐃΔ: Mh.Ⲇᐃᐃᐃⵠᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃⵠⲆⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⵠⲆΔⲆΔⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                ᐃᐃΔ: Mh.ⲆⵠΔΔᐃᐃⲆ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃᐃⵠΔ,
                ⵠⵠⵠⲆ: Mh.ΔᐃΔΔⲆᐃⵠ,
                ⲆᐃᐃΔ: Mh.ΔᐃΔⵠⵠᐃⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                ᐃᐃΔ: Mh.ΔⵠΔΔᐃᐃΔ,
                ΔᐃΔ: Mh.ΔᐃᐃᐃᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆΔᐃΔⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃᐃᐃᐃⵠΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                ᐃᐃΔ: Mh.ⵠⵠΔⲆⵠΔⲆ,
                ΔᐃΔ: Mh.ⵠⵠᐃⵠⵠᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠΔᐃⵠΔᐃᐃ,
                ⲆᐃᐃΔ: Mh.ΔΔΔΔⵠⵠⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                ᐃᐃΔ: Mh.Ⲇᐃᐃⵠⵠⵠⵠ,
                ΔᐃΔ: Mh.ⲆΔᐃΔⵠⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⵠᐃⲆᐃⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⲆᐃΔⵠΔΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                ᐃᐃΔ: Mh.ⲆΔⵠⵠⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃᐃⲆᐃᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔΔΔⵠΔⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃΔⵠᐃⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                ᐃᐃΔ: Mh.ΔⲆⵠⵠⲆᐃᐃ,
                ΔᐃΔ: Mh.ⲆᐃᐃΔⲆⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠᐃΔⲆᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⲆⵠⵠⵠⵠᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                ᐃᐃΔ: Mh.ΔⵠΔⲆⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠΔΔᐃⲆᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⵠᐃΔⲆᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⵠᐃᐃⲆⲆᐃⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                ᐃᐃΔ: Mh.ⲆⲆΔᐃᐃΔΔ,
                ΔᐃΔ: Mh.ⲆᐃⲆⵠⲆΔⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⵠⲆᐃΔᐃ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔⵠΔᐃⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                ᐃᐃΔ: Mh.ΔⲆⵠⲆⲆᐃⵠ,
                ΔᐃΔ: Mh.ⲆⵠⵠⵠⲆᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆᐃΔᐃΔⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔⵠⲆⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                ᐃᐃΔ: Mh.ⲆΔⲆΔᐃⵠΔ,
                ΔᐃΔ: Mh.ⲆⲆΔⵠᐃᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃΔⲆΔⲆΔ,
                ⲆᐃᐃΔ: Mh.ᐃΔⲆᐃΔΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠΔⲆᐃ,
                ΔᐃΔ: Mh.ⲆⵠΔⵠᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠⵠΔΔⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆⵠᐃΔΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                ᐃᐃΔ: Mh.ᐃⵠΔᐃⵠⲆΔ,
                ΔᐃΔ: Mh.Δⵠⵠⵠⵠⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠΔⵠᐃⲆᐃ,
                ⲆᐃᐃΔ: Mh.ΔᐃⲆⵠᐃⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                ᐃᐃΔ: Mh.ᐃΔⵠΔⵠᐃⵠ,
                ΔᐃΔ: Mh.ΔⵠⲆΔⲆΔΔ,
                ⵠⵠⵠⲆ: Mh.ⲆΔΔΔⲆΔⵠ,
                ⲆᐃᐃΔ: Mh.ⵠΔΔΔΔΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                ᐃᐃΔ: Mh.ΔᐃΔⵠⵠΔⵠ,
                ΔᐃΔ: Mh.ⲆⲆⵠⵠΔᐃΔ,
                ⵠⵠⵠⲆ: Mh.ΔΔΔᐃΔᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆᐃΔΔⵠΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                ᐃᐃΔ: Mh.ΔΔⵠⵠᐃᐃⵠ,
                ΔᐃΔ: Mh.ᐃᐃᐃΔⲆⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆᐃⵠᐃΔΔ,
                ⲆᐃᐃΔ: Mh.ΔΔᐃᐃᐃⵠᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                ᐃᐃΔ: Mh.ᐃΔᐃΔⵠⲆᐃ,
                ΔᐃΔ: Mh.ⲆΔⵠΔⵠⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ΔΔⵠⲆΔⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃⵠΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                ᐃᐃΔ: Mh.ΔⲆⲆⵠᐃΔⵠ,
                ΔᐃΔ: Mh.ⵠⲆⲆΔΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆΔⲆⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⲆᐃⲆⲆΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                ᐃᐃΔ: Mh.ⵠⵠⵠⵠⵠᐃΔ,
                ΔᐃΔ: Mh.ΔΔⵠᐃᐃᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔⵠᐃΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠΔⵠᐃΔⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                ᐃᐃΔ: Mh.ᐃⵠⵠⲆⵠⲆⵠ,
                ΔᐃΔ: Mh.ⲆⵠᐃΔⵠⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⵠΔⲆⵠΔ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃⲆⵠⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                ᐃᐃΔ: Mh.ⲆΔΔⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ΔΔᐃᐃⲆⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠⵠᐃⵠΔ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                ᐃᐃΔ: Mh.ᐃᐃⲆΔΔⵠΔ,
                ΔᐃΔ: Mh.ᐃⵠⲆⵠΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠΔⵠΔᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆΔⵠⲆᐃⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                ᐃᐃΔ: Mh.ΔⲆⲆⵠΔᐃᐃ,
                ΔᐃΔ: Mh.ⲆᐃⲆⵠᐃΔᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃᐃⲆΔⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⲆΔΔΔⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                ᐃᐃΔ: Mh.ΔΔΔΔⲆᐃⵠ,
                ΔᐃΔ: Mh.ΔⲆΔⲆᐃⵠΔ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⵠⵠⵠⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃΔᐃⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                ᐃᐃΔ: Mh.ΔⲆⵠⲆⵠⲆᐃ,
                ΔᐃΔ: Mh.ΔⲆᐃⲆⵠᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔᐃᐃᐃⲆ,
                ⲆᐃᐃΔ: Mh.ᐃᐃΔⲆⵠΔⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠⵠⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆⵠΔᐃⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⲆᐃᐃⲆΔ,
                ⲆᐃᐃΔ: Mh.ⵠⵠᐃᐃᐃⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                ᐃᐃΔ: Mh.ⲆᐃᐃᐃⵠΔΔ,
                ΔᐃΔ: Mh.ⵠⵠⵠⵠⵠⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠⲆᐃⲆⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⲆⵠᐃΔΔⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                ᐃᐃΔ: Mh.ΔⵠⵠᐃΔᐃⲆ,
                ΔᐃΔ: Mh.ⵠⵠΔᐃⵠᐃΔ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠᐃⲆⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔΔⵠᐃⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                ᐃᐃΔ: Mh.ΔⲆⲆΔᐃΔⲆ,
                ΔᐃΔ: Mh.ⵠΔⵠΔΔᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⲆᐃᐃᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⵠᐃΔⵠⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                ᐃᐃΔ: Mh.ΔᐃᐃΔⲆⲆᐃ,
                ΔᐃΔ: Mh.ⵠⵠᐃᐃΔⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠⵠⲆⵠᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⵠⵠⲆᐃⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                ᐃᐃΔ: Mh.ⵠⵠⲆᐃΔⵠΔ,
                ΔᐃΔ: Mh.ⲆΔΔⲆⵠⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃⲆⲆᐃⲆᐃ,
                ⲆᐃᐃΔ: Mh.ⲆᐃᐃⲆⵠΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                ᐃᐃΔ: Mh.ᐃᐃΔⲆᐃⵠⵠ,
                ΔᐃΔ: Mh.ⲆⲆⲆᐃᐃᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆᐃⲆⵠᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⵠᐃᐃⵠⲆⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                ᐃᐃΔ: Mh.ⲆᐃᐃΔⲆᐃᐃ,
                ΔᐃΔ: Mh.ᐃⲆⵠΔᐃᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆᐃⵠⵠᐃⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆΔⲆΔⲆΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                ᐃᐃΔ: Mh.ⵠⵠΔⵠᐃⲆΔ,
                ΔᐃΔ: Mh.ⲆⲆᐃⵠᐃΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠΔᐃΔⲆⵠΔ,
                ⲆᐃᐃΔ: Mh.ΔⲆᐃᐃΔΔΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                ᐃᐃΔ: Mh.ⵠΔⵠⲆᐃᐃⲆ,
                ΔᐃΔ: Mh.ΔⵠᐃΔⵠⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃⲆᐃⵠᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⲆⵠⲆⲆᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                ᐃᐃΔ: Mh.ΔⵠⵠᐃⲆⲆⲆ,
                ΔᐃΔ: Mh.ⵠᐃᐃⲆΔᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆΔⲆⵠⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔⵠⵠⵠⲆᐃᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                ᐃᐃΔ: Mh.ΔΔⲆΔᐃⵠⵠ,
                ΔᐃΔ: Mh.ⲆΔΔΔⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃⵠᐃⵠΔ,
                ⲆᐃᐃΔ: Mh.ΔⲆᐃⲆΔⲆΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                ᐃᐃΔ: Mh.ⵠⵠᐃⲆⲆⲆΔ,
                ΔᐃΔ: Mh.ΔⲆΔΔⲆⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⵠΔᐃΔᐃ,
                ⲆᐃᐃΔ: Mh.ⲆⵠᐃᐃᐃΔΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                ᐃᐃΔ: Mh.ᐃᐃΔΔⲆⲆᐃ,
                ΔᐃΔ: Mh.ⲆᐃΔᐃⲆΔΔ,
                ⵠⵠⵠⲆ: Mh.ⵠΔⲆᐃⵠⲆΔ,
                ⲆᐃᐃΔ: Mh.ⲆⵠⵠΔⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                ᐃᐃΔ: Mh.ΔⵠΔⲆⲆⵠⲆ,
                ΔᐃΔ: Mh.ⲆⵠⵠᐃΔΔⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃⲆⲆⲆⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⵠᐃᐃΔⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                ᐃᐃΔ: Mh.ΔⲆⵠⲆᐃⲆⲆ,
                ΔᐃΔ: Mh.ⵠⵠⵠΔⵠᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃᐃⲆⲆⵠΔ,
                ⲆᐃᐃΔ: Mh.ⲆⲆⲆᐃᐃΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                ᐃᐃΔ: Mh.ᐃⲆⵠᐃⲆᐃᐃ,
                ΔᐃΔ: Mh.ΔⵠᐃⵠᐃⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆⲆΔⵠⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⵠⲆⲆⲆᐃΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                ᐃᐃΔ: Mh.ΔⲆᐃⲆΔⲆᐃ,
                ΔᐃΔ: Mh.ⵠⵠΔⲆᐃⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃⲆⵠⵠΔ,
                ⲆᐃᐃΔ: Mh.ⵠⲆᐃⲆΔᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                ᐃᐃΔ: Mh.ⲆΔⵠⲆᐃᐃⵠ,
                ΔᐃΔ: Mh.ΔΔⲆᐃⲆΔⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠⲆⲆⲆⵠᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⵠΔⲆⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                ᐃᐃΔ: Mh.ⵠᐃΔⲆⵠⲆⲆ,
                ΔᐃΔ: Mh.ⲆᐃΔⲆⲆΔⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠΔⲆᐃⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⵠᐃⵠᐃᐃᐃᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                ᐃᐃΔ: Mh.ⲆⵠⵠᐃΔⲆⲆ,
                ΔᐃΔ: Mh.ᐃᐃⵠᐃⵠⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠΔⲆᐃᐃⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⵠΔΔΔⵠⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                ᐃᐃΔ: Mh.ᐃΔᐃⲆᐃⲆᐃ,
                ΔᐃΔ: Mh.ⲆᐃⵠΔΔⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠᐃΔⵠΔⲆ,
                ⲆᐃᐃΔ: Mh.ᐃⵠᐃᐃⵠⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                ᐃᐃΔ: Mh.ⵠᐃᐃᐃΔⲆⲆ,
                ΔᐃΔ: Mh.ΔᐃⲆⲆⲆΔⲆ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠⵠᐃΔⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔΔⵠⵠⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                ᐃᐃΔ: Mh.ᐃⵠⲆΔᐃᐃᐃ,
                ΔᐃΔ: Mh.ΔⵠΔΔᐃⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⵠΔΔⵠⲆ,
                ⲆᐃᐃΔ: Mh.ΔᐃΔⲆΔⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                ᐃᐃΔ: Mh.ᐃⲆⲆΔΔᐃΔ,
                ΔᐃΔ: Mh.ᐃΔⲆⵠᐃᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃΔᐃᐃᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⵠⲆΔⵠⵠⵠⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                ᐃᐃΔ: Mh.ᐃⵠΔⲆⲆᐃΔ,
                ΔᐃΔ: Mh.ΔΔⵠᐃⲆⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃⲆΔΔΔΔ,
                ⲆᐃᐃΔ: Mh.ΔⵠⵠΔΔⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                ᐃᐃΔ: Mh.ⵠⲆⲆⲆⲆΔΔ,
                ΔᐃΔ: Mh.ⵠⲆᐃⵠⲆⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⵠⲆⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ⲆΔⲆΔΔⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                ᐃᐃΔ: Mh.ᐃⵠᐃⲆΔⵠⵠ,
                ΔᐃΔ: Mh.ΔⲆⵠΔΔⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔⵠⵠⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆⵠⲆⵠⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                ᐃᐃΔ: Mh.ⲆⵠⲆⲆᐃⵠᐃ,
                ΔᐃΔ: Mh.ΔⵠⲆⲆᐃΔⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠⵠᐃᐃᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⵠᐃⵠⵠᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                ᐃᐃΔ: Mh.ΔⲆᐃΔΔΔⲆ,
                ΔᐃΔ: Mh.ⲆΔᐃᐃⲆΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆᐃᐃⲆⵠΔ,
                ⲆᐃᐃΔ: Mh.ⲆΔⲆᐃᐃΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                ᐃᐃΔ: Mh.ᐃⵠᐃᐃΔⵠⵠ,
                ΔᐃΔ: Mh.ⵠⲆΔⵠⵠᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⲆⲆΔΔᐃ,
                ⲆᐃᐃΔ: Mh.ΔᐃΔⵠⲆᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                ᐃᐃΔ: Mh.ⵠΔΔᐃⵠᐃⵠ,
                ΔᐃΔ: Mh.ΔⲆΔⵠΔΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃⵠΔⵠⵠᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⲆᐃΔᐃⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                ᐃᐃΔ: Mh.ⵠⵠⵠᐃΔⵠⲆ,
                ΔᐃΔ: Mh.ⵠⵠΔΔΔⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⲆΔᐃⵠᐃⲆⲆ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⵠⲆᐃΔΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                ᐃᐃΔ: Mh.ⲆᐃᐃᐃⵠⲆΔ,
                ΔᐃΔ: Mh.ⲆⲆⵠⲆᐃΔⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆⵠⵠⲆⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔⲆⵠΔⲆᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                ᐃᐃΔ: Mh.ΔᐃΔᐃⵠΔⵠ,
                ΔᐃΔ: Mh.ΔⵠⵠⵠⲆⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ΔΔⵠᐃⲆⲆΔ,
                ⲆᐃᐃΔ: Mh.ⲆᐃᐃⵠΔⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                ᐃᐃΔ: Mh.ⵠΔⲆⲆᐃⵠⲆ,
                ΔᐃΔ: Mh.ΔⲆⲆᐃⲆΔΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆⵠⲆⵠΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⲆⵠⵠⵠⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                ᐃᐃΔ: Mh.ᐃΔⵠⲆΔΔΔ,
                ΔᐃΔ: Mh.ⵠᐃΔⲆΔᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⵠΔⵠⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔⲆⵠⲆΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                ᐃᐃΔ: Mh.ΔⵠᐃⲆΔⲆᐃ,
                ΔᐃΔ: Mh.ⲆⲆⲆⵠΔⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠᐃΔⵠⲆⲆ,
                ⲆᐃᐃΔ: Mh.ᐃⵠⵠⵠⵠΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                ᐃᐃΔ: Mh.ⲆᐃᐃⲆⲆΔΔ,
                ΔᐃΔ: Mh.ⲆΔᐃⵠΔΔΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠᐃΔⵠⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔᐃᐃⲆᐃᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                ᐃᐃΔ: Mh.ΔⲆΔᐃⲆΔᐃ,
                ΔᐃΔ: Mh.ΔⲆⵠᐃⲆᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⵠⵠΔⵠΔ,
                ⲆᐃᐃΔ: Mh.ᐃⵠⲆⲆΔⵠⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                ᐃᐃΔ: Mh.ΔᐃⲆΔⵠΔΔ,
                ΔᐃΔ: Mh.ⵠⲆⲆⲆΔᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⲆᐃΔⵠᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⵠΔⵠⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                ᐃᐃΔ: Mh.ⲆᐃΔΔΔⲆᐃ,
                ΔᐃΔ: Mh.ⵠⲆΔⲆⵠⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠⵠΔⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⵠΔⲆⲆΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠⲆΔΔ,
                ΔᐃΔ: Mh.ᐃΔᐃΔⲆᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠᐃⲆΔΔ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⲆⲆᐃⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                ᐃᐃΔ: Mh.ⵠⲆΔⵠⵠⲆⵠ,
                ΔᐃΔ: Mh.ΔᐃΔᐃΔΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆⵠΔⵠⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔᐃᐃΔᐃΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                ᐃᐃΔ: Mh.ⵠⲆⵠⲆⲆⲆⵠ,
                ΔᐃΔ: Mh.ⵠᐃⵠⵠⵠᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠΔᐃⵠⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃᐃⲆᐃΔΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                ᐃᐃΔ: Mh.ⲆⵠⵠⵠΔᐃΔ,
                ΔᐃΔ: Mh.ⵠⲆⵠⲆᐃΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆⲆⲆⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⲆⲆⵠⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                ᐃᐃΔ: Mh.ⵠⲆⲆᐃⲆΔⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆΔⵠⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ΔΔΔΔΔⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃᐃΔⵠⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                ᐃᐃΔ: Mh.ΔΔⲆΔⵠΔⵠ,
                ΔᐃΔ: Mh.ⲆⲆΔΔⵠⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃΔΔⲆΔⲆ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔᐃⲆⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                ᐃᐃΔ: Mh.ⵠΔⲆⲆⲆⲆΔ,
                ΔᐃΔ: Mh.ᐃᐃⲆⵠⵠⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⲆᐃⲆΔⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⵠⲆΔⵠⲆⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                ᐃᐃΔ: Mh.ΔⲆΔᐃᐃᐃⲆ,
                ΔᐃΔ: Mh.ⵠᐃⲆⲆΔⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆᐃᐃΔᐃⵠ,
                ⲆᐃᐃΔ: Mh.ᐃᐃᐃΔΔⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                ᐃᐃΔ: Mh.ᐃⵠΔΔΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠᐃⵠⲆⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⵠⲆⲆᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⵠΔⲆΔᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                ᐃᐃΔ: Mh.ⲆΔᐃᐃⵠΔⵠ,
                ΔᐃΔ: Mh.ⵠᐃⲆᐃᐃⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ΔΔⵠⵠⵠⵠⲆ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⵠᐃⵠⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                ᐃᐃΔ: Mh.ⲆᐃΔⲆᐃⵠⲆ,
                ΔᐃΔ: Mh.ⵠⲆᐃᐃᐃⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆᐃⲆᐃⲆⲆ,
                ⲆᐃᐃΔ: Mh.ⵠΔⲆⲆⵠᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                ᐃᐃΔ: Mh.ΔΔⲆᐃΔΔⵠ,
                ΔᐃΔ: Mh.ⵠⲆⵠᐃΔΔⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠΔΔⵠⵠΔ,
                ⲆᐃᐃΔ: Mh.ⵠᐃᐃⲆⵠᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                ᐃᐃΔ: Mh.ⲆⲆΔⲆΔΔᐃ,
                ΔᐃΔ: Mh.ⲆⵠⲆᐃΔⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃᐃⲆᐃⵠ,
                ⲆᐃᐃΔ: Mh.ᐃᐃᐃⵠⵠⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                ᐃᐃΔ: Mh.ΔⵠᐃᐃⵠΔⲆ,
                ΔᐃΔ: Mh.ΔᐃⲆΔᐃᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⵠᐃΔⵠᐃ,
                ⲆᐃᐃΔ: Mh.ΔⲆᐃⲆⲆᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                ᐃᐃΔ: Mh.ᐃⲆᐃᐃΔΔΔ,
                ΔᐃΔ: Mh.ΔⲆᐃⵠΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⲆΔᐃⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃΔΔᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                ᐃᐃΔ: Mh.ⵠⲆᐃⲆΔⲆⲆ,
                ΔᐃΔ: Mh.ⵠⲆⵠᐃᐃᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠΔᐃᐃⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⵠΔⲆᐃⵠᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                ᐃᐃΔ: Mh.ΔΔᐃⵠᐃΔᐃ,
                ΔᐃΔ: Mh.ΔΔⲆᐃⵠᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠΔᐃⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⵠΔΔᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                ᐃᐃΔ: Mh.ΔᐃΔᐃⵠΔΔ,
                ΔᐃΔ: Mh.ΔⵠᐃΔⵠⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃᐃⵠⵠΔ,
                ⲆᐃᐃΔ: Mh.ΔᐃᐃⵠⵠᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                ᐃᐃΔ: Mh.ΔⵠⵠΔⲆⵠⲆ,
                ΔᐃΔ: Mh.ᐃⵠᐃΔΔⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⲆΔⵠⲆⲆ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃⲆΔⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                ᐃᐃΔ: Mh.ⲆΔⲆΔᐃᐃⲆ,
                ΔᐃΔ: Mh.ⲆΔⵠᐃⲆⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠᐃⲆᐃᐃᐃ,
                ⲆᐃᐃΔ: Mh.ΔⲆᐃⵠⲆⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                ᐃᐃΔ: Mh.ΔᐃⵠᐃⲆᐃᐃ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃᐃᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⲆΔΔΔⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔⵠᐃᐃᐃΔΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                ᐃᐃΔ: Mh.ᐃⵠΔⲆⲆΔΔ,
                ΔᐃΔ: Mh.ⵠⲆⲆᐃᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⵠⲆᐃΔⵠ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔⵠⲆΔΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                ᐃᐃΔ: Mh.ⲆⲆⵠΔⵠⲆⲆ,
                ΔᐃΔ: Mh.ⲆᐃⵠΔᐃΔⲆ,
                ⵠⵠⵠⲆ: Mh.ΔΔⵠᐃΔⵠⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔᐃᐃΔᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                ᐃᐃΔ: Mh.ⲆⵠⵠⵠΔΔᐃ,
                ΔᐃΔ: Mh.ⵠⲆⵠᐃⲆⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠᐃⵠΔⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔΔⲆⲆⲆⵠⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                ᐃᐃΔ: Mh.ⲆΔⲆⵠΔⵠⵠ,
                ΔᐃΔ: Mh.ⵠᐃⵠⲆΔᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⵠᐃᐃⵠⲆΔ,
                ⲆᐃᐃΔ: Mh.ᐃⵠᐃⲆΔΔⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                ᐃᐃΔ: Mh.ⲆᐃΔΔΔⲆΔ,
                ΔᐃΔ: Mh.ⵠⵠΔⵠᐃⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ΔΔⲆⵠⵠⲆⵠ,
                ⲆᐃᐃΔ: Mh.ΔΔΔΔΔⲆⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                ᐃᐃΔ: Mh.ᐃΔⵠᐃⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃΔⲆⵠⲆΔΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠΔᐃᐃⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔᐃⲆΔⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                ᐃᐃΔ: Mh.ᐃⵠᐃⲆΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠᐃΔⲆΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠΔⵠΔΔΔⵠ,
                ⲆᐃᐃΔ: Mh.ΔᐃΔⲆᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                ᐃᐃΔ: Mh.ᐃΔΔΔᐃᐃᐃ,
                ΔᐃΔ: Mh.ⵠᐃΔᐃⵠⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔᐃᐃⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⲆΔⵠᐃᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠΔⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆΔΔᐃⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃⲆⵠⵠΔⵠ,
                ⲆᐃᐃΔ: Mh.ΔΔᐃⲆⲆⲆᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                ᐃᐃΔ: Mh.ⲆᐃⲆᐃΔⵠᐃ,
                ΔᐃΔ: Mh.ΔⲆᐃⲆⵠΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⲆⲆⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ΔⵠᐃⲆᐃΔⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                ᐃᐃΔ: Mh.ᐃᐃⲆΔⲆᐃΔ,
                ΔᐃΔ: Mh.ⵠΔⲆᐃᐃᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃⵠᐃⲆᐃ,
                ⲆᐃᐃΔ: Mh.ᐃΔⲆⲆᐃΔᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                ᐃᐃΔ: Mh.ⲆⵠᐃⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ⲆⲆΔᐃⲆⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆᐃᐃⲆᐃⲆ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃᐃΔΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                ᐃᐃΔ: Mh.ΔⵠⲆⲆⲆΔⲆ,
                ΔᐃΔ: Mh.ⵠᐃΔᐃΔⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⵠⲆⲆⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔΔᐃΔⲆⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                ᐃᐃΔ: Mh.ⵠⵠΔⲆⵠⲆⲆ,
                ΔᐃΔ: Mh.ΔⵠⲆᐃⲆⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆⲆΔᐃⵠⵠ,
                ⲆᐃᐃΔ: Mh.ⲆⵠᐃᐃΔΔΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                ᐃᐃΔ: Mh.ᐃᐃᐃΔⵠⵠⵠ,
                ΔᐃΔ: Mh.ⵠⲆᐃᐃᐃⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ΔΔⵠⲆⲆⲆΔ,
                ⲆᐃᐃΔ: Mh.ᐃⲆᐃⵠᐃΔᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                ᐃᐃΔ: Mh.ⲆⲆⲆⵠⲆⲆⵠ,
                ΔᐃΔ: Mh.ⲆᐃᐃΔⵠᐃΔ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⲆⲆⲆⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⲆΔᐃⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                ᐃᐃΔ: Mh.ⲆⲆⲆⲆⲆⵠᐃ,
                ΔᐃΔ: Mh.ⵠΔᐃⲆΔᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃᐃⲆⵠΔΔ,
                ⲆᐃᐃΔ: Mh.ᐃᐃᐃⲆΔⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                ᐃᐃΔ: Mh.ⵠⵠⲆΔⵠΔΔ,
                ΔᐃΔ: Mh.ΔⵠΔⲆΔⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃΔⲆᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆⵠⲆΔⲆΔⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                ᐃᐃΔ: Mh.ⲆᐃⲆΔᐃⵠⵠ,
                ΔᐃΔ: Mh.ⲆⲆᐃΔⵠⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃᐃⲆΔⲆΔ,
                ⲆᐃᐃΔ: Mh.ᐃΔΔⲆⲆᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                ᐃᐃΔ: Mh.ᐃⵠⵠⲆᐃⵠᐃ,
                ΔᐃΔ: Mh.ᐃⵠᐃⵠΔΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆΔᐃΔΔΔⵠ,
                ⲆᐃᐃΔ: Mh.ⲆⵠΔΔᐃΔΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                ᐃᐃΔ: Mh.ᐃΔΔⲆⲆᐃΔ,
                ΔᐃΔ: Mh.ⵠⲆΔᐃΔⵠΔ,
                ⵠⵠⵠⲆ: Mh.ΔΔᐃᐃⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⵠᐃΔⲆⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                ᐃᐃΔ: Mh.ΔΔΔᐃⲆⵠΔ,
                ΔᐃΔ: Mh.ᐃⵠᐃⲆᐃΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⲆⲆⲆⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⵠᐃⵠΔⵠⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                ᐃᐃΔ: Mh.ⵠⵠⲆⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ⵠⲆᐃⲆⵠᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⲆΔⲆΔΔⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⵠΔΔΔΔᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                ᐃᐃΔ: Mh.ᐃΔΔΔᐃᐃⵠ,
                ΔᐃΔ: Mh.ᐃⵠᐃΔΔᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠΔⲆⵠⵠΔ,
                ⲆᐃᐃΔ: Mh.ⵠΔᐃⵠⵠᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                ᐃᐃΔ: Mh.ⲆⵠⵠⲆⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃᐃᐃᐃᐃᐃΔ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃΔⵠΔⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔⵠⲆᐃᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                ᐃᐃΔ: Mh.ΔᐃⲆⵠⵠΔΔ,
                ΔᐃΔ: Mh.ⵠΔⵠΔΔΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⲆⲆᐃⵠΔ,
                ⲆᐃᐃΔ: Mh.Ⲇⵠⵠᐃᐃⵠⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                ᐃᐃΔ: Mh.ΔΔⲆⵠᐃΔⲆ,
                ΔᐃΔ: Mh.ⲆΔΔΔΔΔΔ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃⲆⵠⲆΔⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⵠᐃᐃⲆᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                ᐃᐃΔ: Mh.ΔⲆⵠⲆⲆⵠΔ,
                ΔᐃΔ: Mh.ᐃᐃⲆⵠⲆᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⲆⵠⵠΔⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆΔⲆⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                ᐃᐃΔ: Mh.ᐃⲆΔⵠΔⲆⲆ,
                ΔᐃΔ: Mh.ⵠⵠⲆᐃΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⵠⵠⵠⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⲆⲆᐃⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                ᐃᐃΔ: Mh.ΔᐃΔⵠᐃⵠΔ,
                ΔᐃΔ: Mh.Δᐃⵠⵠⵠⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃᐃⵠⲆᐃⵠ,
                ⲆᐃᐃΔ: Mh.ΔᐃⲆⵠᐃΔᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                ᐃᐃΔ: Mh.ΔⵠᐃⲆᐃᐃⵠ,
                ΔᐃΔ: Mh.ⵠᐃⲆⵠΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃΔⲆⵠⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⲆΔᐃⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                ᐃᐃΔ: Mh.ⲆᐃᐃⵠⵠⲆᐃ,
                ΔᐃΔ: Mh.ⵠⲆⵠⲆᐃⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⲆᐃⵠⲆᐃ,
                ⲆᐃᐃΔ: Mh.ᐃᐃΔⲆᐃᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                ᐃᐃΔ: Mh.ΔⵠᐃⲆⵠⲆᐃ,
                ΔᐃΔ: Mh.ⵠᐃⲆⲆⲆⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⲆᐃⲆⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⵠⲆⵠⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                ᐃᐃΔ: Mh.ΔᐃⵠⵠⵠᐃⲆ,
                ΔᐃΔ: Mh.ⵠΔⵠⲆⲆⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠᐃⵠⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⲆⲆⲆΔⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                ᐃᐃΔ: Mh.ⲆᐃΔⲆΔᐃⲆ,
                ΔᐃΔ: Mh.ᐃⲆΔⵠᐃΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⲆᐃΔⵠⲆ,
                ⲆᐃᐃΔ: Mh.Ⲇᐃᐃⵠᐃᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                ᐃᐃΔ: Mh.ΔΔᐃⲆᐃⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠⲆⲆΔⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ΔΔⲆᐃⲆⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔᐃⵠⲆⲆⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                ᐃᐃΔ: Mh.ⲆΔⵠⲆΔⵠᐃ,
                ΔᐃΔ: Mh.ⲆⵠⲆⵠⵠⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠᐃΔⵠⲆⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⵠᐃⲆΔΔⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                ᐃᐃΔ: Mh.ⲆⵠⵠΔⲆᐃΔ,
                ΔᐃΔ: Mh.ⲆᐃⵠⵠΔᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆᐃⵠⲆᐃⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔΔⵠᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                ᐃᐃΔ: Mh.ᐃΔΔᐃᐃΔᐃ,
                ΔᐃΔ: Mh.ⵠᐃᐃᐃΔΔⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⲆⵠⲆⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⵠⵠᐃⲆΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                ᐃᐃΔ: Mh.ⵠⵠⲆΔᐃⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆⵠΔΔᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⲆᐃΔⵠΔ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⵠⵠⲆⲆᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                ᐃᐃΔ: Mh.ΔⲆⵠⲆⲆⲆᐃ,
                ΔᐃΔ: Mh.ᐃⵠΔⲆⵠⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆΔᐃⵠΔⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃⵠΔᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                ᐃᐃΔ: Mh.ⵠΔⵠⵠᐃΔⲆ,
                ΔᐃΔ: Mh.ΔΔⲆⵠᐃⵠΔ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃΔᐃΔᐃⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⵠⲆⵠⵠⵠⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                ᐃᐃΔ: Mh.ᐃᐃⵠⵠᐃᐃΔ,
                ΔᐃΔ: Mh.ᐃⵠⲆΔᐃⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠΔΔⵠΔⲆ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⲆⵠΔⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                ᐃᐃΔ: Mh.ΔⲆⲆΔΔᐃΔ,
                ΔᐃΔ: Mh.ⲆΔᐃⵠⲆΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⵠᐃⵠᐃΔ,
                ⲆᐃᐃΔ: Mh.ⲆΔᐃⲆΔⵠⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                ᐃᐃΔ: Mh.ⵠⵠⵠⵠⵠᐃⵠ,
                ΔᐃΔ: Mh.ⵠⵠⵠⲆΔᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔΔΔᐃⲆⵠⵠ,
                ⲆᐃᐃΔ: Mh.ΔⵠΔⲆᐃⲆⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠΔΔΔ,
                ΔᐃΔ: Mh.Δᐃᐃⵠⵠⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃΔᐃⲆⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆⲆΔᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                ᐃᐃΔ: Mh.ΔⵠΔΔⵠⵠⲆ,
                ΔᐃΔ: Mh.ΔᐃΔⵠⲆⵠΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⵠⲆΔᐃΔ,
                ⲆᐃᐃΔ: Mh.ⵠⲆⵠᐃᐃⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                ᐃᐃΔ: Mh.ΔⵠⲆⲆⲆⵠᐃ,
                ΔᐃΔ: Mh.ᐃⵠⲆᐃⵠΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⲆᐃⵠᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃⲆⲆᐃⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                ᐃᐃΔ: Mh.ⵠⵠⵠΔⲆⵠⲆ,
                ΔᐃΔ: Mh.ΔⲆᐃΔⵠΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔᐃⲆⲆⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⵠΔΔⵠⲆᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                ᐃᐃΔ: Mh.ⲆᐃΔⲆᐃⲆΔ,
                ΔᐃΔ: Mh.ΔⲆΔⵠⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⵠᐃΔⵠⲆΔ,
                ⲆᐃᐃΔ: Mh.ⲆⵠΔⲆᐃⵠΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                ᐃᐃΔ: Mh.ΔⵠΔΔⵠᐃΔ,
                ΔᐃΔ: Mh.ⵠᐃⲆⲆΔⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⲆᐃΔᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆΔⵠΔⵠⵠᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                ᐃᐃΔ: Mh.ⲆⲆⵠⵠⲆⵠᐃ,
                ΔᐃΔ: Mh.ΔⲆⵠⵠᐃⲆΔ,
                ⵠⵠⵠⲆ: Mh.ΔⵠΔⲆΔⲆΔ,
                ⲆᐃᐃΔ: Mh.ⵠⲆⲆⵠⵠⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                ᐃᐃΔ: Mh.ΔⵠΔⵠΔᐃⵠ,
                ΔᐃΔ: Mh.ᐃⵠⲆⵠᐃⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⲆᐃⲆⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⲆⵠΔⲆⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                ᐃᐃΔ: Mh.ᐃΔⲆΔⲆⵠΔ,
                ΔᐃΔ: Mh.ΔⵠⲆⲆᐃΔⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⲆᐃⲆΔᐃⵠ,
                ⲆᐃᐃΔ: Mh.ᐃᐃΔᐃᐃΔΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                ᐃᐃΔ: Mh.ΔⲆⲆⵠⵠΔⲆ,
                ΔᐃΔ: Mh.ⲆⲆⲆΔΔⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⵠᐃⲆᐃⵠⲆ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⵠΔΔⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                ᐃᐃΔ: Mh.ⵠⵠΔⲆΔᐃΔ,
                ΔᐃΔ: Mh.ᐃⲆΔΔΔⵠⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃΔⵠⵠⵠᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆΔⲆⵠⵠΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                ᐃᐃΔ: Mh.ᐃΔΔᐃⲆⵠᐃ,
                ΔᐃΔ: Mh.ⵠᐃᐃⲆᐃΔᐃ,
                ⵠⵠⵠⲆ: Mh.ΔᐃᐃⲆΔᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⲆⲆⵠΔᐃⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                ᐃᐃΔ: Mh.ᐃΔⵠⵠⲆΔΔ,
                ΔᐃΔ: Mh.ⵠⲆⵠⲆⲆΔⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⲆⵠᐃᐃⵠΔ,
                ⲆᐃᐃΔ: Mh.ΔⵠΔⲆΔⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                ᐃᐃΔ: Mh.ᐃΔⲆᐃⵠᐃⲆ,
                ΔᐃΔ: Mh.ⲆΔⵠᐃᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔᐃᐃⲆⲆⲆᐃ,
                ⲆᐃᐃΔ: Mh.ᐃΔᐃΔΔᐃΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                ᐃᐃΔ: Mh.ⲆᐃⲆΔΔⲆⵠ,
                ΔᐃΔ: Mh.ΔⵠⵠᐃᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔΔⲆΔᐃᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⵠΔⲆⲆⵠⵠΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                ᐃᐃΔ: Mh.ⵠⵠΔⵠⲆΔΔ,
                ΔᐃΔ: Mh.ΔⲆΔⲆⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆⵠΔᐃⵠΔ,
                ⲆᐃᐃΔ: Mh.ᐃⵠᐃⲆⵠⲆΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                ᐃᐃΔ: Mh.ᐃⵠΔΔⲆⵠⲆ,
                ΔᐃΔ: Mh.ΔᐃⲆᐃᐃᐃᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆΔⲆⵠⲆᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⵠΔⲆᐃΔᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                ᐃᐃΔ: Mh.ΔᐃⲆⲆΔᐃⲆ,
                ΔᐃΔ: Mh.ΔⲆⲆⲆⵠⵠⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠᐃΔⵠΔᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃΔⵠⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                ᐃᐃΔ: Mh.ᐃⲆᐃΔΔΔΔ,
                ΔᐃΔ: Mh.ᐃⵠⵠᐃᐃⲆᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆΔΔⲆⲆΔ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔⵠⵠⲆᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                ᐃᐃΔ: Mh.ⵠⲆⲆⵠⵠⵠⵠ,
                ΔᐃΔ: Mh.ᐃΔⵠⵠⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ΔΔΔΔᐃⲆⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆᐃⲆᐃⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                ᐃᐃΔ: Mh.ⲆⲆⵠⲆⲆⵠΔ,
                ΔᐃΔ: Mh.ⵠΔᐃⲆⵠⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆΔΔΔᐃΔᐃ,
                ⲆᐃᐃΔ: Mh.ᐃΔΔⵠⲆᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                ᐃᐃΔ: Mh.ΔⲆⲆΔΔΔᐃ,
                ΔᐃΔ: Mh.ΔΔᐃⲆⵠⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠᐃΔⲆⵠΔ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⲆᐃΔᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                ᐃᐃΔ: Mh.ᐃⵠᐃᐃⵠⵠᐃ,
                ΔᐃΔ: Mh.ᐃΔΔⲆΔⵠΔ,
                ⵠⵠⵠⲆ: Mh.ΔⲆΔⲆᐃᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆⲆⲆΔᐃᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                ᐃᐃΔ: Mh.ΔⲆᐃᐃΔᐃΔ,
                ΔᐃΔ: Mh.ⵠⲆᐃᐃΔⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⲆⲆᐃΔⵠ,
                ⲆᐃᐃΔ: Mh.ΔΔΔⵠᐃΔⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                ᐃᐃΔ: Mh.ᐃΔᐃᐃⲆᐃΔ,
                ΔᐃΔ: Mh.ΔⵠΔⵠᐃΔⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠΔⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⲆᐃΔⲆⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                ᐃᐃΔ: Mh.ΔᐃᐃⲆΔᐃⲆ,
                ΔᐃΔ: Mh.ⵠⲆᐃΔΔᐃΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠᐃⲆⲆⲆⲆ,
                ⲆᐃᐃΔ: Mh.ΔⵠⵠᐃΔⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                ᐃᐃΔ: Mh.ᐃᐃΔⵠΔᐃᐃ,
                ΔᐃΔ: Mh.ⵠᐃⵠᐃΔΔⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃᐃⵠᐃᐃⵠΔ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃⵠⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                ᐃᐃΔ: Mh.ⵠⲆⵠⵠⲆⵠⵠ,
                ΔᐃΔ: Mh.ΔⵠⲆⵠΔᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔⲆΔΔⲆⵠⵠ,
                ⲆᐃᐃΔ: Mh.ΔⲆΔᐃⲆᐃⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                ᐃᐃΔ: Mh.ⵠⲆᐃⵠΔΔⲆ,
                ΔᐃΔ: Mh.ⲆᐃΔᐃᐃⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃᐃⲆΔⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⲆⵠΔⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                ᐃᐃΔ: Mh.ⵠᐃⵠΔⵠⲆΔ,
                ΔᐃΔ: Mh.ΔⲆΔΔⲆΔᐃ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔⲆⵠᐃΔ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔΔΔⵠΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                ᐃᐃΔ: Mh.ΔᐃΔⲆᐃⲆᐃ,
                ΔᐃΔ: Mh.ⵠΔᐃᐃᐃᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⲆᐃⲆᐃⵠ,
                ⲆᐃᐃΔ: Mh.ⲆⲆΔΔⵠⲆⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                ᐃᐃΔ: Mh.ⲆⲆΔΔΔⵠⵠ,
                ΔᐃΔ: Mh.ΔⲆⲆᐃᐃᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⵠⵠᐃᐃⲆ,
                ⲆᐃᐃΔ: Mh.ΔᐃⵠⵠⵠⵠΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                ᐃᐃΔ: Mh.ⲆⲆⵠΔⵠᐃⵠ,
                ΔᐃΔ: Mh.ᐃᐃΔᐃⵠⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠⲆⲆᐃΔΔ,
                ⲆᐃᐃΔ: Mh.ΔΔΔⲆⵠⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                ᐃᐃΔ: Mh.ⲆᐃΔᐃⲆΔⵠ,
                ΔᐃΔ: Mh.ⲆΔⵠⲆΔΔⵠ,
                ⵠⵠⵠⲆ: Mh.ΔⵠⲆⲆⵠⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆΔᐃⵠᐃᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                ᐃᐃΔ: Mh.ⵠⵠⵠΔΔᐃⲆ,
                ΔᐃΔ: Mh.ⲆⵠΔⵠⲆΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆᐃⵠᐃᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⲆΔⵠΔΔΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                ᐃᐃΔ: Mh.ⲆⲆⲆΔⵠᐃΔ,
                ΔᐃΔ: Mh.ⵠΔΔⲆⵠΔΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⵠⵠΔⵠᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⵠⵠⲆⲆⵠⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                ᐃᐃΔ: Mh.ⲆᐃΔᐃⲆⵠⵠ,
                ΔᐃΔ: Mh.ⲆΔᐃⵠⵠΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠΔⲆᐃⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⵠⵠΔⵠᐃⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                ᐃᐃΔ: Mh.ΔᐃΔΔⲆᐃΔ,
                ΔᐃΔ: Mh.ᐃⵠⲆⲆⵠᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠΔⵠΔᐃⲆⲆ,
                ⲆᐃᐃΔ: Mh.ᐃᐃⲆⵠᐃⵠΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                ᐃᐃΔ: Mh.ᐃⲆⲆᐃΔΔⲆ,
                ΔᐃΔ: Mh.ΔⲆΔⲆⲆⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⲆᐃᐃⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⵠᐃⲆᐃⵠᐃⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                ᐃᐃΔ: Mh.ⲆⲆΔⲆⵠΔΔ,
                ΔᐃΔ: Mh.ⵠⵠⵠΔᐃⵠΔ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆᐃⵠⲆᐃⲆ,
                ⲆᐃᐃΔ: Mh.ΔⵠⲆⲆΔΔⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                ᐃᐃΔ: Mh.ⵠⲆΔⲆΔΔᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔⲆΔΔΔ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⵠᐃⵠⲆⲆ,
                ⲆᐃᐃΔ: Mh.ⲆⲆⵠᐃᐃΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                ᐃᐃΔ: Mh.ⲆΔⲆⲆⲆⵠⲆ,
                ΔᐃΔ: Mh.ⵠΔΔᐃᐃᐃⲆ,
                ⵠⵠⵠⲆ: Mh.ΔΔⵠⵠⵠΔᐃ,
                ⲆᐃᐃΔ: Mh.ⵠΔᐃΔⵠΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                ᐃᐃΔ: Mh.ⵠᐃⲆⵠⲆⲆⵠ,
                ΔᐃΔ: Mh.ᐃⲆⵠΔᐃᐃⵠ,
                ⵠⵠⵠⲆ: Mh.ⵠⵠΔⵠᐃᐃΔ,
                ⲆᐃᐃΔ: Mh.ⲆΔΔⵠⲆᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                ᐃᐃΔ: Mh.ᐃᐃⵠⵠⲆᐃⵠ,
                ΔᐃΔ: Mh.ⲆΔᐃⵠΔⲆΔ,
                ⵠⵠⵠⲆ: Mh.ⵠΔⵠⵠⵠⵠᐃ,
                ⲆᐃᐃΔ: Mh.ⲆⵠᐃⵠΔᐃⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                ᐃᐃΔ: Mh.ΔΔᐃⲆΔⲆⲆ,
                ΔᐃΔ: Mh.ⲆⲆΔⵠⵠΔⵠ,
                ⵠⵠⵠⲆ: Mh.ⲆΔⵠⲆⵠΔⵠ,
                ⲆᐃᐃΔ: Mh.ᐃΔΔⵠΔⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                ᐃᐃΔ: Mh.ⵠⵠᐃΔΔᐃΔ,
                ΔᐃΔ: Mh.ΔⲆⵠᐃⲆΔⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆⲆⲆⲆⵠⵠᐃ,
                ⲆᐃᐃΔ: Mh.ΔΔⵠⲆᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                ᐃᐃΔ: Mh.ⲆⵠΔᐃΔⵠⲆ,
                ΔᐃΔ: Mh.ᐃΔᐃΔⲆⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ⲆΔΔᐃⲆΔᐃ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃᐃᐃᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                ᐃᐃΔ: Mh.ⲆⲆⲆΔⵠᐃⲆ,
                ΔᐃΔ: Mh.ⵠΔΔⵠΔΔᐃ,
                ⵠⵠⵠⲆ: Mh.ΔᐃⲆΔΔⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⵠⵠᐃⲆΔⲆⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                ᐃᐃΔ: Mh.ⵠᐃⵠΔⲆⵠⵠ,
                ΔᐃΔ: Mh.ⲆⲆᐃᐃᐃⲆⲆ,
                ⵠⵠⵠⲆ: Mh.ᐃⲆⵠΔᐃⲆⵠ,
                ⲆᐃᐃΔ: Mh.ᐃⲆⲆᐃΔⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                ᐃᐃΔ: Mh.ᐃΔⲆΔΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠΔⲆⵠⲆⵠΔ,
                ⵠⵠⵠⲆ: Mh.ᐃΔΔᐃᐃⲆⵠ,
                ⲆᐃᐃΔ: Mh.ⲆᐃⲆⲆΔⲆⲆ,
                ⵠΔⲆ: aj.ⲆⵠⲆᐃᐃⵠᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                ᐃᐃΔ: Mh.ᐃΔⲆⲆⵠΔᐃ,
                ΔᐃΔ: Mh.ᐃΔⲆⲆΔⲆⵠ,
                ⵠⵠⵠⲆ: Mh.ᐃΔᐃᐃⲆⵠⲆ,
                ⲆᐃᐃΔ: Mh.ΔⵠΔΔⵠⵠⵠ,
                ⵠΔⲆ: aj.ⲆⵠⲆᐃᐃⵠᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                ᐃᐃΔ: Mh.ᐃᐃΔⲆⲆᐃⵠ,
                ΔᐃΔ: Mh.ⲆᐃΔΔᐃΔΔ,
                ⵠⵠⵠⲆ: Mh.ΔΔᐃᐃⲆᐃᐃ,
                ⲆᐃᐃΔ: Mh.ⵠⵠⲆⵠⵠⵠⲆ,
                ⵠΔⲆ: aj.ⲆⵠⲆᐃᐃⵠᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                ᐃᐃΔ: Mh.ⲆⲆⵠⵠΔⲆⵠ,
                ΔᐃΔ: Mh.ΔᐃⲆⲆᐃⵠᐃ,
                ⵠⵠⵠⲆ: Mh.ⵠⲆᐃⲆΔⲆᐃ,
                ⲆᐃᐃΔ: Mh.ᐃΔᐃⲆᐃᐃᐃ,
                ⵠΔⲆ: aj.ⲆⵠⲆᐃᐃⵠᐃ,
                ᐃⵠᐃ: "OmarJr13",
                name: "Blob Skin"
            }],
            ΔⵠᐃΔ: [{
                id: 0,
                ᐃᐃΔ: Mh.ⵠΔΔΔⵠᐃΔ,
                ΔᐃΔ: Mh.ⲆⲆⲆⵠΔΔΔ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                ᐃᐃΔ: Mh.ⲆⵠᐃᐃⵠᐃΔ,
                ΔᐃΔ: Mh.ΔⵠⲆΔⲆⵠΔ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                ᐃᐃΔ: Mh.ΔᐃΔᐃᐃⵠⵠ,
                ΔᐃΔ: Mh.ⵠⵠⵠΔⵠⲆⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                ᐃᐃΔ: Mh.ⲆⵠΔⲆⲆΔΔ,
                ΔᐃΔ: Mh.ⵠⵠⵠⲆⵠⵠⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                ᐃᐃΔ: Mh.ⵠΔΔΔΔⵠᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔⲆΔΔⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                ᐃᐃΔ: Mh.ⵠⲆᐃΔⵠΔⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆⵠΔⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                ᐃᐃΔ: Mh.ᐃⵠⲆᐃΔⵠΔ,
                ΔᐃΔ: Mh.ᐃᐃᐃΔⲆΔΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                ᐃᐃΔ: Mh.ⵠΔⵠⵠΔΔⵠ,
                ΔᐃΔ: Mh.ᐃᐃⲆⵠᐃⲆᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                ᐃᐃΔ: Mh.ΔⲆᐃⵠⲆΔⲆ,
                ΔᐃΔ: Mh.ⵠΔΔⵠᐃⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                ᐃᐃΔ: Mh.ᐃᐃΔΔᐃⵠⲆ,
                ΔᐃΔ: Mh.ⲆⲆⲆⲆⲆᐃⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠᐃⲆⵠ,
                ΔᐃΔ: Mh.ᐃᐃᐃΔⲆΔⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                ᐃᐃΔ: Mh.ⵠΔⵠΔᐃⵠⲆ,
                ΔᐃΔ: Mh.ΔᐃⵠⵠⲆⵠΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                ᐃᐃΔ: Mh.ΔⲆⵠᐃᐃᐃᐃ,
                ΔᐃΔ: Mh.ⲆⲆⲆⲆΔᐃΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                ᐃᐃΔ: Mh.ⲆᐃᐃΔⲆΔΔ,
                ΔᐃΔ: Mh.ⵠΔⵠⲆᐃⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                ᐃᐃΔ: Mh.ΔⲆⵠⲆⲆᐃΔ,
                ΔᐃΔ: Mh.ⵠᐃᐃⵠⲆⲆᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                ᐃᐃΔ: Mh.ⵠⵠΔⲆⵠⵠᐃ,
                ΔᐃΔ: Mh.ᐃⵠᐃᐃⲆⵠⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                ᐃᐃΔ: Mh.ⵠⲆᐃΔⲆᐃⲆ,
                ΔᐃΔ: Mh.ⵠΔΔΔⲆᐃΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                ᐃᐃΔ: Mh.ΔⵠΔⵠΔᐃᐃ,
                ΔᐃΔ: Mh.ᐃΔᐃⵠⲆⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠⲆᐃⵠ,
                ΔᐃΔ: Mh.ⵠⵠⵠᐃᐃⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                ᐃᐃΔ: Mh.ΔΔᐃΔⲆᐃⲆ,
                ΔᐃΔ: Mh.ᐃⲆᐃⵠⲆᐃⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                ᐃᐃΔ: Mh.ⲆΔΔᐃᐃⲆᐃ,
                ΔᐃΔ: Mh.ⲆⵠⲆᐃᐃⲆⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                ᐃᐃΔ: Mh.ⵠΔⲆⲆⲆᐃⵠ,
                ΔᐃΔ: Mh.ΔᐃᐃᐃⲆⲆⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                ᐃᐃΔ: Mh.ⲆΔⲆⵠⲆΔΔ,
                ΔᐃΔ: Mh.ⲆᐃΔᐃΔⵠᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                ᐃᐃΔ: Mh.ⲆⵠᐃⵠⲆⵠⲆ,
                ΔᐃΔ: Mh.ⵠΔⵠⲆΔⲆⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                ᐃᐃΔ: Mh.ΔⵠΔⲆⲆⵠΔ,
                ΔᐃΔ: Mh.ⲆⲆⲆⲆⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                ᐃᐃΔ: Mh.ⲆⵠΔᐃⲆΔΔ,
                ΔᐃΔ: Mh.ᐃᐃΔⲆⵠⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                ᐃᐃΔ: Mh.ⲆⲆΔⵠⲆΔⵠ,
                ΔᐃΔ: Mh.ΔⵠⲆΔΔΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                ᐃᐃΔ: Mh.ⵠᐃΔΔᐃΔⵠ,
                ΔᐃΔ: Mh.ΔᐃᐃᐃΔᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                ᐃᐃΔ: Mh.ΔⵠΔⲆⲆᐃⵠ,
                ΔᐃΔ: Mh.ⵠⲆΔᐃⲆΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                ᐃᐃΔ: Mh.ᐃᐃⲆΔⲆⵠᐃ,
                ΔᐃΔ: Mh.ΔΔⵠⵠᐃΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                ᐃᐃΔ: Mh.ⵠⵠᐃΔⲆⲆⵠ,
                ΔᐃΔ: Mh.ᐃᐃⵠⲆᐃⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                ᐃᐃΔ: Mh.ⵠΔᐃⲆⲆᐃⵠ,
                ΔᐃΔ: Mh.ΔⵠⵠΔΔⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                ᐃᐃΔ: Mh.ⵠⲆⵠⲆᐃΔⵠ,
                ΔᐃΔ: Mh.ⵠᐃⵠᐃᐃⲆΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                ᐃᐃΔ: Mh.ᐃⲆⵠⵠΔⲆⲆ,
                ΔᐃΔ: Mh.ⵠΔΔⲆⵠΔⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                ᐃᐃΔ: Mh.ⵠΔⲆΔⲆⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆⵠᐃⲆⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                ᐃᐃΔ: Mh.ⲆⵠΔΔΔⵠⲆ,
                ΔᐃΔ: Mh.ⲆΔᐃᐃΔᐃⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                ᐃᐃΔ: Mh.ΔᐃᐃⲆΔᐃᐃ,
                ΔᐃΔ: Mh.ΔⵠᐃᐃᐃⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                ᐃᐃΔ: Mh.ⵠⲆΔⲆᐃⲆⲆ,
                ΔᐃΔ: Mh.ⵠΔⵠΔΔΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                ᐃᐃΔ: Mh.ⲆⲆⲆᐃⲆⵠⵠ,
                ΔᐃΔ: Mh.ⵠⵠⲆⲆⲆᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                ᐃᐃΔ: Mh.ⵠΔⲆᐃⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠᐃⵠⵠⵠⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠⲆΔΔ,
                ΔᐃΔ: Mh.ⵠΔᐃΔΔᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                ᐃᐃΔ: Mh.ⲆⲆᐃᐃᐃΔⲆ,
                ΔᐃΔ: Mh.ᐃΔΔΔⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                ᐃᐃΔ: Mh.ΔΔᐃΔⲆⲆⲆ,
                ΔᐃΔ: Mh.ΔⵠΔΔΔΔⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                ᐃᐃΔ: Mh.ⵠⵠⵠⵠᐃⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆᐃⵠᐃᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                ᐃᐃΔ: Mh.ᐃΔΔⵠⲆΔⲆ,
                ΔᐃΔ: Mh.ᐃⲆⲆⲆᐃⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                ᐃᐃΔ: Mh.ᐃᐃⵠᐃᐃⵠᐃ,
                ΔᐃΔ: Mh.ⲆⲆⲆⲆⵠⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                ᐃᐃΔ: Mh.ⲆᐃΔᐃⵠⵠΔ,
                ΔᐃΔ: Mh.ⲆᐃᐃⲆⲆⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                ᐃᐃΔ: Mh.ⵠΔⵠΔΔⵠⵠ,
                ΔᐃΔ: Mh.ⲆΔᐃⵠⲆⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                ᐃᐃΔ: Mh.ⵠⵠΔⵠⲆⵠⵠ,
                ΔᐃΔ: Mh.ΔⵠⲆⲆΔᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                ᐃᐃΔ: Mh.ΔΔⲆⲆⲆΔΔ,
                ΔᐃΔ: Mh.ᐃⲆᐃᐃⲆⲆᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                ᐃᐃΔ: Mh.ⲆᐃΔⲆΔΔΔ,
                ΔᐃΔ: Mh.ⲆⵠⲆᐃⵠⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                ᐃᐃΔ: Mh.ᐃᐃⲆⲆᐃⵠΔ,
                ΔᐃΔ: Mh.ⲆΔⵠΔᐃⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠⲆⵠΔΔⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                ᐃᐃΔ: Mh.ΔᐃⲆⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ⲆΔⲆᐃⵠⲆᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                ᐃᐃΔ: Mh.ⵠΔΔⲆⵠⲆⵠ,
                ΔᐃΔ: Mh.ᐃⲆᐃⵠΔⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                ᐃᐃΔ: Mh.ᐃᐃⵠⲆⵠⲆΔ,
                ΔᐃΔ: Mh.ⵠⵠΔΔᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                ᐃᐃΔ: Mh.ᐃⵠᐃΔᐃⲆⲆ,
                ΔᐃΔ: Mh.ⵠᐃΔΔΔΔᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                ᐃᐃΔ: Mh.ⲆΔⲆΔⵠⲆⵠ,
                ΔᐃΔ: Mh.ᐃⵠⵠⵠⲆᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                ᐃᐃΔ: Mh.ⵠⲆⲆᐃᐃᐃᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔᐃᐃΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                ᐃᐃΔ: Mh.ᐃⵠΔΔᐃᐃⵠ,
                ΔᐃΔ: Mh.ⲆⵠⵠΔⵠΔⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                ᐃᐃΔ: Mh.ΔⲆⵠⵠΔᐃᐃ,
                ΔᐃΔ: Mh.ΔΔᐃΔΔⵠⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                ᐃᐃΔ: Mh.ᐃΔⲆΔᐃΔᐃ,
                ΔᐃΔ: Mh.ⲆⵠΔᐃⵠᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                ᐃᐃΔ: Mh.ⵠΔΔΔΔᐃΔ,
                ΔᐃΔ: Mh.ᐃᐃⲆᐃⲆᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                ᐃᐃΔ: Mh.ᐃⲆᐃⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆⵠᐃⵠⵠᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                ᐃᐃΔ: Mh.ΔᐃΔⵠΔᐃΔ,
                ΔᐃΔ: Mh.ΔΔⵠⲆᐃⵠⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                ᐃᐃΔ: Mh.ⲆⲆᐃΔᐃⲆⲆ,
                ΔᐃΔ: Mh.ΔᐃᐃᐃᐃΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                ᐃᐃΔ: Mh.ᐃᐃⲆⵠⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠΔⲆⵠᐃⲆΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                ᐃᐃΔ: Mh.ᐃᐃΔΔⲆΔᐃ,
                ΔᐃΔ: Mh.ⲆⲆⵠⵠᐃΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                ᐃᐃΔ: Mh.ΔⵠΔᐃⲆⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆⲆᐃΔᐃΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                ᐃᐃΔ: Mh.ΔⵠᐃⵠⵠᐃΔ,
                ΔᐃΔ: Mh.ⵠⵠⲆᐃⵠⵠᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠΔᐃⲆ,
                ΔᐃΔ: Mh.ΔⲆΔⵠΔⲆⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                ᐃᐃΔ: Mh.ⲆΔⲆᐃⵠⲆΔ,
                ΔᐃΔ: Mh.ᐃᐃⵠᐃΔΔⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                ᐃᐃΔ: Mh.ΔⲆⲆⲆΔⲆⲆ,
                ΔᐃΔ: Mh.ΔᐃⵠᐃⲆⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                ᐃᐃΔ: Mh.ᐃⵠⲆΔⲆⵠⲆ,
                ΔᐃΔ: Mh.ⲆⵠᐃΔⲆⵠᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                ᐃᐃΔ: Mh.ⵠⵠᐃΔⵠᐃⲆ,
                ΔᐃΔ: Mh.ΔᐃⵠᐃᐃⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                ᐃᐃΔ: Mh.ᐃᐃᐃΔᐃΔⵠ,
                ΔᐃΔ: Mh.ΔΔΔᐃⲆⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                ᐃᐃΔ: Mh.ⵠΔᐃᐃᐃⵠⵠ,
                ΔᐃΔ: Mh.ⲆⲆᐃⵠⲆΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                ᐃᐃΔ: Mh.ᐃⲆⵠⲆᐃⵠⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆⲆΔΔᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                ᐃᐃΔ: Mh.ᐃⲆⲆⲆΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠⲆᐃᐃΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                ᐃᐃΔ: Mh.ⲆΔΔᐃⲆᐃⵠ,
                ΔᐃΔ: Mh.ᐃΔΔⲆⵠᐃⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                ᐃᐃΔ: Mh.ⲆⵠⲆᐃⵠⵠⲆ,
                ΔᐃΔ: Mh.ΔΔⲆⵠⵠΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                ᐃᐃΔ: Mh.ᐃⵠᐃΔᐃΔᐃ,
                ΔᐃΔ: Mh.ⵠⵠΔᐃⵠΔⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Engineer Bag"
            }],
            ΔⵠⵠΔᐃ: [{
                id: 0,
                ᐃᐃΔ: Mh.ᐃᐃⵠΔⵠΔⲆ,
                ΔᐃΔ: Mh.ⲆⲆΔⲆΔᐃᐃ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                ᐃᐃΔ: Mh.ᐃⲆΔⵠΔᐃΔ,
                ΔᐃΔ: Mh.ᐃⲆⵠⲆⵠⵠⲆ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                ᐃᐃΔ: Mh.ᐃⵠᐃⲆⵠⲆⲆ,
                ΔᐃΔ: Mh.ⲆⲆΔⲆΔΔⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                ᐃᐃΔ: Mh.ⲆⵠΔⵠΔᐃΔ,
                ΔᐃΔ: Mh.ᐃⵠΔΔΔᐃⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                ᐃᐃΔ: Mh.ᐃΔΔⵠⵠᐃⲆ,
                ΔᐃΔ: Mh.ⲆⲆⲆΔⲆⵠⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                ᐃᐃΔ: Mh.ΔᐃΔᐃⲆΔⵠ,
                ΔᐃΔ: Mh.ᐃⲆᐃᐃⲆⲆⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                ᐃᐃΔ: Mh.ᐃⵠΔΔᐃⵠⵠ,
                ΔᐃΔ: Mh.ⲆⵠΔΔⵠᐃⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                ᐃᐃΔ: Mh.ΔⵠᐃΔⲆΔΔ,
                ΔᐃΔ: Mh.ⵠΔⵠⲆᐃⲆⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                ᐃᐃΔ: Mh.ᐃΔⵠⲆⲆΔⲆ,
                ΔᐃΔ: Mh.ⲆⲆᐃᐃⲆⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                ᐃᐃΔ: Mh.ⲆⲆⵠΔᐃⵠᐃ,
                ΔᐃΔ: Mh.ⲆⵠΔᐃΔᐃΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                ᐃᐃΔ: Mh.ΔⵠⲆᐃΔΔⵠ,
                ΔᐃΔ: Mh.Δᐃⵠⵠᐃⵠᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                ᐃᐃΔ: Mh.ᐃᐃᐃⵠⲆᐃⵠ,
                ΔᐃΔ: Mh.ⵠⲆᐃᐃⵠΔᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                ᐃᐃΔ: Mh.ⵠΔⵠᐃⲆᐃᐃ,
                ΔᐃΔ: Mh.ᐃⵠⲆᐃΔΔᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                ᐃᐃΔ: Mh.ⵠΔⲆⲆⵠᐃⲆ,
                ΔᐃΔ: Mh.ⲆᐃΔᐃᐃΔΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                ᐃᐃΔ: Mh.ΔᐃΔⲆⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃⲆᐃᐃΔⲆⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                ᐃᐃΔ: Mh.ᐃⲆⲆΔᐃᐃⲆ,
                ΔᐃΔ: Mh.ᐃᐃⲆⵠⲆⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                ᐃᐃΔ: Mh.ΔⲆΔⲆⵠᐃⵠ,
                ΔᐃΔ: Mh.ⵠⲆΔΔⲆⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                ᐃᐃΔ: Mh.ⲆⲆᐃΔΔΔᐃ,
                ΔᐃΔ: Mh.ΔⲆⵠⲆᐃⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                ᐃᐃΔ: Mh.ⵠΔⲆⵠⵠᐃⵠ,
                ΔᐃΔ: Mh.ⲆⲆⵠⵠΔⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                ᐃᐃΔ: Mh.ⲆᐃΔⲆΔⲆΔ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃⵠⵠΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                ᐃᐃΔ: Mh.ᐃⲆΔⲆⲆᐃᐃ,
                ΔᐃΔ: Mh.ΔⵠᐃⲆᐃᐃⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                ᐃᐃΔ: Mh.ᐃⲆⵠΔᐃⲆᐃ,
                ΔᐃΔ: Mh.ΔⲆΔⵠΔΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                ᐃᐃΔ: Mh.ⵠⲆⲆⲆΔΔᐃ,
                ΔᐃΔ: Mh.ᐃⵠⵠⵠᐃᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                ᐃᐃΔ: Mh.ⵠΔΔⲆⲆⲆⲆ,
                ΔᐃΔ: Mh.ⲆΔᐃΔⵠΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                ᐃᐃΔ: Mh.ⵠᐃΔᐃⲆⵠⵠ,
                ΔᐃΔ: Mh.ⵠⲆⵠᐃΔⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                ᐃᐃΔ: Mh.ΔⲆΔΔΔⵠᐃ,
                ΔᐃΔ: Mh.ΔΔⲆΔᐃⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                ᐃᐃΔ: Mh.ᐃᐃⲆⲆⲆⵠΔ,
                ΔᐃΔ: Mh.ᐃⲆΔⲆᐃⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                ᐃᐃΔ: Mh.ᐃⲆΔⲆΔⲆⵠ,
                ΔᐃΔ: Mh.ᐃᐃⵠⵠⲆΔᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                ᐃᐃΔ: Mh.ᐃΔⲆⵠⲆⵠⵠ,
                ΔᐃΔ: Mh.ΔⵠΔᐃΔⲆⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                ᐃᐃΔ: Mh.ⵠⵠⵠⵠΔΔᐃ,
                ΔᐃΔ: Mh.ⵠⵠᐃⲆᐃⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                ᐃᐃΔ: Mh.ⵠᐃⲆΔΔΔⲆ,
                ΔᐃΔ: Mh.ᐃΔᐃⵠΔⵠⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                ᐃᐃΔ: Mh.ⲆⵠΔΔΔΔⲆ,
                ΔᐃΔ: Mh.ᐃⲆⲆⵠⲆᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                ᐃᐃΔ: Mh.ᐃⵠⵠⵠΔΔⵠ,
                ΔᐃΔ: Mh.ⲆⵠⵠΔΔⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                ᐃᐃΔ: Mh.ᐃⵠΔⲆⲆⵠᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔᐃΔⲆᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠⲆᐃⵠⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                ᐃᐃΔ: Mh.ᐃᐃⲆⵠᐃⵠᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔⲆᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                ᐃᐃΔ: Mh.ⵠⲆⵠⵠⲆⵠᐃ,
                ΔᐃΔ: Mh.ⲆⵠᐃⵠᐃΔᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                ᐃᐃΔ: Mh.ᐃⵠᐃⵠᐃⲆΔ,
                ΔᐃΔ: Mh.ΔΔΔᐃⵠⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                ᐃᐃΔ: Mh.ⲆⲆᐃⵠΔΔᐃ,
                ΔᐃΔ: Mh.ᐃᐃΔⲆΔⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                ᐃᐃΔ: Mh.ⲆⵠΔⲆᐃᐃⲆ,
                ΔᐃΔ: Mh.ⵠᐃᐃΔᐃΔⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                ᐃᐃΔ: Mh.ⵠᐃᐃΔⲆᐃⵠ,
                ΔᐃΔ: Mh.ⲆⵠᐃⵠⵠᐃΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                ᐃᐃΔ: Mh.ⲆⲆᐃⵠᐃⲆⲆ,
                ΔᐃΔ: Mh.ΔⵠᐃΔⲆⲆᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                ᐃᐃΔ: Mh.ᐃⵠᐃⵠΔⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠᐃΔⲆΔΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                ᐃᐃΔ: Mh.ⲆⵠΔⵠⲆᐃᐃ,
                ΔᐃΔ: Mh.ⵠⲆⵠⲆⲆⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                ᐃᐃΔ: Mh.ΔΔΔⵠⲆΔⲆ,
                ΔᐃΔ: Mh.ⲆⲆΔⲆⵠΔᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                ᐃᐃΔ: Mh.ᐃΔΔΔⵠᐃⵠ,
                ΔᐃΔ: Mh.ⵠⲆΔⵠᐃⲆΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                ᐃᐃΔ: Mh.ᐃⵠⵠᐃᐃΔᐃ,
                ΔᐃΔ: Mh.ΔⵠᐃⲆᐃⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                ᐃᐃΔ: Mh.ⵠⲆᐃⵠᐃΔᐃ,
                ΔᐃΔ: Mh.ⵠᐃΔᐃⵠΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                ᐃᐃΔ: Mh.ⵠⵠΔΔΔⵠᐃ,
                ΔᐃΔ: Mh.ΔᐃⲆΔΔⵠΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                ᐃᐃΔ: Mh.ᐃᐃⵠᐃⵠⲆⲆ,
                ΔᐃΔ: Mh.ᐃⲆⵠⲆΔⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                ᐃᐃΔ: Mh.ΔᐃⵠⲆΔᐃΔ,
                ΔᐃΔ: Mh.ᐃⵠᐃΔⵠΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                ᐃᐃΔ: Mh.ⲆⵠⲆᐃⲆⵠⵠ,
                ΔᐃΔ: Mh.ⵠᐃⵠᐃⵠⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                ᐃᐃΔ: Mh.ΔⵠⵠⵠⲆⵠⵠ,
                ΔᐃΔ: Mh.ⵠⵠⲆⵠᐃΔⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                ᐃᐃΔ: Mh.ᐃᐃⲆⲆⵠⵠᐃ,
                ΔᐃΔ: Mh.ᐃⵠᐃΔⲆⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                ᐃᐃΔ: Mh.ᐃⲆᐃⵠⲆΔᐃ,
                ΔᐃΔ: Mh.ⵠΔᐃᐃΔᐃᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                ᐃᐃΔ: Mh.ΔΔⵠⵠⲆⲆᐃ,
                ΔᐃΔ: Mh.ⵠⵠᐃⲆᐃΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                ᐃᐃΔ: Mh.ΔⵠᐃⲆⵠΔⲆ,
                ΔᐃΔ: Mh.ⲆΔᐃᐃΔⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                ᐃᐃΔ: Mh.ⵠΔᐃⲆᐃⲆᐃ,
                ΔᐃΔ: Mh.ⲆⲆⲆᐃΔⵠⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                ᐃᐃΔ: Mh.ⵠⲆᐃΔᐃΔⵠ,
                ΔᐃΔ: Mh.ⵠⲆΔⵠᐃⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                ᐃᐃΔ: Mh.ⵠⲆᐃⲆᐃⲆⵠ,
                ΔᐃΔ: Mh.ⵠⵠᐃⲆᐃΔⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                ᐃᐃΔ: Mh.ⲆᐃΔⵠⲆⲆⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆⲆⲆΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                ᐃᐃΔ: Mh.ⵠᐃΔᐃⵠᐃᐃ,
                ΔᐃΔ: Mh.ᐃⲆⲆⲆⵠⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                ᐃᐃΔ: Mh.ⵠᐃⵠⵠᐃⲆⲆ,
                ΔᐃΔ: Mh.ⲆΔΔΔⲆⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                ᐃᐃΔ: Mh.ⲆΔⲆΔᐃⵠⲆ,
                ΔᐃΔ: Mh.ΔⲆⲆⲆⵠⲆⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                ᐃᐃΔ: Mh.ΔⲆⲆⲆⲆⲆⲆ,
                ΔᐃΔ: Mh.ⵠⲆⲆᐃⵠⲆⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                ᐃᐃΔ: Mh.ⵠⲆΔⲆΔᐃⲆ,
                ΔᐃΔ: Mh.ⲆⲆΔΔΔⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                ᐃᐃΔ: Mh.ᐃᐃⵠⵠΔⲆⵠ,
                ΔᐃΔ: Mh.ᐃⲆⵠⲆΔΔⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                ᐃᐃΔ: Mh.ⲆⲆᐃⲆᐃⵠⲆ,
                ΔᐃΔ: Mh.ⲆⲆⵠᐃⲆⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                ᐃᐃΔ: Mh.ⵠΔΔΔⵠⲆᐃ,
                ΔᐃΔ: Mh.ΔᐃⲆⲆⲆΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                ᐃᐃΔ: Mh.ΔᐃⵠΔⲆΔⵠ,
                ΔᐃΔ: Mh.ⲆⲆΔⵠᐃΔᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                ᐃᐃΔ: Mh.ⲆΔⲆⲆΔΔⵠ,
                ΔᐃΔ: Mh.ⲆⲆⵠᐃᐃΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                ᐃᐃΔ: Mh.ΔⲆⲆⲆⲆⵠᐃ,
                ΔᐃΔ: Mh.ⵠⵠᐃⵠΔᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                ᐃᐃΔ: Mh.ᐃΔΔΔΔⲆⲆ,
                ΔᐃΔ: Mh.ΔᐃΔⵠⲆΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                ᐃᐃΔ: Mh.ᐃⲆᐃⵠⲆⲆᐃ,
                ΔᐃΔ: Mh.ᐃⵠΔⵠΔΔᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                ᐃᐃΔ: Mh.ΔᐃᐃΔⲆΔⲆ,
                ΔᐃΔ: Mh.ⵠⵠⲆⲆⲆⵠᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                ᐃᐃΔ: Mh.ⲆⵠⲆᐃⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠⲆΔᐃΔᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                ᐃᐃΔ: Mh.Ⲇᐃᐃᐃⵠⵠⵠ,
                ΔᐃΔ: Mh.ⵠᐃⲆⲆⵠᐃᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                ᐃᐃΔ: Mh.ΔⵠⵠᐃⲆΔΔ,
                ΔᐃΔ: Mh.ΔⲆⵠⵠᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                ᐃᐃΔ: Mh.ⵠⵠⵠΔΔⲆΔ,
                ΔᐃΔ: Mh.ΔⲆᐃⲆⲆΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ΔⲆᐃⵠⲆ: [{
                id: 0,
                ᐃᐃΔ: Mh.ᐃⲆⵠΔᐃΔⵠ,
                ΔᐃΔ: Mh.ΔⲆᐃΔⲆⵠΔ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                ᐃᐃΔ: Mh.ⵠⵠⵠⲆΔΔⵠ,
                ΔᐃΔ: Mh.ΔᐃΔⵠⵠΔΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                ᐃᐃΔ: Mh.ⵠⲆᐃΔⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠⵠᐃᐃⲆⵠⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                ᐃᐃΔ: Mh.ⲆⵠⵠⲆΔⲆΔ,
                ΔᐃΔ: Mh.ⲆⵠΔΔᐃⲆΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                ᐃᐃΔ: Mh.ᐃⲆΔⲆΔᐃᐃ,
                ΔᐃΔ: Mh.ᐃᐃⵠΔΔΔΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                ᐃᐃΔ: Mh.ⵠΔⵠΔᐃⵠⵠ,
                ΔᐃΔ: Mh.ΔⵠⵠⲆⵠᐃᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                ᐃᐃΔ: Mh.ⵠⲆⲆᐃⵠⲆᐃ,
                ΔᐃΔ: Mh.ⲆΔᐃⵠΔᐃⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                ᐃᐃΔ: Mh.Δᐃᐃᐃⵠᐃᐃ,
                ΔᐃΔ: Mh.ⵠΔΔⲆⵠᐃᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                ᐃᐃΔ: Mh.ΔⲆⲆᐃΔⵠⵠ,
                ΔᐃΔ: Mh.ⲆⵠⲆΔΔΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                ᐃᐃΔ: Mh.ᐃⲆⵠΔᐃⲆΔ,
                ΔᐃΔ: Mh.ⲆⵠᐃⲆᐃᐃΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                ᐃᐃΔ: Mh.ⵠⵠᐃΔΔⲆΔ,
                ΔᐃΔ: Mh.ᐃᐃᐃⵠΔⲆⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                ᐃᐃΔ: Mh.Δᐃᐃᐃⵠⵠᐃ,
                ΔᐃΔ: Mh.ᐃⲆⵠⲆⲆΔⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                ᐃᐃΔ: Mh.ⵠⵠⵠᐃⲆⲆΔ,
                ΔᐃΔ: Mh.ΔΔΔⵠⵠᐃᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                ᐃᐃΔ: Mh.ⲆᐃⵠⲆⲆⵠⵠ,
                ΔᐃΔ: Mh.ⵠⲆⵠᐃⵠⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                ᐃᐃΔ: Mh.ᐃᐃΔⵠⲆΔᐃ,
                ΔᐃΔ: Mh.ⲆⵠⵠⲆᐃⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                ᐃᐃΔ: Mh.ᐃᐃᐃΔⵠⵠⲆ,
                ΔᐃΔ: Mh.ᐃⵠⲆᐃΔᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                ᐃᐃΔ: Mh.ᐃᐃᐃⵠΔⲆᐃ,
                ΔᐃΔ: Mh.ΔᐃᐃⲆⵠᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                ᐃᐃΔ: Mh.ᐃⵠⵠΔΔᐃΔ,
                ΔᐃΔ: Mh.ΔⲆΔⲆⲆⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                ᐃᐃΔ: Mh.ᐃᐃᐃᐃᐃⲆⵠ,
                ΔᐃΔ: Mh.ⲆⵠⵠΔⲆⲆᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                ᐃᐃΔ: Mh.ⵠᐃⲆΔΔⲆⲆ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃᐃⲆΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                ᐃᐃΔ: Mh.ᐃΔᐃΔΔᐃⲆ,
                ΔᐃΔ: Mh.ΔΔⵠⵠᐃΔⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                ᐃᐃΔ: Mh.ΔᐃⵠᐃᐃΔⲆ,
                ΔᐃΔ: Mh.ᐃΔΔᐃΔᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                ᐃᐃΔ: Mh.ⲆⲆⲆᐃΔΔᐃ,
                ΔᐃΔ: Mh.ⲆᐃΔⲆⵠⲆᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                ᐃᐃΔ: Mh.ᐃᐃᐃⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ᐃΔΔⵠⲆᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                ᐃᐃΔ: Mh.ⵠΔⲆⲆⵠⵠᐃ,
                ΔᐃΔ: Mh.ⲆⵠΔΔᐃⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                ᐃᐃΔ: Mh.ᐃΔⵠⲆᐃⲆᐃ,
                ΔᐃΔ: Mh.ⵠᐃⵠⵠⵠⵠⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                ᐃᐃΔ: Mh.ᐃⲆᐃᐃⵠⵠⲆ,
                ΔᐃΔ: Mh.ⲆⲆⲆΔⲆⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                ᐃᐃΔ: Mh.ΔⲆⵠⵠΔⵠᐃ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃᐃᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                ᐃᐃΔ: Mh.ΔΔᐃΔⵠⲆⲆ,
                ΔᐃΔ: Mh.ΔⵠΔⵠΔⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                ᐃᐃΔ: Mh.ᐃⵠⲆⵠⵠᐃΔ,
                ΔᐃΔ: Mh.ᐃⵠᐃⵠⵠⵠⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                ᐃᐃΔ: Mh.ᐃᐃᐃᐃⲆᐃⲆ,
                ΔᐃΔ: Mh.ᐃⵠⲆⵠΔΔᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                ᐃᐃΔ: Mh.ΔⵠᐃΔⵠᐃΔ,
                ΔᐃΔ: Mh.ΔⲆⵠΔⵠΔᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                ᐃᐃΔ: Mh.ⲆΔⲆΔᐃⵠⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆⲆⵠⵠΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                ᐃᐃΔ: Mh.ᐃΔᐃᐃᐃⲆⵠ,
                ΔᐃΔ: Mh.ΔΔΔⵠⲆᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                ᐃᐃΔ: Mh.ⵠᐃⵠⲆᐃⵠⵠ,
                ΔᐃΔ: Mh.ΔⲆⲆⵠⲆΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                ᐃᐃΔ: Mh.ΔΔΔⲆⲆⵠᐃ,
                ΔᐃΔ: Mh.ΔΔⲆⲆΔΔⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                ᐃᐃΔ: Mh.ᐃΔⲆⵠᐃⲆᐃ,
                ΔᐃΔ: Mh.ᐃⲆΔᐃⲆΔᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                ᐃᐃΔ: Mh.ΔᐃⵠⵠᐃⵠⲆ,
                ΔᐃΔ: Mh.ΔΔΔⲆⲆᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                ᐃᐃΔ: Mh.ΔⲆⵠᐃⵠΔᐃ,
                ΔᐃΔ: Mh.ᐃᐃⲆΔⵠⵠⲆ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                ᐃᐃΔ: Mh.ⵠⲆⲆⲆᐃΔⲆ,
                ΔᐃΔ: Mh.ⲆᐃᐃⵠΔⲆᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                ᐃᐃΔ: Mh.ΔᐃⲆⵠᐃⵠⲆ,
                ΔᐃΔ: Mh.ⵠΔᐃⲆΔⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                ᐃᐃΔ: Mh.ⲆⲆᐃΔⲆΔⵠ,
                ΔᐃΔ: Mh.ᐃΔⲆᐃΔᐃⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                ᐃᐃΔ: Mh.ⲆΔⲆⵠΔΔᐃ,
                ΔᐃΔ: Mh.ⲆΔⲆⲆⲆΔΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                ᐃᐃΔ: Mh.ΔᐃΔΔⲆⲆΔ,
                ΔᐃΔ: Mh.ⵠⵠᐃⲆᐃⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                ᐃᐃΔ: Mh.ⵠᐃΔᐃⵠᐃⵠ,
                ΔᐃΔ: Mh.ⵠΔⲆΔΔⲆⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                ᐃᐃΔ: Mh.ⲆᐃⲆⲆⲆⵠⲆ,
                ΔᐃΔ: Mh.ᐃΔᐃⵠⵠᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                ᐃᐃΔ: Mh.ᐃᐃΔⵠᐃⵠⲆ,
                ΔᐃΔ: Mh.ⲆⵠⲆΔΔΔᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                ᐃᐃΔ: Mh.ΔⲆⲆⵠⲆΔⲆ,
                ΔᐃΔ: Mh.ⵠᐃⲆᐃᐃⲆⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                ᐃᐃΔ: Mh.ᐃΔⵠᐃⲆΔⵠ,
                ΔᐃΔ: Mh.ⲆᐃΔⵠΔᐃⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                ᐃᐃΔ: Mh.ᐃⵠⲆᐃᐃⲆⵠ,
                ΔᐃΔ: Mh.ᐃⲆΔΔⲆᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Cursed Book"
            }],
            ΔⵠᐃⲆⲆ: [{
                id: 0,
                ᐃᐃΔ: Mh.ᐃⵠⵠΔΔⲆⲆ,
                ΔᐃΔ: Mh.ᐃⵠⵠΔΔⲆⲆ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                ᐃᐃΔ: Mh.ᐃⲆΔⵠⵠⲆⵠ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃⵠΔᐃ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                ᐃᐃΔ: Mh.ᐃⵠⵠᐃΔⲆⵠ,
                ΔᐃΔ: Mh.ᐃⲆΔᐃⲆⵠΔ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                ᐃᐃΔ: Mh.ⵠᐃΔΔⵠⵠⵠ,
                ΔᐃΔ: Mh.ᐃⵠⲆⲆⵠΔᐃ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                ᐃᐃΔ: Mh.ⵠᐃΔⲆⵠⲆΔ,
                ΔᐃΔ: Mh.ᐃᐃⲆⲆᐃᐃᐃ,
                ⵠΔⲆ: aj.ⲆⵠⲆⲆⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                ᐃᐃΔ: Mh.ΔᐃΔⲆᐃΔⲆ,
                ΔᐃΔ: Mh.ⲆΔᐃᐃᐃⵠⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                ᐃᐃΔ: Mh.ⲆΔΔᐃΔΔᐃ,
                ΔᐃΔ: Mh.ΔᐃⲆΔΔⲆᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                ᐃᐃΔ: Mh.ⲆⵠⵠⲆΔᐃᐃ,
                ΔᐃΔ: Mh.ΔᐃΔΔᐃⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                ᐃᐃΔ: Mh.ⲆΔⲆᐃᐃⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆⲆΔⲆⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                ᐃᐃΔ: Mh.ⲆⲆᐃΔΔΔΔ,
                ΔᐃΔ: Mh.ⲆⵠᐃⲆⵠⲆᐃ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                ᐃᐃΔ: Mh.ⵠⲆᐃⲆᐃⵠⲆ,
                ΔᐃΔ: Mh.ᐃᐃᐃⵠΔΔΔ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                ᐃᐃΔ: Mh.ᐃᐃⵠᐃΔᐃⵠ,
                ΔᐃΔ: Mh.ᐃΔΔΔⵠⵠⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                ᐃᐃΔ: Mh.ᐃᐃⵠΔⵠⲆⲆ,
                ΔᐃΔ: Mh.ΔⲆⲆᐃⲆⲆⵠ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                ᐃᐃΔ: Mh.ⵠⲆᐃΔⲆΔᐃ,
                ΔᐃΔ: Mh.ⵠΔᐃᐃⵠᐃⲆ,
                ⵠΔⲆ: aj.ΔᐃᐃΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                ᐃᐃΔ: Mh.ΔΔᐃΔⵠᐃⲆ,
                ΔᐃΔ: Mh.ΔΔΔΔΔⵠΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                ᐃᐃΔ: Mh.ⵠΔᐃⲆΔⵠᐃ,
                ΔᐃΔ: Mh.ΔⲆᐃⲆⲆⵠⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                ᐃᐃΔ: Mh.ΔᐃⵠⵠΔΔΔ,
                ΔᐃΔ: Mh.ᐃᐃⵠΔⵠⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                ᐃᐃΔ: Mh.ⲆᐃᐃⲆⲆⲆⲆ,
                ΔᐃΔ: Mh.ⲆΔⵠⵠⵠⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                ᐃᐃΔ: Mh.ᐃΔⵠⲆⲆΔᐃ,
                ΔᐃΔ: Mh.ⲆⲆⵠⲆⵠΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                ᐃᐃΔ: Mh.ⵠⵠΔⵠⵠⲆⲆ,
                ΔᐃΔ: Mh.ΔΔᐃⲆⵠΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                ᐃᐃΔ: Mh.ⲆⲆⵠΔⲆΔⵠ,
                ΔᐃΔ: Mh.ᐃᐃᐃⲆΔᐃΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                ᐃᐃΔ: Mh.ⵠΔⲆᐃΔᐃⵠ,
                ΔᐃΔ: Mh.ⵠΔⵠⲆⵠΔⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                ᐃᐃΔ: Mh.ᐃᐃᐃΔⲆⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆΔΔⲆΔΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                ᐃᐃΔ: Mh.ⲆΔΔⲆⵠΔⲆ,
                ΔᐃΔ: Mh.ΔᐃᐃΔⵠⵠΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                ᐃᐃΔ: Mh.ⵠᐃᐃⵠᐃΔⲆ,
                ΔᐃΔ: Mh.ⲆⵠΔᐃⵠΔΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                ᐃᐃΔ: Mh.ⵠᐃⲆⵠⵠⵠΔ,
                ΔᐃΔ: Mh.ⲆΔΔⲆⵠⵠⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                ᐃᐃΔ: Mh.ΔᐃᐃⲆⲆᐃΔ,
                ΔᐃΔ: Mh.ᐃⵠⲆⲆⲆⲆΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                ᐃᐃΔ: Mh.ⵠᐃⵠⲆΔⲆⲆ,
                ΔᐃΔ: Mh.ⵠⵠᐃⵠⲆᐃⵠ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                ᐃᐃΔ: Mh.ⲆΔΔᐃⵠΔΔ,
                ΔᐃΔ: Mh.ⵠΔᐃⵠᐃⵠΔ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                ᐃᐃΔ: Mh.ᐃΔⵠΔΔΔⲆ,
                ΔᐃΔ: Mh.ⲆⵠΔᐃⵠⲆⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                ᐃᐃΔ: Mh.ⲆΔⵠᐃᐃⲆⵠ,
                ΔᐃΔ: Mh.ⵠᐃⲆΔᐃΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                ᐃᐃΔ: Mh.ᐃᐃⲆⲆΔⲆⲆ,
                ΔᐃΔ: Mh.ⵠΔΔⲆᐃΔⲆ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                ᐃᐃΔ: Mh.ⲆⲆᐃΔᐃⵠⲆ,
                ΔᐃΔ: Mh.ᐃⲆⲆⲆᐃΔᐃ,
                ⵠΔⲆ: aj.Δᐃᐃᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                ᐃᐃΔ: Mh.ⵠΔᐃⵠᐃⲆⵠ,
                ΔᐃΔ: Mh.ΔⲆΔΔΔᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                ᐃᐃΔ: Mh.ⲆⲆⵠΔⵠⲆⵠ,
                ΔᐃΔ: Mh.ΔΔΔᐃΔᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                ᐃᐃΔ: Mh.ᐃᐃᐃⵠⲆΔⵠ,
                ΔᐃΔ: Mh.ⲆⲆⵠⲆⲆΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                ᐃᐃΔ: Mh.ᐃᐃⲆⵠᐃⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆΔⲆᐃᐃᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                ᐃᐃΔ: Mh.ⲆⲆⵠᐃᐃⲆΔ,
                ΔᐃΔ: Mh.ΔΔΔⵠⲆⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                ᐃᐃΔ: Mh.ΔⵠᐃⵠⵠⲆⲆ,
                ΔᐃΔ: Mh.ΔⵠᐃᐃᐃᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                ᐃᐃΔ: Mh.ᐃΔΔᐃⵠΔⲆ,
                ΔᐃΔ: Mh.ΔⵠᐃΔⲆᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                ᐃᐃΔ: Mh.ⵠΔⵠᐃᐃΔⲆ,
                ΔᐃΔ: Mh.ᐃⵠΔΔΔΔΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                ᐃᐃΔ: Mh.ⲆΔΔᐃⲆⲆⵠ,
                ΔᐃΔ: Mh.ⲆⵠΔⲆΔᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                ᐃᐃΔ: Mh.ⲆΔᐃⵠᐃⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆⵠᐃⵠⵠⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                ᐃᐃΔ: Mh.ⵠΔⵠⲆⲆᐃΔ,
                ΔᐃΔ: Mh.ⵠΔΔΔᐃΔⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                ᐃᐃΔ: Mh.ᐃⵠⲆΔⲆΔᐃ,
                ΔᐃΔ: Mh.ⲆⵠᐃᐃⲆᐃⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                ᐃᐃΔ: Mh.ΔⵠΔⲆΔⵠΔ,
                ΔᐃΔ: Mh.ᐃΔⲆⲆᐃΔΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                ᐃᐃΔ: Mh.ΔΔⲆᐃΔⵠⵠ,
                ΔᐃΔ: Mh.ⵠⲆⵠⵠΔⵠⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                ᐃᐃΔ: Mh.ⲆⵠᐃⵠⲆᐃΔ,
                ΔᐃΔ: Mh.ΔᐃᐃᐃⲆⲆⵠ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                ᐃᐃΔ: Mh.ⵠᐃⲆᐃΔⲆⵠ,
                ΔᐃΔ: Mh.ΔⲆⲆⲆⵠΔⲆ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                ᐃᐃΔ: Mh.ⵠⵠΔᐃⵠⲆᐃ,
                ΔᐃΔ: Mh.ⲆⵠⵠΔᐃⲆᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                ᐃᐃΔ: Mh.ⲆΔΔⵠᐃΔΔ,
                ΔᐃΔ: Mh.ⵠᐃⲆⲆⵠᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                ᐃᐃΔ: Mh.ⵠⲆⲆⵠᐃΔⵠ,
                ΔᐃΔ: Mh.ⲆⵠᐃᐃΔᐃΔ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                ᐃᐃΔ: Mh.ΔᐃᐃⲆⵠᐃⵠ,
                ΔᐃΔ: Mh.ⲆΔΔᐃⵠⵠᐃ,
                ⵠΔⲆ: aj.ᐃΔⲆΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                ᐃᐃΔ: Mh.ⵠᐃⲆΔᐃⵠΔ,
                ΔᐃΔ: Mh.ⲆΔⲆΔⲆᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                ᐃᐃΔ: Mh.ⵠⲆΔⲆΔⵠⵠ,
                ΔᐃΔ: Mh.ΔⵠΔⵠᐃⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                ᐃᐃΔ: Mh.ΔⵠⵠⵠΔΔΔ,
                ΔᐃΔ: Mh.ᐃΔᐃⵠⵠᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                ᐃᐃΔ: Mh.ΔΔⵠⵠⲆⵠΔ,
                ΔᐃΔ: Mh.ᐃⲆⵠⲆᐃⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                ᐃᐃΔ: Mh.ⲆⲆᐃΔⵠΔᐃ,
                ΔᐃΔ: Mh.ΔΔΔⵠΔⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                ᐃᐃΔ: Mh.ⵠⲆⲆⲆΔᐃⵠ,
                ΔᐃΔ: Mh.ᐃᐃⵠⵠⲆⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                ᐃᐃΔ: Mh.ΔᐃΔᐃᐃⵠⲆ,
                ΔᐃΔ: Mh.ᐃᐃΔΔΔⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                ᐃᐃΔ: Mh.ΔⲆᐃᐃⲆⲆΔ,
                ΔᐃΔ: Mh.ᐃⲆΔⲆⲆᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                ᐃᐃΔ: Mh.ᐃΔⵠᐃᐃⲆᐃ,
                ΔᐃΔ: Mh.ⵠⲆᐃⲆⵠᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                ᐃᐃΔ: Mh.ⵠᐃᐃⵠⲆᐃᐃ,
                ΔᐃΔ: Mh.ⲆΔⵠⲆΔᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                ᐃᐃΔ: Mh.ᐃⲆⵠᐃⲆⵠΔ,
                ΔᐃΔ: Mh.ᐃΔⲆⲆΔⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                ᐃᐃΔ: Mh.ᐃΔⵠᐃⵠⵠⵠ,
                ΔᐃΔ: Mh.ΔⵠΔⵠⲆᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                ᐃᐃΔ: Mh.ᐃΔⲆⵠⵠᐃⵠ,
                ΔᐃΔ: Mh.ⵠΔΔⵠᐃⵠᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                ᐃᐃΔ: Mh.ᐃⵠΔⵠⵠⵠⲆ,
                ΔᐃΔ: Mh.ᐃⵠΔΔᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                ᐃᐃΔ: Mh.ΔⵠΔᐃⵠᐃⲆ,
                ΔᐃΔ: Mh.ⲆⲆᐃⲆⵠᐃⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                ᐃᐃΔ: Mh.ᐃΔᐃⲆⲆⲆΔ,
                ΔᐃΔ: Mh.ΔᐃⵠΔⵠⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                ᐃᐃΔ: Mh.ⲆⲆⵠⵠⵠⵠᐃ,
                ΔᐃΔ: Mh.ⲆᐃⵠⲆᐃⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                ᐃᐃΔ: Mh.ΔᐃⲆᐃΔⵠⵠ,
                ΔᐃΔ: Mh.ⵠⵠᐃⵠⵠᐃΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                ᐃᐃΔ: Mh.ΔᐃΔⵠᐃⲆⲆ,
                ΔᐃΔ: Mh.ⵠⵠᐃΔᐃᐃⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                ᐃᐃΔ: Mh.ⲆᐃⵠᐃΔⵠⲆ,
                ΔᐃΔ: Mh.ᐃⵠⲆΔΔⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                ᐃᐃΔ: Mh.ⲆΔⵠⲆⲆⵠᐃ,
                ΔᐃΔ: Mh.ⲆⲆⵠᐃⲆΔⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                ᐃᐃΔ: Mh.ⲆⲆᐃⲆΔⵠⵠ,
                ΔᐃΔ: Mh.ⲆᐃⲆΔᐃΔⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                ᐃᐃΔ: Mh.ΔΔⲆᐃΔΔᐃ,
                ΔᐃΔ: Mh.ⲆΔᐃᐃᐃⵠΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                ᐃᐃΔ: Mh.ⲆⵠⵠⲆⲆⲆⵠ,
                ΔᐃΔ: Mh.ΔⵠᐃΔΔⲆⵠ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                ᐃᐃΔ: Mh.ⲆΔΔΔⵠᐃΔ,
                ΔᐃΔ: Mh.ΔⵠΔⲆⵠⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                ᐃᐃΔ: Mh.ᐃᐃᐃᐃⵠΔⲆ,
                ΔᐃΔ: Mh.ⵠΔΔⲆᐃᐃᐃ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                ᐃᐃΔ: Mh.ᐃΔΔⵠΔΔΔ,
                ΔᐃΔ: Mh.ΔΔⲆⲆΔⲆΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                ᐃᐃΔ: Mh.ᐃⵠᐃⵠⲆᐃᐃ,
                ΔᐃΔ: Mh.ᐃⵠᐃΔᐃⵠⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                ᐃᐃΔ: Mh.ᐃᐃᐃⲆⲆΔⲆ,
                ΔᐃΔ: Mh.ⵠⲆⲆᐃᐃⲆⲆ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                ᐃᐃΔ: Mh.ⲆⵠⵠⵠΔⵠⲆ,
                ΔᐃΔ: Mh.ΔⵠΔⲆᐃΔΔ,
                ⵠΔⲆ: aj.ⵠⵠⵠⵠ,
                ᐃⵠᐃ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                ᐃᐃΔ: Mh.ᐃᐃⲆΔⵠᐃⲆ,
                ΔᐃΔ: Mh.ΔΔΔⲆΔᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                ᐃᐃΔ: Mh.ᐃⲆⲆⵠⲆⲆⵠ,
                ΔᐃΔ: Mh.ᐃΔᐃΔᐃⲆⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                ᐃᐃΔ: Mh.ΔΔⵠᐃΔⵠⲆ,
                ΔᐃΔ: Mh.ᐃⵠⵠᐃⵠᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                ᐃᐃΔ: Mh.ⲆΔΔΔⵠⲆΔ,
                ΔᐃΔ: Mh.ᐃᐃⵠΔⲆᐃⵠ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                ᐃᐃΔ: Mh.ⵠⲆⵠΔΔᐃᐃ,
                ΔᐃΔ: Mh.ᐃⲆⲆⲆᐃᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                ᐃᐃΔ: Mh.ᐃᐃᐃᐃⲆⲆΔ,
                ΔᐃΔ: Mh.ᐃΔⲆΔⵠⲆᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                ᐃᐃΔ: Mh.ⲆᐃᐃΔⵠⵠⲆ,
                ΔᐃΔ: Mh.ΔⵠΔᐃΔᐃᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                ᐃᐃΔ: Mh.ⲆᐃⲆΔⲆⵠΔ,
                ΔᐃΔ: Mh.ⵠΔᐃⵠᐃⲆΔ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                ᐃᐃΔ: Mh.ⲆⲆⵠᐃΔᐃⵠ,
                ΔᐃΔ: Mh.ⲆⵠᐃΔⲆΔᐃ,
                ⵠΔⲆ: aj.ⲆⲆΔΔ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                ᐃᐃΔ: Mh.ⲆⲆⲆⵠⲆⲆΔ,
                ΔᐃΔ: Mh.ⵠΔⲆΔΔⲆⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                ᐃᐃΔ: Mh.ⵠᐃᐃⵠⵠⵠΔ,
                ΔᐃΔ: Mh.ⵠᐃᐃᐃⲆᐃⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                ᐃᐃΔ: Mh.ⵠΔᐃᐃᐃⲆΔ,
                ΔᐃΔ: Mh.ⵠⲆΔⲆᐃⲆΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                ᐃᐃΔ: Mh.ᐃⵠⲆⲆⲆᐃᐃ,
                ΔᐃΔ: Mh.ⵠᐃⵠⵠⲆΔⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                ᐃᐃΔ: Mh.ᐃⵠΔⵠᐃΔⲆ,
                ΔᐃΔ: Mh.ΔΔⵠᐃᐃᐃΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                ᐃᐃΔ: Mh.ⲆⵠΔΔΔⵠⵠ,
                ΔᐃΔ: Mh.ⵠᐃⲆⲆⵠΔⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                ᐃᐃΔ: Mh.ⵠⵠΔΔⵠΔΔ,
                ΔᐃΔ: Mh.ⵠᐃΔⲆᐃᐃⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                ᐃᐃΔ: Mh.ᐃⵠⲆⲆᐃⲆⵠ,
                ΔᐃΔ: Mh.ΔⲆⵠⲆΔᐃⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                ᐃᐃΔ: Mh.ⲆⲆⲆᐃⵠⲆⵠ,
                ΔᐃΔ: Mh.ⲆΔᐃᐃΔⵠΔ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                ᐃᐃΔ: Mh.ΔΔᐃΔⲆᐃᐃ,
                ΔᐃΔ: Mh.ᐃΔᐃΔⲆⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                ᐃᐃΔ: Mh.ΔⲆΔᐃΔᐃⲆ,
                ΔᐃΔ: Mh.ⲆⵠΔᐃⲆⲆⲆ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                ᐃᐃΔ: Mh.ⵠΔⲆᐃⵠᐃⲆ,
                ΔᐃΔ: Mh.ⵠⵠⲆᐃᐃⲆⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                ᐃᐃΔ: Mh.ᐃⲆᐃⲆⲆⵠⵠ,
                ΔᐃΔ: Mh.ⲆΔⵠⲆⲆΔᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                ᐃᐃΔ: Mh.ᐃΔⲆΔⵠⵠΔ,
                ΔᐃΔ: Mh.ΔᐃⵠΔΔΔᐃ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                ᐃᐃΔ: Mh.ᐃᐃΔⵠΔᐃΔ,
                ΔᐃΔ: Mh.ⲆΔⲆΔⲆⵠⵠ,
                ⵠΔⲆ: aj.ⵠᐃⲆⲆ,
                ᐃⵠᐃ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                ᐃᐃΔ: Mh.ⲆⲆΔⲆⵠⵠⲆ,
                ΔᐃΔ: Mh.ΔⲆᐃᐃⲆΔᐃ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                ᐃᐃΔ: Mh.ᐃⵠΔᐃⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃⲆⵠΔⵠⲆⵠ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                ᐃᐃΔ: Mh.ΔⲆⵠⵠⵠⵠΔ,
                ΔᐃΔ: Mh.ⲆΔΔⲆⲆᐃᐃ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                ᐃᐃΔ: Mh.Ⲇᐃⵠⵠⵠⵠᐃ,
                ΔᐃΔ: Mh.ⵠᐃⵠⲆⵠΔΔ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                ᐃᐃΔ: Mh.ΔᐃᐃΔΔΔⲆ,
                ΔᐃΔ: Mh.ΔᐃΔᐃⲆΔⲆ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                ᐃᐃΔ: Mh.ᐃⵠΔⵠⵠⵠᐃ,
                ΔᐃΔ: Mh.ΔΔΔⵠᐃΔⵠ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                ᐃᐃΔ: Mh.ⲆΔⵠⲆᐃⲆᐃ,
                ΔᐃΔ: Mh.ⵠⵠᐃⲆΔᐃⵠ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                ᐃᐃΔ: Mh.ΔᐃΔᐃΔᐃⵠ,
                ΔᐃΔ: Mh.ΔᐃⲆⵠⲆᐃΔ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                ᐃᐃΔ: Mh.ⲆⲆΔΔⲆⲆⵠ,
                ΔᐃΔ: Mh.ΔᐃΔⲆΔΔⵠ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                ᐃᐃΔ: Mh.ⵠⲆⲆⵠⲆᐃⵠ,
                ΔᐃΔ: Mh.ⵠΔⲆᐃΔᐃⲆ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                ᐃᐃΔ: Mh.ΔᐃᐃᐃⵠᐃⲆ,
                ΔᐃΔ: Mh.ᐃᐃⲆⵠⵠⲆᐃ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                ᐃᐃΔ: Mh.ΔᐃⲆⵠᐃΔⲆ,
                ΔᐃΔ: Mh.ΔⲆⵠⵠᐃᐃᐃ,
                ⵠΔⲆ: aj.Ⲇⵠᐃⵠᐃ,
                ᐃⵠᐃ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        Df.ⲆⵠΔⲆⲆⵠᐃ = ᐃⲆΔᐃᐃΔⲆ(bj.ΔⲆⵠΔΔ, 21);
        Df.ⵠⵠⵠⵠᐃⲆᐃ = ᐃⲆΔᐃᐃΔⲆ(bj.ΔⲆⵠΔΔ, 20);
        ᐃⵠ[255] = [];
        ᐃⵠ[7] = [];
        ᐃⵠ[250] = [];
        ᐃⵠ[28] = [];
        ᐃⵠ[29] = [];
        ᐃⵠ[796] = [];
        for (var a = 0; a < bj.ΔⲆⵠΔΔ.length; a++) {
            ᐃⵠ[255][a] = [bj.ΔⲆⵠΔΔ[a].ᐃᐃΔ, bj.ΔⲆⵠΔΔ[a].ΔᐃΔ];
            ᐃⵠ[7][a] = [bj.ΔⲆⵠΔΔ[a].ⵠⵠⵠⲆ, bj.ΔⲆⵠΔΔ[a].ⲆᐃᐃΔ];
        }
        for (a = 0; bj.ΔⲆᐃⵠⲆ.length > a; a++) {
            ᐃⵠ[28][a] = [bj.ΔⲆᐃⵠⲆ[a].ᐃᐃΔ, bj.ΔⲆᐃⵠⲆ[a].ΔᐃΔ];
        }
        for (a = 0; bj.ΔⵠⵠΔᐃ.length > a; a++) {
            ᐃⵠ[250][a] = [bj.ΔⵠⵠΔᐃ[a].ᐃᐃΔ, bj.ΔⵠⵠΔᐃ[a].ΔᐃΔ];
        }
        for (a = 0; a < bj.ΔⵠᐃΔ.length; a++) {
            ᐃⵠ[29][a] = [bj.ΔⵠᐃΔ[a].ᐃᐃΔ, bj.ΔⵠᐃΔ[a].ΔᐃΔ];
        }
        for (a = 0; bj.ΔⵠᐃⲆⲆ.length > a; a++) {
            ᐃⵠ[796][a] = [bj.ΔⵠᐃⲆⲆ[a].ᐃᐃΔ, bj.ΔⵠᐃⲆⲆ[a].ΔᐃΔ];
        }
    };
    const Yb = 3;
    function Kb(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, e * (Math.PI * 2));
    }
    function Vb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    function Zb(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        Hb(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        qb(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    function Xb(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; c > i; i++) {
            g.push({
                x: d * Math.sin(i * f),
                y: Math.cos(i * f) * d
            });
            var j = g.length;
            a.push(og.ⵠᐃΔⲆⵠΔⲆ(g[j - 2], g[j - 1]));
        }
        a.push(og.ⵠᐃΔⲆⵠΔⲆ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; c > i; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    const $b = 7;
    function ed(b, c) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = b * 120;
        var j = b * 110;
        var a = i / 2;
        var k = j / 2;
        var m = b * 20;
        var h = b * 112;
        var l = b * 82;
        var g = h / 2;
        var n = l / 2;
        var d = b * 4;
        e.width = i;
        e.height = j;
        f.globalAlpha = 1;
        f.translate(a, k);
        Hb(f, -g, -n, h, l, m);
        qb(f, c, c, d);
        return e;
    }
    const id = 6;
    const td = 13;
    const nd = 12;
    function od(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        Hb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        Hb(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        Hb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        qb(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        Hb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        qb(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        Hb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        qb(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        qb(e, c[1]);
        return d;
    }
    function ad(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = g * b / 2;
        var j = a * b / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        Ub(f, 0, 0, k);
        qb(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        Ub(f, 0, 0, k);
        qb(f, d[1]);
        f.restore();
        return e;
    }
    function rd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        Ub(e, a * 11, a * 11, a * 10);
        qb(e, c[0]);
        e.globalAlpha = 0.7;
        Ub(e, a * 11, a * 11, a * 7);
        qb(e, c[0]);
        e.globalAlpha = 1;
        Ub(e, a * 11, a * 11, a * 4);
        qb(e, c[0]);
        return d;
    }
    function sd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        Hb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        qb(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        qb(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        Hb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        qb(d, b[0], b[0], a * 4);
        return c;
    }
    function hd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        qb(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        qb(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            qb(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            qb(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            qb(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        qb(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        qb(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        qb(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        qb(g, undefined, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        qb(g, Ts, d[2], b * 4);
        Ub(g, b * 63, b * 180, b * 15.231546211727817);
        qb(g, d[4]);
        Ub(g, b * 121, b * 181, b * 15.652475842498529);
        qb(g, d[4]);
        Ub(g, b * 58, b * 175, b * 5.656854249492381);
        qb(g, d[2]);
        Ub(g, b * 116, b * 175, b * 5.656854249492381);
        qb(g, d[2]);
        return f;
    }
    function ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        qb(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        return d;
    }
    function gd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        Ub(e, a * 26, a * 26, a * 9);
        qb(e, c[0]);
        Ub(e, a * 56, a * 36, a * 9);
        qb(e, c[1]);
        Ub(e, a * 40, a * 50, a * 9);
        qb(e, c[2]);
        e.globalAlpha = 1;
        Ub(e, a * 26, a * 26, a * 5);
        qb(e, c[0]);
        Ub(e, a * 56, a * 36, a * 5);
        qb(e, c[1]);
        Ub(e, a * 40, a * 50, a * 5);
        qb(e, c[2]);
        return d;
    }
    function ud(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Hb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        qb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Hb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        qb(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        Ub(e, a * 68, a * 111.29513549804688, a * 15);
        qb(e, c[7], c[8], a * 4);
        Ub(e, a * 123, a * 111.29510498046875, a * 15);
        qb(e, c[7], c[8], a * 4);
        Ub(e, a * 63, a * 106, a * 5);
        qb(e, c[9]);
        Ub(e, a * 118, a * 106, a * 5);
        qb(e, c[9]);
        return d;
    }
    function bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        Hb(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        Hb(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        Hb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        qb(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        qb(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        qb(e, c[3], c[1], a * 6);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        Hb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        Hb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        Hb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        qb(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        Hb(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        qb(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        Hb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        qb(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        qb(e, c[1]);
        return d;
    }
    function vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Hb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        qb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Hb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        return d;
    }
    const cd = _e;
    const md = 2;
    function pd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    const Cd = 16;
    function Td(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = vu(0.35, w, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = Au(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = Au(0.9, kj, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = Au(0.9, kk, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = Au(0.9, Gh, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function fd(b, c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = b * 32;
        var a = b * 32;
        var k = j / 2;
        var m = a / 2;
        f.width = j;
        f.height = a;
        var h = b * 5;
        var l = b * 28;
        var g = h / 2;
        var n = l / 2;
        i.translate(b * 0, b * 0);
        i.translate(k, m);
        if (e == 1) {
            Ub(i, 0, 0, b * 10);
            qb(i, c[2], c[2], b * 3);
            for (var d = 0; d < 4; d++) {
                Hb(i, -g, -n, h, l, b * 2);
                i.rotate(Math.PI / 4);
                qb(i, c[2], c[2], b * 4);
            }
        }
        Ub(i, 0, 0, b * 10);
        qb(i, c[0], c[1], b * 1.5);
        for (d = 0; d < 4; d++) {
            Hb(i, -g, -n, h, l, b * 2);
            i.rotate(Math.PI / 4);
            qb(i, c[0], c[1], b * 1.5);
        }
        Ub(i, 0, 0, b * 10);
        qb(i, c[0]);
        Ub(i, 0, 0, b * 4);
        qb(i, c[2], c[1], b * 1.5);
        i.globalCompositeOperation = "destination-out";
        Ub(i, 0, 0, b * 4);
        qb(i, c[0], c[1], b * 2);
        i.globalCompositeOperation = "source-over";
        Ub(i, 0, 0, b * 4);
        qb(i, undefined, c[1], b * 2);
        return f;
    }
    function zd(b, c) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = b * 100;
        var j = b * 100;
        var a = i / 2;
        var k = j / 2;
        e.width = i;
        e.height = j;
        var m = b * 5;
        var h = b * 28;
        var l = m / 2;
        var g = h / 2;
        f.translate(a, k);
        for (var n = 0; n < 4; n++) {
            Hb(f, -l, -g, m, h, b * 2);
            f.rotate(Math.PI / 4);
            qb(f, c);
        }
        f.arc(0, 0, b * 10, 0, Math.PI * 2);
        qb(f, c);
        f.globalCompositeOperation = "destination-out";
        Ub(f, 0, 0, b * 4);
        f.fill();
        return e;
    }
    const yd = 4;
    function wd(b, c) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = b * 85;
        var j = b * 115;
        var a = b * 6;
        e.width = i;
        e.height = j;
        f.translate(b * -130, b * -60 + a);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
        f.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
        f.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
        f.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
        f.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
        f.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
        f.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
        f.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
        f.closePath();
        qb(f, c[0]);
        f.translate(0, -a);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
        f.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
        f.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
        f.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
        f.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
        f.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
        f.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
        f.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
        f.closePath();
        qb(f, c[1], c[2], 4);
        var k = b * 155;
        var m = b * 133;
        var h = b * 10;
        var l = b * 3;
        var g = k + b * -3;
        var n = m + b * -5;
        f.save();
        f.translate(k, m);
        f.globalAlpha = 1;
        Ub(f, 0, 0, h);
        qb(f, c[3]);
        f.restore();
        f.save();
        f.translate(g, n);
        f.globalAlpha = 1;
        Ub(f, 0, 0, l);
        qb(f, c[4]);
        f.restore();
        f.save();
        f.translate(k + b * 27, m);
        f.globalAlpha = 1;
        Ub(f, 0, 0, h);
        qb(f, c[3]);
        f.restore();
        f.save();
        f.translate(b * 27 + g, n);
        f.globalAlpha = 1;
        Ub(f, 0, 0, l);
        qb(f, c[4]);
        return e;
    }
    function Pd(b, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (r = b * 125) / 2;
        var a = (t = b * 95) / 2;
        var n = b * 10;
        var o = b * 8;
        var h = b * 112;
        var l = b * 82;
        var g = h / 2;
        var q = l / 2;
        var d = b * 4;
        i.width = r;
        i.height = t;
        j.translate(k - b * 4, a + b * 4);
        j.globalAlpha = e ? 0.5 : 1;
        Hb(j, -g, -q, h, l, n);
        qb(j, f[0]);
        j.globalAlpha = 1;
        j.translate(0, -o);
        Hb(j, -g, -q, h, l, n);
        qb(j, f[1], f[2], d);
        var r = b * 55;
        var t = b * 45;
        n = 5;
        j.translate(b * -40, b * -30);
        Hb(j, 0, 0, r, t, n);
        qb(j, f[3]);
        var u = zd(b * 0.7, f[3]);
        j.drawImage(u, b * 45, b * -25);
        u = zd(b * 0.7, f[3]);
        j.drawImage(u, b * 45, b * 15);
        u = zd(b * 1.2, f[3]);
        j.drawImage(u, b * 28, b * -30);
        r = b * 15;
        t = b * 70;
        n = b * 5;
        j.translate(b * 78, b * -5);
        Hb(j, 0, 0, r, t, n);
        qb(j, f[4]);
        r = b * 9;
        t = b * 50;
        n = b * 3;
        j.translate(b * -20, b * 20);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 0.6;
        Hb(j, 0, 0, r, t, n);
        qb(j, f[5]);
        j.translate(b * -20, b * 29);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 0.6;
        j.beginPath();
        j.lineJoin = "round";
        j.moveTo(0, 0);
        j.lineTo(0, b * 30);
        j.lineTo(b * 30, b * 30);
        j.closePath();
        qb(j, null, f[5], b * 8);
        return i;
    }
    const Ad = 3;
    function kd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        qb(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        qb(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        qb(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        qb(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        qb(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        qb(d, undefined, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        qb(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        qb(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        qb(d, b[3]);
        Ub(d, a * 77, a * 107, a * 6);
        qb(d, b[2]);
        Ub(d, a * 110, a * 107, a * 6);
        qb(d, b[2]);
        Ub(d, a * 75, a * 105, a * 3);
        qb(d, b[4]);
        Ub(d, a * 108, a * 105, a * 3);
        qb(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        qb(d, b[1]);
        return c;
    }
    function xd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        qb(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        qb(f, d[2], d[3], 3);
        return e;
    }
    const Jd = 2;
    const Md = 4;
    const Bd = 1;
    function Ed(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        Ub(d, a * 213.5, a * 256.75, a * 75);
        qb(d, b[5]);
        Ub(d, a * 213.5, a * 175.75, a * 25);
        qb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        Ub(d, a * 213.5, a * 256.75, a * 75);
        qb(d, b[3]);
        Ub(d, a * 213.5, a * 175.75, a * 25);
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        Ub(d, a * 213.5, a * 256.75, a * 70);
        qb(d, b[0]);
        Ub(d, a * 213.5, a * 175.75, a * 20);
        qb(d, b[0]);
        Ub(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        Ub(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        Ub(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        Ub(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        Hb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        Hb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    const Dd = 9;
    const Id = 4;
    const Sd = {};
    Sd.get = function (a, b) {
        if (b !== "ⵠⲆᐃᐃ") {
            const a = Math.random;
            const b = [];
            const c = function () {
                for (let a = 0; a < 3477; a++) {
                    b.push(a);
                }
                return a();
            };
            Math.random = c;
        }
        return cj.Reflect.get(...arguments);
    };
    function Qd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 50, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 54, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        Xb(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        qb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        qb(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        qb(e, undefined, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        Xb(e, 6, a * 30, a * 15);
        e.restore();
        qb(e, c[3]);
        return d;
    }
    function _d(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        Hb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        qb(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        Hb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        qb(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        Hb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        qb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        Hb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        qb(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        Hb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        qb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        Hb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        qb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        Hb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        qb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        Hb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        qb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        Hb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        qb(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        Hb(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        qb(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        Hb(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        qb(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        qb(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        qb(e, Ft, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        qb(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        qb(e, rs, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            qb(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            qb(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            qb(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            qb(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            qb(e, pt, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            qb(e, undefined, b[0], a * 20);
            Ub(e, a * 142, a * 221, a * 16.1245154965971);
            qb(e, b[0]);
        }
        return d;
    }
    function Fd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        qb(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        qb(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        qb(e, undefined, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        qb(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        qb(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        qb(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        qb(e, undefined, c[1], a * 14);
        Ub(e, a * 161, a * 201, a * 13);
        qb(e, c[5]);
        Ub(e, a * 216, a * 205, a * 8.06225774829855);
        qb(e, c[5]);
        Ub(e, a * 216, a * 175, a * 6.708203932499369);
        qb(e, c[5]);
        Ub(e, a * 271, a * 191, a * 5.0990195135927845);
        qb(e, c[5]);
        Ub(e, a * 206, a * 180, a * 11.180339887498949);
        qb(e, c[5]);
        return d;
    }
    function Rd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        qb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        qb(e, br, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        qb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        qb(e, xn, c[1], a * 2);
        return d;
    }
    const Gd = 2;
    const jd = 3;
    const Ld = 8;
    function Wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        Xb(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        Xb(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        Xb(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        Xb(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        qb(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ub(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ub(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        qb(e, c[5], c[6], a * 4);
        return d;
    }
    const Od = 15;
    function Nd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        qb(e, jj, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        qb(e, hg, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        qb(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        qb(e, Uh, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        qb(e, Ze, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        qb(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        qb(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        qb(e, undefined, c[6], a * 4);
        return d;
    }
    function qd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        qb(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        qb(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        qb(f, false, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        qb(f, d[2]);
        return e;
    }
    function Hd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        Xb(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        Xb(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        qb(e, c[8], c[9], a * 4);
        return d;
    }
    const Ud = 1;
    const Yd = pt;
    const Kd = 6;
    function Vd(b, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = b * 195;
        var a = b * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = b * 10;
        var l = b * 35;
        var g = b * 150;
        var o = l / 2;
        var d = g / 2;
        var p = b * 4;
        j.translate(m - b * 5, n - b * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        j.translate(0, 5);
        Hb(j, -o / 2, -d / 2, l / 2, g / 3, h - 2);
        qb(j, f[1]);
        return i;
    }
    function Zd(b, e, f, i, j) {
        var k = document.createElement("canvas");
        var a = k.getContext("2d");
        var n = b * 70;
        var o = b * 70;
        var h = b * 10;
        var l = b * 5;
        k.width = n;
        k.height = o + l;
        for (var g = 0; g < e.length; g++) {
            var q = e[g];
            a.globalAlpha = q.a;
            var r = q.f(f, false, q.c);
            a.save();
            a.translate(n / 2 + b * q.x, o / 2 + q.y * b);
            a.rotate(q.r);
            a.drawImage(r, -r.width / 2, -r.height / 2);
            a.restore();
        }
        var s = [];
        for (g = 0; g < i.length; g++) {
            var c = document.createElement("canvas");
            var t = c.getContext("2d");
            c.width = n;
            c.height = o + l;
            t.globalAlpha = j / 2;
            if (g == 2) {
                Hb(t, 0, l, n, o, h);
            } else {
                Hb(t, 0, 0, n, o + l, h);
            }
            qb(t, "#081a19");
            t.globalAlpha = j;
            if (g == 2) {
                Hb(t, 0, l, n, o, h);
            } else {
                Hb(t, 0, 0, n, o, h);
            }
            qb(t, i[g]);
            t.globalAlpha = 1;
            if (g == 2) {
                t.drawImage(k, 0, l);
            } else {
                t.drawImage(k, 0, 0);
            }
            s.push(Ra(c));
        }
        return s;
    }
    const Xd = 0;
    function $d(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        Ub(f, 0, 0, h);
        qb(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Ub(f, 0, 0, h);
        qb(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Ub(f, 0, 0, h);
        qb(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Ub(f, 0, 0, h);
        qb(f, d[2]);
        return e;
    }
    function Gt(b, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = b * 193;
        var a = b * 198;
        var m = b * 140;
        var n = b * 90;
        i.width = k;
        i.height = a;
        var h = b * 10;
        var l = b * 25;
        var g = b * 180;
        var o = l / 2;
        var d = g / 2;
        var p = b * 4;
        j.translate(b * -25, b * 1);
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        j.translate(b * -30, b * -25);
        j.rotate(Math.PI / 3);
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        j.translate(b * 35, b * 30);
        j.rotate(Math.PI / 3);
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        return i;
    }
    const Ht = 0;
    function It(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        Ub(f, 0, 0, h);
        qb(f, d[0]);
        return e;
    }
    function Jt(b, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = b * 135;
        var a = b * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = b * 10;
        var l = b * 25;
        var g = b * 180;
        var o = l / 2;
        var d = g / 2;
        var p = b * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        Hb(j, -o, -d, l, g, h);
        qb(j, f[0], f[1], p);
        return i;
    }
    const Kt = 12;
    function Lt(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        Ub(f, i, j, h);
        qb(f, d[0]);
        return e;
    }
    function Mt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        qb(e, Ft, c[2], a * 4);
        Ub(e, a * 18, a * 38, a * 14.866068747318506);
        qb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        qb(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        qb(e, c[6], c[7], a * 6);
        return d;
    }
    function Nt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        Ub(e, 0, 0, a);
        qb(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        Ub(e, 0, 0, a);
        qb(e, c[1], c[2], h);
        return d;
    }
    function Ot(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        Ub(e, 0, 0, a);
        qb(e, c[0], c[1], h);
        return d;
    }
    const Pt = 14298768;
    const Qt = 14298768 .ᐃΔ;
    const Rt = `const ⲆᐃΔⵠΔ = (typeof ΔΔ === "${Qt}") ? 1 : 0; return ⲆᐃΔⵠΔ;`;
    function Tt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        qb(e, undefined, c[2], a * 4);
        Ub(e, a * 18, a * 38, a * 14.866068747318506);
        qb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        qb(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        return d;
    }
    function Ut(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        Ub(e, 0, 0, a);
        qb(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    const Vt = 8;
    function Wt(b, c, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var i = (o = b * 450) / 2;
        var a = (q = b * 145) / 2;
        var j = b * 10;
        var k = b * 300;
        var h = b * 30;
        var l = k / 2;
        var n = h / 2;
        var d = 4;
        if (e) {
            var o = b * 145;
            var q = b * 450;
            f.width = o;
            f.height = q;
            g.rotate(Math.PI / 2);
            g.save();
            g.globalAlpha = 0.5;
            Hb(g, b * 100, b * -110, k, h, j);
            qb(g, c[0]);
            g.translate(b * 178, b * -98);
            Hb(g, -l, -n - b * 6, b * 100, b * 100, j);
            qb(g, c[0]);
            g.translate(b * -50, b * 5);
            Hb(g, b * 220, b * -15, b * 90, b * 90, j);
            qb(g, c[0]);
            g.restore();
            g.save();
            g.globalAlpha = 1;
            g.translate(b * 250, b * -63);
            Hb(g, -l - b * 20, -n, k, h, j);
            qb(g, c[1], c[2], d);
            g.translate(b * -70, b * -40);
            Hb(g, -l - b * 20, -n, b * 100, b * 100, j);
            qb(g, c[3], c[4], d);
            g.translate(b * -70, b * 15);
            Hb(g, b * 220, b * -22, b * 90, b * 90, j);
            qb(g, c[3], c[4], d);
            Hb(g, b * 230, b * -12, b * 55, b * 55, j);
            qb(g, c[5]);
            g.translate(b * -70, 0);
            Hb(g, b * -15, b * -2, b * 60, b * 60, j);
            qb(g, c[5]);
            g.restore();
        } else {
            f.width = o;
            f.height = q;
            g.save();
            g.globalAlpha = 0.5;
            g.translate(i, a + b * 10);
            Hb(g, -l, -n, k, h, j);
            qb(g, c[0]);
            g.translate(b * -65, b * -25);
            Hb(g, -l, -n - b * 6, b * 100, b * 100, b * 15);
            qb(g, c[0]);
            g.translate(b * -35, b * -5);
            Hb(g, b * 220, b * -15, b * 90, b * 90, b * 15);
            qb(g, c[0]);
            g.restore();
            g.save();
            g.globalAlpha = 1;
            g.translate(b * 240, b * 70);
            Hb(g, -l, -n, k, h, j);
            qb(g, c[1], c[2], d);
            g.translate(b * -60, b * -40);
            Hb(g, -l - b * 20, -n, b * 100, b * 100, b * 15);
            qb(g, c[3], c[4], d);
            g.translate(b * -55, b * 10);
            Hb(g, b * 220, b * -22, b * 90, b * 90, b * 15);
            qb(g, c[3], c[4], d);
            Hb(g, b * 240, b * -12, b * 55, b * 55, b * 12);
            qb(g, c[5]);
            g.translate(b * 45, b * 0);
            Hb(g, b * -145, b * -2, b * 60, b * 60, b * 12);
            qb(g, c[5]);
            g.restore();
        }
        return f;
    }
    function Xt(b, c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = b * 105;
        var a = b * 125;
        var k = b * 4;
        var m = b * 10;
        var h = b * 5;
        var l = b * 10;
        var g = b * 110;
        var n = l / 2;
        var d = g / 2;
        f.width = j;
        f.height = a;
        i.save();
        i.globalAlpha = c ? 0.5 : 1;
        i.translate(j / 2 + b * 8, a / 2 + h);
        Hb(i, -n, -d, l, g, m);
        qb(i, c ? e[0] : e[1]);
        i.translate(b * -130 + h, b * -128 + h);
        i.beginPath();
        i.bezierCurveTo(b * 159, b * 93, b * 156, b * 99, b * 154, b * 102);
        i.bezierCurveTo(b * 128, b * 92, b * 90, b * 93, b * 72, b * 96);
        i.bezierCurveTo(b * 68, b * 84, b * 143, b * 73, b * 162, b * 86);
        i.closePath();
        qb(i, e[2]);
        i.restore();
        i.translate(j / 2 + 8, a / 2);
        i.globalAlpha = 1;
        Hb(i, -n, -d, l, g, m);
        qb(i, e[3], e[4], k);
        i.translate(b * -130, b * -125);
        i.beginPath();
        i.bezierCurveTo(b * 159, b * 93, b * 156, b * 99, b * 154, b * 102);
        i.bezierCurveTo(b * 128, b * 92, b * 90, b * 93, b * 72, b * 96);
        i.bezierCurveTo(b * 68, b * 84, b * 143, b * 73, b * 162, b * 86);
        i.closePath();
        qb(i, e[5], e[6], k);
        return f;
    }
    function Yt(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function Zt(b, c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var a = b * 210;
        var k = b * 205;
        var m = b * 30;
        var h = b * 20;
        var l = b * 200;
        var g = b * 180;
        var n = l / 2;
        var d = g / 2;
        i.width = a;
        i.height = k;
        i.width = b * 419;
        i.height = b * 412;
        if (f == 1) {
            j.save();
            j.translate(b * 10, b * 0);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 117.99996948242188, b * 216.40621948242188);
            j.bezierCurveTo(b * 86.99996948242188, b * 221.40621948242188, b * 74.99996948242188, b * 217.40621948242188, b * 60.999969482421875, b * 205.40621948242188);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 114.99996948242188, b * 227.40621948242188);
            j.bezierCurveTo(b * 90.99996948242188, b * 233.40621948242188, b * 66.99996948242188, b * 228.40621948242188, b * 43.999969482421875, b * 225.40621948242188);
            qb(j, Ts, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 110.99996948242188, b * 236.40621948242188);
            j.bezierCurveTo(b * 94.99996948242188, b * 244.40621948242188, b * 79.99996948242188, b * 249.40621948242188, b * 60.999969482421875, b * 249.40621948242188);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 111.99996948242188, b * 206.29513549804688);
            j.bezierCurveTo(b * 91.99996948242188, b * 206.29513549804688, b * 87.99996948242188, b * 201.29513549804688, b * 79.99996948242188, b * 192.29513549804688);
            qb(j, fq, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 109.99996948242188, b * 249.18402099609375);
            j.bezierCurveTo(b * 97.99996948242188, b * 263.18402099609375, b * 85.99996948242188, b * 271.18402099609375, b * 65.99996948242188, b * 277.18402099609375);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 105.99996948242188, b * 192.18402099609375);
            j.bezierCurveTo(b * 99.49996948242188, b * 197.68402099609375, b * 99.49996948242188, b * 197.68402099609375, b * 92.99996948242188, b * 203.18402099609375);
            j.bezierCurveTo(b * 95.99996948242188, b * 213.18402099609375, b * 95.99996948242188, b * 215.18402099609375, b * 89.99996948242188, b * 219.18402099609375);
            j.bezierCurveTo(b * 91.99996948242188, b * 223.18402099609375, b * 91.99996948242188, b * 226.18402099609375, b * 87.99996948242188, b * 230.18402099609375);
            j.bezierCurveTo(b * 89.99996948242188, b * 234.18402099609375, b * 91.99996948242188, b * 237.18402099609375, b * 90.99996948242188, b * 244.18402099609375);
            j.bezierCurveTo(b * 96.99996948242188, b * 252.18402099609375, b * 96.99996948242188, b * 256.18402099609375, b * 95.99996948242188, b * 262.18402099609375);
            j.bezierCurveTo(b * 106.49996948242188, b * 264.18402099609375, b * 106.49996948242188, b * 264.18402099609375, b * 116.99996948242188, b * 266.18402099609375);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 104.99996948242188, b * 183.29513549804688);
            j.bezierCurveTo(b * 99.99996948242188, b * 193.29513549804688, b * 93.99996948242188, b * 195.29513549804688, b * 89.99996948242188, b * 201.29513549804688);
            j.bezierCurveTo(b * 86.99996948242188, b * 212.29513549804688, b * 85.99996948242188, b * 214.29513549804688, b * 81.99996948242188, b * 215.29513549804688);
            j.bezierCurveTo(b * 83.99996948242188, b * 223.29513549804688, b * 83.99996948242188, b * 227.29513549804688, b * 79.99996948242188, b * 230.29513549804688);
            j.bezierCurveTo(b * 83.99996948242188, b * 235.29513549804688, b * 84.99996948242188, b * 240.29513549804688, b * 79.99996948242188, b * 246.29513549804688);
            j.bezierCurveTo(b * 86.99996948242188, b * 251.29513549804688, b * 91.99996948242188, b * 256.2951354980469, b * 89.99996948242188, b * 266.2951354980469);
            j.bezierCurveTo(b * 102.99996948242188, b * 269.2951354980469, b * 102.99996948242188, b * 269.2951354980469, b * 115.99996948242188, b * 272.2951354980469);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 107.99996948242188, b * 177.85067749023438);
            j.bezierCurveTo(b * 95.99996948242188, b * 187.35067749023438, b * 95.99996948242188, b * 187.35067749023438, b * 83.99996948242188, b * 196.85067749023438);
            j.bezierCurveTo(b * 82.99996948242188, b * 203.85067749023438, b * 80.99996948242188, b * 209.85067749023438, b * 72.99996948242188, b * 210.85067749023438);
            j.bezierCurveTo(b * 73.99996948242188, b * 220.85067749023438, b * 73.99996948242188, b * 221.85067749023438, b * 66.99996948242188, b * 227.85067749023438);
            j.bezierCurveTo(b * 71.99996948242188, b * 235.85067749023438, b * 73.99996948242188, b * 239.85067749023438, b * 71.99996948242188, b * 247.85067749023438);
            j.bezierCurveTo(b * 80.99996948242188, b * 257.8506774902344, b * 81.99996948242188, b * 263.8506774902344, b * 77.99996948242188, b * 271.8506774902344);
            j.bezierCurveTo(b * 95.49996948242188, b * 272.8506774902344, b * 95.49996948242188, b * 272.8506774902344, b * 112.99996948242188, b * 273.8506774902344);
            qb(j, Uh, c[4], b * 3);
            j.restore();
        } else if (f == 2) {
            j.save();
            j.translate(b * 130, b * 35);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 170.99996948242188, b * 133.85067749023438);
            j.bezierCurveTo(b * 195.99996948242188, b * 129.85067749023438, b * 196.99996948242188, b * 111.85067749023438, b * 200.99996948242188, b * 88.85067749023438);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 169.99996948242188, b * 143.85067749023438);
            j.bezierCurveTo(b * 189.99996948242188, b * 145.85067749023438, b * 207.99996948242188, b * 126.85067749023438, b * 222.99996948242188, b * 100.85067749023438);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 170.99996948242188, b * 157.85067749023438);
            j.bezierCurveTo(b * 193.99996948242188, b * 160.85067749023438, b * 210.99996948242188, b * 151.85067749023438, b * 232.99996948242188, b * 139.85067749023438);
            qb(j, yk, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 169.99996948242188, b * 168.85067749023438);
            j.bezierCurveTo(b * 192.99996948242188, b * 175.85067749023438, b * 203.99996948242188, b * 177.85067749023438, b * 245.99996948242188, b * 168.85067749023438);
            qb(j, xn, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 167.99996948242188, b * 168.85067749023438);
            j.bezierCurveTo(b * 183.99996948242188, b * 189.85067749023438, b * 191.99996948242188, b * 193.85067749023438, b * 220.99996948242188, b * 196.85067749023438);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 176.99996948242188, b * 117.85067749023438);
            j.bezierCurveTo(b * 181.99996948242188, b * 120.85067749023438, b * 181.99996948242188, b * 120.85067749023438, b * 186.99996948242188, b * 123.85067749023438);
            j.bezierCurveTo(b * 183.99996948242188, b * 137.85067749023438, b * 185.99996948242188, b * 136.85067749023438, b * 190.99996948242188, b * 136.85067749023438);
            j.bezierCurveTo(b * 186.99996948242188, b * 147.85067749023438, b * 189.99996948242188, b * 152.85067749023438, b * 193.99996948242188, b * 155.85067749023438);
            j.bezierCurveTo(b * 187.99996948242188, b * 165.85067749023438, b * 190.99996948242188, b * 169.85067749023438, b * 190.99996948242188, b * 172.85067749023438);
            j.bezierCurveTo(b * 186.99996948242188, b * 183.85067749023438, b * 186.99996948242188, b * 185.85067749023438, b * 189.99996948242188, b * 188.85067749023438);
            j.bezierCurveTo(b * 182.49996948242188, b * 195.35067749023438, b * 182.49996948242188, b * 195.35067749023438, b * 174.99996948242188, b * 201.85067749023438);
            qb(j, undefined, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 176.99996948242188, b * 112.18402099609375);
            j.bezierCurveTo(b * 183.99996948242188, b * 119.18402099609375, b * 186.99996948242188, b * 117.18402099609375, b * 192.99996948242188, b * 116.18402099609375);
            j.bezierCurveTo(b * 191.99996948242188, b * 126.18402099609375, b * 193.99996948242188, b * 130.18402099609375, b * 199.99996948242188, b * 130.18402099609375);
            j.bezierCurveTo(b * 194.99996948242188, b * 145.18402099609375, b * 197.99996948242188, b * 147.18402099609375, b * 201.99996948242188, b * 153.18402099609375);
            j.bezierCurveTo(b * 196.99996948242188, b * 164.18402099609375, b * 197.99996948242188, b * 169.18402099609375, b * 201.99996948242188, b * 174.18402099609375);
            j.bezierCurveTo(b * 194.99996948242188, b * 184.18402099609375, b * 196.99996948242188, b * 187.18402099609375, b * 200.99996948242188, b * 193.18402099609375);
            j.bezierCurveTo(b * 185.99996948242188, b * 195.18402099609375, b * 181.99996948242188, b * 201.18402099609375, b * 174.99996948242188, b * 210.18402099609375);
            qb(j, xn, c[4], b * 3);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 176.99996948242188, b * 101.29513549804688);
            j.bezierCurveTo(b * 181.99996948242188, b * 108.29513549804688, b * 189.99996948242188, b * 110.29513549804688, b * 195.99996948242188, b * 107.29513549804688);
            j.bezierCurveTo(b * 197.99996948242188, b * 121.29513549804688, b * 200.99996948242188, b * 122.29513549804688, b * 206.99996948242188, b * 122.29513549804688);
            j.bezierCurveTo(b * 201.99996948242188, b * 138.29513549804688, b * 204.99996948242188, b * 142.29513549804688, b * 211.99996948242188, b * 148.29513549804688);
            j.bezierCurveTo(b * 201.99996948242188, b * 156.29513549804688, b * 205.99996948242188, b * 167.29513549804688, b * 213.99996948242188, b * 173.29513549804688);
            j.bezierCurveTo(b * 204.99996948242188, b * 181.29513549804688, b * 204.99996948242188, b * 187.29513549804688, b * 205.99996948242188, b * 193.29513549804688);
            j.bezierCurveTo(b * 190.99996948242188, b * 198.29513549804688, b * 181.99996948242188, b * 205.29513549804688, b * 174.99996948242188, b * 214.29513549804688);
            qb(j, undefined, c[4], b * 3);
            j.restore();
        }
        j.translate(i.width / 2, i.height / 2);
        if (!f) {
            j.globalAlpha = 0.5;
            Hb(j, -n, -d, l, g + h, m);
            qb(j, c[0]);
            if (e) {
                j.rotate(Math.PI);
            }
            j.globalAlpha = 1;
            Hb(j, -n, -d, l, g, m);
            qb(j, c[1], c[2], 4);
            j.globalAlpha = 1;
            Hb(j, b * 35 - n, b * 20 - d, l - b * 50, g - b * 50, m - b * 10);
            qb(j, c[3]);
        }
        if (f == 3) {
            j.translate(-i.width / 2, -i.height / 2);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 121, b * 190);
            j.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
            j.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
            j.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
            j.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
            j.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
            j.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
            j.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
            j.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
            j.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 219, b * 144);
            j.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
            j.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
            j.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
            j.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
            j.closePath();
            qb(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 123, b * 214);
            j.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
            j.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
            j.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
            j.closePath();
            qb(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 257, b * 199);
            j.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
            j.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
            j.closePath();
            qb(j, c[5]);
            j.translate(b * -5, b * 55);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 186, b * 123);
            j.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
            j.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
            j.closePath();
            qb(j, c[5]);
            j.translate(b * 5, b * -55);
            j.translate(b * -5, b * 15);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 171, b * 241);
            j.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
            j.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
            j.closePath();
            qb(j, c[5]);
        } else if (f == 4) {
            j.translate(-i.width / 2, -i.height / 2);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 30, b * 167);
            j.bezierCurveTo(b * 47, b * 144, b * 64, b * 140, b * 80, b * 147);
            j.bezierCurveTo(b * 95, b * 154, b * 95, b * 159, b * 100, b * 179);
            j.bezierCurveTo(b * 105, b * 202, b * 95, b * 218, b * 69, b * 218);
            j.bezierCurveTo(b * 48, b * 236, b * 26, b * 223, b * 28, b * 213);
            j.bezierCurveTo(b * 28, b * 205, b * 29, b * 199, b * 32, b * 195);
            j.bezierCurveTo(b * 21, b * 183, b * 27, b * 173, b * 30, b * 167);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 26, b * 145);
            j.bezierCurveTo(b * 32, b * 138, b * 37, b * 137, b * 40, b * 139);
            j.bezierCurveTo(b * 43, b * 140, b * 41, b * 150, b * 31, b * 159);
            j.bezierCurveTo(b * 23, b * 166, b * 17, b * 158, b * 26, b * 145);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 13, b * 193);
            j.bezierCurveTo(b * 21, b * 187, b * 30, b * 190, b * 20, b * 202);
            j.bezierCurveTo(b * 13, b * 208, b * 7, b * 202, b * 13, b * 193);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 121, b * 190);
            j.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
            j.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
            j.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
            j.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
            j.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
            j.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
            j.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
            j.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
            j.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 335, b * 196);
            j.bezierCurveTo(b * 312, b * 208, b * 300, b * 185, b * 309, b * 167);
            j.bezierCurveTo(b * 314, b * 141, b * 339, b * 127, b * 359, b * 144);
            j.bezierCurveTo(b * 363, b * 148, b * 364, b * 150, b * 364, b * 150);
            j.bezierCurveTo(b * 392, b * 143, b * 396, b * 183, b * 378, b * 204);
            j.bezierCurveTo(b * 367, b * 215, b * 339, b * 208, b * 335, b * 196);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 349, b * 212);
            j.bezierCurveTo(b * 339, b * 216, b * 334, b * 208, b * 341, b * 203);
            j.bezierCurveTo(b * 353, b * 198, b * 361, b * 205, b * 349, b * 212);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 46, b * 165);
            j.bezierCurveTo(b * 55, b * 148, b * 85, b * 157, b * 83, b * 175);
            j.bezierCurveTo(b * 99, b * 185, b * 89, b * 212, b * 66, b * 204);
            j.bezierCurveTo(b * 55, b * 212, b * 43, b * 212, b * 41, b * 202);
            j.bezierCurveTo(b * 39, b * 194, b * 42, b * 187, b * 49, b * 185);
            j.bezierCurveTo(b * 44, b * 175, b * 45, b * 172, b * 46, b * 165);
            j.closePath();
            qb(j, c[4]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 219, b * 144);
            j.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
            j.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
            j.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
            j.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
            j.closePath();
            qb(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 123, b * 214);
            j.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
            j.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
            j.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
            j.closePath();
            qb(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 257, b * 199);
            j.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
            j.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
            j.closePath();
            qb(j, c[5]);
            j.translate(b * -5, b * 55);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 186, b * 123);
            j.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
            j.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
            j.closePath();
            qb(j, c[5]);
            j.translate(b * 5, b * -55);
            j.translate(b * -5, b * 15);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 171, b * 241);
            j.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
            j.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
            j.closePath();
            qb(j, c[5]);
            j.beginPath();
            j.lineCap = "round";
            j.lineJoin = "round";
            j.moveTo(b * 367, b * 164);
            j.bezierCurveTo(b * 380, b * 160, b * 391, b * 185, b * 371, b * 189);
            j.bezierCurveTo(b * 362, b * 192, b * 354, b * 191, b * 350, b * 185);
            j.bezierCurveTo(b * 326, b * 205, b * 314, b * 182, b * 316, b * 171);
            j.bezierCurveTo(b * 317, b * 150, b * 332, b * 143, b * 347, b * 147);
            j.bezierCurveTo(b * 361, b * 151, b * 366, b * 158, b * 367, b * 164);
            j.closePath();
            qb(j, c[4]);
        }
        return i;
    }
    function $t(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            qb(g, undefined, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        qb(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            qb(g, undefined, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            qb(g, pt, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            qb(g, undefined, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                qb(g, hg, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                qb(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                qb(g, undefined, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            qb(g, pt, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            qb(g, Ze, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            qb(g, oh, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                qb(g, undefined, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                qb(g, $g, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                qb(g, undefined, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                qb(g, rs, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            qb(g, undefined, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            qb(g, Wr, c[2], b * 7);
        }
        return f;
    }
    const _t = xn;
    function au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Hb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        qb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        qb(e, yk, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        qb(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        qb(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Hb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        qb(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        qb(e, c[6]);
        return d;
    }
    function bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Hb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        qb(e, c[0]);
        Ub(e, a * 204, a * 693, a * 36.013886210738214);
        qb(e, c[0]);
        Ub(e, a * 105, a * 518, a * 30);
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Hb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        qb(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        qb(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        qb(e, c[6], c[4], a * 16);
        Ub(e, a * 204, a * 693, a * 36.013886210738214);
        qb(e, c[6], c[4], a * 16);
        Ub(e, a * 105, a * 518, a * 30);
        qb(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        qb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        qb(e, c[6]);
        Ub(e, a * 204, a * 693, a * 17.029386365926403);
        qb(e, c[7]);
        Ub(e, a * 106, a * 518, a * 12);
        qb(e, c[7]);
        return d;
    }
    function cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        qb(e, c[0]);
        Ub(e, a * 160.5, a * 243.03125, a * 7);
        qb(e, c[0]);
        Ub(e, a * 227.5, a * 242.03125, a * 7);
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        qb(e, c[0], c[0], a * 5);
        Ub(e, a * 194, a * 298, a * 9);
        qb(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        qb(e, c[1], c[2], a * 5);
        Ub(e, a * 160.5, a * 243.03125, a * 7);
        qb(e, c[1], c[2], a * 5);
        Ub(e, a * 227.5, a * 242.03125, a * 7);
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        qb(e, c[1], c[2], a * 7);
        Ub(e, a * 194, a * 298, a * 9);
        qb(e, c[1], c[2], a * 7);
        return d;
    }
    const du = 13;
    function eu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        qb(d, Uh, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        qb(d, $g, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        qb(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        qb(d, Ta, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        qb(d, $g, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        qb(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    function fu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        qb(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        qb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        qb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        qb(g, Ze, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        qb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        qb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        qb(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        qb(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        qb(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        qb(g, pt, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        qb(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        qb(g, _t, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        qb(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        qb(g, undefined, d[1], b * 20);
        Ub(g, b * 101, b * 155, b * 20.591260281974);
        qb(g, d[3]);
        Ub(g, b * 180, b * 155, b * 20.591260281974);
        qb(g, d[3]);
        Ub(g, b * 95, b * 148, b * 7.211102550927978);
        qb(g, d[4]);
        Ub(g, b * 173, b * 148, b * 7.211102550927978);
        qb(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            qb(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            qb(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            qb(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            qb(g, d[2]);
        }
        return f;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        qb(e, undefined, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        qb(e, undefined, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        qb(e, Yd, c[4], a * 4);
        return d;
    }
    function hu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        return d;
    }
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Hb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        qb(e, c[0]);
        Ub(e, a * 122, a * 480, a * 18.439088914585774);
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Hb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        qb(e, c[4], c[5], a * 12.5);
        Ub(e, a * 122, a * 480, a * 18.439088914585774);
        qb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        qb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        qb(e, c[3]);
        return d;
    }
    function ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        return d;
    }
    const ku = 1;
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Hb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Hb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        qb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        qb(e, c[3]);
        return d;
    }
    function mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        qb(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        Ub(e, a * 107, a * 152, a * 9);
        qb(e, c[6]);
        Ub(e, a * 105, a * 173, a * 9);
        qb(e, c[6]);
        Ub(e, a * 87, a * 161, a * 9);
        qb(e, c[6]);
        Ub(e, a * 106, a * 147, a * 4);
        qb(e, c[7]);
        Ub(e, a * 104, a * 167, a * 4);
        qb(e, c[7]);
        Ub(e, a * 86, a * 154, a * 4);
        qb(e, c[7]);
        return d;
    }
    function nu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Hb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        Xb(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Hb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        qb(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        Xb(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        qb(e, c[3]);
        return d;
    }
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Hb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        qb(e, c[0]);
        Ub(e, a * 121, a * 480, a * 20.396078054371138);
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Hb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        qb(e, c[4], c[5], a * 12.5);
        Ub(e, a * 121, a * 480, a * 20.396078054371138);
        qb(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        qb(e, c[1], c[2], a * 12.5);
        return d;
    }
    const pu = 2;
    const qu = 13;
    const ru = 1;
    function su(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        qb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        qb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        qb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        qb(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        qb(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        qb(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        qb(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        qb(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function tu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        qb(d, undefined, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        qb(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        qb(d, undefined, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        qb(d, undefined, b[2], a * 8);
        return c;
    }
    function uu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        Ub(e, a * 42, a * 43, a * 24.758836806279895);
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        qb(e, c[0]);
        e.translate(0, a * -10);
        Ub(e, a * 42, a * 43, a * 24.758836806279895);
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        qb(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        qb(e, c[7], c[8], a * 5);
        return d;
    }
    function tu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        qb(d, b[0], b[0], a * 4);
        return c;
    }
    function vu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        qb(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        qb(f, d[1], d[2], j);
        return e;
    }
    function wu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        Xb(g, 7, j, h);
        qb(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            Xb(g, 6, j * 0.65, h * 0.65);
            qb(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            Xb(g, 6, j * 0.45, h * 0.4);
            qb(g, d[2]);
        }
        return f;
    }
    function xu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        Xb(f, 8, i, j);
        qb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        Xb(f, 8, i, j);
        qb(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        Xb(f, 5, i * 0.5, j * 0.4);
        qb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        Xb(f, 5, i * 0.5, j * 0.4);
        qb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        Xb(f, 5, i * 0.5, j * 0.4);
        qb(f, d[2]);
        f.restore();
        return e;
    }
    function yu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * c * 2;
        var a = c * b * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        Ub(f, 0, 0, c * b);
        qb(f, d);
        return e;
    }
    function zu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Xb(f, 5, h, i);
        qb(f, d[2]);
        f.restore();
        Ub(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        qb(f, d[2]);
        return e;
    }
    function Au(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        Ub(f, 0, 0, k);
        qb(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        Ub(f, 0, 0, k);
        qb(f, d[1]);
        f.restore();
        return e;
    }
    function Bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Hb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        qb(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        qb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Hb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        qb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Hb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        qb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Hb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        qb(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Hb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        qb(e, c[0], c[0], a * 6);
        Ub(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        qb(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Hb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        qb(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Hb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        qb(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Hb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        qb(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Hb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        qb(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Hb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        qb(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Hb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        qb(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        Ub(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        qb(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    function Cu(b, e, f, i, j, k, n, o, p, h, l = 0) {
        var g = document.createElement("canvas");
        var q = g.getContext("2d");
        k = k ? b * k : 0;
        var d = Math.floor(f * b);
        q.font = d + "px Baloo Paaji";
        q.lineJoin = "round";
        o *= b;
        var r = n ? o * 2 : 0;
        if (p) {
            var c = Math.min(q.measureText(e).width + b * 2 + r, p);
        } else {
            c = q.measureText(e).width + b * 2 + r + b * l * 2;
        }
        d = b * (d + k + l) + r;
        g.width = c;
        g.height = d;
        if (n) {
            q.fillStyle = n;
            Hb(q, 0, 0, c, d, o * 2);
            q.fill();
            q.translate(o, o);
        }
        q.textBaseline = "middle";
        q.font = f + "px Baloo Paaji";
        q.lineJoin = "round";
        if (j) {
            q.beginPath();
            q.fillStyle = j;
            q.fillText(e, 0, d / 2 + k - r / 2, c);
        }
        q.beginPath();
        if (h) {
            q.strokeStyle = h;
            q.lineWidth = l;
            q.strokeText(e, l, (d - r) / 2, c);
        }
        q.fillStyle = i;
        q.fillText(e, l, (d - r) / 2, c);
        return g;
    }
    function Du(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        qb(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        qb(e, c[0], c[1], a * 8);
        Ub(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        qb(e, c[2]);
        Ub(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        qb(e, c[2]);
        Ub(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        qb(e, c[2]);
        Ub(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        qb(e, c[2]);
        Ub(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        qb(e, c[2]);
        Ub(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        return d;
    }
    function Eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        qb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        qb(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        qb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        qb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        qb(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        qb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        qb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        qb(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        qb(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        qb(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        qb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        qb(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        qb(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        qb(e, Uh, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        qb(e, yk, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        qb(e, Ze, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        qb(e, Ta, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        qb(e, undefined, c[3], a * 4);
        return d;
    }
    function Gu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        Xb(f, 7, i, j);
        qb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        Xb(f, 7, i, j);
        qb(f, d[1]);
        Xb(f, 6, i * 0.65, j * 0.65);
        qb(f, d[2]);
        return e;
    }
    function Hu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        qb(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        qb(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        qb(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        qb(e, Ts, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        qb(e, Yd, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        qb(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        qb(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        qb(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        qb(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        qb(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        qb(e, ei, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        qb(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        qb(e, undefined, c[1], a * 2);
        return d;
    }
    function ec(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            qb(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            qb(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            qb(a, d[0]);
        }
        return g;
    }
    const ic = 1;
    function tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        qb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        qb(e, Wr, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        qb(e, Ft, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        qb(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        qb(e, c[5], c[6], a * 12);
        Ub(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        qb(e, c[7]);
        Ub(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        qb(e, c[8]);
        return d;
    }
    function nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        qb(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        qb(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        qb(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        qb(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        qb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        qb(e, c[4]);
        Ub(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        qb(e, c[5]);
        Ub(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        qb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        qb(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        qb(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        qb(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        qb(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        qb(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        qb(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        qb(e, xn, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        qb(e, undefined, c[9], a * 3);
        return d;
    }
    function oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        qb(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        qb(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        qb(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        qb(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        qb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        qb(e, c[1], c[2], a * 7);
        return d;
    }
    const ac = 3;
    function rc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        Xb(e, 6, a * 146, a * 30);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        Xb(e, 6, a * 146, a * 30);
        e.restore();
        qb(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Xb(e, 6, a * 105, a * 30);
        e.restore();
        qb(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Xb(e, 6, a * 66, a * 30);
        e.restore();
        qb(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        Xb(e, 7, a * 17, a * 8);
        e.restore();
        qb(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        Xb(e, 7, a * 25, a * 8);
        e.restore();
        qb(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        Xb(e, 7, a * 11, a * 8);
        e.restore();
        qb(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        Xb(e, 7, a * 12, a * 8);
        e.restore();
        qb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        qb(e, oh, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        qb(e, oh, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        qb(e, undefined, c[2], a * 8);
        return d;
    }
    function sc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        qb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        qb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        qb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        qb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        qb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        qb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        qb(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        qb(d, yk, b[2], a * 4);
        return c;
    }
    function hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (Pb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            Xb(e, 8, a * 41, a * 10);
            qb(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        Xb(e, 8, a * 41, a * 10);
        qb(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        Xb(e, 8, a * 33, a * 10);
        qb(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        Xb(e, 8, a * 24, a * 8);
        qb(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Hb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Hb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        Ub(e, a * 45, a * 29, a * 7);
        qb(e, c[5]);
        Ub(e, a * 45, a * 61, a * 7);
        qb(e, c[5]);
        Ub(e, a * 28, a * 45, a * 7);
        qb(e, c[5]);
        Ub(e, a * 62, a * 45, a * 7);
        qb(e, c[5]);
        return d;
    }
    function lc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        Ub(f, 0, 0, b * 60);
        qb(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        Ub(f, 0, 0, b * 60);
        qb(f, d[1], d[2], b * 4);
        Ub(f, 0, 0, b * 40);
        qb(f, d[3]);
        Ub(f, 0, 0, b * 25);
        qb(f, d[4], d[5], b * 8);
        return e;
    }
    function gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (Pb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            Xb(e, 7, a * 41, a * 10);
            e.restore();
            qb(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        Xb(e, 7, a * 41, a * 10);
        qb(e, c[1], c[2], a * 4);
        Xb(e, 7, a * 35, a * 10);
        qb(e, c[3], c[4], a * 4);
        Xb(e, 7, a * 23, a * 5);
        e.restore();
        qb(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Hb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Hb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        Ub(e, a * 45, a * 29, a * 7);
        qb(e, c[5]);
        Ub(e, a * 45, a * 61, a * 7);
        qb(e, c[5]);
        Ub(e, a * 28, a * 45, a * 7);
        qb(e, c[5]);
        Ub(e, a * 62, a * 45, a * 7);
        qb(e, c[5]);
        return d;
    }
    function uc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        Xb(e, 7, a * 60, a * 10);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        Xb(e, 7, a * 60, a * 10);
        qb(e, c[1], c[2], 4);
        e.rotate(0.64);
        Xb(e, 7, a * 40, a * 10);
        qb(e, c[3], c[4], 4);
        e.rotate(0.12);
        Xb(e, 7, a * 23, a * 5);
        e.restore();
        qb(e, c[5]);
        return d;
    }
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if (Pb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            Ub(e, a * 44, a * 55, a * 41);
            qb(e, c[0]);
        }
        e.globalAlpha = 1;
        Ub(e, a * 44, a * 45, a * 41);
        qb(e, c[1], c[2], a * 4);
        Ub(e, a * 44, a * 45, a * 31);
        qb(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        Hb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        Hb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        Ub(e, a * 45, a * 29, a * 7);
        qb(e, c[5]);
        Ub(e, a * 45, a * 61, a * 7);
        qb(e, c[5]);
        Ub(e, a * 28, a * 45, a * 7);
        qb(e, c[5]);
        Ub(e, a * 62, a * 45, a * 7);
        qb(e, c[5]);
        return d;
    }
    function dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        Xb(e, 6, a * 146, a * 30);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        Xb(e, 6, a * 146, a * 30);
        e.restore();
        qb(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Xb(e, 6, a * 105, a * 30);
        e.restore();
        qb(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Xb(e, 6, a * 66, a * 30);
        e.restore();
        qb(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Xb(e, 6, a * 31, a * 30);
        e.restore();
        qb(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        qb(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        qb(e, Ft, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        qb(e, undefined, c[2], a * 8);
        return d;
    }
    function vc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        qb(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        qb(e, c[2], c[3], a * 1);
        return d;
    }
    function cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        Xb(e, 8, a * 60, a * 10);
        qb(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        Xb(e, 8, a * 60, a * 10);
        qb(e, c[1], c[2], 4);
        e.rotate(0.56);
        Xb(e, 8, a * 40, a * 10);
        qb(e, c[3], c[4], 4);
        e.rotate(0.28);
        Xb(e, 8, a * 28, a * 8);
        qb(e, c[5]);
        e.restore();
        return d;
    }
    function mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        Xb(e, 9, a * 60, a * 10);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        Xb(e, 9, a * 60, a * 10);
        qb(e, c[1], c[2], 4);
        e.rotate(-0.32);
        Xb(e, 9, a * 38, a * 10);
        qb(e, c[3], c[4], 4);
        e.rotate(0.68);
        Xb(e, 9, a * 20, a * 8);
        qb(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    const pc = 2;
    function Cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        qb(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        qb(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        qb(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        qb(e, c[2], c[3], a * 7);
        return d;
    }
    function Tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Hb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Hb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        qb(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        qb(e, c[8]);
        return d;
    }
    function fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        qb(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        qb(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        qb(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        qb(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        qb(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        qb(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        qb(e, c[3], c[2], a * 10);
        return d;
    }
    function zc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Hb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Hb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        qb(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        qb(e, $g, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        qb(e, $g, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        qb(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        return d;
    }
    function yc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Hb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Hb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        qb(e, undefined, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        qb(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        qb(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        qb(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        qb(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        qb(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        qb(e, c[10]);
        return d;
    }
    function wc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        qb(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        qb(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Hb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Hb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        return d;
    }
    function Pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (Pb === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            Xb(e, 9, a * 41, a * 10);
            e.restore();
            qb(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        Xb(e, 9, a * 41, a * 10);
        qb(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        Xb(e, 9, a * 32, a * 10);
        qb(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        Xb(e, 9, a * 23, a * 8);
        qb(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Hb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Hb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        qb(e, c[4], c[4], a * 2);
        Ub(e, a * 45, a * 29, a * 7);
        qb(e, c[5]);
        Ub(e, a * 45, a * 61, a * 7);
        qb(e, c[5]);
        Ub(e, a * 28, a * 45, a * 7);
        qb(e, c[5]);
        Ub(e, a * 62, a * 45, a * 7);
        qb(e, c[5]);
        return d;
    }
    function Ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Hb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Hb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        qb(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        qb(e, c[8]);
        return d;
    }
    function kc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        qb(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        qb(e, c[3], c[4], a * 15);
        return d;
    }
    function xc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        Hb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        Hb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        qb(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        Hb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        Hb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        qb(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        qb(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Hb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Hb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        qb(e, c[1], c[2], a * 5);
        return d;
    }
    function Jc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        qb(e, hg, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        qb(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        qb(e, yk, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        qb(e, undefined, c[5], a * 8);
        return d;
    }
    const Mc = 8;
    function Bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        Hb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        Hb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        qb(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        qb(e, c[8]);
        return d;
    }
    function Ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Hb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        qb(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        qb(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Hb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        qb(e, c[8]);
        return d;
    }
    function Dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        Hb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        Hb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        qb(e, c[0]);
        return d;
    }
    function Ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        qb(e, c[0], c[1], 4);
        return d;
    }
    function Sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        qb(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        qb(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        qb(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        qb(e, c[0], c[1], 4);
        return d;
    }
    function Qc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        Hb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        Hb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        qb(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        Hb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        qb(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        Hb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        qb(e, br, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        qb(e, Ts, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        qb(e, undefined, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        qb(e, ei, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        qb(e, Ft, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        Hb(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        qb(e, Ta, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        Hb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        qb(e, c[8]);
        return d;
    }
    const _c = 2;
    function Fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        qb(e, xn, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        qb(e, oh, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        return d;
    }
    function Rc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        Xb(f, 7, b * 60, b * 10);
        f.restore();
        qb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Xb(f, 3, b * 21, b * 4);
            qb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        Xb(f, 9, b * 60, b * 10);
        qb(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        Xb(f, 9, b * 38, b * 10);
        qb(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        Xb(f, 9, b * 20, b * 8);
        qb(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function Gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        Hb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        Hb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        Hb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        Hb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        Hb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        Hb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        qb(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        Hb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        qb(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        Hb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        qb(e, c[3], c[4], a * 3);
        return d;
    }
    function jc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        Xb(f, 7, b * 60, b * 10);
        f.restore();
        qb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Xb(f, 3, b * 21, b * 4);
            qb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        Xb(f, 8, b * 60, b * 10);
        qb(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        Xb(f, 8, b * 40, b * 10);
        qb(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        Xb(f, 8, b * 28, b * 8);
        qb(f, d[7]);
        f.restore();
        return e;
    }
    const Lc = 2830668;
    const Wc = 2830668 .ᐃΔΔᐃΔᐃᐃᐃⲆ;
    const Oc = `const ⲆⲆⵠⵠᐃⲆΔⲆΔ = (typeof ΔᐃᐃⲆⵠΔᐃ === "${Wc}") ? 1 : 0; return ⲆⲆⵠⵠᐃⲆΔⲆΔ;`;
    function Nc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        Xb(f, 7, b * 60, b * 10);
        f.restore();
        qb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Xb(f, 3, b * 21, b * 4);
            qb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        Xb(f, 7, b * 60, b * 10);
        qb(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        Xb(f, 7, b * 40, b * 10);
        qb(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        Xb(f, 7, b * 23, b * 5);
        f.restore();
        qb(f, d[7]);
        return e;
    }
    function qc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        Ub(f, 0, 0, b * 60);
        qb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Xb(f, 3, b * 20, b * 4);
            qb(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        Ub(f, 0, 0, b * 60);
        qb(f, d[3], d[4], b * 4);
        Ub(f, 0, 0, b * 40);
        qb(f, d[5]);
        Ub(f, 0, 0, b * 25);
        qb(f, d[6], d[7], b * 8);
        return e;
    }
    const Hc = 3;
    function Uc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function Yc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        Hb(d, 0, 0, 20, 35, 7);
        qb(d, b[0]);
        return c;
    }
    function Kc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        qb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        qb(d, b[3]);
        Ub(d, a * 103, a * 110, a * 11);
        qb(d, b[4]);
        Ub(d, a * 55, a * 111, a * 11);
        qb(d, b[4]);
        Ub(d, a * 99, a * 107, a * 5);
        qb(d, b[1]);
        Ub(d, a * 51, a * 108, a * 5);
        qb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        qb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        qb(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        qb(d, Yd, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        qb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        qb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        qb(d, b[3]);
        return c;
    }
    function Vc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        qb(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        qb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        qb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        qb(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        qb(d, b[1]);
        Ub(d, a * 102, a * 269, a * 11);
        qb(d, b[3]);
        Ub(d, a * 98, a * 266, a * 5);
        qb(d, b[6]);
        Ub(d, a * 168, a * 269, a * 11);
        qb(d, b[3]);
        Ub(d, a * 164, a * 266, a * 5);
        qb(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        qb(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        qb(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        qb(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        qb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        qb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        qb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        qb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        qb(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        qb(d, b[7]);
        return c;
    }
    function Zc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        qb(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        qb(e, c[2]);
        return d;
    }
    function Xc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        Hb(e, 0, 0, a * 400, a * 220, a * 30);
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        qb(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        qb(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        qb(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        qb(e, c[3], c[1], a * 12);
        Ub(e, a * 41, a * 30, a * 14.7648230602334);
        qb(e, c[3], c[1], a * 12);
        Ub(e, a * 369, a * 30, a * 15.556349186104045);
        qb(e, c[3], c[1], a * 12);
        Ub(e, a * 364, a * 190, a * 15.620499351813308);
        qb(e, c[3], c[1], a * 12);
        Ub(e, a * 41, a * 186, a * 15.556349186104045);
        qb(e, c[3], c[1], a * 12);
        return d;
    }
    function $c(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        Ub(d, a * 86.5, a * 98, a * 80);
        qb(d, b[0]);
        d.globalAlpha = 1;
        Ub(d, a * 86.5, a * 89, a * 81);
        qb(d, b[1], b[2], a * 4);
        Ub(d, a * 86.5, a * 86, a * 59);
        qb(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        Ub(d, a * 86.5, a * 95, a * 34);
        qb(d, b[0]);
        d.globalAlpha = 1;
        Ub(d, a * 86.5, a * 89, a * 34);
        qb(d, b[5]);
        return c;
    }
    function em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        qb(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        qb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        qb(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        qb(d, b[1], b[2], a * 4);
        Ub(d, a * 51, a * 91, a * 9);
        qb(d, b[3]);
        Ub(d, a * 95, a * 91, a * 9);
        qb(d, b[3]);
        Ub(d, a * 91, a * 89, a * 4);
        qb(d, b[4]);
        Ub(d, a * 47, a * 89, a * 4);
        qb(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        qb(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        qb(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        qb(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        qb(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        qb(d, b[6]);
        return c;
    }
    function im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        Ub(d, a * 74.5, a * 85, a * 66);
        qb(d, b[0]);
        d.globalAlpha = 1;
        Ub(d, a * 75.5, a * 72.5, a * 67);
        qb(d, b[1], b[2], a * 4);
        Ub(d, a * 75.5, a * 73.5, a * 54);
        qb(d, b[3]);
        d.globalAlpha = 0.5;
        Ub(d, a * 74.5, a * 80.5, a * 39);
        qb(d, b[4]);
        d.globalAlpha = 1;
        Ub(d, a * 74.5, a * 74.5, a * 37);
        qb(d, b[5]);
        return c;
    }
    function tm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            qb(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            qb(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            qb(d, b[0]);
        }
        return e;
    }
    function nm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    function om(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        qb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        qb(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        qb(d, b[2]);
        return c;
    }
    function am(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    const rm = 3121041;
    const sm = 3121041 .ΔⲆⵠⵠⵠᐃⲆ;
    const hm = `const ᐃⲆⵠᐃΔⵠΔⵠⲆ = (typeof ⵠⵠⲆⲆⲆⲆᐃⲆᐃ === "${sm}") ? 1 : 0; return ᐃⲆⵠᐃΔⵠΔⵠⲆ;`;
    function lm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        Ub(d, a * 126.5, a * 134, a * 119);
        qb(d, b[0]);
        d.globalAlpha = 1;
        Ub(d, a * 126.5, a * 124, a * 119);
        qb(d, b[1], b[2], a * 4);
        Ub(d, a * 126.5, a * 127, a * 100);
        qb(d, b[3]);
        d.globalAlpha = 0.5;
        Ub(d, a * 126.5, a * 135, a * 81);
        qb(d, b[0]);
        d.globalAlpha = 1;
        Ub(d, a * 126.5, a * 125, a * 84);
        qb(d, b[4], b[5], a * 4);
        Ub(d, a * 126.5, a * 125, a * 61);
        qb(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        Ub(d, a * 126.5, a * 134, a * 40);
        qb(d, b[8]);
        d.globalAlpha = 1;
        Ub(d, a * 126.5, a * 125, a * 40);
        qb(d, b[9]);
        return c;
    }
    function gm(a) {
        return cj.String.fromCharCode(a);
    }
    function um(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    function bm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    function dm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    function vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 41, a * 30, a * 14.7648230602334);
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 369, a * 30, a * 15.556349186104045);
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 364, a * 190, a * 15.620499351813308);
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 41, a * 186, a * 15.556349186104045);
            qb(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 41, a * 30, a * 14.7648230602334);
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 369, a * 30, a * 15.556349186104045);
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 364, a * 190, a * 15.620499351813308);
            qb(e, b[3], b[3], a * 32);
            Ub(e, a * 41, a * 186, a * 15.556349186104045);
            qb(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        qb(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        qb(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        qb(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        qb(e, b[2], b[0], a * 12);
        Ub(e, a * 41, a * 30, a * 14.7648230602334);
        qb(e, b[2], b[0], a * 12);
        Ub(e, a * 369, a * 30, a * 15.556349186104045);
        qb(e, b[2], b[0], a * 12);
        Ub(e, a * 364, a * 190, a * 15.620499351813308);
        qb(e, b[2], b[0], a * 12);
        Ub(e, a * 41, a * 186, a * 15.556349186104045);
        qb(e, b[2], b[0], a * 12);
        return d;
    }
    function cm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        qb(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    function mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        qb(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        qb(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        qb(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        qb(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        qb(e, Ze, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        qb(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        qb(e, c[3], c[4], a * 8);
        return d;
    }
    function pm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = Xc(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            Ub(g, b * 113, b * 120, b * 66);
            qb(g, undefined, d[4], b * 13);
            a = cu(b * 0.65, Aq, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            qb(g, undefined, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            Ub(g, b * 113, b * 120, b * 66);
            qb(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            Hb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            qb(g, "#dff2f7", "#187484", b * 7);
            Ub(g, b * 22, b * 82, b * 12);
            qb(g, "#dff2f7", "#187484", b * 7);
            Ub(g, b * 145, b * 82, b * 12);
            qb(g, "#dff2f7", "#187484", b * 7);
            a = vu(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = vu(b * 0.5, gg, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = vu(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = Au(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            Ub(g, b * 113, b * 120, b * 66);
            qb(g, xn, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            Hb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            qb(g, undefined, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            qb(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            qb(g, undefined, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            qb(g, undefined, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            qb(g, undefined, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            qb(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            qb(g, br, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            qb(g, oh, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            qb(g, $g, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            qb(g, undefined, d[5], b * 14);
        }
        return f;
    }
    function Cm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        qb(d, b[0]);
        return c;
    }
    const Tm = 3;
    function fm() {
        ᐃⵠ[814] = Zd(1, [{
            f: lp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[815] = ᐃⵠ[814];
        ᐃⵠ[955] = [];
        ᐃⵠ[955][0] = Mh.ΔⲆᐃⲆⵠΔΔ;
        ᐃⵠ[955][1] = Mh.ⵠⵠΔᐃⲆⲆⵠ;
        ᐃⵠ[955][2] = Mh.ᐃᐃΔΔⵠᐃⲆ;
        ᐃⵠ[956] = ᐃⵠ[955];
        ᐃⵠ[972] = [];
        ᐃⵠ[972][0] = Mh.ᐃⵠΔᐃᐃᐃᐃ;
        ᐃⵠ[972][1] = Mh.ⵠⲆᐃΔΔᐃⵠ;
        ᐃⵠ[972][2] = Mh.ⲆⵠⵠⲆⲆⲆΔ;
        ᐃⵠ[973] = ᐃⵠ[972];
        ᐃⵠ[987] = [];
        ᐃⵠ[987][0] = Mh.ⲆΔΔⵠⵠⵠᐃ;
        ᐃⵠ[987][1] = Mh.ⵠᐃᐃΔᐃᐃⲆ;
        ᐃⵠ[987][2] = Mh.ᐃΔⵠⲆΔⵠⲆ;
        ᐃⵠ[988] = ᐃⵠ[987];
        ᐃⵠ[1154] = [];
        ᐃⵠ[1154][0] = Mh.ⵠⲆᐃⲆΔᐃᐃ;
        ᐃⵠ[1154][1] = Mh.ⲆᐃᐃᐃⲆΔⲆ;
        ᐃⵠ[1154][2] = Mh.ᐃΔΔΔⲆᐃΔ;
        ᐃⵠ[1155] = ᐃⵠ[1154];
        ᐃⵠ[965] = [];
        ᐃⵠ[965][0] = Mh.ΔⲆΔⲆΔᐃΔ;
        ᐃⵠ[965][1] = Mh.ΔⵠᐃΔΔⲆΔ;
        ᐃⵠ[965][2] = Mh.ᐃᐃᐃᐃΔⵠΔ;
        ᐃⵠ[974] = ᐃⵠ[965];
        ᐃⵠ[1028] = [];
        ᐃⵠ[1028][0] = Mh.ᐃⲆⲆⲆⵠᐃΔ;
        ᐃⵠ[1028][1] = Mh.ⵠΔΔⵠⲆⵠΔ;
        ᐃⵠ[1028][2] = Mh.ⲆᐃΔᐃⵠᐃⵠ;
        ᐃⵠ[1029] = ᐃⵠ[1028];
        ᐃⵠ[1027] = ᐃⵠ[1028];
        ᐃⵠ[712] = [];
        ᐃⵠ[712][0] = Mh.ᐃΔⲆΔᐃᐃⲆᐃΔ;
        ᐃⵠ[712][1] = Mh.ΔⲆᐃΔΔⲆΔΔΔ;
        ᐃⵠ[712][2] = Mh.ᐃΔΔⲆⵠᐃᐃⲆⲆ;
        ᐃⵠ[713] = ᐃⵠ[712];
        ᐃⵠ[714] = ᐃⵠ[712];
        ᐃⵠ[1031] = [];
        ᐃⵠ[1031][0] = Mh.ᐃⲆΔⲆᐃⲆᐃ;
        ᐃⵠ[1031][1] = Mh.ⵠᐃΔᐃⵠⲆᐃ;
        ᐃⵠ[1031][2] = Mh.ΔᐃⵠᐃΔⲆΔ;
        ᐃⵠ[1032] = ᐃⵠ[1031];
        ᐃⵠ[1030] = ᐃⵠ[1031];
        ᐃⵠ[423] = [];
        ᐃⵠ[423][0] = Mh.ΔΔⲆᐃᐃⵠⵠ;
        ᐃⵠ[423][1] = Mh.ⲆⲆΔⲆΔⲆⲆ;
        ᐃⵠ[423][2] = Mh.ⵠⲆⲆΔΔⵠΔ;
        ᐃⵠ[425] = ᐃⵠ[423];
        ᐃⵠ[424] = ᐃⵠ[423];
        ᐃⵠ[1233] = [];
        ᐃⵠ[1233][0] = Mh.ᐃⲆΔΔⵠⲆⲆ;
        ᐃⵠ[1233][1] = Mh.ⵠΔΔⲆΔⵠΔ;
        ᐃⵠ[1233][2] = Mh.ⲆⵠΔⲆⲆΔⲆ;
        ᐃⵠ[1234] = ᐃⵠ[1233];
        ᐃⵠ[1230] = [];
        ᐃⵠ[1230][0] = Mh.ΔΔᐃⲆΔΔⵠ;
        ᐃⵠ[1230][1] = Mh.ᐃΔⲆⲆᐃΔⲆ;
        ᐃⵠ[1230][2] = Mh.ⲆⲆᐃΔⲆⲆᐃ;
        ᐃⵠ[1232] = ᐃⵠ[1230];
        ᐃⵠ[1231] = ᐃⵠ[1230];
        ᐃⵠ[569] = [];
        ᐃⵠ[569][0] = Mh.ⵠⲆⲆΔⵠᐃΔ;
        ᐃⵠ[569][1] = Mh.ΔᐃΔΔⲆΔΔ;
        ᐃⵠ[569][2] = Mh.ΔᐃⵠⲆⲆᐃᐃ;
        ᐃⵠ[571] = ᐃⵠ[569];
        ᐃⵠ[570] = ᐃⵠ[569];
        ᐃⵠ[1166] = [];
        ᐃⵠ[1166][0] = Mh.ΔᐃⵠΔΔⲆᐃⲆᐃ;
        ᐃⵠ[1166][1] = Mh.ΔⵠⵠΔΔⵠΔΔΔ;
        ᐃⵠ[1166][2] = Mh.ⵠⵠⵠΔΔᐃᐃⲆⲆ;
        ᐃⵠ[1167] = ᐃⵠ[1166];
        ᐃⵠ[1168] = ᐃⵠ[1166];
        ᐃⵠ[572] = [];
        ᐃⵠ[572][0] = Mh.ᐃⲆΔⲆⵠⵠⵠᐃΔ;
        ᐃⵠ[572][1] = Mh.ΔᐃΔⲆΔⲆⵠᐃᐃ;
        ᐃⵠ[572][2] = Mh.ᐃⵠᐃᐃⵠⵠᐃⲆΔ;
        ᐃⵠ[574] = ᐃⵠ[572];
        ᐃⵠ[573] = ᐃⵠ[572];
        ᐃⵠ[1169] = [];
        ᐃⵠ[1169][0] = Mh.ⲆΔⲆᐃᐃΔⲆⵠΔ;
        ᐃⵠ[1169][1] = Mh.ΔᐃⲆᐃⲆᐃᐃΔΔ;
        ᐃⵠ[1169][2] = Mh.ⲆⲆΔᐃΔᐃⵠΔΔ;
        ᐃⵠ[1170] = ᐃⵠ[1169];
        ᐃⵠ[1171] = ᐃⵠ[1169];
        ᐃⵠ[575] = [];
        ᐃⵠ[575][0] = Mh.ΔⲆⲆΔⵠⵠΔΔΔ;
        ᐃⵠ[575][1] = Mh.ᐃᐃⲆⲆᐃᐃΔⲆᐃ;
        ᐃⵠ[575][2] = Mh.ⲆΔⵠⲆⲆⲆⲆᐃⲆ;
        ᐃⵠ[577] = ᐃⵠ[575];
        ᐃⵠ[576] = ᐃⵠ[575];
        ᐃⵠ[1172] = [];
        ᐃⵠ[1172][0] = Mh.ΔΔᐃⲆΔᐃⲆᐃⵠ;
        ᐃⵠ[1172][1] = Mh.ⵠᐃΔⵠΔΔⲆⵠᐃ;
        ᐃⵠ[1172][2] = Mh.ᐃⲆΔᐃⵠΔⵠⲆⲆ;
        ᐃⵠ[1173] = ᐃⵠ[1172];
        ᐃⵠ[1174] = ᐃⵠ[1172];
        ᐃⵠ[578] = [];
        ᐃⵠ[578][0] = Mh.ΔΔᐃⵠᐃⵠᐃΔⵠ;
        ᐃⵠ[578][1] = Mh.ΔⲆⵠⵠⲆⲆᐃⲆΔ;
        ᐃⵠ[578][2] = Mh.ᐃⲆⲆⲆⵠΔᐃᐃⵠ;
        ᐃⵠ[580] = ᐃⵠ[578];
        ᐃⵠ[579] = ᐃⵠ[578];
        ᐃⵠ[1175] = [];
        ᐃⵠ[1175][0] = Mh.ΔⵠΔⵠΔΔⲆⵠᐃ;
        ᐃⵠ[1175][1] = Mh.ᐃⵠᐃⲆⲆᐃⲆⲆⵠ;
        ᐃⵠ[1175][2] = Mh.ΔΔⵠⲆⵠⲆⲆᐃⲆ;
        ᐃⵠ[1176] = ᐃⵠ[1175];
        ᐃⵠ[1177] = ᐃⵠ[1175];
        ᐃⵠ[581] = [];
        ᐃⵠ[581][0] = Mh.ᐃⲆΔⲆΔΔΔᐃΔ;
        ᐃⵠ[581][1] = Mh.ⲆΔΔΔⵠⵠᐃⵠᐃ;
        ᐃⵠ[581][2] = Mh.ⵠᐃᐃΔᐃⲆⵠΔⵠ;
        ᐃⵠ[583] = ᐃⵠ[581];
        ᐃⵠ[582] = ᐃⵠ[581];
        ᐃⵠ[1178] = [];
        ᐃⵠ[1178][0] = Mh.ⵠᐃⵠⲆⵠⲆⲆΔᐃ;
        ᐃⵠ[1178][1] = Mh.ⲆⵠᐃⵠᐃⲆᐃΔᐃ;
        ᐃⵠ[1178][2] = Mh.ΔΔᐃⲆⵠᐃⵠᐃⲆ;
        ᐃⵠ[1179] = ᐃⵠ[1178];
        ᐃⵠ[1180] = ᐃⵠ[1178];
        ᐃⵠ[584] = [];
        ᐃⵠ[584][0] = Mh.ᐃΔⲆⵠΔⵠⲆⵠᐃ;
        ᐃⵠ[584][1] = Mh.ⲆⵠⲆᐃⲆⵠⲆΔⵠ;
        ᐃⵠ[584][2] = Mh.ΔΔᐃΔⵠᐃΔᐃᐃ;
        ᐃⵠ[586] = ᐃⵠ[584];
        ᐃⵠ[585] = ᐃⵠ[584];
        ᐃⵠ[1181] = [];
        ᐃⵠ[1181][0] = Mh.ⵠⲆᐃΔᐃΔⵠⵠⵠ;
        ᐃⵠ[1181][1] = Mh.ᐃⵠⲆΔᐃⲆⲆⵠΔ;
        ᐃⵠ[1181][2] = Mh.ᐃⲆⵠⲆᐃΔΔⵠᐃ;
        ᐃⵠ[1182] = ᐃⵠ[1181];
        ᐃⵠ[1183] = ᐃⵠ[1181];
        ᐃⵠ[587] = [];
        ᐃⵠ[587][0] = Mh.ⲆⲆᐃⲆΔⲆⵠⲆⵠ;
        ᐃⵠ[587][1] = Mh.ⲆⵠⵠΔⵠⲆⵠᐃⵠ;
        ᐃⵠ[587][2] = Mh.ⲆⲆᐃΔΔⲆΔⵠⵠ;
        ᐃⵠ[589] = ᐃⵠ[587];
        ᐃⵠ[588] = ᐃⵠ[587];
        ᐃⵠ[1184] = [];
        ᐃⵠ[1184][0] = Mh.ⵠᐃⲆⲆⲆⲆⵠΔⲆ;
        ᐃⵠ[1184][1] = Mh.ⲆΔΔⲆⲆⵠⵠⵠᐃ;
        ᐃⵠ[1184][2] = Mh.ΔΔⵠΔⵠΔΔΔⲆ;
        ᐃⵠ[1185] = ᐃⵠ[1184];
        ᐃⵠ[1186] = ᐃⵠ[1184];
        ᐃⵠ[1257] = [];
        ᐃⵠ[1257][0] = Mh.ᐃᐃᐃᐃⵠⵠⲆΔⵠ;
        ᐃⵠ[1257][1] = Mh.ⲆᐃΔⵠΔⵠⲆⲆᐃ;
        ᐃⵠ[1257][2] = Mh.ⵠⵠⲆⲆⵠⵠᐃⵠΔ;
        ᐃⵠ[1258] = ᐃⵠ[1257];
        ᐃⵠ[1256] = ᐃⵠ[1257];
        ᐃⵠ[1260] = [];
        ᐃⵠ[1260][0] = Mh.ⲆΔⵠⲆⲆᐃΔⵠⵠ;
        ᐃⵠ[1260][1] = Mh.ⲆᐃΔⵠᐃⵠⵠᐃΔ;
        ᐃⵠ[1260][2] = Mh.ΔᐃᐃᐃΔΔᐃΔⲆ;
        ᐃⵠ[1261] = ᐃⵠ[1260];
        ᐃⵠ[1259] = ᐃⵠ[1260];
        ᐃⵠ[1263] = [];
        ᐃⵠ[1263][0] = Mh.ⵠᐃⲆΔΔΔⵠΔᐃ;
        ᐃⵠ[1263][1] = Mh.ⲆⲆΔᐃⵠΔΔΔᐃ;
        ᐃⵠ[1263][2] = Mh.ⵠⲆⵠⲆᐃΔᐃᐃᐃ;
        ᐃⵠ[1264] = ᐃⵠ[1263];
        ᐃⵠ[1262] = ᐃⵠ[1263];
        ᐃⵠ[1266] = [];
        ᐃⵠ[1266][0] = Mh.ⵠΔᐃΔᐃΔΔⲆⵠ;
        ᐃⵠ[1266][1] = Mh.ⲆᐃΔΔΔΔᐃΔᐃ;
        ᐃⵠ[1266][2] = Mh.ᐃΔⲆⵠⵠᐃΔⲆᐃ;
        ᐃⵠ[1267] = ᐃⵠ[1266];
        ᐃⵠ[1265] = ᐃⵠ[1266];
        ᐃⵠ[1269] = [];
        ᐃⵠ[1269][0] = Mh.ⲆΔⲆⲆΔᐃⵠⲆᐃ;
        ᐃⵠ[1269][1] = Mh.ΔⲆⲆᐃΔⲆⲆⵠⲆ;
        ᐃⵠ[1269][2] = Mh.ⲆⲆⵠΔⵠⲆⵠⵠᐃ;
        ᐃⵠ[1270] = ᐃⵠ[1269];
        ᐃⵠ[1268] = ᐃⵠ[1269];
        ᐃⵠ[1272] = [];
        ᐃⵠ[1272][0] = Mh.ⵠᐃⲆⲆⵠᐃᐃΔⵠ;
        ᐃⵠ[1272][1] = Mh.ⵠⲆΔⲆⵠΔⵠⲆΔ;
        ᐃⵠ[1272][2] = Mh.ⲆΔⵠᐃⵠᐃⲆΔⵠ;
        ᐃⵠ[1273] = ᐃⵠ[1272];
        ᐃⵠ[1271] = ᐃⵠ[1272];
        ᐃⵠ[1239] = [];
        ᐃⵠ[1239][0] = Mh.ⵠⲆⲆᐃⲆⵠΔΔᐃ;
        ᐃⵠ[1239][1] = Mh.ΔⵠⲆⲆΔⵠⲆⵠᐃ;
        ᐃⵠ[1239][2] = Mh.ΔⵠⲆⵠⵠⵠⲆⵠᐃ;
        ᐃⵠ[1240] = ᐃⵠ[1239];
        ᐃⵠ[1238] = ᐃⵠ[1239];
        ᐃⵠ[1242] = [];
        ᐃⵠ[1242][0] = Mh.ⵠΔⵠΔⲆΔⵠᐃⵠ;
        ᐃⵠ[1242][1] = Mh.ΔⵠⲆΔⵠⲆⵠⲆⲆ;
        ᐃⵠ[1242][2] = Mh.ᐃΔⲆᐃᐃⵠᐃⲆⵠ;
        ᐃⵠ[1243] = ᐃⵠ[1242];
        ᐃⵠ[1241] = ᐃⵠ[1242];
        ᐃⵠ[1245] = [];
        ᐃⵠ[1245][0] = Mh.ᐃⵠⵠⲆᐃⵠᐃΔⲆ;
        ᐃⵠ[1245][1] = Mh.ᐃΔⲆΔΔⵠⲆⲆⲆ;
        ᐃⵠ[1245][2] = Mh.ⵠⲆⲆΔΔⵠΔᐃᐃ;
        ᐃⵠ[1246] = ᐃⵠ[1245];
        ᐃⵠ[1244] = ᐃⵠ[1245];
        ᐃⵠ[1248] = [];
        ᐃⵠ[1248][0] = Mh.ΔΔΔⵠⲆⲆΔᐃⲆ;
        ᐃⵠ[1248][1] = Mh.ᐃⵠⵠᐃᐃⲆΔⲆⲆ;
        ᐃⵠ[1248][2] = Mh.ⲆᐃΔⲆᐃⲆᐃⵠⵠ;
        ᐃⵠ[1249] = ᐃⵠ[1248];
        ᐃⵠ[1247] = ᐃⵠ[1248];
        ᐃⵠ[1251] = [];
        ᐃⵠ[1251][0] = Mh.ΔⲆᐃⲆⲆⵠΔⲆⵠ;
        ᐃⵠ[1251][1] = Mh.ⲆⲆᐃᐃⲆⲆᐃⲆⵠ;
        ᐃⵠ[1251][2] = Mh.ⵠΔⲆⲆΔΔⲆΔⵠ;
        ᐃⵠ[1252] = ᐃⵠ[1251];
        ᐃⵠ[1250] = ᐃⵠ[1251];
        ᐃⵠ[1254] = [];
        ᐃⵠ[1254][0] = Mh.ΔⵠⵠⵠⵠⵠᐃⲆΔ;
        ᐃⵠ[1254][1] = Mh.ΔⵠⵠⵠΔΔⵠᐃᐃ;
        ᐃⵠ[1254][2] = Mh.ΔⲆΔᐃⵠΔⵠᐃⲆ;
        ᐃⵠ[1255] = ᐃⵠ[1254];
        ᐃⵠ[1253] = ᐃⵠ[1254];
        ᐃⵠ[1227] = [];
        ᐃⵠ[1227][0] = Mh.ⲆΔⵠΔⲆⲆⲆ;
        ᐃⵠ[1227][1] = Mh.ΔⲆⲆᐃⲆⲆΔ;
        ᐃⵠ[1227][2] = Mh.ⵠᐃᐃⵠⵠᐃⲆ;
        ᐃⵠ[1229] = ᐃⵠ[1227];
        ᐃⵠ[1228] = ᐃⵠ[1227];
        ᐃⵠ[1187] = [];
        ᐃⵠ[1187][0] = Mh.Δⵠᐃⵠⵠⵠⵠ;
        ᐃⵠ[1187][1] = Mh.ΔⲆΔⲆΔⵠⲆ;
        ᐃⵠ[1187][2] = Mh.ΔⵠⲆⲆⵠΔⵠ;
        ᐃⵠ[1188] = ᐃⵠ[1187];
        ᐃⵠ[Er.ⲆᐃᐃⵠᐃᐃΔᐃⵠ] = ᐃⵠ[1187];
        ᐃⵠ[840] = Zd(1, [{
            f: ld,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[841] = ᐃⵠ[840];
        ᐃⵠ[850] = Zd(1, [{
            f: km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[851] = ᐃⵠ[850];
        ᐃⵠ[644] = Zd(1, [{
            f: Wd,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Nd,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Hd,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[643] = ᐃⵠ[644];
        ᐃⵠ[639] = Zd(1, [{
            f: Rd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[800] = Zd(1, [{
            f: Xc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[799] = ᐃⵠ[800];
        ᐃⵠ[631] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[632] = ᐃⵠ[631];
        ᐃⵠ[311] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[284] = ᐃⵠ[311];
        ᐃⵠ[808] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[809] = ᐃⵠ[808];
        ᐃⵠ[834] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[835] = ᐃⵠ[834];
        ᐃⵠ[845] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[846] = ᐃⵠ[845];
        ᐃⵠ[949] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[950] = ᐃⵠ[949];
        ᐃⵠ[951] = ᐃⵠ[949];
        ᐃⵠ[966] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[967] = ᐃⵠ[966];
        ᐃⵠ[968] = ᐃⵠ[966];
        ᐃⵠ[981] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[982] = ᐃⵠ[981];
        ᐃⵠ[983] = ᐃⵠ[981];
        ᐃⵠ[959] = Zd(1, [{
            f: su,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[960] = ᐃⵠ[959];
        ᐃⵠ[961] = ᐃⵠ[959];
        ᐃⵠ[309] = Zd(1, [{
            f: Jt,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516"]
        }, {
            f: $d,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[302] = ᐃⵠ[309];
        ᐃⵠ[328] = Zd(1, [{
            f: Gt,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
            f: $d,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[327] = ᐃⵠ[328];
        ᐃⵠ[860] = Zd(1, [{
            f: bu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[865] = Zd(1, [{
            f: mu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[829] = Zd(1, [{
            f: au,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[261] = Zd(1, [{
            f: iu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[292] = Zd(1, [{
            f: ou,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[293] = Zd(1, [{
            f: nu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[455] = Zd(1, [{
            f: lu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[313] = Zd(1, [{
            f: Xt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[312] = Zd(1, [{
            f: Xt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[258] = Zd(1, [{
            f: Xt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[296] = Zd(1, [{
            f: Xt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[458] = Zd(1, [{
            f: Xt,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[1017] = [];
        ᐃⵠ[1017][0] = Mh.ΔΔⵠⲆⲆⵠⲆ;
        ᐃⵠ[1017][1] = Mh.ΔᐃᐃⵠΔⵠᐃ;
        ᐃⵠ[1017][2] = Mh.ⵠⲆⲆⵠΔΔᐃ;
        ᐃⵠ[1019] = ᐃⵠ[1017];
        ᐃⵠ[1018] = ᐃⵠ[1017];
        ᐃⵠ[315] = Zd(1, [{
            f: Gu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[297] = Zd(1, [{
            f: xu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[298] = Zd(1, [{
            f: zu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[316] = Zd(1, [{
            f: Jt,
            x: 0,
            y: -5,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[830] = ᐃⵠ[829];
        ᐃⵠ[254] = ᐃⵠ[261];
        ᐃⵠ[290] = ᐃⵠ[292];
        ᐃⵠ[291] = ᐃⵠ[293];
        ᐃⵠ[456] = ᐃⵠ[455];
        ᐃⵠ[314] = ᐃⵠ[313];
        ᐃⵠ[256] = ᐃⵠ[312];
        ᐃⵠ[295] = ᐃⵠ[258];
        ᐃⵠ[257] = ᐃⵠ[296];
        ᐃⵠ[460] = ᐃⵠ[458];
        ᐃⵠ[277] = Zd(1, [{
            f: Td,
            x: 0,
            y: 0,
            a: 1,
            r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[310] = Zd(1, [{
            f: Pd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[262] = ᐃⵠ[310];
        ᐃⵠ[329] = Zd(1, [{
            f: uc,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[263] = ᐃⵠ[329];
        ᐃⵠ[331] = Zd(1, [{
            f: mc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[332] = ᐃⵠ[331];
        ᐃⵠ[492] = Zd(1, [{
            f: uc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[493] = ᐃⵠ[492];
        ᐃⵠ[330] = Zd(1, [{
            f: cc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[265] = ᐃⵠ[330];
        ᐃⵠ[317] = Zd(1, [{
            f: lc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[318] = ᐃⵠ[317];
        ᐃⵠ[319] = Zd(1, [{
            f: qc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[320] = ᐃⵠ[319];
        ᐃⵠ[362] = Zd(1, [{
            f: jc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[363] = ᐃⵠ[362];
        ᐃⵠ[364] = Zd(1, [{
            f: jc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[365] = ᐃⵠ[364];
        ᐃⵠ[361] = Zd(1, [{
            f: Nc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[360] = ᐃⵠ[361];
        ᐃⵠ[495] = Zd(1, [{
            f: Nc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[496] = ᐃⵠ[495];
        ᐃⵠ[335] = Zd(1, [{
            f: bc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[268] = ᐃⵠ[335];
        ᐃⵠ[372] = Zd(1, [{
            f: gc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[371] = ᐃⵠ[372];
        ᐃⵠ[499] = Zd(1, [{
            f: gc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[498] = ᐃⵠ[499];
        ᐃⵠ[375] = Zd(1, [{
            f: hc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[374] = ᐃⵠ[375];
        ᐃⵠ[378] = Zd(1, [{
            f: Pc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[377] = ᐃⵠ[378];
        ᐃⵠ[337] = Zd(1, [{
            f: Qc,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[338] = ᐃⵠ[337];
        ᐃⵠ[300] = Zd(1, [{
            f: xd,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[323] = Zd(1, [{
            f: xd,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[325] = ᐃⵠ[323];
        ᐃⵠ[305] = Zd(1, [{
            f: qd,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[513] = Zd(1, [{
            f: qd,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[515] = ᐃⵠ[513];
        ᐃⵠ[368] = Zd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[1162] = Zd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[178] = Zd(1, [{
            f: vc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[179] = Zd(1, [{
            f: vc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[624] = Zd(1, [{
            f: Ic,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[393] = Zd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[505] = Zd(1, [{
            f: Ic,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[369] = Zd(1, [{
            f: Sc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[370] = ᐃⵠ[369];
        ᐃⵠ[381] = Zd(1, [{
            f: Cc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[380] = ᐃⵠ[381];
        ᐃⵠ[502] = Zd(1, [{
            f: Fc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[503] = ᐃⵠ[502];
        ᐃⵠ[880] = Zd(1, [{
            f: Tt,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[881] = ᐃⵠ[880];
        ᐃⵠ[882] = Zd(1, [{
            f: Mt,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[883] = ᐃⵠ[882];
        ᐃⵠ[303] = Zd(1, [{
            f: Vd,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[304] = ᐃⵠ[303];
        ᐃⵠ[392] = [];
        ᐃⵠ[392][0] = Mh.ᐃⵠΔΔⵠΔⲆ;
        ᐃⵠ[392][1] = Mh.ΔⲆⵠⵠᐃⲆⵠ;
        ᐃⵠ[392][2] = Mh.ⲆⵠⲆΔⵠⵠⵠ;
        ᐃⵠ[367] = ᐃⵠ[392];
        ᐃⵠ[975] = [];
        ᐃⵠ[975][0] = Mh.ⵠⵠⲆᐃᐃⵠⲆ;
        ᐃⵠ[975][1] = Mh.ⲆᐃᐃⲆΔⵠⲆ;
        ᐃⵠ[975][2] = Mh.ΔᐃⵠΔᐃⵠᐃ;
        ᐃⵠ[977] = ᐃⵠ[975];
        ᐃⵠ[976] = ᐃⵠ[975];
        ᐃⵠ[978] = [];
        ᐃⵠ[978][0] = Mh.ⲆᐃΔⲆⲆᐃᐃ;
        ᐃⵠ[978][1] = Mh.ΔⵠⵠⲆⲆΔⲆ;
        ᐃⵠ[978][2] = Mh.ⲆΔΔⲆΔⲆⵠ;
        ᐃⵠ[980] = ᐃⵠ[978];
        ᐃⵠ[979] = ᐃⵠ[978];
        ᐃⵠ[1158] = [];
        ᐃⵠ[1158][0] = Mh.ⲆⵠⵠⲆⲆΔΔ;
        ᐃⵠ[1158][1] = Mh.ⲆⵠⵠⲆⲆΔΔ;
        ᐃⵠ[1158][2] = Mh.ⲆⵠⵠⲆⲆΔΔ;
        ᐃⵠ[1159] = ᐃⵠ[1158];
        ᐃⵠ[426] = [];
        ᐃⵠ[426][0] = Mh.ᐃⵠⵠⲆᐃΔⲆ;
        ᐃⵠ[426][1] = Mh.ΔᐃⲆⲆᐃᐃᐃ;
        ᐃⵠ[426][2] = Mh.ΔⵠⵠⵠΔⵠⵠ;
        ᐃⵠ[427] = ᐃⵠ[426];
        ᐃⵠ[428] = ᐃⵠ[426];
        ᐃⵠ[1160] = [];
        ᐃⵠ[1160][0] = Mh.ΔΔⲆⵠᐃⵠⵠ;
        ᐃⵠ[1160][1] = Mh.ΔΔⲆⵠᐃⵠⵠ;
        ᐃⵠ[1160][2] = Mh.ΔΔⲆⵠᐃⵠⵠ;
        ᐃⵠ[1161] = ᐃⵠ[1160];
        ᐃⵠ[1236] = [];
        ᐃⵠ[1236][0] = Mh.ⵠΔᐃⲆᐃⵠᐃΔⵠ;
        ᐃⵠ[1236][1] = Mh.ⵠΔᐃⵠⵠⵠΔᐃᐃ;
        ᐃⵠ[1236][2] = Mh.ᐃΔⲆᐃⵠⲆⵠΔᐃ;
        ᐃⵠ[1235] = ᐃⵠ[1236];
        ᐃⵠ[1237] = ᐃⵠ[1236];
        ᐃⵠ[991] = [];
        ᐃⵠ[991][0] = Mh.ΔΔⵠᐃⵠᐃⵠ;
        ᐃⵠ[991][1] = Mh.ⵠΔⵠᐃᐃᐃᐃ;
        ᐃⵠ[991][2] = Mh.ⵠΔΔⲆᐃΔⵠ;
        ᐃⵠ[990] = ᐃⵠ[991];
        ᐃⵠ[992] = ᐃⵠ[991];
        ᐃⵠ[994] = [];
        ᐃⵠ[994][0] = Mh.ⲆΔⲆᐃᐃΔⵠ;
        ᐃⵠ[994][1] = Mh.ⲆΔⲆⲆᐃΔⲆ;
        ᐃⵠ[994][2] = Mh.ⲆΔΔⵠΔⲆᐃ;
        ᐃⵠ[993] = ᐃⵠ[994];
        ᐃⵠ[995] = ᐃⵠ[994];
        ᐃⵠ[997] = [];
        ᐃⵠ[997][0] = Mh.ⵠᐃⲆᐃᐃⲆᐃ;
        ᐃⵠ[997][1] = Mh.ΔⲆⲆᐃⵠⵠᐃ;
        ᐃⵠ[997][2] = Mh.ᐃⵠΔΔⲆΔⵠ;
        ᐃⵠ[996] = ᐃⵠ[997];
        ᐃⵠ[998] = ᐃⵠ[997];
        ᐃⵠ[1000] = [];
        ᐃⵠ[1000][0] = Mh.ⵠⲆⲆΔⵠⵠΔ;
        ᐃⵠ[1000][1] = Mh.ᐃᐃⲆⲆⲆΔⵠ;
        ᐃⵠ[1000][2] = Mh.ⵠᐃⵠⵠⵠⲆⲆ;
        ᐃⵠ[999] = ᐃⵠ[1000];
        ᐃⵠ[1001] = ᐃⵠ[1000];
        ᐃⵠ[1003] = [];
        ᐃⵠ[1003][0] = Mh.ⲆΔⲆᐃⲆᐃⵠ;
        ᐃⵠ[1003][1] = Mh.ⵠΔᐃⲆᐃᐃⲆ;
        ᐃⵠ[1003][2] = Mh.ⲆⵠⲆΔᐃᐃΔ;
        ᐃⵠ[1002] = ᐃⵠ[1003];
        ᐃⵠ[1004] = ᐃⵠ[1003];
        ᐃⵠ[1006] = [];
        ᐃⵠ[1006][0] = Mh.ⵠⵠΔⵠᐃⵠΔ;
        ᐃⵠ[1006][1] = Mh.ᐃᐃⵠⵠᐃⲆⲆ;
        ᐃⵠ[1006][2] = Mh.ⵠᐃⵠⲆⵠⲆⵠ;
        ᐃⵠ[1005] = ᐃⵠ[1006];
        ᐃⵠ[1007] = ᐃⵠ[1006];
        ᐃⵠ[1009] = [];
        ᐃⵠ[1009][0] = Mh.ⵠⲆⵠⲆΔⲆⲆ;
        ᐃⵠ[1009][1] = Mh.ΔΔⲆⲆⵠⵠΔ;
        ᐃⵠ[1009][2] = Mh.ᐃᐃᐃΔᐃⲆⵠ;
        ᐃⵠ[1008] = ᐃⵠ[1009];
        ᐃⵠ[1010] = ᐃⵠ[1009];
        ᐃⵠ[1012] = [];
        ᐃⵠ[1012][0] = Mh.ⵠⵠΔⲆᐃᐃᐃ;
        ᐃⵠ[1012][1] = Mh.ΔⲆΔⲆᐃⵠᐃ;
        ᐃⵠ[1012][2] = Mh.ⵠΔᐃΔⲆⲆⲆ;
        ᐃⵠ[1011] = ᐃⵠ[1012];
        ᐃⵠ[1013] = ᐃⵠ[1012];
        ᐃⵠ[1015] = [];
        ᐃⵠ[1015][0] = Mh.ᐃᐃⵠΔⵠΔᐃ;
        ᐃⵠ[1015][1] = Mh.ⵠⵠΔⵠᐃⲆⵠ;
        ᐃⵠ[1015][2] = Mh.ⲆⵠⲆΔⲆΔΔ;
        ᐃⵠ[1014] = ᐃⵠ[1015];
        ᐃⵠ[1016] = ᐃⵠ[1015];
        ᐃⵠ[1035] = [];
        ᐃⵠ[1035][0] = Mh.ΔⵠⲆΔⵠ;
        ᐃⵠ[1035][1] = Mh.ΔⵠⲆΔⵠ;
        ᐃⵠ[1035][2] = Mh.ΔⵠⲆΔⵠ;
        ᐃⵠ[Er.ⲆⵠᐃΔⲆⵠⲆΔⵠ] = ᐃⵠ[1035];
        ᐃⵠ[1036] = ᐃⵠ[1035];
        ᐃⵠ[1037] = [];
        ᐃⵠ[1037][0] = Mh.ᐃᐃΔⵠⲆ;
        ᐃⵠ[1037][1] = Mh.ᐃᐃΔⵠⲆ;
        ᐃⵠ[1037][2] = Mh.ᐃᐃΔⵠⲆ;
        ᐃⵠ[Er.ⵠⵠⲆⵠⲆᐃΔᐃᐃ] = ᐃⵠ[1037];
        ᐃⵠ[1038] = ᐃⵠ[1037];
        ᐃⵠ[1039] = [];
        ᐃⵠ[1039][0] = Mh.ⲆᐃⲆᐃΔ;
        ᐃⵠ[1039][1] = Mh.ⲆᐃⲆᐃΔ;
        ᐃⵠ[1039][2] = Mh.ⲆᐃⲆᐃΔ;
        ᐃⵠ[Er.ᐃⵠᐃⲆⵠⵠⲆⵠⵠ] = ᐃⵠ[1039];
        ᐃⵠ[1040] = ᐃⵠ[1039];
        ᐃⵠ[1156] = [];
        ᐃⵠ[1156][0] = Mh.ᐃⵠⵠⵠⲆ;
        ᐃⵠ[1156][1] = Mh.ᐃⵠⵠⵠⲆ;
        ᐃⵠ[1156][2] = Mh.ᐃⵠⵠⵠⲆ;
        ᐃⵠ[1157] = ᐃⵠ[1156];
        ᐃⵠ[1046] = [];
        ᐃⵠ[1046][0] = Mh.ⲆⲆΔⲆᐃⵠᐃ;
        ᐃⵠ[1046][1] = Mh.ΔᐃᐃΔⲆᐃᐃ;
        ᐃⵠ[1046][2] = Mh.ⵠΔⲆΔΔⵠᐃ;
        ᐃⵠ[1048] = ᐃⵠ[1046];
        ᐃⵠ[1047] = ᐃⵠ[1046];
        ᐃⵠ[744] = [];
        ᐃⵠ[744][0] = Mh.ⲆⵠⵠΔᐃⵠⲆ;
        ᐃⵠ[744][1] = Mh.ⵠΔⵠΔⵠΔΔ;
        ᐃⵠ[744][2] = Mh.ⵠⲆⵠᐃⵠΔⲆ;
        ᐃⵠ[746] = ᐃⵠ[744];
        ᐃⵠ[745] = ᐃⵠ[744];
        ᐃⵠ[747] = [];
        ᐃⵠ[747][0] = Mh.ᐃⵠⵠⵠᐃⵠᐃ;
        ᐃⵠ[747][1] = Mh.ⲆΔΔᐃΔⵠⵠ;
        ᐃⵠ[747][2] = Mh.Δⵠⵠⵠᐃⵠⵠ;
        ᐃⵠ[749] = ᐃⵠ[747];
        ᐃⵠ[748] = ᐃⵠ[747];
        ᐃⵠ[1049] = [];
        ᐃⵠ[1049][0] = Mh.ᐃΔⲆΔⵠΔⲆ;
        ᐃⵠ[1049][1] = Mh.ΔⲆⲆΔⵠⵠΔ;
        ᐃⵠ[1049][2] = Mh.ⲆⵠᐃΔⵠⲆΔ;
        ᐃⵠ[1051] = ᐃⵠ[1049];
        ᐃⵠ[1050] = ᐃⵠ[1049];
        ᐃⵠ[1189] = [];
        ᐃⵠ[1189][0] = Mh.ᐃᐃΔⵠᐃⵠⵠ;
        ᐃⵠ[1189][1] = Mh.ΔⲆⵠΔᐃΔⲆ;
        ᐃⵠ[1189][2] = Mh.ᐃⲆⲆⲆᐃⵠΔ;
        ᐃⵠ[1191] = ᐃⵠ[1189];
        ᐃⵠ[1190] = ᐃⵠ[1189];
        ᐃⵠ[1110] = [];
        ᐃⵠ[1110][0] = Mh.ᐃᐃⲆΔⲆⵠⵠ;
        ᐃⵠ[1110][1] = Mh.ⲆⵠᐃⵠΔⲆᐃ;
        ᐃⵠ[1110][2] = Mh.ⵠᐃⵠⵠᐃᐃⲆ;
        ᐃⵠ[1112] = ᐃⵠ[1110];
        ᐃⵠ[1111] = ᐃⵠ[1110];
        ᐃⵠ[1131] = [];
        ᐃⵠ[1131][0] = Mh.ⵠⲆᐃⲆⵠΔᐃⲆⲆ;
        ᐃⵠ[1131][1] = Mh.ⵠⵠΔᐃⲆᐃⲆᐃᐃ;
        ᐃⵠ[1131][2] = Mh.ΔⵠⲆⲆᐃΔⵠⵠΔ;
        ᐃⵠ[1133] = ᐃⵠ[1131];
        ᐃⵠ[1132] = ᐃⵠ[1131];
        ᐃⵠ[1137] = [];
        ᐃⵠ[1137][0] = Mh.ⲆΔⵠⲆⵠⲆⵠ;
        ᐃⵠ[1137][1] = Mh.ⲆⵠΔⲆⵠᐃⲆ;
        ᐃⵠ[1137][2] = Mh.ⵠΔⵠⵠΔΔⲆ;
        ᐃⵠ[1138] = ᐃⵠ[1137];
        ᐃⵠ[1139] = ᐃⵠ[1137];
        ᐃⵠ[1140] = [];
        ᐃⵠ[1140][0] = Mh.ⵠⲆΔΔⲆᐃΔ;
        ᐃⵠ[1140][1] = Mh.ⵠⵠᐃⲆⵠΔⲆ;
        ᐃⵠ[1140][2] = Mh.ⵠᐃⲆΔⲆⵠΔ;
        ᐃⵠ[1141] = ᐃⵠ[1140];
        ᐃⵠ[1142] = ᐃⵠ[1140];
        ᐃⵠ[1117] = [];
        ᐃⵠ[1117][0] = Mh.ᐃΔΔΔⲆⵠⲆ;
        ᐃⵠ[1117][1] = Mh.ⵠⵠΔⲆⲆⵠⵠ;
        ᐃⵠ[1117][2] = Mh.ᐃᐃⲆⵠᐃⲆⵠ;
        ᐃⵠ[1116] = ᐃⵠ[1117];
        ᐃⵠ[1118] = ᐃⵠ[1117];
        ᐃⵠ[1080] = [];
        ᐃⵠ[1080][0] = Mh.ⲆⲆⲆΔᐃΔⲆ;
        ᐃⵠ[1080][1] = Mh.ⲆⲆⵠᐃⲆⲆᐃ;
        ᐃⵠ[1080][2] = Mh.ᐃΔᐃⲆᐃⲆⵠ;
        ᐃⵠ[1082] = ᐃⵠ[1080];
        ᐃⵠ[1081] = ᐃⵠ[1080];
        ᐃⵠ[1224] = [];
        ᐃⵠ[1224][0] = Mh.ΔᐃⲆΔᐃⵠⲆ;
        ᐃⵠ[1224][1] = Mh.ΔᐃᐃᐃⵠⲆⵠ;
        ᐃⵠ[1224][2] = Mh.ⲆΔⲆⵠⵠᐃᐃ;
        ᐃⵠ[1226] = ᐃⵠ[1224];
        ᐃⵠ[1225] = ᐃⵠ[1224];
        ᐃⵠ[1095] = [];
        ᐃⵠ[1095][0] = Mh.ⵠᐃⲆⵠᐃᐃⵠ;
        ᐃⵠ[1095][1] = Mh.ⲆⵠⵠⲆⵠᐃᐃ;
        ᐃⵠ[1095][2] = Mh.ᐃⵠⵠⲆⵠᐃⲆ;
        ᐃⵠ[1097] = ᐃⵠ[1095];
        ᐃⵠ[1096] = ᐃⵠ[1095];
        ᐃⵠ[717] = Zd(1, [{
            f: Fm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
            f: Jp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[718] = ᐃⵠ[717];
        ᐃⵠ[408] = Zd(1, [{
            f: dc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[409] = ᐃⵠ[408];
        ᐃⵠ[907] = Zd(1, [{
            f: xc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[909] = ᐃⵠ[907];
        ᐃⵠ[908] = ᐃⵠ[907];
        ᐃⵠ[197] = Zd(1, [{
            f: kc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[906] = ᐃⵠ[197];
        ᐃⵠ[901] = Zd(1, [{
            f: zc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[900] = ᐃⵠ[901];
        ᐃⵠ[899] = ᐃⵠ[901];
        ᐃⵠ[401] = Zd(1, [{
            f: Jc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[402] = ᐃⵠ[401];
        ᐃⵠ[395] = Zd(1, [{
            f: yc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[396] = ᐃⵠ[395];
        ᐃⵠ[398] = Zd(1, [{
            f: Tc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[399] = ᐃⵠ[398];
        ᐃⵠ[404] = Zd(1, [{
            f: Ac,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[405] = ᐃⵠ[404];
        ᐃⵠ[472] = Zd(1, [{
            f: Bc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[473] = ᐃⵠ[472];
        ᐃⵠ[874] = Zd(1, [{
            f: Ec,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[876] = ᐃⵠ[874];
        ᐃⵠ[875] = ᐃⵠ[874];
        ᐃⵠ[477] = Zd(1, [{
            f: Gc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[478] = ᐃⵠ[477];
        ᐃⵠ[709] = Zd(1, [{
            f: zp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[711] = ᐃⵠ[709];
        ᐃⵠ[550] = Zd(1, [{
            f: Lm,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[551] = ᐃⵠ[550];
        ᐃⵠ[480] = Zd(1, [{
            f: Gc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[481] = ᐃⵠ[480];
        ᐃⵠ[483] = Zd(1, [{
            f: Gc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[484] = ᐃⵠ[483];
        ᐃⵠ[486] = Zd(1, [{
            f: Gc,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[487] = ᐃⵠ[486];
        ᐃⵠ[489] = [];
        ᐃⵠ[489][0] = Mh.ΔᐃⲆⵠⵠᐃⲆ;
        ᐃⵠ[489][1] = Mh.ΔⵠⲆⲆᐃᐃⲆ;
        ᐃⵠ[489][2] = Mh.ᐃᐃΔⲆᐃΔⲆ;
        ᐃⵠ[491] = ᐃⵠ[489];
        ᐃⵠ[490] = ᐃⵠ[489];
        ᐃⵠ[1195] = [];
        ᐃⵠ[1195][0] = Mh.ⲆΔⲆΔⵠΔᐃ;
        ᐃⵠ[1195][1] = Mh.ⵠᐃᐃᐃⵠᐃⲆ;
        ᐃⵠ[1195][2] = Mh.ⲆᐃⵠⵠΔⲆΔ;
        ᐃⵠ[1197] = ᐃⵠ[1195];
        ᐃⵠ[1196] = ᐃⵠ[1195];
        ᐃⵠ[1199] = [];
        ᐃⵠ[1199][0] = Mh.ⵠΔΔⵠⵠⲆᐃ;
        ᐃⵠ[1199][1] = Mh.ⲆᐃⲆⵠᐃᐃΔ;
        ᐃⵠ[1199][2] = Mh.ΔΔΔⵠⲆⲆⲆ;
        ᐃⵠ[1201] = ᐃⵠ[1199];
        ᐃⵠ[1200] = ᐃⵠ[1199];
        ᐃⵠ[1203] = [];
        ᐃⵠ[1203][0] = Mh.ᐃᐃᐃᐃⵠᐃⵠ;
        ᐃⵠ[1203][1] = Mh.ⵠΔΔᐃⵠⵠⵠ;
        ᐃⵠ[1203][2] = Mh.ⵠΔⲆⵠⲆⲆᐃ;
        ᐃⵠ[1205] = ᐃⵠ[1203];
        ᐃⵠ[1204] = ᐃⵠ[1203];
        ᐃⵠ[1207] = [];
        ᐃⵠ[1207][0] = Mh.ⲆᐃⲆᐃᐃⲆΔ;
        ᐃⵠ[1207][1] = Mh.ΔᐃᐃⵠΔΔⲆ;
        ᐃⵠ[1207][2] = Mh.ΔΔⲆᐃᐃᐃΔ;
        ᐃⵠ[1209] = ᐃⵠ[1207];
        ᐃⵠ[1208] = ᐃⵠ[1207];
        ᐃⵠ[1211] = [];
        ᐃⵠ[1211][0] = Mh.ⵠⲆᐃΔΔⲆᐃ;
        ᐃⵠ[1211][1] = Mh.ᐃᐃⲆⵠⵠΔᐃ;
        ᐃⵠ[1211][2] = Mh.ᐃⲆⲆΔⵠⲆⲆ;
        ᐃⵠ[1213] = ᐃⵠ[1211];
        ᐃⵠ[1212] = ᐃⵠ[1211];
        ᐃⵠ[1215] = [];
        ᐃⵠ[1215][0] = Mh.ᐃⲆⲆⲆΔΔⲆ;
        ᐃⵠ[1215][1] = Mh.ⵠΔᐃᐃᐃΔⲆ;
        ᐃⵠ[1215][2] = Mh.ⲆⲆᐃᐃΔᐃⵠ;
        ᐃⵠ[1217] = ᐃⵠ[1215];
        ᐃⵠ[1216] = ᐃⵠ[1215];
        ᐃⵠ[518] = Zd(1, [{
            f: Mm,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[519] = ᐃⵠ[518];
        ᐃⵠ[532] = Zd(1, [{
            f: tp,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 5,
            c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[533] = ᐃⵠ[532];
        ᐃⵠ[521] = Zd(1, [{
            f: xp,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        ᐃⵠ[523] = Zd(1, [{
            f: xp,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        ᐃⵠ[529] = Zd(1, [{
            f: Nm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba"]
        }, {
            f: np,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
            f: Tp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0"]
        }, {
            f: ip,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[530] = ᐃⵠ[529];
        ᐃⵠ[553] = Zd(1, [{
            f: Cp,
            x: 45,
            y: 70,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[555] = ᐃⵠ[553];
        ᐃⵠ[541] = Zd(1, [{
            f: _m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[542] = ᐃⵠ[541];
        ᐃⵠ[779] = Zd(1, [{
            f: yp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[780] = ᐃⵠ[779];
        ᐃⵠ[767] = Zd(1, [{
            f: sp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[768] = ᐃⵠ[767];
        ᐃⵠ[776] = Zd(1, [{
            f: Wm,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[777] = ᐃⵠ[776];
        ᐃⵠ[771] = Zd(1, [{
            f: Wm,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[772] = ᐃⵠ[771];
        ᐃⵠ[756] = Zd(1, [{
            f: Jm,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[758] = ᐃⵠ[756];
        ᐃⵠ[760] = Zd(1, [{
            f: Jm,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[762] = ᐃⵠ[760];
        ᐃⵠ[764] = Zd(1, [{
            f: Jm,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[770] = ᐃⵠ[764];
        ᐃⵠ[910] = Zd(1, [{
            f: fc,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[912] = ᐃⵠ[910];
        ᐃⵠ[911] = ᐃⵠ[910];
        ᐃⵠ[732] = Zd(1, [{
            f: mm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[734] = ᐃⵠ[732];
        ᐃⵠ[563] = Zd(1, [{
            f: Ym,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[564] = ᐃⵠ[563];
        ᐃⵠ[751] = Zd(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[252] = Zd(1, [{
            f: Om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[753] = Zd(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[253] = Zd(1, [{
            f: Om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[176] = Zd(1, [{
            f: Dp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[177] = Zd(1, [{
            f: Dp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[175] = Zd(1, [{
            f: Dp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[616] = Zd(1, [{
            f: mp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[618] = ᐃⵠ[616];
        ᐃⵠ[699] = Zd(1, [{
            f: mp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[700] = ᐃⵠ[699];
        ᐃⵠ[702] = Zd(1, [{
            f: mp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[704] = ᐃⵠ[702];
        ᐃⵠ[705] = Zd(1, [{
            f: mp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[706] = ᐃⵠ[705];
        ᐃⵠ[420] = Zd(1, [{
            f: Em,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[421] = ᐃⵠ[420];
        ᐃⵠ[826] = Zd(1, [{
            f: Xm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[827] = ᐃⵠ[826];
        ᐃⵠ[429] = Zd(1, [{
            f: hp,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[430] = ᐃⵠ[429];
        ᐃⵠ[432] = Zd(1, [{
            f: Qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[433] = ᐃⵠ[432];
        ᐃⵠ[435] = Zd(1, [{
            f: rp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[436] = ᐃⵠ[435];
        ᐃⵠ[438] = Zd(1, [{
            f: Vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[439] = ᐃⵠ[438];
        ᐃⵠ[441] = Zd(1, [{
            f: Mp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[442] = ᐃⵠ[441];
        ᐃⵠ[418] = Zd(1, [{
            f: Zc,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[609] = Zd(1, [{
            f: wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[142] = Zd(1, [{
            f: Km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[140] = Zd(1, [{
            f: wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[180] = Zd(1, [{
            f: zm,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[181] = Zd(1, [{
            f: Pp,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[784] = ᐃⵠ[180];
        ᐃⵠ[785] = ᐃⵠ[181];
        ᐃⵠ[789] = Zd(1, [{
            f: Um,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[791] = ᐃⵠ[789];
        ᐃⵠ[613] = Zd(1, [{
            f: Pm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[612] = Zd(1, [{
            f: dp,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[715] = ᐃⵠ[613];
        ᐃⵠ[611] = ᐃⵠ[612];
        ᐃⵠ[634] = Zd(1, [{
            f: Du,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[635] = ᐃⵠ[634];
        ᐃⵠ[200] = Zd(1, [{
            f: Eu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[866] = Zd(1, [{
            f: uu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[143] = Zd(1, [{
            f: gp,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[690] = ᐃⵠ[143];
        ᐃⵠ[662] = Zd(1, [{
            f: nc,
            x: -3,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[664] = Zd(1, [{
            f: oc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[666] = ᐃⵠ[664];
        ᐃⵠ[649] = Zd(1, [{
            f: Bu,
            x: -3,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[650] = ᐃⵠ[649];
        ᐃⵠ[674] = Zd(1, [{
            f: Qd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[646] = Zd(1, [{
            f: Hu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        ᐃⵠ[647] = ᐃⵠ[646];
        ᐃⵠ[685] = Zd(1, [{
            f: qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[684] = ᐃⵠ[685];
        ᐃⵠ[870] = Zd(1, [{
            f: gd,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[871] = ᐃⵠ[870];
        ᐃⵠ[605] = Zd(1, [{
            f: Hm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[604] = ᐃⵠ[605];
        ᐃⵠ[842] = Zd(1, [{
            f: od,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[843] = ᐃⵠ[842];
        ᐃⵠ[652] = Zd(1, [{
            f: Rm,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        ᐃⵠ[654] = ᐃⵠ[652];
        ᐃⵠ[626] = Zd(1, [{
            f: Rm,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[627] = ᐃⵠ[626];
        ᐃⵠ[629] = Zd(1, [{
            f: pp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[196] = Zd(1, [{
            f: gu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[898] = ᐃⵠ[196];
        ᐃⵠ[659] = Zd(1, [{
            f: tc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[660] = ᐃⵠ[659];
        ᐃⵠ[145] = Zd(1, [{
            f: Fd,
            x: -2,
            y: -8,
            a: 1,
            r: 0,
            c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        ᐃⵠ[730] = ᐃⵠ[145];
        ᐃⵠ[566] = [];
        ᐃⵠ[566][0] = Mh.ⲆᐃΔⵠΔⲆⵠ;
        ᐃⵠ[566][1] = Mh.ⲆⲆⲆΔⵠᐃᐃ;
        ᐃⵠ[566][2] = Mh.ⵠᐃᐃⲆΔᐃⲆ;
        ᐃⵠ[567] = ᐃⵠ[566];
        ᐃⵠ[568] = ᐃⵠ[566];
        ᐃⵠ[877] = [];
        ᐃⵠ[877][0] = Mh.ⲆΔⵠᐃⲆΔΔ;
        ᐃⵠ[877][1] = Mh.ⵠᐃᐃⲆᐃᐃⵠ;
        ᐃⵠ[877][2] = Mh.ΔⲆᐃⲆΔⵠᐃ;
        ᐃⵠ[879] = ᐃⵠ[877];
        ᐃⵠ[878] = ᐃⵠ[877];
        ᐃⵠ[933] = ᐃⵠ[932];
        ᐃⵠ[934] = ᐃⵠ[932];
        ᐃⵠ[932] = [];
        ᐃⵠ[932][0] = Mh.ⵠⵠΔΔᐃⲆⲆ;
        ᐃⵠ[932][1] = Mh.ΔⲆⵠΔΔΔᐃ;
        ᐃⵠ[932][2] = Mh.ⲆΔΔΔᐃⵠΔ;
        ᐃⵠ[933] = ᐃⵠ[932];
        ᐃⵠ[934] = ᐃⵠ[932];
        ᐃⵠ[943] = [];
        ᐃⵠ[943][0] = Mh.ⵠⵠΔⵠᐃⲆᐃ;
        ᐃⵠ[943][1] = Mh.ⲆⲆΔⵠⲆΔⲆ;
        ᐃⵠ[943][2] = Mh.ⲆΔΔⵠⵠᐃΔ;
        ᐃⵠ[944] = ᐃⵠ[943];
        ᐃⵠ[945] = ᐃⵠ[943];
        ᐃⵠ[921] = [];
        ᐃⵠ[921][0] = Mh.ⲆⵠΔⵠⵠΔᐃ;
        ᐃⵠ[921][1] = Mh.ⵠΔᐃΔΔⵠΔ;
        ᐃⵠ[921][2] = Mh.ΔᐃⲆᐃΔᐃᐃ;
        ᐃⵠ[922] = ᐃⵠ[921];
        ᐃⵠ[923] = ᐃⵠ[921];
        ᐃⵠ[925] = [];
        ᐃⵠ[925][0] = Mh.ⵠᐃᐃⲆⲆᐃᐃ;
        ᐃⵠ[925][1] = Mh.ᐃⲆᐃⵠⵠΔᐃ;
        ᐃⵠ[925][2] = Mh.ᐃᐃΔⵠᐃΔⵠ;
        ᐃⵠ[926] = ᐃⵠ[925];
        ᐃⵠ[927] = ᐃⵠ[925];
        ᐃⵠ[929] = [];
        ᐃⵠ[929][0] = Mh.ⲆᐃΔⲆⲆᐃⵠ;
        ᐃⵠ[929][1] = Mh.ⵠᐃᐃΔᐃΔᐃ;
        ᐃⵠ[929][2] = Mh.ΔⵠᐃΔⵠΔⲆ;
        ᐃⵠ[930] = ᐃⵠ[929];
        ᐃⵠ[931] = ᐃⵠ[929];
        ᐃⵠ[946] = [];
        ᐃⵠ[946][0] = Mh.ⵠᐃⵠΔΔᐃⵠ;
        ᐃⵠ[946][1] = Mh.ΔⵠᐃⲆΔⵠⲆ;
        ᐃⵠ[946][2] = Mh.ⵠⲆΔⵠᐃΔᐃ;
        ᐃⵠ[947] = ᐃⵠ[946];
        ᐃⵠ[948] = ᐃⵠ[946];
        ᐃⵠ[735] = [];
        ᐃⵠ[735][0] = Mh.ⲆᐃⵠᐃΔⲆⵠ;
        ᐃⵠ[735][1] = Mh.ᐃᐃⵠⵠΔᐃⲆ;
        ᐃⵠ[735][2] = Mh.ⲆⲆⲆⵠΔⵠΔ;
        ᐃⵠ[737] = ᐃⵠ[735];
        ᐃⵠ[736] = ᐃⵠ[735];
        ᐃⵠ[1164] = [];
        ᐃⵠ[1164][0] = Mh.ⵠᐃᐃΔⵠΔⵠ;
        ᐃⵠ[1164][1] = Mh.ᐃΔⵠᐃᐃⲆⲆ;
        ᐃⵠ[1164][2] = Mh.ⲆᐃⵠᐃⲆⲆⲆ;
        ᐃⵠ[Er.ⲆⲆⵠᐃⵠᐃΔⵠⵠ] = ᐃⵠ[1164];
        ᐃⵠ[1165] = ᐃⵠ[1164];
        ᐃⵠ[738] = [];
        ᐃⵠ[738][0] = Mh.ᐃⲆΔⲆⵠⲆΔ;
        ᐃⵠ[738][1] = Mh.ΔᐃⲆⵠⵠᐃᐃ;
        ᐃⵠ[738][2] = Mh.ⲆⵠᐃⵠΔᐃᐃ;
        ᐃⵠ[740] = ᐃⵠ[738];
        ᐃⵠ[739] = ᐃⵠ[738];
        ᐃⵠ[741] = [];
        ᐃⵠ[741][0] = Mh.ᐃΔⲆΔᐃⲆⵠ;
        ᐃⵠ[741][1] = Mh.ᐃⵠⲆΔΔⲆⲆ;
        ᐃⵠ[741][2] = Mh.ⵠΔⲆᐃⵠΔᐃ;
        ᐃⵠ[743] = ᐃⵠ[741];
        ᐃⵠ[742] = ᐃⵠ[741];
        ᐃⵠ[938] = [];
        ᐃⵠ[938][0] = Mh.ᐃΔⲆⵠⵠᐃΔ;
        ᐃⵠ[938][1] = Mh.ᐃⵠⲆⵠᐃⵠΔ;
        ᐃⵠ[938][2] = Mh.ΔᐃΔᐃⲆⲆⲆ;
        ᐃⵠ[939] = ᐃⵠ[938];
        ᐃⵠ[936] = [];
        ᐃⵠ[936][0] = Mh.ⵠᐃⲆⲆⵠⲆⲆ;
        ᐃⵠ[936][1] = Mh.ΔΔⲆⲆΔᐃΔ;
        ᐃⵠ[936][2] = Mh.ᐃΔᐃΔΔⵠᐃ;
        ᐃⵠ[937] = ᐃⵠ[936];
        ᐃⵠ[617] = ᐃⵠ[616];
        ᐃⵠ[701] = ᐃⵠ[699];
        ᐃⵠ[703] = ᐃⵠ[702];
        ᐃⵠ[707] = ᐃⵠ[705];
        ᐃⵠ[348] = ᐃⵠ[311];
        ᐃⵠ[633] = ᐃⵠ[631];
        ᐃⵠ[645] = ᐃⵠ[644];
        ᐃⵠ[640] = ᐃⵠ[639];
        ᐃⵠ[273] = ᐃⵠ[309];
        ᐃⵠ[590] = ᐃⵠ[252];
        ᐃⵠ[752] = ᐃⵠ[751];
        ᐃⵠ[591] = ᐃⵠ[253];
        ᐃⵠ[754] = ᐃⵠ[753];
        ᐃⵠ[276] = ᐃⵠ[328];
        ᐃⵠ[863] = ᐃⵠ[865];
        ᐃⵠ[862] = ᐃⵠ[860];
        ᐃⵠ[831] = ᐃⵠ[829];
        ᐃⵠ[340] = ᐃⵠ[261];
        ᐃⵠ[596] = ᐃⵠ[594];
        ᐃⵠ[345] = ᐃⵠ[292];
        ᐃⵠ[346] = ᐃⵠ[293];
        ᐃⵠ[457] = ᐃⵠ[455];
        ᐃⵠ[274] = ᐃⵠ[313];
        ᐃⵠ[341] = ᐃⵠ[312];
        ᐃⵠ[272] = ᐃⵠ[258];
        ᐃⵠ[344] = ᐃⵠ[296];
        ᐃⵠ[459] = ᐃⵠ[458];
        ᐃⵠ[342] = ᐃⵠ[315];
        ᐃⵠ[270] = ᐃⵠ[297];
        ᐃⵠ[271] = ᐃⵠ[298];
        ᐃⵠ[343] = ᐃⵠ[316];
        ᐃⵠ[269] = ᐃⵠ[277];
        ᐃⵠ[358] = ᐃⵠ[310];
        ᐃⵠ[354] = ᐃⵠ[329];
        ᐃⵠ[356] = ᐃⵠ[331];
        ᐃⵠ[355] = ᐃⵠ[330];
        ᐃⵠ[494] = ᐃⵠ[492];
        ᐃⵠ[349] = ᐃⵠ[317];
        ᐃⵠ[350] = ᐃⵠ[319];
        ᐃⵠ[275] = ᐃⵠ[300];
        ᐃⵠ[351] = ᐃⵠ[323];
        ᐃⵠ[353] = ᐃⵠ[305];
        ᐃⵠ[514] = ᐃⵠ[513];
        ᐃⵠ[352] = ᐃⵠ[303];
        ᐃⵠ[520] = ᐃⵠ[518];
        ᐃⵠ[534] = ᐃⵠ[532];
        ᐃⵠ[531] = ᐃⵠ[529];
        ᐃⵠ[522] = ᐃⵠ[521];
        ᐃⵠ[524] = ᐃⵠ[523];
        ᐃⵠ[565] = ᐃⵠ[563];
        ᐃⵠ[554] = ᐃⵠ[553];
        ᐃⵠ[357] = ᐃⵠ[335];
        ᐃⵠ[359] = ᐃⵠ[337];
        ᐃⵠ[339] = Ra(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Hb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            qb(e, c[0], c[1], 4);
            e.save();
            Hb(e, a * 30, a * 115, a * 60, a * 5, a * 15);
            e.restore();
            qb(e, c[2], c[3], 4);
            e.save();
            Hb(e, a * 50, a * 117, a * 20, a * 10, a * 15);
            e.restore();
            qb(e, c[2]);
            return d;
        }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ᐃⵠ[366] = Zd(0.5, [{
            f: Dc,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        ᐃⵠ[382] = ᐃⵠ[361];
        ᐃⵠ[383] = ᐃⵠ[362];
        ᐃⵠ[384] = ᐃⵠ[364];
        ᐃⵠ[497] = ᐃⵠ[495];
        ᐃⵠ[385] = ᐃⵠ[392];
        ᐃⵠ[774] = ᐃⵠ[178];
        ᐃⵠ[775] = ᐃⵠ[179];
        ᐃⵠ[386] = ᐃⵠ[368];
        ᐃⵠ[625] = ᐃⵠ[624];
        ᐃⵠ[394] = ᐃⵠ[393];
        ᐃⵠ[1163] = ᐃⵠ[1162];
        ᐃⵠ[506] = ᐃⵠ[505];
        ᐃⵠ[387] = ᐃⵠ[369];
        ᐃⵠ[504] = ᐃⵠ[502];
        ᐃⵠ[388] = ᐃⵠ[372];
        ᐃⵠ[389] = ᐃⵠ[375];
        ᐃⵠ[390] = ᐃⵠ[378];
        ᐃⵠ[501] = ᐃⵠ[499];
        ᐃⵠ[391] = ᐃⵠ[381];
        ᐃⵠ[403] = ᐃⵠ[401];
        ᐃⵠ[397] = ᐃⵠ[395];
        ᐃⵠ[400] = ᐃⵠ[398];
        ᐃⵠ[406] = ᐃⵠ[404];
        ᐃⵠ[474] = ᐃⵠ[472];
        ᐃⵠ[875] = ᐃⵠ[874];
        ᐃⵠ[552] = ᐃⵠ[550];
        ᐃⵠ[710] = ᐃⵠ[709];
        ᐃⵠ[479] = ᐃⵠ[477];
        ᐃⵠ[482] = ᐃⵠ[480];
        ᐃⵠ[485] = ᐃⵠ[483];
        ᐃⵠ[488] = ᐃⵠ[486];
        ᐃⵠ[410] = ᐃⵠ[408];
        ᐃⵠ[719] = ᐃⵠ[717];
        ᐃⵠ[422] = ᐃⵠ[420];
        ᐃⵠ[431] = ᐃⵠ[429];
        ᐃⵠ[434] = ᐃⵠ[432];
        ᐃⵠ[437] = ᐃⵠ[435];
        ᐃⵠ[543] = ᐃⵠ[541];
        ᐃⵠ[733] = ᐃⵠ[732];
        ᐃⵠ[440] = ᐃⵠ[438];
        ᐃⵠ[443] = ᐃⵠ[441];
        ᐃⵠ[446] = ᐃⵠ[418];
        ᐃⵠ[606] = ᐃⵠ[605];
        ᐃⵠ[844] = ᐃⵠ[842];
        ᐃⵠ[683] = ᐃⵠ[685];
        ᐃⵠ[610] = ᐃⵠ[609];
        ᐃⵠ[689] = ᐃⵠ[143];
        ᐃⵠ[686] = ᐃⵠ[142];
        ᐃⵠ[682] = ᐃⵠ[140];
        ᐃⵠ[615] = ᐃⵠ[613];
        ᐃⵠ[614] = ᐃⵠ[612];
        ᐃⵠ[628] = ᐃⵠ[626];
        ᐃⵠ[630] = ᐃⵠ[629];
        ᐃⵠ[636] = ᐃⵠ[634];
        ᐃⵠ[868] = ᐃⵠ[200];
        ᐃⵠ[867] = ᐃⵠ[866];
        ᐃⵠ[648] = ᐃⵠ[646];
        ᐃⵠ[651] = ᐃⵠ[649];
        ᐃⵠ[653] = ᐃⵠ[652];
        ᐃⵠ[661] = ᐃⵠ[659];
        ᐃⵠ[898] = ᐃⵠ[196];
        ᐃⵠ[663] = ᐃⵠ[662];
        ᐃⵠ[665] = ᐃⵠ[664];
        ᐃⵠ[675] = ᐃⵠ[674];
        ᐃⵠ[731] = ᐃⵠ[145];
        ᐃⵠ[757] = ᐃⵠ[756];
        ᐃⵠ[759] = ᐃⵠ[176];
        ᐃⵠ[761] = ᐃⵠ[760];
        ᐃⵠ[763] = ᐃⵠ[177];
        ᐃⵠ[765] = ᐃⵠ[764];
        ᐃⵠ[766] = ᐃⵠ[175];
        ᐃⵠ[769] = ᐃⵠ[767];
        ᐃⵠ[773] = ᐃⵠ[771];
        ᐃⵠ[778] = ᐃⵠ[776];
        ᐃⵠ[781] = ᐃⵠ[779];
        ᐃⵠ[787] = ᐃⵠ[181];
        ᐃⵠ[786] = ᐃⵠ[180];
        ᐃⵠ[790] = ᐃⵠ[789];
        ᐃⵠ[801] = ᐃⵠ[800];
        ᐃⵠ[810] = ᐃⵠ[808];
        ᐃⵠ[836] = ᐃⵠ[834];
        ᐃⵠ[847] = ᐃⵠ[845];
        ᐃⵠ[828] = ᐃⵠ[826];
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        qb(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        qb(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        qb(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        qb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        qb(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        qb(e, Pl, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        qb(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        qb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        qb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        qb(e, yk, c[2], a * 11);
        return d;
    }
    function ym(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        qb(d, Ts, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        qb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        qb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        qb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        qb(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        qb(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        qb(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        qb(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        qb(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        qb(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        qb(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        qb(d, b[11]);
        Ub(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        qb(d, b[12]);
        Ub(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        qb(d, b[13]);
        Ub(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        qb(d, b[12]);
        Ub(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        qb(d, b[13]);
        return c;
    }
    function wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        qb(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        qb(e, c[1]);
        return d;
    }
    function Pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Hb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        qb(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        qb(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        qb(e, $g, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        qb(e, $g, c[6], a * 15);
        return d;
    }
    function Am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        qb(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        Ub(e, a * 108.5, a * 148.421875, a * 9);
        qb(e, c[5]);
        Ub(e, a * 106.5, a * 144.421875, a * 3);
        qb(e, c[6]);
        Ub(e, a * 46.5, a * 148.421875, a * 9);
        qb(e, c[5]);
        Ub(e, a * 44.5, a * 144.421875, a * 3);
        qb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        qb(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        qb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        qb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        qb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        qb(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        return d;
    }
    function km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        qb(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        qb(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        qb(e, undefined, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        qb(e, c[4], c[5], a * 5);
        return d;
    }
    function xm(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        Hb(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        qb(e, c[0]);
        Hb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        qb(e, c[1], c[2], b * 4);
        var a = Vb(-Math.PI / 5, Xt(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = Vb(Math.PI / 4, Gc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function Jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        qb(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        qb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        qb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        qb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        qb(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        qb(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        qb(e, c[2], c[3], a * 10);
        Ub(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        qb(e, c[4], c[5], a * 1);
        Ub(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        qb(e, c[4], c[5], a * 1);
        Ub(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        qb(e, c[4], c[5], a * 1);
        Ub(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        qb(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        qb(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        qb(e, c[6]);
        return d;
    }
    function Mm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        Ub(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        qb(d, undefined, c[2], a * 4);
        Ub(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        qb(d, undefined, c[1], a * 4);
        Ub(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        qb(d, undefined, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        Hb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        qb(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        Xb(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        qb(d, c[3]);
        Ub(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        qb(d, c[3]);
        return e;
    }
    function Bm(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        Hb(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        qb(d, null, "#BBE8EF", a);
        return c;
    }
    function Em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        qb(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        qb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        qb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        qb(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        qb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        qb(e, undefined, c[1], a * 4);
        Ub(e, a * 58, a * 50, a * 5);
        qb(e, c[4]);
        Ub(e, a * 43, a * 65, a * 5);
        qb(e, c[4]);
        Ub(e, a * 58, a * 73, a * 5);
        qb(e, c[4]);
        Ub(e, a * 58, a * 50, a * 2);
        qb(e, c[5]);
        Ub(e, a * 43, a * 65, a * 2);
        qb(e, c[5]);
        Ub(e, a * 58, a * 73, a * 2);
        qb(e, c[5]);
        return d;
    }
    function Dm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            Ub(e, a * 100.5, a * 82, a * 74.92746655359852);
            qb(e, c[0], c[0], a * 4);
            Ub(e, a * 100.5, a * 82, a * 65.9417374971317);
            qb(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            Ub(e, a * 100.5, a * 82, a * 74.92746655359852);
            qb(e, c[1], c[3], a * 4);
            Ub(e, a * 100.5, a * 82, a * 65.9417374971317);
            qb(e, c[1], c[2], a * 4);
            Ub(e, a * 100.5, a * 82, a * 35.9417374971317);
            qb(e, c[1], c[2], a * 20);
            Ub(e, a * 100.5, a * 82, a * 15.9417374971317);
            qb(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = Cp(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = Cp(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = Cp(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function Im(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ub(e, a * 220, a * 201, a * 170.41713528867922);
        qb(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ub(e, a * 220, a * 201, a * 170.41713528867922);
        qb(e, c[1], c[2], a * 6);
        Ub(e, a * 220, a * 201, a * 130);
        qb(e, c[11], c[2], a * 6);
        Ub(e, a * 222, a * 199, a * 120.74767078498864);
        qb(e, hg, c[3], a * 40);
        Ub(e, a * 220, a * 200, a * 95.44108130150245);
        qb(e, undefined, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ub(e, a * 63, a * 136, a * 49.193495504995376);
        qb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ub(e, a * 63, a * 136, a * 49.193495504995376);
        qb(e, c[8], c[2], a * 4);
        Ub(e, a * 63, a * 137, a * 25.632011235952593);
        qb(e, c[7], c[2], a * 4);
        return d;
    }
    function Sm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            Ub(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            qb(g, d[1], d[5], b * 20);
            Ub(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            qb(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            Hb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            qb(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            Hb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            qb(g, d[1], d[5], b * 20);
        }
        Ub(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        qb(g, d[1], d[2], b * 7);
        Ub(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        qb(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        qb(g, d[1], d[2], b * 8);
        Ub(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        qb(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        qb(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        qb(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        qb(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        qb(g, d[3], d[2], b * 4);
        Ub(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        qb(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        Hb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        qb(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        Hb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        qb(g, d[1], d[2], b * 7);
        return f;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        Hb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        qb(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        Hb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        qb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        qb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        qb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        qb(e, c[2], c[1], a * 4);
        Ub(e, a * 71, a * 44.375, a * 16.55294535724685);
        qb(e, c[2], c[1], a * 4);
        Ub(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        qb(e, c[2], c[1], a * 4);
        return d;
    }
    function _m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        Hb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        Hb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        qb(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        qb(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        qb(e, c[6], c[2], a * 4);
        return d;
    }
    function Fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ub(e, a * 220, a * 201, a * 170.41713528867922);
        qb(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ub(e, a * 220, a * 201, a * 170.41713528867922);
        qb(e, c[1], c[2], a * 6);
        Ub(e, a * 220, a * 201, a * 130);
        qb(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        qb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        qb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        qb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        qb(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        qb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        qb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        qb(e, Wr, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        qb(e, Wr, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        qb(e, Ft, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        qb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        qb(e, Ta, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        qb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        qb(e, br, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        qb(e, Ft, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        qb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        qb(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        qb(e, undefined, c[6], a * 6);
        Ub(e, a * 222, a * 199, a * 120.74767078498864);
        qb(e, undefined, c[3], a * 40);
        Ub(e, a * 220, a * 200, a * 95.44108130150245);
        qb(e, Ze, c[2], a * 15);
        Ub(e, a * 220, a * 201, a * 85);
        qb(e, yk, c[4], a * 10);
        e.globalAlpha = 0.5;
        Ub(e, a * 220, a * 201, a * 82);
        qb(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ub(e, a * 63, a * 136, a * 49.193495504995376);
        qb(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ub(e, a * 63, a * 136, a * 49.193495504995376);
        qb(e, c[8], c[2], a * 4);
        Ub(e, a * 63, a * 137, a * 25.632011235952593);
        qb(e, c[7], c[2], a * 4);
        return d;
    }
    function Rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Hb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        qb(e, c[0]);
        Ub(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Hb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        qb(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        qb(e, Ze, c[3], a * 6);
        Ub(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        qb(e, fq, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Hb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        qb(e, c[1]);
        Ub(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        qb(e, c[2], c[1], a * 4);
        Ub(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        qb(e, c[3], c[1], a * 4);
        Ub(e, a * 78, a * 44, a * 20);
        qb(e, c[4]);
        return d;
    }
    if (cj.ⵠⵠⲆⲆᐃⲆᐃ) {
        var Gm = cj.Math.acos;
        cj.Math.acos = cj.Math.asin;
        cj.Math.asin = Gm;
        var jm = cj.Math.acos;
        cj.Math.acos = cj.Math.asin;
        cj.Math.asin = jm;
    }
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Hb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        qb(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Hb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        qb(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Hb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        qb(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Hb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        qb(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Hb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        qb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Hb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        qb(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        qb(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        qb(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        qb(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        qb(e, c[11], c[10], a * 3);
        return d;
    }
    function Wm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        qb(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        qb(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        qb(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        qb(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        qb(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        qb(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        qb(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        qb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        qb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        qb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        qb(g, Yd, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        qb(g, Ta, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        qb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        qb(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        qb(g, undefined, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            qb(g, undefined, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            qb(g, undefined, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            qb(g, undefined, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            qb(g, fq, d[5], b * 6);
            Ub(g, b * 86, b * 114.39999389648438, b * 4.5);
            qb(g, d[1], d[5], b * 6);
            Ub(g, b * 121, b * 114.39999389648438, b * 4.5);
            qb(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function Om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        Ub(e, a * 69, a * 64, a * 48.16637831516918);
        qb(e, c[1]);
        e.globalAlpha = 0.7;
        Ub(e, a * 69, a * 64, a * 38.23105625617661);
        qb(e, c[2]);
        e.globalAlpha = 0.7;
        Ub(e, a * 69, a * 64, a * 32.01562118716424);
        qb(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        qb(e, c[3]);
        return d;
    }
    function Nm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        Ub(e, a * 98, a * 99, a * 100);
        qb(e, c[0]);
        e.globalAlpha = 0.5;
        Ub(e, a * 98, a * 99, a * 90);
        qb(e, c[1]);
        return d;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        Hb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        qb(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Hb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Hb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Hb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Hb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Hb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Hb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Hb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Hb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Hb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Hb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Hb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Hb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Hb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Hb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Hb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Hb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        qb(e, c[2], c[3], a * 3);
        return d;
    }
    function Hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        Hb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        qb(e, c[0]);
        Hb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        qb(e, c[0]);
        Hb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        qb(e, c[0]);
        Hb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        qb(e, c[0]);
        Hb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        Hb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        qb(e, c[1]);
        Hb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        qb(e, c[1]);
        Hb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        qb(e, c[2], c[3], a * 4);
        Hb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        qb(e, c[2], c[3], a * 4);
        Hb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        qb(e, c[2], c[3], a * 4);
        return d;
    }
    function Um(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        qb(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        Ub(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        qb(f, d[5], oh, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        qb(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            Ub(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            qb(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            Ub(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            qb(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        Ub(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        qb(f, oh, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        qb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        qb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        qb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        qb(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        qb(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        qb(f, d[4], d[2], b * 12);
        return e;
    }
    function Ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Hb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        qb(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        qb(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        qb(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        qb(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Hb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 3);
        return d;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Hb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Hb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        qb(e, yk, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Hb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Hb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        qb(e, undefined, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        qb(e, rs, c[1], a * 10);
        return d;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        Hb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        qb(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        qb(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        Hb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        qb(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        qb(e, Uh, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        qb(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        qb(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        qb(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        Hb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        qb(e, c[5]);
        return d;
    }
    function Zm() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            var c = 0;
            for (var d = 0; d < a.length; d++) {
                var e = a.charAt(d);
                if (e !== "_" && d !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, c);
                    }
                    c++;
                }
            }
            return b;
        }
        ⵠΔΔΔⲆΔⲆΔᐃ();
        ᐃⵠ[1026] = [Mh.ⵠⲆⲆᐃⲆΔⲆ, Mh.ΔⵠⵠⵠⲆΔΔ];
        ᐃⵠ[1025] = [];
        ᐃⵠ[1025][Er.ᐃⲆΔ] = [];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_010_000")] = [Mh.ⵠⲆΔᐃΔ, Mh.ᐃΔΔⵠΔ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_010_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_010_000")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_011_000")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_010_000")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_011_010")] = [Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_011_011")] = [Mh.ΔⵠᐃⲆΔᐃⲆ, Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ΔΔΔⲆᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_110_000")] = [Mh.ⵠᐃΔᐃⲆ, Mh.ᐃΔΔⵠΔ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_110_010")] = [Mh.ΔⵠΔⲆΔ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⲆᐃⵠⲆᐃᐃⲆ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_110_110")] = [Mh.ΔⵠΔⲆΔ, Mh.ᐃΔⵠⲆᐃⵠᐃ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃΔΔⵠΔ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⲆᐃⵠⲆᐃᐃⲆ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_111_000")] = [Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_111_111")] = [Mh.ⵠᐃΔᐃⲆ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ΔⵠΔⲆΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ᐃⵠᐃⵠΔ, Mh.ΔⵠᐃⲆΔᐃⲆ, Mh.ⵠⵠⵠⲆⲆⵠᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_010_000")] = [Mh.ᐃΔΔⵠΔ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_010_010")] = [Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_011_000")] = [Mh.ΔⵠᐃⲆᐃ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ⵠᐃⲆΔⵠ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_000")] = [Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃΔΔⵠΔ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")] = [Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ΔⵠΔⲆΔ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⵠⵠⲆⲆⵠᐃ, Mh.ⲆⵠⲆⵠⵠᐃᐃ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_011_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_011_011")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_111_011")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_111_000")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_111_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_111_011")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_111_110")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_111_111")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_111_110")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("000_111_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("010_110_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_011_000")] = [Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ⵠᐃⲆΔⵠ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_011_010")] = [Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_011_011")] = [Mh.ⲆᐃⵠⲆⵠ, Mh.ᐃⵠᐃⵠΔ, Mh.ΔⵠᐃⲆΔᐃⲆ, Mh.ΔⵠᐃⲆᐃ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ⲆⵠⲆⵠⵠᐃᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_000")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_011_010")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_010")] = [Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ΔⵠΔⲆΔ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⵠⵠⲆⲆⵠᐃ, Mh.ⲆⵠⲆⵠⵠᐃᐃ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_011")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_010")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_110")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_010")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("011_111_111")] = [Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ΔⵠᐃⲆΔᐃⲆ, Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ΔⵠΔⲆΔ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⵠⵠⲆⲆⵠᐃ, Mh.ⲆⵠⲆⵠⵠᐃᐃ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_110_000")] = [Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⲆⵠᐃᐃⵠᐃ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_110_010")] = [Mh.ΔⵠΔⲆΔ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃΔΔⵠΔ, Mh.ΔΔΔⲆᐃ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_110_110")] = [Mh.ΔⵠΔⲆΔ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃΔΔⵠΔ, Mh.ΔΔΔⲆᐃ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_000")] = [Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⲆⵠᐃᐃⵠᐃ, Mh.ᐃⵠⲆΔⵠΔΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_110")] = [Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ΔⵠΔⲆΔ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⵠⵠⲆⲆⵠᐃ, Mh.ᐃⵠⲆΔⵠΔΔ, Mh.ⲆⵠⲆⵠⵠᐃᐃ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_111")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_011")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("110_111_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_110")] = [Mh.ⵠⵠⲆΔᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ΔΔΔⲆᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ⵠⲆΔᐃΔ, Mh.ᐃΔΔⵠΔ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ⲆⵠⵠⵠΔ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⲆⵠⵠᐃᐃ, Mh.ᐃⵠⲆΔⵠΔΔ, Mh.ⵠⵠⵠⲆⲆⵠᐃ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ΔⵠΔⲆΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ᐃⵠᐃⵠΔ, Mh.ΔⵠᐃⲆᐃ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔᐃⲆΔⲆⲆⵠ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_011")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_110")];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_000")] = [Mh.ⵠⲆⵠᐃᐃⵠᐃ, Mh.ⵠᐃΔᐃⲆ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ᐃⵠⲆΔⵠΔΔ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_111")] = [Mh.ΔᐃⲆΔⲆⲆⵠ, Mh.ⵠⲆᐃΔⵠ, Mh.ΔⵠᐃⲆᐃ, Mh.ΔⵠᐃⲆΔᐃⲆ, Mh.ᐃⵠᐃⵠΔ, Mh.ⲆᐃⵠⲆⵠ, Mh.ΔⵠΔⲆΔ, Mh.ᐃΔΔᐃⵠⵠⵠ, Mh.ⲆⵠⲆᐃⵠⲆⵠ, Mh.ⵠᐃΔᐃⲆ, Mh.ⵠⵠⵠⲆⲆⵠᐃ, Mh.ⲆⵠⲆⵠⵠᐃᐃ, Mh.ⲆⲆⵠⵠⵠᐃΔ, Mh.ⲆⵠⵠⵠΔ, Mh.ᐃⵠᐃⵠⲆᐃⲆ, Mh.ᐃⵠᐃΔᐃᐃⵠ, Mh.ᐃΔΔⵠΔ, Mh.ⵠⲆΔᐃΔ, Mh.ΔⵠⲆⵠⲆᐃᐃ, Mh.ᐃᐃΔΔⵠΔᐃ, Mh.ΔᐃⲆᐃΔΔⲆ, Mh.ΔΔΔⲆᐃ, Mh.ⵠᐃⲆΔⵠ, Mh.ⵠⵠⲆΔᐃ];
        ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_010")] = ᐃⵠ[1025][Er.ᐃⲆΔ][b("111_111_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_010_000")] = [Mh.ⵠΔᐃⲆⵠ, Mh.ⲆᐃⵠⵠΔ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_010_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_010_000")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_011_000")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_010_000")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_011_010")] = [Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_011_011")] = [Mh.ΔΔΔᐃΔΔⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ᐃⵠⵠᐃⲆ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_110_000")] = [Mh.ΔΔᐃⲆᐃ, Mh.ⲆᐃⵠⵠΔ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_110_010")] = [Mh.ⵠⵠΔⲆΔ, Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔⲆᐃⲆⵠ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_110_110")] = [Mh.ⵠⵠΔⲆΔ, Mh.ᐃᐃⵠⵠⲆᐃΔ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔⲆᐃⲆⵠ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_111_000")] = [Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_111_111")] = [Mh.ΔΔᐃⲆᐃ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ⵠⵠΔⲆΔ, Mh.ⲆᐃⵠΔⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ΔΔΔᐃΔΔⲆ, Mh.ⵠⲆⵠΔⵠⲆᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_010_000")] = [Mh.ⲆᐃⵠⵠΔ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_010_010")] = [Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_011_000")] = [Mh.ΔⲆΔⵠⲆ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔᐃΔᐃⲆ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_000")] = [Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")] = [Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⵠⵠΔⲆΔ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠⲆⵠΔⵠⲆᐃ, Mh.ⵠΔⲆᐃⲆΔⲆ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_011_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_011_011")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_111_011")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_111_000")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_111_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_111_011")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_111_110")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_111_111")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_111_110")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("000_111_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("010_110_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_011_000")] = [Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔᐃΔᐃⲆ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_011_010")] = [Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_011_011")] = [Mh.ⲆᐃⵠΔⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ΔΔΔᐃΔΔⲆ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ⵠΔⲆᐃⲆΔⲆ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_000")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_011_010")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_010")] = [Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⵠⵠΔⲆΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠⲆⵠΔⵠⲆᐃ, Mh.ⵠΔⲆᐃⲆΔⲆ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_011")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_010")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_110")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_010")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("011_111_111")] = [Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ΔΔΔᐃΔΔⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⵠⵠΔⲆΔ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠⲆⵠΔⵠⲆᐃ, Mh.ⵠΔⲆᐃⲆΔⲆ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_110_000")] = [Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠᐃⵠⵠΔᐃⲆ, Mh.ΔᐃᐃΔⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_110_010")] = [Mh.ⵠⵠΔⲆΔ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_110_110")] = [Mh.ⵠⵠΔⲆΔ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_000")] = [Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠᐃⵠⵠΔᐃⲆ, Mh.ⲆᐃⲆΔΔΔⲆ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_110")] = [Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⵠⵠΔⲆΔ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠⲆⵠΔⵠⲆᐃ, Mh.ⲆᐃⲆΔΔΔⲆ, Mh.ⵠΔⲆᐃⲆΔⲆ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_111")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_011")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("110_111_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_110")] = [Mh.ΔᐃΔΔᐃ, Mh.ΔᐃΔᐃⲆ, Mh.ᐃⵠⵠᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⵠΔᐃⲆⵠ, Mh.ⲆᐃⵠⵠΔ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ΔᐃᐃΔⵠ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ⵠΔⲆᐃⲆΔⲆ, Mh.ⲆᐃⲆΔΔΔⲆ, Mh.ⵠⲆⵠΔⵠⲆᐃ, Mh.ΔΔᐃⲆᐃ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ⵠⵠΔⲆΔ, Mh.ⲆᐃⵠΔⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆⲆΔⵠⲆⲆ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_011")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_110")];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_000")] = [Mh.ⵠᐃⵠⵠΔᐃⲆ, Mh.ΔΔᐃⲆᐃ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔⲆΔⵠⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ⲆᐃⲆΔΔΔⲆ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_111")] = [Mh.ΔⲆⲆΔⵠⲆⲆ, Mh.ᐃᐃⵠᐃⵠ, Mh.ΔⲆΔⵠⲆ, Mh.ΔΔΔᐃΔΔⲆ, Mh.ᐃⲆⵠΔⵠ, Mh.ⲆᐃⵠΔⲆ, Mh.ⵠⵠΔⲆΔ, Mh.ⵠΔⲆⲆΔΔΔ, Mh.ᐃⵠΔⵠΔΔΔ, Mh.ΔΔᐃⲆᐃ, Mh.ⵠⲆⵠΔⵠⲆᐃ, Mh.ⵠΔⲆᐃⲆΔⲆ, Mh.ΔᐃΔⵠⲆⲆᐃ, Mh.ΔᐃᐃΔⵠ, Mh.ΔⵠⵠⵠⵠⲆⲆ, Mh.ᐃᐃⲆⵠΔᐃΔ, Mh.ⲆᐃⵠⵠΔ, Mh.ⵠΔᐃⲆⵠ, Mh.ΔⵠΔⲆⲆᐃⲆ, Mh.ⲆⵠⵠⲆⲆᐃⲆ, Mh.ᐃⵠΔⵠⲆΔΔ, Mh.ᐃⵠⵠᐃⲆ, Mh.ΔᐃΔᐃⲆ, Mh.ΔᐃΔΔᐃ];
        ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_010")] = ᐃⵠ[1025][Er.ⲆⲆⲆ][b("111_111_110")];
        ᐃⵠ[1024] = [];
        ᐃⵠ[1024][Er.ᐃⲆΔ] = [];
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_010_000")] = Mh.ᐃⵠᐃᐃⵠΔΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_010_010")] = Mh.ⵠΔᐃᐃΔⵠⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_011_000")] = Mh.ΔⵠΔⵠⵠⵠΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_011_010")] = Mh.ⲆⵠⵠⲆᐃⲆΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_011_011")] = Mh.ⲆᐃᐃⵠⲆⲆⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_110_000")] = Mh.ⲆΔΔⲆⵠⲆⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_110_010")] = Mh.ⲆΔΔⲆᐃⲆⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_110_110")] = Mh.ⵠⲆⲆⵠⵠΔΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_111_000")] = Mh.ⲆⵠⵠᐃⲆⲆⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_111_010")] = Mh.ΔⵠⵠⵠΔᐃᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_111_011")] = Mh.ΔⲆⲆⵠΔᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_111_110")] = Mh.ⲆⲆᐃᐃⵠᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("000_111_111")] = Mh.ΔᐃᐃΔⵠᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_010_000")] = Mh.ᐃᐃΔΔⵠⲆᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_010_010")] = Mh.ᐃⲆⵠⵠⵠᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_011_000")] = Mh.ⵠᐃᐃΔⲆⵠⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_011_010")] = Mh.ⲆⲆΔⵠⵠᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_011_011")] = Mh.ⲆᐃᐃᐃⵠᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_110_000")] = Mh.ᐃΔⵠΔΔⲆⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_110_010")] = Mh.ᐃΔⵠΔⲆⲆᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_110_110")] = Mh.ΔᐃⲆΔΔΔⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_111_000")] = Mh.ΔⵠΔᐃⵠⵠⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_111_010")] = Mh.ᐃⲆⵠᐃⲆⲆΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_111_011")] = Mh.ΔᐃΔΔΔⵠⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_111_110")] = Mh.ΔⵠⲆᐃΔᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("010_111_111")] = Mh.ⲆᐃᐃⵠΔΔⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_011_000")] = Mh.ⵠᐃⲆⲆΔⲆᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_011_010")] = Mh.ΔⵠΔⵠᐃⵠⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_011_011")] = Mh.ᐃΔΔⵠᐃᐃᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_111_000")] = Mh.ⲆⲆᐃⲆⵠΔⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_111_010")] = Mh.ΔⵠᐃᐃΔΔⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_111_011")] = Mh.ⵠᐃΔⲆᐃᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_111_110")] = Mh.ⲆᐃΔᐃΔᐃⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("011_111_111")] = Mh.ⲆΔⲆⲆⲆⲆⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_110_000")] = Mh.ΔᐃᐃⲆᐃᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_110_010")] = Mh.ᐃⲆⲆᐃⵠⵠᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_110_110")] = Mh.ⵠΔᐃⵠⲆᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_111_000")] = Mh.ⵠⲆΔⵠⵠΔᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_111_010")] = Mh.ᐃⲆⲆᐃⵠⵠⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_111_011")] = Mh.ΔⵠΔᐃⵠᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_111_110")] = Mh.ᐃᐃᐃᐃⵠⵠⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("110_111_111")] = Mh.ΔⵠᐃⵠᐃΔᐃ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("111_111_011")] = Mh.Ⲇᐃᐃᐃⵠᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("111_111_110")] = Mh.ᐃΔⵠⵠΔᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("111_111_011")] = Mh.Ⲇᐃᐃᐃⵠᐃⵠ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("111_111_000")] = Mh.ΔΔᐃΔⵠᐃΔ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("111_111_111")] = Mh.ΔΔⲆΔᐃᐃⲆ;
        ᐃⵠ[1024][Er.ᐃⲆΔ][b("111_111_010")] = Mh.ΔΔᐃΔⵠⲆⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_010_000")] = Mh.ⲆᐃⲆᐃⵠΔᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_010_010")] = Mh.ΔᐃⵠΔᐃᐃⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_011_000")] = Mh.ⲆⵠⲆᐃⵠᐃᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_011_010")] = Mh.ⲆⲆⲆⵠᐃᐃΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_011_011")] = Mh.ⵠⵠⵠΔᐃᐃΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_110_000")] = Mh.ᐃⵠⵠⵠⵠⵠⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_110_010")] = Mh.ᐃⲆΔΔΔᐃΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_110_110")] = Mh.ⲆΔᐃⲆΔᐃΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_111_000")] = Mh.ⲆⵠⵠⲆⵠⵠΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_111_010")] = Mh.ⵠΔⲆⵠⲆⵠⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_111_011")] = Mh.ΔΔⵠⵠΔⵠⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_111_110")] = Mh.ⵠΔⵠᐃΔΔⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("000_111_111")] = Mh.ᐃⵠΔⵠΔᐃΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_010_000")] = Mh.ⵠⵠᐃΔᐃⵠᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_010_010")] = Mh.ⵠᐃⵠᐃⲆⲆⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_011_000")] = Mh.ⲆⵠⵠⲆΔⲆⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_011_010")] = Mh.ⵠⲆⲆⵠᐃΔⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_011_011")] = Mh.ⲆⵠΔΔᐃᐃᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_110_000")] = Mh.ⲆΔᐃΔᐃᐃᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_110_010")] = Mh.ⲆⵠᐃⲆᐃⲆⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_110_110")] = Mh.ⵠΔⵠᐃΔⵠᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_111_000")] = Mh.ΔΔΔΔⵠᐃᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_111_010")] = Mh.ΔⵠⵠᐃⲆᐃᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_111_011")] = Mh.ⲆᐃⲆΔⵠⵠⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_111_110")] = Mh.ΔᐃᐃΔΔⵠᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("010_111_111")] = Mh.ΔΔⲆⲆⲆⲆⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_011_000")] = Mh.ᐃᐃⵠΔⲆⵠᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_011_010")] = Mh.ⲆΔΔΔⵠΔᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_011_011")] = Mh.ⵠΔΔⲆⵠⵠⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_111_000")] = Mh.ⲆⲆⲆᐃⵠᐃⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_111_010")] = Mh.ⲆΔᐃΔⵠⵠΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_111_011")] = Mh.ΔⲆᐃⵠⲆΔⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_111_110")] = Mh.ΔᐃᐃΔΔⲆΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("011_111_111")] = Mh.ᐃⲆΔⵠᐃᐃᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_110_000")] = Mh.ΔⲆⲆΔᐃⵠⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_110_010")] = Mh.ⵠⲆΔⵠΔⲆⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_110_110")] = Mh.ⵠΔΔⲆΔΔᐃ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_111_000")] = Mh.ᐃΔᐃⵠⵠᐃⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_111_010")] = Mh.ΔᐃⵠⲆⲆᐃΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_111_011")] = Mh.ⵠⵠⵠⵠⲆⵠⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_111_110")] = Mh.ΔΔⲆⵠⵠⵠΔ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("110_111_111")] = Mh.ΔⲆⵠΔⲆⲆⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("111_111_011")] = Mh.ΔⵠⲆⲆᐃⵠⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("111_111_110")] = Mh.ᐃᐃᐃΔⵠⲆⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("111_111_011")] = Mh.ΔⵠⲆⲆᐃⵠⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("111_111_000")] = Mh.ᐃΔⲆⲆⲆⵠⵠ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("111_111_111")] = Mh.ΔᐃⵠΔᐃⲆⲆ;
        ᐃⵠ[1024][Er.ⲆⲆⲆ][b("111_111_010")] = Mh.ᐃᐃᐃⲆᐃΔΔ;
        ᐃⵠ[32] = [];
        ᐃⵠ[32][Er.ᐃⲆΔ] = Mh.ⵠΔⲆⵠⵠΔᐃ;
        ᐃⵠ[32][Er.ⲆⲆⲆ] = Mh.ΔᐃⲆᐃΔⲆᐃ;
        ᐃⵠ[205] = [];
        ᐃⵠ[205][Er.ᐃⲆΔ] = Mh.ΔΔⵠΔΔⲆΔ;
        ᐃⵠ[205][Er.ⲆⲆⲆ] = Mh.ΔΔᐃⵠⵠⲆⲆ;
        ᐃⵠ[957] = [];
        ᐃⵠ[957][Er.ᐃⲆΔ] = Mh.ⵠⵠᐃⵠⵠΔⵠ;
        ᐃⵠ[957][Er.ⲆⲆⲆ] = Mh.ⲆⲆΔⵠⲆⵠΔ;
        ᐃⵠ[207] = [];
        ᐃⵠ[207][Er.ᐃⲆΔ] = Mh.ⲆⲆᐃⵠΔᐃᐃ;
        ᐃⵠ[207][Er.ⲆⲆⲆ] = Mh.ΔⵠⲆΔᐃᐃⲆ;
        ᐃⵠ[954] = [];
        ᐃⵠ[954][Er.ᐃⲆΔ] = Mh.ΔⲆⲆⵠΔⵠⵠ;
        ᐃⵠ[954][Er.ⲆⲆⲆ] = Mh.ⲆΔᐃⵠΔᐃⵠ;
        ᐃⵠ[958] = [];
        ᐃⵠ[958][Er.ᐃⲆΔ] = Mh.ⵠΔᐃⵠΔᐃΔ;
        ᐃⵠ[958][Er.ⲆⲆⲆ] = Mh.ᐃΔⲆⲆΔⲆΔ;
        ᐃⵠ[209] = [];
        ᐃⵠ[209][Er.ᐃⲆΔ] = Mh.ⲆᐃⲆⲆᐃᐃⵠ;
        ᐃⵠ[209][Er.ⲆⲆⲆ] = Mh.ΔΔⵠⵠΔᐃⵠ;
        ᐃⵠ[971] = [];
        ᐃⵠ[971][Er.ᐃⲆΔ] = Mh.ᐃᐃΔⵠᐃΔᐃ;
        ᐃⵠ[971][Er.ⲆⲆⲆ] = Mh.ⲆᐃⵠΔᐃⲆΔ;
        ᐃⵠ[211] = [];
        ᐃⵠ[211][Er.ᐃⲆΔ] = Mh.ᐃΔⲆΔᐃᐃΔ;
        ᐃⵠ[211][Er.ⲆⲆⲆ] = Mh.ⲆⲆⵠⲆΔᐃⲆ;
        ᐃⵠ[986] = [];
        ᐃⵠ[986][Er.ᐃⲆΔ] = Mh.ΔⲆⵠᐃⲆⲆᐃ;
        ᐃⵠ[986][Er.ⲆⲆⲆ] = Mh.ᐃΔΔᐃⵠΔΔ;
        ᐃⵠ[989] = [];
        ᐃⵠ[989][Er.ᐃⲆΔ] = [Mh.ⲆᐃⲆⲆⲆⵠΔ];
        ᐃⵠ[989][Er.ⲆⲆⲆ] = [Mh.ΔⵠⵠⵠⲆⲆⲆ];
        ᐃⵠ[217] = [];
        ᐃⵠ[217][Er.ᐃⲆΔ] = Mh.ΔᐃⲆⲆΔΔΔ;
        ᐃⵠ[217][Er.ⲆⲆⲆ] = Mh.ⵠᐃᐃΔⲆⵠⲆ;
        ᐃⵠ[219] = [];
        ᐃⵠ[219][Er.ᐃⲆΔ] = Mh.ᐃᐃⲆᐃⲆⲆᐃ;
        ᐃⵠ[219][Er.ⲆⲆⲆ] = Mh.ⵠΔⵠᐃⵠⲆⲆ;
        ᐃⵠ[218] = [];
        ᐃⵠ[218][Er.ᐃⲆΔ] = Mh.ᐃⲆⵠΔⵠΔⲆ;
        ᐃⵠ[218][Er.ⲆⲆⲆ] = Mh.ⲆⵠᐃⵠᐃᐃⲆ;
        ᐃⵠ[212] = [];
        ᐃⵠ[212][Er.ᐃⲆΔ] = Mh.ⲆⵠᐃⵠΔΔᐃ;
        ᐃⵠ[212][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃⲆΔⵠᐃ;
        ᐃⵠ[213] = [];
        ᐃⵠ[213][Er.ᐃⲆΔ] = Mh.ᐃᐃⵠⲆⲆᐃᐃ;
        ᐃⵠ[213][Er.ⲆⲆⲆ] = Mh.ⵠⲆⵠΔᐃΔᐃ;
        ᐃⵠ[214] = [];
        ᐃⵠ[214][Er.ᐃⲆΔ] = Mh.ᐃⲆᐃΔᐃⲆⵠ;
        ᐃⵠ[214][Er.ⲆⲆⲆ] = Mh.ΔⵠᐃΔⵠᐃⲆ;
        ᐃⵠ[215] = [];
        ᐃⵠ[215][Er.ᐃⲆΔ] = Mh.ΔⵠⵠᐃⲆⵠⲆ;
        ᐃⵠ[215][Er.ⲆⲆⲆ] = Mh.ⲆⵠΔᐃⲆⵠᐃ;
        ᐃⵠ[216] = [];
        ᐃⵠ[216][Er.ᐃⲆΔ] = Mh.ⲆΔᐃΔⵠᐃⵠ;
        ᐃⵠ[216][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃⵠⲆⲆᐃ;
        ᐃⵠ[220] = [];
        ᐃⵠ[220][Er.ᐃⲆΔ] = Mh.ⵠⵠⵠⲆᐃΔⵠ;
        ᐃⵠ[220][Er.ⲆⲆⲆ] = Mh.ⲆΔⵠⵠᐃΔⵠ;
        ᐃⵠ[1020] = [];
        ᐃⵠ[1020][Er.ᐃⲆΔ] = Mh.ΔⲆⵠⲆᐃⲆⵠ;
        ᐃⵠ[1020][Er.ⲆⲆⲆ] = Mh.ⲆⵠᐃⵠⲆΔᐃ;
        ᐃⵠ[1021] = [];
        ᐃⵠ[1021][Er.ᐃⲆΔ] = Mh.ⲆᐃⵠᐃⵠⲆⵠ;
        ᐃⵠ[1021][Er.ⲆⲆⲆ] = Mh.Δⵠⵠᐃⵠⵠⵠ;
        ᐃⵠ[39] = [];
        ᐃⵠ[39][Er.ᐃⲆΔ] = Mh.ⵠᐃᐃΔΔᐃΔ;
        ᐃⵠ[39][Er.ⲆⲆⲆ] = Mh.ᐃⵠⲆΔᐃᐃΔ;
        ᐃⵠ[1022] = Mh.ⵠΔⲆΔΔΔᐃ;
        ᐃⵠ[1023] = Mh.ΔΔΔᐃⵠⵠΔ;
        ᐃⵠ[1041] = [];
        ᐃⵠ[1041][Er.ᐃⲆΔ] = [];
        ᐃⵠ[1041][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[1041][Er.ᐃⲆΔ].push(Mh.ⵠΔᐃΔᐃⵠⵠ);
        ᐃⵠ[1041][Er.ᐃⲆΔ].push(Mh.ⵠᐃⵠⵠΔΔⵠ);
        ᐃⵠ[1041][Er.ᐃⲆΔ].push(Mh.ᐃᐃᐃⵠⲆΔⲆ);
        ᐃⵠ[1041][Er.ⲆⲆⲆ].push(Mh.ᐃⲆⲆᐃⲆΔⵠ);
        ᐃⵠ[1041][Er.ⲆⲆⲆ].push(Mh.ⲆⲆⲆᐃⲆΔⲆ);
        ᐃⵠ[1041][Er.ⲆⲆⲆ].push(Mh.ⵠΔⵠⵠᐃⲆΔ);
        ᐃⵠ[244] = [];
        ᐃⵠ[244][Er.ᐃⲆΔ] = [];
        ᐃⵠ[244][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[244][Er.ᐃⲆΔ].push(Mh.ⵠᐃᐃⲆᐃⲆⲆ);
        ᐃⵠ[244][Er.ᐃⲆΔ].push(Mh.ᐃᐃⵠⵠΔᐃᐃ);
        ᐃⵠ[244][Er.ᐃⲆΔ].push(Mh.ⲆⵠΔⲆΔⲆᐃ);
        ᐃⵠ[244][Er.ⲆⲆⲆ].push(Mh.ᐃⲆⲆᐃⲆⵠᐃ);
        ᐃⵠ[244][Er.ⲆⲆⲆ].push(Mh.ⵠⲆΔⵠᐃⵠᐃ);
        ᐃⵠ[244][Er.ⲆⲆⲆ].push(Mh.ⲆΔⲆΔᐃΔᐃ);
        ᐃⵠ[1052] = [];
        ᐃⵠ[1052][Er.ᐃⲆΔ] = [];
        ᐃⵠ[1052][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[1052][Er.ᐃⲆΔ].push(Mh.ᐃⲆⲆᐃⵠᐃⲆ);
        ᐃⵠ[1052][Er.ᐃⲆΔ].push(Mh.ⵠᐃⲆΔΔⲆΔ);
        ᐃⵠ[1052][Er.ᐃⲆΔ].push(Mh.ΔΔⲆⵠᐃⲆⲆ);
        ᐃⵠ[1052][Er.ᐃⲆΔ].push(Mh.ⲆᐃᐃΔᐃᐃⲆ);
        ᐃⵠ[1052][Er.ᐃⲆΔ].push(Mh.ᐃⲆⵠⲆⵠⲆΔ);
        ᐃⵠ[1052][Er.ⲆⲆⲆ].push(Mh.ⲆⲆⵠᐃᐃⵠⵠ);
        ᐃⵠ[1052][Er.ⲆⲆⲆ].push(Mh.ᐃΔΔΔⲆΔΔ);
        ᐃⵠ[1052][Er.ⲆⲆⲆ].push(Mh.ᐃⵠΔⲆⵠΔΔ);
        ᐃⵠ[1052][Er.ⲆⲆⲆ].push(Mh.ⲆΔⵠᐃⵠΔⲆ);
        ᐃⵠ[1052][Er.ⲆⲆⲆ].push(Mh.ᐃᐃⲆΔⵠⵠᐃ);
        ᐃⵠ[450] = [];
        ᐃⵠ[450][Er.ᐃⲆΔ] = Mh.ⵠᐃⲆΔΔᐃⲆ;
        ᐃⵠ[450][Er.ⲆⲆⲆ] = Mh.ᐃⲆⲆⲆⵠⲆⵠ;
        ᐃⵠ[453] = [];
        ᐃⵠ[453][Er.ᐃⲆΔ] = Mh.ⵠᐃⲆⵠΔᐃᐃ;
        ᐃⵠ[453][Er.ⲆⲆⲆ] = Mh.Ⲇⵠⵠᐃᐃᐃⵠ;
        ᐃⵠ[454] = [];
        ᐃⵠ[454][Er.ᐃⲆΔ] = Mh.ⵠⲆᐃΔΔⲆⵠ;
        ᐃⵠ[454][Er.ⲆⲆⲆ] = Mh.ᐃΔᐃΔΔⲆᐃ;
        ᐃⵠ[464] = Mh.ᐃᐃᐃᐃΔⲆⲆ;
        ᐃⵠ[468] = Mh.ΔᐃⲆⵠⵠΔᐃ;
        ᐃⵠ[469] = Mh.ⵠΔΔᐃΔⵠΔ;
        ᐃⵠ[20] = [];
        ᐃⵠ[20][Er.ᐃⲆΔ] = Mh.ᐃΔⲆΔᐃⲆᐃ;
        ᐃⵠ[20][Er.ⲆⲆⲆ] = Mh.ΔⵠᐃⵠΔⵠᐃ;
        ᐃⵠ[920] = [];
        ᐃⵠ[920][Er.ᐃⲆΔ] = Mh.ⲆⵠⲆⲆⲆⵠᐃ;
        ᐃⵠ[920][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃⲆΔᐃⵠ;
        ᐃⵠ[21] = [];
        ᐃⵠ[21][Er.ᐃⲆΔ] = Mh.ᐃⲆᐃⵠⵠⲆⵠ;
        ᐃⵠ[21][Er.ⲆⲆⲆ] = Mh.ᐃⵠᐃΔⲆΔⲆ;
        ᐃⵠ[924] = [];
        ᐃⵠ[924][Er.ᐃⲆΔ] = Mh.ⲆⵠⲆⲆⲆⵠᐃ;
        ᐃⵠ[924][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃⲆΔᐃⵠ;
        ᐃⵠ[44] = [];
        ᐃⵠ[44][Er.ᐃⲆΔ] = Mh.ΔⵠᐃⲆⲆᐃΔ;
        ᐃⵠ[44][Er.ⲆⲆⲆ] = Mh.ᐃΔᐃⵠⲆᐃⲆ;
        ᐃⵠ[19] = [];
        ᐃⵠ[19][Er.ᐃⲆΔ] = Mh.ⲆΔⵠΔⲆⵠⲆ;
        ᐃⵠ[19][Er.ⲆⲆⲆ] = Mh.ⲆⲆΔᐃᐃⵠΔ;
        ᐃⵠ[34] = [];
        ᐃⵠ[34][Er.ᐃⲆΔ] = Mh.ΔⵠᐃⵠΔⲆⲆ;
        ᐃⵠ[34][Er.ⲆⲆⲆ] = Mh.ⵠΔᐃⵠⵠΔⲆ;
        ᐃⵠ[17] = [];
        ᐃⵠ[17][Er.ᐃⲆΔ] = Mh.ΔᐃᐃΔⵠΔⵠ;
        ᐃⵠ[17][Er.ⲆⲆⲆ] = Mh.ΔⵠⵠᐃⲆⵠΔ;
        ᐃⵠ[63] = [];
        ᐃⵠ[63][Er.ᐃⲆΔ] = Mh.ᐃⵠᐃⵠⲆⵠⲆ;
        ᐃⵠ[63][Er.ⲆⲆⲆ] = Mh.ᐃⲆⵠΔΔⵠΔ;
        ᐃⵠ[60] = [];
        ᐃⵠ[60][Er.ᐃⲆΔ] = Mh.ⲆᐃⵠⲆⵠⲆⵠ;
        ᐃⵠ[60][Er.ⲆⲆⲆ] = Mh.ΔΔᐃΔᐃⵠⵠ;
        ᐃⵠ[94] = [];
        ᐃⵠ[94][Er.ᐃⲆΔ] = Mh.ⵠΔΔⲆⲆΔΔᐃᐃ;
        ᐃⵠ[94][Er.ⲆⲆⲆ] = Mh.ΔᐃⵠΔᐃⲆⵠᐃᐃ;
        ᐃⵠ[95] = [];
        ᐃⵠ[95][Er.ᐃⲆΔ] = Mh.ⵠⵠΔⵠΔΔᐃⲆΔ;
        ᐃⵠ[95][Er.ⲆⲆⲆ] = Mh.ΔΔⵠⲆᐃᐃᐃᐃᐃ;
        ᐃⵠ[96] = [];
        ᐃⵠ[96][Er.ᐃⲆΔ] = Mh.ΔⵠⵠⲆᐃⲆⲆⵠᐃ;
        ᐃⵠ[96][Er.ⲆⲆⲆ] = Mh.ⲆΔⲆⵠⵠᐃⵠⲆⵠ;
        ᐃⵠ[97] = [];
        ᐃⵠ[97][Er.ᐃⲆΔ] = Mh.ᐃⵠⵠⲆΔᐃⵠΔΔ;
        ᐃⵠ[97][Er.ⲆⲆⲆ] = Mh.ΔⵠⵠᐃⵠⵠΔΔΔ;
        ᐃⵠ[98] = [];
        ᐃⵠ[98][Er.ᐃⲆΔ] = Mh.ᐃⵠⵠΔⵠⲆᐃⵠⵠ;
        ᐃⵠ[98][Er.ⲆⲆⲆ] = Mh.ᐃᐃⵠᐃΔⵠΔⵠᐃ;
        ᐃⵠ[99] = [];
        ᐃⵠ[99][Er.ᐃⲆΔ] = Mh.ⵠⲆⵠⲆⲆΔΔⲆⵠ;
        ᐃⵠ[99][Er.ⲆⲆⲆ] = Mh.ᐃΔⲆⲆΔⲆᐃⵠⵠ;
        ᐃⵠ[90] = [];
        ᐃⵠ[90][Er.ᐃⲆΔ] = Mh.ᐃⲆΔⵠΔⵠⵠ;
        ᐃⵠ[90][Er.ⲆⲆⲆ] = Mh.ⲆΔⲆΔⲆᐃᐃ;
        ᐃⵠ[91] = [];
        ᐃⵠ[91][Er.ᐃⲆΔ] = Mh.ᐃⵠᐃᐃⲆᐃⲆ;
        ᐃⵠ[91][Er.ⲆⲆⲆ] = Mh.ᐃⵠⲆᐃΔⵠⵠ;
        ᐃⵠ[71] = [];
        ᐃⵠ[71][Er.ᐃⲆΔ] = Mh.ᐃⵠΔᐃΔᐃⲆΔΔ;
        ᐃⵠ[71][Er.ⲆⲆⲆ] = Mh.ΔⵠⲆⵠᐃⵠΔⵠΔ;
        ᐃⵠ[72] = [];
        ᐃⵠ[72][Er.ᐃⲆΔ] = Mh.ᐃⲆᐃⲆᐃᐃΔᐃᐃ;
        ᐃⵠ[72][Er.ⲆⲆⲆ] = Mh.ⲆᐃΔᐃⵠⵠᐃⵠΔ;
        ᐃⵠ[73] = [];
        ᐃⵠ[73][Er.ᐃⲆΔ] = Mh.ᐃⲆΔᐃᐃΔⲆᐃΔ;
        ᐃⵠ[73][Er.ⲆⲆⲆ] = Mh.ᐃΔⲆΔᐃⲆΔⲆⵠ;
        ᐃⵠ[74] = [];
        ᐃⵠ[74][Er.ᐃⲆΔ] = Mh.ᐃΔⵠΔⵠⵠΔⵠΔ;
        ᐃⵠ[74][Er.ⲆⲆⲆ] = Mh.ΔⵠΔᐃⵠⵠⵠⲆᐃ;
        ᐃⵠ[75] = [];
        ᐃⵠ[75][Er.ᐃⲆΔ] = Mh.ΔⲆᐃⲆᐃΔΔᐃΔ;
        ᐃⵠ[75][Er.ⲆⲆⲆ] = Mh.ᐃᐃⲆΔᐃᐃᐃΔⲆ;
        ᐃⵠ[76] = [];
        ᐃⵠ[76][Er.ᐃⲆΔ] = Mh.ᐃΔΔⵠⵠᐃᐃΔⲆ;
        ᐃⵠ[76][Er.ⲆⲆⲆ] = Mh.ᐃᐃΔⵠΔᐃΔᐃᐃ;
        ᐃⵠ[101] = [];
        ᐃⵠ[101][Er.ᐃⲆΔ] = Mh.ΔΔⲆⲆⵠᐃⲆ;
        ᐃⵠ[101][Er.ⲆⲆⲆ] = Mh.ΔΔΔΔⲆⲆⵠ;
        ᐃⵠ[64] = [];
        ᐃⵠ[64][Er.ᐃⲆΔ] = Mh.ᐃᐃⲆⵠⵠᐃⵠⲆᐃ;
        ᐃⵠ[64][Er.ⲆⲆⲆ] = Mh.ΔᐃⵠⵠⲆΔⵠᐃⲆ;
        ᐃⵠ[102] = [];
        ᐃⵠ[102][Er.ᐃⲆΔ] = Mh.ⵠΔⵠᐃⲆΔᐃ;
        ᐃⵠ[102][Er.ⲆⲆⲆ] = Mh.ΔᐃΔⲆΔᐃᐃ;
        ᐃⵠ[65] = [];
        ᐃⵠ[65][Er.ᐃⲆΔ] = Mh.ΔΔⵠⲆΔᐃⵠΔΔ;
        ᐃⵠ[65][Er.ⲆⲆⲆ] = Mh.ⲆᐃⵠⵠⵠⲆⲆΔΔ;
        ᐃⵠ[103] = [];
        ᐃⵠ[103][Er.ᐃⲆΔ] = Mh.ⵠᐃᐃΔⲆᐃᐃ;
        ᐃⵠ[103][Er.ⲆⲆⲆ] = Mh.ⲆⲆΔΔⵠⲆⵠ;
        ᐃⵠ[66] = [];
        ᐃⵠ[66][Er.ᐃⲆΔ] = Mh.ⵠΔΔⵠΔᐃⲆΔᐃ;
        ᐃⵠ[66][Er.ⲆⲆⲆ] = Mh.ⵠⵠⵠⵠⲆᐃΔⵠΔ;
        ᐃⵠ[104] = [];
        ᐃⵠ[104][Er.ᐃⲆΔ] = Mh.ᐃⵠᐃⵠΔⵠⵠ;
        ᐃⵠ[104][Er.ⲆⲆⲆ] = Mh.ⲆⵠⵠⲆᐃᐃⵠ;
        ᐃⵠ[67] = [];
        ᐃⵠ[67][Er.ᐃⲆΔ] = Mh.ΔⲆΔΔᐃⲆᐃΔΔ;
        ᐃⵠ[67][Er.ⲆⲆⲆ] = Mh.ⲆⵠⵠΔᐃⲆⲆΔⲆ;
        ᐃⵠ[105] = [];
        ᐃⵠ[105][Er.ᐃⲆΔ] = Mh.ᐃΔⵠᐃΔⵠⵠ;
        ᐃⵠ[105][Er.ⲆⲆⲆ] = Mh.ⲆⵠⲆᐃⲆᐃΔ;
        ᐃⵠ[68] = [];
        ᐃⵠ[68][Er.ᐃⲆΔ] = Mh.ⵠΔⵠΔⲆᐃᐃΔⵠ;
        ᐃⵠ[68][Er.ⲆⲆⲆ] = Mh.ᐃᐃⵠⲆᐃⵠΔΔⲆ;
        ᐃⵠ[106] = [];
        ᐃⵠ[106][Er.ᐃⲆΔ] = Mh.ⵠᐃⵠⵠΔⵠⵠ;
        ᐃⵠ[106][Er.ⲆⲆⲆ] = Mh.ⵠᐃⵠΔΔᐃΔⵠⵠ;
        ᐃⵠ[69] = [];
        ᐃⵠ[69][Er.ᐃⲆΔ] = Mh.ΔΔᐃⵠᐃⵠⵠⲆⵠ;
        ᐃⵠ[69][Er.ⲆⲆⲆ] = Mh.ⵠⵠⵠΔΔᐃⲆⲆⵠ;
        ᐃⵠ[107] = [];
        ᐃⵠ[107][Er.ᐃⲆΔ] = Mh.ⵠⲆⵠⲆΔⲆΔ;
        ᐃⵠ[107][Er.ⲆⲆⲆ] = Mh.ⵠᐃⵠᐃΔᐃΔ;
        ᐃⵠ[70] = [];
        ᐃⵠ[70][Er.ᐃⲆΔ] = Mh.ᐃᐃⵠⲆΔⲆΔⵠⵠ;
        ᐃⵠ[70][Er.ⲆⲆⲆ] = Mh.ⲆⲆⵠᐃⲆⵠⵠᐃᐃ;
        ᐃⵠ[80] = [];
        ᐃⵠ[80][Er.ᐃⲆΔ] = Mh.ΔⵠᐃⵠⲆΔΔ;
        ᐃⵠ[80][Er.ⲆⲆⲆ] = Mh.ΔⲆⲆⲆⵠΔΔ;
        ᐃⵠ[81] = [];
        ᐃⵠ[81][Er.ᐃⲆΔ] = Mh.ⲆΔⵠⲆΔᐃᐃ;
        ᐃⵠ[81][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃⲆᐃᐃᐃ;
        ᐃⵠ[22] = [];
        ᐃⵠ[22][Er.ᐃⲆΔ] = Mh.ᐃΔⵠⲆⲆᐃΔ;
        ᐃⵠ[22][Er.ⲆⲆⲆ] = Mh.ᐃⵠⲆⲆΔΔⲆ;
        ᐃⵠ[928] = [];
        ᐃⵠ[928][Er.ᐃⲆΔ] = Mh.ᐃⵠⲆΔᐃⲆⵠ;
        ᐃⵠ[928][Er.ⲆⲆⲆ] = Mh.ΔⲆΔⲆⲆⵠⲆ;
        ᐃⵠ[935] = [];
        ᐃⵠ[935][Er.ᐃⲆΔ] = [];
        ᐃⵠ[935][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[935][Er.ᐃⲆΔ].push(Mh.ⵠΔΔΔⲆⲆⵠⲆΔ);
        ᐃⵠ[935][Er.ᐃⲆΔ].push(Mh.ΔⲆⲆⲆΔᐃΔⲆΔ);
        ᐃⵠ[935][Er.ⲆⲆⲆ].push(Mh.ΔⲆⲆⲆΔᐃΔⲆΔ);
        ᐃⵠ[935][Er.ⲆⲆⲆ].push(Mh.ΔΔᐃⵠΔΔᐃᐃⲆ);
        ᐃⵠ[941] = [];
        ᐃⵠ[941][Er.ᐃⲆΔ] = [];
        ᐃⵠ[941][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[941][Er.ᐃⲆΔ].push(Mh.ΔᐃΔⵠΔΔⲆ);
        ᐃⵠ[941][Er.ᐃⲆΔ].push(Mh.ΔΔⵠⲆⵠⲆᐃ);
        ᐃⵠ[941][Er.ᐃⲆΔ].push(Mh.ⲆΔⵠᐃᐃᐃⵠ);
        ᐃⵠ[941][Er.ⲆⲆⲆ].push(Mh.ᐃⵠⵠⵠΔᐃⵠ);
        ᐃⵠ[941][Er.ⲆⲆⲆ].push(Mh.ΔᐃᐃᐃᐃⲆⵠ);
        ᐃⵠ[941][Er.ⲆⲆⲆ].push(Mh.ᐃᐃᐃⲆΔᐃⲆ);
        ᐃⵠ[53] = [];
        ᐃⵠ[53][Er.ᐃⲆΔ] = Mh.ᐃΔᐃⲆᐃⵠⵠ;
        ᐃⵠ[53][Er.ⲆⲆⲆ] = Mh.ⲆᐃΔⵠⵠΔⲆ;
        ᐃⵠ[54] = [];
        ᐃⵠ[54][Er.ᐃⲆΔ] = Mh.ⵠᐃΔᐃⵠⵠΔ;
        ᐃⵠ[54][Er.ⲆⲆⲆ] = Mh.ΔⲆⲆᐃⵠⲆⵠ;
        ᐃⵠ[241] = [];
        ᐃⵠ[241][Er.ᐃⲆΔ] = [];
        ᐃⵠ[241][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[241][Er.ᐃⲆΔ].push(Mh.ΔΔΔᐃΔⲆⲆ);
        ᐃⵠ[241][Er.ᐃⲆΔ].push(Mh.ⲆⵠⵠⵠⲆⲆΔ);
        ᐃⵠ[241][Er.ᐃⲆΔ].push(Mh.ΔⲆⵠᐃΔⲆⲆ);
        ᐃⵠ[241][Er.ⲆⲆⲆ].push(Mh.ΔⲆⵠᐃⵠΔⵠ);
        ᐃⵠ[241][Er.ⲆⲆⲆ].push(Mh.ΔᐃⲆᐃⵠᐃᐃ);
        ᐃⵠ[241][Er.ⲆⲆⲆ].push(Mh.ΔⵠⵠΔⲆᐃⵠ);
        ᐃⵠ[202] = [];
        ᐃⵠ[202][Er.ᐃⲆΔ] = [];
        ᐃⵠ[202][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[202][Er.ᐃⲆΔ].push(Mh.ΔⲆⵠΔⵠΔΔ);
        ᐃⵠ[202][Er.ᐃⲆΔ].push(Mh.ⵠⲆⵠᐃⲆΔΔ);
        ᐃⵠ[202][Er.ᐃⲆΔ].push(Mh.ⵠᐃⵠⵠᐃⵠᐃ);
        ᐃⵠ[202][Er.ⲆⲆⲆ].push(Mh.ⲆⵠⵠⵠⲆⵠΔ);
        ᐃⵠ[202][Er.ⲆⲆⲆ].push(Mh.ᐃⵠⲆⲆΔΔⵠ);
        ᐃⵠ[202][Er.ⲆⲆⲆ].push(Mh.ⲆⲆᐃᐃⲆⵠᐃ);
        ᐃⵠ[203] = [];
        ᐃⵠ[203][Er.ᐃⲆΔ] = [];
        ᐃⵠ[203][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[203][Er.ᐃⲆΔ].push(Mh.ⵠⵠⲆᐃⲆⲆΔ);
        ᐃⵠ[203][Er.ᐃⲆΔ].push(Mh.ΔᐃⵠΔⵠⲆⲆ);
        ᐃⵠ[203][Er.ᐃⲆΔ].push(Mh.ⵠᐃⵠᐃΔΔᐃ);
        ᐃⵠ[203][Er.ᐃⲆΔ].push(Mh.ⲆⲆⵠᐃⵠᐃⲆ);
        ᐃⵠ[203][Er.ᐃⲆΔ].push(Mh.ΔⵠⲆⵠⵠⲆⲆ);
        ᐃⵠ[203][Er.ᐃⲆΔ].push(Mh.ᐃⲆⲆⲆΔⲆⲆ);
        ᐃⵠ[203][Er.ⲆⲆⲆ].push(Mh.ΔΔᐃΔΔᐃⲆ);
        ᐃⵠ[203][Er.ⲆⲆⲆ].push(Mh.ΔΔⲆᐃᐃⵠⲆ);
        ᐃⵠ[203][Er.ⲆⲆⲆ].push(Mh.ⲆΔᐃᐃⵠⵠΔ);
        ᐃⵠ[203][Er.ⲆⲆⲆ].push(Mh.ⵠⵠᐃⵠΔⵠᐃ);
        ᐃⵠ[203][Er.ⲆⲆⲆ].push(Mh.ⲆᐃΔΔⵠΔΔ);
        ᐃⵠ[203][Er.ⲆⲆⲆ].push(Mh.ⲆⲆᐃᐃⲆΔΔ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ] = [];
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ] = [];
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ].push(Mh.ᐃⵠⵠᐃⲆⵠⲆ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ].push(Mh.ΔᐃⲆᐃⲆᐃΔ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ].push(Mh.ᐃΔⵠΔΔΔᐃ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ].push(Mh.ᐃⲆⲆⲆⲆⲆⵠ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ].push(Mh.ΔⵠⲆⲆⵠᐃⲆ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ᐃⲆΔ].push(Mh.ᐃⲆΔᐃΔᐃΔ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ].push(Mh.ⵠᐃⲆⲆΔᐃᐃ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ].push(Mh.ΔⲆΔⵠΔᐃⵠ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ].push(Mh.ⵠⵠⵠⵠᐃⲆⲆ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ].push(Mh.ΔⲆΔᐃᐃⲆⲆ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ].push(Mh.ⵠΔⲆΔΔΔⲆ);
        ᐃⵠ[Er.ⲆⵠⵠΔᐃ][Er.ⲆⲆⲆ].push(Mh.ᐃᐃⲆⵠᐃΔΔ);
        ᐃⵠ[918] = [];
        ᐃⵠ[918][Er.ᐃⲆΔ] = Mh.ᐃⵠΔΔⵠΔᐃ;
        ᐃⵠ[918][Er.ⲆⲆⲆ] = Mh.ⵠΔΔⵠᐃΔⵠ;
        ᐃⵠ[919] = Mh.ΔⵠⵠΔⲆΔⵠ;
        ᐃⵠ[56] = [];
        ᐃⵠ[56][Er.ᐃⲆΔ] = Mh.ᐃΔᐃᐃⲆⵠᐃᐃᐃ;
        ᐃⵠ[56][Er.ⲆⲆⲆ] = Mh.ⲆᐃᐃΔΔⵠⲆᐃⵠ;
        ᐃⵠ[223] = [];
        ᐃⵠ[223][Er.ᐃⲆΔ] = Mh.ⲆⲆᐃΔⲆᐃΔ;
        ᐃⵠ[223][Er.ⲆⲆⲆ] = Mh.ⵠᐃⵠᐃΔΔΔ;
        ᐃⵠ[224] = [];
        ᐃⵠ[224][Er.ᐃⲆΔ] = Mh.Ⲇⵠⵠⵠⵠⵠⵠ;
        ᐃⵠ[224][Er.ⲆⲆⲆ] = Mh.ᐃⵠⲆΔᐃΔⵠ;
        ᐃⵠ[236] = [];
        ᐃⵠ[236][Er.ᐃⲆΔ] = Mh.ⲆᐃⵠΔⲆᐃⲆ;
        ᐃⵠ[236][Er.ⲆⲆⲆ] = Mh.ⵠⲆΔⲆⵠⲆΔ;
        ᐃⵠ[1033] = [];
        ᐃⵠ[1033][Er.ᐃⲆΔ] = Mh.ⲆᐃⵠⲆⵠΔⲆ;
        ᐃⵠ[1033][Er.ⲆⲆⲆ] = Mh.ⲆᐃⲆᐃⵠⲆΔ;
        ᐃⵠ[1034] = Mh.ⵠⲆⵠᐃΔⵠⵠ;
        ᐃⵠ[1150] = [];
        ᐃⵠ[1150][Er.ᐃⲆΔ] = Mh.ⲆΔⲆΔⵠᐃᐃ;
        ᐃⵠ[1150][Er.ⲆⲆⲆ] = Mh.ΔⵠΔⵠⲆΔⵠ;
        ᐃⵠ[1152] = [];
        ᐃⵠ[1152][Er.ᐃⲆΔ] = Mh.ΔΔⵠᐃⲆⵠΔ;
        ᐃⵠ[1152][Er.ⲆⲆⲆ] = Mh.ᐃⵠᐃᐃⲆⲆⵠ;
        ᐃⵠ[1149] = Mh.ΔⲆΔΔⲆⵠΔ;
        ᐃⵠ[1151] = Mh.ΔΔΔⲆⵠⵠΔ;
        ᐃⵠ[1153] = Mh.ⵠΔⵠⵠⵠᐃⵠ;
        ᐃⵠ[1143] = [];
        ᐃⵠ[1143][Er.ᐃⲆΔ] = Mh.ᐃΔⵠΔΔⵠΔ;
        ᐃⵠ[1143][Er.ⲆⲆⲆ] = Mh.ᐃⵠΔⵠᐃⲆⵠ;
        ᐃⵠ[1145] = [];
        ᐃⵠ[1145][Er.ᐃⲆΔ] = Mh.ᐃᐃⲆᐃⵠᐃᐃ;
        ᐃⵠ[1145][Er.ⲆⲆⲆ] = Mh.ⵠᐃΔⲆⲆⵠΔ;
        ᐃⵠ[1146] = [];
        ᐃⵠ[1146][Er.ᐃⲆΔ] = Mh.ⲆⵠᐃⲆΔⲆΔ;
        ᐃⵠ[1146][Er.ⲆⲆⲆ] = Mh.ⵠᐃΔⲆᐃᐃⲆ;
        ᐃⵠ[1144] = Mh.ⲆΔᐃΔΔⵠⲆ;
        ᐃⵠ[1148] = Mh.ΔⵠᐃΔΔᐃᐃ;
        ᐃⵠ[1147] = Mh.ᐃⵠⵠᐃΔΔⲆ;
        ᐃⵠ[1053] = [];
        ᐃⵠ[1053][Er.ᐃⲆΔ] = Mh.ΔᐃᐃⲆⲆⲆⵠ;
        ᐃⵠ[1053][Er.ⲆⲆⲆ] = Mh.ⲆⲆⲆⵠΔᐃⵠ;
        ᐃⵠ[1055] = [];
        ᐃⵠ[1055][Er.ᐃⲆΔ] = Mh.ⵠⵠⵠΔΔⵠⵠ;
        ᐃⵠ[1055][Er.ⲆⲆⲆ] = Mh.Δⵠᐃⵠᐃᐃᐃ;
        ᐃⵠ[231] = [];
        ᐃⵠ[231][Er.ᐃⲆΔ] = Mh.ᐃⲆⵠΔΔⲆⲆ;
        ᐃⵠ[231][Er.ⲆⲆⲆ] = Mh.ⵠΔΔᐃⵠⵠΔ;
        ᐃⵠ[1060] = [];
        ᐃⵠ[1060][Er.ᐃⲆΔ] = Mh.ΔⲆᐃⲆⵠⲆΔ;
        ᐃⵠ[1060][Er.ⲆⲆⲆ] = Mh.ᐃΔⵠⲆᐃⵠⲆ;
        ᐃⵠ[1063] = [];
        ᐃⵠ[1063][Er.ᐃⲆΔ] = Mh.ⵠⲆⵠⵠΔⲆᐃ;
        ᐃⵠ[1063][Er.ⲆⲆⲆ] = Mh.ΔΔⵠⲆⲆᐃΔ;
        ᐃⵠ[1059] = [];
        ᐃⵠ[1059][Er.ᐃⲆΔ] = Mh.ᐃᐃⵠⲆᐃΔⲆ;
        ᐃⵠ[1059][Er.ⲆⲆⲆ] = Mh.ⵠᐃⵠⲆⲆᐃᐃ;
        ᐃⵠ[1062] = [];
        ᐃⵠ[1062][Er.ᐃⲆΔ] = Mh.ⵠⲆⲆⵠᐃⵠΔ;
        ᐃⵠ[1062][Er.ⲆⲆⲆ] = Mh.ⵠΔⵠΔᐃⲆᐃ;
        ᐃⵠ[1056] = Mh.ΔᐃⵠΔⵠᐃΔ;
        ᐃⵠ[1057] = Mh.ΔΔΔΔⲆⵠᐃ;
        ᐃⵠ[1058] = Mh.ΔⲆⲆⲆᐃⵠⲆ;
        ᐃⵠ[1065] = Mh.ⲆⵠⵠⲆⵠΔⵠ;
        ᐃⵠ[1066] = Mh.ⲆᐃᐃⵠⲆΔΔ;
        ᐃⵠ[1067] = Mh.ⲆΔⲆⲆᐃᐃᐃ;
        ᐃⵠ[1222] = [];
        ᐃⵠ[1222][Er.ᐃⲆΔ] = Mh.ΔᐃⵠⵠⵠⵠⲆ;
        ᐃⵠ[1222][Er.ⲆⲆⲆ] = Mh.ⵠᐃⵠΔΔⵠⲆ;
        ᐃⵠ[248] = [];
        ᐃⵠ[248][Er.ᐃⲆΔ] = Mh.ⵠΔⵠᐃΔⲆᐃ;
        ᐃⵠ[248][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃⵠᐃᐃΔ;
        ᐃⵠ[1218] = [];
        ᐃⵠ[1218][Er.ᐃⲆΔ] = Mh.ⵠⲆⲆΔΔᐃⵠ;
        ᐃⵠ[1218][Er.ⲆⲆⲆ] = Mh.ⵠΔⲆᐃᐃᐃⵠ;
        ᐃⵠ[1221] = [];
        ᐃⵠ[1221][Er.ᐃⲆΔ] = Mh.ⵠᐃᐃⲆⵠΔⲆ;
        ᐃⵠ[1221][Er.ⲆⲆⲆ] = Mh.ⲆΔⲆᐃΔⲆΔ;
        ᐃⵠ[1223] = Mh.ⲆⵠΔΔⵠⵠⲆ;
        ᐃⵠ[1219] = Mh.ⲆⲆⵠᐃΔⵠⲆ;
        ᐃⵠ[1068] = [];
        ᐃⵠ[1068][Er.ᐃⲆΔ] = Mh.ⲆΔᐃⲆⵠΔⲆ;
        ᐃⵠ[1068][Er.ⲆⲆⲆ] = Mh.ⵠⵠⲆⵠΔΔⵠ;
        ᐃⵠ[232] = [];
        ᐃⵠ[232][Er.ᐃⲆΔ] = Mh.ⲆᐃΔⲆᐃⵠΔ;
        ᐃⵠ[232][Er.ⲆⲆⲆ] = Mh.ⲆΔᐃᐃⵠⲆᐃ;
        ᐃⵠ[1070] = [];
        ᐃⵠ[1070][Er.ᐃⲆΔ] = Mh.ⵠᐃΔⵠⲆⵠΔ;
        ᐃⵠ[1070][Er.ⲆⲆⲆ] = Mh.ᐃΔⲆᐃᐃⲆᐃ;
        ᐃⵠ[1072] = [];
        ᐃⵠ[1072][Er.ᐃⲆΔ] = Mh.ΔⲆΔᐃⵠᐃⵠ;
        ᐃⵠ[1072][Er.ⲆⲆⲆ] = Mh.ΔⲆⵠⲆΔⲆΔ;
        ᐃⵠ[1075] = [];
        ᐃⵠ[1075][Er.ᐃⲆΔ] = Mh.ⲆⵠΔΔⲆΔΔ;
        ᐃⵠ[1075][Er.ⲆⲆⲆ] = Mh.ⲆⲆⵠⵠⲆΔⲆ;
        ᐃⵠ[1071] = [];
        ᐃⵠ[1071][Er.ᐃⲆΔ] = Mh.ⲆΔⲆΔⵠΔΔ;
        ᐃⵠ[1071][Er.ⲆⲆⲆ] = Mh.ⵠⲆᐃⲆᐃᐃⲆ;
        ᐃⵠ[1074] = [];
        ᐃⵠ[1074][Er.ᐃⲆΔ] = Mh.ⵠⲆᐃⲆᐃᐃⵠ;
        ᐃⵠ[1074][Er.ⲆⲆⲆ] = Mh.ΔⵠᐃⲆᐃⲆⲆ;
        ᐃⵠ[1073] = [];
        ᐃⵠ[1073][Er.ᐃⲆΔ] = Mh.ⵠⵠⲆⲆᐃⵠⲆ;
        ᐃⵠ[1073][Er.ⲆⲆⲆ] = Mh.ᐃⲆⲆΔⲆⵠᐃ;
        ᐃⵠ[1076] = [];
        ᐃⵠ[1076][Er.ᐃⲆΔ] = Mh.ⲆᐃᐃⲆⲆⵠΔ;
        ᐃⵠ[1076][Er.ⲆⲆⲆ] = Mh.ΔᐃⲆⲆᐃⲆΔ;
        ᐃⵠ[1077] = Mh.ⵠᐃⵠⲆΔΔⵠ;
        ᐃⵠ[1078] = Mh.ⲆΔᐃⵠᐃᐃⵠ;
        ᐃⵠ[1079] = Mh.ᐃᐃⵠⵠΔΔⵠ;
        ᐃⵠ[1083] = [];
        ᐃⵠ[1083][Er.ᐃⲆΔ] = Mh.ⲆᐃᐃΔᐃⲆΔ;
        ᐃⵠ[1083][Er.ⲆⲆⲆ] = Mh.ᐃΔΔᐃⵠⵠᐃ;
        ᐃⵠ[233] = [];
        ᐃⵠ[233][Er.ᐃⲆΔ] = Mh.ⵠⲆⵠᐃΔᐃᐃ;
        ᐃⵠ[233][Er.ⲆⲆⲆ] = Mh.ⵠⵠΔⲆᐃⲆᐃ;
        ᐃⵠ[1085] = [];
        ᐃⵠ[1085][Er.ᐃⲆΔ] = Mh.ᐃⲆⵠⲆⲆⵠΔ;
        ᐃⵠ[1085][Er.ⲆⲆⲆ] = Mh.ⵠΔᐃΔⲆⲆⵠ;
        ᐃⵠ[1087] = [];
        ᐃⵠ[1087][Er.ᐃⲆΔ] = Mh.ⵠⲆΔⵠⲆⵠᐃ;
        ᐃⵠ[1087][Er.ⲆⲆⲆ] = Mh.ΔΔⲆⲆⲆΔᐃ;
        ᐃⵠ[1090] = [];
        ᐃⵠ[1090][Er.ᐃⲆΔ] = Mh.ᐃⵠⵠΔⵠⲆΔ;
        ᐃⵠ[1090][Er.ⲆⲆⲆ] = Mh.ⲆᐃⵠⲆⲆⵠΔ;
        ᐃⵠ[1086] = [];
        ᐃⵠ[1086][Er.ᐃⲆΔ] = Mh.ᐃᐃⵠⲆⵠⲆᐃ;
        ᐃⵠ[1086][Er.ⲆⲆⲆ] = Mh.ⵠΔΔⲆⲆⲆⵠ;
        ᐃⵠ[1089] = [];
        ᐃⵠ[1089][Er.ᐃⲆΔ] = Mh.ⵠᐃⵠᐃΔⵠΔ;
        ᐃⵠ[1089][Er.ⲆⲆⲆ] = Mh.ⲆⵠⲆΔΔⵠΔ;
        ᐃⵠ[1088] = [];
        ᐃⵠ[1088][Er.ᐃⲆΔ] = Mh.ⵠᐃⵠⵠᐃⲆΔ;
        ᐃⵠ[1088][Er.ⲆⲆⲆ] = Mh.Δᐃᐃⵠᐃⵠᐃ;
        ᐃⵠ[1091] = [];
        ᐃⵠ[1091][Er.ᐃⲆΔ] = Mh.ⵠΔΔⲆⲆΔᐃ;
        ᐃⵠ[1091][Er.ⲆⲆⲆ] = Mh.ⵠᐃⵠⵠᐃⵠΔ;
        ᐃⵠ[1092] = Mh.ⲆⲆᐃᐃᐃⵠΔ;
        ᐃⵠ[1093] = Mh.ΔΔⲆⲆⲆⵠⲆ;
        ᐃⵠ[1094] = Mh.ᐃⵠⵠⲆⲆⵠⵠ;
        ᐃⵠ[1098] = [];
        ᐃⵠ[1098][Er.ᐃⲆΔ] = Mh.ⲆⵠᐃⲆᐃΔⲆ;
        ᐃⵠ[1098][Er.ⲆⲆⲆ] = Mh.ΔΔᐃᐃᐃΔΔ;
        ᐃⵠ[235] = [];
        ᐃⵠ[235][Er.ᐃⲆΔ] = Mh.ΔᐃⵠⲆΔᐃⵠ;
        ᐃⵠ[235][Er.ⲆⲆⲆ] = Mh.ⵠΔⲆΔⵠⵠΔ;
        ᐃⵠ[1115] = Mh.ΔΔΔΔⲆⵠⲆ;
        ᐃⵠ[1113] = [];
        ᐃⵠ[1113][Er.ᐃⲆΔ] = Mh.ⲆⲆⲆⵠᐃⲆᐃ;
        ᐃⵠ[1113][Er.ⲆⲆⲆ] = Mh.ⲆΔΔⵠᐃᐃⵠ;
        ᐃⵠ[1114] = [];
        ᐃⵠ[1114][Er.ᐃⲆΔ] = Mh.ⵠⵠⲆⲆⵠⵠⲆ;
        ᐃⵠ[1114][Er.ⲆⲆⲆ] = Mh.ⵠⵠⵠⲆⲆⲆⲆ;
        ᐃⵠ[1100] = [];
        ᐃⵠ[1100][Er.ᐃⲆΔ] = Mh.ΔᐃΔΔⲆⵠⵠ;
        ᐃⵠ[1100][Er.ⲆⲆⲆ] = Mh.ⵠⲆⵠⲆⲆⵠⵠ;
        ᐃⵠ[1102] = [];
        ᐃⵠ[1102][Er.ᐃⲆΔ] = Mh.ᐃᐃᐃⲆⵠᐃΔ;
        ᐃⵠ[1102][Er.ⲆⲆⲆ] = Mh.Δⵠⵠᐃⵠᐃᐃ;
        ᐃⵠ[1105] = [];
        ᐃⵠ[1105][Er.ᐃⲆΔ] = Mh.ⲆⵠᐃΔᐃᐃᐃ;
        ᐃⵠ[1105][Er.ⲆⲆⲆ] = Mh.ᐃᐃΔᐃᐃΔⲆ;
        ᐃⵠ[1101] = [];
        ᐃⵠ[1101][Er.ᐃⲆΔ] = Mh.ΔΔⵠⲆⵠΔΔ;
        ᐃⵠ[1101][Er.ⲆⲆⲆ] = Mh.ⵠⲆᐃᐃΔᐃΔ;
        ᐃⵠ[1104] = [];
        ᐃⵠ[1104][Er.ᐃⲆΔ] = Mh.ΔΔᐃⵠⵠᐃᐃ;
        ᐃⵠ[1104][Er.ⲆⲆⲆ] = Mh.ⲆⲆΔⵠΔⵠΔ;
        ᐃⵠ[1103] = [];
        ᐃⵠ[1103][Er.ᐃⲆΔ] = Mh.ΔΔⵠΔᐃⵠⵠ;
        ᐃⵠ[1103][Er.ⲆⲆⲆ] = Mh.ⲆᐃⵠΔⲆΔᐃ;
        ᐃⵠ[1106] = [];
        ᐃⵠ[1106][Er.ᐃⲆΔ] = Mh.ⲆⵠⲆⵠΔⲆΔ;
        ᐃⵠ[1106][Er.ⲆⲆⲆ] = Mh.ⲆΔⲆΔⵠΔⲆ;
        ᐃⵠ[1107] = Mh.ᐃⲆⲆΔⲆΔΔ;
        ᐃⵠ[1108] = Mh.ΔᐃΔΔⵠΔⵠ;
        ᐃⵠ[1109] = Mh.ᐃᐃΔⵠⵠⵠⵠ;
        ᐃⵠ[1119] = [];
        ᐃⵠ[1119][Er.ᐃⲆΔ] = Mh.ΔΔⵠⵠⲆᐃⵠ;
        ᐃⵠ[1119][Er.ⲆⲆⲆ] = Mh.ⲆΔⲆᐃⲆⵠⵠ;
        ᐃⵠ[238] = [];
        ᐃⵠ[238][Er.ᐃⲆΔ] = Mh.ᐃⵠⵠΔᐃⵠᐃ;
        ᐃⵠ[238][Er.ⲆⲆⲆ] = Mh.ΔΔⵠᐃⵠⲆᐃ;
        ᐃⵠ[1136] = Mh.ΔᐃΔΔⵠⵠⲆ;
        ᐃⵠ[1134] = [];
        ᐃⵠ[1134][Er.ᐃⲆΔ] = Mh.ⲆⵠⲆⲆⲆⲆΔ;
        ᐃⵠ[1134][Er.ⲆⲆⲆ] = Mh.ⵠⲆΔⲆⵠΔⵠ;
        ᐃⵠ[1135] = [];
        ᐃⵠ[1135][Er.ᐃⲆΔ] = Mh.ⲆⲆΔⵠᐃⲆⲆ;
        ᐃⵠ[1135][Er.ⲆⲆⲆ] = Mh.ⲆⵠⵠⲆⲆⲆⲆ;
        ᐃⵠ[1121] = [];
        ᐃⵠ[1121][Er.ᐃⲆΔ] = Mh.ⲆΔⵠⵠΔⲆΔ;
        ᐃⵠ[1121][Er.ⲆⲆⲆ] = Mh.ΔⵠΔⲆΔᐃᐃ;
        ᐃⵠ[1123] = [];
        ᐃⵠ[1123][Er.ᐃⲆΔ] = Mh.ⲆᐃΔⵠⲆΔⵠ;
        ᐃⵠ[1123][Er.ⲆⲆⲆ] = Mh.ⲆᐃᐃⲆⲆΔᐃ;
        ᐃⵠ[1126] = [];
        ᐃⵠ[1126][Er.ᐃⲆΔ] = Mh.ΔⵠᐃⵠⲆΔⵠ;
        ᐃⵠ[1126][Er.ⲆⲆⲆ] = Mh.ⲆⵠⵠᐃΔᐃᐃ;
        ᐃⵠ[1122] = [];
        ᐃⵠ[1122][Er.ᐃⲆΔ] = Mh.ᐃⲆᐃⵠΔⲆᐃ;
        ᐃⵠ[1122][Er.ⲆⲆⲆ] = Mh.ΔᐃΔⲆΔⲆⲆ;
        ᐃⵠ[1125] = [];
        ᐃⵠ[1125][Er.ᐃⲆΔ] = Mh.ΔᐃⵠⵠᐃᐃΔ;
        ᐃⵠ[1125][Er.ⲆⲆⲆ] = Mh.ⲆΔΔⵠⵠⲆⵠ;
        ᐃⵠ[1124] = [];
        ᐃⵠ[1124][Er.ᐃⲆΔ] = Mh.ΔᐃᐃᐃΔΔᐃ;
        ᐃⵠ[1124][Er.ⲆⲆⲆ] = Mh.ᐃᐃᐃⵠⵠⵠΔ;
        ᐃⵠ[1127] = [];
        ᐃⵠ[1127][Er.ᐃⲆΔ] = Mh.ᐃⲆⵠᐃⲆᐃΔ;
        ᐃⵠ[1127][Er.ⲆⲆⲆ] = Mh.ⲆⵠᐃᐃⵠΔⵠ;
        ᐃⵠ[1128] = Mh.ⵠⲆᐃᐃⲆᐃⵠ;
        ᐃⵠ[1129] = Mh.ⵠⲆᐃΔⲆⵠᐃ;
        ᐃⵠ[1130] = Mh.ⵠⲆΔΔⲆⲆⲆ;
        ᐃⵠ[1042] = [];
        ᐃⵠ[1042][Er.ᐃⲆΔ] = Mh.ⵠΔᐃΔⵠΔΔ;
        ᐃⵠ[1042][Er.ⲆⲆⲆ] = Mh.ΔⵠΔᐃᐃⵠⲆ;
        ᐃⵠ[1043] = [];
        ᐃⵠ[1043][Er.ᐃⲆΔ] = Mh.ᐃΔⲆᐃᐃⵠⲆ;
        ᐃⵠ[1043][Er.ⲆⲆⲆ] = Mh.ᐃⲆΔΔᐃΔᐃ;
        ᐃⵠ[1044] = [];
        ᐃⵠ[1044][Er.ᐃⲆΔ] = Mh.ⲆΔⵠΔΔⲆΔ;
        ᐃⵠ[1044][Er.ⲆⲆⲆ] = Mh.ᐃⲆΔᐃΔΔᐃ;
        ᐃⵠ[228] = [];
        ᐃⵠ[228][Er.ᐃⲆΔ] = Mh.ⲆΔⵠᐃΔⲆⲆ;
        ᐃⵠ[228][Er.ⲆⲆⲆ] = Mh.ⲆΔⵠᐃΔⲆⲆ;
        ᐃⵠ[234] = [];
        ᐃⵠ[234][Er.ᐃⲆΔ] = Mh.ⲆⵠΔᐃᐃΔⵠ;
        ᐃⵠ[234][Er.ⲆⲆⲆ] = Mh.ⲆⵠΔᐃᐃΔⵠ;
        ᐃⵠ[249] = [];
        ᐃⵠ[249][Er.ᐃⲆΔ] = Mh.ΔΔⲆᐃⲆⵠᐃ;
        ᐃⵠ[249][Er.ⲆⲆⲆ] = Mh.ΔΔⲆᐃⲆⵠᐃ;
        ᐃⵠ[1045] = Mh.ⲆΔᐃΔⵠⵠⵠ;
        ᐃⵠ[89] = [];
        ᐃⵠ[89][Er.ᐃⲆΔ] = Mh.ΔΔⵠⲆΔⲆᐃ;
        ᐃⵠ[89][Er.ⲆⲆⲆ] = Mh.ᐃΔⲆⵠᐃᐃⵠ;
        ᐃⵠ[92] = [];
        ᐃⵠ[92][Er.ᐃⲆΔ] = Mh.Δᐃⵠⵠᐃⵠⵠ;
        ᐃⵠ[92][Er.ⲆⲆⲆ] = Mh.ⵠΔΔᐃⲆⲆΔ;
        ᐃⵠ[247] = [];
        ᐃⵠ[247][Er.ᐃⲆΔ] = [Mh.ΔⵠⵠⵠΔⲆᐃ, Mh.Ⲇⵠⵠⵠⵠⵠᐃ, Mh.ΔΔⲆⲆⵠᐃⲆ, Mh.ⵠΔⵠᐃⲆΔᐃ, Mh.ⵠᐃᐃΔⲆᐃᐃ, Mh.ᐃⵠᐃⵠΔⵠⵠ, Mh.ᐃΔⵠᐃΔⵠⵠ, Mh.ⵠᐃⵠⵠΔⵠⵠ, Mh.ⵠⲆⵠⲆΔⲆΔ];
        ᐃⵠ[247][Er.ⲆⲆⲆ] = [Mh.ⵠᐃᐃΔΔⵠᐃ, Mh.ΔᐃΔΔⲆⵠᐃ, Mh.ΔΔΔΔⲆⲆⵠ, Mh.ΔᐃΔⲆΔᐃᐃ, Mh.ⲆⲆΔΔⵠⲆⵠ, Mh.ⲆⵠⵠⲆᐃᐃⵠ, Mh.ⲆⵠⲆᐃⲆᐃΔ, Mh.ⵠᐃⵠⵠΔⵠⵠ, Mh.ⵠᐃⵠᐃΔᐃΔ];
        ᐃⵠ[93] = [];
        ᐃⵠ[93][Er.ᐃⲆΔ] = Mh.ᐃΔⲆᐃⵠⲆᐃ;
        ᐃⵠ[93][Er.ⲆⲆⲆ] = Mh.ΔⲆⵠⵠⵠⲆⵠ;
        ᐃⵠ[225] = [];
        ᐃⵠ[225][Er.ᐃⲆΔ] = Mh.ᐃⵠᐃΔⵠⵠΔ;
        ᐃⵠ[225][Er.ⲆⲆⲆ] = Mh.ⲆΔᐃᐃΔᐃᐃ;
        ᐃⵠ[226] = [];
        ᐃⵠ[226][Er.ᐃⲆΔ] = Mh.ⵠⵠⵠΔⲆⲆΔ;
        ᐃⵠ[226][Er.ⲆⲆⲆ] = Mh.ⲆⲆᐃΔⵠᐃΔ;
        ᐃⵠ[24] = [];
        ᐃⵠ[24][Er.ᐃⲆΔ] = Mh.ΔⵠⲆΔⵠⲆⵠ;
        ᐃⵠ[24][Er.ⲆⲆⲆ] = Mh.ΔⲆᐃᐃᐃΔᐃ;
        ᐃⵠ[88] = [];
        ᐃⵠ[88][Er.ᐃⲆΔ] = Mh.ⵠⵠΔⲆᐃⵠⲆ;
        ᐃⵠ[88][Er.ⲆⲆⲆ] = Mh.ᐃⵠⲆⵠΔΔⵠ;
        ᐃⵠ[87] = [];
        ᐃⵠ[87][Er.ᐃⲆΔ] = Mh.ᐃⲆⲆⵠᐃᐃⵠ;
        ᐃⵠ[87][Er.ⲆⲆⲆ] = Mh.ᐃΔΔΔΔΔΔ;
        ᐃⵠ[82] = [];
        ᐃⵠ[82][Er.ᐃⲆΔ] = Mh.ⵠᐃⲆⲆⲆⲆᐃ;
        ᐃⵠ[82][Er.ⲆⲆⲆ] = Mh.ΔⲆⲆΔⲆⲆⲆ;
        ᐃⵠ[621] = [];
        ᐃⵠ[621][Er.ᐃⲆΔ] = [];
        ᐃⵠ[621][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[621][Er.ᐃⲆΔ].push(Mh.ⲆΔᐃⵠΔᐃⵠᐃᐃ);
        ᐃⵠ[621][Er.ᐃⲆΔ].push(Mh.ᐃⵠΔᐃᐃⵠⵠⵠᐃ);
        ᐃⵠ[621][Er.ᐃⲆΔ].push(Mh.ΔΔΔⵠⵠΔⲆⵠⲆ);
        ᐃⵠ[621][Er.ⲆⲆⲆ].push(Mh.ⵠⵠΔΔΔⵠᐃᐃᐃ);
        ᐃⵠ[621][Er.ⲆⲆⲆ].push(Mh.ᐃⵠⵠⵠⵠΔⲆⲆⵠ);
        ᐃⵠ[621][Er.ⲆⲆⲆ].push(Mh.ⵠⲆΔⵠΔᐃⲆΔⵠ);
        ᐃⵠ[619] = [];
        ᐃⵠ[619][Er.ᐃⲆΔ] = [];
        ᐃⵠ[619][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[619][Er.ᐃⲆΔ].push(Mh.ⲆⲆᐃⵠⵠΔⵠⲆⵠ);
        ᐃⵠ[619][Er.ᐃⲆΔ].push(Mh.ⵠⲆᐃⲆΔⵠⵠⵠⵠ);
        ᐃⵠ[619][Er.ᐃⲆΔ].push(Mh.ⲆⲆⵠⵠΔⵠⵠⵠⲆ);
        ᐃⵠ[619][Er.ⲆⲆⲆ].push(Mh.ᐃΔΔΔᐃⵠΔᐃⵠ);
        ᐃⵠ[619][Er.ⲆⲆⲆ].push(Mh.ⵠⲆᐃᐃΔⵠⵠⵠΔ);
        ᐃⵠ[619][Er.ⲆⲆⲆ].push(Mh.ᐃⲆⵠⲆⲆᐃᐃᐃⲆ);
        ᐃⵠ[620] = [];
        ᐃⵠ[620][Er.ᐃⲆΔ] = [];
        ᐃⵠ[620][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[620][Er.ᐃⲆΔ].push(Mh.ᐃΔᐃⲆΔⲆΔᐃⲆ);
        ᐃⵠ[620][Er.ᐃⲆΔ].push(Mh.ⲆᐃⵠⵠΔΔᐃΔⲆ);
        ᐃⵠ[620][Er.ᐃⲆΔ].push(Mh.ᐃΔⵠᐃᐃᐃᐃᐃⲆ);
        ᐃⵠ[620][Er.ⲆⲆⲆ].push(Mh.ⵠⲆⲆⵠᐃΔⲆⲆᐃ);
        ᐃⵠ[620][Er.ⲆⲆⲆ].push(Mh.ᐃⵠⲆⵠⵠΔᐃⵠⲆ);
        ᐃⵠ[620][Er.ⲆⲆⲆ].push(Mh.ᐃⲆᐃΔⵠΔΔⲆⵠ);
        ⲆᐃΔⲆ.g = [];
        ⲆᐃΔⲆ.g[0] = [Mh.ⵠⲆⵠΔⲆΔᐃ, Mh.ⵠᐃᐃΔΔᐃᐃ];
        ⲆᐃΔⲆ.g[1] = ⲆᐃΔⲆ.g[0];
        ⲆᐃΔⲆ.g[2] = [Mh.ΔⵠⵠΔⵠⵠⲆ, Mh.ᐃᐃⲆΔᐃΔΔ];
        ⲆᐃΔⲆ.m = [];
        ⲆᐃΔⲆ.m[0] = [Mh.ⲆⲆᐃⵠᐃⲆⵠ, Mh.ᐃᐃⲆⲆⵠᐃᐃ];
        ⲆᐃΔⲆ.m[1] = ⲆᐃΔⲆ.m[0];
        ⲆᐃΔⲆ.m[2] = [Mh.ᐃᐃⵠΔⲆΔΔ, Mh.ΔⲆᐃⵠⵠΔⲆ];
        ⲆᐃΔⲆ.la = [];
        ⲆᐃΔⲆ.la[0] = [Mh.ΔΔΔⲆᐃⲆᐃ, Mh.ΔᐃⵠΔⵠⲆᐃ];
        ⲆᐃΔⲆ.la[1] = ⲆᐃΔⲆ.la[0];
        ⲆᐃΔⲆ.la[2] = ⲆᐃΔⲆ.la[0];
        ⲆᐃΔⲆ.la[3] = ⲆᐃΔⲆ.la[0];
        ⲆᐃΔⲆ.la[4] = ⲆᐃΔⲆ.la[0];
        ⲆᐃΔⲆ.la[5] = ⲆᐃΔⲆ.la[0];
        ⲆᐃΔⲆ.s = [];
        ⲆᐃΔⲆ.s[0] = [Mh.ⲆⵠΔⵠᐃⲆⲆ, Mh.ΔΔⲆⲆⲆᐃⵠ];
        ⲆᐃΔⲆ.s[1] = ⲆᐃΔⲆ.s[0];
        ⲆᐃΔⲆ.s[2] = [Mh.ΔΔⲆΔΔΔΔ, Mh.ⵠⲆΔΔᐃⵠⵠ];
        ⲆᐃΔⲆ.p = [];
        ⲆᐃΔⲆ.p[0] = [Mh.ᐃᐃΔⲆⲆΔᐃ, Mh.ᐃᐃΔⲆⲆΔᐃ];
        ⲆᐃΔⲆ.a = [];
        ⲆᐃΔⲆ.a[0] = [Mh.ⲆⵠΔᐃⲆΔⲆ, Mh.ⲆᐃΔΔᐃᐃᐃ];
        ⲆᐃΔⲆ.a[1] = ⲆᐃΔⲆ.a[0];
        ⲆᐃΔⲆ.a[2] = ⲆᐃΔⲆ.a[0];
        ⲆᐃΔⲆ.d = [];
        ⲆᐃΔⲆ.d[0] = [Mh.ⵠⲆᐃⵠⲆⵠᐃ, Mh.ⲆⵠᐃⲆΔⵠᐃ];
        ⲆᐃΔⲆ.d[1] = ⲆᐃΔⲆ.d[0];
        ⲆᐃΔⲆ.d[2] = ⲆᐃΔⲆ.d[0];
        ⲆᐃΔⲆ.re = [];
        ⲆᐃΔⲆ.re[0] = [Mh.ᐃⵠᐃⲆⲆΔⲆ, Mh.ᐃⲆⵠᐃᐃΔᐃ];
        ⲆᐃΔⲆ.re[1] = ⲆᐃΔⲆ.re[0];
        ⲆᐃΔⲆ.re[2] = ⲆᐃΔⲆ.re[0];
        ⲆᐃΔⲆ.f = [];
        ⲆᐃΔⲆ.f[0] = [Mh.ᐃᐃⵠⲆᐃⲆΔ, Mh.ⵠⲆΔΔⵠᐃᐃ];
        ⲆᐃΔⲆ.f[1] = ⲆᐃΔⲆ.f[0];
        ⲆᐃΔⲆ.f[2] = ⲆᐃΔⲆ.f[0];
        ⲆᐃΔⲆ.isl = [];
        ⲆᐃΔⲆ.isl[0] = [Mh.ⵠⲆⲆⵠΔⲆⲆ, Mh.ⲆⵠᐃⵠⵠΔⵠ];
        ⲆᐃΔⲆ.isl[1] = ⲆᐃΔⲆ.isl[0];
        ⲆᐃΔⲆ.isl[2] = ⲆᐃΔⲆ.isl[0];
        ⲆᐃΔⲆ.c = [];
        ⲆᐃΔⲆ.c[0] = [Mh.ⲆΔⵠⵠⵠⲆᐃ, Mh.ⲆΔⵠᐃⲆΔⵠ];
        ⲆᐃΔⲆ.c[1] = ⲆᐃΔⲆ.c[0];
        ⲆᐃΔⲆ.c[2] = ⲆᐃΔⲆ.c[0];
        ⲆᐃΔⲆ.wtb = [];
        ⲆᐃΔⲆ.wtb[0] = [Mh.ᐃᐃⲆⵠᐃΔⲆ, Mh.ⵠΔΔᐃⵠⲆᐃ];
        ⲆᐃΔⲆ.PIRANHA = [Mh.ⲆⲆⲆⲆᐃⲆᐃ, Mh.ΔⲆⵠΔΔⵠⵠ];
        ⲆᐃΔⲆ.KRAKEN = [Mh.ⵠⵠᐃᐃⲆⲆᐃ, Mh.ΔⵠΔΔΔᐃⲆ];
        ⲆᐃΔⲆ.FOX = [Mh.ⵠᐃᐃⲆⵠⲆΔ, Mh.ΔᐃΔΔᐃⵠⵠ];
        ⲆᐃΔⲆ.WOLF = [Mh.ΔⵠⲆΔᐃΔⲆ, Mh.ⲆΔⵠᐃⵠᐃΔ];
        ⲆᐃΔⲆ.SPIDER = [Mh.ⵠᐃⵠⲆΔΔΔ, Mh.ⲆᐃⲆⵠΔⵠⲆ];
        ⲆᐃΔⲆ.BEAR = [Mh.ᐃⲆΔΔⲆΔᐃ, Mh.ⲆⲆΔΔⵠⵠᐃ];
        ⲆᐃΔⲆ.CAVE = [Mh.ⲆΔⲆΔΔΔᐃ, Mh.ⵠᐃΔⲆⲆᐃΔ];
        ⲆᐃΔⲆ.MAP = [Mh.ΔⲆⲆᐃΔΔⲆ, Mh.ⵠΔΔⲆⲆⵠᐃ];
        ⲆᐃΔⲆ.FOREST = [Mh.ⵠⵠⲆⲆⵠⲆᐃ, Mh.ᐃⲆᐃΔⲆᐃΔ];
        ⲆᐃΔⲆ.WINTER = [Mh.ⵠΔⲆⵠⵠⵠⲆ, Mh.ⵠΔᐃᐃⲆⵠΔ];
        ⲆᐃΔⲆ.DESERT = [Mh.ᐃᐃⲆᐃⲆⵠΔ, Mh.ΔⵠⵠⵠΔΔⲆ];
        ⲆᐃΔⲆ.LAVA = [Mh.ᐃᐃⵠΔᐃⲆΔ, Mh.ⵠΔΔⵠⵠⵠⵠ];
        for (var c in ⲆᐃΔⲆ) {
            for (var d = ⲆᐃΔⲆ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ΔΔᐃΔᐃⵠⲆ !== undefined) {
                    f.ΔΔᐃΔᐃⵠⲆ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ΔΔᐃΔᐃⵠⲆ !== undefined) {
                            f[g].ΔΔᐃΔᐃⵠⲆ();
                        }
                    }
                }
            }
        }
        console.log($g, yk);
    }
    function Xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Hb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Hb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Hb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Hb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        qb(e, c[2]);
        return d;
    }
    function $m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        qb(e, undefined, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        qb(e, undefined, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        qb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        qb(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        qb(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        qb(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        qb(e, Yd, c[3], a * 4);
        return d;
    }
    function ep(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        Hb(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        qb(f, c[2]);
        Hb(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        qb(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = Ap(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = Ap(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function ip(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        Xb(e, 6, a * 40, a * 10);
        e.restore();
        qb(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        Xb(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        qb(e, c[2], c[3], a * 5);
        return d;
    }
    function tp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0 : 0;
        Ub(e, a * 178.5, a * 172.828125, a * 150);
        qb(e, undefined, c[0], a * 65);
        Ub(e, a * 178.5, a * 172.828125, a * 150);
        qb(e, undefined, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Hb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Hb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        qb(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Hb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        qb(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        qb(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        qb(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        Ub(e, a * 178.5, a * 172.828125, a * 150);
        qb(e, Uh, c[2], a * 95);
        Ub(e, a * 178.5, a * 172.828125, a * 150);
        qb(e, undefined, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Hb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        qb(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Hb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        qb(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Hb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        qb(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        qb(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        qb(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        qb(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function np(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Hb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        qb(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Hb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        qb(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Hb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        qb(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Hb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        qb(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Hb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        qb(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Hb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        qb(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Hb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        qb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Hb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        qb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Hb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        qb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Hb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        qb(e, xn, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Hb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        qb(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Hb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        qb(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        qb(e, jj, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        Xb(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        qb(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        Xb(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        qb(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        Xb(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        qb(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        Xb(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        qb(e, c[7], c[8], a * 7);
        return d;
    }
    function op(a, b, c, d) {
        Ke(Hx, a, b, c, d);
        return ((188 + (er(Gx[0], Gx[1]) ^ er(Gx[2], Gx[3]))) * 48271 + 0) % 2147483647;
    }
    function ap(b, c, d, e, f, i) {
        const a = (2531011 + (53611 + b) * 214013) % 4294967296;
        const j = ~(f & 59706) & (f | 59706);
        const k = (46990 + i) % 65292;
        const h = function (b, c, d, e) {
            const f = ~(b & 51252) & (b | 51252);
            const g = ~(c & 61362) & 61362 | ~(c & 61362) & c;
            const a = (d | 44087) & ~(d & 44087);
            const i = ~(e & 16019) & e | ~(e & 16019) & 16019;
            const j = Ff(f, g, a, i, f, g);
            const h = zk(a, i, f);
            return (1 + (48133 + (j ^ h)) * 22695477) % 4294967296;
        }(a, c ^ 26353, (12345 + (d + 41521) * 1103515245) % 2147483648, (e | 9718) & ~(e & 9718));
        const l = Et(j, k, a);
        return (16 << ((h ^ l) >> 24 & 255)) + (8 << ((h ^ l) >> 16 & 255)) + (0 << ((h ^ l) & 255)) + (24 << ((h ^ l) >> 8 & 255));
    }
    function rp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        Hb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        qb(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        Hb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        qb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        qb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        qb(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        Hb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        qb(e, Wr, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        Hb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        qb(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        Hb(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        qb(e, c[6], c[7], a * 4);
        return d;
    }
    function sp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        qb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        qb(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        qb(e, Ta, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        qb(e, Wr, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        qb(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        qb(e, c[2]);
        return d;
    }
    function hp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        qb(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        qb(e, br, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        qb(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        qb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        qb(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        qb(e, undefined, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        qb(e, Wr, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        Hb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        qb(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        Hb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        qb(e, c[8], c[2], a * 4);
        Ub(e, a * 87, a * 39, a * 4.123105625617661);
        qb(e, c[9], c[2], a * 4);
        Ub(e, a * 87, a * 60, a * 4.242640687119285);
        qb(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        qb(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        qb(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        qb(e, c[9], c[2], a * 4);
        Ub(e, a * 50, a * 80, a * 5);
        qb(e, c[9], c[2], a * 4);
        Ub(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        qb(e, c[9], c[2], a * 4);
        Ub(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        qb(e, c[9], c[2], a * 4);
        return d;
    }
    function lp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        qb(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        qb(e, c[4], c[5], a * 6);
        return d;
    }
    function gp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        qb(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        qb(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        qb(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        qb(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        qb(e, c[3], c[2], a * 19);
        Ub(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        qb(e, c[4]);
        Ub(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        qb(e, c[4]);
        Ub(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        qb(e, c[4]);
        Ub(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        qb(e, c[4]);
        Ub(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        qb(e, c[4]);
        Ub(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        qb(e, c[4]);
        Ub(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        qb(e, c[4]);
        Ub(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        qb(e, c[4]);
        Ub(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        qb(e, c[4]);
        Ub(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        qb(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        qb(e, c[5]);
        return d;
    }
    function up(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Hb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Hb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        qb(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        Hb(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        qb(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Hb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Hb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        qb(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        qb(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Hb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Hb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        qb(e, c[3], c[4], a * 6);
        return d;
    }
    function bp() {
        var a = 1;
        new Date().getTime();
        Zm();
        fm();
        ᐃⵠ[540] = [];
        ᐃⵠ[540][Er.ᐃⲆΔ] = [];
        ᐃⵠ[540][Er.ⲆⲆⲆ] = [];
        for (var b = 0; Er.ᐃᐃⵠⲆⵠⵠⵠ > b; b++) {
            ᐃⵠ[540][Er.ᐃⲆΔ].push(Ra(yu(a, 4 + b, "#59B8CE")));
            ᐃⵠ[540][Er.ⲆⲆⲆ].push(Ra(yu(a, 4 + b, "#90DDD9")));
        }
        ᐃⵠ[470] = [];
        ᐃⵠ[470][Er.ᐃⲆΔ] = [];
        ᐃⵠ[470][Er.ⲆⲆⲆ] = [];
        for (b = 0; Er.ⵠⲆⲆᐃΔⲆⲆ > b; b++) {
            ᐃⵠ[470][Er.ᐃⲆΔ].push(Ra(yu(a, 4 + b, "#fff")));
            ᐃⵠ[470][Er.ⲆⲆⲆ].push(Ra(yu(a, 4 + b, "#fff")));
        }
        ᐃⵠ[471] = [];
        ᐃⵠ[471][Er.ᐃⲆΔ] = [];
        ᐃⵠ[471][Er.ⲆⲆⲆ] = [];
        for (b = 0; Er.ⵠⲆⲆᐃΔⲆⲆ > b; b++) {
            ᐃⵠ[471][Er.ᐃⲆΔ].push(Ra(yu(a, 6 + b, "#DDCD8A")));
            ᐃⵠ[471][Er.ⲆⲆⲆ].push(Ra(yu(a, 6 + b, "#155E57")));
        }
        ᐃⵠ[942] = [];
        ᐃⵠ[942][Er.ᐃⲆΔ] = [];
        ᐃⵠ[942][Er.ⲆⲆⲆ] = [];
        for (b = 0; Er.ᐃᐃⵠⵠⵠΔΔ > b; b++) {
            ᐃⵠ[942][Er.ᐃⲆΔ].push(Ra(yu(a, 4 + b, "#353326")));
            ᐃⵠ[942][Er.ⲆⲆⲆ].push(Ra(yu(a, 4 + b, "#1D2526")));
        }
        ᐃⵠ[201] = [];
        ᐃⵠ[201][Er.ᐃⲆΔ] = Ra(rd(a * 1.5, 0, ["#ee71a9"]));
        ᐃⵠ[201][Er.ⲆⲆⲆ] = Ra(rd(a * 1.5, 0, ["#ee71a9"]));
        ᐃⵠ[872] = [ᐃⵠ[201]];
        ᐃⵠ[872][1] = [];
        ᐃⵠ[872][2] = [];
        ᐃⵠ[872][3] = [];
        ᐃⵠ[872][4] = [];
        ᐃⵠ[872][1][Er.ᐃⲆΔ] = Ra(rd(a * 1.5, 0, ["#e2d63b"]));
        ᐃⵠ[872][1][Er.ⲆⲆⲆ] = Ra(rd(a * 1.5, 0, ["#e2d63b"]));
        ᐃⵠ[872][2][Er.ᐃⲆΔ] = Ra(rd(a * 1.5, 0, ["#309cbd"]));
        ᐃⵠ[872][2][Er.ⲆⲆⲆ] = Ra(rd(a * 1.5, 0, ["#309cbd"]));
        ᐃⵠ[872][3][Er.ᐃⲆΔ] = Ra(rd(a * 1.5, 0, ["#cd232d"]));
        ᐃⵠ[872][3][Er.ⲆⲆⲆ] = Ra(rd(a * 1.5, 0, ["#cd232d"]));
        ᐃⵠ[872][4][Er.ᐃⲆΔ] = Ra(rd(a * 1.5, 0, ["#42b672"]));
        ᐃⵠ[872][4][Er.ⲆⲆⲆ] = Ra(rd(a * 1.5, 0, ["#42b672"]));
        if (og.ⲆΔⲆⲆⲆⲆⲆ("cti", cj.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            Ra = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        ᐃⵠ[797] = Ra(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        ᐃⵠ[108] = [];
        ᐃⵠ[108][Er.ᐃⲆΔ] = [];
        ᐃⵠ[108][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[108][Er.ᐃⲆΔ].push(Ra(Gu(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃⵠ[108][Er.ᐃⲆΔ].push(Ra(Gu(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃⵠ[108][Er.ᐃⲆΔ].push(Ra(Gu(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃⵠ[108][Er.ⲆⲆⲆ].push(Ra(Gu(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃⵠ[108][Er.ⲆⲆⲆ].push(Ra(Gu(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃⵠ[108][Er.ⲆⲆⲆ].push(Ra(Gu(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃⵠ[111] = [];
        ᐃⵠ[111][Er.ᐃⲆΔ] = [];
        ᐃⵠ[111][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[111][Er.ᐃⲆΔ].push(Ra(xu(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃⵠ[111][Er.ᐃⲆΔ].push(Ra(xu(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃⵠ[111][Er.ᐃⲆΔ].push(Ra(xu(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃⵠ[111][Er.ⲆⲆⲆ].push(Ra(xu(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃⵠ[111][Er.ⲆⲆⲆ].push(Ra(xu(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃⵠ[111][Er.ⲆⲆⲆ].push(Ra(xu(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃⵠ[112] = [];
        ᐃⵠ[112][Er.ᐃⲆΔ] = [];
        ᐃⵠ[112][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[112][Er.ᐃⲆΔ].push(Ra(zu(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃⵠ[112][Er.ᐃⲆΔ].push(Ra(zu(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃⵠ[112][Er.ᐃⲆΔ].push(Ra(zu(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃⵠ[112][Er.ⲆⲆⲆ].push(Ra(zu(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃⵠ[112][Er.ⲆⲆⲆ].push(Ra(zu(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃⵠ[112][Er.ⲆⲆⲆ].push(Ra(zu(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃⵠ[239] = [];
        ᐃⵠ[239][Er.ᐃⲆΔ] = Mh.ⵠⵠⵠⵠⲆⵠΔ;
        ᐃⵠ[239][Er.ⲆⲆⲆ] = Mh.ⵠⵠⲆⲆΔᐃᐃ;
        ᐃⵠ[286] = [];
        ᐃⵠ[286][Er.ᐃⲆΔ] = Ra(Ut(a * 0.6, ["#0d1b1c"]));
        ᐃⵠ[286][Er.ⲆⲆⲆ] = Ra(Ut(a * 0.6, ["#030d14"]));
        ᐃⵠ[793] = [];
        ᐃⵠ[793][Er.ᐃⲆΔ] = Ra(Ot(a * 0.6, ["#2a2938", "#242330"]));
        ᐃⵠ[793][Er.ⲆⲆⲆ] = Ra(Ot(a * 0.6, ["#1b1e30", "#161921"]));
        ᐃⵠ[820] = [];
        ᐃⵠ[820][Er.ᐃⲆΔ] = Ra(vd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        ᐃⵠ[820][Er.ⲆⲆⲆ] = Ra(vd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        ᐃⵠ[821] = [];
        ᐃⵠ[821][Er.ᐃⲆΔ] = Ra(ud(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        ᐃⵠ[821][Er.ⲆⲆⲆ] = Ra(ud(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        ᐃⵠ[822] = [];
        ᐃⵠ[822][Er.ᐃⲆΔ] = Ra(Nt(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        ᐃⵠ[822][Er.ⲆⲆⲆ] = Ra(Nt(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
        ᐃⵠ[823] = Ra(sd(a * 0.6, ["#BB0000"]));
        ᐃⵠ[824] = Ra(sd(a * 0.6, ["#DBE71C"]));
        ᐃⵠ[825] = Ra(sd(a * 0.6, ["#00BB00"]));
        ᐃⵠ[109] = [];
        ᐃⵠ[109][Er.ᐃⲆΔ] = [];
        ᐃⵠ[109][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[109][Er.ᐃⲆΔ].push(Zt(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], w, 0));
        ᐃⵠ[109][Er.ᐃⲆΔ].push(Zt(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
        ᐃⵠ[109][Er.ᐃⲆΔ].push(Zt(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], va, 0));
        ᐃⵠ[109][Er.ᐃⲆΔ].push(Zt(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
        ᐃⵠ[109][Er.ᐃⲆΔ].push(Zt(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], vg, 0));
        ᐃⵠ[109][Er.ᐃⲆΔ].push(Zt(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], sn, 0));
        ᐃⵠ[109][Er.ⲆⲆⲆ].push(Zt(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
        ᐃⵠ[109][Er.ⲆⲆⲆ].push(Zt(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
        ᐃⵠ[109][Er.ⲆⲆⲆ].push(Zt(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], _e, 0));
        ᐃⵠ[109][Er.ⲆⲆⲆ].push(Zt(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        ᐃⵠ[109][Er.ⲆⲆⲆ].push(Zt(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], jt, 0));
        ᐃⵠ[109][Er.ⲆⲆⲆ].push(Zt(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], zh, 0));
        ᐃⵠ[307] = [];
        ᐃⵠ[307][Er.ᐃⲆΔ] = [];
        ᐃⵠ[307][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[307][Er.ᐃⲆΔ].push(Ra(Yt(Wt(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ᐃⵠ[109][Er.ᐃⲆΔ][0])));
        ᐃⵠ[307][Er.ᐃⲆΔ].push(Ra(Yt(Wt(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ᐃⵠ[109][Er.ᐃⲆΔ][1])));
        ᐃⵠ[307][Er.ⲆⲆⲆ].push(Ra(Yt(Wt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], cd), ᐃⵠ[109][Er.ⲆⲆⲆ][0])));
        ᐃⵠ[307][Er.ⲆⲆⲆ].push(Ra(Yt(Wt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], ul), ᐃⵠ[109][Er.ⲆⲆⲆ][1])));
        ᐃⵠ[307][Er.ᐃⲆΔ].push(Ra(Yt(Wt(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], fs), ᐃⵠ[109][Er.ᐃⲆΔ][2])));
        ᐃⵠ[307][Er.ᐃⲆΔ].push(Ra(Yt(Wt(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), ᐃⵠ[109][Er.ᐃⲆΔ][2])));
        ᐃⵠ[307][Er.ⲆⲆⲆ].push(Ra(Yt(Wt(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ᐃⵠ[109][Er.ⲆⲆⲆ][2])));
        ᐃⵠ[307][Er.ⲆⲆⲆ].push(Ra(Yt(Wt(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], kq), ᐃⵠ[109][Er.ⲆⲆⲆ][3])));
        ᐃⵠ[109][Er.ᐃⲆΔ][5] = Ra(ᐃⵠ[109][Er.ᐃⲆΔ][5]);
        ᐃⵠ[109][Er.ᐃⲆΔ][4] = Ra(ᐃⵠ[109][Er.ᐃⲆΔ][4]);
        ᐃⵠ[109][Er.ᐃⲆΔ][3] = Ra(ᐃⵠ[109][Er.ᐃⲆΔ][3]);
        ᐃⵠ[109][Er.ᐃⲆΔ][2] = Ra(ᐃⵠ[109][Er.ᐃⲆΔ][2]);
        ᐃⵠ[109][Er.ᐃⲆΔ][1] = Ra(ᐃⵠ[109][Er.ᐃⲆΔ][1]);
        ᐃⵠ[109][Er.ᐃⲆΔ][0] = Ra(ᐃⵠ[109][Er.ᐃⲆΔ][0]);
        ᐃⵠ[109][Er.ⲆⲆⲆ][5] = Ra(ᐃⵠ[109][Er.ⲆⲆⲆ][5]);
        ᐃⵠ[109][Er.ⲆⲆⲆ][4] = Ra(ᐃⵠ[109][Er.ⲆⲆⲆ][4]);
        ᐃⵠ[109][Er.ⲆⲆⲆ][3] = Ra(ᐃⵠ[109][Er.ⲆⲆⲆ][3]);
        ᐃⵠ[109][Er.ⲆⲆⲆ][2] = Ra(ᐃⵠ[109][Er.ⲆⲆⲆ][2]);
        ᐃⵠ[109][Er.ⲆⲆⲆ][1] = Ra(ᐃⵠ[109][Er.ⲆⲆⲆ][1]);
        ᐃⵠ[109][Er.ⲆⲆⲆ][0] = Ra(ᐃⵠ[109][Er.ⲆⲆⲆ][0]);
        ᐃⵠ[8] = [];
        ᐃⵠ[8][Er.ᐃⲆΔ] = Ra(Vb(4, Xt(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        ᐃⵠ[8][Er.ⲆⲆⲆ] = Ra(Vb(4, Xt(a * 0.75, wl, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        ᐃⵠ[1] = [];
        ᐃⵠ[1][Er.ᐃⲆΔ] = Ra(Vb(4, Xt(a * 0.75, Sh, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ᐃⵠ[1][Er.ⲆⲆⲆ] = Ra(Vb(4, Xt(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        ᐃⵠ[3] = [];
        ᐃⵠ[3][Er.ᐃⲆΔ] = Ra(Vb(4, Xt(a * 0.75, Aq, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ᐃⵠ[3][Er.ⲆⲆⲆ] = Ra(Vb(4, Xt(a * 0.75, Sh, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        ᐃⵠ[4] = [];
        ᐃⵠ[4][Er.ᐃⲆΔ] = Ra(Vb(4, Xt(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ᐃⵠ[4][Er.ⲆⲆⲆ] = Ra(Vb(4, Xt(a * 0.75, Bs, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ᐃⵠ[31] = [];
        ᐃⵠ[31][Er.ᐃⲆΔ] = Ra(Vb(4, Xt(a * 0.75, Aq, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ᐃⵠ[31][Er.ⲆⲆⲆ] = Ra(Vb(4, Xt(a * 0.75, Ha, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ᐃⵠ[9] = [];
        ᐃⵠ[9][Er.ᐃⲆΔ] = Ra(Vb(3, bu(a * 0.17, Bs, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        ᐃⵠ[9][Er.ⲆⲆⲆ] = Ra(Vb(3, bu(a * 0.17, Dj, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        ᐃⵠ[199] = [];
        ᐃⵠ[199][Er.ᐃⲆΔ] = Ra(Vb(3, mu(a * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        ᐃⵠ[199][Er.ⲆⲆⲆ] = Ra(Vb(3, mu(a * 0.42, Ai, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        ᐃⵠ[57] = [];
        ᐃⵠ[57][Er.ᐃⲆΔ] = Ra(Vb(3, au(a * 0.4, kq, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        ᐃⵠ[57][Er.ⲆⲆⲆ] = Ra(Vb(3, au(a * 0.4, Bs, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        ᐃⵠ[0] = [];
        ᐃⵠ[0][Er.ᐃⲆΔ] = Ra(Vb(3, iu(a * 0.4, P, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        ᐃⵠ[0][Er.ⲆⲆⲆ] = Ra(Vb(3, iu(a * 0.4, nk, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        ᐃⵠ[5] = [];
        ᐃⵠ[5][Er.ᐃⲆΔ] = Ra(Vb(3, ou(a * 0.4, zh, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        ᐃⵠ[5][Er.ⲆⲆⲆ] = Ra(Vb(3, ou(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        ᐃⵠ[6] = [];
        ᐃⵠ[6][Er.ᐃⲆΔ] = Ra(Vb(3, nu(a * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        ᐃⵠ[6][Er.ⲆⲆⲆ] = Ra(Vb(3, nu(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        ᐃⵠ[30] = [];
        ᐃⵠ[30][Er.ᐃⲆΔ] = Ra(Vb(3, lu(a * 0.4, Dj, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        ᐃⵠ[30][Er.ⲆⲆⲆ] = Ra(Vb(3, lu(a * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        ᐃⵠ[285] = [];
        ᐃⵠ[285][Er.ᐃⲆΔ] = [];
        ᐃⵠ[285][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[285][Er.ᐃⲆΔ].push(Ra(ec(a * 0.9, 0, ["#0d4f35"], 0)));
        ᐃⵠ[285][Er.ᐃⲆΔ].push(Ra(ec(a * 0.9, 0, ["#0d4f35"], 1)));
        ᐃⵠ[285][Er.ᐃⲆΔ].push(Ra(ec(a * 0.9, 0, ["#0d4f35"], 2)));
        ᐃⵠ[285][Er.ⲆⲆⲆ].push(Ra(ec(a * 0.9, 0, ["#053339"], 0)));
        ᐃⵠ[285][Er.ⲆⲆⲆ].push(Ra(ec(a * 0.9, 0, ["#053339"], 1)));
        ᐃⵠ[285][Er.ⲆⲆⲆ].push(Ra(ec(a * 0.9, 0, ["#053339"], 2)));
        ᐃⵠ[285][Er.ᐃⲆΔ].push(Ra(tu(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        ᐃⵠ[285][Er.ᐃⲆΔ].push(Ra(tu(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
        ᐃⵠ[285][Er.ⲆⲆⲆ].push(Ra(tu(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
        ᐃⵠ[285][Er.ⲆⲆⲆ].push(Ra(tu(a * 0.8, ["#052918", "#08491c", "#063417"])));
        ᐃⵠ[183] = [];
        ᐃⵠ[183][Er.ᐃⲆΔ] = Ra(Vb(Math.PI / 2, Xc(a * 0.25, Aq, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        ᐃⵠ[183][Er.ⲆⲆⲆ] = Ra(Vb(Math.PI / 2, Xc(a * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        ᐃⵠ[803] = [];
        ᐃⵠ[803].push(Ra(vm(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        ᐃⵠ[803].push(Ra(vm(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        ᐃⵠ[803].push(Ra(vm(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        ᐃⵠ[802] = [];
        ᐃⵠ[802][Er.ᐃⲆΔ] = [];
        ᐃⵠ[802][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[802][Er.ᐃⲆΔ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        ᐃⵠ[802][Er.ⲆⲆⲆ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        ᐃⵠ[802][Er.ᐃⲆΔ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        ᐃⵠ[802][Er.ⲆⲆⲆ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        ᐃⵠ[802][Er.ᐃⲆΔ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        ᐃⵠ[802][Er.ⲆⲆⲆ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        ᐃⵠ[802][Er.ᐃⲆΔ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        ᐃⵠ[802][Er.ⲆⲆⲆ].push(Ra(Vb(Math.PI / 2, pm(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        ᐃⵠ[110] = [];
        ᐃⵠ[110][Er.ᐃⲆΔ] = [Ra(vu(a * 1.2, gg, ["#0e3022", "#0b8052", "#077b49"]))];
        ᐃⵠ[110][Er.ⲆⲆⲆ] = [Ra(vu(a * 1.2, Aq, ["#030d14", "#084442", "#0a4049"]))];
        ᐃⵠ[623] = [];
        ᐃⵠ[623][Er.ᐃⲆΔ] = Ra(vu(a * 0.8, ul, ["#0e3022", "#68622D", "#665329"]));
        ᐃⵠ[623][Er.ⲆⲆⲆ] = Ra(vu(a * 0.8, wl, ["#030d14", "#0F3A24", "#083326"]));
        ᐃⵠ[189] = [];
        ᐃⵠ[189][Er.ᐃⲆΔ] = Ra(lp(a * 0.5, _q, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        ᐃⵠ[189][Er.ⲆⲆⲆ] = Ra(lp(a * 0.5, _q, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        ᐃⵠ[192] = [];
        ᐃⵠ[192][Er.ᐃⲆΔ] = Ra(ld(a * 0.5, gg, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        ᐃⵠ[192][Er.ⲆⲆⲆ] = Ra(ld(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        ᐃⵠ[194] = [];
        ᐃⵠ[194][Er.ᐃⲆΔ] = Ra(km(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        ᐃⵠ[194][Er.ⲆⲆⲆ] = Ra(km(a * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        ᐃⵠ[287] = [];
        ᐃⵠ[287][Er.ᐃⲆΔ] = Ra(vu(a * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        ᐃⵠ[287][Er.ⲆⲆⲆ] = Ra(vu(a * 0.8, ps, ["#030d14", "#084442", "#0a4049"]));
        ᐃⵠ[813] = [];
        ᐃⵠ[813][Er.ᐃⲆΔ] = Ra(lp(a * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        ᐃⵠ[813][Er.ⲆⲆⲆ] = Ra(lp(a * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        ᐃⵠ[839] = [];
        ᐃⵠ[839][Er.ᐃⲆΔ] = Ra(ld(a * 0.5, sn, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        ᐃⵠ[839][Er.ⲆⲆⲆ] = Ra(ld(a * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        ᐃⵠ[869] = [];
        ᐃⵠ[869][Er.ᐃⲆΔ] = Ra(km(a * 0.5, _q, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        ᐃⵠ[869][Er.ⲆⲆⲆ] = Ra(km(a * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        ᐃⵠ[854] = [];
        ᐃⵠ[854][Er.ᐃⲆΔ] = Ra(up(a * 0.45, _q, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        ᐃⵠ[854][Er.ⲆⲆⲆ] = Ra(up(a * 0.45, P, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        ᐃⵠ[859] = Ra(up(a * 0.65, F, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        ᐃⵠ[294] = [];
        ᐃⵠ[294][Er.ᐃⲆΔ] = Ra(Au(a * 1.4, 0, ["#ac222a", "#e6636a"]));
        ᐃⵠ[294][Er.ⲆⲆⲆ] = Ra(Au(a * 1.4, 0, ["#46195e", "#744188"]));
        ᐃⵠ[288] = [];
        ᐃⵠ[288][Er.ᐃⲆΔ] = Ra($d(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        ᐃⵠ[288][Er.ⲆⲆⲆ] = Ra($d(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        ᐃⵠ[118] = [];
        ᐃⵠ[118][Er.ᐃⲆΔ] = Ra(Gt(a * 0.9, 0, ["#4d2d14", "#432516"]));
        ᐃⵠ[118][Er.ⲆⲆⲆ] = Ra(Gt(a * 0.9, 0, ["#282404", "#0a0a01"]));
        ᐃⵠ[113] = [];
        ᐃⵠ[113][Er.ᐃⲆΔ] = Ra(Jt(a * 0.9, 0, ["#4d2d14", "#432516"]));
        ᐃⵠ[113][Er.ⲆⲆⲆ] = Ra(Jt(a * 0.9, 0, ["#282404", "#0a0a01"]));
        ᐃⵠ[289] = [];
        ᐃⵠ[289][Er.ᐃⲆΔ] = Ra(Lt(a * 0.9, 0, ["#efd435"]));
        ᐃⵠ[289][Er.ⲆⲆⲆ] = Ra(Lt(a * 0.9, 0, ["#fffabb"]));
        ᐃⵠ[282] = [];
        ᐃⵠ[282][Er.ᐃⲆΔ] = Ra(It(a * 0.9, 0, ["#efd435"]));
        ᐃⵠ[282][Er.ⲆⲆⲆ] = Ra(It(a * 0.9, 0, ["#fffabb"]));
        ᐃⵠ[816] = [];
        ᐃⵠ[816][Er.ᐃⲆΔ] = Ra(Lt(a * 0.9, 0, ["#efd435"]));
        ᐃⵠ[816][Er.ⲆⲆⲆ] = Ra(Lt(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
        ᐃⵠ[817] = [];
        ᐃⵠ[817][Er.ᐃⲆΔ] = Ra(It(a * 0.9, 0, ["#efd435"]));
        ᐃⵠ[817][Er.ⲆⲆⲆ] = Ra(It(a * 0.9, 0, ["#ff5704"]));
        ᐃⵠ[324] = Ra(zd(a, "#ffffff"));
        ᐃⵠ[301] = Ra(zd(a * 1.5, "#ffffff"));
        ᐃⵠ[306] = Ra(Cu(a, "Your score:", a * 15, "#FFF"));
        ᐃⵠ[655] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            Ub(d, a * 119.5, a * 140.125, a * 19);
            qb(d, br, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            qb(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            qb(d, undefined, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            qb(d, undefined, b[3], a * 10);
            Ub(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            qb(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            qb(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            qb(d, undefined, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            Hb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            qb(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            Hb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            qb(d, b[9]);
            return c;
        }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        ᐃⵠ[656] = Mh.ⲆⵠᐃᐃⲆⵠⵠ;
        ᐃⵠ[135] = [];
        ᐃⵠ[135][Er.ᐃⲆΔ] = Ra(Wd(a * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃⵠ[135][Er.ⲆⲆⲆ] = Ra(Wd(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃⵠ[641] = [];
        ᐃⵠ[641][Er.ᐃⲆΔ] = Ra(Nd(a * 2, Dr, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃⵠ[641][Er.ⲆⲆⲆ] = Ra(Nd(a * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃⵠ[642] = [];
        ᐃⵠ[642][Er.ᐃⲆΔ] = Ra(Hd(a * 1.5, Dj, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃⵠ[642][Er.ⲆⲆⲆ] = Ra(Hd(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃⵠ[134] = [];
        ᐃⵠ[134][Er.ᐃⲆΔ] = Ra(Rd(a * 2.2, 0, ["#A89F67", "#9E8456"]));
        ᐃⵠ[134][Er.ⲆⲆⲆ] = Ra(Rd(a * 2.2, 0, ["#0B4049", "#08383D"]));
        ᐃⵠ[638] = [];
        ᐃⵠ[638][Er.ᐃⲆΔ] = Ra(Rd(a * 2.2, 0, ["#68622D", "#665329"]));
        ᐃⵠ[638][Er.ⲆⲆⲆ] = Ra(Rd(a * 2.2, 0, ["#0F3A24", "#083326"]));
        ᐃⵠ[321] = [];
        ᐃⵠ[321][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#A89F67", "#9E8456"]));
        ᐃⵠ[321][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
        ᐃⵠ[811] = [];
        ᐃⵠ[811][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#c67933", "#b17238"]));
        ᐃⵠ[811][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃⵠ[984] = [];
        ᐃⵠ[984][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
        ᐃⵠ[984][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#032d29", "#044640"]));
        ᐃⵠ[837] = [];
        ᐃⵠ[837][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        ᐃⵠ[837][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#1c6161", "#07413f"]));
        ᐃⵠ[848] = [];
        ᐃⵠ[848][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#328a56", "#449573"]));
        ᐃⵠ[848][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃⵠ[952] = [];
        ᐃⵠ[952][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
        ᐃⵠ[952][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃⵠ[962] = [];
        ᐃⵠ[962][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#b22419", "#99110e"]));
        ᐃⵠ[962][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#04323c", "#03222b"]));
        ᐃⵠ[969] = [];
        ᐃⵠ[969][Er.ᐃⲆΔ] = Ra(su(a * 0.8, 0, ["#13a56d", "#098a58"]));
        ᐃⵠ[969][Er.ⲆⲆⲆ] = Ra(su(a * 0.8, 0, ["#043c37", "#032b23"]));
        ᐃⵠ[657] = Zd(1, [{
            f: Rd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃⵠ[723] = Zd(1, [{
            f: Jt,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃⵠ[724] = Zd(1, [{
            f: gp,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃⵠ[334] = Zd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃⵠ[115] = [];
        ᐃⵠ[115][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
        ᐃⵠ[115][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#084442", "#125e5a"]));
        ᐃⵠ[132] = [];
        ᐃⵠ[132][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#9E8456", "#A89F67"]));
        ᐃⵠ[132][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        ᐃⵠ[668] = [];
        ᐃⵠ[668][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#665329", "#68622D"]));
        ᐃⵠ[668][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#083326", "#0F3A24"]));
        ᐃⵠ[188] = [];
        ᐃⵠ[188][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#c67933", "#ec952d"]));
        ᐃⵠ[188][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#0e6553", "#094437"]));
        ᐃⵠ[210] = [];
        ᐃⵠ[210][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#375809", "#4b770e"]));
        ᐃⵠ[210][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
        ᐃⵠ[985] = [];
        ᐃⵠ[985][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#585809", "#72770e"]));
        ᐃⵠ[985][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#295209", "#305d0d"]));
        ᐃⵠ[191] = [];
        ᐃⵠ[191][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
        ᐃⵠ[191][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#126366", "#0d484b"]));
        ᐃⵠ[193] = [];
        ᐃⵠ[193][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#3f8662", "#30915d"]));
        ᐃⵠ[193][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#0e6553", "#094437"]));
        ᐃⵠ[812] = [];
        ᐃⵠ[812][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#c79153", "#dfa868"]));
        ᐃⵠ[812][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#073927", "#075040"]));
        ᐃⵠ[838] = [];
        ᐃⵠ[838][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#768b5b", "#819984"]));
        ᐃⵠ[838][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#0c4540", "#0e5153"]));
        ᐃⵠ[849] = [];
        ᐃⵠ[849][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#567465", "#627c6e"]));
        ᐃⵠ[849][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#073927", "#075040"]));
        ᐃⵠ[204] = [];
        ᐃⵠ[204][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#996b3a", "#bf956b"]));
        ᐃⵠ[204][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#0e6553", "#094437"]));
        ᐃⵠ[953] = [];
        ᐃⵠ[953][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#7a634a", "#a68f77"]));
        ᐃⵠ[953][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#1e4d43", "#113c32"]));
        ᐃⵠ[206] = [];
        ᐃⵠ[206][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#99403c", "#bc796c"]));
        ᐃⵠ[206][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#1e434d", "#11303c"]));
        ᐃⵠ[963] = [];
        ᐃⵠ[963][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#88504e", "#b3857c"]));
        ᐃⵠ[963][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#253b41", "#162930"]));
        ᐃⵠ[208] = [];
        ᐃⵠ[208][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#0f8870", "#23af93"]));
        ᐃⵠ[208][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#032829", "#083233"]));
        ᐃⵠ[970] = [];
        ᐃⵠ[970][Er.ᐃⲆΔ] = Ra(ad(a * 0.9, 0, ["#618a20", "#84a74e"]));
        ᐃⵠ[970][Er.ⲆⲆⲆ] = Ra(ad(a * 0.9, 0, ["#1f4632", "#335d47"]));
        ᐃⵠ[114] = [];
        ᐃⵠ[114][Er.ᐃⲆΔ] = Ra(Pd(a * 1.2, xb, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        ᐃⵠ[114][Er.ⲆⲆⲆ] = Ra(Pd(a * 1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        ᐃⵠ[162] = [];
        ᐃⵠ[162][Er.ᐃⲆΔ] = Ra(lc(a * 1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ᐃⵠ[162][Er.ⲆⲆⲆ] = Ra(lc(a * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃⵠ[165] = [];
        ᐃⵠ[165][Er.ᐃⲆΔ] = Ra(mc(a * 1, Ls, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃⵠ[165][Er.ⲆⲆⲆ] = Ra(mc(a * 1, Dj, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃⵠ[122] = [];
        ᐃⵠ[122][Er.ᐃⲆΔ] = Ra(uc(a * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃⵠ[122][Er.ⲆⲆⲆ] = Ra(uc(a * 1, Ls, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃⵠ[163] = [];
        ᐃⵠ[163][Er.ᐃⲆΔ] = Ra(uc(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ᐃⵠ[163][Er.ⲆⲆⲆ] = Ra(uc(a * 1, sn, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ᐃⵠ[164] = [];
        ᐃⵠ[164][Er.ᐃⲆΔ] = Ra(cc(a * 1, Aq, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ᐃⵠ[164][Er.ⲆⲆⲆ] = Ra(cc(a * 1, Bs, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ᐃⵠ[160] = [];
        ᐃⵠ[160][Er.ᐃⲆΔ] = Ra(qc(a * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ᐃⵠ[160][Er.ⲆⲆⲆ] = Ra(qc(a * 0.8, wl, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃⵠ[169] = [];
        ᐃⵠ[169][Er.ᐃⲆΔ] = Ra(jc(a * 0.8, Aq, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ᐃⵠ[169][Er.ⲆⲆⲆ] = Ra(jc(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ᐃⵠ[170] = [];
        ᐃⵠ[170][Er.ᐃⲆΔ] = Ra(Rc(a * 0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃⵠ[170][Er.ⲆⲆⲆ] = Ra(Rc(a * 0.8, Sh, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃⵠ[168] = [];
        ᐃⵠ[168][Er.ᐃⲆΔ] = Ra(Nc(a * 0.8, Dj, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ᐃⵠ[168][Er.ⲆⲆⲆ] = Ra(Nc(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ᐃⵠ[123] = [];
        ᐃⵠ[123][Er.ᐃⲆΔ] = Ra(Nc(a * 0.8, Ha, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃⵠ[123][Er.ⲆⲆⲆ] = Ra(Nc(a * 0.8, Dr, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃⵠ[166] = [];
        ᐃⵠ[166][Er.ᐃⲆΔ] = Ra(bc(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        ᐃⵠ[166][Er.ⲆⲆⲆ] = Ra(bc(a * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃⵠ[336] = [];
        ᐃⵠ[336][Er.ᐃⲆΔ] = Ra(bc(a * 1, jt, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃⵠ[336][Er.ⲆⲆⲆ] = Ra(bc(a * 1, $n, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        ᐃⵠ[171] = [];
        ᐃⵠ[171][Er.ᐃⲆΔ] = Ra(gc(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        ᐃⵠ[171][Er.ⲆⲆⲆ] = Ra(gc(a * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        ᐃⵠ[373] = [];
        ᐃⵠ[373][Er.ᐃⲆΔ] = Ra(gc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃⵠ[373][Er.ⲆⲆⲆ] = Ra(gc(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃⵠ[124] = [];
        ᐃⵠ[124][Er.ᐃⲆΔ] = Ra(gc(a * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃⵠ[124][Er.ⲆⲆⲆ] = Ra(gc(a * 1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃⵠ[500] = [];
        ᐃⵠ[500][Er.ᐃⲆΔ] = Ra(gc(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃⵠ[500][Er.ⲆⲆⲆ] = Ra(gc(a * 1, kk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃⵠ[172] = [];
        ᐃⵠ[172][Er.ᐃⲆΔ] = Ra(hc(a * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        ᐃⵠ[172][Er.ⲆⲆⲆ] = Ra(hc(a * 1.5, sn, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        ᐃⵠ[376] = [];
        ᐃⵠ[376][Er.ᐃⲆΔ] = Ra(hc(a * 1, Gh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃⵠ[376][Er.ⲆⲆⲆ] = Ra(hc(a * 1, Gh, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃⵠ[173] = [];
        ᐃⵠ[173][Er.ᐃⲆΔ] = Ra(Pc(a * 1.5, _q, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃⵠ[173][Er.ⲆⲆⲆ] = Ra(Pc(a * 1.5, Aq, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃⵠ[379] = [];
        ᐃⵠ[379][Er.ᐃⲆΔ] = Ra(Pc(a * 1, ws, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃⵠ[379][Er.ⲆⲆⲆ] = Ra(Pc(a * 1, cb, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃⵠ[167] = [];
        ᐃⵠ[167][Er.ᐃⲆΔ] = Ra(Qc(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ᐃⵠ[167][Er.ⲆⲆⲆ] = Ra(Qc(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        ᐃⵠ[691] = [];
        ᐃⵠ[691][Er.ᐃⲆΔ] = Ra(cp(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        ᐃⵠ[691][Er.ⲆⲆⲆ] = Ra(cp(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        ᐃⵠ[264] = [];
        ᐃⵠ[264][Er.ᐃⲆΔ] = Ra(wd(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        ᐃⵠ[264][Er.ⲆⲆⲆ] = Ra(wd(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        ᐃⵠ[260] = [];
        ᐃⵠ[260][Er.ᐃⲆΔ] = Ra(Vb(Math.PI, Ed(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        ᐃⵠ[260][Er.ⲆⲆⲆ] = Ra(Vb(Math.PI, Ed(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        ᐃⵠ[266] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            qb(d, br, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            qb(d, undefined, b[0], 4);
            return c;
        }(a * 0.6, ["#FFFFFF"]));
        ᐃⵠ[299] = [];
        ᐃⵠ[299][Er.ᐃⲆΔ] = Ra(kd(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        ᐃⵠ[299][Er.ⲆⲆⲆ] = Ra(kd(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        ᐃⵠ[10] = [];
        ᐃⵠ[10][Er.ᐃⲆΔ] = Ra(Sc(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        ᐃⵠ[10][Er.ⲆⲆⲆ] = Ra(Sc(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        ᐃⵠ[11] = [];
        ᐃⵠ[11][Er.ᐃⲆΔ] = Ra(Cc(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        ᐃⵠ[11][Er.ⲆⲆⲆ] = Ra(Cc(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        ᐃⵠ[40] = [];
        ᐃⵠ[40][Er.ᐃⲆΔ] = Ra(Fc(a * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        ᐃⵠ[40][Er.ⲆⲆⲆ] = Ra(Fc(a * 0.63, Bs, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        ᐃⵠ[41] = [];
        ᐃⵠ[41][Er.ᐃⲆΔ] = Ra(Tt(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        ᐃⵠ[41][Er.ⲆⲆⲆ] = Ra(Tt(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        ᐃⵠ[42] = [];
        ᐃⵠ[42][Er.ᐃⲆΔ] = Ra(Mt(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        ᐃⵠ[42][Er.ⲆⲆⲆ] = Ra(Mt(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        ᐃⵠ[716] = [];
        ᐃⵠ[716][Er.ᐃⲆΔ] = Ra(Fm(a * 0.42, Sh, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        ᐃⵠ[716][Er.ⲆⲆⲆ] = Ra(Fm(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        ᐃⵠ[720] = [];
        ᐃⵠ[720][Er.ᐃⲆΔ] = Ra(Jp(a * 0.9, ["#e4c027"]));
        ᐃⵠ[720][Er.ⲆⲆⲆ] = Ra(Jp(a * 0.9, ["#D8E57F"]));
        ᐃⵠ[144] = [];
        ᐃⵠ[144][Er.ᐃⲆΔ] = Ra(Im(a * 0.42, Bs, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        ᐃⵠ[144][Er.ⲆⲆⲆ] = Ra(Im(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        ᐃⵠ[722] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Hb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            qb(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Hb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            qb(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            qb(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            qb(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            qb(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            qb(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            Hb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            qb(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            Hb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            qb(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            Hb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            qb(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            qb(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            qb(d, b[3], b[3], a * 10);
            return c;
        }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        ᐃⵠ[407] = [];
        ᐃⵠ[407][Er.ᐃⲆΔ] = Ra(dc(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        ᐃⵠ[407][Er.ⲆⲆⲆ] = Ra(dc(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        ᐃⵠ[119] = [];
        ᐃⵠ[119][Er.ᐃⲆΔ] = Ra(rc(a * 0.5, gg, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        ᐃⵠ[119][Er.ⲆⲆⲆ] = Ra(rc(a * 0.5, nk, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        ᐃⵠ[411] = Ra(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Hb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            qb(e, c[0], c[1], 4);
            return d;
        }(a * 0.8, 0, ["#5f6061", "#939393"]));
        ᐃⵠ[412] = Zd(1, [{
            f: Jt,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        ᐃⵠ[198] = [];
        ᐃⵠ[198][Er.ᐃⲆΔ] = Ra(xc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ᐃⵠ[198][Er.ⲆⲆⲆ] = Ra(xc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ᐃⵠ[913] = [];
        ᐃⵠ[913][Er.ᐃⲆΔ] = Ra(wc(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ᐃⵠ[913][Er.ⲆⲆⲆ] = Ra(wc(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ᐃⵠ[18] = [];
        ᐃⵠ[18][Er.ᐃⲆΔ] = Ra(Vb(3, zc(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        ᐃⵠ[18][Er.ⲆⲆⲆ] = Ra(Vb(3, zc(a * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        ᐃⵠ[12] = [];
        ᐃⵠ[12][Er.ᐃⲆΔ] = Ra(Vb(3, Jc(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        ᐃⵠ[12][Er.ⲆⲆⲆ] = Ra(Vb(3, Jc(a * 0.7, _q, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        ᐃⵠ[13] = [];
        ᐃⵠ[13][Er.ᐃⲆΔ] = Ra(Vb(3, yc(a * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        ᐃⵠ[13][Er.ⲆⲆⲆ] = Ra(Vb(3, yc(a * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        ᐃⵠ[14] = [];
        ᐃⵠ[14][Er.ᐃⲆΔ] = Ra(Vb(3, Tc(a * 0.67, zh, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        ᐃⵠ[14][Er.ⲆⲆⲆ] = Ra(Vb(3, Tc(a * 0.67, Aq, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        ᐃⵠ[15] = [];
        ᐃⵠ[15][Er.ᐃⲆΔ] = Ra(Vb(3, Ac(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        ᐃⵠ[15][Er.ⲆⲆⲆ] = Ra(Vb(3, Ac(a * 0.67, Ha, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        ᐃⵠ[33] = [];
        ᐃⵠ[33][Er.ᐃⲆΔ] = Ra(Vb(3, Bc(a * 0.67, xb, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        ᐃⵠ[33][Er.ⲆⲆⲆ] = Ra(Vb(3, Bc(a * 0.67, zh, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        ᐃⵠ[16] = [];
        ᐃⵠ[16][Er.ᐃⲆΔ] = Ra(Vb(3, Ec(a * 1, Aq, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        ᐃⵠ[16][Er.ⲆⲆⲆ] = Ra(Vb(3, Ec(a * 1, F, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        ᐃⵠ[35] = [];
        ᐃⵠ[35][Er.ᐃⲆΔ] = Ra(Vb(3, Gc(a * 1, _q, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ᐃⵠ[35][Er.ⲆⲆⲆ] = Ra(Vb(3, Gc(a * 1, ps, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        ᐃⵠ[55] = [];
        ᐃⵠ[55][Er.ᐃⲆΔ] = Ra(Vb(3, zp(a * 0.5, zh, ["#0d1b1c", "#939393", "#5f6061"])));
        ᐃⵠ[55][Er.ⲆⲆⲆ] = Ra(Vb(3, zp(a * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
        ᐃⵠ[45] = [];
        ᐃⵠ[45][Er.ᐃⲆΔ] = Ra(Vb(3, Lm(a * 1, P, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        ᐃⵠ[45][Er.ⲆⲆⲆ] = Ra(Vb(3, Lm(a * 1, Ls, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        ᐃⵠ[36] = [];
        ᐃⵠ[36][Er.ᐃⲆΔ] = Ra(Vb(3, Gc(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ᐃⵠ[36][Er.ⲆⲆⲆ] = Ra(Vb(3, Gc(a * 1, Dj, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        ᐃⵠ[37] = [];
        ᐃⵠ[37][Er.ᐃⲆΔ] = Ra(Vb(3, Gc(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ᐃⵠ[37][Er.ⲆⲆⲆ] = Ra(Vb(3, Gc(a * 1, Ha, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ᐃⵠ[38] = [];
        ᐃⵠ[38][Er.ᐃⲆΔ] = Ra(Vb(3, Gc(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ᐃⵠ[38][Er.ⲆⲆⲆ] = Ra(Vb(3, Gc(a * 1, F, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ᐃⵠ[148] = [];
        ᐃⵠ[148][Er.ᐃⲆΔ] = Ra(Mm(a * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        ᐃⵠ[148][Er.ⲆⲆⲆ] = Ra(Mm(a * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        ᐃⵠ[536] = [];
        ᐃⵠ[536].push(Ra(Mm(a * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        ᐃⵠ[536].push(Ra(Mm(a * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        ᐃⵠ[536].push(Ra(Mm(a * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        ᐃⵠ[538] = [];
        ᐃⵠ[538].push(ᐃⵠ[536][0]);
        ᐃⵠ[538].push(ᐃⵠ[536][0]);
        ᐃⵠ[538].push(ᐃⵠ[536][0]);
        ᐃⵠ[158] = [];
        ᐃⵠ[158][Er.ᐃⲆΔ] = Ra(tp(a * 0.06, false, ["#141414", "#c4a23a", "#816511"]));
        ᐃⵠ[158][Er.ⲆⲆⲆ] = Ra(tp(a * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
        ᐃⵠ[535] = [];
        ᐃⵠ[535].push(Ra(tp(a * 0.08, fs, ["#141414", "#c4a23a", "#816511"])));
        ᐃⵠ[535].push(Ra(tp(a * 0.08, ws, ["#141414", "#e2bd4e", "#a38018"])));
        ᐃⵠ[535].push(Ra(tp(a * 0.08, Xg, ["#141414", "#b0902e", "#634d09"])));
        ᐃⵠ[149] = Zd(1.5, [{
            f: xp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ᐃⵠ[526] = [];
        ᐃⵠ[526][Er.ᐃⲆΔ] = Ra(Nm(a * 0.8, 0, ["#347f93", "#54a4ba"]));
        ᐃⵠ[526][Er.ⲆⲆⲆ] = Ra(Nm(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
        ᐃⵠ[527] = [];
        ᐃⵠ[527][Er.ᐃⲆΔ] = Ra(ip(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        ᐃⵠ[527][Er.ⲆⲆⲆ] = Ra(ip(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        ᐃⵠ[528] = [];
        ᐃⵠ[528][Er.ᐃⲆΔ] = Ra(Tp(a * 0.8, Aq, ["#a9e4ed", "#86d4e0"]));
        ᐃⵠ[528][Er.ⲆⲆⲆ] = Ra(Tp(a * 0.8, true, ["#83ddd4", "#485e66"]));
        ᐃⵠ[151] = [];
        ᐃⵠ[151][Er.ᐃⲆΔ] = Ra(np(a * 0.8, ps, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        ᐃⵠ[151][Er.ⲆⲆⲆ] = Ra(np(a * 0.8, Dj, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        ᐃⵠ[1192] = [];
        ᐃⵠ[1192][Er.ᐃⲆΔ] = Mh.ΔⲆⲆΔᐃⲆⲆ;
        ᐃⵠ[1192][Er.ⲆⲆⲆ] = Mh.ⲆⲆΔΔᐃⵠΔ;
        ᐃⵠ[1193] = [];
        ᐃⵠ[1193][Er.ᐃⲆΔ] = Mh.ΔᐃⲆΔⲆⵠᐃ;
        ᐃⵠ[1193][Er.ⲆⲆⲆ] = Mh.ⲆᐃⵠΔΔΔⲆ;
        ᐃⵠ[1194] = [];
        ᐃⵠ[1194][Er.ᐃⲆΔ] = Mh.ⲆΔᐃⵠΔΔᐃ;
        ᐃⵠ[1194][Er.ⲆⲆⲆ] = Mh.ΔᐃⲆΔᐃᐃⲆ;
        ᐃⵠ[152] = [];
        ᐃⵠ[152][Er.ᐃⲆΔ] = Mh.ⵠⲆΔᐃᐃⵠⵠ;
        ᐃⵠ[152][Er.ⲆⲆⲆ] = Mh.ⵠΔᐃⵠΔⲆⲆ;
        ᐃⵠ[1198] = [];
        ᐃⵠ[1198][Er.ᐃⲆΔ] = Mh.ΔⲆⲆⲆⲆⵠⲆ;
        ᐃⵠ[1198][Er.ⲆⲆⲆ] = Mh.ΔᐃⵠΔΔⵠⲆ;
        ᐃⵠ[153] = [];
        ᐃⵠ[153][Er.ᐃⲆΔ] = Mh.ⵠⵠⲆⵠᐃⵠᐃ;
        ᐃⵠ[153][Er.ⲆⲆⲆ] = Mh.ΔΔⲆΔⵠⲆⵠ;
        ᐃⵠ[1202] = [];
        ᐃⵠ[1202][Er.ᐃⲆΔ] = Mh.ᐃΔⲆⵠⵠᐃⲆ;
        ᐃⵠ[1202][Er.ⲆⲆⲆ] = Mh.ⵠᐃᐃᐃⵠᐃⵠ;
        ᐃⵠ[154] = [];
        ᐃⵠ[154][Er.ᐃⲆΔ] = Mh.ⲆⵠⵠⲆⵠᐃⵠ;
        ᐃⵠ[154][Er.ⲆⲆⲆ] = Mh.ⲆⵠᐃᐃⵠΔΔ;
        ᐃⵠ[1206] = [];
        ᐃⵠ[1206][Er.ᐃⲆΔ] = Mh.ΔⲆΔⲆΔⵠᐃ;
        ᐃⵠ[1206][Er.ⲆⲆⲆ] = Mh.ᐃΔΔⲆⵠΔΔ;
        ᐃⵠ[155] = [];
        ᐃⵠ[155][Er.ᐃⲆΔ] = Mh.ΔᐃⲆⵠⲆⲆΔ;
        ᐃⵠ[155][Er.ⲆⲆⲆ] = Mh.ΔΔⲆΔΔⵠⵠ;
        ᐃⵠ[1210] = [];
        ᐃⵠ[1210][Er.ᐃⲆΔ] = Mh.ⲆⲆⲆΔⵠⲆⲆ;
        ᐃⵠ[1210][Er.ⲆⲆⲆ] = Mh.ᐃᐃΔᐃᐃᐃⲆ;
        ᐃⵠ[156] = [];
        ᐃⵠ[156][Er.ᐃⲆΔ] = Mh.ⵠⵠⵠⲆᐃᐃΔ;
        ᐃⵠ[156][Er.ⲆⲆⲆ] = Mh.ᐃⵠⵠΔᐃᐃᐃ;
        ᐃⵠ[1214] = [];
        ᐃⵠ[1214][Er.ᐃⲆΔ] = Mh.ΔⵠⵠⵠⵠΔᐃ;
        ᐃⵠ[1214][Er.ⲆⲆⲆ] = Mh.ᐃⵠΔⵠⵠᐃⵠ;
        ᐃⵠ[157] = [];
        ᐃⵠ[157][Er.ᐃⲆΔ] = Mh.ⵠⲆΔⵠⵠⵠᐃ;
        ᐃⵠ[157][Er.ⲆⲆⲆ] = Mh.ⲆⲆⵠΔᐃΔⵠ;
        ᐃⵠ[245] = [];
        ᐃⵠ[245][Er.ᐃⲆΔ] = Mh.ΔΔΔⲆᐃⲆΔ;
        ᐃⵠ[245][Er.ⲆⲆⲆ] = Mh.ⵠⲆⵠΔⲆΔⵠ;
        ᐃⵠ[246] = Mh.ⲆⲆΔΔΔⲆᐃ;
        ᐃⵠ[159] = [];
        ᐃⵠ[159][Er.ᐃⲆΔ] = Ra(Dm(a * 0.75, ps, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        ᐃⵠ[159][Er.ⲆⲆⲆ] = Ra(Dm(a * 0.75, ps, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        ᐃⵠ[558] = Ra(Ap(a * 0.3, ["#092813", "#1f773d"], 0));
        ᐃⵠ[559] = Ra(Ap(a * 0.3, ["#092813", "#1f773d"], 1));
        ᐃⵠ[885] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            qb(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            qb(d, b[1]);
            return c;
        }(a * 0.6, ["#092813", "#1f773d"]));
        ᐃⵠ[556] = [];
        ᐃⵠ[556].push(Ra(ep(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        ᐃⵠ[556].push(Ra(ep(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        ᐃⵠ[556].push(Ra(ep(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        ᐃⵠ[560] = [];
        var c = Ra(ep(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        ᐃⵠ[560].push(c);
        ᐃⵠ[560].push(c);
        ᐃⵠ[560].push(c);
        ᐃⵠ[557] = [];
        ᐃⵠ[557].push(Ra(ep(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        ᐃⵠ[557].push(Ra(ep(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        ᐃⵠ[557].push(Ra(ep(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        ᐃⵠ[681] = Ra(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                Xb(e, 3, b * 18, b * 4);
                qb(e, c[0]);
                e.restore();
            }
            e.restore();
            Ub(e, 0, 0, b * 40);
            qb(e, Ts, c[0], b * 6);
            Ub(e, 0, 0, b * 20);
            qb(e, c[0]);
            return d;
        }(a * 0.3, ["#FFFFFF"]));
        ᐃⵠ[794] = Ra(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            Ub(e, a, h, b * 40);
            qb(e, hg, c[0], b * 7);
            Ub(e, a, h, b * 30);
            qb(e, oh, c[0], b * 7);
            Ub(e, a, h, b * 20);
            qb(e, c[0]);
            return d;
        }(a * 0.3, ["#FFFFFF"]));
        ᐃⵠ[562] = Ra(Ap(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        ᐃⵠ[667] = Ra(Vb(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            Hb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            qb(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            qb(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            qb(d, b[0], b[0], a * 15);
            return c;
        }(a * 0.2, ["#FFFFFF"])));
        ᐃⵠ[43] = [];
        ᐃⵠ[43][Er.ᐃⲆΔ] = Ra(_m(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        ᐃⵠ[43][Er.ⲆⲆⲆ] = Ra(_m(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        ᐃⵠ[561] = [];
        ᐃⵠ[561].push(Ra(ep(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        ᐃⵠ[561].push(Ra(ep(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        ᐃⵠ[561].push(Ra(ep(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        ᐃⵠ[83] = [];
        ᐃⵠ[83][Er.ᐃⲆΔ] = Ra(sp(a * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
        ᐃⵠ[83][Er.ⲆⲆⲆ] = Ra(sp(a * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
        ᐃⵠ[85] = [];
        ᐃⵠ[85][Er.ᐃⲆΔ] = Ra(yp(a * 0.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        ᐃⵠ[85][Er.ⲆⲆⲆ] = Ra(yp(a * 0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        ᐃⵠ[86] = [];
        ᐃⵠ[86][Er.ᐃⲆΔ] = Ra(Wm(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        ᐃⵠ[86][Er.ⲆⲆⲆ] = Ra(Wm(a * 0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        ᐃⵠ[84] = [];
        ᐃⵠ[84][Er.ᐃⲆΔ] = Ra(Wm(a * 0.55, _q, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        ᐃⵠ[84][Er.ⲆⲆⲆ] = Ra(Wm(a * 0.55, xb, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        ᐃⵠ[77] = [];
        ᐃⵠ[77][Er.ᐃⲆΔ] = Ra(Jm(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        ᐃⵠ[77][Er.ⲆⲆⲆ] = Ra(Jm(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        ᐃⵠ[78] = [];
        ᐃⵠ[78][Er.ᐃⲆΔ] = Ra(Jm(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        ᐃⵠ[78][Er.ⲆⲆⲆ] = Ra(Jm(a * 0.2, Dr, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        ᐃⵠ[79] = [];
        ᐃⵠ[79][Er.ᐃⲆΔ] = Ra(Jm(a * 0.2, Bs, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        ᐃⵠ[79][Er.ⲆⲆⲆ] = Ra(Jm(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        ᐃⵠ[61] = [];
        ᐃⵠ[61][Er.ᐃⲆΔ] = Ra(fc(a * 0.24, Ai, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        ᐃⵠ[61][Er.ⲆⲆⲆ] = Ra(fc(a * 0.24, ps, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        ᐃⵠ[59] = [];
        ᐃⵠ[59][Er.ᐃⲆΔ] = Ra(mm(a * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        ᐃⵠ[59][Er.ⲆⲆⲆ] = Ra(mm(a * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        ᐃⵠ[62] = [];
        ᐃⵠ[62][Er.ᐃⲆΔ] = Ra(Vb(3, Ym(a * 0.9, P, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        ᐃⵠ[62][Er.ⲆⲆⲆ] = Ra(Vb(3, Ym(a * 0.9, Ha, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        ᐃⵠ[750] = [];
        ᐃⵠ[750][Er.ᐃⲆΔ] = Ra(Vb(3, Ym(a * 1, true, [undefined, undefined, jj, "#c8efef", "#c8efef"])));
        ᐃⵠ[750][Er.ⲆⲆⲆ] = Ra(Vb(3, Ym(a * 1, kq, [undefined, undefined, _t, "#87d2e6", "#87d2e6"])));
        ᐃⵠ[755] = [];
        ᐃⵠ[755].push(Ra(Sm(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        ᐃⵠ[755].push(Ra(Sm(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        ᐃⵠ[755].push(Ra(Sm(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        ᐃⵠ[795] = [];
        ᐃⵠ[795].push(Ra(fp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        ᐃⵠ[795].push(Ra(fp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ᐃⵠ[795].push(Ra(fp(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ᐃⵠ[782] = [];
        ᐃⵠ[782].push(Ra($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        ᐃⵠ[782].push(Ra($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        ᐃⵠ[782].push(Ra($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        ᐃⵠ[783] = [];
        ᐃⵠ[783].push(Ra($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        ᐃⵠ[783].push(Ra($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        ᐃⵠ[783].push(Ra($t(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        ᐃⵠ[46] = [];
        ᐃⵠ[46][Er.ᐃⲆΔ] = Ra(Vb(3, mp(a * 0.7, Ai, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        ᐃⵠ[46][Er.ⲆⲆⲆ] = Ra(Vb(3, mp(a * 0.7, P, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        ᐃⵠ[50] = [];
        ᐃⵠ[50][Er.ᐃⲆΔ] = Ra(Vb(3, mp(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        ᐃⵠ[50][Er.ⲆⲆⲆ] = Ra(Vb(3, mp(a * 0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        ᐃⵠ[51] = [];
        ᐃⵠ[51][Er.ᐃⲆΔ] = Ra(Vb(3, mp(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        ᐃⵠ[51][Er.ⲆⲆⲆ] = Ra(Vb(3, mp(a * 0.7, xb, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        ᐃⵠ[52] = [];
        ᐃⵠ[52][Er.ᐃⲆΔ] = Ra(Vb(3, mp(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        ᐃⵠ[52][Er.ⲆⲆⲆ] = Ra(Vb(3, mp(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        ᐃⵠ[592] = [];
        ᐃⵠ[592].push(Ra(xm(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        ᐃⵠ[592].push(Ra(xm(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        ᐃⵠ[592].push(Ra(xm(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        ᐃⵠ[326] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            qb(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            qb(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            qb(d, b[0], b[0], a * 2);
            return c;
        }(a * 1.1, ["#BB0000"]));
        ᐃⵠ[333] = Ra(Vb(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            Ub(d, a * 213.5, a * 256.75, a * 75);
            qb(d, b);
            Ub(d, a * 213.5, a * 175.75, a * 25);
            qb(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(a * 0.9, "#BB0000")));
        ᐃⵠ[23] = [];
        ᐃⵠ[23][Er.ᐃⲆΔ] = Ra(Em(a * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        ᐃⵠ[23][Er.ⲆⲆⲆ] = Ra(Em(a * 0.55, P, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        ᐃⵠ[58] = [];
        ᐃⵠ[58][Er.ᐃⲆΔ] = Ra(Xm(a * 0.55, Aq, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        ᐃⵠ[58][Er.ⲆⲆⲆ] = Ra(Xm(a * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        ᐃⵠ[25] = [];
        ᐃⵠ[25][Er.ᐃⲆΔ] = Ra(hp(a * 0.6, Dr, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        ᐃⵠ[25][Er.ⲆⲆⲆ] = Ra(hp(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        ᐃⵠ[26] = [];
        ᐃⵠ[26][Er.ᐃⲆΔ] = Ra(Qm(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        ᐃⵠ[26][Er.ⲆⲆⲆ] = Ra(Qm(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        ᐃⵠ[27] = [];
        ᐃⵠ[27][Er.ᐃⲆΔ] = Ra(rp(a * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        ᐃⵠ[27][Er.ⲆⲆⲆ] = Ra(rp(a * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        ᐃⵠ[413] = [];
        ᐃⵠ[413][Er.ᐃⲆΔ] = [];
        ᐃⵠ[413][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[413][Er.ᐃⲆΔ].push(Ra(lm(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        ᐃⵠ[413][Er.ᐃⲆΔ].push(Ra($c(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        ᐃⵠ[413][Er.ᐃⲆΔ].push(Ra(im(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        ᐃⵠ[413][Er.ⲆⲆⲆ].push(Ra(lm(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        ᐃⵠ[413][Er.ⲆⲆⲆ].push(Ra($c(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        ᐃⵠ[413][Er.ⲆⲆⲆ].push(Ra(im(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        ᐃⵠ[449] = [];
        ᐃⵠ[449][Er.ᐃⲆΔ] = Ra(Vc(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        ᐃⵠ[449][Er.ⲆⲆⲆ] = Ra(Vc(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        ᐃⵠ[451] = [];
        ᐃⵠ[451][Er.ᐃⲆΔ] = Ra(om(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ᐃⵠ[451][Er.ⲆⲆⲆ] = Ra(om(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
        ᐃⵠ[452] = [];
        ᐃⵠ[452][Er.ᐃⲆΔ] = Ra(vp(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ᐃⵠ[452][Er.ⲆⲆⲆ] = Ra(vp(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
        ᐃⵠ[243] = [];
        ᐃⵠ[243][Er.ᐃⲆΔ] = [];
        ᐃⵠ[243][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[243][Er.ᐃⲆΔ] = [Mh.ⵠⲆᐃⵠΔⵠΔ, Mh.ⵠⲆⵠΔⲆᐃΔ, Mh.ⲆⵠⲆⵠⵠⲆᐃ, Mh.ΔᐃΔⵠⵠⵠⵠ, Mh.ᐃⵠⵠⵠΔⵠⵠ, Mh.ⵠᐃᐃᐃⲆᐃⵠ, Mh.ΔⲆⵠⵠΔⵠⵠ, Mh.Δⵠⵠⵠⵠᐃᐃ, Mh.ᐃⲆΔΔⵠⲆΔ, Mh.ᐃⲆΔᐃⵠΔᐃ, Mh.ⵠⲆⵠΔⲆΔⲆ, Mh.ⲆⲆΔⵠⲆΔᐃ, Mh.ΔΔΔΔΔᐃᐃ, Mh.ᐃᐃⵠᐃⲆΔΔ, Mh.ⵠᐃᐃᐃᐃⵠΔ, Mh.ᐃⵠⵠⲆⵠⲆᐃ, Mh.ᐃᐃⲆⵠⲆⲆⵠ, Mh.ⲆΔᐃⵠⵠⲆⲆ, Mh.ᐃᐃⵠΔΔᐃⲆ, Mh.ᐃⲆⵠᐃΔⲆⲆ, Mh.ΔⲆⲆⲆⲆΔΔ, Mh.ᐃΔᐃⵠΔᐃⵠ, Mh.ⲆᐃΔΔᐃΔᐃ, Mh.ⵠⵠᐃⲆⵠⲆΔ, Mh.ⲆΔⵠⵠⲆⲆΔ, Mh.ⵠⲆᐃᐃᐃⵠⵠ, Mh.ⵠΔᐃᐃΔΔⲆ, Mh.ⲆⲆⲆᐃⵠΔᐃ, Mh.ⵠΔⲆⵠΔᐃΔ, Mh.ⲆⵠⲆⲆⲆΔⵠ, Mh.ᐃΔⵠⵠᐃⵠΔ, Mh.ⲆⲆⵠΔⵠⵠⵠ, Mh.ΔᐃΔΔᐃⲆᐃ, Mh.ΔⲆᐃᐃᐃⲆⲆ, Mh.ⵠⲆΔⵠⲆᐃᐃ, Mh.ΔⵠΔΔΔΔⵠ, Mh.ᐃᐃⲆΔᐃΔⵠ, Mh.ΔⲆᐃᐃΔⵠΔ, Mh.ⲆΔᐃΔᐃⲆᐃ, Mh.ᐃΔⵠᐃⲆⵠⲆ, Mh.ⲆᐃⲆᐃⵠΔΔ, Mh.ⲆᐃᐃᐃᐃⵠΔ, Mh.ᐃᐃᐃⵠΔΔⲆ, Mh.ⵠⲆΔⵠᐃᐃΔ, Mh.ᐃⲆᐃⲆⵠᐃΔ, Mh.ⵠⵠᐃⲆΔΔΔ, Mh.ᐃⲆΔⵠᐃⲆΔ, Mh.ᐃⲆᐃΔⲆⲆⵠ, Mh.ΔΔⵠΔᐃᐃᐃ, Mh.ⵠΔⵠⵠΔⲆᐃ, Mh.ΔⲆΔᐃΔᐃᐃ, Mh.ⵠᐃⵠⵠᐃⵠⲆ, Mh.ΔΔΔᐃΔΔᐃ, Mh.ᐃΔⲆᐃΔΔⲆ, Mh.ᐃⲆᐃΔⵠⵠΔ, Mh.ⵠⵠᐃᐃⲆᐃⲆ];
        ᐃⵠ[243][Er.ⲆⲆⲆ] = [Mh.ⲆᐃⵠᐃΔᐃⵠ, Mh.ⵠᐃΔⲆⲆᐃⲆ, Mh.ᐃᐃⵠᐃⵠΔⵠ, Mh.ᐃᐃⵠΔΔⵠⲆ, Mh.ⵠᐃⵠⵠᐃΔⲆ, Mh.ⲆⵠⵠΔⵠⵠⵠ, Mh.ⲆⵠΔⲆⲆᐃΔ, Mh.ᐃⲆΔⲆⵠⵠⵠ, Mh.ⲆⵠΔΔⵠᐃΔ, Mh.ΔⵠΔⵠΔΔᐃ, Mh.ΔᐃΔᐃΔⵠⲆ, Mh.ΔᐃΔⲆⵠⲆⲆ, Mh.ⲆⵠⲆⵠⲆᐃⲆ, Mh.ⲆⲆⵠⵠⲆΔΔ, Mh.ΔΔⵠΔⵠⵠⲆ, Mh.ⵠⲆᐃᐃΔⵠⲆ, Mh.ᐃᐃⵠⲆΔⲆΔ, Mh.ⵠΔⵠⵠΔᐃᐃ, Mh.ᐃⲆⵠⲆΔΔΔ, Mh.ⵠᐃᐃⲆⵠⵠΔ, Mh.ΔΔⲆᐃᐃᐃⲆ, Mh.ᐃΔᐃΔΔⲆΔ, Mh.ᐃⵠⵠⲆⲆᐃⵠ, Mh.ΔΔⲆⵠⲆᐃᐃ, Mh.ΔⵠⵠᐃⵠⲆⲆ, Mh.ⵠΔΔⵠᐃΔⲆ, Mh.ⵠⵠᐃᐃⵠΔΔ, Mh.ΔⵠⲆᐃⲆⲆᐃ, Mh.ⲆⵠⵠΔⲆⲆΔ, Mh.ᐃⲆⵠᐃⵠⵠΔ, Mh.ⲆΔⵠᐃⲆᐃᐃ, Mh.ⲆΔΔᐃᐃᐃΔ, Mh.ⲆⲆⵠᐃΔΔᐃ, Mh.ᐃᐃⲆⵠⲆⵠⵠ, Mh.ⲆⲆⵠⵠⵠᐃᐃ, Mh.ᐃⲆⵠⲆⵠΔΔ, Mh.ⲆΔⵠⲆᐃⲆΔ, Mh.ⵠⵠⲆΔΔⵠⵠ, Mh.ᐃⲆᐃᐃⵠⲆᐃ, Mh.ᐃⵠΔⲆⵠᐃΔ, Mh.ᐃⲆΔⲆΔⵠᐃ, Mh.ⵠⲆᐃᐃΔⵠⵠ, Mh.ᐃⲆⲆᐃΔⲆΔ, Mh.ΔⵠΔᐃᐃᐃᐃ, Mh.ⲆΔⵠⵠⲆⲆⵠ, Mh.ⲆⵠⲆΔΔᐃⲆ, Mh.ⵠⵠΔⵠΔⲆᐃ, Mh.ⵠᐃΔΔⵠⵠΔ, Mh.ⵠΔΔᐃⵠᐃᐃ, Mh.ΔⵠⵠΔᐃᐃΔ, Mh.ΔⲆⵠᐃΔΔⲆ, Mh.ⲆⵠⲆΔⲆⲆᐃ, Mh.ᐃⵠᐃᐃᐃⲆᐃ, Mh.ᐃⵠΔⲆⵠⲆΔ, Mh.ᐃΔᐃⵠᐃⵠⲆ, Mh.ΔⲆⲆᐃΔᐃΔ];
        ᐃⵠ[676] = [];
        ᐃⵠ[676][Er.ᐃⲆΔ] = [];
        ᐃⵠ[676][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[676][Er.ᐃⲆΔ].push(Ra(wu(a * 1.1, cd, ["#252B28", "#747471", "#83827e"], 0)));
        ᐃⵠ[676][Er.ᐃⲆΔ].push(Ra(wu(a * 0.9, cd, ["#252B28", "#747471", "#83827e"], 1)));
        ᐃⵠ[676][Er.ᐃⲆΔ].push(Ra(wu(a * 1, cb, ["#252B28", "#747471", "#83827e"], 2)));
        ᐃⵠ[676][Er.ᐃⲆΔ].push(Ra(wu(a * 0.9, fs, ["#252B28", "#747471", "#83827e"], 2)));
        ᐃⵠ[676][Er.ⲆⲆⲆ].push(Ra(wu(a * 1.1, Xg, ["#030d14", "#123335", "#183f3f"], 0)));
        ᐃⵠ[676][Er.ⲆⲆⲆ].push(Ra(wu(a * 0.9, _e, ["#030d14", "#123335", "#183f3f"], 1)));
        ᐃⵠ[676][Er.ⲆⲆⲆ].push(Ra(wu(a * 1, al, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃⵠ[676][Er.ⲆⲆⲆ].push(Ra(wu(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃⵠ[679] = [];
        ᐃⵠ[679][Er.ᐃⲆΔ] = [];
        ᐃⵠ[679][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[679][Er.ᐃⲆΔ].push(Ra(wu(a * 1.1, xb, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃⵠ[679][Er.ᐃⲆΔ].push(Ra(wu(a * 0.9, zh, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃⵠ[679][Er.ᐃⲆΔ].push(Ra(wu(a * 1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃⵠ[679][Er.ᐃⲆΔ].push(Ra(wu(a * 0.9, F, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃⵠ[679][Er.ⲆⲆⲆ].push(Ra(wu(a * 1.1, Dr, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃⵠ[679][Er.ⲆⲆⲆ].push(Ra(wu(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃⵠ[679][Er.ⲆⲆⲆ].push(Ra(wu(a * 1, gg, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃⵠ[679][Er.ⲆⲆⲆ].push(Ra(wu(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃⵠ[415] = [];
        ᐃⵠ[415][Er.ᐃⲆΔ] = [];
        ᐃⵠ[415][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[415][Er.ᐃⲆΔ].push(Ra(xu(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃⵠ[415][Er.ᐃⲆΔ].push(Ra(xu(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃⵠ[415][Er.ᐃⲆΔ].push(Ra(xu(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃⵠ[415][Er.ⲆⲆⲆ].push(Ra(xu(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃⵠ[415][Er.ⲆⲆⲆ].push(Ra(xu(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃⵠ[415][Er.ⲆⲆⲆ].push(Ra(xu(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃⵠ[416] = [];
        ᐃⵠ[416][Er.ᐃⲆΔ] = [];
        ᐃⵠ[416][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[416][Er.ᐃⲆΔ].push(Ra(zu(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃⵠ[416][Er.ᐃⲆΔ].push(Ra(zu(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃⵠ[416][Er.ᐃⲆΔ].push(Ra(zu(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃⵠ[416][Er.ⲆⲆⲆ].push(Ra(zu(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃⵠ[416][Er.ⲆⲆⲆ].push(Ra(zu(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃⵠ[416][Er.ⲆⲆⲆ].push(Ra(zu(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃⵠ[121] = [];
        ᐃⵠ[121][Er.ᐃⲆΔ] = [];
        ᐃⵠ[121][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[121][Er.ᐃⲆΔ].push(Ra(Zc(a * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃⵠ[121][Er.ᐃⲆΔ].push(Ra(Zc(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃⵠ[121][Er.ᐃⲆΔ].push(Ra(Zc(a * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃⵠ[121][Er.ⲆⲆⲆ].push(Ra(Zc(a * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃⵠ[121][Er.ⲆⲆⲆ].push(Ra(Zc(a * 1.5, ul, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃⵠ[121][Er.ⲆⲆⲆ].push(Ra(Zc(a * 1.3, Dj, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃⵠ[678] = [];
        ᐃⵠ[678][Er.ᐃⲆΔ] = [];
        ᐃⵠ[678][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[678][Er.ᐃⲆΔ].push(Ra(Uc(a, ["#2d53c4"])));
        ᐃⵠ[678][Er.ⲆⲆⲆ].push(Ra(Uc(a, ["#2d53c4"])));
        ᐃⵠ[696] = [];
        ᐃⵠ[696][Er.ᐃⲆΔ] = [];
        ᐃⵠ[696][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[696][Er.ᐃⲆΔ].push(Ra(Uc(a, ["#c4912d"])));
        ᐃⵠ[696][Er.ⲆⲆⲆ].push(Ra(Uc(a, ["#c4912d"])));
        ᐃⵠ[680] = [];
        ᐃⵠ[680][Er.ᐃⲆΔ] = Ra(Yc(a, ["#414040"]));
        ᐃⵠ[680][Er.ⲆⲆⲆ] = Ra(Yc(a, ["#153635"]));
        ᐃⵠ[508] = [];
        ᐃⵠ[508][Er.ᐃⲆΔ] = Ra(bc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃⵠ[508][Er.ⲆⲆⲆ] = Ra(bc(a * 1, al, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃⵠ[509] = [];
        ᐃⵠ[509][Er.ᐃⲆΔ] = Ra(gc(a * 1, Ur, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃⵠ[509][Er.ⲆⲆⲆ] = Ra(gc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃⵠ[512] = [];
        ᐃⵠ[512][Er.ᐃⲆΔ] = Ra(gc(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃⵠ[512][Er.ⲆⲆⲆ] = Ra(gc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃⵠ[511] = [];
        ᐃⵠ[511][Er.ᐃⲆΔ] = Ra(Pc(a * 1, vg, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃⵠ[511][Er.ⲆⲆⲆ] = Ra(Pc(a * 1, Gh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃⵠ[510] = [];
        ᐃⵠ[510][Er.ᐃⲆΔ] = Ra(hc(a * 1, Nq, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃⵠ[510][Er.ⲆⲆⲆ] = Ra(hc(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃⵠ[419] = [];
        ᐃⵠ[419][Er.ᐃⲆΔ] = Ra(Kc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        ᐃⵠ[419][Er.ⲆⲆⲆ] = Ra(Kc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        ᐃⵠ[445] = [];
        ᐃⵠ[445][Er.ᐃⲆΔ] = Ra(em(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        ᐃⵠ[445][Er.ⲆⲆⲆ] = Ra(em(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        ᐃⵠ[259] = [];
        ᐃⵠ[818] = [];
        ᐃⵠ[516] = [];
        ᐃⵠ[819] = [];
        for (b = 0; b < 2; b++) {
            ᐃⵠ[259][b] = document.createElement("canvas");
            ᐃⵠ[259][b].width = 193;
            ᐃⵠ[259][b].height = 193;
            ᐃⵠ[818][b] = ᐃⵠ[259][b].getContext("2d");
            ᐃⵠ[516][b] = document.createElement("canvas");
            ᐃⵠ[516][b].width = 600;
            ᐃⵠ[516][b].height = 600;
            ᐃⵠ[819][b] = ᐃⵠ[516][b].getContext("2d");
        }
        ᐃⵠ[475] = [];
        ᐃⵠ[475][Er.ᐃⲆΔ] = Ra(Yc(a, ["#c8e0de"]));
        ᐃⵠ[475][Er.ⲆⲆⲆ] = Ra(Yc(a, ["#147071"]));
        ᐃⵠ[476] = [];
        ᐃⵠ[476][Er.ᐃⲆΔ] = Ra(Yc(a, ["#231912"]));
        ᐃⵠ[476][Er.ⲆⲆⲆ] = Ra(Yc(a, ["#021719"]));
        ᐃⵠ[697] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            Hb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            qb(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            Hb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            qb(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            Hb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            qb(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            Hb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            qb(d, b[0]);
            return c;
        }(a * 0.5, ["#BB0000"]));
        ᐃⵠ[461] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            qb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            qb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            qb(d, b, b, a * 4);
            return c;
        }(a * 0.9, "#BB0000"));
        ᐃⵠ[462] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            qb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            qb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            qb(d, b, b, a * 4);
            return c;
        }(a * 0.9, "#BB0000"));
        ᐃⵠ[463] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            qb(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            qb(d, b[0]);
            return c;
        }(a * 1, ["#BB0000"]));
        ᐃⵠ[466] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            qb(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            qb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            qb(d, b);
            return c;
        }(a * 0.8, "#BB0000"));
        ᐃⵠ[467] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            qb(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            qb(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            qb(d, b);
            return c;
        }(a * 0.8, "#BB0000"));
        ᐃⵠ[322] = Ra(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            qb(e, c, c, a);
            return d;
        }(a * 0.9, "#BB0000"));
        ᐃⵠ[279] = Ra(ed(a * 0.6, "#BB0000"));
        ᐃⵠ[280] = Ra(ed(a * 0.6, "#1CE7E0"));
        ᐃⵠ[281] = Ra(ed(a * 0.6, "#DBE71C"));
        ᐃⵠ[308] = Ra(ed(a * 0.6, "#00BB00"));
        ᐃⵠ[602] = [];
        ᐃⵠ[602][Er.ᐃⲆΔ] = Ra(Yc(a, ["#dac291"]));
        ᐃⵠ[602][Er.ⲆⲆⲆ] = Ra(Yc(a, ["#0D423D"]));
        ᐃⵠ[698] = [];
        ᐃⵠ[698][Er.ᐃⲆΔ] = Ra(Yc(a, ["#dac291"]));
        ᐃⵠ[698][Er.ⲆⲆⲆ] = Ra(Yc(a, ["#0D423D"]));
        ᐃⵠ[788] = [];
        ᐃⵠ[788][Er.ᐃⲆΔ] = Ra(Um(a * 0.3, ps, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        ᐃⵠ[788][Er.ⲆⲆⲆ] = Ra(Um(a * 0.3, ps, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        ᐃⵠ[182] = [];
        ᐃⵠ[182][Er.ᐃⲆΔ] = Ra(Um(a * 0.3, Ai, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        ᐃⵠ[182][Er.ⲆⲆⲆ] = Ra(Um(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        ᐃⵠ[127] = [Ra(Pm(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ᐃⵠ[128] = [Ra(Pm(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ᐃⵠ[603] = [];
        ᐃⵠ[603][Er.ᐃⲆΔ] = [];
        ᐃⵠ[603][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(um(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(cm(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(nm(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(Cm(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(am(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(bm(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ᐃⲆΔ].push(Ra(dm(a * 1, ["#0B6A84"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(um(a * 1, ["#09373F"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(cm(a * 1, ["#09373F"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(nm(a * 1, ["#09373F"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(Cm(a * 1, ["#09373F"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(am(a * 1, ["#09373F"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(bm(a * 1, ["#09373F"])));
        ᐃⵠ[603][Er.ⲆⲆⲆ].push(Ra(dm(a * 1, ["#09373F"])));
        ᐃⵠ[692] = [];
        ᐃⵠ[692][Er.ᐃⲆΔ] = [];
        ᐃⵠ[692][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[692][Er.ᐃⲆΔ].push(Ra(tm(a * 1.7, ["#FBEFBC"], 0)));
        ᐃⵠ[692][Er.ᐃⲆΔ].push(Ra(tm(a * 1.9, ["#FBEFBC"], 1)));
        ᐃⵠ[692][Er.ᐃⲆΔ].push(Ra(tm(a * 1.7, ["#FBEFBC"], 2)));
        ᐃⵠ[692][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.7, ["#0F4C48"], 0)));
        ᐃⵠ[692][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.9, ["#0F4C48"], 1)));
        ᐃⵠ[692][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.7, ["#0F4C48"], 2)));
        ᐃⵠ[694] = [];
        ᐃⵠ[694][Er.ᐃⲆΔ] = [];
        ᐃⵠ[694][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[694][Er.ᐃⲆΔ].push(Ra(tm(a * 1.8, ["#A9D6D3"], 0)));
        ᐃⵠ[694][Er.ᐃⲆΔ].push(Ra(tm(a * 2, ["#A9D6D3"], 1)));
        ᐃⵠ[694][Er.ᐃⲆΔ].push(Ra(tm(a * 1.8, ["#A9D6D3"], 2)));
        ᐃⵠ[694][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.8, ["#115E60"], 0)));
        ᐃⵠ[694][Er.ⲆⲆⲆ].push(Ra(tm(a * 2, ["#115E60"], 1)));
        ᐃⵠ[694][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.8, ["#115E60"], 2)));
        ᐃⵠ[695] = [];
        ᐃⵠ[695][Er.ᐃⲆΔ] = [];
        ᐃⵠ[695][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[695][Er.ᐃⲆΔ].push(Ra(tm(a * 1.9, ["#2A8B9B"], 0)));
        ᐃⵠ[695][Er.ᐃⲆΔ].push(Ra(tm(a * 2.1, ["#2A8B9B"], 1)));
        ᐃⵠ[695][Er.ᐃⲆΔ].push(Ra(tm(a * 1.9, ["#2A8B9B"], 2)));
        ᐃⵠ[695][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.9, ["#0F464C"], 0)));
        ᐃⵠ[695][Er.ⲆⲆⲆ].push(Ra(tm(a * 2.1, ["#0F464C"], 1)));
        ᐃⵠ[695][Er.ⲆⲆⲆ].push(Ra(tm(a * 1.9, ["#0F464C"], 2)));
        ᐃⵠ[693] = [];
        ᐃⵠ[693][Er.ᐃⲆΔ] = [];
        ᐃⵠ[693][Er.ⲆⲆⲆ] = [];
        ᐃⵠ[693][Er.ᐃⲆΔ].push(Ra(sc(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃⵠ[693][Er.ᐃⲆΔ].push(Ra(sc(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃⵠ[693][Er.ᐃⲆΔ].push(Ra(sc(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃⵠ[693][Er.ⲆⲆⲆ].push(Ra(sc(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃⵠ[693][Er.ⲆⲆⲆ].push(Ra(sc(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃⵠ[693][Er.ⲆⲆⲆ].push(Ra(sc(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃⵠ[637] = [];
        ᐃⵠ[637][Er.ᐃⲆΔ] = Ra(ym(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        ᐃⵠ[637][Er.ⲆⲆⲆ] = Ra(ym(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        ᐃⵠ[687] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            qb(d, b[0], b[0], a * 12);
            return c;
        }(a * 0.8, ["#B6222A"]));
        ᐃⵠ[673] = [];
        ᐃⵠ[673][Er.ᐃⲆΔ] = Ra(Am(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        ᐃⵠ[673][Er.ⲆⲆⲆ] = Ra(Am(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        ᐃⵠ[688] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            qb(d, b[0], b[0], a * 10);
            return c;
        }(a * 0.8, ["#B6222A"]));
        ᐃⵠ[902] = [];
        ᐃⵠ[902][Er.ᐃⲆΔ] = Ra(hd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        ᐃⵠ[902][Er.ⲆⲆⲆ] = Ra(hd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ᐃⵠ[903] = [];
        ᐃⵠ[903][Er.ᐃⲆΔ] = Ra(hd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        ᐃⵠ[903][Er.ⲆⲆⲆ] = Ra(hd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        ᐃⵠ[Er.ⵠᐃⵠⵠΔᐃᐃ] = [];
        ᐃⵠ[Er.ⵠᐃⵠⵠΔᐃᐃ][Er.ᐃⲆΔ] = Ra(hd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        ᐃⵠ[Er.ⵠᐃⵠⵠΔᐃᐃ][Er.ⲆⲆⲆ] = Ra(hd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ᐃⵠ[904] = Ra(pd(a * 0.4, ["#B6222A"]));
        ᐃⵠ[905] = Ra(pd(a * 0.4, ["#B6222A"]));
        ᐃⵠ[Er.ΔⵠⵠⲆⲆᐃⵠᐃΔ] = Ra(pd(a * 0.4, ["#B6222A"]));
        ᐃⵠ[230] = Ra(kc(a * 0.35, kq, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        ᐃⵠ[229] = Ra(gu(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        ᐃⵠ[886] = [];
        ᐃⵠ[886][Er.ᐃⲆΔ] = Ra(fu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        ᐃⵠ[886][Er.ⲆⲆⲆ] = Ra(fu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        ᐃⵠ[887] = [];
        ᐃⵠ[887][Er.ᐃⲆΔ] = Ra(fu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        ᐃⵠ[887][Er.ⲆⲆⲆ] = Ra(fu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        ᐃⵠ[894] = [];
        ᐃⵠ[894][Er.ᐃⲆΔ] = Ra(ju(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ᐃⵠ[894][Er.ⲆⲆⲆ] = Ra(ju(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ᐃⵠ[895] = [];
        ᐃⵠ[895][Er.ᐃⲆΔ] = Ra(hu(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ᐃⵠ[895][Er.ⲆⲆⲆ] = Ra(hu(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ᐃⵠ[896] = [];
        ᐃⵠ[896][Er.ᐃⲆΔ] = Ra(ju(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ᐃⵠ[896][Er.ⲆⲆⲆ] = Ra(ju(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        ᐃⵠ[897] = [];
        ᐃⵠ[897][Er.ᐃⲆΔ] = Ra(hu(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ᐃⵠ[897][Er.ⲆⲆⲆ] = Ra(hu(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        ᐃⵠ[888] = Ra(eu(a * 0.35, ["#B6222A"]));
        ᐃⵠ[889] = Ra(ju(a * 0.35, 0, [undefined, "#B6222A"]));
        ᐃⵠ[890] = Ra(hu(a * 0.35, 0, [xn, "#B6222A"]));
        ᐃⵠ[891] = Ra(eu(a * 0.35, ["#22E066"]));
        ᐃⵠ[892] = Ra(ju(a * 0.35, 0, [undefined, "#22E066"]));
        ᐃⵠ[893] = Ra(hu(a * 0.35, 0, [undefined, "#22E066"]));
        ᐃⵠ[48] = [];
        ᐃⵠ[48][Er.ᐃⲆΔ] = Ra(Bu(a * 0.3, wl, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        ᐃⵠ[48][Er.ⲆⲆⲆ] = Ra(Bu(a * 0.3, kq, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        ᐃⵠ[47] = [];
        ᐃⵠ[47][Er.ᐃⲆΔ] = Ra(Hu(a * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        ᐃⵠ[47][Er.ⲆⲆⲆ] = Ra(Hu(a * 0.45, gg, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        ᐃⵠ[141] = [];
        ᐃⵠ[141][Er.ᐃⲆΔ] = Ra(qm(a * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        ᐃⵠ[141][Er.ⲆⲆⲆ] = Ra(qm(a * 0.63, zh, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ᐃⵠ[125] = [];
        ᐃⵠ[125][Er.ᐃⲆΔ] = Ra(Hm(a, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        ᐃⵠ[125][Er.ⲆⲆⲆ] = Ra(Hm(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ᐃⵠ[221] = [];
        ᐃⵠ[221][Er.ᐃⲆΔ] = Mh.ΔⲆⲆᐃⵠΔᐃⲆⲆ;
        ᐃⵠ[221][Er.ⲆⲆⲆ] = Mh.ΔⵠⵠᐃⵠⲆᐃΔΔ;
        ᐃⵠ[190] = [];
        ᐃⵠ[190][Er.ᐃⲆΔ] = Ra(od(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃⵠ[190][Er.ⲆⲆⲆ] = Ra(od(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃⵠ[853] = [ᐃⵠ[190]];
        ᐃⵠ[853][1] = [];
        ᐃⵠ[853][2] = [];
        ᐃⵠ[853][1][Er.ᐃⲆΔ] = Ra(dd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃⵠ[853][1][Er.ⲆⲆⲆ] = Ra(dd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃⵠ[853][2][Er.ᐃⲆΔ] = Ra(bd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃⵠ[853][2][Er.ⲆⲆⲆ] = Ra(bd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃⵠ[49] = [];
        ᐃⵠ[49][Er.ᐃⲆΔ] = Ra(Vb(3 - Math.PI / 2, Rm(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        ᐃⵠ[49][Er.ⲆⲆⲆ] = Ra(Vb(3 - Math.PI / 2, Rm(a * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        ᐃⵠ[728] = [];
        ᐃⵠ[728][Er.ᐃⲆΔ] = Ra(_d(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        ᐃⵠ[728][Er.ⲆⲆⲆ] = Ra(_d(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        ᐃⵠ[798] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Hb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            qb(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Hb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            qb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Hb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            qb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Hb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            qb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Hb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            qb(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            Hb(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            qb(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            Hb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            qb(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            qb(d, br, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            qb(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            qb(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            qb(d, br, b[1], a * 12);
            return c;
        }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        ᐃⵠ[729] = Ra(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Hb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            Hb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            Hb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            Hb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Hb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Hb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Hb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Hb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            qb(d, b[0], b[0], a * 12);
            return c;
        }(a * 0.3, ["#BB0000"]));
        ᐃⵠ[658] = Zd(1, [{
            f: pp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃⵠ[150] = Zd(1.5, [{
            f: xp,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ᐃⵠ[669] = wp(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
        ᐃⵠ[670] = wp(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        ᐃⵠ[671] = wp(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        ᐃⵠ[672] = wp(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ΔΔⲆΔⵠᐃⲆ) {
            ᐃⵠ[278] = Ra(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                Hb(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                qb(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Cu(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(a));
        } else {
            ᐃⵠ[278] = Ra(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                Hb(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                qb(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Cu(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(a));
        }
        if (ΔΔⲆΔⵠᐃⲆ) {
            ᐃⵠ[267] = Ra(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                Hb(d, k, 0, f, a, h);
                qb(d, null, "#69A148", l);
                d.translate(0, j);
                Hb(d, k, 0, f, a, h);
                qb(d, null, "#AF352A", l);
                d.translate(0, j);
                Hb(d, k, 0, f, a, h);
                qb(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            ᐃⵠ[267] = Ra(function (b) {
                var c = document.createElement("canvas");
                var e = c.getContext("2d");
                var f = b * 950;
                var i = b * 180;
                var j = b * 50;
                var a = b * 20;
                var k = b * 240;
                var m = b * 35;
                var h = b * 1;
                var l = b * 4;
                var g = b * 4;
                c.width = f;
                c.height = j;
                e.translate(0, b * 15);
                Hb(e, m, h, i, a, l);
                qb(e, null, "#69A148", g);
                var n = ᐃⵠ[669];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                Hb(e, m, h, i, a, l);
                qb(e, null, "#AF352A", g);
                n = ᐃⵠ[671];
                e.drawImage(n, 17, -9);
                e.translate(k, 0);
                Hb(e, m, h, i, a, l);
                qb(e, null, "#669BB1", g);
                n = ᐃⵠ[670];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                Hb(e, m, h, i, a, l);
                qb(e, null, "#074A87", g);
                n = ᐃⵠ[672];
                e.drawImage(n, 17, -8);
                return c;
            }(a));
        }
        if (ΔΔⲆΔⵠᐃⲆ) {
            ᐃⵠ[608] = Ra(Bm(0.75));
        } else {
            ᐃⵠ[608] = Ra(Bm(a));
        }
        ᐃⵠ[792] = Ra(hp(a * 0.16, Ls, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        ᐃⵠ[537] = Ra(Vb(5.8, cu(a * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        ᐃⵠ[283] = [];
        ᐃⵠ[465] = [];
        for (b = 0; b < 18; b++) {
            ᐃⵠ[465][b] = Cu(a, "" + (b + 1), 12, "#FFF");
        }
        ᐃⵠ[708] = [];
        ᐃⵠ[708].push(Ra(Bp(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        ᐃⵠ[708].push(Ra(Bp(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        ᐃⵠ[708].push(Ra(Bp(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        ᐃⵠ[725] = [];
        ᐃⵠ[725].push(Ra(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            Ub(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            qb(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            Ub(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            qb(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            qb(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            qb(c, "#3A2A0D");
            Ub(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            qb(c, oh, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            qb(c, pt, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            qb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            qb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            qb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            qb(c, ei, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            qb(c, br, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            qb(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            qb(c, Uh, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            qb(c, fq, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            qb(c, pt, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            qb(c, hg, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            qb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            qb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            qb(c, yk, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            qb(c, Uh, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            qb(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            qb(c, Wr, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            qb(c, Yd, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            qb(c, xn, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            qb(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            qb(c, "#ECBE35", "#EDCE4F", a * 8);
            Ub(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            qb(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(a * 0.22)));
        ᐃⵠ[725].push(Ra(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            Ub(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            qb(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            Ub(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            qb(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            qb(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            qb(c, "#071A1B");
            Ub(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            qb(c, Ze, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            qb(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            qb(c, Uh, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            qb(c, $g, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            qb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            qb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            qb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            qb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            qb(c, Ft, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            qb(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            qb(c, rs, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            qb(c, Ze, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            qb(c, pt, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            qb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            qb(c, ei, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            qb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            qb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            qb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            qb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            qb(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            qb(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            qb(c, "#E1DDD5", "#EAE7E4", a * 8);
            Ub(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            qb(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(a * 0.22)));
        ᐃⵠ[726] = Ra(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            Ub(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            qb(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            qb(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            Hb(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            qb(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            Hb(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            qb(c, "#C09D6F");
            Ub(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            qb(c, "#C09D6F");
            return b;
        }(a * 0.22));
        ᐃⵠ[727] = [];
        ᐃⵠ[727].push(Ra(fd(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
        ᐃⵠ[727].push(Ra(fd(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        ᐃⵠ[727].push(Ra(fd(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        ᐃⵠ[546] = Mh.ⲆⵠⲆⵠⵠⲆΔ;
        ᐃⵠ[547] = Mh.ⲆᐃᐃΔᐃⵠᐃ;
        ᐃⵠ[548] = Mh.ᐃᐃᐃΔᐃⲆᐃ;
        ᐃⵠ[549] = Mh.ᐃⵠⵠⵠᐃⲆⵠ;
        ᐃⵠ[517] = Cu(a, "Show spectators", 25, "#FFF", yk, Ze, "#000", 5, 220);
        ᐃⵠ[525] = Cu(a, "Reconnecting...", 30, "#FFF");
        console.log(undefined, Pl);
    }
    function dp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Hb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        qb(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        qb(e, rs, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        qb(e, Ze, c[6], a * 15);
        return d;
    }
    function vp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        qb(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        qb(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        qb(d, b[2]);
        return c;
    }
    function cp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        Hb(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        Hb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        qb(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        Hb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        qb(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        Hb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        qb(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        Hb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        qb(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        Hb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        qb(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        Hb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        qb(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        Hb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        qb(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        Hb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        Hb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        qb(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        Hb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        Hb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        qb(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        Hb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        qb(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        Hb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        qb(d, b[2]);
        return c;
    }
    function mp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        Hb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        qb(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        Hb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        qb(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        qb(e, c[5]);
        e.restore();
        return d;
    }
    function pp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        qb(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        qb(e, undefined, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        qb(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        qb(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        qb(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        qb(e, c[2], c[3], a * 12);
        return d;
    }
    function Cp(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        Ub(g, b * 174, b * 87.984375, b * 20.8806130178211);
        qb(g, d[0], d[0], b * 8);
        Ub(g, b * 174, b * 87.984375, b * 12.165525060596439);
        qb(g, d[0], d[0], b * 8);
        Ub(g, b * 174, b * 87.484375, b * 6);
        qb(g, d[0]);
        Ub(g, b * 30, b * 87.984375, b * 20.8806130178211);
        qb(g, d[0], d[0], b * 4);
        Ub(g, b * 30, b * 87.984375, b * 12.165525060596439);
        qb(g, d[0], d[0], b * 4);
        Ub(g, b * 30, b * 87.484375, b * 6);
        qb(g, d[0]);
        Ub(g, b * 100, b * 30, b * 20.8806130178211);
        qb(g, d[0], d[0], b * 4);
        Ub(g, b * 100, b * 30, b * 12.165525060596439);
        qb(g, d[0], d[0], b * 4);
        Ub(g, b * 100, b * 30, b * 6);
        qb(g, d[0]);
        Ub(g, b * 100, b * 130, b * 20.8806130178211);
        qb(g, d[0], d[0], b * 4);
        Ub(g, b * 100, b * 130, b * 12.165525060596439);
        qb(g, d[0], d[0], b * 4);
        Ub(g, b * 100, b * 130, b * 6);
        qb(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        Hb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        qb(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        Hb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        qb(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        Hb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        Ub(g, b * 174, b * 87.984375, b * 20.8806130178211);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 174, b * 87.984375, b * 12.165525060596439);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 174, b * 87.484375, b * 6);
        qb(g, d[2]);
        Ub(g, b * 30, b * 87.984375, b * 20.8806130178211);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 30, b * 87.984375, b * 12.165525060596439);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 30, b * 87.484375, b * 6);
        qb(g, d[2]);
        Ub(g, b * 102, b * 30, b * 20.8806130178211);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 102, b * 30, b * 12.165525060596439);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 102, b * 30, b * 6);
        qb(g, d[1]);
        Ub(g, b * 102, b * 130, b * 20.8806130178211);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 102, b * 130, b * 12.165525060596439);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 102, b * 130, b * 6);
        qb(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        Hb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        qb(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        Hb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        qb(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        Hb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        qb(g, d[2], d[1], b * 8);
        Ub(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 135, b * 107.36605834960938, b * 13);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        qb(g, d[2]);
        Ub(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 70, b * 107.36605834960938, b * 13);
        qb(g, d[1], d[3], b * 8);
        Ub(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        qb(g, d[2]);
        return f;
    }
    function Tp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        Xb(e, 6, a * 43, a * 10);
        e.restore();
        qb(e, c[0], c[1], a * 3);
        return d;
    }
    function fp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            qb(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        qb(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        qb(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        qb(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        qb(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        qb(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            qb(e, Uh, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            qb(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        qb(e, Ts, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        qb(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        qb(e, undefined, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        qb(e, b[2], b[2], a * 10);
        return d;
    }
    function zp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        qb(e, c[1], c[2], a * 6);
        return d;
    }
    function yp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        qb(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        qb(e, undefined, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        qb(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        qb(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        qb(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        qb(e, c[0], c[1], a * 20);
        return d;
    }
    function wp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        Ub(e, a * 54.5, a * 55, a * 48.038209575038294);
        qb(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            qb(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            Hb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            qb(e, b[2], b[3], a * 4);
            Ub(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            qb(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            Hb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            qb(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            qb(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            qb(e, Uh, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            qb(e, Ft, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            qb(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            qb(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            qb(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            qb(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            qb(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            qb(e, b[3]);
        }
        return d;
    }
    function Pp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        qb(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        qb(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        qb(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        qb(e, xn, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        qb(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        qb(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        qb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        qb(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        qb(e, jj, c[2], a * 11);
        return d;
    }
    function Ap(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            Hb(e, a * 0, a * 5, a * 90, a * 60, 10);
            qb(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            Ub(e, a * 25, a * 40, a * 10);
            e.fill();
            Ub(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            Hb(e, 0, 0, a * 90, a * 60, a * 10);
            qb(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            Ub(e, a * 25, a * 40, a * 10);
            e.fill();
            Ub(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            qb(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            qb(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            qb(e, b[1]);
            e.restore();
            e.save();
            Hb(e, 0, a * 15, a * 90, a * 50, a * 10);
            qb(e, b[0]);
            Hb(e, 0, a * 10, a * 90, a * 50, a * 10);
            qb(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            Ub(e, a * 25, a * 40, a * 10);
            e.fill();
            Ub(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function kp() {
        var b = px.time;
        if (ᐃⵠ[285]) {
            io.drawImage(ᐃⵠ[285][b][1], lo + 480, hq + 190);
            io.drawImage(ᐃⵠ[285][b][2], lo + 180, hq - 430);
            io.drawImage(ᐃⵠ[285][b][1], lo - 855, hq + 100);
            io.drawImage(ᐃⵠ[285][b][0], lo - 550, hq - 300);
            io.drawImage(ᐃⵠ[285][b][0], lo - 1020, hq - 520);
        }
        if (ᐃⵠ[108]) {
            io.drawImage(ᐃⵠ[108][b][1], lo - 80, hq - 640);
            io.drawImage(ᐃⵠ[108][b][1], lo + 80, hq + 490);
            io.drawImage(ᐃⵠ[108][b][2], lo - 180, hq - 700);
            io.drawImage(ᐃⵠ[108][b][0], lo + 550, hq + 100);
            io.drawImage(ᐃⵠ[108][b][1], lo + 450, hq + 300);
            io.drawImage(ᐃⵠ[108][b][1], lo + 780, hq + 300);
            io.drawImage(ᐃⵠ[108][b][2], lo + 980, hq + 200);
            io.drawImage(ᐃⵠ[108][b][2], lo + 680, hq + 600);
            io.drawImage(ᐃⵠ[108][b][2], lo - 380, hq + 100);
            io.drawImage(ᐃⵠ[108][b][2], lo + 280, hq + 250);
        }
        if (ᐃⵠ[110]) {
            io.drawImage(ᐃⵠ[110][b][0], lo - 590, hq);
            io.drawImage(ᐃⵠ[110][b][0], lo + 120, hq - 390);
            io.drawImage(ᐃⵠ[110][b][0], lo - 270, hq + 340);
        }
        if (ᐃⵠ[109]) {
            io.drawImage(ᐃⵠ[109][b][4], lo - 700, hq - 600);
            io.drawImage(ᐃⵠ[109][b][2], lo - 970, hq - 250);
            io.drawImage(ᐃⵠ[109][b][5], lo - 720, hq - 200);
            io.drawImage(ᐃⵠ[109][b][2], lo - 1020, hq + 340);
            io.drawImage(ᐃⵠ[109][b][0], lo - 1120, hq - 0);
            io.drawImage(ᐃⵠ[109][b][1], lo - 650, hq - 330);
            io.drawImage(ᐃⵠ[109][b][4], lo - 495, hq - 90);
            io.drawImage(ᐃⵠ[109][b][3], lo - 520, hq + 340);
            io.drawImage(ᐃⵠ[109][b][2], lo + 830, hq - 520);
        }
        ᐃⵠ[413];
        if (rx && qx) {
            var c = rx.ΔᐃⲆ.x;
            var d = rx.ΔᐃⲆ.y;
            rx.ΔᐃⲆ.x = lo;
            rx.ΔᐃⲆ.y = hq;
            var e = qx.time;
            qx.time = px.time;
            var f;
            var g = px.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].ⵠᐃΔⵠ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ⵠΔᐃⲆ[0].x = f.x - 20.5;
            f.ⵠΔᐃⲆ[0].y = f.y - 22.5;
            f.ⵠΔᐃⲆ[1].x = f.x - 35.5;
            f.ⵠΔᐃⲆ[1].y = f.y + 7.5;
            f.ⵠΔᐃⲆ[2].x = f.x + 7.5;
            f.ⵠΔᐃⲆ[2].y = f.y - 30;
            f.ⵠΔᐃⲆ[3].x = f.x + 22.5;
            f.ⵠΔᐃⲆ[3].y = f.y;
            f.ⵠΔᐃⲆ[4].x = f.x - 7.5;
            f.ⵠΔᐃⲆ[4].y = f.y + 14.5;
            for (var a = 0; a < f.info; a++) {
                f.ⵠΔᐃⲆ[a].ⵠᐃΔⵠ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ⵠΔᐃⲆ[0].x = f.x - 20.5;
            f.ⵠΔᐃⲆ[0].y = f.y - 22.5;
            f.ⵠΔᐃⲆ[1].x = f.x - 35.5;
            f.ⵠΔᐃⲆ[1].y = f.y + 7.5;
            f.ⵠΔᐃⲆ[2].x = f.x + 7.5;
            f.ⵠΔᐃⲆ[2].y = f.y - 30;
            f.ⵠΔᐃⲆ[3].x = f.x + 22.5;
            f.ⵠΔᐃⲆ[3].y = f.y;
            f.ⵠΔᐃⲆ[4].x = f.x - 7.5;
            f.ⵠΔᐃⲆ[4].y = f.y + 14.5;
            for (a = 0; a < f.info; a++) {
                f.ⵠΔᐃⲆ[a].ⵠᐃΔⵠ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ᐃΔΔⲆⲆ(113);
            g[0].ⵠΔⲆⲆΔ();
            rx.ΔᐃⲆ.x = c;
            rx.ΔᐃⲆ.y = d;
            qx.time = e;
        }
    }
    function xp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        qb(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        qb(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        qb(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        qb(e, hg, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        qb(e, pt, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        qb(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        qb(e, c[3]);
        return d;
    }
    function Jp(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        Ub(d, a * 55, a * 55, a * 55);
        qb(d, b[0]);
        return c;
    }
    function Mp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        qb(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        qb(e, c[1], c[2], a * 10);
        return d;
    }
    function Bp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            qb(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        qb(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        qb(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        qb(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        qb(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        qb(e, b[3], b[3], a * 12);
        return d;
    }
    function Ep(b, c, d, e, f) {
        const g = (0 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (16 << (b & 255)) + (8 << (b >> 8 & 255));
        const a = (1 + (c + 54859) * 22695477) % 4294967296;
        const i = (d | 34505) & ~(d & 34505);
        const j = ~(e & 11674) & 11674 | ~(e & 11674) & e;
        return (14546 + (Yn(g, a, i, j, (2531011 + (f + 1040) * 214013) % 4294967296) ^ function (b, c, d, e) {
            const f = (49159 + b) % 65466;
            const g = ((28715 + c) * 214013 + 2531011) % 4294967296;
            const a = (d + 63264) % 65320;
            const i = ~(e & 46486) & e | ~(e & 46486) & 46486;
            const j = gb(f, g, a, i);
            ap(g, a, i, f, g, a);
            return ~(j & 61158) & 61158 | ~(j & 61158) & j;
        }(g, a, i, j))) % 65515;
    }
    function Dp(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        qb(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        qb(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        qb(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        qb(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        qb(e, pt, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        qb(e, undefined, c[4], a * 6);
        return d;
    }
    function Ip(a, b) {
        ᐃⵠ[283][a] ||= Cu(jq, "x" + a, 17, "#FFF");
        var c = ᐃⵠ[283][a];
        var d = b.info.translate.x + b.info.ⵠΔ[0].width - c.width - jq * 14;
        var e = b.info.translate.y + b.info.ⵠΔ[0].height - c.height - jq * 19;
        if (vf == b.info.state) {
            e += jq * 5;
        }
        Rp(io, c, d, e);
    }
    function Sp() {
        if (!rx.ⵠⲆⲆⲆ.open && !rx.ⲆⵠΔΔⵠ.open) {
            rx.ⲆᐃⲆΔ.open = false;
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < qx.ⵠⲆⵠ[32].length; d++) {
                    var e = qx.ⵠⲆⵠ[32][d];
                    var f = og.ΔⲆⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        rx.ⲆᐃⲆΔ.open = Aq;
                        rx.ⲆᐃⲆΔ.ⵠΔΔⲆⵠᐃΔ = e.info & 255;
                        rx.ⲆᐃⲆΔ.ᐃΔⲆΔⲆ = (e.info & 65280) >> 8;
                        rx.ⲆᐃⲆΔ.ΔⵠⲆⲆ = e.ΔⵠⲆⲆ;
                        rx.ⲆᐃⲆΔ.ΔᐃΔⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ᐃⵠ[655];
                    var a = (k = tx.ⵠᐃⵠΔⵠⵠⵠ).info.translate.x - 33;
                    Rp(io, g, a, 0);
                    if (rx.ⲆᐃⲆΔ.ⵠΔΔⲆⵠᐃΔ > 0) {
                        k.ⵠᐃΔⵠ(io);
                        if ((j = rx.ⲆᐃⲆΔ.ⵠΔΔⲆⵠᐃΔ) > 1) {
                            Ip(j, k);
                        }
                    }
                    var j;
                    var k = tx.ⵠᐃⵠⵠⲆᐃⲆ;
                    if (rx.ⲆᐃⲆΔ.ᐃΔⲆΔⲆ > 0) {
                        k.ⵠᐃΔⵠ(io);
                        if ((j = rx.ⲆᐃⲆΔ.ᐃΔⲆΔⲆ) > 1) {
                            Ip(j, k);
                        }
                    }
                }
            }
        }
    }
    function Qp(b, c, d) {
        var e = ᐃⵠ[465][b];
        var f = c.info.translate.x + jq * 5;
        var g = c.info.translate.y + jq * 5;
        if (c.info.state == vf || d) {
            g += jq * 5;
        }
        Rp(io, e, f, g);
    }
    function _p() {
        var a = tx.ᐃΔᐃΔᐃ;
        var b = a.id;
        if (a.ⵠΔⵠᐃⵠ === 1 && a.display === 1) {
            if (ᐃΔⲆᐃⵠ[b] === undefined) {
                ᐃΔⲆᐃⵠ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = zb[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    Pb = 2;
                    for (; e.length > Pb; Pb++) {
                        f = Math.max(f, d.measureText(e[Pb]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    Hb(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        Pb = 2;
                        for (; Pb < e.length; Pb++) {
                            d.fillText(e[Pb], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ⲆΔⲆᐃ === 1) {
                Rp(io, ᐃΔⲆᐃⵠ[b], a.x, a.y);
            } else if (no < a.x - 80 + ᐃΔⲆᐃⵠ[b].width) {
                Rp(io, ᐃΔⲆᐃⵠ[b], no - ᐃΔⲆᐃⵠ[b].width - 10, a.y - ᐃΔⲆᐃⵠ[b].height - 10);
            } else {
                Rp(io, ᐃΔⲆᐃⵠ[b], a.x - 80, a.y - ᐃΔⲆᐃⵠ[b].height - 10);
            }
        }
    }
    function Fp() {
        rx.ⲆΔⲆⲆⵠ.open = false;
        var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
        var b = 100;
        if (a) {
            for (var c = 0; c < qx.ⵠⲆⵠ[22].length; c++) {
                var d = qx.ⵠⲆⵠ[22][c];
                var e = og.ΔⲆⵠᐃ(d, a);
                if (e < b) {
                    b = e;
                    rx.ⲆΔⲆⲆⵠ.open = zh;
                    rx.ⲆΔⲆⲆⵠ.ΔⵠⲆⲆ = d.ΔⵠⲆⲆ;
                    rx.ⲆΔⲆⲆⵠ.ΔᐃΔⵠⲆ = d.id;
                }
            }
            if (b < 100) {
                tx.ⲆΔⲆⲆⵠ.ⵠᐃΔⵠ(io);
            }
        }
    }
    function Rp(b, c, d, e, f, g, a, i, j, h) {
        if (xn === c.ΔΔᐃΔᐃⵠⲆ || c.ΔΔᐃΔᐃⵠⲆ() === 1) {
            if (h !== Wr) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== undefined) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Gp() {
        rx.ⲆⲆⵠⵠⵠ.id = -1;
        rx.ⲆⲆⵠⵠⵠ.ΔⵠⲆⲆ = -1;
        if (!rx.ΔⲆⲆⵠΔΔⵠ && !rx.ⲆⲆⵠⵠⵠ.wait && !rx.ⵠⲆⲆᐃⲆ) {
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < qx.ⵠⲆⵠ[29].length; d++) {
                    var e = qx.ⵠⲆⵠ[29][d];
                    var f = og.ΔⲆⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        rx.ⲆⲆⵠⵠⵠ.id = e.id;
                        rx.ⲆⲆⵠⵠⵠ.ΔⵠⲆⲆ = e.ΔⵠⲆⲆ;
                        rx.ⲆⲆⵠⵠⵠ.info = e.info;
                        rx.ⲆⲆⵠⵠⵠ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = tx.ᐃᐃᐃⵠⵠ;
            tx.ᐃᐃᐃⵠⵠ = -1;
            if (rx.ⲆⲆⵠⵠⵠ.ΔⵠⲆⲆ == -1 || rx.ᐃⲆⲆⲆⲆ.length != 0 && rx.id != rx.ⲆⲆⵠⵠⵠ.ΔⵠⲆⲆ) {
                if (rx.ᐃⲆⲆⲆⲆ.length != 0 && rx.id != rx.ᐃⲆⲆⲆⲆ[0]) {
                    tx.ᐃᐃᐃⵠⵠ = 2;
                } else if (rx.ᐃⲆⲆⲆⲆ.length != 0 && rx.ᐃⲆⲆⲆⲆ[0] == rx.id) {
                    tx.ᐃᐃᐃⵠⵠ = 1;
                } else if (rx.ᐃⲆⲆⲆⲆ.length != 0) {
                    tx.ᐃᐃᐃⵠⵠ = 3;
                }
            } else if (rx.ᐃⲆⲆⲆⲆ.length == 0 && rx.ⲆⲆⵠⵠⵠ.info >= 8) {
                tx.ᐃᐃᐃⵠⵠ = 4;
            } else if (rx.ᐃⲆⲆⲆⲆ.length == 0) {
                tx.ᐃᐃᐃⵠⵠ = 3;
            } else {
                tx.ᐃᐃᐃⵠⵠ = 0;
            }
            if (tx.ᐃᐃᐃⵠⵠ != -1) {
                tx.ⵠᐃΔΔᐃ[tx.ᐃᐃᐃⵠⵠ].button.ⵠᐃΔⵠ(io);
            }
            var a = document.getElementById("team_box").style;
            if (tx.ᐃᐃᐃⵠⵠ != -1 && tx.ᐃᐃᐃⵠⵠ != g && a.display == "inline-block") {
                tx.ⵠᐃΔΔᐃ[tx.ᐃᐃᐃⵠⵠ].action();
            }
        }
    }
    function jp() {
        if (rx.ΔᐃΔⲆΔⵠΔ) {
            io.globalAlpha = 0.5;
            io.fillStyle = "#000";
            io.fillRect(0, 0, no, so);
            io.globalAlpha = 0.8;
            var b = ᐃⵠ[516][qx.time];
            var c = lo - b.width / 2;
            var d = hq - b.height / 2;
            Rp(io, b, c, d);
            io.globalAlpha = 1;
            if (tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.x > -1) {
                io.fillStyle = "#660000";
                Ub(io, c + tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.x * 3 * jq, d + tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.y * 3 * jq, jq * 14);
                io.fill();
            }
            for (var e = tx.ᐃⵠⲆⵠΔ.ⲆΔᐃΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                qx.time;
                io.fillStyle = "#ff0000";
                Ub(io, c + jq * (g.x / (qx.ᐃᐃΔᐃᐃ * 100) * 600), d + g.y / (qx.ⵠΔᐃΔⵠ * 100) * 600 * jq, jq * 6);
                io.fill();
            }
            var h = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            if (h) {
                io.fillStyle = qx.time ? "#fff" : "#e39716";
                Ub(io, c + jq * (h.x / (qx.ᐃᐃΔᐃᐃ * 100) * 600), d + h.y / (qx.ⵠΔᐃΔⵠ * 100) * 600 * jq, jq * 12);
                io.fill();
            }
        }
    }
    ᐃΔⲆᐃⵠ = [];
    ᐃᐃⵠᐃⲆⲆΔ = [];
    function Lp(a) {
        const b = Math.random;
        const c = [];
        Math.random = function () {
            for (let a = 0; a < 2614; a++) {
                c.push(a);
            }
            return b();
        };
    }
    function Wp() {
        if (!rx.ⵠⲆⲆⲆ.open && !rx.ⲆⵠΔΔⵠ.open && !rx.ⲆᐃⲆΔ.open && !rx.ⵠᐃⵠⵠ.open) {
            rx.ⵠⲆΔⲆ.open = _e;
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < qx.ⵠⲆⵠ[34].length; d++) {
                    var e = qx.ⵠⲆⵠ[34][d];
                    var f = og.ΔⲆⵠᐃ(e, b);
                    if (f < c) {
                        c = f;
                        rx.ⵠⲆΔⲆ.open = Aq;
                        rx.ⵠⲆΔⲆ.ᐃᐃᐃΔⵠΔᐃ = e.info & 31;
                        rx.ⵠⲆΔⲆ.ᐃΔⲆΔⲆ = (e.info & 992) >> 5;
                        rx.ⵠⲆΔⲆ.ⵠᐃⲆΔⲆᐃⵠ = (e.info & 31744) >> 10;
                        rx.ⵠⲆΔⲆ.ΔⵠⲆⲆ = e.ΔⵠⲆⲆ;
                        rx.ⵠⲆΔⲆ.ΔᐃΔⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ᐃⵠ[722];
                    var a = (j = tx.ⲆᐃΔⲆⵠⵠᐃ).info.translate.x - 32;
                    Rp(io, g, a, 0);
                    if (rx.ⵠⲆΔⲆ.ᐃᐃᐃΔⵠΔᐃ > 0) {
                        j.ⵠᐃΔⵠ(io);
                        if ((k = rx.ⵠⲆΔⲆ.ᐃᐃᐃΔⵠΔᐃ) > 1) {
                            Ip(k, j);
                        }
                    }
                    var j = tx.ⲆⲆᐃᐃΔⵠⵠ;
                    if (rx.ⵠⲆΔⲆ.ⵠᐃⲆΔⲆᐃⵠ > 0) {
                        j.ⵠᐃΔⵠ(io);
                        if ((k = rx.ⵠⲆΔⲆ.ⵠᐃⲆΔⲆᐃⵠ) > 1) {
                            Ip(k, j);
                        }
                    }
                    var k;
                    j = tx.ⵠᐃⲆᐃᐃᐃⲆ;
                    if (rx.ⵠⲆΔⲆ.ᐃΔⲆΔⲆ > 0) {
                        j.ⵠᐃΔⵠ(io);
                        if ((k = rx.ⵠⲆΔⲆ.ᐃΔⲆΔⲆ) > 1) {
                            Ip(k, j);
                        }
                    }
                }
            }
        }
    }
    function Np() {
        rx.ⵠⲆⲆⲆ.id = -1;
        rx.ⵠⲆⲆⲆ.lock = false;
        rx.ⵠⲆⲆⲆ.locked = kk;
        rx.ⵠⲆⲆⲆ.ΔᐃΔᐃᐃᐃⲆ = Fl;
        rx.ⵠⲆⲆⲆ.ⵠΔⵠⲆⲆᐃᐃ = jt;
        rx.ⵠⲆⲆⲆ.open = false;
        var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
        var c = 100;
        if (b) {
            for (var d = 0; d < qx.ⵠⲆⵠ[11].length; d++) {
                var e = qx.ⵠⲆⵠ[11][d];
                var f = og.ΔⲆⵠᐃ(e, b);
                if (c > f) {
                    c = f;
                    rx.ⵠⲆⲆⲆ.open = true;
                    rx.ⵠⲆⲆⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    rx.ⵠⲆⲆⲆ.ⲆⲆⵠΔ = e.info;
                    rx.ⵠⲆⲆⲆ.ΔⵠⲆⲆ = e.ΔⵠⲆⲆ;
                    rx.ⵠⲆⲆⲆ.ΔᐃΔⵠⲆ = e.id;
                    rx.ⵠⲆⲆⲆ.locked = e.lock;
                    rx.ⵠⲆⲆⲆ.lock = !!e.lock && e.ΔⵠⲆⲆ != rx.id && !rx.ΔΔⲆⵠᐃᐃᐃ(e.ΔⵠⲆⲆ);
                    rx.ⵠⲆⲆⲆ.ⵠΔⵠⲆⲆᐃᐃ = e.ΔⵠⲆⲆ === rx.id && !rx.ⵠⲆⲆⲆ.locked && rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(148) != -1;
                    if (rx.ⵠⲆⲆⲆ.locked && rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(158) != -1) {
                        rx.ⵠⲆⲆⲆ.ΔᐃΔᐃᐃᐃⲆ = true;
                    }
                }
            }
            if (c < 100) {
                var g = ᐃⵠ[339];
                var a = tx.ΔⲆᐃ[0];
                var j = Math.floor(a.info.translate.x + (a.info.ⵠΔ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.ⵠΔ[0].height - g.height) / 2) + 3;
                Rp(io, g, j, k);
                if ((!rx.ⵠⲆⲆⲆ.lock || rx.id === rx.ⵠⲆⲆⲆ.ΔⵠⲆⲆ) && rx.ⵠⲆⲆⲆ.id >= 0) {
                    (a = tx.ΔⲆᐃ[rx.ⵠⲆⲆⲆ.id]).ⵠᐃΔⵠ(io);
                    var h = rx.ⵠⲆⲆⲆ.ⲆⲆⵠΔ;
                    if (h > 1) {
                        Ip(h, a);
                    }
                }
                if (rx.ⵠⲆⲆⲆ.lock) {
                    tx.ᐃⲆᐃΔΔⲆᐃ.ⵠᐃΔⵠ(io);
                } else if (rx.ⵠⲆⲆⲆ.ⵠΔⵠⲆⲆᐃᐃ) {
                    tx.ΔΔⲆⵠⵠⲆᐃ.ⵠᐃΔⵠ(io);
                }
                if (rx.ⵠⲆⲆⲆ.ΔᐃΔᐃᐃᐃⲆ) {
                    tx.ⲆᐃΔΔΔᐃⲆ.ⵠᐃΔⵠ(io);
                }
            }
        }
    }
    function qp() {
        if (!rx.ⵠⲆⲆⲆ.open) {
            rx.ⲆⵠΔΔⵠ.ⲆⲆⵠΔ = 0;
            rx.ⲆⵠΔΔⵠ.open = false;
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; qx.ⵠⲆⵠ[18].length > d; d++) {
                    var e = qx.ⵠⲆⵠ[18][d];
                    var f = og.ΔⲆⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        rx.ⲆⵠΔΔⵠ.open = true;
                        rx.ⲆⵠΔΔⵠ.ⲆⲆⵠΔ = e.info;
                        rx.ⲆⵠΔΔⵠ.ΔⵠⲆⲆ = e.ΔⵠⲆⲆ;
                        rx.ⲆⵠΔΔⵠ.ΔᐃΔⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ᐃⵠ[411];
                    var a = tx.Δᐃⵠⵠⵠᐃⵠ;
                    var j = Math.floor(a.info.translate.x + (a.info.ⵠΔ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.ⵠΔ[0].height - g.height) / 2) + 3;
                    Rp(io, g, j, k);
                    if (rx.ⲆⵠΔΔⵠ.ⲆⲆⵠΔ > 0) {
                        a.ⵠᐃΔⵠ(io);
                        var h = rx.ⲆⵠΔΔⵠ.ⲆⲆⵠΔ;
                        if (h > 1) {
                            Ip(h, a);
                        }
                    }
                }
            }
        }
    }
    function Hp() {
        if (rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length > 0) {
            var b = {
                x: tx.ᐃⵠⲆⵠΔ.translate.x,
                y: tx.ᐃⵠⲆⵠΔ.translate.y - jq * 120
            };
        } else {
            b = {
                x: tx.ᐃⵠⲆⵠΔ.translate.x,
                y: tx.ᐃⵠⲆⵠΔ.translate.y - jq * 50
            };
        }
        io.globalAlpha = 0.8;
        var c = ᐃⵠ[259][qx.time];
        Rp(io, c, b.x, b.y);
        io.globalAlpha = 1;
        if (tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.x > -1) {
            io.fillStyle = "#660000";
            Ub(io, b.x + jq * tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.x, b.y + jq * tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.y, jq * 5);
            io.fill();
        }
        var d = jq;
        for (var f = tx.ᐃⵠⲆⵠΔ.ⲆΔᐃΔ, g = 0; f.length > g; g++) {
            var h = f[g];
            qx.time;
            io.fillStyle = "#ff0000";
            Ub(io, b.x + h.x / (qx.ᐃᐃΔᐃᐃ * 100) * 193 * jq, b.y + h.y / (qx.ⵠΔᐃΔⵠ * 100) * 193 * jq, jq * 2);
            io.fill();
        }
        var i = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
        if (i) {
            io.fillStyle = qx.time ? "#fff" : "#e39716";
            Ub(io, b.x + jq * (i.x / (qx.ᐃᐃΔᐃᐃ * 100) * 193), b.y + i.y / (qx.ⵠΔᐃΔⵠ * 100) * 193 * jq, jq * 4);
            io.fill();
        }
        jq = d;
    }
    function Up() {
        if (!rx.ⵠⲆⲆⲆ.open && !rx.ⲆⵠΔΔⵠ.open && !rx.ⲆᐃⲆΔ.open && !rx.ⵠⲆΔⲆ.open && !rx.ⵠᐃⵠⵠ.open) {
            rx.sign.open = false;
            var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var b = 100;
            if (a) {
                for (var c = 0; c < qx.ⵠⲆⵠ[36].length; c++) {
                    var d = qx.ⵠⲆⵠ[36][c];
                    var e = og.ΔⲆⵠᐃ(d, a);
                    if (e < b && d.info === 0 && rx.id === d.ΔⵠⲆⲆ) {
                        rx.sign.open = Bs;
                        b = e;
                        rx.sign.ΔᐃΔⵠⲆ = d.id;
                    }
                }
                if (b < 100) {
                    tx.sign.button.ⵠᐃΔⵠ(io);
                }
            }
        }
    }
    function Yp() {
        if (!rx.ⵠⲆⲆⲆ.open && !rx.ⲆⵠΔΔⵠ.open) {
            rx.ⵠᐃⵠⵠ.open = false;
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; _f.length > d; d++) {
                    for (var e = _f[d][0], f = _f[d][1], j = 0; j < qx.ⵠⲆⵠ[e].length; j++) {
                        var k = qx.ⵠⲆⵠ[e][j];
                        var m = og.ΔⲆⵠᐃ(k, b);
                        if (c > m) {
                            c = m;
                            rx.ⵠᐃⵠⵠ.ⵠⲆⵠᐃⲆⵠᐃ = f;
                            rx.ⵠᐃⵠⵠ.type = e;
                            rx.ⵠᐃⵠⵠ.open = gg;
                            rx.ⵠᐃⵠⵠ.ᐃᐃᐃΔⵠΔᐃ = k.info & 255;
                            rx.ⵠᐃⵠⵠ.ᐃᐃΔⲆⲆᐃΔ = (k.info & 65280) >> 8;
                            rx.ⵠᐃⵠⵠ.ΔⵠⲆⲆ = k.ΔⵠⲆⲆ;
                            rx.ⵠᐃⵠⵠ.ΔᐃΔⵠⲆ = k.id;
                        }
                    }
                }
                if (c < 100) {
                    var p = ᐃⵠ[656];
                    var h = (q = tx.ᐃⲆᐃᐃᐃⵠⲆ).info.translate.x - 33;
                    Rp(io, p, h, 0);
                    if (rx.ⵠᐃⵠⵠ.ᐃᐃᐃΔⵠΔᐃ > 0) {
                        q.ⵠᐃΔⵠ(io);
                        var l = rx.ⵠᐃⵠⵠ.ᐃᐃᐃΔⵠΔᐃ;
                        if (l > 1) {
                            Ip(l, q);
                        }
                    }
                    switch (rx.ⵠᐃⵠⵠ.ⵠⲆⵠᐃⲆⵠᐃ) {
                        case 108:
                            var q = tx.ⵠΔᐃᐃⵠᐃΔ;
                            break;
                        case 111:
                            q = tx.ΔΔⲆⲆᐃᐃⲆ;
                            break;
                        case 112:
                            q = tx.ΔᐃᐃⵠᐃΔⵠ;
                            break;
                        case 121:
                            q = tx.ⲆⲆⲆⲆΔⲆΔ;
                            break;
                        case 202:
                            q = tx.ΔⵠᐃⵠⲆⲆⵠ;
                    }
                    if (rx.ⵠᐃⵠⵠ.ᐃᐃΔⲆⲆᐃΔ > 0) {
                        q.ⵠᐃΔⵠ(io);
                        l = rx.ⵠᐃⵠⵠ.ᐃᐃΔⲆⲆᐃΔ;
                        if (l > 1) {
                            Ip(l, q);
                        }
                    }
                }
            }
        }
    }
    function Kp() {
        if (rx.reconnect.enabled) {
            io.globalAlpha = 0.9;
            io.fillStyle = "#000";
            Hb(io, lo - 150, hq - 90, 300, 180, 15);
            io.fill();
            io.globalAlpha = 1;
            var a = ᐃⵠ[301];
            io.save();
            rx.reconnect.rotate = (rx.reconnect.rotate + yx * 2) % (Math.PI * 2);
            io.translate(no / 2, so / 2 - 25);
            io.rotate(rx.reconnect.rotate);
            Rp(io, a, -a.width / 2, -a.height / 2);
            io.restore();
            a = ᐃⵠ[525];
            Rp(io, a, (no - a.width) / 2, (so - a.height) / 2 + 25);
        }
    }
    var Vp = [];
    function Zp(b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = $n;
            }
            var c = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var d = c * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var e = c * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        var f = ᐃⵠ[853].length;
        ⵠΔ = ᐃⵠ[853][(this.ⵠΔᐃⵠ + this.ᐃⲆ % 2) % f][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        var g = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
        if (g && (this.ΔⵠⲆⲆ === rx.id || rx.ΔΔⲆⵠᐃᐃᐃ(this.ΔⵠⲆⲆ))) {
            if (og.ΔⲆⵠᐃ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - yx, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + yx, 1);
            }
        } else if (g && og.ΔⲆⵠᐃ(this, qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ]) < 150) {
            this.opacity = Math.max(this.opacity - yx, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + yx, 1);
        }
        var a = io.globalAlpha;
        io.globalAlpha *= this.opacity;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2 + d, -ⵠⵠΔ / 2 + e, ⵠᐃⵠ, ⵠⵠΔ);
        io.globalAlpha = a;
        io.restore();
    }
    function Xp() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && Fl == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = va;
            }
            var a = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = a * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ⵠΔ = ᐃⵠ[167][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2 + b, -ⵠⵠΔ / 2 + c, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.lock) {
            ⵠΔ = ᐃⵠ[148][qx.time];
            ⵠᐃⵠ = -ⵠΔ.width;
            ⵠⵠΔ = -ⵠΔ.height;
            Rp(io, ⵠΔ, -ⵠᐃⵠ / 2 + b - jq * 1, -ⵠⵠΔ / 2 + c, ⵠᐃⵠ, ⵠⵠΔ);
        }
        io.restore();
    }
    function $p() {
        var b = rx.ⲆⵠΔᐃⵠ;
        var c = tx.ⵠΔᐃᐃ;
        if (b.ⵠᐃᐃ) {
            b.ⵠᐃᐃ = false;
            var d = b.ⲆⲆⲆⵠⵠ;
            var e = c.ⲆⲆ.width;
            var f = c.ⲆⲆ.height;
            var g = c.ⵠ;
            var a = qx.ⲆΔᐃΔ;
            var i = kj;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ⵠΔ, 0, 0);
            for (var j = 0; d.length > j; j++) {
                var k = a[d[j]];
                if ((qx.mode !== 1 || k.ΔⲆᐃᐃΔ !== "spectator") && (qx.mode !== 2 || k.ᐃΔΔΔ !== 0)) {
                    if (rx.id == d[j]) {
                        i = true;
                        if (qx.mode === 3 && k.ᐃΔΔΔ === 0) {
                            Ⲇⵠ = "#FF0000";
                        } else {
                            Ⲇⵠ = "#FFF";
                        }
                    } else if (qx.mode === 3 && k.ᐃΔΔΔ === 0) {
                        Ⲇⵠ = "#990000";
                    } else {
                        Ⲇⵠ = "#A1BDCD";
                    }
                    g.drawImage(Cu(jq, "" + (j + 1), jq * 15, Ⲇⵠ), jq * 20, (40 + j * 22) * jq);
                    k.ⲆⲆΔᐃᐃᐃⲆ ||= Cu(jq, k.ΔⲆᐃᐃΔ, jq * 15, Ⲇⵠ, _t, jj, xn, oh, jq * 110);
                    g.drawImage(k.ⲆⲆΔᐃᐃᐃⲆ, jq * 39, jq * (40 + j * 22));
                    g.drawImage(Cu(jq, og.ⲆⵠⲆⲆⵠᐃᐃ(k.ⲆⲆⲆᐃΔ), jq * 15, Ⲇⵠ), jq * 156, (40 + j * 22) * jq);
                }
            }
            if (!i) {
                if (qx.mode === 0 || qx.mode === 3 || qx.mode === 4 || qx.mode === 5 || qx.mode === 7 || qx.mode === 1 && !rx.ΔⲆⲆⵠΔΔⵠ || qx.mode === 2 && !rx.ⵠⲆⲆᐃⲆ) {
                    g.drawImage(ᐃⵠ[306], jq * 15, jq * (46 + j * 22));
                    g.drawImage(Cu(jq, og.ⲆⵠⲆⲆⵠᐃᐃ(qx.ⲆΔᐃΔ[rx.id].ⲆⲆⲆᐃΔ), jq * 15, "#FFF"), jq * 100, jq * (46 + j * 22));
                }
            }
        }
        Rp(io, c.ⲆⲆ, c.translate.x, c.translate.y);
    }
    function Ju() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[239][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Ku() {
        var a = rx.ⵠⵠⵠⲆⲆ;
        if (a.wait) {
            var b = a.timeout.ⵠᐃᐃ();
            io.save();
            var c = ᐃⵠ[537];
            io.translate(c.width - jq * 2, tx.ᐃᐃⵠᐃ.translate.y - jq * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Rp(io, c, d, e);
            io.beginPath();
            io.lineWidth = jq * 5;
            io.strokeStyle = Er.ⵠᐃᐃΔⲆᐃⲆ[qx.time];
            io.lineCap = "round";
            io.arc(0, e + c.height / 2, jq * 25, 0, a.timeout.ᐃᐃⲆ * (Math.PI * 2));
            io.stroke();
            io.restore();
            if (b) {
                a.wait = false;
                a.timeout.ᐃᐃⲆ = 0;
                a.timeout.ΔΔⲆ = false;
            }
        }
    }
    function Lu() {
        io.save();
        var a = jq;
        if (rx.ᐃᐃⵠᐃ.ⵠⵠᐃⵠΔ.x < 0.25) {
            io.globalAlpha = rx.ᐃᐃⵠᐃ.ᐃΔⲆΔⲆΔⲆ.ᐃᐃⲆ;
        }
        var b = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length > 0 ? -70 : 0;
        if (rx.ⵠⲆⲆⲆ.open || rx.ⲆⵠΔΔⵠ.open && rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(109) != -1 || rx.ⲆᐃⲆΔ.open && rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(134) != -1 || rx.ⵠᐃⵠⵠ.open && rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(109) != -1 || rx.ⲆⲆΔΔᐃ.open && rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(180) != -1 || rx.ⵠⲆΔⲆ.open && (rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(109) != -1 || rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(131) != -1)) {
            b -= jq * 50;
        }
        io.translate((no - jq * 950) / 2, b);
        io.fillStyle = "#69A148";
        io.fillRect(this.translate.x + jq * 37, this.translate.y + jq * 17, jq * (rx.ᐃᐃⵠᐃ.ⵠⵠᐃⵠΔ.x * 178), jq * 18);
        io.globalAlpha = 1;
        if (rx.ᐃᐃⵠᐃ.ⲆΔᐃⵠΔⵠΔ.x < 0.35) {
            io.fillStyle = "#8F050A";
            io.globalAlpha = rx.ᐃᐃⵠᐃ.ⵠⵠᐃⲆᐃⵠⲆ.ᐃᐃⲆ;
            io.fillRect(this.translate.x + jq * 277, this.translate.y + jq * 17, jq * 178, jq * 18);
            io.globalAlpha = 1;
        }
        io.fillStyle = "#AF352A";
        io.fillRect(this.translate.x + jq * 277, this.translate.y + jq * 17, rx.ᐃᐃⵠᐃ.ⲆΔᐃⵠΔⵠΔ.x * 178 * jq, jq * 18);
        if (rx.ᐃᐃⵠᐃ.Δᐃᐃᐃⵠ.x < 0.35) {
            io.fillStyle = "#366B91";
            io.globalAlpha = rx.ᐃᐃⵠᐃ.ᐃᐃⲆⲆⵠΔⵠ.ᐃᐃⲆ;
            io.fillRect(this.translate.x + jq * 517, this.translate.y + jq * 17, jq * 178, jq * 18);
            io.globalAlpha = 1;
        }
        io.fillStyle = "#669BB1";
        io.fillRect(this.translate.x + jq * 517, this.translate.y + jq * 17, rx.ᐃᐃⵠᐃ.Δᐃᐃᐃⵠ.x * 178 * jq, jq * 18);
        if (rx.ᐃᐃⵠᐃ.Δᐃᐃᐃⵠ.x > 0.99) {
            if (rx.ᐃᐃⵠᐃ.ⵠⵠⵠᐃᐃ.x < 0.35) {
                io.fillStyle = "#6C4036";
                io.globalAlpha = rx.ᐃᐃⵠᐃ.ⲆᐃⲆⲆⵠⲆⲆ.ᐃᐃⲆ;
                io.fillRect(this.translate.x + jq * 517, this.translate.y + jq * 17, jq * 178, jq * 18);
                io.globalAlpha = 1;
            }
            io.fillStyle = "#9C4036";
            io.fillRect(this.translate.x + jq * 517, this.translate.y + jq * 17, jq * ((1 - rx.ᐃᐃⵠᐃ.ⵠⵠⵠᐃᐃ.x) * 178), jq * 18);
        }
        if (rx.ᐃᐃⵠᐃ.ⲆⲆⲆⲆΔᐃⲆ.x < 0.35) {
            io.fillStyle = "#001A57";
            io.globalAlpha = rx.ᐃᐃⵠᐃ.ⲆⲆⲆΔⵠⵠΔ.ᐃᐃⲆ;
            io.fillRect(this.translate.x + jq * 757, this.translate.y + jq * 17, jq * 178, jq * 18);
            io.globalAlpha = 1;
        }
        io.fillStyle = "#074A87";
        io.fillRect(this.translate.x + jq * 757, this.translate.y + jq * 17, jq * (rx.ᐃᐃⵠᐃ.ⲆⲆⲆⲆΔᐃⲆ.x * 178), jq * 18);
        jq = a;
        Rp(io, this.ⵠΔ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        io.restore();
        if (rx.ᐃᐃⵠᐃ.ᐃᐃⵠᐃΔⲆΔ.x < 0.99) {
            var c = Math.floor(lo - ᐃⵠ[608].width / 2);
            b += this.translate.y - ᐃⵠ[608].height - jq * 5;
            io.fillStyle = "#BBE8EF";
            io.fillRect(c + 5, b + jq * 5, jq * 588 * rx.ᐃᐃⵠᐃ.ᐃᐃⵠᐃΔⲆΔ.x, jq * 10);
            if (rx.ᐃᐃⵠᐃ.ᐃᐃⵠᐃΔⲆΔ.x < 0.35) {
                io.fillStyle = "#9BA8AF";
                io.globalAlpha = rx.ᐃᐃⵠᐃ.ΔⲆᐃΔⵠΔΔ.ᐃᐃⲆ;
                io.fillRect(c + 5, b + 5, jq * 588, jq * 10);
                io.globalAlpha = 1;
            }
            Rp(io, ᐃⵠ[608], c, b);
            this.y = b;
        }
    }
    function Mu() {
        var a = qx.ⵠⵠⵠⵠⲆ;
        var b = ᐃⵠ[725][qx.time];
        Rp(io, b, a.translate.x, a.translate.y);
        io.save();
        io.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        qx.ⵠⵠⵠⵠⲆ.now = (new Date().getTime() - a.ᐃᐃᐃⲆΔ + a.ⵠⵠⲆⵠⲆ) % 480000;
        var c = Math.PI * 2 * qx.ⵠⵠⵠⵠⲆ.now / 480000 - Math.PI / 2;
        io.rotate(c);
        Rp(io, ᐃⵠ[726], -b.width / 2, -b.height / 2);
        io.restore();
    }
    function Nu() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[811][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Ou() {
        var a = rx.ΔΔΔⵠΔ;
        if (a.wait) {
            var b = a.timeout.ⵠᐃᐃ();
            io.save();
            var c = ᐃⵠ[792];
            io.translate(c.width - jq * 2, tx.ᐃᐃⵠᐃ.translate.y - jq * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Rp(io, c, d, e);
            io.beginPath();
            io.lineWidth = jq * 5;
            io.strokeStyle = Er.ⲆΔᐃᐃⵠᐃᐃ[qx.time];
            io.lineCap = "round";
            io.arc(9, e + c.height / 2, jq * 25, 0, Math.PI * 2 * a.timeout.ᐃᐃⲆ);
            io.stroke();
            io.restore();
            if (b) {
                a.wait = $n;
                a.timeout.ᐃᐃⲆ = 0;
                a.timeout.ΔΔⲆ = false;
            }
        }
    }
    function Pu(a) {
        if ((a = a / 100) <= 0.8) {
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.angle);
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
                if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == cd) {
                    this.ⵠΔⲆⵠ.ⵠᐃᐃ = al;
                }
                var b = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
                var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            io.globalAlpha = 0.5;
            Kb(io, c, d, jq * 18, a);
            qb(io, null, "#000000", jq * 18);
            io.globalAlpha = 1;
            Kb(io, c, d, jq * 18, a);
            qb(io, null, Er.ⲆᐃᐃΔᐃⵠⵠ[qx.time], jq * 6);
            io.restore();
        }
    }
    function Qu() {
        for (var b = rx.ⲆⲆΔⵠ, c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ], d = 0; b.Δᐃⵠⵠⵠ.length > d; d++) {
            var e = b.Δᐃⵠⵠⵠ[d];
            var f = vn;
            if ((c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ]) && (e.id == c.right || c.ᐃⵠⵠᐃᐃ == e.id && c.ᐃⵠⵠᐃᐃ > 0)) {
                f = true;
                Rp(io, e.info.ⵠΔ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.ⵠᐃΔⵠ(io);
            }
            var g = rx.ⲆⲆΔⵠ.ⲆΔⵠ[e.id];
            if (g > 1) {
                Ip(g, e);
            }
            if (g > 0) {
                Qp(d, e, f);
            }
            var h = rx.ⵠⲆⲆⲆ;
            if (!!h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ΔⵠⲆⲆ == rx.id)) {
                tx.ΔΔΔⲆⵠ[e.id].ⵠᐃΔⵠ(io);
            }
            if (rx.ⲆⵠΔΔⵠ.open && e.id == 109) {
                tx.ΔΔΔⲆⵠ[e.id].ⵠᐃΔⵠ(io);
            }
            if (rx.ⲆⲆΔΔᐃ.open && e.id == 180) {
                tx.ΔΔΔⲆⵠ[e.id].ⵠᐃΔⵠ(io);
            }
            if (rx.ⲆᐃⲆΔ.open && e.id == 134) {
                tx.ΔΔΔⲆⵠ[e.id].ⵠᐃΔⵠ(io);
            }
            if (rx.ⵠᐃⵠⵠ.open && e.id == 109) {
                tx.ΔΔΔⲆⵠ[e.id].ⵠᐃΔⵠ(io);
            }
            if (!!rx.ⵠⲆΔⲆ.open && (e.id == 109 || e.id == 131)) {
                tx.ΔΔΔⲆⵠ[e.id].ⵠᐃΔⵠ(io);
            }
        }
        if (e && b.max > d) {
            var j = ᐃⵠ[334][2];
            Δᐃ = e.info.translate.x;
            ⵠⲆⲆ = e.info.translate.y;
            ⵠΔᐃⵠ = 1;
            for (; d < b.max; d++, ⵠΔᐃⵠ++) {
                Rp(io, j, Δᐃ + (j.width + 5) * ⵠΔᐃⵠ, ⵠⲆⲆ);
            }
        }
    }
    function Ru() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[321][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Su() {
        var a = rx.ⵠⵠᐃⵠⵠ;
        if (a.wait) {
            var b = a.timeout.ⵠᐃᐃ();
            io.save();
            var c = ᐃⵠ[794];
            io.translate(c.width - jq * 12, tx.ᐃᐃⵠᐃ.translate.y - jq * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Rp(io, c, d, e);
            io.beginPath();
            io.lineWidth = jq * 5;
            io.strokeStyle = Er.ⲆΔᐃᐃⵠᐃᐃ[qx.time];
            io.lineCap = "round";
            io.arc(9, e + c.height / 2, jq * 25, 0, a.timeout.ᐃᐃⲆ * (Math.PI * 2));
            io.stroke();
            io.restore();
            if (b) {
                a.wait = false;
                a.timeout.ᐃᐃⲆ = 0;
                a.timeout.ΔΔⲆ = $n;
            }
        }
    }
    function Tu() {
        var b = rx.ⲆⲆⵠⵠⵠ;
        if (b.wait) {
            var c = b.timeout.ⵠᐃᐃ();
            io.save();
            var d = ᐃⵠ[562];
            var e = ᐃⵠ[537].height + jq * 25;
            io.translate(d.width, tx.ᐃᐃⵠᐃ.translate.y - jq * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Rp(io, d, f + 2, g);
            io.beginPath();
            io.lineWidth = jq * 5;
            io.strokeStyle = Er.ⵠᐃᐃΔⲆᐃⲆ[qx.time];
            io.lineCap = "round";
            io.arc(0, g + d.height / 2, jq * 25, 0, b.timeout.ᐃᐃⲆ * (Math.PI * 2));
            io.stroke();
            io.restore();
            if (c) {
                b.wait = w;
                b.timeout.ᐃᐃⲆ = 0;
                b.timeout.ΔΔⲆ = jt;
            }
        }
    }
    function Uu(a) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == cd) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var b = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var c = b * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = -e.width;
        ⵠⵠΔ = -e.height;
        Rp(io, e, -ⵠᐃⵠ / 2 + c, -ⵠⵠΔ / 2 + d, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Vu(a) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var b = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        ⵠΔ = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2 + c, -ⵠⵠΔ / 2 + d, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Wu() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[837][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Xu() {
        var a = rx.ⲆΔⲆᐃ;
        if (a.ΔᐃᐃⲆⵠ) {
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            io.save();
            io.translate(rx.ΔᐃⲆ.x + b.x, rx.ΔᐃⲆ.y + b.y);
            var c = ᐃⵠ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - jq * 125;
            Rp(io, c, d, e);
            io.beginPath();
            io.lineWidth = jq * 5;
            io.strokeStyle = Er.ⵠΔᐃᐃⵠⲆᐃ[qx.time];
            io.lineCap = "round";
            io.arc(0, e + c.height / 2, jq * 25, 0, a.timeout.ᐃᐃⲆ * (Math.PI * 2));
            io.stroke();
            io.restore();
        }
    }
    function Yu() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[848][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Zu() {
        var a = -8;
        if (rx.ⲆⲆⲆᐃⲆ.enabled) {
            var b = ᐃⵠ[546];
            Rp(io, b, rx.ⲆⲆⲆᐃⲆ.translate.x, rx.ⲆⲆⲆᐃⲆ.translate.y + a);
            a += 70;
        }
        if (rx.ⵠΔⵠⲆᐃᐃⵠ === 1) {
            b = ᐃⵠ[549];
            Rp(io, b, rx.ⲆⲆⲆᐃⲆ.translate.x, rx.ⲆⲆⲆᐃⲆ.translate.y + a);
            a += 70;
        } else if (rx.ᐃᐃⵠᐃ.Δᐃᐃᐃⵠ.x < 0.25 || rx.ᐃᐃⵠᐃ.ⲆΔᐃⵠΔⵠΔ.x < 0.25 || rx.ᐃᐃⵠᐃ.ⲆⲆⲆⲆΔᐃⲆ.x < 0.25 || rx.ᐃᐃⵠᐃ.ᐃᐃⵠᐃΔⲆΔ.x < 0.25 || rx.ᐃᐃⵠᐃ.ⵠⵠⵠᐃᐃ.x < 0.25) {
            b = ᐃⵠ[548];
            Rp(io, b, rx.ⲆⲆⲆᐃⲆ.translate.x, rx.ⲆⲆⲆᐃⲆ.translate.y + a);
            a += 70;
        }
        if (rx.ᐃⲆΔⲆⵠ > 0) {
            b = ᐃⵠ[547];
            Rp(io, b, rx.ⲆⲆⲆᐃⲆ.translate.x, rx.ⲆⲆⲆᐃⲆ.translate.y + a);
            var c = Vp[rx.ᐃⲆΔⲆⵠ];
            if (c === pt) {
                c = Cu(jq, rx.ᐃⲆΔⲆⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Vp[rx.ᐃⲆΔⲆⵠ] = c;
            }
            if (rx.ᐃⲆΔⲆⵠ < 9) {
                Rp(io, c, rx.ⲆⲆⲆᐃⲆ.translate.x - 39, rx.ⲆⲆⲆᐃⲆ.translate.y + a + 20);
            } else {
                Rp(io, c, rx.ⲆⲆⲆᐃⲆ.translate.x - 46, rx.ⲆⲆⲆᐃⲆ.translate.y + a + 20);
            }
        }
    }
    function $u(a) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == jt) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var b = yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600 * jq;
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.ⵠᐃΔⵠᐃ.ⵠᐃᐃ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ⵠΔ = ᐃⵠ[872][Math.floor(this.id + this.color) % 5][qx.time];
        ⵠᐃⵠ = this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ * -ⵠΔ.width;
        ⵠⵠΔ = this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ * -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2 + c, -ⵠⵠΔ / 2 + d, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function _u(b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = Xg;
            }
            var c = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var d = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * c;
            var e = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !qx.transition) {
            var f = 0;
            for (var g = qx.ⵠⲆⵠ[0], a = 0; g.length > a; a++) {
                var h = og.ΔⲆⵠᐃ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - yx / 1.5) : Math.min(1, this.opacity + yx / 1.5);
            io.globalAlpha = this.opacity;
        }
        ⵠΔ = ᐃⵠ[b][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2 + d, -ⵠⵠΔ / 2 + e, ⵠᐃⵠ, ⵠⵠΔ);
        io.globalAlpha = 1;
        io.restore();
    }
    function av(a) {
        if ((a = a / 100) <= 0.95) {
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.angle);
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
                if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == cd) {
                    this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
                }
                var b = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
                var c = b * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
                var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            io.globalAlpha = 0.5;
            Kb(io, c, d, jq * 28, a);
            qb(io, null, "#000000", jq * 18);
            io.globalAlpha = 1;
            Kb(io, c, d, jq * 28, a);
            qb(io, null, Er.ⵠΔᐃᐃⵠⲆᐃ[qx.time], jq * 6);
            io.restore();
        }
    }
    function bv() {
        var b = rx.ⲆΔⲆᐃ;
        if (!b.ΔᐃᐃⲆⵠ && b.ΔΔΔᐃ > 0) {
            var c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            if (!c) {
                return;
            }
            io.save();
            if (Tr[b.ΔΔΔᐃ].ⲆⵠⲆⲆ === 0 && b.mode === 0) {
                io.translate(rx.ΔᐃⲆ.x + c.x, rx.ΔᐃⲆ.y + c.y);
                io.rotate(c.angle);
                io.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = rx.ΔᐃⲆ.x + (d - d % 100 + 50);
                e = rx.ΔᐃⲆ.y + (e - e % 100 + 50);
                io.translate(d, e);
            }
            var f = ᐃⵠ[b.ΔΔΔᐃ][qx.time];
            io.globalAlpha = 0.5;
            Rp(io, f, -f.width / 2, -f.height / 2);
            io.globalAlpha = 1;
            io.restore();
            if (Tr[b.ΔΔΔᐃ].ⲆⵠⲆⲆ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = Cu(jq, zb[336], 20, "#e2c340");
                    } else {
                        b.label[1] = Cu(jq, zb[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                Rp(io, f, lo + -f.width / 2, tx.ᐃᐃⵠᐃ.y - 26);
            }
        }
        if (b.ΔᐃᐃⲆⵠ) {
            var g = b.timeout.ⵠᐃᐃ();
            for (var a = 0; b.ⲆⲆΔⵠⵠ.length > a; a++) {
                var i = b.ⲆⲆΔⵠⵠ[a];
                if (i.id == b.id) {
                    var j = jq * 42;
                    var k = jq * 17;
                    Hb(io, i.info.translate.x, i.info.translate.y + (1 - b.timeout.ᐃᐃⲆ) * j, i.info.width, b.timeout.ᐃᐃⲆ * j + k, jq * 10);
                    io.fillStyle = "#55B973";
                    io.fill();
                    io.globalAlpha = 0.8;
                    i.ⵠᐃΔⵠ(io);
                } else {
                    io.globalAlpha = 0.5;
                    i.ⵠᐃΔⵠ(io);
                }
                io.globalAlpha = 1;
            }
            if (g) {
                b.ΔᐃᐃⲆⵠ = false;
                b.timeout.ᐃᐃⲆ = 0;
                b.timeout.ΔΔⲆ = false;
            }
            return kq;
        }
        for (a = 0; a < b.ⲆⲆΔⵠⵠ.length; a++) {
            b.ⲆⲆΔⵠⵠ[a].ⵠᐃΔⵠ(io);
        }
        return false;
    }
    var cv = 0;
    function dv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            var a = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + yx * 0.5) % (Math.PI * 2);
        }
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.save();
        io.rotate(this.rotate);
        ⵠΔ = ᐃⵠ[641][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.save();
        io.rotate(this.ΔᐃΔⵠΔⲆΔᐃᐃ);
        ⵠΔ = ᐃⵠ[642][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.restore();
    }
    function ev() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ΔᐃᐃⲆᐃⲆⲆ = Math.min(1, this.ΔᐃᐃⲆᐃⲆⲆ + yx * 2);
        io.globalAlpha = Math.min(1, Math.max(0, og.ΔⲆⵠᐃ(this, this.r) / 80)) * this.ΔᐃᐃⲆᐃⲆⲆ;
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[247][qx.time][this.ⲆᐃⲆⲆⵠ];
        if (this.ⲆᐃⲆⲆⵠ < 2) {
            ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -ⵠΔ.width;
            ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -ⵠΔ.height;
        } else if (this.ΔⵠⵠΔⵠⵠΔ === 0) {
            ⵠᐃⵠ = -ⵠΔ.width;
            ⵠⵠΔ = -ⵠΔ.height;
        } else {
            ⵠᐃⵠ = -ⵠΔ.width * 1.35;
            ⵠⵠΔ = -ⵠΔ.height * 1.35;
        }
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.globalAlpha = 1;
        io.restore();
    }
    function fv(f, e, i, j, k, n, a, o = 0, p) {
        for (var h = f; e >= h; h++) {
            for (var q = i; q <= j; q++) {
                var r = ox.ᐃⲆⲆⲆ[h][q];
                if (Ze !== r && $g !== r[n]) {
                    var s = r[n];
                    var t = ᐃⵠ[k][qx.time][s.ᐃⵠᐃⲆᐃⲆΔ];
                    Rp(io, t, rx.ΔᐃⲆ.x + "#e6636a" - t.width / (ΔΔᐃΔⲆ * 4), rx.ΔᐃⲆ.y + "#1a4935" - t.height / (ΔΔᐃΔⲆ * 4), t.width / (ΔΔᐃΔⲆ * 2), t.height / (ΔΔᐃΔⲆ * 2));
                    if (nx.ΔⵠᐃᐃΔ) {
                        var w = 2147483648;
                        var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
                        if (x < 0.2) {
                            x = Math.floor(ᐃⵠ[1025][qx.time][s.ᐃⵠᐃⲆᐃⲆΔ].length * (x * 5));
                            t = ᐃⵠ[1025][qx.time][s.ᐃⵠᐃⲆᐃⲆΔ][x];
                            Rp(io, t, rx.ΔᐃⲆ.x + "#e6636a" - t.width / (ΔΔᐃΔⲆ * 4), rx.ΔᐃⲆ.y + "#1a4935" - t.height / (ΔΔᐃΔⲆ * 4), t.width / (ΔΔᐃΔⲆ * 2), t.height / (ΔΔᐃΔⲆ * 2));
                        } else if (s.ΔᐃΔⲆΔᐃⲆ !== 0) {
                            t = ᐃⵠ[1026][qx.time];
                            var y = (cv + h % 2 * 30) % 60;
                            io.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
                            Rp(io, t, rx.ΔᐃⲆ.x + "#e6636a" - t.width / (ΔΔᐃΔⲆ * 4), rx.ΔᐃⲆ.y + "#1a4935" - t.height / (ΔΔᐃΔⲆ * 4) - 30 + y, t.width / (ΔΔᐃΔⲆ * 2), t.height / (ΔΔᐃΔⲆ * 2));
                            io.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function gv() {
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        a = this.info === 0 ? ᐃⵠ[248][qx.time] : ᐃⵠ[1222][qx.time];
        ⵠᐃⵠ = -a.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height;
        Rp(io, a, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && Eh == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var a = ᐃⵠ[1223];
            Rp(io, a, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function hv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && Xg == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = va;
            }
            var a = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        io.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[156][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + yx * 3) % (Math.PI * 2);
        }
        io.rotate(this.rotate);
        ⵠΔ = ᐃⵠ[1210][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
    }
    function iv(a, b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        c = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -c.width;
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -c.height;
        Rp(io, c, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && Nq == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var c = ᐃⵠ[b];
            Rp(io, c, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function jv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = al;
            }
            var b = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var c = b * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[668][qx.time];
            } else {
                f = ᐃⵠ[132][qx.time];
            }
            var g = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -f.width;
            var a = -f.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ⵠⵠⲆᐃⵠᐃⲆ.ⵠᐃᐃ();
            if (this.info & 16) {
                f = ᐃⵠ[638][qx.time];
            } else {
                f = ᐃⵠ[134][qx.time];
            }
            io.translate(0, f.height / 2);
            io.rotate(this.ⵠⵠⲆᐃⵠᐃⲆ.ᐃᐃⲆ);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    const kv = {};
    kv.get = function (a, b) {
        if (b !== "ΔΔΔᐃΔΔΔ") {
            const a = cj.setInterval;
            const b = a;
            const c = function () {
                a(c, 564);
                b(c, 334);
            };
            c();
        }
        return cj.Reflect.get(...arguments);
    };
    function lv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ⵠᐃΔⵠᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[1192][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width * this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -ⵠΔ.height * this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function mv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = Ur;
            }
            var a = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = a * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        io.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[155][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + yx * 3) % (Math.PI * 2);
        }
        io.rotate(this.rotate);
        ⵠΔ = ᐃⵠ[1206][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
    }
    function nv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var a = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
            var b = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        io.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[153][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + yx * 3) % (Math.PI * 2);
        }
        io.rotate(this.rotate);
        ⵠΔ = ᐃⵠ[1198][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
    }
    function ov() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        var a = og.ΔⲆⵠᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + yx / 2, 1.8) : Math.max(this.scale - yx, 1);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        this.ⲆⲆⲆᐃ = a < 350 ? Math.max(0, this.ⲆⲆⲆᐃ - yx * 2.2) : Math.min(1, this.ⲆⲆⲆᐃ + yx * 2.2);
        b = this.info & 1 ? ᐃⵠ[1114][qx.time] : ᐃⵠ[1113][qx.time];
        ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width * this.scale;
        ⵠⵠΔ = this.scale * (-b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        io.globalAlpha = 1 - this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        b = (this.info & 1) === 0 ? ᐃⵠ[235][qx.time] : ᐃⵠ[1098][qx.time];
        ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width * this.scale;
        ⵠⵠΔ = this.scale * (-b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        io.globalAlpha = this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                this.action -= 2;
            }
            io.globalAlpha = (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ) * (1 - this.ⲆⲆⲆᐃ);
            var b = ᐃⵠ[1115];
            ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width * this.scale;
            ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.height * this.scale;
            Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = this.ⲆⲆⲆᐃ * (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ);
            b = ᐃⵠ[1107];
            ⵠᐃⵠ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width);
            ⵠⵠΔ = this.scale * (-b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
            Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        b = this.info & 1 ? ᐃⵠ[1101][qx.time] : ᐃⵠ[1102][qx.time];
        ⵠᐃⵠ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width);
        ⵠⵠΔ = -b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        io.save();
        io.translate(jq * -20, jq * 0);
        io.rotate(this.rotate.ᐃᐃⲆ);
        io.globalAlpha = this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ * jq / 4, -ⵠⵠΔ * jq / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ) * this.ⲆⲆⲆᐃ;
            b = ᐃⵠ[1108];
            Rp(io, b, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        b = this.info & 1 ? ᐃⵠ[1104][qx.time] : ᐃⵠ[1105][qx.time];
        io.save();
        io.translate(jq * 20, jq * 0);
        io.rotate(-this.rotate.ᐃᐃⲆ);
        io.globalAlpha = this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = this.ⲆⲆⲆᐃ * (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ);
            b = ᐃⵠ[1109];
            Rp(io, b, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.globalAlpha = 1;
        io.restore();
        io.restore();
    }
    function pv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == Fl) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = $n;
            }
            var b = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = ᐃⵠ[716][qx.time];
            Rp(io, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ⵠᐃᐃ();
            var e = ᐃⵠ[720][qx.time];
            var f = this.up.ᐃᐃⲆ * -e.width;
            var g = this.up.ᐃᐃⲆ * -e.height;
            Rp(io, e, -f / 2 + jq * 1, -g / 2 + jq * 3, f, g);
        } else {
            e = ᐃⵠ[144][qx.time];
            Rp(io, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        io.restore();
    }
    function qv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && vn == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var b = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[970][qx.time];
            } else {
                f = ᐃⵠ[208][qx.time];
            }
            var g = -f.width * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            var a = -f.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃⵠ[971][qx.time];
            } else {
                f = ᐃⵠ[209][qx.time];
            }
            io.translate(0, f.height / 2);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    function rv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == vg) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = Fl;
            }
            var b = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[838][qx.time];
            } else {
                f = ᐃⵠ[191][qx.time];
            }
            var g = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -f.width;
            var a = -f.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃⵠ[839][qx.time];
            } else {
                f = ᐃⵠ[192][qx.time];
            }
            io.translate(0, f.height / 2);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    function sv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ⵠΔⲆᐃ.ⵠᐃᐃ();
        io.globalAlpha = 0.3;
        var a = ᐃⵠ[282][qx.time];
        var b = -a.width * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
        var c = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -a.height;
        Rp(io, a, -b / 2, -c / 2, b, c);
        io.globalAlpha = 1;
        io.restore();
    }
    function tv() {
        var a = xn;
        var b = oh;
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        if (this.ᐃⲆⲆⵠⲆ >= 0.1 && this.ᐃⲆⲆⵠⲆ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ᐃⲆⲆⵠⲆ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = ᐃⵠ[1150][qx.time];
            ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.width;
            ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height;
            io.globalAlpha = c;
            Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            b = ᐃⵠ[1151];
        }
        if (this.ᐃⲆⲆⵠⲆ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ᐃⲆⲆⵠⲆ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = ᐃⵠ[1152][qx.time];
            ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.width;
            ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height;
            io.globalAlpha = c;
            Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            b = ᐃⵠ[1153];
        }
        if (this.action & 2 && b !== undefined) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && cb == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ) * c;
            ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width;
            ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.height;
            Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        }
        io.globalAlpha = 1;
        io.restore();
    }
    function uv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        var a = og.ΔⲆⵠᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + yx / 2, 1.8) : Math.max(this.scale - yx, 1);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        this.ⲆⲆⲆᐃ = a < 350 ? Math.max(0, this.ⲆⲆⲆᐃ - yx * 2.2) : Math.min(1, this.ⲆⲆⲆᐃ + yx * 2.2);
        b = ᐃⵠ[1135][qx.time];
        ⵠᐃⵠ = -b.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        ⵠⵠΔ = this.scale * (-b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        io.globalAlpha = 1 - this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        b = ᐃⵠ[1119][qx.time];
        ⵠᐃⵠ = -b.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        ⵠⵠΔ = -b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        io.globalAlpha = this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                this.action -= 2;
            }
            io.globalAlpha = (1 - this.ⲆⲆⲆᐃ) * (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ);
            var b = ᐃⵠ[1136];
            ⵠᐃⵠ = -b.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
            ⵠⵠΔ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.height);
            Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ) * this.ⲆⲆⲆᐃ;
            b = ᐃⵠ[1128];
            ⵠᐃⵠ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -b.width);
            ⵠⵠΔ = -b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
            Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        b = ᐃⵠ[1122][qx.time];
        ⵠᐃⵠ = -b.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        ⵠⵠΔ = -b.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        io.save();
        io.translate(jq * -40, jq * 80);
        io.rotate(this.rotate.ᐃᐃⲆ);
        io.globalAlpha = this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = this.ⲆⲆⲆᐃ * (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ);
            b = ᐃⵠ[1129];
            Rp(io, b, jq * -ⵠᐃⵠ / 4, -ⵠⵠΔ * jq / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        b = ᐃⵠ[1125][qx.time];
        io.save();
        io.translate(jq * 40, jq * 80);
        io.rotate(-this.rotate.ᐃᐃⲆ);
        io.globalAlpha = this.ⲆⲆⲆᐃ;
        Rp(io, b, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = this.ⲆⲆⲆᐃ * (0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ);
            b = ᐃⵠ[1130];
            Rp(io, b, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.globalAlpha = 1;
        io.restore();
        io.restore();
    }
    function vv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var a = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        io.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[154][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + yx * 3) % (Math.PI * 2);
        }
        io.rotate(this.rotate);
        ⵠΔ = ᐃⵠ[1202][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
    }
    function wv() {
        if (this.info !== 10) {
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.angle);
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
                if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == Xg) {
                    this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
                }
                var b = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
                var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = ᐃⵠ[623][qx.time];
            } else {
                e = ᐃⵠ[287][qx.time];
            }
            Rp(io, e, -e.width / 2 + c, -e.width / 2 + d);
            io.restore();
            for (var f = this.info & 15, g = 0; f > g; g++) {
                this.ⵠΔᐃⲆ[g].ⵠᐃΔⵠ(294);
            }
        }
    }
    function xv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == Nq) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = w;
            }
            var a = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ⵠΔ = ᐃⵠ[407][qx.time];
        } else {
            ⵠΔ = ᐃⵠ[119][qx.time];
        }
        Rp(io, ⵠΔ, -ⵠΔ.width / 2 + b, -ⵠΔ.height / 2 + c);
        io.restore();
    }
    function yv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ⵠᐃΔⵠᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[289][qx.time];
        ⵠᐃⵠ = this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ * -ⵠΔ.width;
        ⵠⵠΔ = this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ * -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function zv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (og.ΔⲆⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + yx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - yx, 1);
        }
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        a = ᐃⵠ[449][qx.time];
        ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.width * this.scale;
        ⵠⵠΔ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height);
        Rp(io, a, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && kj == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var a = ᐃⵠ[463];
            Rp(io, a, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        a = ᐃⵠ[451][qx.time];
        ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.width * this.scale;
        ⵠⵠΔ = -a.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        io.save();
        io.translate(jq * -30, jq * 70);
        io.rotate(this.rotate.ᐃᐃⲆ);
        Rp(io, a, jq * -10, jq * -40, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[466];
            Rp(io, a, jq * -10, jq * -40, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
        a = ᐃⵠ[452][qx.time];
        io.save();
        io.translate(jq * 30, jq * 70);
        io.rotate(-this.rotate.ᐃᐃⲆ);
        Rp(io, a, jq * 10 - ⵠᐃⵠ, jq * -40, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[467];
            Rp(io, a, jq * 10 - ⵠᐃⵠ, jq * -40, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
        io.restore();
    }
    function Av() {
        if ((this.info & 1) === 1) {
            this.ᐃⲆⲆⵠⲆ = Math.min(this.ᐃⲆⲆⵠⲆ + yx, 2.2);
        } else {
            this.ᐃⲆⲆⵠⲆ = Math.max(this.ᐃⲆⲆⵠⲆ - yx, 0);
            this.ⲆᐃᐃⲆᐃⲆⲆ += yx;
            if (this.ⲆᐃᐃⲆᐃⲆⲆ > 0.1) {
                this.ⲆᐃᐃⲆᐃⲆⲆ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ⵠΔⲆᐃ.push(a);
            }
        }
        for (var b = 0; this.ⵠΔⲆᐃ.length > b; b++) {
            a = this.ⵠΔⲆᐃ[b];
            io.save();
            io.translate(rx.ΔᐃⲆ.x + a.x, rx.ΔᐃⲆ.y + a.y);
            a.a = Math.min(1, 0 + yx / 2);
            var c = 0;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            io.globalAlpha = c * 0.8;
            Ub(io, 0, 0, a.r);
            qb(io, Er.ΔⵠΔΔⵠΔΔ[qx.time]);
            io.restore();
            if (1 === 0) {
                this.ⵠΔⲆᐃ.splice(b, 1);
                b--;
            }
        }
    }
    function Bv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ⵠᐃΔⵠᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[526][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width * this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -ⵠΔ.height * this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function Cv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = Eh;
            }
            var b = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[985][qx.time];
            } else {
                f = ᐃⵠ[210][qx.time];
            }
            var g = -f.width * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            var a = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -f.height;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃⵠ[986][qx.time];
            } else {
                f = ᐃⵠ[211][qx.time];
            }
            io.translate(0, f.height / 2);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    function Dv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var a = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
            var b = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[135][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
    }
    function Ev() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; c < b; c++) {
                this.ⵠΔᐃⲆ[c].ⵠᐃΔⵠ(207, this.x, this.y);
            }
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.angle);
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
                if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && Nq == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                    this.ⵠΔⲆⵠ.ⵠᐃᐃ = vg;
                }
                var d = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
                var e = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * d;
                var f = d * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = ᐃⵠ[958][qx.time];
            } else {
                g = ᐃⵠ[957][qx.time];
            }
            Rp(io, g, -g.width / 2 + e, -g.width / 2 + f);
            io.restore();
        }
    }
    function Fv(a, b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        c = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = -c.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -c.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == cb) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var c = ᐃⵠ[b];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function Gv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (og.ΔⲆⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + yx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - yx, 1);
        }
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        a = this.info === 0 ? ᐃⵠ[233][qx.time] : ᐃⵠ[1083][qx.time];
        ⵠᐃⵠ = this.scale * (-a.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height * this.scale;
        Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && vn == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var a = ᐃⵠ[1092];
            Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        a = this.info === 0 ? ᐃⵠ[1087][qx.time] : ᐃⵠ[1086][qx.time];
        ⵠᐃⵠ = this.scale * (-a.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height * this.scale;
        io.save();
        io.translate(jq * -40, jq * 10);
        io.rotate(this.rotate.ᐃᐃⲆ);
        Rp(io, a, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[1093];
            Rp(io, a, -ⵠᐃⵠ * jq / 4, -ⵠⵠΔ * jq / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        a = this.info === 0 ? ᐃⵠ[1090][qx.time] : ᐃⵠ[1089][qx.time];
        io.save();
        io.translate(jq * 40, jq * 10);
        io.rotate(-this.rotate.ᐃᐃⲆ);
        Rp(io, a, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[1094];
            Rp(io, a, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        io.restore();
    }
    function Hv(a, b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ⵠΔ = ᐃⵠ[a][this.info][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width / 2;
        ⵠⵠΔ = -ⵠΔ.height / 2;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var c = jw(this.info, ⵠΔ, ⵠΔⵠᐃⲆᐃⲆᐃⲆ);
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function Iv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == va) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = Nq;
            }
            var b = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
            var c = b * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[812][qx.time];
            } else {
                f = ᐃⵠ[188][qx.time];
            }
            var g = -f.width * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            var a = -f.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃⵠ[813][qx.time];
            } else {
                f = ᐃⵠ[189][qx.time];
            }
            io.translate(0, f.height / 2);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    function Jv() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.ⵠⵠᐃⵠⵠᐃⵠ.ⵠᐃᐃ();
        this.ⵠⵠᐃΔᐃᐃΔ.ⵠᐃᐃ();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        c = this.info === 0 ? ᐃⵠ[231][qx.time] : ᐃⵠ[1053][qx.time];
        ⵠᐃⵠ = -c.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -c.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && $n == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var c = ᐃⵠ[1056];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ΔΔΔΔᐃ.ⵠᐃᐃ() && $n == this.ΔΔΔΔᐃ.ΔΔⲆ) {
                this.action -= 4;
            }
            io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
            c = ᐃⵠ[1065];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle + b);
        io.translate(100, 0);
        io.rotate(a);
        c = this.info === 0 ? ᐃⵠ[1060][qx.time] : ᐃⵠ[1059][qx.time];
        ⵠᐃⵠ = -c.width * this.ⵠⵠᐃⵠⵠᐃⵠ.ᐃᐃⲆ;
        ⵠⵠΔ = this.ⵠⵠᐃⵠⵠᐃⵠ.ᐃᐃⲆ * -c.height;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            c = ᐃⵠ[1057];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        if (this.action & 4) {
            io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
            c = ᐃⵠ[1066];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle + a + b);
        io.translate(100, 0);
        io.rotate(a);
        c = this.info === 0 ? ᐃⵠ[1063][qx.time] : ᐃⵠ[1062][qx.time];
        ⵠᐃⵠ = this.ⵠⵠᐃΔᐃᐃΔ.ᐃᐃⲆ * -c.width;
        ⵠⵠΔ = this.ⵠⵠᐃΔᐃᐃΔ.ᐃᐃⲆ * -c.height;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            c = ᐃⵠ[1058];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        if (this.action & 4) {
            io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
            c = ᐃⵠ[1067];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function Kv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔⲆΔᐃΔ.length == 0 || Er.ⲆⵠⲆΔⵠⲆⲆ >= this.ΔⲆΔᐃΔ[this.ΔⲆΔᐃΔ.length - 1])) {
            this.ΔⲆΔᐃΔ.push(Er.ᐃⲆᐃⵠⵠⲆᐃ);
        }
        for (var a = 0; this.ΔⲆΔᐃΔ.length > a; a++) {
            this.ΔⲆΔᐃΔ[a] = Math.max(0, this.ΔⲆΔᐃΔ[a] - Er.ⲆᐃᐃⵠᐃⲆᐃ * yx);
            io.globalAlpha = this.ΔⲆΔᐃΔ[a] / 1.3;
            var b = (1 - this.ΔⲆΔᐃΔ[a]) * 40;
            var c = (1 - this.ΔⲆΔᐃΔ[a]) * 35 + 10;
            Ub(io, jq * -68 + b * Math.sin(-this.angle - Math.PI / 2), jq * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
            qb(io, "#333333");
        }
        io.globalAlpha = 1;
        if (this.ΔⲆΔᐃΔ.length > 0 && this.ΔⲆΔᐃΔ[0] === 0) {
            this.ΔⲆΔᐃΔ.shift();
        }
        io.restore();
    }
    function Mv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == vn) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = Ur;
            }
            var a = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var b = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ⵠⲆⲆΔΔⵠᐃ = (this.ⵠⲆⲆΔΔⵠᐃ + yx * 3) % (Math.PI * 2);
        this.ᐃⲆⲆᐃⲆⲆⲆ = (this.ᐃⲆⲆᐃⲆⲆⲆ - yx * 3) % (Math.PI * 2);
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.save();
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[151][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.save();
        io.rotate(this.ⵠⲆⲆΔΔⵠᐃ);
        ⵠΔ = ᐃⵠ[528][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.save();
        io.rotate(this.ᐃⲆⲆᐃⲆⲆⲆ);
        ⵠΔ = ᐃⵠ[527][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.restore();
    }
    function Nv(a, b, c) {
        if (a >= 0) {
            ⵠΔ = ᐃⵠ[a][qx.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - jq * (45 + b), -ⵠΔ.height / 2 + (c + 22) * jq);
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (52 + b) * jq, -ⵠΔ.height / 4 + (c + 20) * jq);
                    break;
                case 98:
                case 99:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (57 + b), -ⵠΔ.height / 4 + (c + 20) * jq);
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (47 + b) * jq, -ⵠΔ.height / 4 + (c + 45) * jq);
                    break;
                case 30:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (52 + b) * jq, -ⵠΔ.height / 4 + (c + 45) * jq);
                    break;
                case 19:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (47 + b) * jq, -ⵠΔ.height / 4 + jq * (c + 44));
                    break;
                case 9:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - (47 + b) * jq, -ⵠΔ.height / 2 + jq * (c + 44));
                    break;
                case 62:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - (40 + b) * jq, -ⵠΔ.height / 2 + (c + 65) * jq);
                    break;
                case 12:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (37 + b), -ⵠΔ.height / 4 + jq * (c + 85));
                    break;
                case 34:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (37 + b) * jq, -ⵠΔ.height / 4 + (c + 85) * jq);
                    break;
                case 54:
                case 53:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (26 + b), -ⵠΔ.height / 4 + jq * (c + 77));
                    break;
                case 17:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (37 + b), -ⵠΔ.height / 4 + (c + 85) * jq);
                    break;
                case 63:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (47 + b) * jq, -ⵠΔ.height / 4 + (c + 44) * jq);
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (37 + b), -ⵠΔ.height / 4 + (c + 30) * jq);
                    break;
                case 56:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (47 + b), -ⵠΔ.height / 4 + jq * (c + 35));
                    break;
                case 92:
                case 93:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (47 + b), -ⵠΔ.height / 4 + jq * (c + 40));
                    break;
                case 89:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (47 + b), -ⵠΔ.height / 4 + (c + 34) * jq);
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (37 + b), -ⵠΔ.height / 4 + (c + 90) * jq);
                    break;
                case 18:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (40 + b) * jq, -ⵠΔ.height / 4 + (c + 85) * jq);
                    break;
                case 16:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - (39 + b) * jq, -ⵠΔ.height / 2 + (c + 90) * jq);
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - (46 + b) * jq, -ⵠΔ.height / 2 + jq * (c + 35));
                    break;
                case 49:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - (47 + b) * jq, -ⵠΔ.height / 2 + jq * (c + 54));
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - (46 + b) * jq, -ⵠΔ.height / 2 + (c + 35) * jq);
                    break;
                case 55:
                    af(a, ⵠΔ, -ⵠΔ.width / 2 - jq * (47 + b), -ⵠΔ.height / 2 + (c + 20) * jq);
            }
        }
    }
    function Ov() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.ⵠⵠᐃⵠⵠᐃⵠ.ⵠᐃᐃ();
        this.ⵠⵠᐃΔᐃᐃΔ.ⵠᐃᐃ();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        c = this.info === 0 ? ᐃⵠ[887][qx.time] : ᐃⵠ[886][qx.time];
        ⵠᐃⵠ = -c.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -c.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var c = ᐃⵠ[888];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ΔΔΔΔᐃ.ⵠᐃᐃ() && Ur == this.ΔΔΔΔᐃ.ΔΔⲆ) {
                this.action -= 4;
            }
            io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
            c = ᐃⵠ[891];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle + b);
        io.translate(55, 0);
        io.rotate(a);
        c = this.info === 0 ? ᐃⵠ[894][qx.time] : ᐃⵠ[896][qx.time];
        ⵠᐃⵠ = -c.width * this.ⵠⵠᐃⵠⵠᐃⵠ.ᐃᐃⲆ;
        ⵠⵠΔ = -c.height * this.ⵠⵠᐃⵠⵠᐃⵠ.ᐃᐃⲆ;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            c = ᐃⵠ[889];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        if (this.action & 4) {
            io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
            c = ᐃⵠ[892];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle + a + b);
        io.translate(55, 0);
        io.rotate(a);
        c = this.info === 0 ? ᐃⵠ[895][qx.time] : ᐃⵠ[897][qx.time];
        ⵠᐃⵠ = -c.width * this.ⵠⵠᐃΔᐃᐃΔ.ᐃᐃⲆ;
        ⵠⵠΔ = -c.height * this.ⵠⵠᐃΔᐃᐃΔ.ᐃᐃⲆ;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            c = ᐃⵠ[890];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        if (this.action & 4) {
            io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
            c = ᐃⵠ[893];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function Pv() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && kk == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var a = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ⵠⲆⲆΔΔⵠᐃ = (this.ⵠⲆⲆΔΔⵠᐃ + yx * 3) % (Math.PI * 2);
        this.ᐃⲆⲆᐃⲆⲆⲆ = (this.ᐃⲆⲆᐃⲆⲆⲆ - yx * 3) % (Math.PI * 2);
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.save();
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[152][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.save();
        io.rotate(this.ⵠⲆⲆΔΔⵠᐃ);
        ⵠΔ = ᐃⵠ[1194][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.save();
        io.rotate(this.ᐃⲆⲆᐃⲆⲆⲆ);
        ⵠΔ = ᐃⵠ[1193][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
        io.restore();
    }
    function Qv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (og.ΔⲆⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + yx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - yx, 1);
        }
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        a = ᐃⵠ[450][qx.time];
        ⵠᐃⵠ = this.scale * (-a.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        ⵠⵠΔ = this.scale * (-a.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ);
        Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var a = ᐃⵠ[464];
            Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        a = ᐃⵠ[453][qx.time];
        ⵠᐃⵠ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.width);
        ⵠⵠΔ = -a.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        io.save();
        io.translate(jq * -60, jq * 20);
        io.rotate(this.rotate.ᐃᐃⲆ);
        Rp(io, a, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[468];
            Rp(io, a, -ⵠᐃⵠ * jq / 4, -ⵠⵠΔ * jq / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        a = ᐃⵠ[454][qx.time];
        io.save();
        io.translate(jq * 60, jq * 20);
        io.rotate(-this.rotate.ᐃᐃⲆ);
        Rp(io, a, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[469];
            Rp(io, a, jq * -ⵠᐃⵠ / 4, -ⵠⵠΔ * jq / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        io.restore();
    }
    function Rv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = kj;
            }
            var b = jq * (yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600);
            var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[849][qx.time];
            } else {
                f = ᐃⵠ[193][qx.time];
            }
            var g = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -f.width;
            var a = -f.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃⵠ[869][qx.time];
            } else {
                f = ᐃⵠ[194][qx.time];
            }
            io.translate(0, f.height / 2);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    function Sv(b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ⵠΔⲆᐃ.ⵠᐃᐃ();
        io.globalAlpha = 0.3;
        var c = ᐃⵠ[282][qx.time];
        var d = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -c.width;
        var e = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -c.height;
        Rp(io, c, -d / 2, -e / 2, d, e);
        io.globalAlpha = 1;
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && cb == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var f = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var g = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * f;
            var h = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * f;
        } else {
            g = 0;
            h = 0;
        }
        c = ᐃⵠ[b][qx.time];
        Rp(io, c, -c.width / 2 + g, -c.height / 2 + h);
        io.restore();
    }
    function Tv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && Ur == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var b = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var c = b * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            io.rotate(this.angle);
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            if (this.info & 16) {
                var f = ᐃⵠ[953][qx.time];
            } else {
                f = ᐃⵠ[204][qx.time];
            }
            var g = -f.width * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            var a = -f.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃⵠ[954][qx.time];
            } else {
                f = ᐃⵠ[205][qx.time];
            }
            io.translate(0, f.height / 2);
            Rp(io, f, c - f.width / 2, -f.height + d);
        }
        io.restore();
    }
    function Uv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var a = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = a * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ⵠΔ = ᐃⵠ[183][qx.time];
        } else {
            ⵠΔ = ᐃⵠ[802][qx.time][this.info - 1];
        }
        Rp(io, ⵠΔ, -ⵠΔ.width / 2 + b, -ⵠΔ.height / 2 + c);
        io.restore();
    }
    function Vv(a, b, c) {
        if (a >= 0) {
            ⵠΔ = ᐃⵠ[a][qx.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - (0 + b) * jq, -ⵠΔ.height / 4 + jq * (c + 35));
                    break;
                case 74:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (1 + b), -ⵠΔ.height / 4 + jq * (c + 45));
                    break;
                case 75:
                case 76:
                    yw(a, ⵠΔ, -ⵠΔ.width / 4 - jq * (1 + b), -ⵠΔ.height / 4 + jq * (c + 40));
            }
        }
    }
    function Wv() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        if (og.ΔⲆⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + yx / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - yx, 1);
        }
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        this.rotate.ⵠᐃᐃ();
        a = this.info === 0 ? ᐃⵠ[232][qx.time] : ᐃⵠ[1068][qx.time];
        ⵠᐃⵠ = -a.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        ⵠⵠΔ = -a.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * this.scale;
        Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var a = ᐃⵠ[1077];
            Rp(io, a, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        a = this.info === 0 ? ᐃⵠ[1072][qx.time] : ᐃⵠ[1071][qx.time];
        ⵠᐃⵠ = this.scale * (this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.width);
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height * this.scale;
        io.save();
        io.translate(jq * -40, jq * 10);
        io.rotate(this.rotate.ᐃᐃⲆ);
        Rp(io, a, -ⵠᐃⵠ * jq / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[1078];
            Rp(io, a, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        a = this.info === 0 ? ᐃⵠ[1075][qx.time] : ᐃⵠ[1074][qx.time];
        io.save();
        io.translate(jq * 40, jq * 10);
        io.rotate(-this.rotate.ᐃᐃⲆ);
        Rp(io, a, jq * -ⵠᐃⵠ / 4, -ⵠⵠΔ * jq / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
        if (this.action & 2) {
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            a = ᐃⵠ[1079];
            Rp(io, a, jq * -ⵠᐃⵠ / 4, jq * -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
            io.globalAlpha = 1;
        }
        io.restore();
        io.restore();
    }
    function Xv() {
        if (this.info >= 10) {
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.angle);
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
                if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && Xg == this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ) {
                    this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
                }
                var b = jq * ((1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600);
                var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            var e = ᐃⵠ[115][qx.time];
            var f = -e.width * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            var g = -e.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, e, -f / 2 + c, -g / 2 + d, f, g);
            io.restore();
        }
    }
    function Yv(a, b) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        c = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = -c.width;
        ⵠⵠΔ = -c.height;
        Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && Ur == this.ⵠΔⲆⵠ.ΔΔⲆ) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var c = ᐃⵠ[b];
            Rp(io, c, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function Zv(a) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -ⵠΔ.width;
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -ⵠΔ.height;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function $v(a, b, c) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + b, rx.ΔᐃⲆ.y + c);
        io.rotate(this.angle);
        io.translate(this.x - b, this.y - c);
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[a][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -ⵠΔ.height * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function _v() {
        if (this.info >= 10) {
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.angle);
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
                if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                    this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
                }
                var b = (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * yx * 600 * jq;
                var c = Math.sin(this.ⵠΔⲆⵠ.angle - this.angle) * b;
                var d = Math.cos(this.ⵠΔⲆⵠ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠΔⲆᐃ.ⵠᐃᐃ();
            var e = ᐃⵠ[206][qx.time];
            var f = this.ⵠΔⲆᐃ.ᐃᐃⲆ * -e.width;
            var g = -e.height * this.ⵠΔⲆᐃ.ᐃᐃⲆ;
            Rp(io, e, -f / 2 + c, -g / 2 + d, f, g);
            io.restore();
        }
    }
    function aw() {
        if (this.ⵠΔⲆⵠ.ⵠᐃᐃ) {
            if (this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ΔΔⲆ == 0) {
                this.ⵠΔⲆⵠ.ⵠᐃᐃ = false;
            }
            var a = yx * (1 - this.ⵠΔⲆⵠ.ⵠᐃΔᐃ.ᐃᐃⲆ) * 600 * jq;
            var b = a * Math.sin(this.ⵠΔⲆⵠ.angle - this.angle);
            var c = a * Math.cos(this.ⵠΔⲆⵠ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        io.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        io.translate(rx.ΔᐃⲆ.x + this.x + b, rx.ΔᐃⲆ.y + this.y + c);
        io.rotate(this.angle);
        ⵠΔ = ᐃⵠ[157][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + yx * 3) % (Math.PI * 2);
        }
        io.rotate(this.rotate);
        ⵠΔ = ᐃⵠ[1214][qx.time];
        Rp(io, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
        io.restore();
    }
    function bw() {
        this.Ⲇⵠᐃᐃ.ⵠᐃᐃ();
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        a = this.info === 0 ? ᐃⵠ[1042][qx.time] : ᐃⵠ[1044][qx.time];
        ⵠᐃⵠ = -a.width * this.Ⲇⵠᐃᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = this.Ⲇⵠᐃᐃ.ᐃᐃⲆ * -a.height;
        Rp(io, a, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        if (this.action & 2) {
            if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == fs) {
                this.action -= 2;
            }
            io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
            var a = ᐃⵠ[1045];
            Rp(io, a, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            io.globalAlpha = 1;
        }
        io.restore();
    }
    function cw() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        io.rotate(this.angle);
        this.ⵠᐃᐃⲆⲆ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[288][qx.time];
        ⵠᐃⵠ = this.ⵠᐃᐃⲆⲆ.ᐃᐃⲆ * -ⵠΔ.width;
        ⵠⵠΔ = -ⵠΔ.height * this.ⵠᐃᐃⲆⲆ.ᐃᐃⲆ;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        this.ⵠᐃΔⵠᐃ.ⵠᐃᐃ();
        ⵠΔ = ᐃⵠ[289][qx.time];
        ⵠᐃⵠ = -ⵠΔ.width * this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ;
        ⵠⵠΔ = -ⵠΔ.height * this.ⵠᐃΔⵠᐃ.ᐃᐃⲆ;
        Rp(io, ⵠΔ, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
        io.restore();
    }
    function dw(a) {
        if (a > 0) {
            var b = ᐃⵠ[a][qx.time];
            switch (a) {
                case 58:
                    af(a, b, -b.width / 2 + jq * 2, -b.height / 2 - jq * 5);
                    break;
                case 10:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 18);
                    break;
                case 11:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 10);
                    break;
                case 23:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 19);
                    break;
                case 24:
                    yw(a, b, -b.width / 4, -b.height / 4 - jq * 20);
                    break;
                case 25:
                    af(a, b, -b.width / 2 - jq * 1, -b.height / 2 - jq * 23);
                    break;
                case 26:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 5);
                    break;
                case 27:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 2);
                    break;
                case 43:
                    af(a, b, -b.width / 2 + jq * 1.5, -b.height / 2 - jq * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    yw(a, b, -b.width / 4, -b.height / 4 + jq * 2);
                    break;
                case 41:
                case 42:
                    af(a, b, -b.width / 2 - jq * 5, -b.height / 2 - jq * 2);
                    break;
                case 40:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 2);
                    break;
                case 85:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 2);
                    break;
                case 48:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 2);
                    break;
                case 47:
                    af(a, b, -b.width / 2 + jq * 2, -b.height / 2);
                    break;
                case 59:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    af(a, b, -b.width / 2 - jq * 1, -b.height / 2);
                    break;
                case 83:
                    af(a, b, -b.width / 2, -b.height / 2 + jq * 2);
                    break;
                case 84:
                case 86:
                    af(a, b, -b.width / 2, -b.height / 2 + jq * 8);
                    break;
                case 61:
                    af(a, b, -b.width / 2, -b.height / 2 - jq * 4);
            }
        }
    }
    function ew() {
        if (!this.ⵠⵠΔⲆⵠ && this.ΔᐃⵠΔᐃ !== 0) {
            if (this.x != this.r.x || this.r.y != this.y) {
                var a = (og.ᐃⲆⵠⵠᐃᐃⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ⵠᐃⲆΔⲆ = og.ᐃⵠΔⵠΔⵠⵠ(a, this.ⵠᐃⲆΔⲆ);
                this.ⵠᐃⲆΔⲆ = og.ᐃⵠⵠⲆⲆⲆⵠ(this.ⵠᐃⲆΔⲆ, a, 0.018);
            }
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            io.rotate(this.ⵠᐃⲆΔⲆ);
            if (this.ΔᐃⵠΔᐃ === 223) {
                if (this.ⵠⲆᐃⲆⵠ > 50 || this.ᐃⲆⲆΔⲆ > 0) {
                    if (this.ⵠⲆᐃⲆⵠ > 50) {
                        this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx);
                    } else {
                        this.ᐃⲆⲆΔⲆ = Math.max(0, this.ᐃⲆⲆΔⲆ - yx);
                    }
                    io.globalAlpha = this.ᐃⲆⲆΔⲆ;
                    var b = ᐃⵠ[225][qx.time];
                    yw(225, b, -b.width / 4, -b.height / 4);
                    io.globalAlpha = 1;
                }
                b = ᐃⵠ[223][qx.time];
                yw(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⵠΔᐃ === 229) {
                this.ΔⲆᐃⲆΔ = og.ᐃⵠⵠⲆⲆⲆⵠ(this.ΔⲆᐃⲆΔ, this.ⵠⲆᐃⲆⵠ, 0.018);
                this.ΔΔΔⵠⵠⲆⵠ.ⵠᐃᐃ();
                if (this.ⵠⲆᐃⲆⵠ > 85) {
                    this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx / 4);
                } else {
                    this.ᐃⲆⲆΔⲆ = Math.max(0.1, this.ᐃⲆⲆΔⲆ - yx);
                }
                b = ᐃⵠ[1100][qx.time];
                yw(1100, b, -b.width / 4, -b.height / 4);
                b = ᐃⵠ[1103][qx.time];
                ⵠᐃⵠ = -b.width;
                ⵠⵠΔ = -b.height;
                io.save();
                io.translate(jq * -20, jq * -20);
                io.rotate(this.ᐃⲆⲆΔⲆ * this.ΔΔΔⵠⵠⲆⵠ.ᐃᐃⲆ);
                Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
                io.restore();
                b = ᐃⵠ[1106][qx.time];
                io.save();
                io.translate(jq * 20, jq * -20);
                io.rotate(-this.ΔΔΔⵠⵠⲆⵠ.ᐃᐃⲆ * this.ᐃⲆⲆΔⲆ);
                Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
                io.restore();
            } else if (this.ΔᐃⵠΔᐃ === 228) {
                this.ΔⲆᐃⲆΔ = og.ᐃⵠⵠⲆⲆⲆⵠ(this.ΔⲆᐃⲆΔ, this.ⵠⲆᐃⲆⵠ, 0.018);
                this.ΔΔΔⵠⵠⲆⵠ.ⵠᐃᐃ();
                if (this.ⵠⲆᐃⲆⵠ > 85) {
                    this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx / 4);
                } else {
                    this.ᐃⲆⲆΔⲆ = Math.max(0.1, this.ᐃⲆⲆΔⲆ - yx);
                }
                b = ᐃⵠ[1085][qx.time];
                yw(1085, b, -b.width / 4, -b.height / 4);
                b = ᐃⵠ[1088][qx.time];
                ⵠᐃⵠ = -b.width;
                ⵠⵠΔ = -b.height;
                io.save();
                io.translate(jq * -40, jq * -45);
                io.rotate(this.ᐃⲆⲆΔⲆ * this.ΔΔΔⵠⵠⲆⵠ.ᐃᐃⲆ);
                Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
                io.restore();
                b = ᐃⵠ[1091][qx.time];
                io.save();
                io.translate(jq * 40, jq * -45);
                io.rotate(this.ᐃⲆⲆΔⲆ * -this.ΔΔΔⵠⵠⲆⵠ.ᐃᐃⲆ);
                Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
                io.restore();
            } else if (this.ΔᐃⵠΔᐃ === 227) {
                this.ΔⲆᐃⲆΔ = og.ᐃⵠⵠⲆⲆⲆⵠ(this.ΔⲆᐃⲆΔ, this.ⵠⲆᐃⲆⵠ, 0.018);
                this.ΔΔΔⵠⵠⲆⵠ.ⵠᐃᐃ();
                if (this.ⵠⲆᐃⲆⵠ > 85) {
                    this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx / 4);
                } else {
                    this.ᐃⲆⲆΔⲆ = Math.max(0.1, this.ᐃⲆⲆΔⲆ - yx);
                }
                b = ᐃⵠ[1070][qx.time];
                yw(1070, b, -b.width / 4, -b.height / 4);
                b = ᐃⵠ[1073][qx.time];
                ⵠᐃⵠ = -b.width;
                ⵠⵠΔ = -b.height;
                io.save();
                io.translate(jq * -40, jq * -45);
                io.rotate(this.ᐃⲆⲆΔⲆ * this.ΔΔΔⵠⵠⲆⵠ.ᐃᐃⲆ);
                Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
                io.restore();
                b = ᐃⵠ[1076][qx.time];
                io.save();
                io.translate(jq * 40, jq * -45);
                io.rotate(this.ᐃⲆⲆΔⲆ * -this.ΔΔΔⵠⵠⲆⵠ.ᐃᐃⲆ);
                Rp(io, b, -ⵠᐃⵠ / 4, -ⵠⵠΔ / 4, ⵠᐃⵠ / 2, ⵠⵠΔ / 2);
                io.restore();
            } else if (this.ΔᐃⵠΔᐃ === 91) {
                this.ΔⲆᐃⲆΔ = og.ᐃⵠⵠⲆⲆⲆⵠ(this.ΔⲆᐃⲆΔ, this.ⵠⲆᐃⲆⵠ, 0.018);
                b = ᐃⵠ[91][qx.time];
                yw(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⵠΔᐃ === 230) {
                this.ΔⲆᐃⲆΔ = og.ᐃⵠⵠⲆⲆⲆⵠ(this.ΔⲆᐃⲆΔ, this.ⵠⲆᐃⲆⵠ, 0.018);
                b = ᐃⵠ[236][qx.time];
                yw(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⵠΔᐃ === 224) {
                b = ᐃⵠ[224][qx.time];
                yw(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⵠΔᐃ === 239) {
                b = ᐃⵠ[1221][qx.time];
                if (this.ⵠⲆᐃⲆⵠ > 85) {
                    this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx / 4);
                } else {
                    this.ᐃⲆⲆΔⲆ = Math.max(0, this.ᐃⲆⲆΔⲆ - yx);
                }
                this.ΔⲆΔⵠᐃ += yx * 60;
                if (this.ΔⲆΔⵠᐃ > 60) {
                    this.ΔⲆΔⵠᐃ -= 60;
                }
                var c = this.ᐃⲆⲆΔⲆ * (-6 + (this.ΔⲆΔⵠᐃ < 30 ? this.ΔⲆΔⵠᐃ / 30 : 1 - (this.ΔⲆΔⵠᐃ - 30) / 30) * 12);
                yw(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ΔᐃⵠΔᐃ === 225) {
                b = ᐃⵠ[1043][qx.time];
                if (this.ⵠⲆᐃⲆⵠ > 85) {
                    this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx / 4);
                } else {
                    this.ᐃⲆⲆΔⲆ = Math.max(0, this.ᐃⲆⲆΔⲆ - yx);
                }
                this.ΔⲆΔⵠᐃ += yx * 60;
                if (this.ΔⲆΔⵠᐃ > 60) {
                    this.ΔⲆΔⵠᐃ -= 60;
                }
                c = this.ᐃⲆⲆΔⲆ * (-6 + (this.ΔⲆΔⵠᐃ < 30 ? this.ΔⲆΔⵠᐃ / 30 : 1 - (this.ΔⲆΔⵠᐃ - 30) / 30) * 12);
                yw(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ΔᐃⵠΔᐃ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = ᐃⵠ[1055][qx.time];
                if (this.ⵠⲆᐃⲆⵠ > 85) {
                    this.ᐃⲆⲆΔⲆ = Math.min(1, this.ᐃⲆⲆΔⲆ + yx / 4);
                } else {
                    this.ᐃⲆⲆΔⲆ = Math.max(0, this.ᐃⲆⲆΔⲆ - yx);
                }
                this.ΔⲆΔⵠᐃ += yx * 60;
                if (this.ΔⲆΔⵠᐃ > 60) {
                    this.ΔⲆΔⵠᐃ -= 60;
                }
                c = (-6 + (this.ΔⲆΔⵠᐃ < 30 ? this.ΔⲆΔⵠᐃ / 30 : 1 - (this.ΔⲆΔⵠᐃ - 30) / 30) * 12) * this.ᐃⲆⲆΔⲆ;
                yw(1055, b, -b.width / 4 + c, -b.height / 4);
                io.restore();
                io.save();
                io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
                io.rotate(Math.PI + this.ⵠᐃⲆΔⲆ + e);
                io.translate(120, c);
                io.rotate(d);
                b = ᐃⵠ[1060][qx.time];
                ⵠᐃⵠ = -b.width;
                ⵠⵠΔ = -b.height;
                Rp(io, b, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
                io.restore();
                io.save();
                io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
                io.rotate(Math.PI + this.ⵠᐃⲆΔⲆ + d + e);
                io.translate(120, c);
                io.rotate(d);
                b = ᐃⵠ[1063][qx.time];
                ⵠᐃⵠ = -b.width;
                ⵠⵠΔ = -b.height;
                Rp(io, b, -ⵠᐃⵠ / 2, -ⵠⵠΔ / 2, ⵠᐃⵠ, ⵠⵠΔ);
            }
            io.restore();
        }
    }
    function fw() {
        if (this.enabled && this.ⵠⵠᐃᐃᐃ >= 0) {
            var a = new Date().getTime() - this.ⵠⵠᐃᐃᐃ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            if ((a = Math.floor(a / 1000)) < 60) {
                a = 60 - a;
                this.label ||= Cu(jq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                if (this.now != a || !this.ᐃᐃⲆⵠᐃᐃΔ) {
                    this.now = a;
                    this.ᐃᐃⲆⵠᐃᐃΔ = Cu(jq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Rp(io, this.label, (no - this.label.width) / 2, jq * 100);
                io.globalAlpha = b;
                Rp(io, this.ᐃᐃⲆⵠᐃᐃΔ, (no - this.label.width) / 2 - this.ᐃᐃⲆⵠᐃᐃΔ.width + jq * 15, jq * 100);
                io.globalAlpha = 1;
            }
        }
    }
    function gw() {
        if (this.message !== jj) {
            var a = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length > 0 ? -95 : 0;
            Rp(io, this.message, 0, so - this.message.height + a);
        }
    }
    function hw() {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; this.text.length > a && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = Zb(jq, this.text[a]);
                    this.ⵠΔΔⲆΔⵠⲆ[a] = 0;
                    this.ⵠⲆΔᐃΔⵠⲆ[a] = 0;
                }
                if (a === 1) {
                    this.ⵠⲆΔᐃΔⵠⲆ[0] = og.ⲆⵠᐃΔᐃ(this.ΔⲆᐃᐃᐃᐃΔ) * 30;
                }
            }
            this.ⵠΔΔⲆΔⵠⲆ[0] += yx;
            if (this.text.length > 1) {
                this.ΔⲆᐃᐃᐃᐃΔ = Math.min(this.ΔⲆᐃᐃᐃᐃΔ + yx, 1);
                if (this.ⵠΔΔⲆΔⵠⲆ[0] > 1 && this.ΔⲆᐃᐃᐃᐃΔ > 0.5) {
                    this.ⵠΔΔⲆΔⵠⲆ[1] += yx;
                }
            }
            for (a = 0; this.text.length > a && a < 2; a++) {
                var b = this.ⵠΔΔⲆΔⵠⲆ[a];
                if (b > 0) {
                    io.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Rp(io, this.label[a], -this.label[a].width / 2, -this.ⵠⲆΔᐃΔⵠⲆ[a] + -this.label[a].height / 2 - jq * 110);
                }
            }
            if (this.ⵠΔΔⲆΔⵠⲆ[0] > 4) {
                this.ⵠΔΔⲆΔⵠⲆ.shift();
                this.text.shift();
                this.ⵠⲆΔᐃΔⵠⲆ.shift();
                this.label.shift();
                this.ΔⲆᐃᐃᐃᐃΔ = 0;
            }
        }
        io.restore();
    }
    function iw(a, b) {
        if (this.text) {
            if (this.timeout.ΔΔⲆ) {
                io.globalAlpha = 1 - this.timeout.ᐃᐃⲆ;
            } else {
                io.globalAlpha = 1;
            }
            if (!this.label) {
                this.label = Cu(jq, this.text, 40, a, null, null, null, null, null, b, 10);
            }
            Rp(io, this.label, (no - this.label.width) / 2, jq * 50);
            io.globalAlpha = 1;
            if (this.timeout.ⵠᐃᐃ() && this.timeout.ΔΔⲆ == 0) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    function jw(b, c, d) {
        if (c.ΔΔᐃΔᐃⵠⲆ() !== 1) {
            return c;
        }
        var e = ᐃⲆᐃⵠⲆᐃᐃ[d][b];
        if (oh === e) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ΔⵠⵠⵠΔᐃⲆΔⵠ[d];
            f.fillRect(0, 0, g, a);
            ᐃⲆᐃⵠⲆᐃᐃ[d][b] = e;
        }
        return e;
    }
    function kw() {
        var b = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                b = 1;
        }
        if (this.ⵠⵠΔⲆⵠ) {
            for (var c = 0; this.bubbles.length > c; c++) {
                var f = this.bubbles[c];
                if (f.ⵠⵠᐃⵠΔ > 0.5) {
                    var j = 1 - (f.ⵠⵠᐃⵠΔ - 0.5) * 2;
                } else {
                    j = f.ⵠⵠᐃⵠΔ * 2;
                }
                io.globalAlpha = j;
                var k = ᐃⵠ[540][qx.time][f.id];
                Rp(io, k, rx.ΔᐃⲆ.x + f.x - k.width / 2, rx.ΔᐃⲆ.y + f.y - k.height / 2);
                io.globalAlpha = 1;
            }
        } else {
            io.save();
            io.translate(rx.ΔᐃⲆ.x + this.x, rx.ΔᐃⲆ.y + this.y);
            qx.ⲆΔᐃⵠᐃΔⲆᐃⲆ(this);
            if (this.action & 16) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                io.save();
                                var b = a.attack.ᐃᐃⲆ * -3 / Math.PI;
                                if (a.attack.ΔΔⲆ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃᐃⲆ) / 3;
                                } else {
                                    c = a.attack.ᐃᐃⲆ;
                                }
                                io.rotate(a.angle - Math.PI / 2 + c);
                                io.globalAlpha = b / 1.2;
                                Ub(io, jq * -40, jq * 90, jq * 5);
                                qb(io, "#0B6A84");
                                io.globalAlpha = b / 1.2;
                                Ub(io, jq * -52, jq * 100, jq * 8);
                                qb(io, "#0B6A84");
                                io.globalAlpha = b / 1.2;
                                Ub(io, jq * -30, jq * 95, jq * 4);
                                qb(io, "#0B6A84");
                                io.globalAlpha = 1;
                                io.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ΔⵠⵠΔⵠⵠΔ === 1) {
                                    break;
                                }
                                if (a.ⲆⵠᐃⵠⲆ > 0) {
                                    var d = Er.ⵠⲆⲆᐃⲆⲆΔ[qx.time];
                                } else {
                                    d = a.ᐃΔΔⵠⵠᐃᐃ > 0 || a.ⵠⲆᐃᐃⲆ > 0 ? Er.ⲆΔⵠⵠᐃⵠᐃ[qx.time] : Er.ΔΔΔᐃᐃⵠⲆ[qx.time];
                                }
                                b = a.attack.ᐃᐃⲆ * -3 / Math.PI;
                                if ((c = a.attack.ΔΔⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                                    a.ⵠⲆΔⲆΔⵠⲆ = a.angle;
                                }
                                io.save();
                                io.rotate(a.ⵠⲆΔⲆΔⵠⲆ - Math.PI / 2);
                                io.globalAlpha = b;
                                var e = jq * 25 + c * 25;
                                Ub(io, e, jq * 80, jq * 15);
                                qb(io, d);
                                Ub(io, -e, jq * 80, jq * 15);
                                qb(io, d);
                                io.globalAlpha = 1;
                                io.restore();
                        }
                    }
                })(this);
            }
            io.save();
            io.rotate(this.angle - Math.PI / 2);
            if (!(this.action & 16)) {
                if (this.action & 64 || this.ΔᐃⵠΔᐃ !== 0) {
                    this.ΔΔⵠᐃᐃΔⲆ.ⵠᐃᐃ();
                } else if (this.action & 32) {
                    this.ⵠⵠⲆⲆΔΔⲆ.ⵠᐃᐃ();
                }
            }
            var m;
            var p = this.ΔΔⵠᐃᐃΔⲆ.ᐃᐃⲆ;
            var q = this.ⵠⵠⲆⲆΔΔⲆ.ᐃᐃⲆ;
            if (this.ᐃⵠⵠᐃᐃ === 85) {
                k = ᐃⵠ[793][qx.time];
                m = 793;
            } else if (this.ᐃⵠⵠᐃᐃ === 20) {
                k = ᐃⵠ[920][qx.time];
                m = 920;
            } else if (this.ᐃⵠⵠᐃᐃ === 21) {
                k = ᐃⵠ[924][qx.time];
                m = 924;
            } else if (this.ᐃⵠⵠᐃᐃ === 22) {
                k = ᐃⵠ[928][qx.time];
                m = 928;
            } else if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                k = ᐃⵠ[822][qx.time];
                m = 822;
            } else {
                k = ᐃⵠ[7][this.ᐃΔΔΔ][qx.time];
                m = 7;
            }
            ⵠⵠⵠΔ = ᐃⵠ[286][qx.time];
            var w = k;
            var h = m;
            if (this.action & 16) {
                if (this.attack.ⵠᐃᐃ() && this.attack.ΔΔⲆ == $n) {
                    this.ⵠⵠⲆⵠΔ = !this.ⵠⵠⲆⵠΔ;
                    this.action -= 16;
                    if (this.ᐃΔΔⲆ == rx.ᐃΔΔⲆ) {
                        rx.control.ⵠΔⵠⲆ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ⵠⵠⲆⵠΔ = nk;
                }
                var l = this.ⵠⵠⲆⵠΔ ? this.attack.ᐃᐃⲆ : -this.attack.ᐃᐃⲆ / 3;
                var x = this.ⵠⵠⲆⵠΔ ? this.attack.ᐃᐃⲆ / 3 : -this.attack.ᐃᐃⲆ;
                if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                    io.save();
                    io.rotate(l);
                    af(m, k, -k.width / 2 - (66 + p) * jq, -k.height / 2 + (5 + q) * jq);
                    io.restore();
                    io.save();
                    io.rotate(x);
                    af(m, k, -k.width / 2 + jq * (66 + p), -k.height / 2 + (5 + q) * jq);
                    io.restore();
                } else if (b === 0) {
                    if (this.right === 64) {
                        l = -og.ᐃⲆΔΔᐃᐃⲆ(-l);
                    }
                    io.save();
                    io.rotate(l);
                    af(286, ⵠⵠⵠΔ, -ⵠⵠⵠΔ.width / 2 - jq * (49 + p), -ⵠⵠⵠΔ.height / 2 + (15 + q) * jq);
                    if (this.right === 28) {
                        var u = ᐃⵠ[this.right][this.ᐃᐃΔⵠⵠ][qx.time];
                        Hw(this.right, this.ᐃᐃΔⵠⵠ, u, -u.width / 4 - (62 + p) * jq, -u.height / 4 + jq * (q + 18));
                    } else {
                        Nv(this.right, p, q);
                    }
                    if (m >= 920) {
                        yw(m, k, -k.width / 4 - jq * (49 + p), -k.height / 4 + (11 + q) * jq);
                    } else if (m !== 793) {
                        Hw(m, this.ᐃΔΔΔ, k, -k.width / 4 - jq * (49 + p), -k.height / 4 + jq * (11 + q));
                    } else {
                        af(m, k, -k.width / 2 - (49 + p) * jq, -k.height / 2 + jq * (11 + q));
                    }
                    io.restore();
                    io.save();
                    io.rotate(x);
                    af(286, ⵠⵠⵠΔ, -ⵠⵠⵠΔ.width / 2 + (49 + p) * jq, -ⵠⵠⵠΔ.height / 2 + (15 + q) * jq);
                    if (m >= 920) {
                        yw(m, k, -k.width / 4 + jq * (49 + p), -k.height / 4 + jq * (11 + q));
                    } else if (m !== 793) {
                        Hw(m, this.ᐃΔΔΔ, k, -k.width / 4 + jq * (49 + p), -k.height / 4 + jq * (11 + q));
                    } else {
                        af(m, k, -k.width / 2 + (49 + p) * jq, -k.height / 2 + jq * (11 + q));
                    }
                    io.restore();
                }
            } else if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                af(m, k, -k.width / 2 - (66 + p) * jq, -k.height / 2 + jq * (5 + q));
                af(m, k, -k.width / 2 + (66 + p) * jq, -k.height / 2 + jq * (5 + q));
            } else if (b === 0) {
                af(286, ⵠⵠⵠΔ, -ⵠⵠⵠΔ.width / 2 - (49 + p) * jq, -ⵠⵠⵠΔ.height / 2 + jq * (15 + q));
                if (this.right === 28) {
                    u = ᐃⵠ[this.right][this.ᐃᐃΔⵠⵠ][qx.time];
                    Hw(this.right, this.ᐃᐃΔⵠⵠ, u, -u.width / 4 - (62 + p) * jq, -u.height / 4 + jq * (q + 18));
                } else {
                    Nv(this.right, p, q);
                }
                if (m >= 920) {
                    yw(m, k, -k.width / 4 - (49 + p) * jq, -k.height / 4 + jq * (11 + q));
                } else if (m !== 793) {
                    Hw(m, this.ᐃΔΔΔ, k, -k.width / 4 - (49 + p) * jq, -k.height / 4 + jq * (11 + q));
                } else {
                    af(m, k, -k.width / 2 - (49 + p) * jq, -k.height / 2 + (11 + q) * jq);
                }
                af(286, ⵠⵠⵠΔ, -ⵠⵠⵠΔ.width / 2 + (49 + p) * jq, -ⵠⵠⵠΔ.height / 2 + jq * (15 + q));
                if (m >= 920) {
                    yw(m, k, -k.width / 4 + jq * (49 + p), -k.height / 4 + jq * (11 + q));
                } else if (m !== 793) {
                    Hw(m, this.ᐃΔΔΔ, k, -k.width / 4 + jq * (49 + p), -k.height / 4 + (11 + q) * jq);
                } else {
                    af(m, k, -k.width / 2 + (49 + p) * jq, -k.height / 2 + (11 + q) * jq);
                }
            }
            if (this.ΔⵠⵠⲆⵠ && this.ᐃⵠⵠᐃᐃ < 1) {
                k = ᐃⵠ[29][this.ᐃᐃᐃⲆⲆΔᐃ][qx.time];
                Hw(29, this.ᐃᐃᐃⲆⲆΔᐃ, k, -k.width / 4, -k.height / 4 - jq * 39);
            }
            if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                k = ᐃⵠ[820][qx.time];
                af(820, k, -k.width / 2, -k.height / 2);
                this.ΔⵠᐃⵠⲆᐃΔ.ⵠᐃᐃ();
                k = ᐃⵠ[821][qx.time];
                af(821, k, -k.width / 2, -k.height / 2 + this.ΔⵠᐃⵠⲆᐃΔ.ᐃᐃⲆ);
            } else {
                k = ᐃⵠ[255][this.ᐃΔΔΔ][qx.time];
                if (this.ᐃⵠⵠᐃᐃ !== 85 && (Hw(255, this.ᐃΔΔΔ, k, -k.width / 4, -k.height / 4), this.ΔⵠⲆᐃⵠ > 0)) {
                    k = ᐃⵠ[796][this.ΔⵠⲆᐃⵠ][qx.time];
                    Hw(796, this.ΔⵠⲆᐃⵠ, k, -k.width / 4, -k.height / 4);
                }
            }
            if (this.action & 128) {
                if (this.ΔΔΔΔᐃ.ⵠᐃᐃ() && this.ΔΔΔΔᐃ.ΔΔⲆ == _e) {
                    this.action -= 128;
                }
                io.globalAlpha = 0.6 - this.ΔΔΔΔᐃ.ᐃᐃⲆ;
                if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                    k = ᐃⵠ[825];
                    Rp(io, k, -k.width / 2, -k.height / 2);
                } else {
                    k = jw(this.ᐃΔΔΔ, ᐃⵠ[255][this.ᐃΔΔΔ][0], ⲆΔⵠⵠⲆⵠⲆⵠᐃ);
                    Rp(io, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                io.globalAlpha = 1;
            }
            if (this.action & 256) {
                if (this.ΔᐃΔⲆⲆⲆΔ.ⵠᐃᐃ() && jt == this.ΔᐃΔⲆⲆⲆΔ.ΔΔⲆ) {
                    this.action -= 256;
                }
                io.globalAlpha = 0.6 - this.ΔᐃΔⲆⲆⲆΔ.ᐃᐃⲆ;
                k = ᐃⵠ[266];
                Rp(io, k, -k.width / 2, -k.height / 2);
                io.globalAlpha = 1;
            }
            if (this.action & 2) {
                if (this.ⵠΔⲆⵠ.ⵠᐃᐃ() && this.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                    this.action -= 2;
                }
                io.globalAlpha = 0.6 - this.ⵠΔⲆⵠ.ᐃᐃⲆ;
                if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                    k = ᐃⵠ[823];
                    Rp(io, k, -k.width / 2, -k.height / 2);
                } else {
                    k = jw(this.ᐃΔΔΔ, ᐃⵠ[255][this.ᐃΔΔΔ][0], ⵠⵠⲆⵠⲆᐃⵠᐃⵠ);
                    Rp(io, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                io.globalAlpha = 1;
            }
            if (this.action & 4) {
                if (this.freeze.ⵠᐃᐃ() && this.freeze.ΔΔⲆ == kk) {
                    this.action -= 4;
                }
                io.globalAlpha = 0.6 - this.freeze.ᐃᐃⲆ;
                k = jw(this.ᐃΔΔΔ, ᐃⵠ[255][this.ᐃΔΔΔ][0], ⵠΔⵠⲆⵠⵠᐃΔΔ);
                Rp(io, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                io.globalAlpha = 1;
            }
            if (this.action & 8) {
                if (this.ⵠⲆΔⵠⵠⲆᐃ.ⵠᐃᐃ() && this.ⵠⲆΔⵠⵠⲆᐃ.ΔΔⲆ == 0) {
                    this.action -= 8;
                }
                io.globalAlpha = 0.6 - this.ⵠⲆΔⵠⵠⲆᐃ.ᐃᐃⲆ;
                if (this.ⲆⵠⵠⵠΔⲆⵠ) {
                    k = ᐃⵠ[824];
                    Rp(io, k, -k.width / 2, -k.height / 2);
                } else {
                    k = jw(this.ᐃΔΔΔ, ᐃⵠ[255][this.ᐃΔΔΔ][0], ⲆΔᐃΔΔᐃΔᐃⲆ);
                    Rp(io, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                io.globalAlpha = 1;
            }
            dw(this.ᐃⵠⵠᐃᐃ);
            if (b === 1) {
                if (this.action & 16) {
                    p += this.attack.ᐃᐃⲆ * 15;
                }
                af(286, ⵠⵠⵠΔ, -ⵠⵠⵠΔ.width / 2 - jq * 26, -ⵠⵠⵠΔ.height / 2 + jq * (31 + q + p));
                if (h >= 920) {
                    yw(h, w, -w.width / 4 - jq * 26, -w.height / 4 + (27 + q + p) * jq);
                } else if (h !== 793) {
                    Hw(h, this.ᐃΔΔΔ, w, -w.width / 4 - jq * 26, -w.height / 4 + (27 + q + p) * jq);
                } else {
                    af(h, w, -w.width / 2 - jq * 26, -w.height / 2 + (27 + q + p) * jq);
                }
                af(286, ⵠⵠⵠΔ, -ⵠⵠⵠΔ.width / 2 + jq * 26, -ⵠⵠⵠΔ.height / 2 + (31 + q + p) * jq);
                if (h >= 920) {
                    yw(h, w, -w.width / 4 + jq * 26, -w.height / 4 + jq * (27 + q + p));
                } else if (h !== 793) {
                    Hw(h, this.ᐃΔΔΔ, w, -w.width / 4 + jq * 26, -w.height / 4 + (27 + q + p) * jq);
                } else {
                    af(h, w, -w.width / 2 + jq * 26, -w.height / 2 + (27 + q + p) * jq);
                }
                Vv(this.right, 0, q + p);
            }
            io.restore();
            if (this.ᐃⵠⵠᐃᐃ !== 83 && this.ᐃⵠⵠᐃᐃ !== 85) {
                if (this.ⲆⵠᐃⵠⲆ > 0) {
                    this.ᐃᐃΔⲆ.ⵠᐃΔⵠⵠⵠΔ ||= Cu(jq, this.ᐃᐃΔⲆ.ΔⲆᐃᐃΔ, 20, "#187484", "#000", 2, null, null, jq * 300);
                    k = this.ᐃᐃΔⲆ.ⵠᐃΔⵠⵠⵠΔ;
                } else {
                    if (!this.ᐃᐃΔⲆ.label) {
                        this.ᐃᐃΔⲆ.label = Cu(jq, this.ᐃᐃΔⲆ.ΔⲆᐃᐃΔ, 20, "#FFF", "#000", 2, null, null, jq * 300);
                    }
                    k = this.ᐃᐃΔⲆ.label;
                }
                if (Er.ⲆⲆⲆ == qx.ᐃᐃΔ) {
                    io.globalAlpha = 0.5;
                }
                p = Math.floor(-k.width / 2);
                q = Math.floor(-k.height / 2 - jq * 70);
                Rp(io, k, p, q);
                if (this.ᐃᐃΔⲆ.level > 0) {
                    var y = p + k.width + 5;
                    k = ᐃⵠ[885];
                    if (ᐃᐃⵠᐃⲆⲆΔ[this.ᐃᐃΔⲆ.level] === Ta) {
                        ᐃᐃⵠᐃⲆⲆΔ[this.ᐃᐃΔⲆ.level] = Cu(jq, "[" + this.ᐃᐃΔⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, jq * 50);
                    }
                    Rp(io, ᐃᐃⵠᐃⲆⲆΔ[this.ᐃᐃΔⲆ.level], y, q);
                }
                io.globalAlpha = 1;
            } else {
                q = Math.floor(jq * -70);
                p = Math.floor(ᐃⵠ[558].width / 1.5);
            }
            if (rx.ΔΔⲆⵠᐃᐃᐃ(this.ΔⵠⲆⲆ)) {
                if (this.ΔⵠⲆⲆ == rx.ᐃⲆⲆⲆⲆ[0]) {
                    k = ᐃⵠ[559];
                } else {
                    k = ᐃⵠ[558];
                }
                Rp(io, k, p - k.width - 5, q - 6);
            }
            io.restore();
        }
    }
    ⵠⵠⲆⵠⲆᐃⵠᐃⵠ = 0;
    ⲆΔⵠⵠⲆⵠⲆⵠᐃ = 1;
    ⵠΔⵠⲆⵠⵠᐃΔΔ = 2;
    ⲆΔᐃΔΔᐃΔᐃⲆ = 3;
    ⵠΔⵠᐃⲆᐃⲆᐃⲆ = 4;
    ᐃⲆᐃⵠⲆᐃᐃ = [[], [], [], [], []];
    ΔⵠⵠⵠΔᐃⲆΔⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var lw = 0;
    function mw(j, e, i, k, n, o, a, q = 0) {
        for (var r = a; r >= q; r--) {
            for (var s = j; s <= e; s++) {
                for (var t = i; k >= t; t++) {
                    var w = ox.ᐃⲆⲆⲆ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== undefined) {
                            for (var y = 0; y < x.length; y++) {
                                var z = x[y];
                                var A = ᐃⵠ[n][qx.time][r];
                                var B = (lw + (s + t) * 3) % 60;
                                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var E = (1 + D * 0.9 / 30) * -A.width;
                                var F = -A.height * (1 + D * 0.9 / 30);
                                D = (B = (lw + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var G = io.globalAlpha;
                                io.globalAlpha = G * (0.9 + D * 0.1);
                                Rp(io, A, rx.ΔᐃⲆ.x + z.x - E / 2, rx.ΔᐃⲆ.y + z.y - F / 2, E, F);
                                io.globalAlpha = G;
                            }
                        }
                    }
                }
            }
        }
    }
    function nw(j, e, i, k, n, o, a, q) {
        if (q === Yd) {
            q = 0;
        }
        qx.Ⲇⵠᐃᐃ[n].ⵠᐃᐃ();
        for (var r = a; q <= r; r--) {
            for (var t = j; e >= t; t++) {
                for (var w = i; k >= w; w++) {
                    var x = ox.ᐃⲆⲆⲆ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== Ft) {
                            for (var z = 0; z < y.length; z++) {
                                var A = y[z];
                                if (A.ⵠᐃᐃ) {
                                    if (A.ⵠΔⲆⵠ.ⵠᐃᐃ() && A.ⵠΔⲆⵠ.ΔΔⲆ == 0) {
                                        A.ⵠᐃᐃ = false;
                                    }
                                    var B = jq * ((1 - A.ⵠΔⲆⵠ.ᐃᐃⲆ) * yx * 600);
                                    var D = Math.sin(A.angle) * B;
                                    var E = B * Math.cos(A.angle);
                                } else {
                                    D = 0;
                                    E = 0;
                                }
                                var F = ᐃⵠ[n][qx.time][r];
                                var G = qx.Ⲇⵠᐃᐃ[n].ᐃᐃⲆ * -F.width;
                                var H = qx.Ⲇⵠᐃᐃ[n].ᐃᐃⲆ * -F.height;
                                Rp(io, F, rx.ΔᐃⲆ.x + A.x - G / 2 + D, rx.ΔᐃⲆ.y + A.y - H / 2 + E, G, H);
                            }
                        }
                    }
                }
            }
        }
    }
    var ow = [];
    for (Pb = 0; Pb < 100; Pb++) {
        var pw = 1;
        if (Math.random() < 0.25) {
            pw = 0;
        }
        ow.push(pw);
    }
    function qw(j, e, i, k, n, o, a, q, r) {
        if (oh === q) {
            q = 0;
        }
        for (var h = a; h >= q; h--) {
            for (var t = j; e >= t; t++) {
                for (var w = i; k >= w; w++) {
                    var x = ox.ᐃⲆⲆⲆ[t][w];
                    if (x !== undefined && _t !== x[o]) {
                        var A = x[o][h];
                        if (A !== Uh) {
                            for (var B = 0; A.length > B; B++) {
                                var D = A[B];
                                if (D.ⵠᐃᐃ) {
                                    if (D.ⵠΔⲆⵠ.ⵠᐃᐃ() && Ur == D.ⵠΔⲆⵠ.ΔΔⲆ) {
                                        D.ⵠᐃᐃ = Gh;
                                    }
                                    var E = jq * (yx * (1 - D.ⵠΔⲆⵠ.ᐃᐃⲆ) * 600);
                                    var F = Math.sin(D.angle) * E;
                                    var G = Math.cos(D.angle) * E;
                                } else {
                                    F = 0;
                                    G = 0;
                                }
                                for (var H = 0; ᐃⵠⵠⵠᐃΔⵠ[h].ⲆⲆⵠΔ > H; H++) {
                                    if (qx.ᐃⲆᐃΔΔ[H].ΔᐃⵠⵠΔⲆⵠ !== xx) {
                                        qx.ᐃⲆᐃΔΔ[H].ⵠᐃᐃ();
                                        qx.ᐃⲆᐃΔΔ[H].ΔᐃⵠⵠΔⲆⵠ = xx;
                                    }
                                    var I = ᐃⵠ[941][qx.time][ᐃⵠⵠⵠᐃΔⵠ[h].ⵠⲆΔΔ[H].ᐃⲆⲆ];
                                    var J = -I.width * qx.ᐃⲆᐃΔΔ[H].ᐃᐃⲆ;
                                    var K = -I.height * qx.ᐃⲆᐃΔΔ[H].ᐃᐃⲆ;
                                    Rp(io, I, rx.ΔᐃⲆ.x + D.x - J / 4 + F + ᐃⵠⵠⵠᐃΔⵠ[h].ⵠⲆΔΔ[H].x, rx.ΔᐃⲆ.y + D.y - K / 4 + G + ᐃⵠⵠⵠᐃΔⵠ[h].ⵠⲆΔΔ[H].y, J / 2, K / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function rw(c, e, f, i, j, k, a, m, n) {
        if (m === Ta) {
            m = 0;
        }
        for (var h = c; h <= e; h++) {
            for (var o = f; i >= o; o++) {
                var p = ox.ᐃⲆⲆⲆ[h][o];
                if (p !== undefined && p[k] !== oh) {
                    var q = p[k];
                    if (q !== undefined) {
                        if (q.scale === 1) {
                            var r = ᐃⵠ[j][qx.time][q.ⵠⵠⲆⵠ];
                            io.save();
                            io.translate(rx.ΔᐃⲆ.x + "#e6636a", rx.ΔᐃⲆ.y + "#1a4935");
                            io.rotate(q.angle);
                            Rp(io, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            io.restore();
                        } else if (q.scale === 3) {
                            for (var t = 0; q.ⲆΔΔ.length > t; t++) {
                                io.save();
                                io.translate(rx.ΔᐃⲆ.x + "#e6636a", rx.ΔᐃⲆ.y + "#1a4935");
                                io.rotate(q.ⲆΔΔ[t].angle);
                                r = ᐃⵠ[j][qx.time][q.ⲆΔΔ[t].ⵠⵠⲆⵠ];
                                Rp(io, r, -r.width / 3 + q.ⲆΔΔ[t].x, -r.height / 3 + q.ⲆΔΔ[t].y, r.width / 1.5, r.height / 1.5);
                                io.restore();
                            }
                        } else {
                            r = ᐃⵠ[j][qx.time][q.ⵠⵠⲆⵠ];
                            io.save();
                            io.translate(rx.ΔᐃⲆ.x + "#e6636a", rx.ΔᐃⲆ.y + "#1a4935");
                            io.rotate(q.angle);
                            Rp(io, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            io.restore();
                        }
                    }
                }
            }
        }
    }
    function sw(j, e, i, k, n, o, a, q, r) {
        if (Ft === q) {
            q = 0;
        }
        for (var h = a; h >= q; h--) {
            for (var t = j; t <= e; t++) {
                for (var v = i; v <= k; v++) {
                    if (r <= 0 || ow[(t + v * r) % ow.length] !== 1) {
                        var w = ox.ᐃⲆⲆⲆ[t][v];
                        if (w !== fq && jj !== w[o]) {
                            var x = w[o][h];
                            if (x !== undefined) {
                                for (var y = 0; x.length > y; y++) {
                                    var z = x[y];
                                    if (z.ⵠᐃᐃ) {
                                        if (z.ⵠΔⲆⵠ.ⵠᐃᐃ() && z.ⵠΔⲆⵠ.ΔΔⲆ == Ur) {
                                            z.ⵠᐃᐃ = false;
                                        }
                                        var A = jq * (yx * (1 - z.ⵠΔⲆⵠ.ᐃᐃⲆ) * 600);
                                        var B = Math.sin(z.angle) * A;
                                        var D = Math.cos(z.angle) * A;
                                    } else {
                                        B = 0;
                                        D = 0;
                                    }
                                    var E = ᐃⵠ[n][qx.time][h];
                                    Rp(io, E, rx.ΔᐃⲆ.x + z.x - E.width / (ΔΔᐃΔⲆ * 2) + B, rx.ΔᐃⲆ.y + z.y - E.height / (ΔΔᐃΔⲆ * 2) + D, E.width / ΔΔᐃΔⲆ, E.height / ΔΔᐃΔⲆ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ΔΔᐃΔⲆ = 1;
    ᐃⵠⵠⵠᐃΔⵠ = [{
        ⲆⲆⵠΔ: 10,
        ⵠⲆΔΔ: [{
            ᐃⲆⲆ: 0,
            y: -20,
            x: -128
        }, {
            x: -86,
            y: -4,
            ᐃⲆⲆ: 1
        }, {
            y: -74,
            x: -60,
            ᐃⲆⲆ: 2
        }, {
            ᐃⲆⲆ: 0,
            y: -144,
            x: -22
        }, {
            y: 86,
            ᐃⲆⲆ: 0,
            x: -58
        }, {
            y: -30,
            x: 3,
            ᐃⲆⲆ: 0
        }, {
            ᐃⲆⲆ: 1,
            x: 65,
            y: -115
        }, {
            ᐃⲆⲆ: 0,
            x: 118,
            y: -50
        }, {
            x: 73,
            y: 15,
            ᐃⲆⲆ: 1
        }, {
            y: 79,
            ᐃⲆⲆ: 0,
            x: 67
        }]
    }, {
        ⲆⲆⵠΔ: 5,
        ⵠⲆΔΔ: [{
            ᐃⲆⲆ: 0,
            x: -45,
            y: -26
        }, {
            ᐃⲆⲆ: 2,
            y: 20,
            x: -45
        }, {
            y: -60,
            ᐃⲆⲆ: 1,
            x: 10
        }, {
            x: 52,
            y: -17,
            ᐃⲆⲆ: 1
        }, {
            y: 45,
            x: 14,
            ᐃⲆⲆ: 0
        }]
    }, {
        ⲆⲆⵠΔ: 3,
        ⵠⲆΔΔ: [{
            x: -30,
            y: 3,
            ᐃⲆⲆ: 2
        }, {
            y: -38,
            x: 7,
            ᐃⲆⲆ: 2
        }, {
            y: 5,
            ᐃⲆⲆ: 2,
            x: 37
        }]
    }, {
        ⵠⲆΔΔ: [{
            x: -74,
            ᐃⲆⲆ: 2,
            y: -87
        }, {
            x: -11,
            y: -10,
            ᐃⲆⲆ: 1
        }, {
            y: 17,
            ᐃⲆⲆ: 1,
            x: -99
        }, {
            x: -66,
            ᐃⲆⲆ: 0,
            y: 84
        }, {
            ᐃⲆⲆ: 1,
            x: -55,
            y: 123
        }, {
            y: 81,
            ᐃⲆⲆ: 2,
            x: 10
        }, {
            x: 52,
            y: 50,
            ᐃⲆⲆ: 0
        }, {
            x: 138,
            ᐃⲆⲆ: 1,
            y: 9
        }, {
            y: -28,
            ᐃⲆⲆ: 0,
            x: 104
        }, {
            y: -56,
            x: 67,
            ᐃⲆⲆ: 2
        }, {
            x: 5,
            ᐃⲆⲆ: 0,
            y: -112
        }],
        ⲆⲆⵠΔ: 11
    }, {
        ⲆⲆⵠΔ: 6,
        ⵠⲆΔΔ: [{
            ᐃⲆⲆ: 2,
            x: -33,
            y: -66
        }, {
            ᐃⲆⲆ: 0,
            x: -58,
            y: 10
        }, {
            x: -19,
            y: 44,
            ᐃⲆⲆ: 1
        }, {
            y: 20,
            x: 44,
            ᐃⲆⲆ: 0
        }, {
            ᐃⲆⲆ: 2,
            x: 53,
            y: -36
        }, {
            x: 7,
            ᐃⲆⲆ: 0,
            y: -62
        }]
    }, {
        ⲆⲆⵠΔ: 3,
        ⵠⲆΔΔ: [{
            y: -25,
            ᐃⲆⲆ: 1,
            x: -19
        }, {
            y: 13,
            ᐃⲆⲆ: 2,
            x: -29
        }, {
            x: 12,
            ᐃⲆⲆ: 0,
            y: 12
        }]
    }];
    var tw = 0;
    var uw = 0;
    var vw = 0;
    var ww = 0;
    function xw(a, b) {
        if (qx.transition) {
            io.globalAlpha = 1;
            a.ⵠΔⲆⲆΔ(b);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            a.ⵠΔⲆⲆΔ(b);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            a.ⵠΔⲆⲆΔ(b);
        }
    }
    function yw(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (qx.transition) {
            io.globalAlpha = 1;
            Rp(io, ᐃⵠ[b][qx.time], 0, 0, f, g, d, e, a, h);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            Rp(io, ᐃⵠ[b][qx.time], 0, 0, f, g, d, e, a, h);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            Rp(io, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function zw(b, c, d, e, f) {
        const i = ~(b & 25736) & (b | 25736);
        const a = (8 << (c >> 16 & 255)) + (0 << (c & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = (1013904223 + (24489 + d) * 1664525) % 4294967296;
        const k = ((41308 + e) * 1103515245 + 12345) % 2147483648;
        const h = (0 << (f >> 24 & 255)) + (8 << (f & 255)) + (16 << (f >> 16 & 255)) + (24 << (f >> 8 & 255));
        const l = Tw(i, a, j, k, h, i);
        const g = gb(a, j, k, h);
        return (16 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) & 255)) + (24 << ((l ^ g) >> 16 & 255)) + (0 << ((l ^ g) >> 24 & 255));
    }
    function Aw(a, b) {
        if (qx.transition) {
            io.globalAlpha = 1;
            a.ᐃΔΔⲆⲆ(b);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            a.ᐃΔΔⲆⲆ(b);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            a.ᐃΔΔⲆⲆ(b);
        }
    }
    function Bw(a) {
        io.save();
        io.translate(rx.ΔᐃⲆ.x + a.x, rx.ΔᐃⲆ.y + a.y);
        io.rotate(a.angle);
        io.globalAlpha = a.alpha;
        var b = ᐃⵠ[a.id][qx.time];
        Rp(io, b, -b.width / 2, -b.height / 2);
        io.globalAlpha = 1;
        io.restore();
    }
    function Cw(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = rx.ΔᐃⲆ.x + f + 820;
        var l = Math.max(rx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.y + so - i - 100, 0);
        var r = l;
        var b = so - l - g;
        if (n) {
            var d = j.ᐃⲆⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ᐃⲆⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ᐃⲆⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (u > s + (t = h - 350 - s - d)) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⵠⲆᐃⵠⲆΔΔ === 1) {
            if (qx.transition) {
                var p = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 77, 72, 252, 239, 187, p);
            } else {
                io.fillStyle = Er.ⲆⲆΔⲆᐃⲆⵠ[qx.time];
            }
            io.fillRect(s, r, t, b);
        } else {
            if (qx.transition) {
                p = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(k.ΔᐃΔ[0], k.ΔᐃΔ[1], k.ΔᐃΔ[2], k.ᐃᐃΔ[0], k.ᐃᐃΔ[1], k.ᐃᐃΔ[2], p);
            } else {
                io.fillStyle = k.ΔⲆⵠᐃΔ[qx.time];
            }
            io.fillRect(s, r, t, b);
        }
    }
    function Dw(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = rx.ΔᐃⲆ.y + f - 700;
        var l = Math.max(rx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.x + no - i - 100, 0);
        var r = l;
        var b = no - l - g;
        if (n) {
            var d = j.ᐃⲆⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ᐃⲆⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ᐃⲆⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h + 350 - s + d) - 3 > u) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ⵠⲆᐃⵠⲆΔΔ === 1) {
            if (qx.transition) {
                var p = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 77, 72, 252, 239, 187, p);
            } else {
                io.fillStyle = Er.ⲆⲆΔⲆᐃⲆⵠ[qx.time];
            }
            io.fillRect(r, s, b, t);
        } else {
            if (qx.transition) {
                p = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(k.ΔᐃΔ[0], k.ΔᐃΔ[1], k.ΔᐃΔ[2], k.ᐃᐃΔ[0], k.ᐃᐃΔ[1], k.ᐃᐃΔ[2], p);
            } else {
                io.fillStyle = k.ΔⲆⵠᐃΔ[qx.time];
            }
            io.fillRect(r, s, b, t);
        }
    }
    function Ew(a) {
        io.globalAlpha = a.alpha;
        Ub(io, a.x + rx.ΔᐃⲆ.x, a.y + rx.ΔᐃⲆ.y, a.r);
        qb(io, Er.ᐃᐃⲆⵠΔᐃᐃ[qx.time]);
        io.globalAlpha = 1;
    }
    function Fw(b, c, d, e, f, g, a, i, j, h) {
        if (qx.transition) {
            io.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            b(c, d, e, f, g, a, i, j, h);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function Gw(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = rx.ΔᐃⲆ.x + j + 820;
        var l = Math.max(rx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.y + so - i - 100, 0);
        var t = l;
        var b = so - l - g;
        if (o) {
            var d = q.ᐃⲆⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ᐃⲆⲆ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ᐃⲆⲆ(s);
        } else {
            d = s.r;
        }
        if (A > u + (f = h - 350 - u - d.x)) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f + 2;
        } else {
            k = false;
            u = A;
            E = -1;
        }
        f = h - 700 - u;
        if (qx.transition) {
            var N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(F, m, p, C);
        if (o) {
            if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 70, 76, 42, 139, 155, N);
            } else {
                io.fillStyle = Er.ⵠⲆᐃⲆᐃⲆⲆ[qx.time];
            }
        } else if (qx.transition) {
            N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (qx.transition) {
                    N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                    io.fillStyle = Jw(17, 94, 96, 169, 214, 211, N);
                } else {
                    io.fillStyle = Er.ΔⲆⵠⵠΔᐃⲆ[qx.time];
                }
            } else if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
            } else {
                io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
            }
            io.fillRect(L, J, M, B);
        }
        if (nx.ΔⵠᐃᐃΔ && o) {
            q.ᐃᐃΔᐃⲆⵠΔⲆΔ(A, E, G, h, -rx.ΔᐃⲆ.y + m, -rx.ΔᐃⲆ.y + m + C);
        }
    }
    function Hw(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (qx.transition) {
            io.globalAlpha = 1;
            Rp(io, ᐃⵠ[b][c][qx.time], 0, 0, g, a, e, f, i, j);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            Rp(io, ᐃⵠ[b][c][qx.time], 0, 0, g, a, e, f, i, j);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            Rp(io, ᐃⵠ[b][c][qx.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function Iw(a, b, c, d, e) {
        if (qx.transition && e == 1) {
            io.globalAlpha = 1;
            Rp(io, ᐃⵠ[a][qx.time][b], c, d);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            Rp(io, ᐃⵠ[a][qx.time][b], c, d);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            io.globalAlpha = e;
            Rp(io, ᐃⵠ[a][qx.time][b], c, d);
            io.globalAlpha = 1;
        }
    }
    function Jw(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(a * e + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(a * g + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function ef(a, b, c) {
        if (qx.transition) {
            io.globalAlpha = 1;
            a.ⵠᐃΔⵠ(b, c);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            a.ⵠᐃΔⵠ(b, c);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            a.ⵠᐃΔⵠ(b, c);
        }
    }
    function tf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = rx.ΔᐃⲆ.y + j + 710;
        var l = Math.max(rx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.x + no - i - 100, 0);
        var t = l;
        var b = no - l - g;
        if (o) {
            var d = q.ᐃⲆⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ᐃⲆⲆ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ᐃⲆⲆ(s);
        } else {
            d = s.r;
        }
        if (A > u + (f = h - 350 - u - d.x)) {
            var k = Bs;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f + 2;
        } else {
            k = false;
            u = A;
            E = -1;
        }
        f = h - 700 - u;
        if (qx.transition) {
            var N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(m, F, C, p);
        if (o) {
            if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 70, 76, 42, 139, 155, N);
            } else {
                io.fillStyle = Er.ⵠⲆᐃⲆᐃⲆⲆ[qx.time];
            }
        } else if (qx.transition) {
            N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (qx.transition) {
                    N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                    io.fillStyle = Jw(17, 94, 96, 169, 214, 211, N);
                } else {
                    io.fillStyle = Er.ΔⲆⵠⵠΔᐃⲆ[qx.time];
                }
            } else if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
            } else {
                io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
            }
            io.fillRect(J, L, B, M);
        }
        if (nx.ΔⵠᐃᐃΔ && o) {
            q.ᐃⵠⵠᐃΔᐃΔΔⲆ(A, E, G, h, -rx.ΔᐃⲆ.x + m, -rx.ΔᐃⲆ.x + m + C);
        }
    }
    function nf(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = rx.ΔᐃⲆ.y + f + 710;
        var l = Math.max(rx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.x + no - i - 100, 0);
        var r = l;
        var b = no - l - g;
        if (n) {
            var d = j.ᐃⲆⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ᐃⲆⲆ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ᐃⲆⲆ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - 350 - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⵠⲆᐃⵠⲆΔΔ === 1) {
            if (qx.transition) {
                var p = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 77, 72, 252, 239, 187, p);
            } else {
                io.fillStyle = Er.ⲆⲆΔⲆᐃⲆⵠ[qx.time];
            }
            io.fillRect(r, s, b, t);
        } else {
            if (qx.transition) {
                p = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(k.ΔᐃΔ[0], k.ΔᐃΔ[1], k.ΔᐃΔ[2], k.ᐃᐃΔ[0], k.ᐃᐃΔ[1], k.ᐃᐃΔ[2], p);
            } else {
                io.fillStyle = k.ΔⲆⵠᐃΔ[qx.time];
            }
            io.fillRect(r, s, b, t);
        }
    }
    function of(f, e, i, j, k, m) {
        var a = j.w1;
        var n = j.w2;
        var o = j.w3;
        var h = rx.ΔᐃⲆ.x + f - 700;
        var l = Math.max(rx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.y + so - i - 100, 0);
        var q = l;
        var b = so - l - g;
        if (m) {
            var d = j.ᐃⲆⲆ(a).x;
        } else {
            d = a.r.x;
        }
        var r = h + 0;
        0;
        r += d + 0 - 2;
        if (m) {
            d = j.ᐃⲆⲆ(n).x;
        } else {
            d = n.r.x;
        }
        var s = h + 250 - r + d;
        var t = (r += s - 2) - 2;
        if (m) {
            d = j.ᐃⲆⲆ(o).x;
        } else {
            d = o.r.x;
        }
        if (r + (s = h + 350 - r + d) - 3 > t) {
            r += s - 2;
        } else {
            r = t;
        }
        s = h + 700 - r;
        if (m > 0 && k.ⵠⲆᐃⵠⲆΔΔ === 1) {
            if (qx.transition) {
                var u = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 77, 72, 252, 239, 187, u);
            } else {
                io.fillStyle = Er.ⲆⲆΔⲆᐃⲆⵠ[qx.time];
            }
            io.fillRect(r, q, s, b);
        } else {
            if (qx.transition) {
                u = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(k.ΔᐃΔ[0], k.ΔᐃΔ[1], k.ΔᐃΔ[2], k.ᐃᐃΔ[0], k.ᐃᐃΔ[1], k.ᐃᐃΔ[2], u);
            } else {
                io.fillStyle = k.ΔⲆⵠᐃΔ[qx.time];
            }
            io.fillRect(r, q, s, b);
        }
    }
    function af(a, b, c, d) {
        if (qx.transition) {
            io.globalAlpha = 1;
            Rp(io, ᐃⵠ[a][qx.time], c, d);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            Rp(io, ᐃⵠ[a][qx.time], c, d);
            qx.time = qx.time ? 0 : 1;
            io.globalAlpha = 1;
        } else {
            Rp(io, b, c, d);
        }
    }
    function rf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = rx.ΔᐃⲆ.y + j - 700;
        var l = Math.max(rx.ΔᐃⲆ.x + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.x + no - i - 100, 0);
        var t = l;
        var b = no - l - g;
        if (o) {
            var d = q.ᐃⲆⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = t;
        var m = u;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ᐃⲆⲆ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ᐃⲆⲆ(s);
        } else {
            d = s.r;
        }
        if (A < u + (f = h + 350 - u + d.x) - 3) {
            var k = Dr;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f - 2;
        } else {
            k = cd;
            u = A;
            E = -1;
        }
        f = h + 700 - u;
        if (qx.transition) {
            var N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(F, m, C, p);
        if (o) {
            if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 70, 76, 42, 139, 155, N);
            } else {
                io.fillStyle = Er.ⵠⲆᐃⲆᐃⲆⲆ[qx.time];
            }
        } else if (qx.transition) {
            N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (qx.transition) {
                    N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                    io.fillStyle = Jw(17, 94, 96, 169, 214, 211, N);
                } else {
                    io.fillStyle = Er.ΔⲆⵠⵠΔᐃⲆ[qx.time];
                }
            } else if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
            } else {
                io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
            }
            io.fillRect(J, L, B, M);
        }
        if (nx.ΔⵠᐃᐃΔ && o) {
            q.ᐃⲆⲆⵠⵠⵠΔᐃᐃ(A, E, G, h, -rx.ΔᐃⲆ.x + F, -rx.ΔᐃⲆ.x + F + C);
        }
    }
    function sf() {
        io.globalAlpha = 1;
        if (qx.transition) {
            var a = qx.ΔΔⵠⵠ.ⵠᐃᐃ();
        }
        qx.ⲆᐃⲆᐃΔᐃⵠᐃΔ(-rx.ΔᐃⲆ.x, -rx.ΔᐃⲆ.y);
        tw = Math.max(Math.floor(-rx.ΔᐃⲆ.x / qx.ⲆⲆⲆⲆᐃⲆⲆ) - 5, 0);
        uw = Math.min(Math.floor((-rx.ΔᐃⲆ.x + rx.ΔᐃⲆ.w) / qx.ⲆⲆⲆⲆᐃⲆⲆ) + 4, qx.ᐃᐃΔᐃᐃ - 1);
        vw = Math.max(Math.floor(-rx.ΔᐃⲆ.y / qx.ⵠⵠⲆⵠⲆⲆⵠ) - 3, 0);
        ww = Math.min(Math.floor((-rx.ΔᐃⲆ.y + rx.ΔᐃⲆ.ⵠⵠΔ) / qx.ⵠⵠⲆⵠⲆⲆⵠ) + 3, qx.ⵠΔᐃΔⵠ - 1);
        (function () {
            for (var b = qx.ⲆⲆΔⲆ.length - 1; b >= 0; b--) {
                var f = qx.ⲆⲆΔⲆ[b];
                if (qx.ᐃⲆⲆⵠᐃ === f.ᐃⲆⲆ) {
                    var j = qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ];
                    if (-rx.ΔᐃⲆ.x >= f.x1 - 230 - no && f.x2 + 330 >= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.y >= f.y1 - so && -rx.ΔᐃⲆ.y <= f.y2 + 100) {
                        var k = f.x2;
                        if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                            k -= 610;
                        }
                        var m = f.x1;
                        if (f.ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                            m += 610;
                        }
                        var p = f.y2;
                        if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                            p -= 610;
                        }
                        var q = f.y1;
                        if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                            q += 610;
                        }
                        if (qx.transition) {
                            var w = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                            io.fillStyle = Jw(j.ΔᐃΔ[0], j.ΔᐃΔ[1], j.ΔᐃΔ[2], j.ᐃᐃΔ[0], j.ᐃᐃΔ[1], j.ᐃᐃΔ[1], w);
                        } else {
                            io.fillStyle = j.ΔⲆⵠᐃΔ[qx.time];
                        }
                        var x = Math.max(rx.ΔᐃⲆ.x + m - 2 - 230, 0);
                        var y = Math.max(-rx.ΔᐃⲆ.x + no - k - 330 - 2, 0);
                        var z = Math.max(rx.ΔᐃⲆ.y + q - 2, 0);
                        var A = Math.max(-rx.ΔᐃⲆ.y + so - p - 100 - 2, 0);
                        io.beginPath();
                        io.fillRect(x, z, no - y - x, so - z - A);
                    }
                }
            }
            for (b = qx.ⲆⲆΔⲆ.length - 1; b >= 0; b--) {
                if ((f = qx.ⲆⲆΔⲆ[b]).ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                    k = f.x2;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        q += 300;
                    }
                    if (!(f.ᐃᐃⲆ & 8) && -rx.ΔᐃⲆ.x >= k - no + 120 && k + 820 >= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.y >= q + 88 - so && -rx.ΔᐃⲆ.y <= p + 50) {
                        Cw(k, q + 88, p - 88, rx.ⵠⵠⲆΔ[0], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 8);
                        Gw(k, q + 88, p - 88, rx.ⵠⵠⲆΔ[0], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 8);
                    }
                    if (!(f.ᐃᐃⲆ & 4) && -rx.ΔᐃⲆ.x >= m - no - 700 && m - 20 >= -rx.ΔᐃⲆ.x && q + 88 - so <= -rx.ΔᐃⲆ.y && -rx.ΔᐃⲆ.y <= p + 50) {
                        of(m, q + 88, p - 88, rx.ⵠⵠⲆΔ[1], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 4);
                        hf(m, q + 88, p - 88, rx.ⵠⵠⲆΔ[1], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 4);
                    }
                    if ((f.ᐃᐃⲆ & 2) === 0 && -rx.ΔᐃⲆ.x >= m - 235 - no && k + 350 >= -rx.ΔᐃⲆ.x && p - so - 275 <= -rx.ΔᐃⲆ.y && p + 490 >= -rx.ΔᐃⲆ.y) {
                        nf(p - 230, m - 230, k + 230, rx.ⵠⵠⲆΔ[2], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 2);
                        tf(p - 230, m - 230, k + 230, rx.ⵠⵠⲆΔ[2], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 2);
                    }
                    if ((f.ᐃᐃⲆ & 1) === 0 && -rx.ΔᐃⲆ.x >= m - 235 - no && -rx.ΔᐃⲆ.x <= k + 350 && -rx.ΔᐃⲆ.y >= q - so - 390 && q + 315 >= -rx.ΔᐃⲆ.y) {
                        Dw(q + 310, m - 230, k + 230, rx.ⵠⵠⲆΔ[3], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 1);
                        rf(q + 310, m - 230, k + 230, rx.ⵠⵠⲆΔ[3], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 1);
                    }
                }
            }
            for (b = qx.ⲆⲆΔⲆ.length - 1; b >= 0; b--) {
                f = qx.ⲆⲆΔⲆ[b];
                if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                    k = f.x2;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        q += 300;
                    }
                    if ((f.ᐃᐃⲆ & 8) !== 0 && k - no + 120 <= -rx.ΔᐃⲆ.x && k + 820 >= -rx.ΔᐃⲆ.x && q + 88 - so <= -rx.ΔᐃⲆ.y && p + 50 >= -rx.ΔᐃⲆ.y) {
                        Cw(k, q + 88, p - 88, rx.ⵠⵠⲆΔ[0], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 8);
                    }
                    if (f.ᐃᐃⲆ & 4 && -rx.ΔᐃⲆ.x >= m - no - 700 && -rx.ΔᐃⲆ.x <= m - 20 && -rx.ΔᐃⲆ.y >= q + 88 - so && -rx.ΔᐃⲆ.y <= p + 50) {
                        of(m, q + 88, p - 88, rx.ⵠⵠⲆΔ[1], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 4);
                    }
                    if (f.ᐃᐃⲆ & 2 && -rx.ΔᐃⲆ.x >= m - 235 - no && k + 350 >= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.y >= p - so - 275 && -rx.ΔᐃⲆ.y <= p + 490) {
                        nf(p - 230, m - 230, k + 230, rx.ⵠⵠⲆΔ[2], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 2);
                    }
                    if ((f.ᐃᐃⲆ & 1) !== 0 && m - 235 - no <= -rx.ΔᐃⲆ.x && k + 350 >= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.y >= q - so - 390 && q + 315 >= -rx.ΔᐃⲆ.y) {
                        Dw(q + 310, m - 230, k + 230, rx.ⵠⵠⲆΔ[3], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 1);
                    }
                }
            }
            for (b = qx.ⲆⲆΔⲆ.length - 1; b >= 0; b--) {
                if ((f = qx.ⲆⲆΔⲆ[b]).ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                    j = qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ];
                    if (-rx.ΔᐃⲆ.x >= f.x1 - 230 - no && f.x2 + 330 >= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.y >= f.y1 - so && f.y2 + 100 >= -rx.ΔᐃⲆ.y) {
                        k = f.x2;
                        if (f.ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                            if ((f.ᐃᐃⲆ & 8) === 0) {
                                k -= 414;
                            } else {
                                k -= 610;
                            }
                        }
                        m = f.x1;
                        if (f.ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                            if (f.ᐃᐃⲆ & 4) {
                                m += 610;
                            } else {
                                m += 414;
                            }
                        }
                        p = f.y2;
                        if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                            if ((f.ᐃᐃⲆ & 2) === 0) {
                                p -= 414;
                            } else {
                                p -= 610;
                            }
                        }
                        q = f.y1;
                        if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                            if ((f.ᐃᐃⲆ & 1) === 0) {
                                q += 414;
                            } else {
                                q += 610;
                            }
                        }
                        if (qx.transition) {
                            w = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                            io.fillStyle = Jw(j.ΔᐃΔ[0], j.ΔᐃΔ[1], j.ΔᐃΔ[2], j.ᐃᐃΔ[0], j.ᐃᐃΔ[1], j.ᐃᐃΔ[2], w);
                        } else {
                            io.fillStyle = j.ΔⲆⵠᐃΔ[qx.time];
                        }
                        x = Math.max(rx.ΔᐃⲆ.x + m - 2 - 230, 0);
                        y = Math.max(-rx.ΔᐃⲆ.x + no - k - 330 - 2, 0);
                        z = Math.max(rx.ΔᐃⲆ.y + q - 2, 0);
                        A = Math.max(-rx.ΔᐃⲆ.y + so - p - 100 - 2, 0);
                        io.beginPath();
                        io.fillRect(x, z, no - y - x, so - z - A);
                    }
                }
            }
            if (nx.ΔⵠᐃᐃΔ) {
                Fw(nw, vw, ww, tw, uw, 695, "isl", 2);
                Fw(nw, vw, ww, tw, uw, 694, "isl", 2);
            }
            Fw(sw, vw, ww, tw, uw, 692, "isl", 2);
            if (nx.ΔⵠᐃᐃΔ) {
                Fw(rw, vw, ww, tw, uw, 243, "de");
            }
            var B = qx.ⵠⲆⵠ[0];
            for (b = 0; b < B.length; b++) {
                for (var d = B[b], C = 0; C < d.ᐃΔⵠⲆⲆ.length; C++) {
                    Bw(d.ᐃΔⵠⲆⲆ[C]);
                }
            }
            if ((cv += yx * 40) > 60) {
                cv -= 60;
            }
            Fw(fv, vw, ww, tw, uw, 1024, "r", 0);
            b = 0;
            for (; b < qx.ⲆⲆΔⲆ.length; b++) {
                f = qx.ⲆⲆΔⲆ[b];
                if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                    k = f.x2;
                    if (f.ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (f.ᐃⲆⲆ !== qx.ᐃⲆⲆⵠᐃ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (qx.ᐃⲆⲆⵠᐃ !== f.ᐃⲆⲆ) {
                        q += 300;
                    }
                    if ((f.ᐃᐃⲆ & 8) > 0 && k - no + 120 <= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.x <= k + 820 && -rx.ΔᐃⲆ.y >= q + 88 - so && p + 50 >= -rx.ΔᐃⲆ.y) {
                        Gw(k, q + 88, p - 88, rx.ⵠⵠⲆΔ[0], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 8);
                    }
                    if ((f.ᐃᐃⲆ & 4) > 0 && m - no - 700 <= -rx.ΔᐃⲆ.x && m - 20 >= -rx.ΔᐃⲆ.x && q + 88 - so <= -rx.ΔᐃⲆ.y && p + 50 >= -rx.ΔᐃⲆ.y) {
                        hf(m, q + 88, p - 88, rx.ⵠⵠⲆΔ[1], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 4);
                    }
                    if ((f.ᐃᐃⲆ & 2) > 0 && m - 235 - no <= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.x <= k + 350 && p - so - 275 <= -rx.ΔᐃⲆ.y && -rx.ΔᐃⲆ.y <= p + 490) {
                        tf(p - 230, m - 230, k + 230, rx.ⵠⵠⲆΔ[2], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 2);
                    }
                    if ((f.ᐃᐃⲆ & 1) > 0 && -rx.ΔᐃⲆ.x >= m - 235 - no && k + 350 >= -rx.ΔᐃⲆ.x && -rx.ΔᐃⲆ.y >= q - so - 390 && q + 315 >= -rx.ΔᐃⲆ.y) {
                        rf(q + 310, m - 230, k + 230, rx.ⵠⵠⲆΔ[3], qx.ᐃᐃⲆⲆᐃ[f.ᐃⲆⲆ], f.ᐃᐃⲆ & 1);
                    }
                }
            }
        })();
        (function () {
            var b = tw;
            var c = uw;
            var e = vw;
            var i = ww;
            if (nx.ΔⵠᐃᐃΔ) {
                Fw(sw, e, i, b, c, 621, "l", 2);
            }
            if (nx.ΔⵠᐃᐃΔ) {
                Fw(sw, e, i, b, c, Er.ⲆⵠⵠΔᐃ, "la", 5);
            }
            Fw(sw, e, i, b, c, 203, "la", 5);
            Fw(nw, e, i, b, c, 620, "l", 2);
            if (nx.ΔⵠᐃᐃΔ) {
                Fw(qw, e, i, b, c, 203, "la", 5);
                Fw(nw, e, i, b, c, 619, "l", 2);
            }
            Fw(sw, e, i, b, c, 1052, "ma", 4);
            for (var m = qx.ⵠⲆⵠ[76], n = 0; n < m.length; n++) {
                m[n].ΔΔⲆⲆΔᐃⲆ();
            }
            var q = qx.ⵠⲆⵠ[0];
            for (n = 0; n < q.length; n++) {
                for (var t = q[n], K = 0; K < t.ⵠⲆⵠΔΔ.length; K++) {
                    Ew(t.ⵠⲆⵠΔΔ[K]);
                }
            }
            var W = qx.ⵠⲆⵠ[30];
            for (n = 0; n < W.length; n++) {
                ef(W[n], 125);
                W[n].ⲆⵠᐃⲆᐃ(W[n].info);
            }
            var l = qx.ⵠⲆⵠ[18];
            for (n = 0; n < l.length; n++) {
                if (l[n].action == 2) {
                    Aw(l[n]);
                }
            }
            var aa = qx.ⵠⲆⵠ[1];
            for (n = 0; n < aa.length; n++) {
                Aw(aa[n], 113);
            }
            var ba = qx.ⵠⲆⵠ[22];
            for (n = 0; n < ba.length; n++) {
                Aw(ba[n]);
            }
            var ca = qx.ⵠⲆⵠ[23];
            for (n = 0; ca.length > n; n++) {
                Aw(ca[n]);
            }
            var da = qx.ⵠⲆⵠ[6];
            for (n = 0; da.length > n; n++) {
                Aw(da[n], 118);
            }
            var p = qx.ⵠⲆⵠ[36];
            for (n = 0; p.length > n; n++) {
                ef(p[n]);
            }
            var C = qx.ⵠⲆⵠ[33];
            for (n = 0; C.length > n; n++) {
                ef(C[n], 141);
            }
            var T = qx.ⵠⲆⵠ[3];
            for (n = 0; n < T.length; n++) {
                Aw(T[n]);
            }
            T = qx.ⵠⲆⵠ[43];
            n = 0;
            for (; n < T.length; n++) {
                Aw(T[n]);
            }
            T = qx.ⵠⲆⵠ[3];
            n = 0;
            for (; T.length > n; n++) {
                xw(T[n]);
            }
            var ea = qx.ⵠⲆⵠ[44];
            for (n = 0; n < ea.length; n++) {
                if (!(ea[n].info & 15) || ea[n].info === 10) {
                    ef(ea[n]);
                }
            }
            var fa = qx.ⵠⲆⵠ[54];
            for (n = 0; n < fa.length; n++) {
                if ((fa[n].info & 15) === 0 || fa[n].info === 10) {
                    ef(fa[n]);
                }
            }
            var ha = qx.ⵠⲆⵠ[55];
            for (n = 0; n < ha.length; n++) {
                if ((ha[n].info & 15) === 0 || ha[n].info === 10) {
                    ef(ha[n]);
                }
            }
            var ia = qx.ⵠⲆⵠ[79];
            for (n = 0; ia.length > n; n++) {
                ef(ia[n], 132);
            }
            var ja = qx.ⵠⲆⵠ[39];
            for (n = 0; n < ja.length; n++) {
                if ((ja[n].info & 15) === 0 || ja[n].info === 10) {
                    ef(ja[n]);
                }
            }
            var ka = qx.ⵠⲆⵠ[40];
            for (n = 0; n < ka.length; n++) {
                if (!(ka[n].info & 15) || ka[n].info === 10) {
                    ef(ka[n]);
                }
            }
            var la = qx.ⵠⲆⵠ[37];
            for (n = 0; n < la.length; n++) {
                if (!(la[n].info & 15) || la[n].info === 10) {
                    ef(la[n]);
                }
            }
            ia = qx.ⵠⲆⵠ[31];
            n = 0;
            for (; n < ia.length; n++) {
                ef(ia[n]);
            }
            var ma = qx.ⵠⲆⵠ[86];
            for (n = 0; n < ma.length; n++) {
                ef(ma[n], 250, 729);
            }
            var J = qx.ⵠⲆⵠ[82];
            for (n = 0; n < J.length; n++) {
                ef(J[n], 250, 729);
            }
            var M = qx.ⵠⲆⵠ[87];
            for (n = 0; n < M.length; n++) {
                ef(M[n], 854, 859);
            }
            var B = qx.ⵠⲆⵠ[45];
            for (n = 0; B.length > n; n++) {
                if (B[n].info & 1) {
                    ef(B[n], 336);
                }
            }
            B = qx.ⵠⲆⵠ[46];
            n = 0;
            for (; B.length > n; n++) {
                if (B[n].info & 1) {
                    ef(B[n], 373);
                }
            }
            B = qx.ⵠⲆⵠ[47];
            n = 0;
            for (; B.length > n; n++) {
                if (B[n].info) {
                    ef(B[n], 376);
                }
            }
            B = qx.ⵠⲆⵠ[48];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info) {
                    ef(B[n], 379);
                }
            }
            B = qx.ⵠⲆⵠ[49];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info) {
                    ef(B[n], 500);
                }
            }
            B = qx.ⵠⲆⵠ[53];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info) {
                    ef(B[n], 376);
                }
            }
            B = qx.ⵠⲆⵠ[10];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info & 1) {
                    ef(B[n], 336);
                }
            }
            B = qx.ⵠⲆⵠ[15];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info & 1) {
                    ef(B[n], 373);
                }
            }
            B = qx.ⵠⲆⵠ[16];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info) {
                    ef(B[n], 376);
                }
            }
            B = qx.ⵠⲆⵠ[17];
            n = 0;
            for (; B.length > n; n++) {
                if (B[n].info) {
                    ef(B[n], 379);
                }
            }
            B = qx.ⵠⲆⵠ[21];
            n = 0;
            for (; n < B.length; n++) {
                if (B[n].info) {
                    ef(B[n], 500);
                }
            }
            B = qx.ⵠⲆⵠ[51];
            n = 0;
            for (; B.length > n; n++) {
                if (B[n].info) {
                    ef(B[n], 376);
                }
            }
            var na = qx.ⵠⲆⵠ[80];
            for (n = 0; na.length > n; n++) {
                ef(na[n], 264, 322);
            }
            var D = qx.ⵠⲆⵠ[41];
            for (n = 0; n < D.length; n++) {
                ef(D[n], 198);
            }
            m = qx.ⵠⲆⵠ[76];
            n = 0;
            for (; m.length > n; n++) {
                ef(m[n], Er.ⲆⲆⲆⲆⲆᐃⲆ, Er.ΔⲆΔᐃΔᐃΔΔⲆ);
            }
            var oa = qx.ⵠⲆⵠ[91];
            for (n = 0; oa.length > n; n++) {
                if (oa[n].ΔⵠⵠΔⵠⵠΔ === 0) {
                    ef(oa[n]);
                }
            }
            q = qx.ⵠⲆⵠ[0];
            n = 0;
            for (; q.length > n; n++) {
                t = q[n];
                if (q[n].ΔᐃⵠΔᐃ !== 227 && q[n].ΔᐃⵠΔᐃ !== 228 && q[n].ΔᐃⵠΔᐃ !== 229 && q[n].ΔᐃⵠΔᐃ !== 230 && q[n].ΔᐃⵠΔᐃ !== 91) {
                    if (t.ⲆΔⵠⲆⵠΔΔ === 0) {
                        if (t.ᐃⲆᐃΔᐃⵠⵠ > 0.001) {
                            t.ᐃⲆᐃΔᐃⵠⵠ = og.ᐃⵠⵠⲆⲆⲆⵠ(t.ᐃⲆᐃΔᐃⵠⵠ, 0, 0.018);
                            var pa = 1 + Math.min(1, Math.max(t.ᐃⲆᐃΔᐃⵠⵠ, 0) / 100) * 0.18;
                            io.save();
                            io.scale(pa, pa);
                            rx.ΔᐃⲆ.x /= pa;
                            rx.ΔᐃⲆ.y /= pa;
                            t.x /= pa;
                            t.y /= pa;
                            t.r.x /= pa;
                            t.r.y /= pa;
                            t.ⲆⵠⲆᐃΔⵠᐃ();
                            t.ⵠᐃΔⵠ();
                            rx.ΔᐃⲆ.x *= pa;
                            rx.ΔᐃⲆ.y *= pa;
                            t.x *= pa;
                            t.y *= pa;
                            t.r.x *= pa;
                            t.r.y *= pa;
                            io.restore();
                        } else {
                            t.ΔⵠⵠΔⵠⵠΔ = 0;
                            t.ⲆⵠⲆᐃΔⵠᐃ();
                            t.ⵠᐃΔⵠ();
                        }
                    }
                } else if (t.ⵠⲆᐃⲆⵠ <= 180) {
                    io.save();
                    pa = 1 + Math.min(1, Math.max(t.ΔⲆᐃⲆΔ - 30, 0) / 180) * 0.35;
                    io.scale(pa, pa);
                    rx.ΔᐃⲆ.x /= pa;
                    rx.ΔᐃⲆ.y /= pa;
                    t.x /= pa;
                    t.y /= pa;
                    t.r.x /= pa;
                    t.r.y /= pa;
                    t.ΔⵠⵠΔⵠⵠΔ = 0;
                    t.ⲆⵠⲆᐃΔⵠᐃ();
                    t.ⵠᐃΔⵠ();
                    rx.ΔᐃⲆ.x *= pa;
                    rx.ΔᐃⲆ.y *= pa;
                    t.x *= pa;
                    t.y *= pa;
                    t.r.x *= pa;
                    t.r.y *= pa;
                    io.restore();
                }
            }
            D = qx.ⵠⲆⵠ[41];
            n = 0;
            for (; D.length > n; n++) {
                ef(D[n], 913);
            }
            var qa = qx.ⵠⲆⵠ[67];
            for (n = 0; n < qa.length; n++) {
                ef(qa[n]);
            }
            var _ = qx.ⵠⲆⵠ[62];
            for (n = 0; _.length > n; n++) {
                ef(_[n], 419, 461);
            }
            var F = qx.ⵠⲆⵠ[70];
            for (n = 0; n < F.length; n++) {
                ef(F[n]);
            }
            var R = qx.ⵠⲆⵠ[60];
            for (n = 0; n < R.length; n++) {
                ef(R[n], 299, 326);
            }
            var G = qx.ⵠⲆⵠ[72];
            for (n = 0; G.length > n; n++) {
                ef(G[n], 232, 1077);
            }
            var j = qx.ⵠⲆⵠ[73];
            for (n = 0; n < j.length; n++) {
                ef(j[n], 233, 1092);
            }
            ea = qx.ⵠⲆⵠ[44];
            n = 0;
            for (; ea.length > n; n++) {
                if (ea[n].info & 15 && ea[n].info !== 10) {
                    ef(ea[n]);
                }
            }
            fa = qx.ⵠⲆⵠ[54];
            n = 0;
            for (; fa.length > n; n++) {
                if (fa[n].info & 15 && fa[n].info !== 10) {
                    ef(fa[n]);
                }
            }
            ha = qx.ⵠⲆⵠ[89];
            n = 0;
            for (; n < ha.length; n++) {
                ef(ha[n], 239);
            }
            ha = qx.ⵠⲆⵠ[55];
            n = 0;
            for (; ha.length > n; n++) {
                if ((ha[n].info & 15) !== 0 && ha[n].info !== 10) {
                    ef(ha[n]);
                }
            }
            T = qx.ⵠⲆⵠ[43];
            n = 0;
            for (; T.length > n; n++) {
                xw(T[n]);
            }
            ja = qx.ⵠⲆⵠ[39];
            n = 0;
            for (; n < ja.length; n++) {
                if (ja[n].info & 15 && ja[n].info !== 10) {
                    ef(ja[n]);
                }
            }
            ka = qx.ⵠⲆⵠ[40];
            n = 0;
            for (; n < ka.length; n++) {
                if (ka[n].info & 15 && ka[n].info !== 10) {
                    ef(ka[n]);
                }
            }
            la = qx.ⵠⲆⵠ[37];
            n = 0;
            for (; la.length > n; n++) {
                if (la[n].info & 15 && la[n].info !== 10) {
                    ef(la[n]);
                }
            }
            var L = qx.ⵠⲆⵠ[81];
            for (n = 0; n < L.length; n++) {
                ef(L[n], 691, 697);
            }
            var O = qx.ⵠⲆⵠ[66];
            for (n = 0; n < O.length; n++) {
                ef(O[n], 637, 687);
            }
            var N = qx.ⵠⲆⵠ[65];
            for (n = 0; n < N.length; n++) {
                ef(N[n], 673, 688);
            }
            var H = qx.ⵠⲆⵠ[61];
            for (n = 0; n < H.length; n++) {
                ef(H[n], 260, 333);
            }
            var U = qx.ⵠⲆⵠ[88];
            for (n = 0; U.length > n; n++) {
                ef(U[n], 1033, 1034);
            }
            var Y = qx.ⵠⲆⵠ[63];
            for (n = 0; Y.length > n; n++) {
                ef(Y[n], 445, 462);
            }
            var V = qx.ⵠⲆⵠ[77];
            for (n = 0; V.length > n; n++) {
                ef(V[n]);
            }
            var Z = qx.ⵠⲆⵠ[68];
            for (n = 0; n < Z.length; n++) {
                ef(Z[n], 918, 919);
            }
            var X = qx.ⵠⲆⵠ[71];
            for (n = 0; X.length > n; n++) {
                ef(X[n]);
            }
            var ra = qx.ⵠⲆⵠ[78];
            for (n = 0; ra.length > n; n++) {
                ef(ra[n], 1218, 1219);
            }
            var sa = qx.ⵠⲆⵠ[64];
            for (n = 0; sa.length > n; n++) {
                if (sa[n].scale === 1) {
                    ef(sa[n], 449, 463);
                }
            }
            sa = qx.ⵠⲆⵠ[69];
            n = 0;
            for (; sa.length > n; n++) {
                if (sa[n].scale === 1) {
                    ef(sa[n], 450, 464);
                }
            }
            var ta = qx.ⵠⲆⵠ[11];
            for (n = 0; n < ta.length; n++) {
                ef(ta[n]);
            }
            var ua = qx.ⵠⲆⵠ[2];
            for (n = 0; n < ua.length; n++) {
                ef(ua[n], 114);
            }
            l = qx.ⵠⲆⵠ[18];
            n = 0;
            for (; n < l.length; n++) {
                ef(l[n]);
            }
            var va = qx.ⵠⲆⵠ[34];
            for (n = 0; n < va.length; n++) {
                ef(va[n]);
            }
            B = qx.ⵠⲆⵠ[10];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 166);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[15];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 171);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[16];
            n = 0;
            for (; n < B.length; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 172);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[17];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 173);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[21];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 124);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[51];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 218);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[45];
            n = 0;
            for (; n < B.length; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 212);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[46];
            n = 0;
            for (; n < B.length; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 213);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[47];
            n = 0;
            for (; n < B.length; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 214);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[48];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 215);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[49];
            n = 0;
            for (; n < B.length; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 216);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            B = qx.ⵠⲆⵠ[53];
            n = 0;
            for (; B.length > n; n++) {
                if (!(B[n].info & 1)) {
                    ef(B[n], 220);
                }
                B[n].ⲆⵠᐃⲆᐃ(B[n].info >> 1);
            }
            var wa = qx.ⵠⲆⵠ[4];
            for (n = 0; n < wa.length; n++) {
                ef(wa[n], 162);
                wa[n].ⲆⵠᐃⲆᐃ(wa[n].info);
            }
            wa = qx.ⵠⲆⵠ[7];
            n = 0;
            for (; wa.length > n; n++) {
                ef(wa[n], 163);
                wa[n].ⲆⵠᐃⲆᐃ(wa[n].info);
            }
            wa = qx.ⵠⲆⵠ[8];
            n = 0;
            for (; wa.length > n; n++) {
                ef(wa[n], 164);
                wa[n].ⲆⵠᐃⲆᐃ(wa[n].info);
            }
            wa = qx.ⵠⲆⵠ[9];
            n = 0;
            for (; wa.length > n; n++) {
                ef(wa[n], 165);
                wa[n].ⲆⵠᐃⲆᐃ(wa[n].info);
            }
            wa = qx.ⵠⲆⵠ[19];
            n = 0;
            for (; wa.length > n; n++) {
                ef(wa[n], 122);
                wa[n].ⲆⵠᐃⲆᐃ(wa[n].info);
            }
            wa = qx.ⵠⲆⵠ[50];
            n = 0;
            for (; wa.length > n; n++) {
                ef(wa[n], 217);
                wa[n].ⲆⵠᐃⲆᐃ(wa[n].info);
            }
            var xa = qx.ⵠⲆⵠ[5];
            for (n = 0; xa.length > n; n++) {
                ef(xa[n], 160);
                xa[n].ⲆⵠᐃⲆᐃ(xa[n].info);
            }
            xa = qx.ⵠⲆⵠ[12];
            n = 0;
            for (; n < xa.length; n++) {
                ef(xa[n], 168);
                xa[n].ⲆⵠᐃⲆᐃ(xa[n].info);
            }
            xa = qx.ⵠⲆⵠ[13];
            n = 0;
            for (; xa.length > n; n++) {
                ef(xa[n], 169);
                xa[n].ⲆⵠᐃⲆᐃ(xa[n].info);
            }
            xa = qx.ⵠⲆⵠ[14];
            n = 0;
            for (; xa.length > n; n++) {
                ef(xa[n], 170);
                xa[n].ⲆⵠᐃⲆᐃ(xa[n].info);
            }
            xa = qx.ⵠⲆⵠ[20];
            n = 0;
            for (; n < xa.length; n++) {
                ef(xa[n], 123);
                xa[n].ⲆⵠᐃⲆᐃ(xa[n].info);
            }
            xa = qx.ⵠⲆⵠ[52];
            n = 0;
            for (; xa.length > n; n++) {
                ef(xa[n], 219);
                xa[n].ⲆⵠᐃⲆᐃ(xa[n].info);
            }
            var ya = qx.ⵠⲆⵠ[35];
            for (n = 0; ya.length > n; n++) {
                var za = ya[n];
                if (za.info > 0) {
                    ef(za, 788);
                } else {
                    ef(za, 182);
                }
            }
            var Aa = qx.ⵠⲆⵠ[29];
            for (n = 0; Aa.length > n; n++) {
                ef(Aa[n], 159);
            }
            Fw(sw, e, i, b, c, 111, "g", 2);
            Fw(sw, e, i, b, c, 415, "gw", 2);
            Fw(sw, e, i, b, c, 112, "d", 2);
            Fw(sw, e, i, b, c, 416, "dw", 2);
            Fw(sw, e, i, b, c, 110, "p", 0);
            Fw(sw, e, i, b, c, 241, "m", 2);
            Fw(sw, e, i, b, c, 121, "a", 2);
            Fw(sw, e, i, b, c, 202, "re", 2);
            Fw(sw, e, i, b, c, 679, "cs", 3, 3);
            Fw(sw, e, i, b, c, 679, "cs", 2, 2);
            Fw(sw, e, i, b, c, 679, "cs", 1, 1);
            Fw(sw, e, i, b, c, 679, "cs", 0, 0);
            Fw(sw, e, i, b, c, 676, "cs", 3, 3);
            Fw(sw, e, i, b, c, 676, "cs", 2, 2);
            Fw(sw, e, i, b, c, 676, "cs", 1, 1);
            Fw(sw, e, i, b, c, 676, "cs", 0, 0);
            var Ba = qx.ⵠⲆⵠ[100];
            for (n = 0; n < Ba.length; n++) {
                for (K = 0; K < Ba[n].info; K++) {
                    ef(Ba[n].ⵠΔᐃⲆ[K], 294);
                }
            }
            Fw(sw, e, i, b, c, 108, "s", 2);
            var Ca = qx.ⵠⲆⵠ[24];
            for (n = 0; Ca.length > n; n++) {
                ef(Ca[n]);
            }
            Ca = qx.ⵠⲆⵠ[25];
            n = 0;
            for (; Ca.length > n; n++) {
                ef(Ca[n]);
            }
            Ca = qx.ⵠⲆⵠ[26];
            n = 0;
            for (; Ca.length > n; n++) {
                ef(Ca[n]);
            }
            Ca = qx.ⵠⲆⵠ[27];
            n = 0;
            for (; Ca.length > n; n++) {
                ef(Ca[n]);
            }
            Ca = qx.ⵠⲆⵠ[28];
            n = 0;
            for (; n < Ca.length; n++) {
                ef(Ca[n]);
            }
            var Da = qx.ⵠⲆⵠ[32];
            for (n = 0; n < Da.length; n++) {
                Aw(Da[n]);
            }
            aa = qx.ⵠⲆⵠ[1];
            n = 0;
            for (; aa.length > n; n++) {
                xw(aa[n]);
            }
            aa = qx.ⵠⲆⵠ[6];
            n = 0;
            for (; n < aa.length; n++) {
                xw(aa[n]);
            }
            l = qx.ⵠⲆⵠ[18];
            n = 0;
            for (; l.length > n; n++) {
                if (l[n].action == 2) {
                    xw(l[n]);
                }
            }
            va = qx.ⵠⲆⵠ[34];
            n = 0;
            for (; n < va.length; n++) {
                xw(va[n]);
            }
            ba = qx.ⵠⲆⵠ[22];
            n = 0;
            for (; ba.length > n; n++) {
                xw(ba[n]);
            }
            ca = qx.ⵠⲆⵠ[23];
            n = 0;
            for (; ca.length > n; n++) {
                xw(ca[n]);
                ca[n].ⲆⵠᐃⲆᐃ(ca[n].info);
            }
            Fw(sw, e, i, b, c, 989, "c", 0);
            Fw(sw, e, i, b, c, 109, "t", 5, 4);
            Fw(sw, e, i, b, c, 413, "f", 2, 2);
            Fw(sw, e, i, b, c, 693, "plm", 0, 0);
            Fw(sw, e, i, b, c, 307, "b", 3, 2);
            Fw(sw, e, i, b, c, 109, "t", 3, 2);
            Fw(sw, e, i, b, c, 307, "b", 1, 0);
            Fw(sw, e, i, b, c, 413, "f", 1, 1);
            Fw(sw, e, i, b, c, 693, "plm", 1, 1);
            Fw(sw, e, i, b, c, 109, "t", 1, 0);
            Fw(sw, e, i, b, c, 413, "f", 0, 0);
            Fw(sw, e, i, b, c, 693, "plm", 2, 2);
            Da = qx.ⵠⲆⵠ[32];
            n = 0;
            for (; Da.length > n; n++) {
                xw(Da[n]);
            }
            var Ea = qx.ⵠⲆⵠ[56];
            for (n = 0; n < Ea.length; n++) {
                ef(Ea[n], 221);
            }
            q = qx.ⵠⲆⵠ[0];
            n = 0;
            for (; q.length > n; n++) {
                if ((t = q[n]).ⲆΔⵠⲆⵠΔΔ === 1 && (t.ⵠⲆᐃⲆⵠ < 180 || t.ΔᐃⵠΔᐃ !== 227 && t.ΔᐃⵠΔᐃ !== 228 && t.ΔᐃⵠΔᐃ !== 91 && t.ΔᐃⵠΔᐃ !== 229 && t.ΔᐃⵠΔᐃ !== 230)) {
                    t.ᐃⲆᐃΔᐃⵠⵠ = og.ᐃⵠⵠⲆⲆⲆⵠ(t.ᐃⲆᐃΔᐃⵠⵠ, 100, 0.018);
                    pa = 1 + Math.min(1, Math.max(t.ᐃⲆᐃΔᐃⵠⵠ, 0) / 100) * 0.18;
                    io.save();
                    io.scale(pa, pa);
                    rx.ΔᐃⲆ.x /= pa;
                    rx.ΔᐃⲆ.y /= pa;
                    t.x /= pa;
                    t.y /= pa;
                    t.r.x /= pa;
                    t.r.y /= pa;
                    t.ⲆⵠⲆᐃΔⵠᐃ();
                    t.ⵠᐃΔⵠ();
                    rx.ΔᐃⲆ.x *= pa;
                    rx.ΔᐃⲆ.y *= pa;
                    t.x *= pa;
                    t.y *= pa;
                    t.r.x *= pa;
                    t.r.y *= pa;
                    io.restore();
                }
            }
            var Fa = qx.ⵠⲆⵠ[38];
            for (n = 0; n < Fa.length; n++) {
                ef(Fa[n], 190);
                Fa[n].ⲆⵠᐃⲆᐃ(Fa[n].info);
            }
            var Ga = qx.ⵠⲆⵠ[90];
            for (n = 0; n < Ga.length; n++) {
                ef(Ga[n], 245, 246);
            }
            var Ha = qx.ⵠⲆⵠ[42];
            for (n = 0; Ha.length > n; n++) {
                ef(Ha[n], 201);
            }
            q = qx.ⵠⲆⵠ[0];
            n = 0;
            for (; n < q.length; n++) {
                if (((t = q[n]).ΔᐃⵠΔᐃ === 227 || t.ΔᐃⵠΔᐃ === 228 || t.ΔᐃⵠΔᐃ === 91 || t.ΔᐃⵠΔᐃ === 229 || t.ΔᐃⵠΔᐃ === 230) && t.ⵠⲆᐃⲆⵠ > 180) {
                    t.ΔⵠⵠΔⵠⵠΔ = 1;
                    io.save();
                    pa = 1 + Math.min(1, Math.max(t.ΔⲆᐃⲆΔ - 30, 0) / 180) * 0.35;
                    io.scale(pa, pa);
                    rx.ΔᐃⲆ.x /= pa;
                    rx.ΔᐃⲆ.y /= pa;
                    t.x /= pa;
                    t.y /= pa;
                    t.r.x /= pa;
                    t.r.y /= pa;
                    t.ⲆⵠⲆᐃΔⵠᐃ();
                    t.ⵠᐃΔⵠ();
                    rx.ΔᐃⲆ.x *= pa;
                    rx.ΔᐃⲆ.y *= pa;
                    t.x *= pa;
                    t.y *= pa;
                    t.r.x *= pa;
                    t.r.y *= pa;
                    io.restore();
                }
            }
            oa = qx.ⵠⲆⵠ[91];
            n = 0;
            for (; oa.length > n; n++) {
                if (oa[n].ΔⵠⵠΔⵠⵠΔ === 1) {
                    ef(oa[n]);
                }
            }
            sa = qx.ⵠⲆⵠ[64];
            n = 0;
            for (; n < sa.length; n++) {
                if (sa[n].scale > 1) {
                    ef(sa[n], 449, 463);
                }
            }
            sa = qx.ⵠⲆⵠ[69];
            n = 0;
            for (; n < sa.length; n++) {
                if (sa[n].scale > 1) {
                    ef(sa[n], 450, 464);
                }
            }
            var Ia = qx.ⵠⲆⵠ[74];
            for (n = 0; n < Ia.length; n++) {
                ef(Ia[n], 235, 1107);
            }
            var Ja = qx.ⵠⲆⵠ[75];
            for (n = 0; Ja.length > n; n++) {
                ef(Ja[n], 238, 1128);
            }
            if ((lw += yx * 15) > 60) {
                lw -= 60;
            }
            Fw(mw, e, i, b, c, 1041, "fo", 2);
            Fw(mw, e, i, b, c, 244, "fod", 2);
        })();
        if (nx.ΔⵠᐃᐃΔ && qx.mode !== 2 && qx.mode !== 4 && qx.mode !== 5) {
            (function () {
                var a = rx.ⲆΔΔⲆⲆ;
                if (a.ΔᐃⵠⵠⲆ === 0) {
                    a.ⵠᐃᐃⵠⲆ = Math.max(0, a.ⵠᐃᐃⵠⲆ - yx / 10);
                } else {
                    a.ⵠᐃᐃⵠⲆ = Math.min(1, a.ⵠᐃᐃⵠⲆ + yx / 10);
                }
                for (var b = a.ⵠⲆⵠⵠⵠ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⵠᐃᐃ(d);
                    Iw(471, d.id, rx.ΔᐃⲆ.x + d.x, rx.ΔᐃⲆ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ⵠⵠᐃⵠΔ <= 0 || d.x > -rx.ΔᐃⲆ.x + no || -rx.ΔᐃⲆ.x - rx.ΔᐃⲆ.w / 2 > d.x || d.y > -rx.ΔᐃⲆ.y + so) {
                        b.splice(c, 1);
                    }
                }
                var e = -rx.ΔᐃⲆ.y;
                if (qx.ⵠⲆᐃᐃⲆ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = rx.ⲆΔⵠᐃᐃ;
                if (a.ΔᐃⵠⵠⲆ === 0) {
                    a.ⵠᐃᐃⵠⲆ = Math.max(0, a.ⵠᐃᐃⵠⲆ - yx / 10);
                } else {
                    a.ⵠᐃᐃⵠⲆ = Math.min(1, a.ⵠᐃᐃⵠⲆ + yx / 10);
                }
                for (var b = a.ⵠⲆⵠⵠⵠ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ⵠᐃᐃ(d);
                    Iw(470, d.id, rx.ΔᐃⲆ.x + d.x, rx.ΔᐃⲆ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    d = b[c];
                    if (d.ⵠⵠᐃⵠΔ <= 0 || d.x > -rx.ΔᐃⲆ.x + no || -rx.ΔᐃⲆ.x > d.x || d.y > -rx.ΔᐃⲆ.y + so) {
                        b.splice(c, 1);
                    }
                }
                var e = -rx.ΔᐃⲆ.y;
                if (qx.ⲆⵠᐃⵠⲆ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = rx.ⵠⵠᐃΔᐃⲆⵠ;
                for (var b = a.ⵠⲆⵠⵠⵠ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ⵠᐃᐃ(d);
                    Iw(942, d.id, rx.ΔᐃⲆ.x + d.x, rx.ΔᐃⲆ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ⵠⵠᐃⵠΔ <= 0 || -rx.ΔᐃⲆ.x + no < d.x || d.x < -rx.ΔᐃⲆ.x || -rx.ΔᐃⲆ.y + so < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -rx.ΔᐃⲆ.y;
                if (qx.ⲆΔΔⵠⵠ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (qx.transition && a) {
            qx.transition = false;
            qx.ΔΔⵠⵠ.ᐃᐃⲆ = 0;
            qx.ΔΔⵠⵠ.ΔΔⲆ = Nq;
        }
    }
    function hf(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = rx.ΔᐃⲆ.x + j - 700;
        var l = Math.max(rx.ΔᐃⲆ.y + e, 0);
        var g = Math.max(-rx.ΔᐃⲆ.y + so - i - 100, 0);
        var t = l;
        var b = so - l - g;
        if (o) {
            var d = q.ᐃⲆⲆ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var m = t;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ᐃⲆⲆ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ᐃⲆⲆ(s);
        } else {
            d = s.r;
        }
        if (A < u + (f = h + 350 - u + d.x) - 3) {
            var k = zh;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f - 2;
        } else {
            k = false;
            u = A;
            E = -1;
        }
        f = h + 700 - u;
        if (qx.transition) {
            var N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(F, m, p, C);
        if (o) {
            if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(15, 70, 76, 42, 139, 155, N);
            } else {
                io.fillStyle = Er.ⵠⲆᐃⲆᐃⲆⲆ[qx.time];
            }
        } else if (qx.transition) {
            N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
            io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
        } else {
            io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
        }
        io.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (qx.transition) {
                    N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                    io.fillStyle = Jw(17, 94, 96, 169, 214, 211, N);
                } else {
                    io.fillStyle = Er.ΔⲆⵠⵠΔᐃⲆ[qx.time];
                }
            } else if (qx.transition) {
                N = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                io.fillStyle = Jw(9, 55, 63, 11, 106, 132, N);
            } else {
                io.fillStyle = Er.ⲆᐃⲆᐃⵠ[qx.time];
            }
            io.fillRect(L, J, M, B);
        }
        if (nx.ΔⵠᐃᐃΔ && o) {
            q.ⲆΔⲆΔΔⵠⵠΔᐃ(A, E, G, h, -rx.ΔᐃⲆ.y + m, -rx.ΔᐃⲆ.y + m + C);
        }
    }
    var lf = 0;
    var gf = 1;
    var uf = 2;
    var bf = 0;
    var df = 1;
    var vf = 2;
    function cf(b, f, i, j, k, n, a, q, t, w, l, g, u, d, x) {
        if (b.length === 0) {
            b = " ";
        }
        if (a === rs) {
            a = 0;
        }
        if (q === br) {
            q = 0;
        }
        if (Ft === t) {
            t = 0;
        }
        if (d === undefined) {
            d = 0;
        }
        var c = document.createElement("canvas");
        var m = c.getContext("2d");
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + j + "px " + f;
        k = Pl !== k ? Math.min(m.measureText(b).width, k) : m.measureText(b).width;
        c.width = k + a;
        c.height = j + q;
        if (n !== Wr) {
            if (l !== undefined) {
                m.globalAlpha = l;
            }
            m.fillStyle = n;
            if (Ze !== g) {
                ⵠⲆⲆᐃᐃΔᐃᐃⲆ(m, t + 2, t, k + a - t * 2 - 4, j + q - t * 2, g);
                m.fill();
            } else {
                m.fillRect(t, t, k + a - t * 2, j + q - t * 2);
            }
            m.globalAlpha = 1;
            if (t !== 0) {
                m.lineWidth = t;
                m.strokeStyle = w;
                m.stroke();
            }
        }
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + j + "px " + f;
        if (Yd !== u) {
            m.strokeStyle = u;
            m.lineWidth = d;
            m.lineJoin = "miter";
            m.miterLimit = 2;
            m.strokeText(b, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
        }
        m.fillStyle = i;
        m.fillText(b, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
        c.w2 = c.width / 2;
        c.ΔΔⲆⲆⵠ = c.height / 2;
        return c;
    }
    function mf(f, e, i, j, k, m, n, p = 0, q = 0, h, r) {
        if (fq === h) {
            h = 0;
        }
        if (r === undefined) {
            r = 1;
        }
        if (m !== 1) {
            m = 0;
        }
        if (j) {
            var s = j;
        }
        var t;
        var u = {
            width: f,
            height: e,
            ⵠΔ: s,
            state: bf,
            translate: {
                x: p,
                y: q,
                ᐃⵠΔⵠⵠ: p,
                ⲆΔⵠⵠΔ: q
            },
            ΔⲆⵠΔⵠΔΔᐃΔ: m,
            Ⲇⵠᐃᐃ: 0,
            callback: n,
            position: h,
            active: r
        };
        function d() {
            return u.ⵠΔ[u.state];
        }
        function v(a) {
            var b = u.translate;
            if (u.width === 0 || u.height === 0) {
                u.width = u.ⵠΔ[0].width;
                u.height = u.ⵠΔ[0].height;
            }
            return a.x > b.x && a.x < b.x + u.width / k && a.y > b.y && a.y < b.y + u.height / k;
        }
        m = function () {
            var a = 0;
            if (u.ΔⲆⵠΔⵠΔΔᐃΔ === 1) {
                if (u.state === df || vf === u.state) {
                    u.Ⲇⵠᐃᐃ = (0 + yx * 1000) % 1000;
                } else if (0 < 0) {
                    u.Ⲇⵠᐃᐃ = 500 < 0 ? 0 + yx * 1000 : 0 - yx * 1000;
                    if (0 > 0 || 0 > 1000) {
                        u.Ⲇⵠᐃᐃ = 0;
                    }
                }
                a = og.ⲆⵠᐃΔᐃ(0 > 500 ? 2 : 0) * 0.2;
            }
            return a;
        };
        if ((k = k === 3 ? 3 : k === 1 ? 2 : 1) === 2) {
            t = function (a) {
                var b = 1 + m();
                var c = d();
                var e = b * u.width / 2;
                var f = b * u.height / 2;
                var g = (e - u.width / 2) / 2;
                var h = (f - u.height / 2) / 2;
                Rp(a, c, u.translate.x - g, u.translate.y - h, e, f);
            };
        } else if (k === 3) {
            t = function (b) {
                var c = d();
                var e = u.width;
                var f = u.height;
                var g = (e - u.width) / 2;
                var h = (f - u.height) / 2;
                Rp(b, c, u.translate.x - g, u.translate.y - h, e, f);
            };
            k = 1;
        } else {
            t = function (a) {
                Rp(a, d(), u.translate.x, u.translate.y);
            };
        }
        return {
            info: u,
            ⲆⵠΔⵠ: function (a, b, c) {
                if (v(b)) {
                    if (c == gf) {
                        u.state = vf;
                    } else if (c == uf || lf == c && u.state != vf) {
                        u.state = df;
                    }
                    return true;
                } else {
                    u.state = bf;
                    return false;
                }
            },
            ⵠᐃΔⵠ: t,
            ᐃΔⵠΔⵠⵠⲆ: v
        };
    }
    function pf(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function Cf(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ᐃⵠΔⵠⵠ: d,
            ⲆΔⵠⵠΔ: e
        };
        return {
            translate: g,
            ⵠᐃΔⵠ: function (a) {
                Rp(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    var Tf = "send";
    var ff = og.ΔⵠⲆⵠⵠΔⵠ("id") === "1" ? 1 : 0;
    var zf = og.ΔⵠⲆⵠⵠΔⵠ("password");
    var yf = og.ΔⵠⲆⵠⵠΔⵠ("debug") || xn;
    if (Pl !== yf) {
        yf = JSON.parse(cj.decodeURIComponent(yf));
    }
    var Kw = og.ΔⵠⲆⵠⵠΔⵠ("server") || jj;
    var Pf = og.ΔⵠⲆⵠⵠΔⵠ("region") || undefined;
    var Af = "starve.io";
    var kf = "https://" + Af;
    var xf = {
        ⲆΔΔᐃⲆᐃᐃ: 16,
        ΔⲆⵠⲆ: 2,
        Δⵠᐃⵠᐃⵠᐃ: 128,
        ⵠⵠᐃΔΔΔΔ: 32,
        IDLE: 64,
        ᐃΔⵠⵠᐃ: 4,
        ⵠⵠΔⵠΔⲆⵠⲆⵠ: 1,
        ⵠᐃⵠⲆⵠᐃΔ: 256,
        ΔΔⲆΔΔⲆⵠ: 8
    };
    var Jf = [{
        ΔⲆⵠⵠⲆ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ΔⲆⵠⵠⲆ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ΔⲆⵠⵠⲆ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ΔⲆⵠⵠⲆ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ΔⲆⵠⵠⲆ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ΔⲆⵠⵠⲆ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ΔⲆⵠⵠⲆ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ΔⲆⵠⵠⲆ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ΔⲆⵠⵠⲆ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ΔⲆⵠⵠⲆ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const Mf = [];
    let Bf = 0;
    var Lw = {
        ΔⲆΔᐃⲆⲆΔ: 0.2,
        ⵠⲆⵠⲆᐃᐃⲆᐃᐃ: 2000,
        ⵠΔⵠⵠΔΔᐃ: 1,
        ΔⲆⲆⵠⵠⵠⵠⵠⵠ: 200,
        ΔⵠΔⲆᐃⵠᐃΔᐃ: 0.58,
        ᐃΔΔΔᐃᐃᐃⲆⲆ: "[6]",
        ⲆᐃⵠᐃᐃⵠⲆ: 3,
        ᐃᐃΔᐃⵠΔΔ: 600000,
        ⵠⲆⵠᐃΔΔⲆⲆⵠ: 3,
        ᐃⵠⲆⵠⲆⲆΔⲆᐃ: 14,
        ᐃⵠⲆⲆⵠⵠⲆ: 2,
        ᐃΔⵠⵠᐃⵠⲆ: 0,
        ⵠᐃⵠⲆᐃᐃⵠ: 4,
        ΔⲆᐃⲆᐃⵠⲆⲆⵠ: 5,
        ΔⲆⲆΔⲆΔⲆᐃᐃ: 50,
        ΔⲆᐃⲆΔⲆᐃⲆⵠ: 60000,
        ΔΔᐃΔⲆⲆⵠⵠⲆ: 125000,
        ⲆⲆⲆⵠΔⲆᐃ: 52,
        ⲆᐃⲆᐃᐃᐃΔΔᐃ: 20,
        ⲆΔΔᐃⲆᐃᐃ: 0.2,
        ΔΔᐃⲆⵠⵠⲆⵠᐃ: 5,
        ᐃΔΔⲆⲆᐃⲆᐃᐃ: 14,
        ⵠⲆᐃΔᐃⲆΔ: 4,
        ᐃᐃᐃⲆΔⲆΔⵠⵠ: 8000,
        ⵠⲆΔⵠⲆⲆⵠᐃⲆ: 25
    };
    var Df = {
        ᐃⲆΔ: 480000,
        ⵠⵠⵠⲆΔⲆΔ: 10,
        ΔΔⵠΔᐃⲆⵠ: 16,
        ⲆⲆΔⲆⲆⲆᐃⲆᐃ: 6,
        ⲆⲆᐃⲆⵠΔᐃ: 60,
        ᐃᐃᐃⵠΔ: 1,
        ⲆⲆⲆⲆⲆ: 2,
        ⲆⲆⲆΔⵠ: 4,
        ᐃΔᐃⵠⵠ: 8,
        ΔⲆΔᐃⲆⲆΔ: 10,
        ΔⲆⵠΔᐃᐃᐃ: 100,
        ΔⵠᐃⵠⲆΔⲆ: 100,
        ⲆΔΔᐃⵠⲆΔ: 100,
        ⲆⲆⲆⵠᐃᐃᐃⲆⲆ: 100,
        ⲆⲆⵠⵠⵠⲆᐃ: 100,
        ⲆⲆⲆⲆᐃᐃⲆ: 100,
        ᐃᐃⵠⵠᐃⲆⲆⲆⲆ: 100,
        ⲆⲆⲆⲆᐃᐃⲆ: 100,
        ⵠⵠΔᐃΔⵠⲆ: 100,
        ⵠΔΔⵠⵠⵠΔ: 100,
        ᐃⲆⲆΔᐃ: 0,
        ⵠΔᐃᐃᐃᐃΔ: 1,
        ΔΔᐃⵠΔ: 2,
        ᐃⵠΔⲆᐃ: 3,
        ᐃᐃⵠⵠΔ: 4,
        ΔᐃⵠΔᐃΔᐃ: 5,
        ᐃⲆᐃΔⲆ: 6,
        ΔΔⵠᐃᐃ: 7,
        ΔⲆⵠⵠⵠᐃⵠΔΔ: {
            sydney: "Sydney",
            losangeles: "Los Angeles",
            osaka: "Osaka",
            atlanta: "Atlanta",
            frankfurt: "Frankfurt"
        },
        ⵠⲆⲆΔΔⲆᐃ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ⲆⵠΔⲆⲆⵠᐃ: 0,
        ⵠⵠⵠⵠᐃⲆᐃ: 0,
        ⵠⵠΔⲆΔⲆΔ: 30,
        ⲆᐃᐃΔⲆⵠⵠᐃᐃ: 2,
        ⲆⲆᐃⲆⵠΔᐃ: 60000,
        ᐃⲆᐃᐃⲆⵠᐃⵠΔ: 0,
        ΔⲆΔᐃⲆⲆΔΔᐃ: 0,
        ⲆⵠΔΔⲆᐃⲆᐃΔ: 50,
        ᐃⵠΔᐃᐃⵠᐃΔΔ: 0,
        ᐃᐃᐃⵠΔΔⵠΔⲆ: 40,
        ᐃΔΔⲆΔᐃᐃⲆⵠ: 39,
        ⲆᐃᐃⲆΔⲆΔᐃⵠ: 830,
        ΔᐃⲆⵠᐃⵠΔ: 25,
        ⵠⵠᐃᐃⵠⲆΔ: 8,
        ⲆᐃᐃⲆᐃ: 0,
        ΔᐃΔⲆΔ: 0,
        ⲆᐃΔΔΔⵠᐃ: 200,
        ᐃᐃΔᐃⲆⲆᐃ: 0,
        ᐃΔΔΔΔ: 250,
        ΔⲆⲆⵠⲆᐃᐃ: 150,
        Ⲇᐃᐃᐃᐃᐃⵠ: 0,
        ⲆⲆᐃΔⲆ: 350,
        ⵠΔΔⵠⵠΔⲆ: 100,
        ⲆᐃⵠᐃΔⲆΔ: 700,
        ⵠⵠⵠⲆᐃ: 39879
    };
    var If = [];
    for (Pb = 0; Pb < 500; Pb++) {
        If[Pb] = 0;
    }
    If[47] = 1;
    If[57] = 1;
    If[0] = 1;
    If[5] = 1;
    If[6] = 1;
    If[30] = 1;
    If[19] = 1;
    If[9] = 1;
    If[62] = 1;
    If[63] = 1;
    If[13] = 1;
    If[14] = 1;
    If[15] = 1;
    If[33] = 1;
    If[34] = 1;
    If[16] = 1;
    If[17] = 1;
    If[12] = 1;
    If[18] = 1;
    var Sf = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var Qf = {
        ⲆⲆⲆΔᐃ: 49,
        ΔᐃⵠΔΔ: 56,
        ᐃⲆⵠᐃⲆ: 30,
        ᐃⲆⵠⲆᐃ: 90,
        ⲆⵠⲆⲆΔ: 43,
        ΔⲆⵠⲆΔ: 7,
        ⵠΔⵠᐃᐃ: 25,
        ᐃᐃⵠᐃⲆ: 79,
        ⵠⵠΔΔΔ: 10,
        ΔⲆⵠᐃⲆ: 9,
        ΔⲆᐃᐃᐃ: 28,
        ΔΔᐃⲆⲆ: 47,
        Δᐃᐃⵠⵠ: 38,
        ⵠⲆⲆᐃᐃ: 100,
        ᐃᐃᐃᐃΔ: 55,
        ΔⵠΔⲆᐃ: 44,
        ᐃᐃⲆΔⲆ: 50,
        ΔⲆⵠᐃᐃ: 60,
        Δᐃᐃⵠᐃ: 22,
        ᐃᐃⲆΔᐃ: 19,
        ΔᐃⲆⵠᐃ: 65,
        ΔⲆᐃⲆⵠ: 39,
        ⲆⵠᐃⵠΔ: 51,
        ⲆⵠΔⵠⵠ: 33,
        ᐃΔⵠᐃⵠ: 31,
        ⲆⵠᐃⲆⲆ: 81,
        ⵠᐃΔᐃΔ: 13,
        ⵠᐃᐃΔᐃᐃΔ: 82,
        ΔΔΔΔⲆ: 91,
        ⲆⲆᐃⲆΔ: 64,
        ⵠΔⵠⲆᐃ: 12,
        ⲆⲆᐃᐃᐃ: 78,
        ⵠᐃΔⲆΔ: 71,
        ⲆⵠΔΔᐃ: 73,
        ΔⵠⵠΔᐃ: 86,
        ⵠΔΔⲆᐃ: 14,
        ΔⲆᐃⵠᐃ: 54,
        ⵠⵠⵠⲆᐃ: 3,
        ΔⲆⲆᐃⵠ: 2,
        ΔΔⵠⲆᐃ: 5,
        ⲆΔⲆΔΔ: 24,
        ⵠⲆⲆⵠⲆ: 48,
        ⲆⵠⵠᐃⲆ: 11,
        ΔᐃᐃⵠⲆ: 4,
        ΔΔⵠⵠᐃ: 88,
        ΔΔⵠΔᐃ: 6,
        ⵠⲆⵠΔⵠ: 70,
        ⵠⲆΔⵠᐃ: 15,
        ⲆΔΔΔᐃ: 17,
        ⵠⲆⵠᐃΔᐃⲆ: 83,
        ᐃⲆΔⵠᐃ: 63,
        ΔⲆⵠⲆⵠΔΔ: 85,
        ᐃΔⵠΔⵠ: 29,
        ΔⲆⲆᐃᐃ: 68,
        ΔᐃⵠᐃΔ: 16,
        ΔⵠᐃᐃⲆⵠᐃ: 84,
        Ⲇⵠᐃⵠⵠ: 61,
        ΔⲆⲆΔᐃ: 72,
        ᐃⵠΔⲆⲆ: 34,
        ᐃᐃⲆᐃⵠ: 37,
        ΔⲆⵠᐃⵠ: 66,
        ᐃⵠᐃᐃⵠ: 67,
        ΔΔⵠΔΔ: 21,
        ΔⵠΔᐃⲆ: 20,
        ᐃᐃⵠᐃΔ: 40,
        ΔⵠⲆⵠⵠ: 26,
        ⲆΔᐃᐃⵠ: 42,
        ⲆⲆⲆⲆⲆᐃⲆ: 76,
        ⲆⲆᐃᐃⲆ: 52,
        ΔⵠΔⵠᐃ: 46,
        ΔᐃⲆᐃΔ: 62,
        ⵠⵠⲆⵠⵠ: 53,
        Δⵠᐃⵠⵠ: 27,
        ᐃΔᐃΔΔ: 74,
        ΔⵠⲆΔΔ: 41,
        ᐃⲆΔⲆΔ: 77,
        ⵠΔⵠⲆⵠ: 18,
        ᐃⵠⲆΔⵠ: 45,
        ⵠΔΔΔΔ: 1,
        ᐃᐃᐃⲆⲆ: 32,
        ΔΔⵠⵠⵠ: 35,
        ᐃᐃᐃᐃⵠ: 23,
        ⵠⲆΔᐃ: 0,
        ⲆΔΔΔⲆ: 75,
        ⲆΔᐃΔΔⵠᐃ: 89,
        ⲆᐃⲆΔⵠ: 36,
        ⵠⲆΔⵠⲆ: 80,
        ᐃΔⵠⵠΔ: 8,
        ᐃⵠⵠⵠⵠ: 87,
        ⵠⲆᐃᐃΔ: 69
    };
    var _f = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
    function Ff(b, c, d, e, f, g) {
        const a = (8 << (e >> 24 & 255)) + (16 << (e >> 16 & 255)) + (24 << (e >> 0 & 255)) + (0 << (e >> 8 & 255));
        const i = (24 << (f >> 0 & 255)) + (8 << (f >> 8 & 255)) + (16 << (f >> 16 & 255)) + (0 << (f >> 24 & 255));
        const j = zk(((64169 + b) * 1103515245 + 12345) % 2147483648, (1 + (c + 50678) * 22695477) % 4294967296, ~(d & 18048) & (d | 18048));
        const h = Ww(a, i);
        return (24 << ((j ^ h) >> 16 & 255)) + (16 << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) & 255));
    }
    function Rf(b, c, d, e, f, i, a, j, k, h) {
        this.type = b;
        this.ΔⵠⲆⲆ = c;
        this.id = d;
        this.x = e;
        this.y = f;
        this.angle = i;
        this.ⵠᐃⵠΔⲆⵠΔ = i;
        this.action = a;
        this.info = j;
        this.ᐃⵠⵠΔⲆ = h;
        this.r = {
            x: e,
            y: f
        };
        this.ⵠⲆᐃⲆⵠ = k;
        if (qx) {
            this.ᐃΔΔⲆ = qx.ᐃⲆΔⵠⲆⵠⲆ * c + d;
        }
        switch (b) {
            case 0:
                this.ᐃᐃΔⲆ = qx.ⲆΔᐃΔ[this.ΔⵠⲆⲆ];
                this.ᐃΔΔΔ = this.ᐃᐃΔⲆ.ᐃΔΔΔ;
                this.ᐃᐃᐃⲆⲆΔᐃ = this.ᐃᐃΔⲆ.ᐃᐃᐃⲆⲆΔᐃ;
                this.ᐃᐃΔⵠⵠ = this.ᐃᐃΔⲆ.ᐃᐃΔⵠⵠ;
                this.ΔⵠⲆᐃⵠ = this.ᐃᐃΔⲆ.ΔⵠⲆᐃⵠ;
                this.ΔⵠⵠΔⵠΔΔ = -1000000;
                this.ⲆΔΔⵠⵠ = -1000000;
                this.ⲆⵠᐃⵠⲆ = -1000000;
                this.ⵠⲆᐃᐃⲆ = -1000000;
                this.ⵠⵠⵠⵠⲆᐃΔ = -1000000;
                this.ᐃΔΔⵠⵠᐃᐃ = -1000000;
                this.ⲆΔᐃᐃⲆ = -1000000;
                this.ⵠⲆⲆᐃⲆ = qx.mode === 2 && this.ᐃΔΔΔ === 0 ? Sh : _e;
                this.ⲆΔⲆΔⵠⵠⵠ = qx.mode === 3 && this.ᐃΔΔΔ === 0 ? Sh : Ur;
                this.ⲆⵠⵠⵠΔⲆⵠ = !!this.ⵠⲆⲆᐃⲆ && this.ᐃᐃΔⲆ.ΔⲆᐃᐃΔ === "  " || _e;
                this.ᐃΔⵠⲆⲆ = [];
                this.ⲆΔⵠⲆⵠΔΔ = 0;
                this.ⵠΔᐃΔ = true;
                this.ᐃⲆΔΔⵠⲆᐃ = 0;
                this.ΔⵠⵠΔⵠⵠΔ = 0;
                this.ⵠⲆⵠΔΔ = [];
                this.r = {
                    x: e,
                    y: f
                };
                this.ⵠᐃΔⵠ = kw;
                this.ⲆⵠⲆᐃΔⵠᐃ = ew;
                this.ᐃⲆⲆΔⲆ = 0;
                this.ⵠᐃⲆΔⲆ = 0;
                this.ΔⲆΔⵠᐃ = 0;
                this.ΔΔΔⵠⵠⲆⵠ = new og.ⵠⵠᐃΔ(Fl, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⲆᐃⲆΔ = 0;
                this.ᐃⲆᐃΔᐃⵠⵠ = 0;
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(al, 0.6, 0.6, 0, 5, 3);
                this.ΔΔΔΔᐃ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                this.freeze = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                this.ⵠⲆΔⵠⵠⲆᐃ = new og.ⵠⵠᐃΔ(_e, 0.6, 0.6, 0, 5, 3);
                this.ΔΔⵠᐃᐃΔⲆ = new og.ⵠⵠᐃΔ(true, 0, 2.25, -1.5, 3.75, 7.5);
                this.ⵠⵠⲆⲆΔΔⲆ = new og.ⵠⵠᐃΔ(xb, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new og.ⵠⵠᐃΔ(false, 0, 0, -Math.PI / 3, 6, 9);
                this.ⵠⵠⵠΔⲆⵠᐃⲆΔ = 0;
                this.ΔᐃΔⲆⲆⲆΔ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 1, 3);
                this.ΔⵠᐃⵠⲆᐃΔ = this.ⲆⵠⵠⵠΔⲆⵠ ? new og.ⵠⵠᐃΔ(Ls, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ⵠⲆΔⲆΔⵠⲆ = 0;
                this.ΔⲆᐃᐃᐃᐃΔ = 0;
                this.ⵠΔΔⲆΔⵠⲆ = [];
                this.ⵠⲆΔᐃΔⵠⲆ = [];
                this.text = [];
                this.label = [];
                this.ΔⵠΔⵠⲆⵠᐃ = hw;
                this.ⵠⵠⲆⵠΔ = F;
                this.right = -1;
                this.ΔᐃⵠΔᐃ = -1;
                this.action = 64;
                this.ⲆⵠⲆⵠⲆⵠⵠ = false;
                this.ᐃⵠⵠᐃᐃ = 0;
                this.ⵠⵠΔⲆⵠ = va;
                this.bubbles = [];
                this.ΔⵠⵠⲆⵠ = 0;
                this.ⵠⵠᐃΔⲆ = -1;
                this.ⵠᐃᐃ = function (a) {
                    if (this.info & 32768) {
                        this.ⲆⵠⲆⵠⲆⵠⵠ = true;
                        this.info = this.info & -32769;
                    } else {
                        this.ⲆⵠⲆⵠⲆⵠⵠ = false;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ΔⵠⵠⲆⵠ = 1;
                    } else {
                        this.ΔⵠⵠⲆⵠ = 0;
                    }
                    this.ᐃⵠⵠᐃᐃ = Math.floor(this.info / 128);
                    this.info -= this.ᐃⵠⵠᐃᐃ * 128;
                    if (this.info === 7 || this.ⲆⵠⵠⵠΔⲆⵠ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ⲆΔⵠⲆⵠΔΔ = qx.ᐃⲆᐃᐃⵠᐃΔΔⲆ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ΔᐃⵠΔᐃ = this.ᐃⵠⵠΔⲆ & 255;
                    if (this.right === 2) {
                        this.ⵠⵠΔⲆⵠ = true;
                    } else {
                        this.ⵠⵠΔⲆⵠ = false;
                    }
                    if (If[this.right]) {
                        this.ⵠⵠⵠⲆⲆ = true;
                    } else {
                        this.ⵠⵠⵠⲆⲆ = false;
                    }
                    if (a & 256) {
                        this.ΔᐃΔⲆⲆⲆΔ.ΔΔⲆ = false;
                        this.ΔᐃΔⲆⲆⲆΔ.ᐃᐃⲆ = 0.6;
                    } else if (a & 4) {
                        this.freeze.ΔΔⲆ = Xg;
                        this.freeze.ᐃᐃⲆ = 0.6;
                    } else if (a & 128) {
                        this.ΔΔΔΔᐃ.ΔΔⲆ = cb;
                        this.ΔΔΔΔᐃ.ᐃᐃⲆ = 0.6;
                    }
                    if (a & 8) {
                        this.ⵠⲆΔⵠⵠⲆᐃ.ΔΔⲆ = false;
                        this.ⵠⲆΔⵠⵠⲆᐃ.ᐃᐃⲆ = 0.6;
                    }
                    if (a & 2) {
                        this.ⵠΔⲆⵠ.ΔΔⲆ = false;
                        this.ⵠΔⲆⵠ.ᐃᐃⲆ = 0.6;
                    }
                    if (a & 16) {
                        this.ⵠⵠⵠΔⲆⵠᐃⲆΔ = 0.58;
                        if (ux.ΔⲆⲆⲆᐃ && this.ⵠⵠᐃΔⲆ !== -1) {
                            ux.ⲆΔᐃΔ[this.ⵠⵠᐃΔⲆ].ᐃΔⵠΔⲆⲆⲆΔⵠ(ex[this.right]);
                        }
                    }
                };
                this.ⵠᐃᐃ();
                break;
            case 23:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: Gh,
                    angle: 0
                };
                this.ᐃΔΔⲆⲆ = lv;
                this.ⵠΔⲆⲆΔ = Pv;
                this.ⵠᐃΔⵠᐃ = new og.ⵠⵠᐃΔ(Ur, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⵠⲆⲆΔΔⵠᐃ = 0;
                this.ᐃⲆⲆᐃⲆⲆⲆ = 0;
                this.ⲆⵠᐃⲆᐃ = av;
                break;
            case 22:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(Gh, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: ws,
                    angle: 0
                };
                this.ᐃΔΔⲆⲆ = Bv;
                this.ⵠΔⲆⲆΔ = Mv;
                this.ⵠᐃΔⵠᐃ = new og.ⵠⵠᐃΔ(Eh, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⵠⲆⲆΔΔⵠᐃ = 0;
                this.ᐃⲆⲆᐃⲆⲆⲆ = 0;
                break;
            case 1:
            case 6:
                this.ᐃΔΔⲆⲆ = Sv;
                this.ⵠΔⲆⲆΔ = cw;
                this.ⵠᐃᐃⲆⲆ = new og.ⵠⵠᐃΔ(vg, 1, 1.03, 0.98, 0.3, 0.3);
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⵠᐃΔⵠᐃ = new og.ⵠⵠᐃΔ(Ur, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                break;
            case 43:
                this.ᐃΔΔⲆⲆ = _v;
                this.ⵠΔⲆⲆΔ = Ev;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(kk, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(Fl, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: ws,
                    angle: 0
                };
                this.ⵠΔᐃⲆ = [];
                for (var l = 0; l < 3; l++) {
                    this.ⵠΔᐃⲆ.push({
                        ⵠᐃΔⵠ: $v,
                        Ⲇⵠᐃᐃ: new og.ⵠⵠᐃΔ(cb, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⵠΔᐃⲆ[0].x = this.x - 16.5;
                this.ⵠΔᐃⲆ[0].y = this.y - 15.5;
                this.ⵠΔᐃⲆ[0].angle = this.angle;
                this.ⵠΔᐃⲆ[1].x = this.x + 36;
                this.ⵠΔᐃⲆ[1].y = this.y + 17;
                this.ⵠΔᐃⲆ[1].angle = this.angle;
                this.ⵠΔᐃⲆ[2].x = this.x - 18.5;
                this.ⵠΔᐃⲆ[2].y = this.y + 39;
                this.ⵠΔᐃⲆ[2].angle = this.angle;
                break;
            case 3:
                this.ᐃΔΔⲆⲆ = Xv;
                this.ⵠΔⲆⲆΔ = wv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⵠΔᐃⲆ = [];
                for (l = 0; l < 3; l++) {
                    this.ⵠΔᐃⲆ.push({
                        ⵠᐃΔⵠ: Zv,
                        Ⲇⵠᐃᐃ: new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⵠΔᐃⲆ[0].x = this.x - 16.5;
                this.ⵠΔᐃⲆ[0].y = this.y - 15.5;
                this.ⵠΔᐃⲆ[1].x = this.x - 5.5;
                this.ⵠΔᐃⲆ[1].y = this.y + 7.5;
                this.ⵠΔᐃⲆ[2].x = this.x + 18;
                this.ⵠΔᐃⲆ[2].y = this.y - 5;
                break;
            case 77:
                this.ⵠᐃΔⵠ = gv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(Gh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 70:
                this.ⵠᐃΔⵠ = bw;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 71:
                this.ⵠᐃΔⵠ = Jv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠᐃⵠⵠᐃⵠ = new og.ⵠⵠᐃΔ(cd, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠᐃΔᐃᐃΔ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(jt, 0.6, 0.6, 0, 5, 3);
                this.ΔΔΔΔᐃ = new og.ⵠⵠᐃΔ(Nq, 0.6, 0.6, 0, 5, 3);
                break;
            case 67:
                this.ⵠᐃΔⵠ = Ov;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠᐃⵠⵠᐃⵠ = new og.ⵠⵠᐃΔ($n, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠᐃΔᐃᐃΔ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(kk, 0.6, 0.6, 0, 5, 3);
                this.ΔΔΔΔᐃ = new og.ⵠⵠᐃΔ(Eh, 0.6, 0.6, 0, 5, 3);
                break;
            case 68:
                this.ⵠᐃΔⵠ = iv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(va, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 90:
                this.ⵠᐃΔⵠ = Fv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(cd, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 91:
                this.ⲆᐃⲆⲆⵠ = this.info & 15;
                this.ΔⵠⵠΔⵠⵠΔ = this.ᐃⵠⵠΔⲆ & 1;
                this.ΔᐃᐃⲆᐃⲆⲆ = 0;
                this.x = this.info;
                this.y = this.ᐃⵠⵠΔⲆ;
                this.ⵠᐃΔⵠ = ev;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(cd, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case 80:
            case 60:
            case 61:
            case 62:
            case 63:
            case 78:
            case 65:
            case 66:
            case 88:
                this.ⵠᐃΔⵠ = Fv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(Ur, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(cd, 0.6, 0.6, 0, 5, 3);
                break;
            case 36:
                this.ⵠᐃΔⵠ = Uv;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(va, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: fs,
                    angle: 0
                };
                break;
            case 34:
                this.ⵠΔⲆⲆΔ = Kv;
                this.ⵠᐃΔⵠ = pv;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ($n, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: jt,
                    angle: 0
                };
                this.up = new og.ⵠⵠᐃΔ(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.ΔⲆΔᐃΔ = [];
                break;
            case 87:
                this.angle = Math.random() * Math.PI / 2;
            case 86:
            case 82:
                this.ⵠᐃΔⵠ = Hv;
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(Eh, 0.6, 0.6, 0, 5, 3);
                break;
            case 81:
                this.ⵠᐃΔⵠ = Yv;
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(vg, 0.6, 0.6, 0, 5, 3);
                break;
            case 69:
                this.scale = 1;
                this.ⵠᐃΔⵠ = Qv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(fs, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(cb, 0.6, 0.6, 0, 5, 3);
                break;
            case 76:
                this.ᐃⲆⲆⵠⲆ = 0;
                this.ⵠΔⲆᐃ = [];
                this.ⲆᐃᐃⲆᐃⲆⲆ = 0;
                this.ΔΔⲆⲆΔᐃⲆ = Av;
                this.ⵠᐃΔⵠ = tv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(cb, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(ws, 0.6, 0.6, 0, 5, 3);
                break;
            case 75:
                this.x = this.info;
                this.y = this.ᐃⵠⵠΔⲆ;
                this.scale = 1;
                this.ⲆⲆⲆᐃ = 0;
                this.ⵠᐃΔⵠ = uv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ($n, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 74:
                this.x = this.info;
                this.y = this.ᐃⵠⵠΔⲆ;
                this.scale = 1;
                this.ⲆⲆⲆᐃ = 0;
                this.ⵠᐃΔⵠ = ov;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(jt, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(fs, 0.6, 0.6, 0, 5, 3);
                break;
            case 73:
                this.scale = 1;
                this.ⵠᐃΔⵠ = Gv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(ws, 0.6, 0.6, 0, 5, 3);
                break;
            case 72:
                this.scale = 1;
                this.ⵠᐃΔⵠ = Wv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(Nq, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 64:
                this.scale = 1;
                this.ⵠᐃΔⵠ = zv;
                this.Ⲇⵠᐃᐃ = new og.ⵠⵠᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new og.ⵠⵠᐃΔ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆⵠ = new og.ⵠⵠᐃΔ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 100:
                this.ⵠΔᐃⲆ = [];
                for (l = 0; l < 5; l++) {
                    this.ⵠΔᐃⲆ.push({
                        ⵠᐃΔⵠ: Zv,
                        Ⲇⵠᐃᐃ: new og.ⵠⵠᐃΔ(Xg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ⵠΔᐃⲆ[0].x = this.x - 20.5;
                        this.ⵠΔᐃⲆ[0].y = this.y - 22.5;
                        this.ⵠΔᐃⲆ[1].x = this.x - 35.5;
                        this.ⵠΔᐃⲆ[1].y = this.y + 7.5;
                        this.ⵠΔᐃⲆ[2].x = this.x + 7.5;
                        this.ⵠΔᐃⲆ[2].y = this.y - 30;
                        this.ⵠΔᐃⲆ[3].x = this.x + 22.5;
                        this.ⵠΔᐃⲆ[3].y = this.y;
                        this.ⵠΔᐃⲆ[4].x = this.x - 7.5;
                        this.ⵠΔᐃⲆ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ⵠΔᐃⲆ[0].x = this.x - 30.5;
                        this.ⵠΔᐃⲆ[0].y = this.y - 22.5;
                        this.ⵠΔᐃⲆ[1].x = this.x - 15.5;
                        this.ⵠΔᐃⲆ[1].y = this.y + 7.5;
                        this.ⵠΔᐃⲆ[2].x = this.x + 15.5;
                        this.ⵠΔᐃⲆ[2].y = this.y - 30;
                        this.ⵠΔᐃⲆ[3].x = this.x + 12.5;
                        this.ⵠΔᐃⲆ[3].y = this.y + 5;
                        this.ⵠΔᐃⲆ[4].x = this.x - 40.5;
                        this.ⵠΔᐃⲆ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ⵠΔᐃⲆ[0].x = this.x - 20.5;
                        this.ⵠΔᐃⲆ[0].y = this.y - 20.5;
                        this.ⵠΔᐃⲆ[1].x = this.x - 35.5;
                        this.ⵠΔᐃⲆ[1].y = this.y + 15.5;
                        this.ⵠΔᐃⲆ[2].x = this.x + 7.5;
                        this.ⵠΔᐃⲆ[2].y = this.y - 17;
                        this.ⵠΔᐃⲆ[3].x = this.x + 22.5;
                        this.ⵠΔᐃⲆ[3].y = this.y + 5;
                        this.ⵠΔᐃⲆ[4].x = this.x - 7.5;
                        this.ⵠΔᐃⲆ[4].y = this.y + 1.5;
                }
                break;
            case 31:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(fs, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: al,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = jv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(fs, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠⲆᐃⵠᐃⲆ = new og.ⵠⵠᐃΔ(cb, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case 40:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(vn, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = Rv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 39:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(Ur, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = rv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 44:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = Tv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 55:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = Cv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 54:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ($n, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: vn,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = qv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(Gh, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 37:
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(Fl, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: Nq,
                    angle: 0
                };
                this.ⵠᐃΔⵠ = Iv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(Eh, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 24:
                this.ⵠᐃΔⵠ = nv;
                this.rotate = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: Fl,
                    angle: 0
                };
                break;
            case 25:
                this.ⵠᐃΔⵠ = vv;
                this.rotate = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(al, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: fs,
                    angle: 0
                };
                break;
            case 26:
                this.ⵠᐃΔⵠ = mv;
                this.rotate = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: vg,
                    angle: 0
                };
                break;
            case 27:
                this.ⵠᐃΔⵠ = hv;
                this.rotate = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                break;
            case 28:
                this.ⵠᐃΔⵠ = aw;
                this.rotate = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(jt, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: fs,
                    angle: 0
                };
                break;
            case 32:
                this.ᐃΔΔⲆⲆ = Dv;
                this.ⵠΔⲆⲆΔ = dv;
                this.rotate = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: vn,
                    angle: 0
                };
                break;
            case 38:
                this.ⵠᐃΔⵠ = Zp;
                this.ⵠΔᐃⵠ = Math.floor(this.x / 100);
                this.ᐃⲆ = Math.floor(this.y / 100);
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: w,
                    angle: 0
                };
                this.opacity = 1;
                this.ⲆⵠᐃⲆᐃ = Pu;
                break;
            case 42:
                this.ⵠᐃΔⵠ = $u;
                this.ⵠᐃΔⵠᐃ = new og.ⵠⵠᐃΔ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: va,
                    angle: 0
                };
                break;
            case 33:
            case 2:
            case 56:
            case 35:
            case 29:
                this.ⵠᐃΔⵠ = Vu;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(Ur, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: Xg,
                    angle: 0
                };
                break;
            case 30:
                this.ⵠᐃΔⵠ = Vu;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(fs, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⲆⵠᐃⲆᐃ = Pu;
                break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 19:
            case 50:
            case 5:
            case 12:
            case 13:
            case 14:
            case 20:
            case 52:
                this.ⵠᐃΔⵠ = Vu;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(va, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: Fl,
                    angle: 0
                };
                this.ⲆⵠᐃⲆᐃ = av;
                break;
            case 41:
                this.ⵠᐃΔⵠ = _u;
                this.opacity = 1;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(Fl, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                var m = this.angle % (Math.PI / 2);
                if (m < Math.PI / 4) {
                    this.angle -= m;
                } else {
                    this.angle += Math.PI / 2 - m;
                }
                break;
            case 79:
                this.ⵠᐃΔⵠ = Ru;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 89:
                this.ⵠᐃΔⵠ = Ju;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 83:
                this.ⵠᐃΔⵠ = Nu;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 84:
                this.ⵠᐃΔⵠ = Wu;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 85:
                this.ⵠᐃΔⵠ = Yu;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 11:
                this.ⵠᐃᐃ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.ⵠᐃΔⵠ = Xp;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.lock = 0;
                this.ⵠᐃᐃ(this.action);
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 53:
            case 10:
            case 15:
            case 16:
            case 17:
            case 21:
            case 51:
                this.ⵠᐃΔⵠ = Uu;
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: false,
                    angle: 0
                };
                this.ⲆⵠᐃⲆᐃ = av;
                break;
            case 18:
                this.ᐃΔΔⲆⲆ = sv;
                this.ⵠᐃΔⵠ = xv;
                this.ⵠΔⲆⲆΔ = yv;
                this.ⵠΔⲆᐃ = new og.ⵠⵠᐃΔ(Xg, 1, 1.23, 1.18, 0.02, 0.02);
                this.ⵠᐃΔⵠᐃ = new og.ⵠⵠᐃΔ(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.ⵠΔⲆⵠ = {
                    ⵠᐃΔᐃ: new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10),
                    ⵠᐃᐃ: w,
                    angle: 0
                };
                this.ⵠᐃᐃ = function (a) {
                    this.action = a;
                };
        }
    }
    function Gf(b) {
        function e(b, c, d, e, f) {
            for (var a = 0; a < f && j(b, c, d, e, 8) !== 1; a++);
            if (a === f) {
                return 0;
            } else {
                return 1;
            }
        }
        function g(b, c, d) {
            var e = c;
            for (var f = d; f < qx.ⵠΔᐃΔⵠ; f++) {
                for (var g = c; g < qx.ᐃᐃΔᐃᐃ && (f === d && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (g < e) {
                    break;
                }
            }
            qx.ⲆⲆΔⲆ.push(new qx.ⲆⲆᐃⵠΔⲆᐃ(qx.ᐃⲆⲆⵠᐃ, c, d, e - c + 1, f - d, 15));
        }
        function j(c, d, e, f, i) {
            var j = d + Math.floor(f * qx.ᐃᐃⵠⵠⵠ.get());
            var a = e + Math.floor(f * qx.ᐃᐃⵠⵠⵠ.get());
            var k = 10 + Math.floor((qx.ᐃᐃΔᐃᐃ - j - 20) * qx.ᐃᐃⵠⵠⵠ.get());
            var m = 10 + Math.floor((qx.ⵠΔᐃΔⵠ - a - 20) * qx.ᐃᐃⵠⵠⵠ.get());
            var h = k + j;
            var l = m + a;
            for (var g = 0; g < qx.ⲆⲆΔⲆ.length; g++) {
                var n = qx.ⲆⲆΔⲆ[g];
                if (og.ᐃⵠⲆᐃⵠⲆΔ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            qx.ⲆⲆΔⲆ.push(new qx.ⲆⲆᐃⵠΔⲆᐃ(c, k, m, j, a, 15));
            return 1;
        }
        function k(b, j, k, m, n, o, a, p) {
            var q = Math.floor(a / 2);
            var h = Math.max(1, Math.floor(a / 2));
            var l = Math.floor(p / 2);
            var g = Math.max(1, Math.floor(p / 2));
            for (var r = 0; k > r; r++) {
                for (var s = b - l; s < b + g; s++) {
                    for (var t = j - q; t < j + h; t++) {
                        if (f(s, t, "wtb", 0, 1) === 1) {
                            o.push([s, t, 1]);
                        }
                    }
                }
                b += m;
                j += n;
            }
        }
        function m(a, b) {
            for (var c = 0; b.length > c; c++) {
                p(b[c][0], b[c][1], a, b[c][2]);
            }
        }
        function a(b, e) {
            var i = qx.ⲆⲆΔⲆ[b];
            var j = Math.floor(i.y1 / 100);
            var n = Math.floor(i.x1 / 100);
            var a = Math.floor(i.ⵠⵠΔ / 100);
            var o = n + (A = Math.floor(i.w / 100));
            var q = 2;
            var r = a;
            var s = j;
            for (var t = n + 10 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * (A - 20)), w = t - 4; t + 4 > w; w++) {
                f(j - 1, w, "wtb", 0, 1);
            }
            while (r > 0) {
                if (q !== 2) {
                    if (r < 10) {
                        for (B = 1; r > 0; B++) {
                            k(s, t, 1, 1, 0, e, B, 1);
                            r -= 1;
                            s += 1;
                        }
                    } else if (q !== 1) {
                        q = 1;
                        var x = Math.floor(1 + qx.ᐃᐃⵠⵠⵠ.get() * 2);
                        var y = 1 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 4);
                        if (n + 16 > t) {
                            k(s, t, x, 0, 1, e, y, y);
                            t += x;
                        } else if (o - 16 < t) {
                            k(s, t, x, 0, -1, e, y, y);
                            t -= x;
                        } else if (qx.ᐃᐃⵠⵠⵠ.get() > 0.5) {
                            k(s, t, x, 0, 1, e, y, y);
                            t += x;
                        } else {
                            k(s, t, x, 0, -1, e, y, y);
                            t -= x;
                        }
                    } else {
                        var z = Math.min(r, Math.floor(1 + qx.ᐃᐃⵠⵠⵠ.get() * 4));
                        var A = 1 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 4);
                        k(s, t, z, 1, 0, e, A, A);
                        q = 0;
                        r -= z;
                        s += z;
                    }
                } else {
                    for (var B = 10; B > 1; B--) {
                        k(s, t, 1, 1, 0, e, B, 1);
                        r -= 1;
                        s += 1;
                    }
                    q = 0;
                }
            }
            for (w = t - 1; t + 2 > w; w++) {
                f(s, w, "wtb", 0, 1);
            }
        }
        function o(j, e, i, k, m) {
            var n = qx.ⲆⲆΔⲆ[j];
            var a = Math.floor(n.x1 / 100);
            var p = Math.floor(n.y1 / 100);
            var q = Math.floor(n.w / 100);
            var t = Math.floor(n.ⵠⵠΔ / 100);
            if (m !== pt) {
                m = 1 - m;
                a += Math.floor(m * q / 2);
                p += Math.floor(t * m / 2);
                q -= Math.floor(q * m);
                t -= Math.floor(m * t);
            }
            var w = ox.ᐃⲆⲆⲆ;
            for (var g = 0, x = 0; x < k && g <= 50000; g++) {
                var y = p + Math.floor(t * qx.ᐃᐃⵠⵠⵠ.get());
                var z = a + Math.floor(q * qx.ᐃᐃⵠⵠⵠ.get());
                if (qx.ᐃΔⲆⲆⲆ(j, z * 100 + 50, y * 100 + 50) >= 400 && ((A = w[y][z + 1]) === undefined || A[e] === Ze || A[e][i] === undefined) && ((A = w[y][z - 1]) === Ft || A[e] === undefined || yk === A[e][i]) && ((A = w[y + 1][z]) === undefined || A[e] === oh || yk === A[e][i])) {
                    var A = w[y - 1][z];
                    if (yk === A || A[e] === undefined || A[e][i] === Pl) {
                        if ((A = w[y + 1][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) {
                            if ((A = w[y - 1][z + 1]) === _t || A[e] === Ts || A[e][i] === undefined) {
                                A = w[y + 1][z + 1];
                                if (hg === A || A[e] === undefined || A[e][i] === undefined) {
                                    if ((A = w[y - 1][z - 1]) === rs || Ts === A[e] || A[e][i] === ei) {
                                        if (w[y][z] === undefined) {
                                            f(y, z, e, i, 1);
                                            x++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        function i(a, b) {
            (function (b, c) {
                var e = qx.ⲆⲆΔⲆ[c];
                for (var g = 0, i = 0; b > i && g < 10000; g++) {
                    var j = e.y1 + qx.ᐃᐃⵠⵠⵠ.get() * e.ⵠⵠΔ;
                    var k = e.x1 + e.w * qx.ᐃᐃⵠⵠⵠ.get();
                    var m = Math.floor(j / 100);
                    var p = Math.floor(k / 100);
                    if (qx.ᐃΔⲆⲆⲆ(c, p * 100 + 50, m * 100 + 50) >= 600) {
                        for (var q = 1, t = m - 4; q === 1 && m + 4 >= t; t++) {
                            for (var v = p - 4; q === 1 && p + 4 >= v; v++) {
                                if (ox.ᐃⲆⲆⲆ[t][v] !== Ts) {
                                    q = 0;
                                }
                            }
                        }
                        if (q !== 0) {
                            f(m, p, "la", i % 6, 0);
                            i++;
                        }
                    }
                }
            })(b * 80, a);
            for (var d = 0; d < 3; d++) {
                o(a, "s", d, Math.floor(b * 12));
            }
            for (d = 0; d < 3; d++) {
                o(a, "g", d, Math.floor(b * 6));
            }
            for (d = 0; d < 3; d++) {
                o(a, "re", d, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (d = 0; d < 3; d++) {
                o(a, "a", d, Math.max(1, Math.floor(b * 2)));
            }
            c(a);
        }
        function h(b, d) {
            for (var e = 0; e < 6; e++) {
                o(b, "t", e, Math.floor(d * 80));
            }
            for (e = 0; e < 4; e++) {
                o(b, "b", e, Math.floor(d * 80));
            }
            for (e = 0; e < 3; e++) {
                o(b, "s", e, Math.floor(d * 50));
            }
            var f = [];
            for (e = 0; e < 6; e++) {
                a(b, f);
            }
            m(b, f);
            f = [];
            o(b, "p", 0, Math.floor(d * 28));
            for (e = 0; e < 3; e++) {
                o(b, "g", e, Math.floor(d * 7));
            }
            for (e = 0; e < 3; e++) {
                o(b, "d", e, Math.floor(d * 2));
            }
            for (e = 0; e < 3; e++) {
                o(b, "a", e, Math.floor(d * 1));
            }
            for (e = 0; e < 3; e++) {
                o(b, "m", e, Math.floor(d * 1));
            }
            o(b, "a", 0, Math.floor(d * 1));
            c(b);
        }
        function l(a) {
            for (var b = 0; b < 3; b++) {
                o(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                o(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                o(a, "d", b, 1);
            }
            c(a);
        }
        function n(a, b) {
            for (var d = 0; d < 3; d++) {
                o(a, "s", d, Math.floor(b * 18));
            }
            for (d = 0; d < 3; d++) {
                o(a, "f", d, Math.floor(b * 24));
            }
            for (d = 0; d < 3; d++) {
                o(a, "d", d, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (d = 0; d < 3; d++) {
                o(a, "g", d, Math.floor(b * 6));
            }
            c(a);
        }
        function d(a, b) {
            for (var c = 0; c < 3; c++) {
                o(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                o(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            o(a, "c", 0, Math.floor(b * 36));
            var d = [];
            (function (b, c) {
                var d = qx.ⲆⲆΔⲆ[b];
                var e = Math.floor(d.y1 / 100);
                var i = Math.floor(d.x1 / 100);
                var j = Math.floor(d.ⵠⵠΔ / 100);
                var a = Math.floor(d.w / 100);
                var k = e + Math.floor(j / 2);
                var m = i + Math.floor(a / 2);
                for (var h = 0; h < 3; h++) {
                    f(n = Math.floor(k - 3 + qx.ᐃᐃⵠⵠⵠ.get() * 6), o = Math.floor(m - 3 + qx.ᐃᐃⵠⵠⵠ.get() * 6), "plm", h, 1);
                }
                for (h = 0; h < 80; h++) {
                    var n;
                    var o;
                    if (f(n = Math.floor(k - 3 + qx.ᐃᐃⵠⵠⵠ.get() * 6), o = Math.floor(m - 3 + qx.ᐃᐃⵠⵠⵠ.get() * 6), "wtb", 0, 1) === 1) {
                        c.push([n, o, 0]);
                    }
                }
            })(a, d);
            m(a, d);
            d = [];
        }
        function c(a) {
            var b = qx.ⲆⲆΔⲆ[a];
            f(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            f(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            f(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            f(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function p(a, b, c, d) {
            if (r(a, b) && (ᐃⲆⲆⲆ = ox.ᐃⲆⲆⲆ, Wr === ᐃⲆⲆⲆ[a][b] && (ᐃⲆⲆⲆ[a][b] = {}), jj === ᐃⲆⲆⲆ[a][b].r)) {
                var e = 0;
                if (r(a - 1, b) && ᐃⲆⲆⲆ[a - 1][b] !== undefined && ᐃⲆⲆⲆ[a - 1][b].wtb !== undefined) {
                    e += 2;
                }
                if (r(a, b - 1) && pt !== ᐃⲆⲆⲆ[a][b - 1] && rs !== ᐃⲆⲆⲆ[a][b - 1].wtb) {
                    e += 8;
                }
                if (r(a, b + 1) && ᐃⲆⲆⲆ[a][b + 1] !== undefined && ᐃⲆⲆⲆ[a][b + 1].wtb !== undefined) {
                    e += 16;
                }
                if (r(a + 1, b) && ᐃⲆⲆⲆ[a + 1][b] !== undefined && hg !== ᐃⲆⲆⲆ[a + 1][b].wtb) {
                    e += 64;
                }
                if (r(a - 1, b - 1) && (e & 10) == 10 && ᐃⲆⲆⲆ[a - 1][b - 1] !== undefined && ei !== ᐃⲆⲆⲆ[a - 1][b - 1].wtb) {
                    e += 1;
                }
                if (r(a - 1, b + 1) && (e & 18) === 18 && ᐃⲆⲆⲆ[a - 1][b + 1] !== oh && ᐃⲆⲆⲆ[a - 1][b + 1].wtb !== undefined) {
                    e += 4;
                }
                if (r(a + 1, b - 1) && (e & 72) === 72 && ᐃⲆⲆⲆ[a + 1][b - 1] !== undefined && ᐃⲆⲆⲆ[a + 1][b - 1].wtb !== undefined) {
                    e += 32;
                }
                if (r(a + 1, b + 1) && !(~e & 80) && br !== ᐃⲆⲆⲆ[a + 1][b + 1] && ᐃⲆⲆⲆ[a + 1][b + 1].wtb !== undefined) {
                    e += 128;
                }
                ᐃⲆⲆⲆ[a][b].r = {};
                ᐃⲆⲆⲆ[a][b].r.ᐃⵠᐃⲆᐃⲆΔ = e;
                ᐃⲆⲆⲆ[a][b].r.ΔᐃΔⲆΔᐃⲆ = d;
                ᐃⲆⲆⲆ[a][b].r.ΔⲆⵠᐃ = qx.ᐃΔⲆⲆⲆ(c, b * 100 + 50, a * 100 + 50) - 400;
                ᐃⲆⲆⲆ[a][b].r.x = b * 100 + 50;
                ᐃⲆⲆⲆ[a][b].r.y = a * 100 + 50;
            }
        }
        function q(b, d) {
            for (var e = 0; e < 6; e++) {
                o(b, "t", e, Math.floor(d * 20));
            }
            for (e = 0; e < 4; e++) {
                o(b, "b", e, Math.floor(d * 20));
            }
            for (e = 0; e < 3; e++) {
                o(b, "s", e, Math.floor(d * 20));
            }
            var f = [];
            a(b, f);
            m(b, f);
            f = [];
            o(b, "p", 0, Math.floor(d * 24));
            for (e = 0; e < 3; e++) {
                o(b, "g", e, Math.floor(d * 5));
            }
            if (qx.mode === 2) {
                for (e = 0; e < 3; e++) {
                    o(b, "d", e, Math.floor(d * 3));
                }
                for (e = 0; e < 3; e++) {
                    o(b, "a", e, Math.floor(d * 2));
                }
            }
            c(b);
        }
        function r(a, b) {
            return a >= 0 && b >= 0 && a < qx.ⵠΔᐃΔⵠ && b < qx.ᐃᐃΔᐃᐃ;
        }
        function f(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && a < qx.ⵠΔᐃΔⵠ && qx.ᐃᐃΔᐃᐃ > b) {
                ᐃⲆⲆⲆ = ox.ᐃⲆⲆⲆ;
                if (ᐃⲆⲆⲆ[a][b] === undefined) {
                    ᐃⲆⲆⲆ[a][b] = {};
                }
                if (ᐃⲆⲆⲆ[a][b][c] !== undefined) {
                    return 0;
                } else {
                    ᐃⲆⲆⲆ[a][b][c] = [];
                    ᐃⲆⲆⲆ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            Gb.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function s(a, b, c) {
            if (a[b]) {
                for (Pk = 0; Pk < a[b].length; Pk++) {
                    if (a[b][Pk]) {
                        for (ⲆⵠᐃΔ = 0; ⲆⵠᐃΔ < a[b][Pk].length; ⲆⵠᐃΔ++) {
                            a[b][Pk][ⲆⵠᐃΔ].ⵠΔⲆⵠ = c;
                            a[b][Pk][ⲆⵠᐃΔ].ⵠᐃᐃ = Fl;
                            a[b][Pk][ⲆⵠᐃΔ].time = 0;
                            a[b][Pk][ⲆⵠᐃΔ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = 0;
        this.ᐃⲆΔⵠⲆⵠⲆ = b;
        this.ⵠᐃΔⲆᐃ = 0;
        this.ⲆΔᐃⲆΔⵠᐃ = 6;
        this.ⲆΔᐃΔ = [];
        this.ⵠⲆⵠ = [];
        this.ⵠⲆⵠ[0] = [];
        this.ⵠⲆⵠ[100] = [];
        this.ⵠⲆⵠ[80] = [];
        this.ⵠⲆⵠ[60] = [];
        this.ⵠⲆⵠ[67] = [];
        this.ⵠⲆⵠ[70] = [];
        this.ⵠⲆⵠ[77] = [];
        this.ⵠⲆⵠ[71] = [];
        this.ⵠⲆⵠ[72] = [];
        this.ⵠⲆⵠ[73] = [];
        this.ⵠⲆⵠ[74] = [];
        this.ⵠⲆⵠ[65] = [];
        this.ⵠⲆⵠ[66] = [];
        this.ⵠⲆⵠ[62] = [];
        this.ⵠⲆⵠ[88] = [];
        this.ⵠⲆⵠ[91] = [];
        this.ⵠⲆⵠ[90] = [];
        this.ⵠⲆⵠ[63] = [];
        this.ⵠⲆⵠ[78] = [];
        this.ⵠⲆⵠ[64] = [];
        this.ⵠⲆⵠ[69] = [];
        this.ⵠⲆⵠ[68] = [];
        this.ⵠⲆⵠ[79] = [];
        this.ⵠⲆⵠ[89] = [];
        this.ⵠⲆⵠ[83] = [];
        this.ⵠⲆⵠ[84] = [];
        this.ⵠⲆⵠ[85] = [];
        this.ⵠⲆⵠ[81] = [];
        this.ⵠⲆⵠ[82] = [];
        this.ⵠⲆⵠ[86] = [];
        this.ⵠⲆⵠ[34] = [];
        this.ⵠⲆⵠ[36] = [];
        this.ⵠⲆⵠ[61] = [];
        this.ⵠⲆⵠ[2] = [];
        this.ⵠⲆⵠ[1] = [];
        this.ⵠⲆⵠ[6] = [];
        this.ⵠⲆⵠ[3] = [];
        this.ⵠⲆⵠ[5] = [];
        this.ⵠⲆⵠ[12] = [];
        this.ⵠⲆⵠ[13] = [];
        this.ⵠⲆⵠ[14] = [];
        this.ⵠⲆⵠ[20] = [];
        this.ⵠⲆⵠ[52] = [];
        this.ⵠⲆⵠ[4] = [];
        this.ⵠⲆⵠ[7] = [];
        this.ⵠⲆⵠ[8] = [];
        this.ⵠⲆⵠ[9] = [];
        this.ⵠⲆⵠ[19] = [];
        this.ⵠⲆⵠ[50] = [];
        this.ⵠⲆⵠ[41] = [];
        this.ⵠⲆⵠ[10] = [];
        this.ⵠⲆⵠ[15] = [];
        this.ⵠⲆⵠ[16] = [];
        this.ⵠⲆⵠ[17] = [];
        this.ⵠⲆⵠ[21] = [];
        this.ⵠⲆⵠ[51] = [];
        this.ⵠⲆⵠ[45] = [];
        this.ⵠⲆⵠ[46] = [];
        this.ⵠⲆⵠ[47] = [];
        this.ⵠⲆⵠ[48] = [];
        this.ⵠⲆⵠ[49] = [];
        this.ⵠⲆⵠ[53] = [];
        this.ⵠⲆⵠ[18] = [];
        this.ⵠⲆⵠ[29] = [];
        this.ⵠⲆⵠ[56] = [];
        this.ⵠⲆⵠ[11] = [];
        this.ⵠⲆⵠ[22] = [];
        this.ⵠⲆⵠ[23] = [];
        this.ⵠⲆⵠ[30] = [];
        this.ⵠⲆⵠ[38] = [];
        this.ⵠⲆⵠ[33] = [];
        this.ⵠⲆⵠ[31] = [];
        this.ⵠⲆⵠ[55] = [];
        this.ⵠⲆⵠ[37] = [];
        this.ⵠⲆⵠ[43] = [];
        this.ⵠⲆⵠ[44] = [];
        this.ⵠⲆⵠ[54] = [];
        this.ⵠⲆⵠ[39] = [];
        this.ⵠⲆⵠ[40] = [];
        this.ⵠⲆⵠ[32] = [];
        this.ⵠⲆⵠ[24] = [];
        this.ⵠⲆⵠ[25] = [];
        this.ⵠⲆⵠ[26] = [];
        this.ⵠⲆⵠ[27] = [];
        this.ⵠⲆⵠ[28] = [];
        this.ⵠⲆⵠ[35] = [];
        this.ⵠⲆⵠ[87] = [];
        this.ⵠⲆⵠ[42] = [];
        this.ᐃⲆⵠⲆ = [];
        this.ᐃᐃΔᐃᐃ = 260;
        this.ⵠΔᐃΔⵠ = 260;
        this.ⲆⲆⲆⲆᐃⲆⲆ = 100;
        this.ⵠⵠⲆⵠⲆⲆⵠ = 100;
        this.w = this.ᐃᐃΔᐃᐃ * this.ⲆⲆⲆⲆᐃⲆⲆ;
        this.ⵠⵠΔ = this.ⵠⵠⲆⵠⲆⲆⵠ * this.ⵠΔᐃΔⵠ;
        this.ᐃᐃⵠⵠⵠ = new Ek.ⲆⲆⲆⲆⲆΔΔ();
        this.ⲆⲆΔⲆ = [];
        this.ΔΔⵠⵠ = new og.ⵠⵠᐃΔ(cb, 0, 1, 0, 1, 1);
        this.transition = false;
        this.ᐃᐃⲆⲆᐃ = [];
        this.ⵠᐃΔⲆⲆ = 0;
        this.ⲆⲆⵠΔⲆᐃΔ = 1;
        this.ΔᐃⵠⲆΔⲆⲆ = 2;
        this.ᐃⲆΔⲆⲆΔⲆ = 3;
        this.ᐃⲆⲆⵠᐃ = 4;
        this.ΔΔⵠΔⵠⲆⵠ = 10;
        this.ᐃᐃⲆⲆᐃ[this.ⵠᐃΔⲆⲆ] = {
            ⵠⲆᐃⵠⲆΔΔ: 1,
            ᐃᐃΔ: [19, 58, 43],
            ΔᐃΔ: [4, 43, 48],
            ΔⲆⵠᐃΔ: ["#133a2b", "#042b30"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ᐃⲆⲆⵠᐃ] = {
            ⵠⲆᐃⵠⲆΔΔ: 0,
            ᐃᐃΔ: [11, 106, 132],
            ΔᐃΔ: [9, 55, 63],
            ΔⲆⵠᐃΔ: ["#0B6A84", "#09373F"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ⲆⲆⵠΔⲆᐃΔ] = {
            ⵠⲆᐃⵠⲆΔΔ: 0,
            ᐃᐃΔ: [235, 242, 240],
            ΔᐃΔ: [19, 97, 103],
            ΔⲆⵠᐃΔ: ["#EBF2F0", "#136167"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ΔᐃⵠⲆΔⲆⲆ] = {
            ⵠⲆᐃⵠⲆΔΔ: 0,
            ΔᐃΔ: [3, 28, 30],
            ᐃᐃΔ: [45, 32, 23],
            ΔⲆⵠᐃΔ: ["#2D2017", "#031C1E"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ᐃⲆΔⲆⲆΔⲆ] = {
            ᐃᐃΔ: [74, 74, 74],
            ΔⲆⵠᐃΔ: ["#4A4A4A", "#183D3C"],
            ⵠⲆᐃⵠⲆΔΔ: 0,
            ΔᐃΔ: [24, 61, 60]
        };
        this.ᐃᐃⲆⲆᐃ[this.ΔΔⵠΔⵠⲆⵠ] = {
            ΔᐃΔ: [9, 61, 56],
            ⵠⲆᐃⵠⲆΔΔ: 0,
            ᐃᐃΔ: [235, 216, 166],
            ΔⲆⵠᐃΔ: ["#EBD8A6", "#093D38"]
        };
        this.ⲆⲆᐃⵠΔⲆᐃ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ⵠⵠΔ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ᐃⲆⲆ = b;
            this.ᐃᐃⲆ = g === undefined ? 15 : g;
        };
        this.ΔⲆⲆᐃⲆ = -1000000;
        this.ⲆⵠᐃⵠⲆ = this.ΔⲆⲆᐃⲆ;
        this.ⵠⲆᐃᐃⲆ = this.ΔⲆⲆᐃⲆ;
        this.ⲆΔΔⵠⵠ = this.ΔⲆⲆᐃⲆ;
        this.ΔⵠⵠΔⵠΔΔ = this.ΔⲆⲆᐃⲆ;
        this.ⵠⵠⵠⵠⲆᐃΔ = this.ΔⲆⲆᐃⲆ;
        this.ⲆΔᐃᐃⲆ = this.ΔⲆⲆᐃⲆ;
        this.ⲆΔᐃⵠᐃΔⲆᐃⲆ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ⲆⵠᐃⵠⲆ = qx.ΔⲆⲆᐃⲆ;
            b.ⵠⲆᐃᐃⲆ = qx.ΔⲆⲆᐃⲆ;
            b.ⲆΔΔⵠⵠ = qx.ΔⲆⲆᐃⲆ;
            b.ΔⵠⵠΔⵠΔΔ = qx.ΔⲆⲆᐃⲆ;
            b.ⲆΔᐃᐃⲆ = qx.ΔⲆⲆᐃⲆ;
            b.ᐃΔΔⵠⵠᐃᐃ = qx.ΔⲆⲆᐃⲆ;
            for (var g = 0; qx.ᐃⲆⲆⵠᐃ !== qx.ⲆⲆΔⲆ[g].ᐃⲆⲆ; g++) {
                if (qx.ⲆⲆΔⲆ[g].ᐃⲆⲆ === qx.ⵠᐃΔⲆⲆ) {
                    var h = qx.ᐃΔⲆⲆⲆ(g, c, d);
                    b.ΔⵠⵠΔⵠΔΔ = Math.max(b.ΔⵠⵠΔⵠΔΔ, h);
                    if (h > 0 && qx.ⲆᐃⲆⵠΔᐃᐃᐃⲆ(g, c, d) === 1) {
                        b.ᐃΔΔⵠⵠᐃᐃ = 1;
                    }
                } else if (qx.ⲆⲆⵠΔⲆᐃΔ === qx.ⲆⲆΔⲆ[g].ᐃⲆⲆ) {
                    b.ⲆⵠᐃⵠⲆ = Math.max(b.ⲆⵠᐃⵠⲆ, qx.ᐃΔⲆⲆⲆ(g, c, d));
                } else if (qx.ΔΔⵠΔⵠⲆⵠ === qx.ⲆⲆΔⲆ[g].ᐃⲆⲆ) {
                    b.ⵠⲆᐃᐃⲆ = Math.max(b.ⵠⲆᐃᐃⲆ, qx.ᐃΔⲆⲆⲆ(g, c, d));
                } else if (qx.ΔᐃⵠⲆΔⲆⲆ === qx.ⲆⲆΔⲆ[g].ᐃⲆⲆ) {
                    b.ⲆΔΔⵠⵠ = Math.max(b.ⲆΔΔⵠⵠ, qx.ᐃΔⲆⲆⲆ(g, c, d));
                } else if (qx.ᐃⲆΔⲆⲆΔⲆ === qx.ⲆⲆΔⲆ[g].ᐃⲆⲆ) {
                    b.ⲆΔᐃᐃⲆ = Math.max(b.ⲆΔᐃᐃⲆ, qx.ᐃΔⲆⲆⲆ(g, c, d));
                }
            }
            if (ox.ᐃⲆⲆⲆ[e][f].iblk) {
                b.ᐃΔΔⵠⵠᐃᐃ = 1;
            }
            if (qx.ⲆΔᐃⵠⵠⵠⵠΔΔ(f, e)) {
                b.ⵠⵠⵠⵠⲆᐃΔ = b.ΔⲆⲆᐃⲆ;
            } else if (ox.ᐃⲆⲆⲆ[e][f].wtb || b.ⲆⵠᐃⵠⲆ < 0 && b.ⲆΔΔⵠⵠ < 0 && b.ΔⵠⵠΔⵠΔΔ < 0 && b.ᐃΔΔⵠⵠᐃᐃ < 0 && b.ⲆΔᐃᐃⲆ < 0 && b.ⵠⲆᐃᐃⲆ < 0) {
                b.ⵠⵠⵠⵠⲆᐃΔ = 1;
            } else {
                b.ⵠⵠⵠⵠⲆᐃΔ = b.ΔⲆⲆᐃⲆ;
            }
        };
        this.ⲆᐃⲆᐃΔᐃⵠᐃΔ = function (a, b) {
            qx.ⲆⵠᐃⵠⲆ = qx.ΔⲆⲆᐃⲆ;
            qx.ⵠⲆᐃᐃⲆ = qx.ΔⲆⲆᐃⲆ;
            qx.ⲆΔΔⵠⵠ = qx.ΔⲆⲆᐃⲆ;
            qx.ⲆΔᐃᐃⲆ = qx.ΔⲆⲆᐃⲆ;
            qx.ΔⵠⵠΔⵠΔΔ = qx.ΔⲆⲆᐃⲆ;
            for (var c = 0; qx.ᐃⲆⲆⵠᐃ !== qx.ⲆⲆΔⲆ[c].ᐃⲆⲆ; c++) {
                if (qx.ⲆⲆΔⲆ[c].ᐃⲆⲆ === qx.ⵠᐃΔⲆⲆ) {
                    qx.ΔⵠⵠΔⵠΔΔ = Math.max(qx.ΔⵠⵠΔⵠΔΔ, qx.ᐃΔⲆⲆⲆ(c, a, b));
                } else if (qx.ⲆⲆΔⲆ[c].ᐃⲆⲆ === qx.ⲆⲆⵠΔⲆᐃΔ) {
                    qx.ⲆⵠᐃⵠⲆ = Math.max(qx.ⲆⵠᐃⵠⲆ, qx.ᐃΔⲆⲆⲆ(c, a, b));
                } else if (qx.ⲆⲆΔⲆ[c].ᐃⲆⲆ === qx.ΔΔⵠΔⵠⲆⵠ) {
                    qx.ⵠⲆᐃᐃⲆ = Math.max(qx.ⵠⲆᐃᐃⲆ, qx.ᐃΔⲆⲆⲆ(c, a, b));
                } else if (qx.ⲆⲆΔⲆ[c].ᐃⲆⲆ === qx.ΔᐃⵠⲆΔⲆⲆ) {
                    qx.ⲆΔΔⵠⵠ = Math.max(qx.ⲆΔΔⵠⵠ, qx.ᐃΔⲆⲆⲆ(c, a, b));
                } else if (qx.ⲆⲆΔⲆ[c].ᐃⲆⲆ === qx.ᐃⲆΔⲆⲆΔⲆ) {
                    qx.ⲆΔᐃᐃⲆ = Math.max(qx.ⲆΔᐃᐃⲆ, qx.ᐃΔⲆⲆⲆ(c, a, b));
                }
            }
            if (qx.ⲆⵠᐃⵠⲆ < 0 && qx.ⲆΔᐃᐃⲆ < 0 && qx.ΔⵠⵠΔⵠΔΔ < 0 && qx.ⲆΔᐃᐃⲆ < 0 && qx.ⵠⲆᐃᐃⲆ < 0) {
                qx.ⵠⵠⵠⵠⲆᐃΔ = 1;
            } else {
                qx.ⵠⵠⵠⵠⲆᐃΔ = qx.ΔⲆⲆᐃⲆ;
            }
        };
        this.ⲆᐃⲆⵠΔᐃᐃᐃⲆ = function (b, c, d) {
            var e = qx.ⲆⲆΔⲆ[b];
            var f = 0;
            ⲆⵠⲆᐃ = e.x1 + 30 + (e.ᐃᐃⲆ & 4 ? 0 : 150);
            var g = c - ⲆⵠⲆᐃ;
            if ((e.ᐃᐃⲆ & 4) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔⲆⵠⵠ = e.y1 + 250 + (e.ᐃᐃⲆ & 1 ? 0 : 150);
            g = d - ΔⲆⵠⵠ;
            if ((e.ᐃᐃⲆ & 1) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⲆΔⲆⵠ = e.x2 + 80 + ((e.ᐃᐃⲆ & 8) === 0 ? -200 : 0);
            g = ⲆΔⲆⵠ - c;
            if ((e.ᐃᐃⲆ & 8) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃᐃⵠⵠ = e.y2 - 200 + (e.ᐃᐃⲆ & 2 ? 0 : -200);
            g = ᐃᐃⵠⵠ - d;
            if ((e.ᐃᐃⲆ & 2) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (c >= ⲆⵠⲆᐃ && ⲆΔⲆⵠ >= c && d >= ΔⲆⵠⵠ && d <= ᐃᐃⵠⵠ) {
                return f;
            } else {
                return 0;
            }
        };
        this.ᐃΔⲆⲆⲆ = function (a, b, c) {
            var d = qx.ⲆⲆΔⲆ[a];
            ⲆⵠⲆᐃ = d.x1 + 30;
            ΔⲆⵠⵠ = d.y1 + 250;
            ⲆΔⲆⵠ = d.x2 + 80;
            ᐃᐃⵠⵠ = d.y2 - 200;
            if (ⲆⵠⲆᐃ <= b && ⲆΔⲆⵠ >= b && ΔⲆⵠⵠ <= c && c <= ᐃᐃⵠⵠ) {
                return Math.min(b - ⲆⵠⲆᐃ, ⲆΔⲆⵠ - b, c - ΔⲆⵠⵠ, ᐃᐃⵠⵠ - c);
            }
            var e = -1000000;
            if (b - ⲆⵠⲆᐃ < 0) {
                e = Math.max(e, b - ⲆⵠⲆᐃ);
            } else if (ⲆΔⲆⵠ - b < 0) {
                e = Math.max(e, ⲆΔⲆⵠ - b);
            }
            ΔΔᐃᐃᐃⵠΔ = -1000000;
            if (c < ΔⲆⵠⵠ || ᐃᐃⵠⵠ < c) {
                if (c - ΔⲆⵠⵠ < 0) {
                    ΔΔᐃᐃᐃⵠΔ = Math.max(ΔΔᐃᐃᐃⵠΔ, c - ΔⲆⵠⵠ);
                } else {
                    ΔΔᐃᐃᐃⵠΔ = Math.max(ΔΔᐃᐃᐃⵠΔ, ᐃᐃⵠⵠ - c);
                }
                e = e !== -1000000 && ΔΔᐃᐃᐃⵠΔ !== -1000000 ? Math.min(e, ΔΔᐃᐃᐃⵠΔ) : ΔΔᐃᐃᐃⵠΔ;
            }
            return e;
        };
        this.ᐃⲆΔΔⵠᐃⲆ = function (b, c, d) {
            var e = d;
            var g = c;
            f(e, g, "isl", b, 1);
            for (var h = 0; h < 4; h++) {
                for (var i = 0; i < 3; i++) {
                    f(e - i, g - h, "iblk", 0);
                    f(e + i, g - h, "iblk", 0);
                    f(e + i, g + h, "iblk", 0);
                    f(e - i, g + h, "iblk", 0);
                }
            }
            if (b === 0) {
                for (h = 0; h < 2; h++) {
                    f(e - h, g - 4, "iblk", 0);
                    f(e + h, g - 4, "iblk", 0);
                    f(e - h, g + 4, "iblk", 0);
                    f(e + h, g + 4, "iblk", 0);
                }
                for (h = 0; h < 3; h++) {
                    f(e - 3, g + h, "iblk", 0);
                    f(e + 3, g + h, "iblk", 0);
                    f(e - 3, g - h, "iblk", 0);
                    f(e + 3, g - h, "iblk", 0);
                }
                f(e - 2, g - 4, "iblk", 0);
                f(e - 3, g - 3, "iblk", 0);
                f(e + 2, g + 4, "iblk", 0);
                f(e + 3, g + 3, "iblk", 0);
            } else if (b === 1) {
                for (h = 0; h < 3; h++) {
                    f(e - h, g - 4, "iblk", 0);
                    f(e + h, g - 4, "iblk", 0);
                    f(e - h, g + 4, "iblk", 0);
                    f(e + h, g + 4, "iblk", 0);
                }
                for (h = 0; h < 4; h++) {
                    f(e - 3, g + h, "iblk", 0);
                    f(e + 3, g + h, "iblk", 0);
                    f(e - 3, g - h, "iblk", 0);
                    f(e + 3, g - h, "iblk", 0);
                }
            } else if (b === 2) {
                for (h = 0; h < 2; h++) {
                    f(e - h, g - 4, "iblk", 0);
                    f(e + h, g - 4, "iblk", 0);
                    f(e - h, g + 4, "iblk", 0);
                    f(e + h, g + 4, "iblk", 0);
                }
                for (h = 0; h < 3; h++) {
                    f(e - 3, g + h, "iblk", 0);
                    f(e + 3, g + h, "iblk", 0);
                    f(e - 3, g - h, "iblk", 0);
                    f(e + 3, g - h, "iblk", 0);
                }
            }
        };
        this.ΔΔⲆᐃᐃⲆⵠⲆΔ = function (b) {
            for (var c = 0; qx.ⲆⲆΔⲆ.length > c && b > 0; c++) {
                var d = qx.ⲆⲆΔⲆ[c];
                if (d.ᐃⲆⲆ === qx.ᐃⲆⲆⵠᐃ && d.w > 1800 && d.ⵠⵠΔ > 1000) {
                    var g = Math.floor((d.x1 + d.w / 2) / 100);
                    var h = Math.floor((d.y1 + d.ⵠⵠΔ / 2) / 100);
                    qx.ᐃⲆΔΔⵠᐃⲆ(b % 3, g, h);
                    for (var j = 0; j < 3; j++) {
                        var k = h - 2 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 4);
                        var l = g - 3 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 6);
                        if (ox.ᐃⲆⲆⲆ[k][l].s === undefined) {
                            f(k, l, "plm", j);
                        }
                        k = h - 2 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 4);
                        l = g - 3 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 6);
                        if (ox.ᐃⲆⲆⲆ[k][l].plm === pt) {
                            f(k, l, "s", j);
                        }
                    }
                    k = h - 2 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 4);
                    l = g - 3 + Math.floor(qx.ᐃᐃⵠⵠⵠ.get() * 6);
                    if (ox.ᐃⲆⲆⲆ[k][l].plm === undefined && $g === ox.ᐃⲆⲆⲆ[k][l].s) {
                        f(k, l, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ᐃΔⲆⲆΔᐃᐃⵠⲆ = function (a) {
            qx.ᐃᐃⵠⵠⵠ.ᐃᐃᐃⲆΔ(a);
            var b = 0;
            while (1) {
                if (++b > 10000) {
                    return;
                }
                qx.ⲆⲆΔⲆ = [];
                if (qx.ⵠᐃΔⲆᐃ === 0 && (qx.mode === 3 || qx.mode === 7 || qx.mode === 0)) {
                    qx.ⵠᐃΔⲆᐃ = wr;
                }
                if (qx.mode === 2) {
                    qx.ⲆⲆΔⲆ.push(new qx.ⲆⲆᐃⵠΔⲆᐃ(qx.ⵠᐃΔⲆⲆ, 2, 2, 80, 80, 15));
                } else if (qx.mode === 4) {
                    qx.ⲆⲆΔⲆ.push(new qx.ⲆⲆᐃⵠΔⲆᐃ(qx.ⵠᐃΔⲆⲆ, 2, 2, 150, 150, 15));
                } else if (qx.ⵠᐃΔⲆᐃ !== 0 && qx.ⵠᐃΔⲆᐃ.length > 0 && qx.ⵠᐃΔⲆᐃ[0].length > 3) {
                    for (var c = 0; qx.ⵠᐃΔⲆᐃ.length > c; c++) {
                        var j = qx.ⵠᐃΔⲆᐃ[c];
                        if (j[0] !== 0) {
                            break;
                        }
                        var k = Df.ⵠᐃΔⲆⲆ;
                        switch (j[1]) {
                            case "FOREST":
                                k = qx.ⵠᐃΔⲆⲆ;
                                break;
                            case "WINTER":
                                k = qx.ⲆⲆⵠΔⲆᐃΔ;
                                break;
                            case "DESERT":
                                k = qx.ΔΔⵠΔⵠⲆⵠ;
                                break;
                            case "LAVA":
                                k = qx.ΔᐃⵠⲆΔⲆⲆ;
                                break;
                            case "DRAGON":
                                k = qx.ᐃⲆΔⲆⲆΔⲆ;
                        }
                        qx.ⲆⲆΔⲆ.push(new qx.ⲆⲆᐃⵠΔⲆᐃ(k, j[2], j[3], j[4], j[5], j[6], j[7]));
                    }
                } else if (qx.ⵠᐃΔⲆᐃ !== 0) {
                    for (c = 0; c < qx.ⵠᐃΔⲆᐃ.length; c++) {
                        var t = qx.ⵠᐃΔⲆᐃ[c];
                        k = Df.ⵠᐃΔⲆⲆ;
                        switch (t[0]) {
                            case "FOREST":
                                k = qx.ⵠᐃΔⲆⲆ;
                                break;
                            case "WINTER":
                                k = qx.ⲆⲆⵠΔⲆᐃΔ;
                                break;
                            case "DESERT":
                                k = qx.ΔΔⵠΔⵠⲆⵠ;
                                break;
                            case "LAVA":
                                k = qx.ΔᐃⵠⲆΔⲆⲆ;
                                break;
                            case "DRAGON":
                                k = qx.ᐃⲆΔⲆⲆΔⲆ;
                        }
                        if (e(k, t[1], t[2], 0, (c + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (qx.ⵠᐃΔⲆᐃ.length !== c) {
                        continue;
                    }
                }
                break;
            }
            ΔΔⵠΔᐃᐃΔΔⵠ();
            var u = [];
            for (var v = 0; qx.ⵠΔᐃΔⵠ > v; v++) {
                u[v] = new Array(qx.ᐃᐃΔᐃᐃ);
                for (var x = 0; qx.ᐃᐃΔᐃᐃ > x; x++) {
                    u[v][x] = 0;
                }
            }
            for (v = 0; v < qx.ⲆⲆΔⲆ.length; v++) {
                for (var z = (t = qx.ⲆⲆΔⲆ[v]).x2 / 100, B = t.y2 / 100, D = t.x1 / 100; D <= z; D++) {
                    for (var E = t.y1 / 100; B >= E; E++) {
                        u[E][D] = 1;
                    }
                }
            }
            for (E = 0; E < qx.ⵠΔᐃΔⵠ; E++) {
                for (D = 0; qx.ᐃᐃΔᐃᐃ > D; D++) {
                    if (u[E][D] === 0) {
                        g(u, D, E);
                    }
                }
            }
            ox = {
                w: qx.ᐃᐃΔᐃᐃ,
                ⵠⵠΔ: qx.ⵠΔᐃΔⵠ,
                ᐃⲆⲆⲆ: []
            };
            for (v = 0; v < qx.ⵠΔᐃΔⵠ; v++) {
                ox.ᐃⲆⲆⲆ[v] = [];
            }
            if (qx.ⵠᐃΔⲆᐃ !== 0 && qx.ⵠᐃΔⲆᐃ.length > 0 && qx.ⵠᐃΔⲆᐃ[0].length > 3) {
                for (c = 0; c < qx.ⵠᐃΔⲆᐃ.length; c++) {
                    if ((j = qx.ⵠᐃΔⲆᐃ[c])[1] === "isl") {
                        qx.ᐃⲆΔΔⵠᐃⲆ(j[2], j[3], j[4]);
                    }
                }
            } else {
                qx.ΔΔⲆᐃᐃⲆⵠⲆΔ(qx.ⲆΔᐃⲆΔⵠᐃ);
            }
            if (qx.ⵠᐃΔⲆᐃ !== 0 && qx.ⵠᐃΔⲆᐃ.length > 0 && qx.ⵠᐃΔⲆᐃ[0].length > 3) {
                var F = [];
                for (c = 0; qx.ⵠᐃΔⲆᐃ.length > c; c++) {
                    if ((j = qx.ⵠᐃΔⲆᐃ[c])[0] === 1) {
                        if (j[1] === "r") {
                            f(j[3], j[2], "wtb", 0, 1);
                            F.push([j[3], j[2], j[4]]);
                        } else {
                            f(j[4], j[3], j[1], j[2], j[5]);
                        }
                    }
                }
                m(0, F);
                F = [];
            } else {
                for (v = 0; v < qx.ⲆⲆΔⲆ.length; v++) {
                    t = qx.ⲆⲆΔⲆ[v];
                    if (qx.mode === 4) {
                        if (t.ᐃⲆⲆ === qx.ⵠᐃΔⲆⲆ) {
                            h(v, t.w / 10000);
                        }
                    } else {
                        if (t.ᐃⲆⲆ === qx.ⵠᐃΔⲆⲆ) {
                            q(v, t.w / 10000);
                        }
                        if (qx.ΔᐃⵠⲆΔⲆⲆ === t.ᐃⲆⲆ) {
                            i(v, t.w / 10000);
                        }
                        if (t.ᐃⲆⲆ === qx.ⲆⲆⵠΔⲆᐃΔ) {
                            n(v, t.w / 10000);
                        }
                        if (qx.ΔΔⵠΔⵠⲆⵠ === t.ᐃⲆⲆ) {
                            d(v, t.w / 10000);
                        }
                        if (qx.ᐃⲆΔⲆⲆΔⲆ === t.ᐃⲆⲆ) {
                            l(v);
                        }
                    }
                }
            }
            Lb("isl", 1);
            Lb("wtb", 20);
            Lb("la", 1);
            Lb("c", 1);
            Lb("s", 1);
            Lb("f", 1);
            Lb("p", 1);
            Lb("g", 1);
            Lb("d", 1);
            Lb("a", 1);
            Lb("re", 1);
            Lb("m", 1);
            Gb = [];
            qx.ⵠΔⵠⵠⲆⲆᐃⲆᐃ(ox);
        };
        this.ᐃⲆΔΔ = f;
        this.ⵠΔⵠⵠⲆⲆᐃⲆᐃ = function (b) {
            for (var c = 0; c < this.ⵠΔᐃΔⵠ; c++) {
                for (var d = 0; d < this.ᐃᐃΔᐃᐃ; d++) {
                    if (!b.ᐃⲆⲆⲆ[c]) {
                        b.ᐃⲆⲆⲆ[c] = [];
                    }
                    if (b.ᐃⲆⲆⲆ[c][d]) {
                        var e = b.ᐃⲆⲆⲆ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var f = 0; f < e.de.length; f++) {
                                if (e.de[f] && e.de[f].length > 0) {
                                    e.de = e.de[f][0];
                                    if (f >= 41 && f <= 49) {
                                        e.de.scale = 3;
                                        var g = Math.floor(Math.random() * 3 + 1);
                                        e.de.ⲆΔΔ = [];
                                        for (var h = 0; h < g; h++) {
                                            e.de.ⲆΔΔ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⵠⵠⲆⵠ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (f >= 19 && f <= 26) {
                                        e.de.scale = 3;
                                        g = Math.floor(Math.random() * 3 + 1);
                                        e.de.ⲆΔΔ = [];
                                        for (h = 0; g > h; h++) {
                                            e.de.ⲆΔΔ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ⵠⵠⲆⵠ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (f <= 15 || f >= 27 && f <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ⵠⵠⲆⵠ = f;
                                    } else {
                                        e.de.angle = Math.random() * Math.PI * 2;
                                        e.de.scale = 1;
                                        e.de.ⵠⵠⲆⵠ = f;
                                    }
                                }
                            }
                        }
                        s(e, "p", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "t", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "s", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "g", new og.ⵠⵠᐃΔ(cd, 1, 1, 0, 10, 10));
                        s(e, "d", new og.ⵠⵠᐃΔ(va, 1, 1, 0, 10, 10));
                        s(e, "b", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "f", new og.ⵠⵠᐃΔ(Fl, 1, 1, 0, 10, 10));
                        s(e, "sw", new og.ⵠⵠᐃΔ(Gh, 1, 1, 0, 10, 10));
                        s(e, "gw", new og.ⵠⵠᐃΔ(jt, 1, 1, 0, 10, 10));
                        s(e, "dw", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "a", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "cs", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "plm", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "re", new og.ⵠⵠᐃΔ(Gh, 1, 1, 0, 10, 10));
                        s(e, "c", new og.ⵠⵠᐃΔ(false, 1, 1, 0, 10, 10));
                        s(e, "m", new og.ⵠⵠᐃΔ(cb, 1, 1, 0, 10, 10));
                    } else {
                        b.ᐃⲆⲆⲆ[c][d] = [];
                    }
                }
            }
        };
        this.time = Er.ᐃⲆΔ;
        this.ⵠⵠⵠⵠⲆ = {
            now: 0,
            ᐃᐃᐃⲆΔ: 0,
            translate: {
                x: 0,
                y: 0
            },
            ⵠⵠⲆⵠⲆ: 0
        };
        this.ⲆⲆⵠᐃⵠⵠⲆᐃⲆ = function () {
            this.ᐃⲆⵠⲆ = [];
            this.ⵠⲆⵠ[0] = [];
            this.ⵠⲆⵠ[2] = [];
            this.ⵠⲆⵠ[1] = [];
            this.ⵠⲆⵠ[6] = [];
            this.ⵠⲆⵠ[3] = [];
            this.ⵠⲆⵠ[5] = [];
            this.ⵠⲆⵠ[12] = [];
            this.ⵠⲆⵠ[13] = [];
            this.ⵠⲆⵠ[14] = [];
            this.ⵠⲆⵠ[20] = [];
            this.ⵠⲆⵠ[52] = [];
            this.ⵠⲆⵠ[30] = [];
            this.ⵠⲆⵠ[56] = [];
            this.ⵠⲆⵠ[38] = [];
            this.ⵠⲆⵠ[33] = [];
            this.ⵠⲆⵠ[31] = [];
            this.ⵠⲆⵠ[55] = [];
            this.ⵠⲆⵠ[37] = [];
            this.ⵠⲆⵠ[43] = [];
            this.ⵠⲆⵠ[44] = [];
            this.ⵠⲆⵠ[54] = [];
            this.ⵠⲆⵠ[39] = [];
            this.ⵠⲆⵠ[40] = [];
            this.ⵠⲆⵠ[32] = [];
            this.ⵠⲆⵠ[24] = [];
            this.ⵠⲆⵠ[25] = [];
            this.ⵠⲆⵠ[26] = [];
            this.ⵠⲆⵠ[27] = [];
            this.ⵠⲆⵠ[28] = [];
            this.ⵠⲆⵠ[35] = [];
            this.ⵠⲆⵠ[4] = [];
            this.ⵠⲆⵠ[7] = [];
            this.ⵠⲆⵠ[8] = [];
            this.ⵠⲆⵠ[9] = [];
            this.ⵠⲆⵠ[19] = [];
            this.ⵠⲆⵠ[50] = [];
            this.ⵠⲆⵠ[41] = [];
            this.ⵠⲆⵠ[10] = [];
            this.ⵠⲆⵠ[15] = [];
            this.ⵠⲆⵠ[16] = [];
            this.ⵠⲆⵠ[17] = [];
            this.ⵠⲆⵠ[21] = [];
            this.ⵠⲆⵠ[51] = [];
            this.ⵠⲆⵠ[45] = [];
            this.ⵠⲆⵠ[46] = [];
            this.ⵠⲆⵠ[47] = [];
            this.ⵠⲆⵠ[48] = [];
            this.ⵠⲆⵠ[49] = [];
            this.ⵠⲆⵠ[53] = [];
            this.ⵠⲆⵠ[18] = [];
            this.ⵠⲆⵠ[29] = [];
            this.ⵠⲆⵠ[56] = [];
            this.ⵠⲆⵠ[11] = [];
            this.ⵠⲆⵠ[22] = [];
            this.ⵠⲆⵠ[23] = [];
            this.ⵠⲆⵠ[100] = [];
            this.ⵠⲆⵠ[80] = [];
            this.ⵠⲆⵠ[60] = [];
            this.ⵠⲆⵠ[67] = [];
            this.ⵠⲆⵠ[70] = [];
            this.ⵠⲆⵠ[77] = [];
            this.ⵠⲆⵠ[71] = [];
            this.ⵠⲆⵠ[72] = [];
            this.ⵠⲆⵠ[73] = [];
            this.ⵠⲆⵠ[74] = [];
            this.ⵠⲆⵠ[65] = [];
            this.ⵠⲆⵠ[66] = [];
            this.ⵠⲆⵠ[62] = [];
            this.ⵠⲆⵠ[88] = [];
            this.ⵠⲆⵠ[91] = [];
            this.ⵠⲆⵠ[90] = [];
            this.ⵠⲆⵠ[63] = [];
            this.ⵠⲆⵠ[78] = [];
            this.ⵠⲆⵠ[75] = [];
            this.ⵠⲆⵠ[76] = [];
            this.ⵠⲆⵠ[64] = [];
            this.ⵠⲆⵠ[69] = [];
            this.ⵠⲆⵠ[68] = [];
            this.ⵠⲆⵠ[79] = [];
            this.ⵠⲆⵠ[89] = [];
            this.ⵠⲆⵠ[83] = [];
            this.ⵠⲆⵠ[84] = [];
            this.ⵠⲆⵠ[85] = [];
            this.ⵠⲆⵠ[81] = [];
            this.ⵠⲆⵠ[82] = [];
            this.ⵠⲆⵠ[86] = [];
            this.ⵠⲆⵠ[34] = [];
            this.ⵠⲆⵠ[36] = [];
            this.ⵠⲆⵠ[61] = [];
            this.ⵠⲆⵠ[87] = [];
            this.ⵠⲆⵠ[42] = [];
        };
        this.ᐃⵠΔⲆΔⵠᐃΔⵠ = function (a) {
            if (this.ᐃⲆⵠⲆ[a]) {
                ᐃⵠΔᐃ = this.ᐃⲆⵠⲆ[a].type;
                this.ᐃⲆⵠⲆ[a] = null;
                for (var b = this.ⵠⲆⵠ[ᐃⵠΔᐃ], c = 0; b.length > c; c++) {
                    if (a == b[c].ᐃΔΔⲆ) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ᐃⲆᐃᐃⵠᐃΔΔⲆ = function (a, b) {
            for (var c = 0; c < this.ⵠⲆⵠ[56].length; c++) {
                var d = this.ⵠⲆⵠ[56][c];
                if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ⲆΔᐃⵠⵠⵠⵠΔΔ = function (a, b) {
            for (var c = 0; c < this.ⵠⲆⵠ[30].length; c++) {
                var d = this.ⵠⲆⵠ[30][c];
                if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
                    return true;
                }
            }
            return Ur;
        };
        this.ⵠΔⵠⲆΔ = function (j) {
            for (var e = 0; j.length > e; e++) {
                ΔΔΔⲆ = j[e];
                if (ΔΔΔⲆ.angle != ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ) {
                    var q = Math.PI * 2;
                    ΔΔΔⲆ.angle = (ΔΔΔⲆ.angle + q) % q;
                    ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ = (ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ + q) % q;
                    if (ΔΔΔⲆ.angle != ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ) {
                        var B = ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ - ΔΔΔⲆ.angle;
                        var D = Math.abs(B);
                        if (Math.PI < D) {
                            D = Math.PI * 2 - D;
                        }
                        var E = yx * (D / Math.PI * 3 * 10);
                        if (B > Math.PI) {
                            ΔΔΔⲆ.angle -= E;
                        } else if (B < -Math.PI) {
                            ΔΔΔⲆ.angle += E;
                        } else if (B < 0) {
                            ΔΔΔⲆ.angle -= E;
                        } else {
                            ΔΔΔⲆ.angle += E;
                        }
                        ΔΔΔⲆ.angle = (ΔΔΔⲆ.angle + q) % q;
                        if (Math.abs(ΔΔΔⲆ.angle - ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ) < E) {
                            ΔΔΔⲆ.angle = ΔΔΔⲆ.ⵠᐃⵠΔⲆⵠΔ;
                        }
                    }
                }
                Math.floor(ΔΔΔⲆ.r.y / 100);
                Math.floor(ΔΔΔⲆ.r.x / 100);
                if (ΔΔΔⲆ.r.x != ΔΔΔⲆ.x || ΔΔΔⲆ.y != ΔΔΔⲆ.r.y) {
                    if (ΔΔΔⲆ.action & 64) {
                        ΔΔΔⲆ.action -= 64;
                    }
                    ΔΔΔⲆ.action |= 32;
                    var F = og.ΔᐃⵠⲆΔⵠⵠ(ΔΔΔⲆ, ΔΔΔⲆ.r) + Math.PI;
                    var G = ΔΔΔⲆ.ⵠⲆᐃⲆⵠ * yx;
                    var H = og.ⲆΔᐃⵠᐃⵠΔ(G, F);
                    if (og.ᐃⵠᐃᐃᐃⵠΔ(H) < og.ᐃⵠᐃᐃᐃⵠΔ(og.ΔⵠΔⵠⲆΔⲆ(ΔΔΔⲆ, ΔΔΔⲆ.r))) {
                        og.ᐃΔⵠᐃΔⵠΔ(ΔΔΔⲆ, H);
                    } else {
                        if (ΔΔΔⲆ.action & 32) {
                            ΔΔΔⲆ.action -= 32;
                        }
                        ΔΔΔⲆ.action |= 64;
                        og.ⲆⵠΔⵠⲆⵠⲆ(ΔΔΔⲆ.r, ΔΔΔⲆ);
                    }
                }
                if (ΔΔΔⲆ.ⵠⵠΔⲆⵠ) {
                    var I = ΔΔΔⲆ.bubbles;
                    if ((M = I.length) === 0 || Er.ⲆΔΔᐃᐃⵠᐃ > M && I[M - 1].ⵠⵠᐃⵠΔ < 0.95) {
                        I.push({
                            id: Math.floor(Math.random() * ᐃⵠ[540][0].length),
                            x: Math.floor(ΔΔΔⲆ.x + Math.random() * 80 - 40),
                            y: Math.floor(ΔΔΔⲆ.y + Math.random() * 80 - 40),
                            ⵠⵠᐃⵠΔ: 1
                        });
                    }
                    for (var J = 0; M > J; J++) {
                        I[J].ⵠⵠᐃⵠΔ = Math.max(0, I[J].ⵠⵠᐃⵠΔ - yx);
                    }
                    for (J = 0; M > J; J++) {
                        if (I[J].ⵠⵠᐃⵠΔ === 0) {
                            I.splice(J, 1);
                            break;
                        }
                    }
                }
                var K = 0;
                if (ΔΔΔⲆ.ⵠΔᐃΔ && nx.ΔⵠᐃᐃΔ) {
                    var L = ΔΔΔⲆ.ⵠⲆⵠΔΔ;
                    var M = L.length;
                    if (ΔΔΔⲆ.ⵠⵠⵠⵠⲆᐃΔ > 0 && ΔΔΔⲆ.ΔᐃⵠΔᐃ !== 227 && ΔΔΔⲆ.ΔᐃⵠΔᐃ !== 228 && ΔΔΔⲆ.ΔᐃⵠΔᐃ !== 230 && ΔΔΔⲆ.ΔᐃⵠΔᐃ !== 229 && ΔΔΔⲆ.ΔᐃⵠΔᐃ !== 91 && !ΔΔΔⲆ.ⵠⵠΔⲆⵠ && (K = 1, M === 0 || Er.ⲆᐃⵠⲆⲆΔⵠ < og.ΔⲆⵠᐃ(L[M - 1], ΔΔΔⲆ))) {
                        var N = -ΔΔΔⲆ.angle;
                        var O = Math.cos(N) * 45 * jq;
                        var Q = jq * (Math.sin(N) * 45);
                        L.push({
                            x: ΔΔΔⲆ.x + O,
                            y: ΔΔΔⲆ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ΔΔΔⲆ.x - O,
                            y: ΔΔΔⲆ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ΔΔΔⲆ.x,
                            y: ΔΔΔⲆ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (J = 0; M > J; J++) {
                        L[J].alpha = Math.max(0, L[J].alpha - yx / 2.2);
                        L[J].r += yx * 20;
                    }
                    if (L.length > 0 && "#b864d6".alpha === 0) {
                        L.splice(0, 1);
                    }
                    var R = ΔΔΔⲆ.ᐃΔⵠⲆⲆ;
                    M = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ΔΔΔⲆ.ᐃΔΔⵠⵠᐃᐃ));
                    var V = Math.max(0, Math.sign(ΔΔΔⲆ.ⲆⵠᐃⵠⲆ));
                    Math.max(0, Math.sign(ΔΔΔⲆ.ⵠⲆᐃᐃⲆ));
                    var W = Math.max(0, Math.sign(ΔΔΔⲆ.ⲆΔΔⵠⵠ));
                    var X = Math.max(0, Math.sign(ΔΔΔⲆ.ⲆΔᐃᐃⲆ));
                    if (ΔΔΔⲆ.ᐃΔΔⵠⵠᐃᐃ > 0 || ΔΔΔⲆ.ⵠⲆᐃᐃⲆ > 0) {
                        S = 602;
                    } else if (ΔΔΔⲆ.ⲆΔᐃᐃⲆ > 0) {
                        S = 680;
                    } else if (ΔΔΔⲆ.ⲆⵠᐃⵠⲆ > 0) {
                        S = 475;
                    } else if (ΔΔΔⲆ.ⲆΔΔⵠⵠ > 0) {
                        S = 476;
                    }
                    if (ΔΔΔⲆ.ΔᐃⵠΔᐃ === 225 && (U | V | W | X) === 1) {
                        S = 228;
                        var Y = ΔΔΔⲆ.ⵠᐃⲆΔⲆ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = Er.ⵠᐃΔᐃⵠⲆΔ;
                    } else if (ΔΔΔⲆ.ΔᐃⵠΔᐃ === 239 && (U | V | W | X) === 1) {
                        S = 249;
                        Y = ΔΔΔⲆ.ⵠᐃⲆΔⲆ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = Er.ⵠᐃΔᐃⵠⲆΔ;
                    } else if (ΔΔΔⲆ.ΔᐃⵠΔᐃ === 226 && (U | V | W | X) === 1) {
                        S = 234;
                        Y = ΔΔΔⲆ.ⵠᐃⲆΔⲆ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = Er.ⵠᐃΔᐃⵠⲆΔ * 0.9;
                    } else {
                        Y = ΔΔΔⲆ.angle;
                        Z = 15;
                        _ = 11;
                        aa = Er.ⵠᐃΔᐃⵠⲆΔ;
                    }
                    if (ΔΔΔⲆ.ΔᐃⵠΔᐃ === 227 || ΔΔΔⲆ.ΔᐃⵠΔᐃ === 228 || ΔΔΔⲆ.ΔᐃⵠΔᐃ === 91 || ΔΔΔⲆ.ΔᐃⵠΔᐃ === 229 || ΔΔΔⲆ.ΔᐃⵠΔᐃ === 230 || ΔΔΔⲆ.ⵠⵠΔⲆⵠ); else if (ΔΔΔⲆ.ΔᐃⵠΔᐃ === 224) {
                        if (M === 0 || og.ΔⲆⵠᐃ(R[M - 1], ΔΔΔⲆ) > Er.ΔᐃΔΔᐃⵠᐃ) {
                            R.push({
                                x: ΔΔΔⲆ.x,
                                y: ΔΔΔⲆ.y,
                                angle: ΔΔΔⲆ.ⵠᐃⲆΔⲆ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && K === 0 && (M === 0 || og.ΔⲆⵠᐃ(R[M - 1], ΔΔΔⲆ) > aa)) {
                        ΔΔΔⲆ.ᐃⲆΔΔⵠⲆᐃ++;
                        if (Math.abs(ΔΔΔⲆ.x - ΔΔΔⲆ.r.x) > 1 && Math.abs(ΔΔΔⲆ.y - ΔΔΔⲆ.r.y) > 1) {
                            if (ΔΔΔⲆ.x < ΔΔΔⲆ.r.x && ΔΔΔⲆ.y > ΔΔΔⲆ.r.y || ΔΔΔⲆ.r.x < ΔΔΔⲆ.x && ΔΔΔⲆ.r.y > ΔΔΔⲆ.y) {
                                if (ΔΔΔⲆ.ᐃⲆΔΔⵠⲆᐃ % 2) {
                                    O = -_ * jq;
                                    Q = -_ * jq;
                                } else {
                                    Q = _ * jq;
                                    O = jq * _;
                                }
                            } else if (ΔΔΔⲆ.ᐃⲆΔΔⵠⲆᐃ % 2) {
                                O = _ * jq;
                                Q = -_ * jq;
                            } else {
                                Q = jq * _;
                                O = jq * -_;
                            }
                        } else if (ΔΔΔⲆ.ᐃⲆΔΔⵠⲆᐃ % 2) {
                            O = Z * Math.cos(Y) * jq;
                            Q = Math.sin(Y) * Z * jq;
                        } else {
                            O = jq * (Z * -Math.cos(Y));
                            Q = Z * -Math.sin(Y) * jq;
                        }
                        R.push({
                            x: ΔΔΔⲆ.x + O,
                            y: ΔΔΔⲆ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (J = 0; M > J; J++) {
                        if (R[J].id === 226) {
                            R[J].alpha = Math.max(0, R[J].alpha - yx * 1.5);
                        } else {
                            R[J].alpha = Math.max(0, R[J].alpha - yx / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ⵠᐃᐃ = function () {
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[0]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[80]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[60]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[67]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[70]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[77]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[71]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[72]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[73]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[74]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[61]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[62]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[88]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[91]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[90]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[63]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[78]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[75]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[76]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[64]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[68]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[65]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[66]);
            this.ⵠΔⵠⲆΔ(this.ⵠⲆⵠ[69]);
        };
        this.Ⲇⵠᐃᐃ = [];
        this.Ⲇⵠᐃᐃ[620] = new og.ⵠⵠᐃΔ(false, 1, 1.05, 1, 0.008, 0.008);
        this.Ⲇⵠᐃᐃ[619] = new og.ⵠⵠᐃΔ(false, 1, 1.08, 1, 0.006, 0.006);
        this.Ⲇⵠᐃᐃ[694] = new og.ⵠⵠᐃΔ(false, 1, 1.02, 1, 0.008, 0.008);
        this.Ⲇⵠᐃᐃ[695] = new og.ⵠⵠᐃΔ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ᐃⲆᐃΔΔ = [];
        this.ᐃⲆᐃΔΔ[0] = new og.ⵠⵠᐃΔ(fs, 0.1, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[1] = new og.ⵠⵠᐃΔ(false, 0.4, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[2] = new og.ⵠⵠᐃΔ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[3] = new og.ⵠⵠᐃΔ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[4] = new og.ⵠⵠᐃΔ(vn, 0.3, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[5] = new og.ⵠⵠᐃΔ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[6] = new og.ⵠⵠᐃΔ(false, 0.5, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[7] = new og.ⵠⵠᐃΔ(kk, 0.9, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[8] = new og.ⵠⵠᐃΔ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[9] = new og.ⵠⵠᐃΔ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[10] = new og.ⵠⵠᐃΔ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[11] = new og.ⵠⵠᐃΔ($n, 0.4, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[12] = new og.ⵠⵠᐃΔ(va, 0.8, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[13] = new og.ⵠⵠᐃΔ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ᐃⲆᐃΔΔ[14] = new og.ⵠⵠᐃΔ(Fl, 0.7, 1, 0, 0.6, 0.6);
    }
    function jf(a, b, c, d) {
        this.id = a;
        this.ⵠⲆᐃⲆⵠ = (a + 5) * 8;
        this.ⵠⵠᐃⵠΔ = no / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ΔⵠΔⲆ = Math.cos(d);
        this.alpha = 0;
    }
    function Lf() {
        this.ΔⲆᐃᐃΔ = "";
        this.ᐃΔΔΔ = 0;
        this.ΔⵠⲆᐃⵠ = 0;
        this.ΔⵠⵠⲆⵠ = 0;
        this.ᐃᐃᐃⲆⲆΔᐃ = 0;
        this.ᐃᐃΔⵠⵠ = 0;
        this.ⲆⵠΔⲆΔ = 0;
        this.ᐃᐃⵠΔⵠ = 0;
        this.level = 0;
        this.label = null;
        this.ⵠᐃΔⵠⵠⵠΔ = null;
        this.ⲆⲆΔᐃᐃᐃⲆ = null;
        this.ᐃⵠΔᐃᐃ = false;
        this.ⲆⲆⲆᐃΔ = 0;
    }
    function Wf(b, c, d, e, f, g) {
        Fj(Hx, b, c, d, e, f, g);
        return ((90 + (Wn(Gx[0], Gx[1], Gx[2], Gx[3]) ^ ab(Gx[4], Gx[5], Gx[0], Gx[1], Gx[2], Gx[3]))) * 16807 + 0) % 2147483647;
    }
    function Of(b, c, d, e, f, i) {
        const a = ((60443 + b) * 2147483629 + 2147483587) % 2147483647;
        const j = c ^ 10306;
        const k = ~(d & 59209) & d | ~(d & 59209) & 59209;
        const h = (e | 44145) & ~(e & 44145);
        const l = (f | 18360) & ~(f & 18360);
        return ((8066 + (Tw(a, j, k, h, l, ~(i & 10704) & 10704 | ~(i & 10704) & i) ^ _w(a, j, k, h, l))) * 2147483629 + 2147483587) % 2147483647;
    }
    function Nf(b, c, d, e, f, g) {
        fi(Hx, b, c, d, e, f, g);
        return ((28 + (Hn(Gx[0], Gx[1], Gx[2]) ^ Wn(Gx[3], Gx[4], Gx[5], Gx[0]))) * 48271 + 0) % 2147483647;
    }
    function qf() {
        Math.random();
        return "g";
    }
    function Hf() {
        Math.random();
        return "i";
    }
    function Uf() {
        Math.random();
        return "t";
    }
    function Mw() {
        Math.random();
        return "a";
    }
    function Nw() {
        Math.random();
        return "e";
    }
    function Vf() {
        Math.random();
        return "n";
    }
    function Zf() {
        Math.random();
        return "o";
    }
    function Ow() {
        this.ᐃᐃᐃⲆΔ = function () { };
        this.ⲆΔⲆⲆⵠ = {
            ΔⵠⲆⲆ: 1,
            open: false,
            ΔᐃΔⵠⲆ: 1
        };
        this.ⲆⲆΔΔᐃ = {
            ΔⵠⲆⲆ: 1,
            ΔᐃΔⵠⲆ: -1,
            open: vg
        };
        this.ⲆᐃⲆΔ = {
            open: fs,
            ᐃΔⲆΔⲆ: 0,
            ⵠΔΔⲆⵠᐃΔ: 0,
            ΔᐃΔⵠⲆ: -1,
            ΔⵠⲆⲆ: 1
        };
        this.ⵠᐃⵠⵠ = {
            ᐃᐃᐃΔⵠΔᐃ: 0,
            ᐃᐃΔⲆⲆᐃΔ: 0,
            type: 0,
            ⵠⲆⵠᐃⲆⵠᐃ: 0,
            ΔⵠⲆⲆ: 1,
            ΔᐃΔⵠⲆ: -1,
            open: false
        };
        this.ⵠⲆΔⲆ = {
            ᐃᐃᐃΔⵠΔᐃ: 0,
            ⵠᐃⲆΔⲆᐃⵠ: 0,
            ᐃΔⲆΔⲆ: 0,
            ΔⵠⲆⲆ: 1,
            ΔᐃΔⵠⲆ: -1,
            open: false
        };
        this.sign = {
            ΔᐃΔⵠⲆ: -1,
            open: false
        };
        this.ⲆⵠΔΔⵠ = {
            ⲆⲆⵠΔ: 0,
            ΔⵠⲆⲆ: 1,
            ΔᐃΔⵠⲆ: -1,
            open: fs
        };
        this.ⵠⵠΔⲆⵠ = {
            enabled: false,
            ⵠⵠᐃᐃᐃ: -1,
            label: false,
            now: -1,
            ⵠᐃΔⵠ: fw
        };
        this.ⵠⲆⲆⲆ = {
            id: -1,
            ⲆⲆⵠΔ: 0,
            ΔⵠⲆⲆ: 1,
            ΔᐃΔⵠⲆ: -1,
            open: cd,
            lock: jt,
            locked: $n,
            ΔᐃΔᐃᐃᐃⲆ: Gh,
            ⵠΔⵠⲆⲆᐃᐃ: vn
        };
        this.ᐃⵠΔᐃᐃ = sn;
        this.reconnect = {
            rotate: 0,
            enabled: false
        };
        this.key = og.ⲆΔⲆⲆⲆⲆⲆ("key", cj.location.href);
        var a = og.ⲆΔⲆⲆⲆⲆⲆ("egg", cj.location.href);
        if (a) {
            nx.ᐃΔΔΔ = parseInt(a);
        }
        this.beta = cj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ᐃⵠⵠΔ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ᐃⵠⵠΔ.get("starve_beta");
        }
        this.ᐃⲆⲆᐃⲆ = ᐃⵠⵠΔ.get("starve_token") ? ᐃⵠⵠΔ.get("starve_token") : og.ΔΔΔΔΔⲆᐃ(14);
        cj.baguette();
        var b = cj.kot2;
        function c() {
            this.seed = 1;
            this.ⲆᐃⵠᐃΔᐃΔ = 2;
            this.ⲆⲆⲆΔᐃⵠⲆ = 3;
            this.ⲆⵠⲆΔⲆΔᐃⲆΔ = 1;
            this.ΔⵠⵠⵠⲆⵠΔᐃΔ = 2;
            this.ΔΔᐃᐃⲆΔᐃᐃⲆ = 3;
            this.ⵠⲆⲆΔᐃⵠᐃ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠΔⲆⲆΔⲆᐃ = function (a) {
                this.ⲆᐃⵠᐃΔᐃΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃΔᐃⲆⲆΔⵠ = function (a) {
                this.ⲆⲆⲆΔᐃⵠⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠΔᐃΔᐃⲆⵠⵠⵠ = function (a) {
                this.ⲆⵠⲆΔⲆΔᐃⲆΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃⵠⲆⲆᐃΔⵠⲆᐃ = function (a) {
                this.ΔⵠⵠⵠⲆⵠΔᐃΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆⲆΔⵠᐃΔⲆΔⲆ = function (a) {
                this.ΔΔᐃᐃⲆΔᐃᐃⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆⵠᐃΔΔΔⵠ = function (c, e, f, i, j, k, a) {
                for (var m = 1; a > m;) {
                    var n = m * f % ΔⲆⲆⲆᐃⵠΔ;
                    var o = ⲆΔⵠⲆΔⲆⵠ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(i * o + j);
                        if (m > k && a > m) {
                            var q = Math.random() > 0.5 ? yx * -10 : yx * 10;
                            var r = p * e;
                            this.ᐃⵠΔΔⵠᐃⲆ[n] = Math.max(-25, Math.min(25, this.ᐃⵠΔΔⵠᐃⲆ[n] + q));
                            this.ᐃⵠⲆⲆⵠᐃᐃ[n] = Math.max(-8, Math.min(8, this.ᐃⵠⲆⲆⵠᐃᐃ[n] + q));
                            if (r > 0) {
                                io.beginPath();
                                io.arc(m + rx.ΔᐃⲆ.x + this.ᐃⵠⲆⲆⵠᐃᐃ[n], c + this.ᐃⵠΔΔⵠᐃⲆ[n] - 20, r, 0, Math.PI * 2);
                                if (qx.transition) {
                                    var t = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                                    io.fillStyle = Jw(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    io.fillStyle = Er.ΔⵠⵠⲆᐃⲆⵠ[qx.time];
                                }
                                io.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ᐃⵠⲆᐃⵠΔⲆ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ΔⲆⲆⲆᐃⵠΔ;
                    var o = ⲆΔⵠⲆΔⲆⵠ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(i * o + j);
                        if (m > k && a > m) {
                            var q = Math.random() > 0.5 ? yx * -10 : yx * 10;
                            var r = p * e;
                            this.ⲆΔⵠᐃΔ[n] = Math.max(-25, Math.min(25, this.ⲆΔⵠᐃΔ[n] + q));
                            this.ⲆΔⲆΔⵠ[n] = Math.max(-8, Math.min(8, this.ⲆΔⲆΔⵠ[n] + q));
                            if (r > 0) {
                                io.beginPath();
                                io.arc(c + this.ⲆΔⵠᐃΔ[n] - 20, m + rx.ΔᐃⲆ.y + this.ⲆΔⲆΔⵠ[n], r, 0, Math.PI * 2);
                                if (qx.transition) {
                                    var t = qx.time ? 1 - qx.ΔΔⵠⵠ.ᐃᐃⲆ : qx.ΔΔⵠⵠ.ᐃᐃⲆ;
                                    io.fillStyle = Jw(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    io.fillStyle = Er.ΔⵠⵠⲆᐃⲆⵠ[qx.time];
                                }
                                io.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ᐃⵠⵠᐃΔᐃΔΔⲆ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(d - 0 - e - 2) / 200;
                if (h === 0) {
                    this.ᐃΔᐃⲆⲆΔⵠ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ⲆⵠᐃΔΔΔⵠ(d, h, this.ⲆⲆⲆΔᐃⵠⲆ, 18, 16, f, g);
                io.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ⵠⲆⲆΔᐃⵠᐃ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ⲆⵠᐃΔΔΔⵠ(b, h, this.seed, 12, 10, f, g);
                io.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⵠΔⲆⲆΔⲆᐃ();
                    }
                    io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                    this.ⲆⵠᐃΔΔΔⵠ(c, h, this.ⲆᐃⵠᐃΔᐃΔ, 6, 6, f, g);
                    io.globalAlpha = 1;
                }
            };
            this.ᐃⲆⲆⵠⵠⵠΔᐃᐃ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ᐃΔᐃⲆⲆΔⵠ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ⲆⵠᐃΔΔΔⵠ(d, h, this.ⲆⲆⲆΔᐃⵠⲆ, 18, 16, f, g);
                io.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ⵠⲆⲆΔᐃⵠᐃ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ⲆⵠᐃΔΔΔⵠ(b, h, this.seed, 12, 10, f, g);
                io.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⵠΔⲆⲆΔⲆᐃ();
                    }
                    io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                    this.ⲆⵠᐃΔΔΔⵠ(c, h, this.ⲆᐃⵠᐃΔᐃΔ, 6, 6, f, g);
                    io.globalAlpha = 1;
                }
            };
            this.ⲆΔⲆΔΔⵠⵠΔᐃ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ᐃΔᐃⲆⲆΔⵠ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ᐃⵠⲆᐃⵠΔⲆ(d, h, this.ⲆⲆⲆΔᐃⵠⲆ, 18, 16, f, g);
                io.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ⵠⲆⲆΔᐃⵠᐃ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ᐃⵠⲆᐃⵠΔⲆ(b, h, this.seed, 12, 10, f, g);
                io.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⵠΔⲆⲆΔⲆᐃ();
                    }
                    io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                    this.ᐃⵠⲆᐃⵠΔⲆ(c, h, this.ⲆᐃⵠᐃΔᐃΔ, 6, 6, f, g);
                    io.globalAlpha = 1;
                }
            };
            this.ᐃᐃΔᐃⲆⵠΔⲆΔ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ᐃΔᐃⲆⲆΔⵠ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ᐃⵠⲆᐃⵠΔⲆ(d, h, this.ⲆⲆⲆΔᐃⵠⲆ, 18, 16, f, g);
                io.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ⵠⲆⲆΔᐃⵠᐃ();
                }
                io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                this.ᐃⵠⲆᐃⵠΔⲆ(b, h, this.seed, 12, 10, f, g);
                io.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⵠΔⲆⲆΔⲆᐃ();
                    }
                    io.globalAlpha = og.ⲆⵠᐃΔᐃ(h);
                    this.ᐃⵠⲆᐃⵠΔⲆ(c, h, this.ⲆᐃⵠᐃΔᐃΔ, 6, 6, f, g);
                    io.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new og.ⲆⲆⵠⵠᐃ(og.ⲆᐃᐃᐃΔΔΔ, 0, 10, 0, 0, 200),
                ⲆⵠᐃΔ: new og.ⲆⲆⵠⵠᐃ(og.ΔⲆⲆΔᐃⵠΔ, 0, 10, 200, 200, 0)
            };
            this.w2 = {
                r: new og.ⲆⲆⵠⵠᐃ(og.ΔⵠⲆΔⵠᐃΔ, 0, 10, 0, 0, 150),
                ⲆⵠᐃΔ: new og.ⲆⲆⵠⵠᐃ(og.ⲆⵠᐃΔᐃ, 0, 10, 150, 150, 0)
            };
            this.w3 = {
                r: new og.ⲆⲆⵠⵠᐃ(og.ⲆΔⵠⵠᐃΔⲆ, 0, 10, 0, 0, 100),
                ⲆⵠᐃΔ: new og.ⲆⲆⵠⵠᐃ(og.ⲆⵠᐃΔᐃ, 0, 10, 100, 100, 0)
            };
            this.ⵠΔᐃΔⲆⲆᐃᐃⵠ = function (a) {
                if (a.r.x === a.r.ⵠⲆⲆΔⵠ) {
                    if (a.ⲆⵠᐃΔ.x === a.ⲆⵠᐃΔ.ⵠⲆⲆΔⵠ) {
                        return a.r;
                    } else {
                        return a.ⲆⵠᐃΔ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ᐃⲆⲆ = function (a) {
                var b;
                if (a.r.x === a.r.ⵠⲆⲆΔⵠ) {
                    if (a.ⲆⵠᐃΔ.ⵠⲆⲆΔⵠ === a.ⲆⵠᐃΔ.x) {
                        a.r.ⵠΔⵠᐃⵠᐃΔ();
                        a.ⲆⵠᐃΔ.ⵠΔⵠᐃⵠᐃΔ();
                        b = a.r;
                    } else {
                        b = a.ⲆⵠᐃΔ;
                    }
                } else {
                    b = a.r;
                }
                b.ⲆΔⵠⵠᐃΔᐃ(b.ⵠⲆⲆΔⵠ);
                return b;
            };
            this.ⲆΔⵠᐃΔ = [];
            this.ⲆΔⲆΔⵠ = [];
            this.ᐃⵠΔΔⵠᐃⲆ = [];
            this.ᐃⵠⲆⲆⵠᐃᐃ = [];
            this.ᐃᐃᐃⲆΔ = function () {
                for (var a = 0; ΔⲆⲆⲆᐃⵠΔ > a; a++) {
                    this.ⲆΔⵠᐃΔ[a] = Math.floor(ⲆΔⵠⲆΔⲆⵠ[a] * 25);
                    this.ⲆΔⲆΔⵠ[a] = Math.floor(ⲆΔⵠⲆΔⲆⵠ[a] * 8);
                    this.ᐃⵠΔΔⵠᐃⲆ[a] = Math.floor(ⲆΔⵠⲆΔⲆⵠ[a] * 25);
                    this.ᐃⵠⲆⲆⵠᐃᐃ[a] = Math.floor(ⲆΔⵠⲆΔⲆⵠ[a] * 8);
                }
                this.w1.r.x = this.w1.r.ⵠⲆⲆΔⵠ;
                this.w2.r.ⲆⲆⵠΔⵠ = 3.5;
                this.w3.r.ⲆⲆⵠΔⵠ = 2;
            };
            this.ᐃᐃᐃⲆΔ();
        }
        this.ᐃⲆⲆᐃⲆ = b.substring(0, 6) + this.ᐃⲆⲆᐃⲆ.substring(6);
        this.ⲆᐃⲆⲆΔΔΔ = ᐃⵠⵠΔ.get("starve_token_id") ? ᐃⵠⵠΔ.get("starve_token_id") : "";
        this.id = 0;
        this.ᐃΔΔⲆ = 0;
        this.ᐃᐃΔ = 0;
        this.ΔⲆΔᐃⲆⵠΔ = {
            ΔⵠⵠΔΔᐃⵠ: 0,
            ⲆⲆⲆᐃΔ: 0,
            ᐃⵠᐃⵠⲆⲆⵠ: "",
            ⲆᐃΔⲆⵠ: 0
        };
        this.ⵠⲆᐃᐃⵠᐃⲆᐃⲆ = {
            connected: 0,
            ΔᐃⵠⵠΔⲆⵠ: new Date().getTime()
        };
        this.ᐃⲆⲆⲆⲆ = [];
        this.ΔΔⲆⵠᐃᐃᐃ = function (a) {
            for (var b = 0; b < this.ᐃⲆⲆⲆⲆ.length; b++) {
                if (this.ᐃⲆⲆⲆⲆ[b] == a) {
                    return true;
                }
            }
            return false;
        };
        this.ᐃⲆΔⵠΔ = {
            ⵠⵠᐃᐃᐃ: 0,
            time: 0,
            value: 0,
            open: kj,
            ⵠᐃΔⵠ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ⵠⵠᐃᐃᐃ) / 1000);
                    if (this.time < 60) {
                        tx.ᐃⲆΔⵠΔ.button.ⵠᐃΔⵠ(io);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = Nq;
                    }
                }
            }
        };
        this.ⲆⲆⵠⵠⵠ = {
            id: -1,
            ΔⵠⲆⲆ: -1,
            lock: 0,
            timeout: new og.ⵠⵠᐃΔ(false, 0, 1, 0, 1 / 30, 1),
            wait: false
        };
        this.ΔΔΔⵠΔ = {
            timeout: new og.ⵠⵠᐃΔ(Xg, 0, 1, 0, 1 / 5, 1),
            wait: kk
        };
        this.ⵠⵠᐃⵠⵠ = {
            timeout: new og.ⵠⵠᐃΔ(false, 0, 1, 0, 1, 1),
            wait: false
        };
        this.ⵠⵠⵠⲆⲆ = {
            timeout: new og.ⵠⵠᐃΔ(false, 0, 1, 0, 1 / 10, 1),
            wait: false
        };
        this.ΔᐃⲆ = new og.ⵠᐃᐃⲆⵠᐃᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 0.4, 0, 0, lo, hq, lo, hq);
        this.ΔᐃⲆ.ⵠⵠᐃᐃᐃ = 0;
        this.ΔᐃⲆ.ᐃⵠⲆⲆΔᐃⲆ = 0;
        this.ΔᐃⲆ.ⵠᐃᐃ = function () {
            if (this.ᐃⵠⲆⲆΔᐃⲆ > 0) {
                this.ᐃⵠⲆⲆΔᐃⲆ -= yx;
            } else {
                var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                if (a) {
                    this.ⵠⵠᐃᐃᐃ = 0;
                    var b = Math.max(Math.min(lo - a.x, -2), 2 - qx.w + no);
                    var c = Math.max(Math.min(hq - a.y, -2), -qx.ⵠⵠΔ + 2 + so);
                    this.ⲆΔⵠⵠᐃΔᐃ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ⵠⵠᐃᐃᐃ += yx;
                    if (this.ⵠⵠᐃᐃᐃ > 3) {
                        this.ⵠⵠᐃᐃᐃ = 0;
                        if (!rx.reconnect.enabled) {
                            ⲆᐃⲆᐃ.ᐃᐃⵠΔᐃΔᐃΔΔ();
                        }
                    }
                }
            }
        };
        this.ΔᐃⲆ.w = screen.width;
        this.ΔᐃⲆ.ⵠⵠΔ = screen.height;
        this.ΔᐃⲆ.ΔΔⵠⲆⵠᐃⲆ = this.ΔᐃⲆ.w;
        this.ΔᐃⲆ.ᐃⵠΔⵠᐃᐃⲆ = this.ΔᐃⲆ.ⵠⵠΔ;
        this.ΔᐃⲆ.rx = 0;
        this.ΔᐃⲆ.ry = 0;
        this.ΔᐃⲆ.ᐃⲆⲆᐃᐃᐃΔⲆΔ = 0;
        this.ΔᐃⲆ.ⵠᐃⲆⲆᐃᐃⲆΔⲆ = 0;
        this.ΔᐃⲆ.ᐃⵠᐃΔⵠ = function (a, b) {
            this.x = -Math.min(Math.max(-qx.ⲆⲆⲆⲆᐃⲆⲆ * 2, a - qx.ⲆⲆⲆⲆᐃⲆⲆ - this.ΔΔⵠⲆⵠᐃⲆ / 2), qx.w - this.ΔΔⵠⲆⵠᐃⲆ);
            this.y = -Math.min(Math.max(-qx.ⵠⵠⲆⵠⲆⲆⵠ * 2, b - (qx.ⵠⵠⲆⵠⲆⲆⵠ + this.ᐃⵠΔⵠᐃᐃⲆ) / 2), qx.ⵠⵠΔ - this.ᐃⵠΔⵠᐃᐃⲆ + qx.ⵠⵠⲆⵠⲆⲆⵠ);
            this.ⵠⲆⲆΔⵠ = this.x;
            this.ᐃⲆΔᐃΔⲆᐃ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ΔᐃⵠⲆᐃⲆᐃ: 0,
            ⵠΔⵠⲆ: 0,
            attack: 0,
            ⵠᐃᐃ: function () {
                var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                if (a) {
                    var b = {
                        x: rx.ΔᐃⲆ.x + a.x,
                        y: rx.ΔᐃⲆ.y + a.y
                    };
                } else {
                    b = iq;
                }
                var c = og.ΔᐃⵠⲆΔⵠⵠ(wx.ⵠⲆΔΔ, b);
                var d = false;
                this.ⵠΔⵠⲆ += yx;
                if (!wx.state) {
                    if (a && !(a.action & 16) && this.ⵠΔⵠⲆ > 0.2) {
                        this.attack = 1;
                        d = _q;
                        this.ⵠΔⵠⲆ = 0;
                        ⲆᐃⲆᐃ.ⲆⲆⵠᐃΔⵠⵠⵠΔ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ⵠᐃⵠΔⲆⵠΔ = c;
                }
                if (!d) {
                    this.timeout += yx;
                    if (this.timeout > 0.2) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            ⲆᐃⲆᐃ.ⲆⵠⲆⵠⲆⵠⵠΔΔ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!rx.ΔΔⲆⲆᐃ.open && !rx.ΔΔΔΔΔ.open) {
                    var e = 0;
                    if (vx.ⵠΔᐃᐃⲆⲆᐃ()) {
                        e |= 1;
                    }
                    if (vx.ΔⲆΔᐃΔⵠⲆ()) {
                        e |= 2;
                    }
                    if (vx.ⵠΔᐃⵠⵠⵠⵠ()) {
                        e |= 4;
                    }
                    if (vx.ⵠⲆᐃΔᐃᐃΔ()) {
                        e |= 8;
                    }
                    if (this.ΔᐃⵠⲆᐃⲆᐃ != e) {
                        ⲆᐃⲆᐃ.ΔⵠΔΔᐃⲆΔΔΔ(e);
                    }
                    this.ΔᐃⵠⲆᐃⲆᐃ = e;
                }
            }
        };
        this.ᐃᐃⵠᐃ = {
            c: 1,
            ⲆⵠᐃΔ: 1,
            ⵠⵠΔ: 1,
            ᐃⲆⲆ: 1,
            ΔΔⲆ: 1,
            ⵠⲆⵠᐃⲆᐃⵠ: 1,
            ᐃᐃⲆⲆⵠΔⵠ: new og.ⵠⵠᐃΔ(true, 0, 1, 0, 3, 3),
            ᐃΔⲆΔⲆΔⲆ: new og.ⵠⵠᐃΔ(true, 0, 1, 0, 2, 2),
            ⵠⵠᐃⲆᐃⵠⲆ: new og.ⵠⵠᐃΔ(zh, 0, 1, 0, 3, 3),
            ⲆⲆⲆΔⵠⵠΔ: new og.ⵠⵠᐃΔ(Aq, 0, 1, 0, 3, 3),
            ΔⲆᐃΔⵠΔΔ: new og.ⵠⵠᐃΔ(true, 0, 1, 0, 3, 3),
            ⲆᐃⲆⲆⵠⲆⲆ: new og.ⵠⵠᐃΔ(true, 0, 1, 0, 3, 3),
            Δᐃᐃᐃⵠ: new og.ⲆⲆⵠⵠᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 1, 0, 0, 1),
            ⵠⵠᐃⵠΔ: new og.ⲆⲆⵠⵠᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 1, 0, 0, 1),
            ⲆΔᐃⵠΔⵠΔ: new og.ⲆⲆⵠⵠᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 1, 0, 0, 1),
            ⲆⲆⲆⲆΔᐃⲆ: new og.ⲆⲆⵠⵠᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 1, 0, 0, 1),
            ᐃᐃⵠᐃΔⲆΔ: new og.ⲆⲆⵠⵠᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 1, 0, 0, 1),
            ⵠⵠⵠᐃᐃ: new og.ⲆⲆⵠⵠᐃ(og.ᐃⲆΔΔᐃᐃⲆ, 0, 1, 0, 0, 1),
            ⵠᐃᐃ: function () {
                this.ᐃᐃⲆⲆⵠΔⵠ.ⵠᐃᐃ();
                this.ᐃΔⲆΔⲆΔⲆ.ⵠᐃᐃ();
                this.ⵠⵠᐃⲆᐃⵠⲆ.ⵠᐃᐃ();
                this.ⲆⲆⲆΔⵠⵠΔ.ⵠᐃᐃ();
                this.ΔⲆᐃΔⵠΔΔ.ⵠᐃᐃ();
                this.ⲆᐃⲆⲆⵠⲆⲆ.ⵠᐃᐃ();
                this.Δᐃᐃᐃⵠ.ⲆΔⵠⵠᐃΔᐃ(this.c);
                this.ⵠⵠᐃⵠΔ.ⲆΔⵠⵠᐃΔᐃ(this.ⲆⵠᐃΔ);
                this.ⲆΔᐃⵠΔⵠΔ.ⲆΔⵠⵠᐃΔᐃ(this.ⵠⵠΔ);
                this.ⲆⲆⲆⲆΔᐃⲆ.ⲆΔⵠⵠᐃΔᐃ(this.ᐃⲆⲆ);
                this.ᐃᐃⵠᐃΔⲆΔ.ⲆΔⵠⵠᐃΔᐃ(this.ΔΔⲆ);
                this.ⵠⵠⵠᐃᐃ.ⲆΔⵠⵠᐃΔᐃ(this.ⵠⲆⵠᐃⲆᐃⵠ);
            }
        };
        this.ΔᐃΔⲆΔⵠΔ = va;
        this.ΔⲆⲆⵠΔΔⵠ = false;
        this.ⵠⲆⲆᐃⲆ = false;
        this.ⲆΔⲆΔⵠⵠⵠ = false;
        this.ⲆⲆΔⵠ = {
            max: 10,
            ΔⵠΔΔⲆⵠᐃ: 0,
            ΔⵠⵠⲆⵠ: 0,
            ⲆΔⵠ: [],
            Δᐃⵠⵠⵠ: [],
            ⲆⲆᐃⲆᐃⲆΔ: function (a, b) {
                if (a === 1) {
                    this.ΔⵠⵠⲆⵠ = Df.ⲆⲆΔⲆⲆⲆᐃⲆᐃ;
                }
                this.ΔⵠΔΔⲆⵠᐃ += b;
                this.max = 10 + this.ΔⵠΔΔⲆⵠᐃ + this.ΔⵠⵠⲆⵠ;
            },
            ⲆⲆᐃΔᐃΔᐃ: {
                item: -1,
                ⵠΔ: null,
                ⲆⲆΔΔΔ: 0,
                ⵠΔⵠᐃⲆⲆΔ: 0,
                ᐃⵠΔⵠⵠ: -1,
                ⲆΔⵠⵠΔ: -1,
                ⵠᐃᐃΔⵠ: function (a) {
                    if (!!this.ⲆⲆΔΔΔ && (a.x !== this.ᐃⵠΔⵠⵠ || a.y !== this.ⲆΔⵠⵠΔ)) {
                        this.ⵠΔⵠᐃⲆⲆΔ = 1;
                    }
                },
                start: function (a, b) {
                    this.ᐃⵠΔⵠⵠ = b.x;
                    this.ⲆΔⵠⵠΔ = b.y;
                    this.item = a;
                    this.ⵠΔ = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ[a].info.ⵠΔ[2];
                    this.ⲆⲆΔΔΔ = 1;
                },
                stop: function () {
                    this.ⲆⲆΔΔΔ = 0;
                    this.ⵠΔⵠᐃⲆⲆΔ = 0;
                    this.ᐃⵠΔⵠⵠ = -1;
                    this.ⲆΔⵠⵠΔ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ;
                    var c = 0;
                    if (this.ⲆⲆΔΔΔ && this.ⵠΔⵠᐃⲆⲆΔ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === df) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            tx.ⵠⵠΔⵠᐃᐃⵠ();
                        }
                    }
                    this.stop();
                    return c;
                },
                ⵠᐃΔⵠ: function (a, b) {
                    if (this.ⲆⲆΔΔΔ && this.ⵠΔⵠᐃⲆⲆΔ) {
                        Rp(io, this.ⵠΔ, Math.floor(a - this.ⵠΔ.width / 2), Math.floor(b - this.ⵠΔ.height / 2));
                    }
                }
            },
            ⵠⵠⵠΔⵠᐃᐃᐃⲆ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ⲆΔⵠ[a[d][0]] == a[d][1]) {
                        return Aq;
                    }
                }
                return false;
            },
            Ⲇᐃⵠᐃᐃ: function (a) {
                for (var b = 0; b < this.Δᐃⵠⵠⵠ.length; b++) {
                    if (this.Δᐃⵠⵠⵠ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ⵠⲆⲆᐃⵠⵠᐃ: function (a, b) {
                this.ⲆΔⵠ[a] = 0;
                this.Δᐃⵠⵠⵠ.splice(b, 1);
                tx.ⵠⵠΔⵠᐃᐃⵠ();
            },
            ⲆᐃᐃΔⵠᐃⵠ: function (a, b, c) {
                ⵠᐃᐃ = true;
                this.ⲆΔⵠ[a] = Math.max(0, this.ⲆΔⵠ[a] - b);
                if (!this.ⲆΔⵠ[a] && c >= 0) {
                    this.ⵠⲆⲆᐃⵠⵠᐃ(a, c);
                }
            }
        };
        this.ⵠᐃᐃᐃΔ = {
            enabled: ws,
            translate: {
                y: 0,
                x: 0
            },
            ⲆⵠⲆΔⲆΔⲆ: function () {
                if (qx.mode == 1 && !rx.ΔⲆⲆⵠΔΔⵠ) {
                    rx.ⵠᐃᐃᐃΔ.enabled = !rx.ⵠᐃᐃᐃΔ.enabled;
                    if (rx.ⵠᐃᐃᐃΔ.enabled) {
                        tx.options.ⲆᐃᐃᐃΔⲆᐃ.display = "inline-block";
                    } else {
                        tx.options.ⲆᐃᐃᐃΔⲆᐃ.display = "none";
                    }
                }
            }
        };
        tx.options.ⲆᐃᐃᐃΔⲆᐃ.display = "none";
        this.ⲆⲆⲆᐃⲆ = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            ⵠⵠᐃᐃᐃ: 0,
            ⲆⵠⲆΔⲆΔⲆ: function () {
                rx.ⲆⲆⲆᐃⲆ.enabled = !rx.ⲆⲆⲆᐃⲆ.enabled;
                if (rx.ⲆⲆⲆᐃⲆ.enabled) {
                    tx.options.ᐃᐃⵠⵠⵠⵠᐃ.display = "inline-block";
                } else {
                    tx.options.ᐃᐃⵠⵠⵠⵠᐃ.display = "none";
                }
            },
            ⵠᐃᐃ: function () {
                if (!!this.enabled && rx.ⲆΔⲆᐃ.id < 0 && !tx.Δᐃⵠᐃ.open) {
                    this.ⵠⵠᐃᐃᐃ += yx;
                    if (this.ⵠⵠᐃᐃᐃ > 2) {
                        this.ⵠⵠᐃᐃᐃ = 0;
                        if (rx.ᐃᐃⵠᐃ.ⵠⵠΔ < 0.35) {
                            if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[110]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(110, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(110));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[192]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(192, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(192));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[196]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(196, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(196));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[189]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(189, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(189));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[207]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(207, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(207));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[205]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(205, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(205));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[209]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(209, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(209));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[143]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(143, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(143));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[117]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(117, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(117));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[138]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(138, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(138));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[133]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(133, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(133));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[145]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(145, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(145));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[136]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(136, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(136));
                            } else if (rx.ⲆⲆΔⵠ.ⲆΔⵠ[197]) {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(197, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(197));
                            }
                        } else if (rx.ᐃᐃⵠᐃ.ᐃⲆⲆ < 0.35 && rx.ⲆⲆΔⵠ.ⲆΔⵠ[127]) {
                            ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(127, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(127));
                        }
                    }
                }
            }
        };
        tx.options.ᐃᐃⵠⵠⵠⵠᐃ.display = "none";
        this.ⲆΔⲆᐃ = {
            id: -1,
            ⵠΔⵠΔ: -1,
            timeout: new og.ⵠⵠᐃΔ(vg, 0, 1, 0, 1, 1),
            ΔᐃᐃⲆⵠ: ws,
            ΔΔΔᐃ: -1,
            mode: 0,
            label: [],
            ⲆⲆΔⵠⵠ: [],
            ⲆⵠΔⵠⲆ: _e,
            ⵠᐃᐃⲆⲆ: w,
            ΔⵠⵠⲆⲆⵠⲆ: kj,
            ⲆⲆΔΔᐃ: false,
            ΔΔⵠⵠⲆⵠΔᐃΔ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ΔΔᐃᐃⵠΔⲆⲆᐃ: function (a) {
                this.ⲆⵠΔⵠⲆ = a;
                var b = tx.Δᐃⵠᐃ;
                if (b.open) {
                    b.ⵠⵠⵠⲆᐃⲆΔ(b.button);
                }
                this.ⵠᐃᐃ();
            },
            ᐃⵠΔᐃⲆⵠⲆΔⲆ: function (a) {
                var b = kt[a];
                this.id = a;
                this.ΔᐃᐃⲆⵠ = xb;
                qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                this.timeout.ⵠᐃΔΔⵠⲆᐃ = b.time * 8;
                this.ⵠΔⵠΔ = b.ⵠΔⵠΔ;
            },
            ᐃᐃΔⵠⵠᐃᐃΔⲆ: function (a) {
                var b = kt[a];
                this.id = a;
                this.ΔᐃᐃⲆⵠ = true;
                var c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                if (c && c.right == 28) {
                    this.timeout.ⵠᐃΔΔⵠⲆᐃ = b.time * 3;
                } else {
                    this.timeout.ⵠᐃΔΔⵠⲆᐃ = b.time;
                }
                this.ⵠΔⵠΔ = b.ⵠΔⵠΔ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    rx.ⲆⲆΔⵠ.ⲆᐃᐃΔⵠᐃⵠ(e[0], e[1], rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(e[0]));
                }
                tx.ⵠⵠΔⵠᐃᐃⵠ();
            },
            ⵠᐃᐃ: function () {
                this.ⲆⲆΔⵠⵠ = [];
                if (tx.ᐃΔᐃΔᐃ.ⲆΔⲆᐃ === 1) {
                    tx.ᐃΔᐃΔᐃ.display = 0;
                }
                for (var a in kt) {
                    var b = kt[a];
                    var c = Ha;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (rx.ⲆⲆΔⵠ.max >= 16 && b.id === 100) {
                                c = vn;
                                break;
                            }
                            if (b.w > this.ⲆⵠΔⵠⲆ || b.f > this.ⵠᐃᐃⲆⲆ || b.ΔΔⲆ > this.ΔⵠⵠⲆⲆⵠⲆ || b.e > this.ⲆⲆΔΔᐃ) {
                                c = false;
                                break;
                            }
                            var f = b.r[d];
                            if (!rx.ⲆⲆΔⵠ.ⲆΔⵠ[f[0]] || rx.ⲆⲆΔⵠ.ⲆΔⵠ[f[0]] < f[1]) {
                                c = vg;
                                break;
                            }
                        }
                        if (c) {
                            this.ⲆⲆΔⵠⵠ.push(tx.ⲆΔᐃ[b.id]);
                        }
                    }
                }
                tx.ⵠⵠΔⲆΔᐃⵠ();
                tx.ⵠⵠⵠⲆΔⵠᐃ();
                tx.ᐃⵠΔⲆⲆⲆᐃ();
                tx.ΔΔⵠΔΔⵠⵠ();
                tx.ᐃᐃⵠⵠⵠΔᐃ();
                tx.ΔⵠⵠᐃᐃⲆⲆ();
                tx.sign.ᐃᐃΔΔⲆΔΔ();
            },
            ⵠΔⵠᐃⵠᐃΔ: function () {
                this.id = -1;
                this.ΔᐃᐃⲆⵠ = false;
                this.timeout.ᐃᐃⲆ = 0;
                this.timeout.ΔΔⲆ = false;
                this.ⵠᐃᐃ();
            }
        };
        this.ⲆᐃⲆᐃᐃΔⵠ = {
            message: oh,
            ⵠᐃΔⵠ: gw
        };
        this.alert = {
            timeout: new og.ⵠⵠᐃΔ(ws, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            ⵠᐃΔⵠ: iw,
            list: []
        };
        this.ⲆⵠΔᐃⵠ = {
            ⲆⲆ: document.createElement("canvas"),
            ⲆⲆⲆⵠⵠ: [],
            ⵠᐃᐃ: Ha,
            translate: {
                x: 0,
                y: 0
            },
            sort: function () {
                var a = [];
                for (var b = qx.ⲆΔᐃΔ, c = 0; c < b.length; c++) {
                    if (b[c].ᐃⵠΔᐃᐃ) {
                        a.push({
                            id: c,
                            ΔⵠΔⲆ: b[c].ⲆⲆⲆᐃΔ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ΔⵠΔⲆ - a.ΔⵠΔⲆ;
                });
                this.ⲆⲆⲆⵠⵠ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ⲆⲆⲆⵠⵠ.push(a[c].id);
                }
                this.ⵠᐃᐃ = Aq;
            },
            ᐃᐃᐃⲆΔ: function (a) {
                for (var b = qx.ⲆΔᐃΔ, c = 0; c < b.length; c++) {
                    b[c].ⲆⲆⲆᐃΔ = 0;
                }
                b[rx.id].ⲆⲆⲆᐃΔ = og.ⵠⵠΔⲆᐃⲆⲆ(a[1]);
                this.ⲆⲆⲆⵠⵠ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ⲆⲆⲆⵠⵠ.push(a[c]);
                    b[a[c]].ⲆⲆⲆᐃΔ = og.ⵠⵠΔⲆᐃⲆⲆ(a[c + 1]);
                }
                this.ⵠᐃᐃ = true;
            }
        };
        this.ⲆⵠΔᐃⵠ.ⲆⲆ.width = jq * 180;
        this.ⲆⵠΔᐃⵠ.ⲆⲆ.height = jq * 300;
        this.ⲆⵠΔᐃⵠ.ⵠ = this.ⲆⵠΔᐃⵠ.ⲆⲆ.getContext("2d");
        this.ΔΔΔΔΔ = {
            open: false,
            input: document.getElementById("commandInput"),
            ⲆᐃⲆⲆΔⵠⵠ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ΔᐃⵠⲆΔᐃᐃⵠᐃ: function (a) {
                this.ⲆᐃⲆⲆΔⵠⵠ.innerHTML += a;
            },
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(no / 2 - 300) + "px";
                this.style.top = Math.floor(so / 2 - 250) + "px";
            },
            ⲆΔᐃΔᐃᐃΔⲆⵠ: function () {
                this.ⲆᐃⲆⲆΔⵠⵠ.innerHTML = "";
            },
            ΔΔⵠⲆΔ: function () {
                this.open = kj;
                this.style.display = "none";
            },
            ᐃⵠΔⵠⲆ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 === 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 === 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ᐃᐃⵠⲆᐃ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ΔᐃⵠⲆΔᐃᐃⵠᐃ(f);
                this.ⵠᐃⵠΔᐃᐃΔΔΔ();
            },
            ⵠᐃⵠΔᐃᐃΔΔΔ: function () {
                this.ⲆᐃⲆⲆΔⵠⵠ.scrollTop = this.ⲆᐃⲆⲆΔⵠⵠ.scrollHeight;
            },
            ΔΔᐃΔᐃⲆΔ: function (b) {
                switch (b) {
                    case "clean":
                        this.ⲆΔᐃΔᐃᐃΔⲆⵠ();
                        return true;
                    case "list":
                        var c = "";
                        const a = cj.document.createElement("div");
                        for (var d = qx.ⲆΔᐃΔ, e = 0; e < d.length; e++) {
                            var f = d[e];
                            if (f.ᐃⵠΔᐃᐃ) {
                                a.innerText = f.ΔⲆᐃᐃΔ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
                            }
                        }
                        this.ᐃᐃⵠⲆᐃ("list", 1, "List all connected players", c);
                        return true;
                    case "weapon-list":
                        this.ᐃᐃⵠⲆᐃ("Weapons", 1, "List all weapons in the game", this.ᐃⵠΔⵠⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return true;
                    case "tool-list":
                        this.ᐃᐃⵠⲆᐃ("Tools", 1, "List all tools in the game", this.ᐃⵠΔⵠⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                    case "survival-list":
                        this.ᐃᐃⵠⲆᐃ("Survival Items", 1, "List all survival items in the game", this.ᐃⵠΔⵠⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return true;
                    case "resource-list":
                        this.ᐃᐃⵠⲆᐃ("Resources", 1, "List all resources in the game", this.ᐃⵠΔⵠⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return Sh;
                    case "food-list":
                        this.ᐃᐃⵠⲆᐃ("Food", 1, "List all food in the game", this.ᐃⵠΔⵠⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                    case "hat-list":
                        this.ᐃᐃⵠⲆᐃ("Hats", 1, "List all hats in the game", this.ᐃⵠΔⵠⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return Ls;
                    case "building-list":
                        this.ᐃᐃⵠⲆᐃ("Buildings", 1, "List all buildings in the game", this.ᐃⵠΔⵠⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return wl;
                    case "biome-list":
                        this.ᐃᐃⵠⲆᐃ("Biomes list", 1, "List all available biomes in the game", this.ᐃⵠΔⵠⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return gg;
                    case "help-config":
                        this.ᐃᐃⵠⲆᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return true;
                    case "pos":
                        d = qx.ⵠⲆⵠ[0];
                        e = 0;
                        for (; e < d.length; e++) {
                            var g = d[e];
                            if (g.ΔⵠⲆⲆ === rx.id) {
                                this.ᐃᐃⵠⲆᐃ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                                return true;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ᐃᐃⵠⲆᐃ("help-admin", 1, "List all available commands for admin only", this.ᐃⵠΔⵠⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return Bs;
                    case "help":
                        this.ᐃᐃⵠⲆᐃ("help", 1, "List all available commands", this.ᐃⵠΔⵠⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return gg;
                }
                return false;
            },
            ⲆΔⵠΔΔⵠⲆᐃΔ: function () {
                if (!this.open) {
                    this.open = Aq;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ⵠᐃΔᐃᐃⵠⵠ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ΔΔᐃΔᐃⲆΔ(a)) {
                        ⲆᐃⲆᐃ.ΔΔⵠᐃᐃΔΔΔⲆ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ΔΔⲆⲆᐃ = {
            open: false,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(no / 2 - 150) + "px";
                this.style.top = Math.floor(so / 2 + 80) + "px";
            },
            ΔΔⵠⲆΔ: function () {
                this.open = Ur;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (rx.alert.text) {
                            rx.alert.list.push(b);
                        } else {
                            rx.alert.text = b;
                        }
                        tx.ⲆⲆᐃΔΔᐃᐃ = 0;
                    } else {
                        tx.ⲆⲆᐃΔΔᐃᐃ = 1;
                    }
                }
            },
            ΔΔᐃΔᐃⲆΔ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return true;
                }
                return vn;
            },
            ΔⲆⲆⲆᐃ: function () {
                if (this.open) {
                    this.open = al;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ΔΔᐃΔᐃⲆΔ(a)) {
                            ⲆᐃⲆᐃ.ΔⲆΔⲆⵠᐃᐃᐃΔ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ⵠⵠᐃΔᐃⲆⵠ = {
            ⵠⲆⵠⵠⵠ: [],
            ⵠᐃᐃ: function (a) {
                a.y += yx * 80 * a.ΔⵠΔⲆ;
                a.x += yx * 80 * a.c;
                a.ⵠⵠᐃⵠΔ -= yx / 6;
                if (a.ⵠⵠᐃⵠΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + yx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - yx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(Er.ΔᐃᐃᐃⵠΔⲆ * (no / 1366), Er.ΔᐃᐃᐃⵠΔⲆ + 10) * Math.max(Math.min(qx.ⲆΔΔⵠⵠ + 1000, 3000) / 3000, 0));
                if (this.ⵠⲆⵠⵠⵠ.length < c) {
                    var d = Math.floor(Math.random() * Er.ᐃᐃⵠⵠⵠΔΔ);
                    var e = -rx.ΔᐃⲆ.x + Math.floor(Math.random() * rx.ΔᐃⲆ.w);
                    var f = -rx.ΔᐃⲆ.y + Math.floor(Math.random() * rx.ΔᐃⲆ.ⵠⵠΔ);
                    var g = Math.random(Math.PI);
                    this.ⵠⲆⵠⵠⵠ.push(new jf(d, e, f, g));
                }
            }
        };
        this.ⵠΔⵠⲆᐃᐃⵠ = 0;
        this.ᐃⲆΔⲆⵠ = 0;
        this.ⲆΔΔⲆⲆ = {
            ⵠⲆⵠⵠⵠ: [],
            ΔᐃⵠⵠⲆ: 0,
            ⵠᐃᐃⵠⲆ: 0,
            ⵠᐃᐃ: function (a) {
                a.y += yx * (200 + this.ⵠᐃᐃⵠⲆ * 800) * a.ΔⵠΔⲆ;
                a.x += yx * (200 + this.ⵠᐃᐃⵠⲆ * 800) * a.c;
                a.ⵠⵠᐃⵠΔ -= yx / 6;
                if (a.ⵠⵠᐃⵠΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + yx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - yx * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ⵠᐃᐃⵠⲆ + 0.1) * Er.ⵠⵠⲆΔⵠΔⲆ * (no / 1366), (this.ⵠᐃᐃⵠⲆ + 0.1) * Er.ⵠⵠⲆΔⵠΔⲆ + 10) * Math.max(Math.min(qx.ⵠⲆᐃᐃⲆ + 1000, 3000) / 3000, 0));
                if (this.ⵠⲆⵠⵠⵠ.length < c) {
                    var d = Math.floor(Math.random() * Er.ᐃᐃⵠⵠⵠΔΔ);
                    var e = -rx.ΔᐃⲆ.x + Math.floor(Math.random() * rx.ΔᐃⲆ.w);
                    var f = -rx.ΔᐃⲆ.y + Math.floor(Math.random() * rx.ΔᐃⲆ.ⵠⵠΔ);
                    var g = Math.random(Math.PI);
                    if (rx.ⲆΔΔⲆⲆ.ΔᐃⵠⵠⲆ !== 0) {
                        e -= rx.ΔᐃⲆ.w / 2;
                    }
                    this.ⵠⲆⵠⵠⵠ.push(new jf(d, e, f, g));
                }
            }
        };
        this.ⲆΔⵠᐃᐃ = {
            ⵠⲆⵠⵠⵠ: [],
            ΔᐃⵠⵠⲆ: 0,
            ⵠᐃᐃⵠⲆ: 0,
            ⵠᐃᐃ: function (a) {
                if (vx.ⵠΔᐃⵠⵠⵠⵠ()) {
                    a.y += yx * a.ⵠⲆᐃⲆⵠ * (5.5 + this.ⵠᐃᐃⵠⲆ * 10);
                } else {
                    a.y += yx * a.ⵠⲆᐃⲆⵠ * (5 + this.ⵠᐃᐃⵠⲆ * 10);
                }
                a.ⵠⵠᐃⵠΔ -= yx / 2;
                if (vx.ⵠΔᐃᐃⲆⲆᐃ()) {
                    a.x += yx * (100 + this.ⵠᐃᐃⵠⲆ * 400);
                } else if (vx.ΔⲆΔᐃΔⵠⲆ()) {
                    a.x -= yx * (130 - this.ⵠᐃᐃⵠⲆ * 400);
                } else {
                    a.x -= yx * (30 - this.ⵠᐃᐃⵠⲆ * 400);
                }
                if (a.ⵠⵠᐃⵠΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + yx * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - yx * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ⵠᐃᐃⵠⲆ * 1.5 + 0.5) * Er.ⵠᐃᐃⲆⵠⲆᐃ * (no / 1366), (this.ⵠᐃᐃⵠⲆ * 1.5 + 0.5) * Er.ⵠᐃᐃⲆⵠⲆᐃ + 10) * Math.max(Math.min(qx.ⲆⵠᐃⵠⲆ + 1000, 3000) / 3000, 0));
                if (this.ⵠⲆⵠⵠⵠ.length < b) {
                    var c = Math.floor(Math.random() * Er.ⵠⲆⲆᐃΔⲆⲆ);
                    var d = -rx.ΔᐃⲆ.x + Math.floor(Math.random() * rx.ΔᐃⲆ.w);
                    var e = -rx.ΔᐃⲆ.y + Math.floor(Math.random() * 400 * jq - jq * 200);
                    this.ⵠⲆⵠⵠⵠ.push(new jf(c, d, e, 0));
                }
            }
        };
        this.ⵠⵠⲆΔ = [];
        for (var d = 0; d < 4; d++) {
            this.ⵠⵠⲆΔ.push(new c());
        }
    }
    function $f() {
        Math.random();
        return "p";
    }
    function Pw() {
        Math.random();
        return "r";
    }
    function Uf() {
        Math.random();
        return "t";
    }
    function Qw() {
        Math.random();
        return "C";
    }
    function $f() {
        Math.random();
        return "p";
    }
    function Rw() {
        Math.random();
        return "d";
    }
    function Zf() {
        Math.random();
        return "o";
    }
    function Sw() {
        Math.random();
        return "s";
    }
    function Mw() {
        Math.random();
        return "a";
    }
    function Tw(c, d, e, f, i, j) {
        const a = (c | 49128) & ~(c & 49128);
        const k = (2531011 + (2396 + d) * 214013) % 4294967296;
        const m = ((e + 37699) * 214013 + 2531011) % 4294967296;
        const h = ((f + 25604) * 2147483629 + 2147483587) % 2147483647;
        const l = (1013904223 + (5846 + j) * 1664525) % 4294967296;
        const g = gb(a, k, m, h);
        const n = gb(l, a, k, m);
        return (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) >> 8 & 255)) + (16 << ((g ^ n) & 255)) + (0 << ((g ^ n) >> 24 & 255));
    }
    function Uw(b, c) {
        const d = ~(b & 40147) & 40147 | ~(b & 40147) & b;
        const e = ((c + 38906) * 22695477 + 1) % 4294967296;
        const f = ub(d, e, d, e, d, e);
        const g = Nn(d, e, d, e);
        return (24 << ((f ^ g) >> 16 & 255)) + (0 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 8 & 255));
    }
    function Vw(b, c, d) {
        const e = b ^ 25958;
        const f = c ^ 26851;
        const g = ~(d & 22361) & 22361 | ~(d & 22361) & d;
        const a = Et(e, f, g);
        const h = Yn(e, f, g, e, f);
        return (8 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) >> 24 & 255)) + (24 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 8 & 255));
    }
    ΔᐃⲆⵠᐃᐃⲆⲆⵠ = 1;
    setTimeout(function b() {
        var c = Vf() + Mw() + Uf() + Hf();
        Math.random();
        var d = "W" + Nw() + function () {
            Math.random();
            return "b";
        }() + (Math.random(), "S") + Zf() + function () {
            Math.random();
            return "c";
        }() + (Math.random(), "k") + Nw() + Uf();
        if (cj[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = Sw() + Nw() + Vf() + Rw();
        var f = $f() + Pw() + Zf() + Uf() + Zf() + Uf() + (Math.random(), "y") + $f() + Nw();
        if (cj[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = Rw() + Pw() + Mw() + (Math.random(), "w") + function () {
            Math.random();
            return "I";
        }() + (Math.random(), "m") + Mw() + qf() + Nw();
        e = Qw() + Mw() + Vf() + (Math.random(), "v") + Mw() + Sw() + (Math.random(), "R") + Nw() + Vf() + Rw() + Nw() + Pw() + Hf() + Vf() + qf() + Qw() + Zf() + Vf() + Uf() + Nw() + function () {
            Math.random();
            return "x";
        }() + Uf() + function () {
            Math.random();
            return "2";
        }() + (Math.random(), "D");
        if (cj[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    function Ww(a, b) {
        const c = (1013904223 + (a + 48313) * 1664525) % 4294967296;
        const d = (46213 + b) % 65389;
        const e = ix(c, d, c, d, c);
        ix(d, c, d, c, d);
        return e ^ 33551;
    }
    function Xw() {
        og.ᐃΔⵠΔⵠΔΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + rx.ᐃᐃΔ + "%20days%20with%20" + rx.ΔⲆΔᐃⲆⵠΔ.ⲆⲆⲆᐃΔ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function Yw() {
        og.ᐃΔⵠΔⵠΔΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function Zw(b, j) {
        this.ⲆⲆ = b;
        this.ⵠ = j;
        if (cj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⵠⲆⲆΔᐃᐃⵠ = "default";
            this.ⲆᐃⲆⲆⲆᐃᐃ = "pointer";
        } else {
            this.ⵠⲆⲆΔᐃᐃⵠ = "url('img/cursor0.png'), default";
            this.ⲆᐃⲆⲆⲆᐃᐃ = "url('img/cursor1.png'), pointer";
        }
        var H = this;
        function e(b, c, e, f, i) {
            var a = this;
            for (var j = c + 9, k = 0, m = f, n = c; j > n; n++) {
                H.buttons[n].info.callback = o;
                H.buttons[n].info.ᐃΔΔⵠⲆᐃⲆΔΔ = b;
            }
            function o() {
                if (m !== this.ⲆᐃⲆᐃⲆᐃᐃ && this.ⲆᐃⲆᐃⲆᐃᐃ !== -1) {
                    if (this.ᐃᐃᐃⵠⲆᐃᐃ > 0) {
                        if (ⵠᐃⲆⵠⵠⲆⵠ === c) {
                            P(v, ha, "none");
                        } else {
                            P(w, ha, "none");
                        }
                    } else if (ⵠᐃⲆⵠⵠⲆⵠ === c) {
                        P(v, ia, "inline-block");
                    } else {
                        P(w, ia, "inline-block");
                    }
                    m = this.ⲆᐃⲆᐃⲆᐃᐃ;
                    e(this.ⲆᐃⲆᐃⲆᐃᐃ);
                    p();
                }
            }
            function p() {
                var a = b[m];
                nx.ᐃⲆᐃᐃΔᐃⵠ = cf(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (Ft !== a.level) {
                    nx.ᐃΔⵠΔΔⵠⲆ = cf("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                } else {
                    nx.ᐃΔⵠΔΔⵠⲆ = cf("by " + a.ᐃⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, rs, 10, 8);
                }
            }
            this.ⵠⵠⵠⲆΔᐃⵠ = function () {
                for (var a = c, d = k * 3; j > a && b.length > d; a++, d++) {
                    if (b[d].ⵠΔⲆ !== aj.ⲆⵠⲆᐃᐃⵠᐃ || i[d] !== 0) {
                        H.buttons[a].info.ⲆᐃⲆᐃⲆᐃᐃ = d;
                        for (var e = 0; e < 3; e++) {
                            H.buttons[a].info.ⵠΔ[e] = ⵠⵠⵠⲆⲆⵠⵠ[b[d].ⵠΔⲆ][e];
                            H.buttons[a].info.active = ia;
                            H.buttons[a].info.ᐃᐃᐃⵠⲆᐃᐃ = i[d];
                        }
                    } else {
                        H.buttons[a].info.ⲆᐃⲆᐃⲆᐃᐃ = -1;
                        H.buttons[a].info.active = ha;
                    }
                }
                for (; a < j; a++) {
                    H.buttons[a].info.ⲆᐃⲆᐃⲆᐃᐃ = -1;
                    H.buttons[a].info.active = ha;
                }
                p();
            };
            H.buttons[j].info.callback = function () {
                if (k > 0) {
                    k--;
                }
                a.ⵠⵠⵠⲆΔᐃⵠ();
            };
            H.buttons[j + 1].info.callback = function () {
                if (k * 3 + 9 < b.length) {
                    k++;
                }
                a.ⵠⵠⵠⲆΔᐃⵠ();
            };
        }
        function g() {
            var b = Number(ᐃⵠⵠΔ.get("starve_crate"));
            var c = Number(ᐃⵠⵠΔ.get("starve_dead"));
            var d = Number(ᐃⵠⵠΔ.get("starve_book"));
            var e = Number(ᐃⵠⵠΔ.get("starve_bag"));
            var f = Number(ᐃⵠⵠΔ.get("starve_skin"));
            var a = Number(ᐃⵠⵠΔ.get("starve_accessory"));
            H.ᐃΔΔΔ = f || 0;
            H.ᐃᐃΔⵠⵠ = d || 0;
            H.ⲆⵠΔⲆΔ = b || 1;
            H.ΔⵠⲆᐃⵠ = a || 0;
            H.ΔⵠⵠⲆⵠ = e || 0;
            H.ᐃᐃⵠΔⵠ = c || 0;
        }
        function a() {
            for (var a = bj.ΔⲆⵠΔΔ, b = 0; a.length > b; b++) {
                if (a[b].ⵠΔⲆ === aj.ⲆⵠⲆⲆⵠ) {
                    H.unlock.ᐃΔΔΔ[b] = 1;
                } else {
                    H.unlock.ᐃΔΔΔ[b] = 0;
                }
            }
            a = bj.ΔⵠᐃⲆⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (aj.ⲆⵠⲆⲆⵠ === a[b].ⵠΔⲆ) {
                    H.unlock.ΔⵠⲆᐃⵠ[b] = 1;
                } else {
                    H.unlock.ΔⵠⲆᐃⵠ[b] = 0;
                }
            }
            a = bj.ΔⵠᐃΔ;
            b = 0;
            for (; a.length > b; b++) {
                if (a[b].ⵠΔⲆ === aj.ⲆⵠⲆⲆⵠ) {
                    H.unlock.ΔⵠⵠⲆⵠ[b] = 1;
                } else {
                    H.unlock.ΔⵠⵠⲆⵠ[b] = 0;
                }
            }
            a = bj.ΔⲆᐃⵠⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ⵠΔⲆ === aj.ⲆⵠⲆⲆⵠ) {
                    H.unlock.ᐃᐃΔⵠⵠ[b] = 1;
                } else {
                    H.unlock.ᐃᐃΔⵠⵠ[b] = 0;
                }
            }
            a = bj.ΔⵠⵠΔᐃ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ⵠΔⲆ === aj.ⲆⵠⲆⲆⵠ) {
                    H.unlock.ⲆⵠΔⲆΔ[b] = 1;
                    H.unlock.ᐃᐃⵠΔⵠ[b] = 1;
                } else {
                    H.unlock.ⲆⵠΔⲆΔ[b] = 0;
                    H.unlock.ᐃᐃⵠΔⵠ[b] = 0;
                }
            }
        }
        this.waiting = va;
        this.ⲆᐃᐃᐃΔⵠΔ = 0;
        this.ⵠⲆⵠᐃⵠᐃΔ = -1;
        this.ΔΔᐃⲆⲆᐃΔ = {
            translate: {
                y: 0,
                x: 0
            },
            angle: 0,
            ⵠΔ: ᐃⵠ[301],
            ⵠᐃΔⵠ: function () {
                this.angle += yx * 2;
                j.save();
                j.translate(this.translate.x + this.ⵠΔ.width / 2, this.translate.y + this.ⵠΔ.height / 2);
                j.rotate(this.angle);
                Rp(j, this.ⵠΔ, -this.ⵠΔ.width / 2, -this.ⵠΔ.height / 2);
                j.restore();
            }
        };
        this.ⲆⵠⵠⲆⲆᐃⵠ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                y: 0,
                x: 0
            },
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ΔᐃᐃⵠΔ = 0;
        this.ᐃⵠᐃⲆⵠⵠᐃ = -1;
        this.ⵠⵠⵠᐃⲆⵠΔ = undefined;
        this.ⵠΔΔⵠᐃᐃᐃ = "";
        this.ⵠᐃⵠᐃᐃⵠᐃ = "";
        this.ΔΔⵠⲆⲆΔΔ = undefined;
        this.ⵠⲆΔⲆΔ = 0;
        this.ⵠⲆᐃⵠᐃⲆⵠ = -1;
        this.ⲆⵠΔΔᐃⲆⵠ = oh;
        this.ⲆⲆⵠⵠⲆᐃᐃ = 0;
        this.ᐃⵠⲆΔⲆⲆΔ = 0;
        this.ΔᐃᐃΔᐃⲆᐃ = 0;
        this.ⲆᐃΔⲆⵠ = 0;
        this.ⵠⵠⲆᐃⵠⵠⵠ = 0;
        this.time = 0;
        this.ⲆⲆⲆᐃΔ = 0;
        this.ΔⵠⵠⲆΔᐃⵠ = 0;
        this.ⵠΔⵠΔᐃᐃⵠ = 0;
        this.ᐃΔΔΔⵠΔᐃ = 0;
        this.ⲆⲆⵠⲆᐃⵠΔ = 0;
        this.ⲆⲆᐃⵠⲆⵠⵠ = [];
        this.ΔΔⲆΔᐃ = -1;
        this.ⲆᐃᐃᐃⲆⲆⵠ = -1;
        this.ⲆⲆΔΔⲆΔⵠ = -1;
        this.ⵠⲆⵠᐃΔᐃⵠ = undefined;
        this.ᐃⲆᐃⵠΔⵠΔ = hg;
        this.ⵠⲆᐃⵠⲆⵠⵠ = -1;
        this.ⲆⲆᐃΔΔⵠⲆ = -1;
        this.ΔⲆᐃⲆⵠⲆᐃ = -1;
        this.ⵠΔᐃⲆⲆΔΔ = -1;
        this.ᐃⲆᐃΔⵠᐃⵠ = Ts;
        this.ΔⲆⲆⲆΔᐃΔ = Ts;
        this.ⲆᐃΔᐃᐃᐃⲆ = undefined;
        this.ᐃⲆᐃᐃΔᐃⵠ = yk;
        this.ᐃΔⵠΔΔⵠⲆ = Pl;
        this.ⵠⵠⵠΔⲆᐃⵠ = undefined;
        this.ΔⲆΔᐃᐃⵠᐃ = br;
        this.ΔΔΔΔᐃΔᐃ = undefined;
        this.ᐃᐃⲆⲆΔᐃⵠ = undefined;
        this.ⵠᐃⲆΔᐃΔΔ = 3;
        this.Ⲇⵠᐃᐃ = 0;
        this.ᐃᐃΔⲆᐃΔⵠᐃⲆ = Eh;
        this.ΔⵠᐃᐃΔ = ᐃⵠⵠΔ.get("starve_quality") ? ᐃⵠⵠΔ.get("starve_quality") : "high";
        if (this.ΔⵠᐃᐃΔ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ΔⵠᐃᐃΔ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ΔⵠᐃᐃΔ = 0;
        }
        this.ᐃⲆⲆΔⲆᐃᐃΔᐃ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ᐃⵠⵠΔ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            tx.ⵠⲆΔᐃᐃⵠΔ();
            nx.ΔⵠᐃᐃΔ = 1;
        };
        this.ΔΔᐃΔⲆⵠⲆⲆΔ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ᐃⵠⵠΔ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Mq / Qq);
            tx.ⵠⲆΔᐃᐃⵠΔ();
            nx.ΔⵠᐃᐃΔ = 0;
        };
        if (ᐃⵠⵠΔ.get("starve_mapping") === undefined && mr === "FR") {
            vx.ΔⲆᐃⲆⲆᐃⲆ();
            this.mapping = "azerty";
        } else {
            this.mapping = ᐃⵠⵠΔ.get("starve_mapping") ? ᐃⵠⵠΔ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            vx.ΔⲆᐃⲆⲆᐃⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ΔⲆᐃⲆⲆᐃⲆ = function () {
            vx.ΔⲆᐃⲆⲆᐃⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ᐃⵠⵠΔ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ⵠⲆⲆⵠⲆᐃⲆ = function () {
            vx.ⵠⲆⲆⵠⲆᐃⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ᐃⵠⵠΔ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ΔⵠⲆⵠⵠⲆᐃ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                y: 0,
                x: 0
            },
            ⵠᐃᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        g();
        this.unlock = {};
        this.unlock.ᐃΔΔΔ = [];
        this.unlock.ΔⵠⵠⲆⵠ = [];
        this.unlock.ᐃᐃΔⵠⵠ = [];
        this.unlock.ⲆⵠΔⲆΔ = [];
        this.unlock.ᐃᐃⵠΔⵠ = [];
        this.unlock.ΔⵠⲆᐃⵠ = [];
        this.ᐃΔⲆⲆΔⵠⵠ = 0;
        this.ΔⲆⵠⵠⵠΔⵠ = a;
        a();
        this.ⲆⲆΔⲆΔ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                x: 0,
                y: 0
            },
            ⵠᐃᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var i;
        var m = 0;
        function n() {
            H.ⵠᐃᐃ();
            if (++m == 30) {
                H.ⵠᐃⵠΔⲆᐃΔ();
                H.ⲆᐃᐃᐃΔⵠΔ = _q;
                H.ⵠᐃᐃ();
                return;
            }
            cj.setTimeout(n, 33);
        }
        this.ΔΔⵠⲆΔ = function (a) {
            i = a;
            H.ΔᐃΔⵠΔⲆⵠ();
            H.ⲆᐃᐃᐃΔⵠΔ = 0;
            l = -1;
            o();
        };
        var l = -1;
        function o() {
            H.ⵠᐃᐃ();
            if (++l == 30) {
                ᐃⵠⵠΔ.set("starve_nickname", H.ΔⲆᐃᐃΔ.input.value, {
                    expires: 30
                });
                H.ΔⲆᐃᐃΔ.style.display = "none";
                H.ⵠⵠΔΔⲆ.style.display = "none";
                H.ⲆⵠⵠⲆⲆᐃⵠ.style.display = "none";
                H.ΔⵠⲆⵠⵠⲆᐃ.style.display = "none";
                H.ⲆⲆΔⲆΔ.style.display = "none";
                H.stop();
                i();
                return;
            }
            cj.setTimeout(o, 33);
        }
        this.ⵠⲆⲆΔⲆ = ws;
        this.stop = function () {
            this.ⵠⲆⲆΔⲆ = false;
        };
        this.ΔⲆⲆⲆᐃ = function () {
            Dx();
            document.getElementById("game_body").style.backgroundColor = Er.ᐃΔᐃᐃΔ[px.time];
            H.ΔⲆᐃᐃΔ.style.display = "inline-block";
            H.ⵠⵠΔΔⲆ.style.display = "inline-block";
            H.ⲆⵠⵠⲆⲆᐃⵠ.style.display = "inline-block";
            H.ΔⵠⲆⵠⵠⲆᐃ.style.display = "inline-block";
            H.ⲆⲆΔⲆΔ.style.display = "inline-block";
            H.waiting = false;
            H.ⵠⲆⲆΔⲆ = Aq;
            l = -1;
            m = 0;
            n();
        };
        this.ΔⲆᐃⵠᐃⲆᐃ = function (a, b) {
            b = b < 0 ? -b : b;
            if ((a.position & ba) === ba) {
                if ((a.position & Y) === Y) {
                    a.translate.x = lo + a.translate.ᐃⵠΔⵠⵠ - b;
                } else if ((a.position & Z) === Z) {
                    a.translate.x = lo + a.translate.ᐃⵠΔⵠⵠ + b;
                } else {
                    a.translate.x = lo + a.translate.ᐃⵠΔⵠⵠ;
                }
            } else if ((a.position & Y) === Y) {
                a.translate.x = a.translate.ᐃⵠΔⵠⵠ - b;
            } else if (Z === (a.position & Z)) {
                a.translate.x = no - a.translate.ᐃⵠΔⵠⵠ + b;
            } else {
                a.translate.x = a.translate.ᐃⵠΔⵠⵠ;
            }
            if ((a.position & ca) === ca) {
                if (_ === (a.position & _)) {
                    a.translate.y = hq + a.translate.ⲆΔⵠⵠΔ - b;
                } else if ((a.position & aa) === aa) {
                    a.translate.y = hq + a.translate.ⲆΔⵠⵠΔ + b;
                } else {
                    a.translate.y = hq + a.translate.ⲆΔⵠⵠΔ;
                }
            } else if ((a.position & _) === _) {
                a.translate.y = a.translate.ⲆΔⵠⵠΔ - b;
            } else if (aa === (a.position & aa)) {
                a.translate.y = so + a.translate.ⲆΔⵠⵠΔ + b;
            } else {
                a.translate.y = a.translate.ⲆΔⵠⵠΔ;
            }
            if (a.style !== undefined) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ⵠᐃᐃ = function () {
            var a = 0;
            if (m != 30 || l != -1) {
                if (m != 30) {
                    a = 1500 / (m + 1) - 50;
                }
                if (l != -1) {
                    a = -(1750 / (30 - l + 1) - 48);
                }
            }
            for (var b = 0; this.ⲆΔΔΔ.length > b; b++) {
                this.ΔⲆᐃⵠᐃⲆᐃ(this.ⲆΔΔΔ[b], a);
            }
            for (b = 0; b < this.buttons.length; b++) {
                this.ΔⲆᐃⵠᐃⲆᐃ(this.buttons[b].info, a);
            }
            for (b = 0; b < this.ⵠⲆⵠⵠᐃ.length; b++) {
                this.ΔⲆᐃⵠᐃⲆᐃ(this.ⵠⲆⵠⵠᐃ[b], a);
            }
            this.ΔΔᐃⲆⲆᐃΔ.translate.x = (no - this.ΔΔᐃⲆⲆᐃΔ.ⵠΔ.width) / 2;
            this.ΔΔᐃⲆⲆᐃΔ.translate.y = 0;
            this.ⲆⵠⵠⲆⲆᐃⵠ.translate.x = no - 450;
            this.ⲆⵠⵠⲆⲆᐃⵠ.translate.y = so - 40;
            this.ΔⵠⲆⵠⵠⲆᐃ.translate.x = no - 340;
            this.ΔⵠⲆⵠⵠⲆᐃ.translate.y = so - 25;
            this.ⲆⲆΔⲆΔ.translate.x = no - 320;
            this.ⲆⲆΔⲆΔ.translate.y = 80;
            if (m != 30 || l != -1) {
                var c = 0;
                if (m != 30) {
                    c = 1500 / (m + 1) - 50;
                }
                if (l != -1) {
                    c = -(1750 / (30 - l + 1) - 48);
                }
                this.ΔΔᐃⲆⲆᐃΔ.translate.y -= c > 0 ? c : -c;
                this.ⲆⵠⵠⲆⲆᐃⵠ.translate.y -= c < 0 ? c : -c;
                this.ΔⵠⲆⵠⵠⲆᐃ.translate.y -= c < 0 ? c : -c;
            }
            this.ⲆⵠⵠⲆⲆᐃⵠ.ⵠᐃᐃ();
            this.ΔⵠⲆⵠⵠⲆᐃ.ⵠᐃᐃ();
            this.ⲆⲆΔⲆΔ.ⵠᐃᐃ();
        };
        this.ΔᐃᐃⵠⵠΔⵠ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; b.length > f; f++) {
                var g = b[f][0];
                var h = b[f][1] * Math.PI / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, false);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ΔᐃΔΔΔⲆΔᐃⵠ = function () {
            this.ⵠΔΔⵠᐃᐃᐃ = document.getElementById("account_nickname_input").value;
            if (this.ⵠᐃⵠᐃᐃⵠᐃ !== this.ⵠΔΔⵠᐃᐃᐃ) {
                this.ⵠᐃⵠᐃᐃⵠᐃ = this.ⵠΔΔⵠᐃᐃᐃ;
                this.ΔΔⵠⲆⲆΔΔ = cf(this.ⵠΔΔⵠᐃᐃᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.ⵠᐃΔⵠ = function () {
            kp();
            nx.ⲆⲆⵠⵠⲆᐃᐃ = og.ᐃⵠⵠⲆⲆⲆⵠ(nx.ⲆⲆⵠⵠⲆᐃᐃ, nx.ᐃⵠⲆΔⲆⲆΔ, 0.03);
            this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ].translate.x = this.ⲆΔΔΔ[0].translate.x + -72 + nx.ⲆⲆⵠⵠⲆᐃᐃ * 165;
            this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ].translate.ᐃⵠΔⵠⵠ = this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ].translate.x;
            this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ].translate.y = this.ⲆΔΔΔ[0].translate.y + 30;
            this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ].translate.ⲆΔⵠⵠΔ = this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ].translate.y;
            for (var b = 2; b < this.ⲆΔΔΔ.length; b++) {
                if (this.ⲆΔΔΔ[b].active === ia) {
                    this.ⲆΔΔΔ[b].ⵠᐃΔⵠ(j);
                }
            }
            var n = this.ΔΔⲆΔᐃ - Date.now();
            if (n > 0) {
                var w = Math.floor(n / 60000);
                var T = Math.floor(w / 60);
                if ((w %= 60) !== this.ⲆⲆΔΔⲆΔⵠ) {
                    this.ⲆⲆΔΔⲆΔⵠ = w;
                    w = w < 10 ? "0" + w : "" + w;
                    H.ⵠⲆⵠᐃΔᐃⵠ = cf(w, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (T !== this.ⲆᐃᐃᐃⲆⲆⵠ) {
                    this.ⲆᐃᐃᐃⲆⲆⵠ = T;
                    T = T < 10 ? "0" + T : "" + T;
                    H.ᐃⲆᐃⵠΔⵠΔ = cf(T, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ⲆΔΔΔ[ⵠⲆΔΔⵠΔΔ]).ⵠᐃΔⵠ(j);
                var V = this.ᐃⲆᐃⵠΔⵠΔ;
                Rp(j, V, W.translate.x - V.width / 4 + 182, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
                V = this.ⵠⲆⵠᐃΔᐃⵠ;
                Rp(j, V, W.translate.x - V.width / 4 + 251, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
            }
            if ((n = this.ⵠⲆᐃⵠⲆⵠⵠ - Date.now()) > 0) {
                w = Math.floor(n / 60000);
                T = Math.floor(w / 60);
                var W;
                var X = Math.floor(T / 24);
                T %= 24;
                if ((w %= 60) !== this.ⵠΔᐃⲆⲆΔΔ) {
                    this.ⵠΔᐃⲆⲆΔΔ = w;
                    w = w < 10 ? "0" + w : "" + w;
                    H.ᐃⲆᐃΔⵠᐃⵠ = cf(w, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ΔⲆᐃⲆⵠⲆᐃ !== T) {
                    this.ΔⲆᐃⲆⵠⲆᐃ = T;
                    T = T < 10 ? "0" + T : "" + T;
                    H.ΔⲆⲆⲆΔᐃΔ = cf(T, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (X !== this.ⲆⲆᐃΔΔⵠⲆ) {
                    this.ⲆⲆᐃΔΔⵠⲆ = X;
                    X = X < 10 ? "0" + X : "" + X;
                    H.ⲆᐃΔᐃᐃᐃⲆ = cf(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ⲆΔΔΔ[ᐃΔⵠᐃⵠᐃⵠ]).ⵠᐃΔⵠ(j);
                V = this.ⲆᐃΔᐃᐃᐃⲆ;
                Rp(j, V, W.translate.x - V.width / 4 + 113, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
                V = this.ΔⲆⲆⲆΔᐃΔ;
                Rp(j, V, W.translate.x - V.width / 4 + 182, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
                V = this.ᐃⲆᐃΔⵠᐃⵠ;
                Rp(j, V, W.translate.x - V.width / 4 + 251, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
            }
            if (t === (this.ΔⵠΔⲆⵠ & t)) {
                this.buttons[ΔⲆⲆⲆⵠⵠΔ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & y) === y) {
                this.buttons[ᐃⵠⲆᐃΔⲆΔ].info.state = vf;
            } else if (K === (this.ΔⵠΔⲆⵠ & K)) {
                this.buttons[ᐃⵠⲆΔⲆᐃⵠ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & p) === p) {
                this.buttons[ᐃⵠⵠᐃⲆᐃΔ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & z) === z) {
                this.buttons[ΔⵠⲆⵠⲆΔᐃ].info.state = vf;
            } else if (C === (this.ΔⵠΔⲆⵠ & C)) {
                this.buttons[ΔⲆⵠⵠΔⲆΔ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & f) === f || (this.ΔⵠΔⲆⵠ & k) === k || (this.ΔⵠΔⲆⵠ & x) === x || (this.ΔⵠΔⲆⵠ & A) === A || B === (this.ΔⵠΔⲆⵠ & B) || E === (this.ΔⵠΔⲆⵠ & E) || D === (this.ΔⵠΔⲆⵠ & D)) {
                this.buttons[ᐃⲆΔⵠⲆⲆⲆ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & I) === I || (this.ΔⵠΔⲆⵠ & M) === M || (this.ΔⵠΔⲆⵠ & J) === J || (this.ΔⵠΔⲆⵠ & F) === F || (this.ΔⵠΔⲆⵠ & Q) === Q || G === (this.ΔⵠΔⲆⵠ & G)) {
                this.buttons[ᐃⵠⲆΔⲆᐃⵠ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & N) === N || q === (this.ΔⵠΔⲆⵠ & q) || R === (this.ΔⵠΔⲆⵠ & R)) {
                this.buttons[ⵠΔⵠᐃⵠΔᐃ].info.state = vf;
            } else if ((this.ΔⵠΔⲆⵠ & S) === S) {
                this.buttons[ᐃⵠⵠᐃⲆᐃΔ].info.state = vf;
            }
            if (y === (this.ΔⵠΔⲆⵠ & y)) {
                if (this.ⵠᐃΔⵠᐃⵠⲆ === this.ΔⲆΔᐃᐃⵠᐃ) {
                    this.ⵠⵠⵠΔⲆᐃⵠ = this.ᐃᐃᐃᐃΔⲆᐃ;
                    this.buttons[this.ᐃᐃᐃᐃΔⲆᐃ].info.active = ha;
                    this.buttons[this.ΔⲆⲆᐃⵠⵠⵠ].info.active = ha;
                    this.buttons[this.ⵠᐃΔⵠΔΔᐃ].info.active = ha;
                } else {
                    this.buttons[this.ᐃᐃᐃᐃΔⲆᐃ].info.active = ia;
                    this.buttons[this.ΔⲆⲆᐃⵠⵠⵠ].info.active = ia;
                    this.buttons[this.ⵠᐃΔⵠΔΔᐃ].info.active = ia;
                }
                if (this.ΔⲆΔᐃᐃⵠᐃ === this.ⲆⲆᐃᐃⵠᐃᐃ) {
                    this.buttons[this.ⲆⲆᐃᐃⵠᐃᐃ].info.state = vf;
                } else if (this.ΔⵠΔΔⵠⲆΔ === this.ΔⲆΔᐃᐃⵠᐃ) {
                    this.buttons[this.ΔⵠΔΔⵠⲆΔ].info.state = vf;
                } else if (this.ⵠᐃΔⵠᐃⵠⲆ === this.ΔⲆΔᐃᐃⵠᐃ) {
                    this.buttons[this.ⵠᐃΔⵠᐃⵠⲆ].info.state = vf;
                } else if (this.ⵠⵠᐃΔⵠⵠⵠ === this.ΔⲆΔᐃᐃⵠᐃ) {
                    this.buttons[this.ⵠⵠᐃΔⵠⵠⵠ].info.state = vf;
                } else if (this.ⵠⵠᐃΔΔⵠⵠ === this.ΔⲆΔᐃᐃⵠᐃ) {
                    this.buttons[this.ⵠⵠᐃΔΔⵠⵠ].info.state = vf;
                }
                if (this.ᐃᐃᐃᐃΔⲆᐃ === this.ⵠⵠⵠΔⲆᐃⵠ) {
                    this.buttons[this.ᐃᐃᐃᐃΔⲆᐃ].info.state = vf;
                } else if (this.ΔⲆⲆᐃⵠⵠⵠ === this.ⵠⵠⵠΔⲆᐃⵠ) {
                    this.buttons[this.ΔⲆⲆᐃⵠⵠⵠ].info.state = vf;
                } else if (this.ⵠᐃΔⵠΔΔᐃ === this.ⵠⵠⵠΔⲆᐃⵠ) {
                    this.buttons[this.ⵠᐃΔⵠΔΔᐃ].info.state = vf;
                }
                if (this.ΔΔΔΔᐃΔᐃ === this.ⵠⲆᐃⵠⵠΔᐃ) {
                    this.buttons[this.ⵠⲆᐃⵠⵠΔᐃ].info.state = vf;
                } else if (this.ΔΔΔΔᐃΔᐃ === this.ⲆⲆᐃᐃΔᐃΔ) {
                    this.buttons[this.ⲆⲆᐃᐃΔᐃΔ].info.state = vf;
                } else if (this.ΔΔΔΔᐃΔᐃ === this.ΔᐃⲆⲆᐃᐃⵠ) {
                    this.buttons[this.ΔᐃⲆⲆᐃᐃⵠ].info.state = vf;
                }
                if (this.ᐃᐃⲆⲆΔᐃⵠ === this.ⲆᐃⲆⲆⲆΔⵠ) {
                    this.buttons[this.ⲆᐃⲆⲆⲆΔⵠ].info.state = vf;
                } else if (this.ᐃᐃᐃⵠᐃⲆⵠ === this.ᐃᐃⲆⲆΔᐃⵠ) {
                    this.buttons[this.ᐃᐃᐃⵠᐃⲆⵠ].info.state = vf;
                } else if (this.ᐃᐃⲆⲆΔᐃⵠ === this.ⵠⲆΔⵠᐃᐃⵠ) {
                    this.buttons[this.ⵠⲆΔⵠᐃᐃⵠ].info.state = vf;
                } else if (this.ᐃᐃⲆⲆΔᐃⵠ === this.ⲆΔⲆⵠⲆⵠⲆ) {
                    this.buttons[this.ⲆΔⲆⵠⲆⵠⲆ].info.state = vf;
                } else if (this.ⲆᐃⵠⲆⵠᐃᐃ === this.ᐃᐃⲆⲆΔᐃⵠ) {
                    this.buttons[this.ⲆᐃⵠⲆⵠᐃᐃ].info.state = vf;
                } else if (this.ᐃᐃⲆⵠᐃᐃⵠ === this.ᐃᐃⲆⲆΔᐃⵠ) {
                    this.buttons[this.ᐃᐃⲆⵠᐃᐃⵠ].info.state = vf;
                }
            }
            if ((this.ΔⵠΔⲆⵠ & p) === p) {
                if (this.ⵠⲆⵠᐃⵠᐃΔ === -1) {
                    this.buttons[Aa].info.state = vf;
                } else if (this.ⵠⲆⵠᐃⵠᐃΔ === 0) {
                    this.buttons[Ba].info.state = vf;
                } else if (this.ⵠⲆⵠᐃⵠᐃΔ === 2) {
                    this.buttons[Da].info.state = vf;
                } else if (this.ⵠⲆⵠᐃⵠᐃΔ === 3) {
                    this.buttons[Ea].info.state = vf;
                } else if (this.ⵠⲆⵠᐃⵠᐃΔ === 4) {
                    this.buttons[Ca].info.state = vf;
                }
                if (this.ⵠᐃⲆΔᐃΔΔ === 0) {
                    this.buttons[ta].info.state = vf;
                } else if (this.ⵠᐃⲆΔᐃΔΔ === 1) {
                    this.buttons[ua].info.state = vf;
                } else if (this.ⵠᐃⲆΔᐃΔΔ === 2) {
                    this.buttons[wa].info.state = vf;
                } else if (this.ⵠᐃⲆΔᐃΔΔ === 3) {
                    this.buttons[xa].info.state = vf;
                } else if (this.ⵠᐃⲆΔᐃΔΔ === 4) {
                    this.buttons[ya].info.state = vf;
                } else if (this.ⵠᐃⲆΔᐃΔΔ === 5) {
                    this.buttons[za].info.state = vf;
                }
            }
            if ((this.ΔⵠΔⲆⵠ & t) === t && ⲆᐃⲆᐃ.ᐃΔⵠᐃⵠᐃᐃ === 0) {
                if (this.buttons[ma].ᐃΔⵠΔⵠⵠⲆ(wx.ⵠⲆΔΔ)) {
                    this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + yx * 1.5);
                } else {
                    this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - yx * 1.5);
                }
                if (this.buttons[na].ᐃΔⵠΔⵠⵠⲆ(wx.ⵠⲆΔΔ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + yx * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - yx * 1.5);
                }
                if (this.buttons[oa].ᐃΔⵠΔⵠⵠⲆ(wx.ⵠⲆΔΔ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + yx * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - yx * 1.5);
                }
                if (this.buttons[ra].ᐃΔⵠΔⵠⵠⲆ(wx.ⵠⲆΔΔ)) {
                    this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + yx * 1.5);
                } else {
                    this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - yx * 1.5);
                }
                if (this.buttons[pa].ᐃΔⵠΔⵠⵠⲆ(wx.ⵠⲆΔΔ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + yx * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - yx * 1.5);
                }
                if (this.buttons[qa].ᐃΔⵠΔⵠⵠⲆ(wx.ⵠⲆΔΔ)) {
                    this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + yx * 1.5);
                } else {
                    this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - yx * 1.5);
                }
            }
            var Y = 1;
            if ((this.ΔⵠΔⲆⵠ & (k | x | A | B | E | D)) > 1) {
                V = Mh.ⵠⵠᐃᐃΔΔⵠ;
                j.save();
                j.translate(lo, la + V.height / 4);
                if (this.Δⵠᐃⵠᐃ === 1) {
                    this.ΔᐃⵠᐃⵠⲆⵠ += yx / 3;
                    Y = this.ⵠᐃΔⵠⵠᐃⵠ - 100 / Math.pow(1 + this.ΔᐃⵠᐃⵠⲆⵠ, 1 + this.ΔᐃⵠᐃⵠⲆⵠ);
                    j.rotate(Y);
                }
                Rp(j, V, -V.width / 4, -V.height / 4, V.width / 2, V.height / 2);
                j.restore();
            }
            if (ⲆᐃⲆᐃ.ᐃΔⵠᐃⵠᐃᐃ === 0) {
                if (ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ === 0) {
                    this.buttons[ma].info.state = vf;
                } else if (ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ === 4) {
                    this.buttons[na].info.state = vf;
                } else if (ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ === 2) {
                    this.buttons[pa].info.state = vf;
                } else if (ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ === 3) {
                    this.buttons[qa].info.state = vf;
                } else if (ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ === 6) {
                    this.buttons[oa].info.state = vf;
                } else if (ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ === 7) {
                    this.buttons[ra].info.state = vf;
                }
            }
            for (b = 1; this.buttons.length > b; b++) {
                if (ia === this.buttons[b].info.active) {
                    this.buttons[b].ⵠᐃΔⵠ(j);
                }
            }
            this.ⲆΔΔΔ[0].ⵠᐃΔⵠ(j);
            if ((this.ΔⵠΔⲆⵠ & (O | L)) > 0) {
                V = this.ΔΔⵠⲆⲆΔΔ;
                Rp(j, V, lo - V.width / 4, 138, V.width / 2, V.height / 2);
            }
            var Z = Math.max(1, Math.min(18, Math.floor((nx.ⵠⲆΔⲆΔ + 3) / 2)));
            this.ⲆΔΔΔ[Z].active = ia;
            this.ⲆΔΔΔ[Z].ⵠᐃΔⵠ(j);
            this.ⲆΔΔΔ[Z].active = ha;
            this.buttons[0].ⵠᐃΔⵠ(j);
            if ((this.ΔⵠΔⲆⵠ & (K | M | F | I | Q)) > 1) {
                var g = (this.ΔⵠΔⲆⵠ & (M | F | I | Q)) > 1 ? -190 : 0;
                V = ᐃⵠ[29][this.ΔⵠⵠⲆⵠ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 + g, 183, V.width / 2, V.height / 2);
                this.Ⲇⵠᐃᐃ = (this.Ⲇⵠᐃᐃ + yx * 1000) % 2000;
                var u = (this.Ⲇⵠᐃᐃ < 1000) * 4.5 ? this.Ⲇⵠᐃᐃ / 1000 : (2000 - this.Ⲇⵠᐃᐃ) / 1000;
                V = ᐃⵠ[28][this.ᐃᐃΔⵠⵠ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 - 62 + u + g, 240, V.width / 2, V.height / 2);
                V = ᐃⵠ[7][this.ᐃΔΔΔ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 - 54 + u + g, 272, V.width / 2, V.height / 2);
                Rp(j, V, lo - V.width / 4 + 54 - u + g, 272, V.width / 2, V.height / 2);
                V = ᐃⵠ[255][this.ᐃΔΔΔ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 + g, 222, V.width / 2, V.height / 2);
                V = ᐃⵠ[796][this.ΔⵠⲆᐃⵠ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 + g, 222, V.width / 2, V.height / 2);
            }
            if (K === (this.ΔⵠΔⲆⵠ & K)) {
                V = ᐃⵠ[250][this.ⲆⵠΔⲆΔ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 - 61, 406 - V.height / 4, V.width / 2, V.height / 2);
                V = ᐃⵠ[250][this.ᐃᐃⵠΔⵠ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 + 53, 406 - V.height / 4, V.width / 2, V.height / 2);
            }
            if ((this.ΔⵠΔⲆⵠ & J) === J) {
                V = ᐃⵠ[250][this.ᐃᐃⵠΔⵠ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 - 200, 268 - V.height / 4, V.width / 2, V.height / 2);
            }
            if (G === (this.ΔⵠΔⲆⵠ & G)) {
                V = ᐃⵠ[250][this.ⲆⵠΔⲆΔ][this.ᐃΔⲆⲆΔⵠⵠ];
                Rp(j, V, lo - V.width / 4 - 200, 268 - V.height / 4, V.width / 2, V.height / 2);
            }
            if ((this.ΔⵠΔⲆⵠ & (M | F | I | Q | J | G)) > 1) {
                for (b = 1; b < this.buttons.length; b++) {
                    if ((this.buttons[b].view & this.ΔⵠΔⲆⵠ) !== 0) {
                        var _ = this.buttons[b].info;
                        if (_.ⲆᐃⲆᐃⲆᐃᐃ >= 0) {
                            V = _.ᐃΔΔⵠⲆᐃⲆΔΔ[_.ⲆᐃⲆᐃⲆᐃᐃ].ᐃᐃΔ;
                            Rp(j, V, _.translate.x - V.width / 8 + 44.5, _.translate.y - V.height / 8 + 45.5, V.width / 4, V.height / 4);
                            if (_.ᐃᐃᐃⵠⲆᐃᐃ !== 1) {
                                V = Mh.ⵠᐃΔⲆΔΔΔ;
                                Rp(j, V, _.translate.x - V.width / 4 + 44.5, _.translate.y - V.height / 4 + 44.5, V.width / 2, V.height / 2);
                            }
                        }
                    }
                }
                V = this.ᐃⲆᐃᐃΔᐃⵠ;
                Rp(j, V, lo - 312, 375, V.width / 2, V.height / 2);
                V = this.ᐃΔⵠΔΔⵠⲆ;
                Rp(j, V, lo - 312, 395, V.width / 2, V.height / 2);
            }
            if (this.ΔᐃᐃⵠΔ !== this.ᐃⵠᐃⲆⵠⵠᐃ) {
                this.ᐃⵠᐃⲆⵠⵠᐃ = this.ΔᐃᐃⵠΔ;
                this.ⵠⵠⵠᐃⲆⵠΔ = cf("" + this.ΔᐃᐃⵠΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Rp(j, this.ⵠⵠⵠᐃⲆⵠΔ, this.ⲆΔΔΔ[0].translate.x + 350, 15, this.ⵠⵠⵠᐃⲆⵠΔ.w2, this.ⵠⵠⵠᐃⲆⵠΔ.ΔΔⲆⲆⵠ);
            if (this.ⵠⲆᐃⵠᐃⲆⵠ !== this.ⵠⲆΔⲆΔ) {
                this.ⵠⲆᐃⵠᐃⲆⵠ = this.ⵠⲆΔⲆΔ;
                this.ⲆⵠΔΔᐃⲆⵠ = cf("LVL " + (this.ⵠⲆΔⲆΔ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, oh, undefined, Ta, undefined, "#3F3019", 20);
            }
            Rp(j, this.ⲆⵠΔΔᐃⲆⵠ, this.ⲆΔΔΔ[0].translate.x + 94, 0, this.ⲆⵠΔΔᐃⲆⵠ.w2, this.ⲆⵠΔΔᐃⲆⵠ.ΔΔⲆⲆⵠ);
            if (ⲆᐃⲆᐃ.ᐃΔⵠᐃⵠᐃᐃ === 0) {
                var aa = this.buttons[ma].hint;
                if (aa > 0) {
                    V = Mh.ⵠᐃᐃⵠΔⵠᐃ;
                    Rp(j, V, lo - V.width / 4, -36 - V.height * og.ⲆⵠᐃΔᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[na].hint) > 0) {
                    V = Mh.ⲆΔⵠⵠΔΔⲆ;
                    Rp(j, V, lo - V.width / 4, -36 - V.height * og.ⲆⵠᐃΔᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[oa].hint) > 0) {
                    V = Mh.ⲆⵠⲆⲆⵠⲆⵠ;
                    Rp(j, V, lo - V.width / 4, -36 - og.ⲆⵠᐃΔᐃ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
                }
                aa = this.buttons[ra].hint;
                if (aa > 0) {
                    V = Mh.ⲆᐃᐃΔⲆᐃΔ;
                    Rp(j, V, lo - V.width / 4, -36 - og.ⲆⵠᐃΔᐃ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[qa].hint) > 0) {
                    V = Mh.ΔᐃΔⵠᐃΔΔ;
                    Rp(j, V, lo - V.width / 4, -36 - V.height * og.ⲆⵠᐃΔᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[pa].hint) > 0) {
                    V = Mh.ⵠΔⲆᐃⵠⲆⵠ;
                    Rp(j, V, lo - V.width / 4, -36 - V.height * og.ⲆⵠᐃΔᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
                }
            }
            if (this.Δⵠᐃⵠᐃ === 1 && Math.abs(Y - this.ⵠᐃΔⵠⵠᐃⵠ) < 0.006) {
                j.globalAlpha = Math.min(1, this.ΔⲆᐃΔⲆΔⲆ * 3);
                V = Mh.ΔΔΔΔΔⲆΔ;
                j.save();
                j.translate(lo, 260);
                this.ΔⲆᐃΔⲆΔⲆ += yx;
                j.rotate(this.ΔⲆᐃΔⲆΔⲆ);
                Rp(j, V, -V.width / 2, -V.height / 2, V.width, V.height);
                j.restore();
                u = 1.05 + Math.cos(this.ΔⲆᐃΔⲆΔⲆ * 5) * 0.05;
                if (this.ⲆᐃⲆᐃⲆᐃⵠ === 0) {
                    var ba = u * (V = bj.ΔⲆⵠΔΔ[this.ᐃΔⵠⵠⲆⲆΔ].ᐃᐃΔ).width;
                    var ca = V.height * u;
                    Rp(j, V, lo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⲆᐃⲆᐃⲆᐃⵠ === 1) {
                    ba = (V = bj.ΔⲆⵠΔΔ[0].ᐃᐃΔ).width * u;
                    ca = u * V.height;
                    Rp(j, V, lo - ba / 2, 260 - ca / 2, ba, ca);
                    ba = (V = bj.ΔⵠᐃⲆⲆ[this.ᐃΔⵠⵠⲆⲆΔ].ᐃᐃΔ).width * u;
                    ca = V.height * u;
                    Rp(j, V, lo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⲆᐃⲆᐃⲆᐃⵠ === 2) {
                    ba = u * (V = bj.ΔⵠᐃΔ[this.ᐃΔⵠⵠⲆⲆΔ].ᐃᐃΔ).width;
                    ca = V.height * u;
                    Rp(j, V, lo - ba / 2, 180 - ca / 2, ba, ca);
                    ba = (V = bj.ΔⲆⵠΔΔ[0].ᐃᐃΔ).width * u;
                    ca = u * V.height;
                    Rp(j, V, lo - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⲆᐃⲆᐃⲆᐃⵠ === 3) {
                    ba = (V = bj.ΔⲆᐃⵠⲆ[this.ᐃΔⵠⵠⲆⲆΔ].ᐃᐃΔ).width * u;
                    ca = V.height * u;
                    j.save();
                    j.translate(lo, 260);
                    j.rotate(Math.PI);
                    Rp(j, V, -ba / 2, -ca / 2, ba, ca);
                    j.restore();
                } else if (this.ⲆᐃⲆᐃⲆᐃⵠ === 4) {
                    ba = (V = bj.ΔⵠⵠΔᐃ[this.ᐃΔⵠⵠⲆⲆΔ].ᐃᐃΔ).width * u;
                    ca = u * V.height;
                    Rp(j, V, lo - ba / 2, 260 - ca / 2, ba, ca);
                }
                V = this.ΔⲆᐃⲆᐃⵠⲆ;
                Rp(j, V, lo - V.width / 4, 340, V.width / 2, V.height / 2);
                V = this.ⵠᐃⵠⲆΔⲆᐃ;
                Rp(j, V, lo - V.width / 4, 365, V.width / 2, V.height / 2);
                if (this.ΔⲆᐃΔⲆΔⲆ > 6) {
                    this.Δⵠᐃⵠᐃ = 0;
                    U(f);
                }
                j.globalAlpha = 1;
            }
            rx.alert.ⵠᐃΔⵠ("#FFF", "#000");
            if (H.waiting) {
                this.ΔΔᐃⲆⲆᐃΔ.ⵠᐃΔⵠ();
            }
        };
        var d = 0;
        var t = Math.pow(2, d++);
        var p = Math.pow(2, d++);
        this.ⵠᐃⲆᐃΔ = p;
        var C = Math.pow(2, d++);
        var K = Math.pow(2, d++);
        var f = Math.pow(2, d++);
        var z = Math.pow(2, d++);
        var y = Math.pow(2, d++);
        var r = Math.pow(2, d++);
        this.ⵠⲆⲆⲆⵠ = r;
        var v = Math.pow(2, d++);
        var w = Math.pow(2, d++);
        var k = Math.pow(2, d++);
        var x = Math.pow(2, d++);
        var A = Math.pow(2, d++);
        var B = Math.pow(2, d++);
        var E = Math.pow(2, d++);
        var D = Math.pow(2, d++);
        var I = Math.pow(2, d++);
        var J = Math.pow(2, d++);
        var M = Math.pow(2, d++);
        var F = Math.pow(2, d++);
        var Q = Math.pow(2, d++);
        var G = Math.pow(2, d++);
        var L = Math.pow(2, d++);
        var O = Math.pow(2, d++);
        var N = Math.pow(2, d++);
        this.ⲆΔᐃⵠⲆ = N;
        var q = Math.pow(2, d++);
        this.ᐃⲆᐃᐃΔ = q;
        var R = Math.pow(2, d++);
        this.ᐃⵠⲆⲆᐃ = R;
        var S = Math.pow(2, d++);
        function P(a, b, c) {
            for (var d = 0; d < H.ⲆΔΔΔ.length; d++) {
                if (H.ⲆΔΔΔ[d].view & a) {
                    H.ⲆΔΔΔ[d].active = b;
                }
            }
            for (d = 0; d < H.buttons.length; d++) {
                if (H.buttons[d].view & a) {
                    H.buttons[d].info.active = b;
                }
            }
            for (d = 0; d < H.ⵠⲆⵠⵠᐃ.length; d++) {
                if (H.ⵠⲆⵠⵠᐃ[d].view & a) {
                    H.ⵠⲆⵠⵠᐃ[d].style.display = c;
                }
            }
        }
        this.ΔⵠΔⲆⵠ = t;
        function T() {
            var b = Number(ᐃⵠⵠΔ.get("starve_crate"));
            var c = Number(ᐃⵠⵠΔ.get("starve_dead"));
            var d = Number(ᐃⵠⵠΔ.get("starve_book"));
            var e = Number(ᐃⵠⵠΔ.get("starve_bag"));
            var f = Number(ᐃⵠⵠΔ.get("starve_skin"));
            var g = Number(ᐃⵠⵠΔ.get("starve_accessory"));
            if (nx.unlock.ᐃΔΔΔ[nx.ᐃΔΔΔ] <= 0) {
                nx.ᐃΔΔΔ = nx.unlock.ᐃΔΔΔ[f] > 0 ? f : 0;
            }
            if (nx.unlock.ᐃᐃΔⵠⵠ[nx.ᐃᐃΔⵠⵠ] <= 0) {
                nx.ᐃᐃΔⵠⵠ = nx.unlock.ᐃᐃΔⵠⵠ[d] > 0 ? d : 0;
            }
            if (nx.unlock.ᐃᐃⵠΔⵠ[nx.ᐃᐃⵠΔⵠ] <= 0) {
                nx.ᐃᐃⵠΔⵠ = nx.unlock.ᐃᐃⵠΔⵠ[c] > 0 ? c : 0;
            }
            if (nx.unlock.ⲆⵠΔⲆΔ[nx.ⲆⵠΔⲆΔ] <= 0) {
                nx.ⲆⵠΔⲆΔ = nx.unlock.ⲆⵠΔⲆΔ[b] > 0 ? b : 0;
            }
            if (nx.unlock.ΔⵠⲆᐃⵠ[nx.ΔⵠⲆᐃⵠ] <= 0) {
                nx.ΔⵠⲆᐃⵠ = nx.unlock.ΔⵠⲆᐃⵠ[g] > 0 ? g : 0;
            }
            if (nx.unlock.ΔⵠⵠⲆⵠ[nx.ΔⵠⵠⲆⵠ] <= 0) {
                nx.ΔⵠⵠⲆⵠ = nx.unlock.ΔⵠⵠⲆⵠ[e] > 0 ? e : 0;
            }
        }
        function U(a) {
            if (H.ⲆᐃᐃᐃΔⵠΔ !== false) {
                P(v, ha, "none");
                P(w, ha, "none");
                T();
                if (H.ΔⵠΔⲆⵠ !== a && H.Δⵠᐃⵠᐃ < 1) {
                    H.ⲆⲆΔⲆΔ.style.display = t === a || f === a || a === p || a === y || a === K || z === a ? "inline-block" : "none";
                    P(H.ΔⵠΔⲆⵠ, ha, "none");
                    H.ΔⵠΔⲆⵠ = a;
                    P(H.ΔⵠΔⲆⵠ, ia, "inline-block");
                }
            }
        }
        function V(a) {
            if (rx.ⵠⲆΔⵠΔᐃᐃ !== undefined && rx.ᐃⵠⵠⵠᐃⵠⵠ !== undefined && rx.ⵠΔΔⵠΔⲆΔ !== undefined) {
                a();
            }
        }
        function W(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== Yd) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== Ze) {
                    c();
                }
            };
            d.send();
        }
        function X() {
            T();
            if (Cx % 2) {
                console.log(undefined);
                ⲆᐃⲆᐃ.connect();
            } else {
                console.log(undefined);
                if (cj.Widget.isBlocked === 1) {
                    cj.Widget.createAdPlayer(ⲆᐃⲆᐃ.connect.bind(ⲆᐃⲆᐃ), ⲆᐃⲆᐃ.connect.bind(ⲆᐃⲆᐃ));
                } else {
                    cj.Widget.preroll();
                    cj.Widget.play = ⲆᐃⲆᐃ.connect.bind(ⲆᐃⲆᐃ);
                }
            }
        }
        this.ᐃΔᐃᐃᐃΔⲆ = 0;
        this.ᐃⵠⲆᐃ = U;
        this.ⵠⵠΔⵠΔⵠⵠ = function (b, a) {
            let c = "0";
            let d = 0;
            if (Qx) {
                c = Qx + hr.ΔⲆⲆⵠΔⲆᐃ();
            }
            if (rx.ⵠⲆΔⵠΔᐃᐃ) {
                V(b);
            } else {
                W(`${Jx}token?id=${c}`, function (c) {
                    if (d === 1) {
                        return;
                    }
                    const e = c.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return cq(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    rx.ⵠⲆΔⵠΔᐃᐃ = f + a;
                    V(b);
                }, function () {
                    if (d !== 1) {
                        if (a === 1) {
                            d = 1;
                            b();
                            return;
                        } else {
                            H.waiting = false;
                            return;
                        }
                    }
                });
            }
            W(`${Kx}get`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return At(a, 26489, 7352, 23793, 13756, 17241);
                }(g));
                rx.ᐃⵠⵠⵠᐃⵠⵠ = f + a;
                rx.ⲆΔⵠᐃᐃⵠⲆ = a;
                V(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        H.waiting = false;
                        return;
                    }
                }
            });
            W(`${Kx}set`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return qr(a, 32062, 32038);
                }(g));
                rx.ⵠΔΔⵠΔⲆΔ = f + a;
                rx.ΔᐃⲆⵠⲆΔⵠᐃΔ = a;
                V(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        H.waiting = vg;
                        return;
                    }
                }
            });
        };
        this.ΔⵠⲆᐃⲆⵠΔ = function () {
            if (H.waiting === false) {
                rx.reconnect.enabled = kk;
                H.waiting = Dj;
                H.ⵠⵠΔⵠΔⵠⵠ(X);
            }
        };
        var Y = 1;
        var Z = 2;
        var _ = 4;
        var aa = 8;
        var ba = 16;
        var ca = 32;
        var da = 1;
        var ea = 0;
        var fa = 1;
        var ha = 0;
        var ia = 1;
        if (cj.innerWidth < 1300) {
            this.ΔⲆᐃᐃΔ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ia,
                position: _ | Y,
                view: t,
                translate: {
                    ᐃⵠΔⵠⵠ: 200,
                    ⲆΔⵠⵠΔ: 184,
                    x: 0,
                    y: 0
                }
            };
        } else {
            this.ΔⲆᐃᐃΔ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ia,
                position: _ | ba,
                view: t,
                translate: {
                    ⲆΔⵠⵠΔ: 184,
                    x: 0,
                    ᐃⵠΔⵠⵠ: -180,
                    y: 0
                }
            };
        }
        this.ΔⲆᐃᐃΔ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !H.waiting && !H.ᐃᐃΔⲆᐃΔⵠᐃⲆ) {
                H.ΔⵠⲆᐃⲆⵠΔ();
            }
        });
        this.ΔⲆᐃᐃΔ.input.value = ᐃⵠⵠΔ.get("starve_nickname") ? ᐃⵠⵠΔ.get("starve_nickname") : "";
        this.ⲆⵠΔⵠⵠᐃⵠΔΔ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: ha,
            position: _ | ba,
            view: p,
            translate: {
                y: 0,
                ᐃⵠΔⵠⵠ: -122,
                ⲆΔⵠⵠΔ: 110,
                x: 0
            }
        };
        if (cj.innerWidth < 1300) {
            this.ⵠⵠΔΔⲆ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ia,
                position: _ | Y,
                view: t,
                translate: {
                    x: 0,
                    ᐃⵠΔⵠⵠ: 208,
                    y: 0,
                    ⲆΔⵠⵠΔ: 225
                }
            };
        } else {
            this.ⵠⵠΔΔⲆ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ia,
                position: _ | ba,
                view: t,
                translate: {
                    x: 0,
                    ᐃⵠΔⵠⵠ: -180,
                    y: 0,
                    ⲆΔⵠⵠΔ: 225
                }
            };
        }
        this.ⵠΔᐃᐃ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: ha,
            position: _ | ba,
            view: y,
            translate: {
                y: 0,
                x: 0,
                ᐃⵠΔⵠⵠ: -294.5,
                ⲆΔⵠⵠΔ: 190
            }
        };
        this.ᐃΔΔⲆⵠⵠⲆⵠⵠ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: ha,
            position: _ | ba,
            view: p,
            translate: {
                y: 0,
                x: 0,
                ᐃⵠΔⵠⵠ: 125,
                ⲆΔⵠⵠΔ: 187
            }
        };
        this.ⲆΔⵠᐃⵠΔⵠΔΔ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: ha,
            position: _ | ba,
            view: R,
            translate: {
                y: 0,
                ⲆΔⵠⵠΔ: 350,
                x: 0,
                ᐃⵠΔⵠⵠ: -220
            }
        };
        d = 0;
        this.ⵠⲆⵠⵠᐃ = [];
        this.ⵠⲆⵠⵠᐃ[d++] = this.ΔⲆᐃᐃΔ;
        this.ⵠⲆⵠⵠᐃ[d++] = this.ⵠⵠΔΔⲆ;
        this.ⵠⲆⵠⵠᐃ[d++] = this.ⵠΔᐃᐃ;
        this.ⵠⲆⵠⵠᐃ[d++] = this.ⲆⵠΔⵠⵠᐃⵠΔΔ;
        this.ⵠⲆⵠⵠᐃ[d++] = this.ᐃΔΔⲆⵠⵠⲆⵠⵠ;
        this.ⵠⲆⵠⵠᐃ[d++] = this.ⲆΔⵠᐃⵠΔⵠΔΔ;
        d = 0;
        this.ⲆΔΔΔ = [];
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⲆᐃⲆΔⵠⲆⵠ, ia, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⲆⵠᐃᐃΔΔᐃ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔⲆⲆⲆᐃⲆΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⵠΔⵠᐃᐃΔᐃ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ᐃⵠⵠΔᐃⲆᐃ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ᐃⵠΔᐃΔⲆΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⵠᐃⲆᐃΔⵠΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔᐃⵠⲆᐃᐃⲆ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⲆⲆᐃⵠᐃⵠᐃ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ᐃⵠⵠⲆΔⲆⵠ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔᐃᐃⲆⵠΔΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔⵠⲆⲆᐃᐃᐃ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⵠΔΔᐃⲆⵠⵠ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⲆⵠⲆΔΔᐃᐃ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔⵠΔⲆΔΔΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ⲆⵠᐃⵠᐃⲆΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ᐃⲆᐃⲆⲆΔΔ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔᐃΔⲆᐃⲆⲆ, ha, 0, 0, Y);
        this.ⲆΔΔΔ[d++] = Cf(Mh.ᐃⵠⵠᐃΔΔⵠ, ha, 0, 0, Y);
        if (cj.innerWidth < 1300) {
            this.ⲆΔΔΔ[d] = Cf(Mh.ΔᐃᐃⵠΔⲆᐃ, ia, 200, 100, _ | Y);
        } else {
            this.ⲆΔΔΔ[d] = Cf(Mh.ΔᐃᐃⵠΔⲆᐃ, ia, -753 / 4, 100, _ | ba);
        }
        this.ⲆΔΔΔ[d++].view = t;
        this.ⲆΔΔΔ[d++] = Cf(Mh.ΔΔⵠⵠᐃⲆⲆ, ia, 403, -10, Z);
        if (cj.innerWidth > 1300) {
            this.ⲆΔΔΔ[d] = Cf(Mh.ΔⲆⵠⵠᐃᐃⲆ, ia, -885 / 4, -159.5, aa | ba);
            this.ⲆΔΔΔ[d++].view = t;
        }
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃΔⵠⲆᐃΔⵠ, ha, -323.25, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = p;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔΔⵠᐃⵠᐃᐃ, ha, -356.25, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = K;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃΔⵠⲆⵠᐃⵠ, ha, -905 / 4, 50, _ | ba);
        this.ⲆΔΔΔ[d++].view = C;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⲆⵠⲆΔΔᐃⵠ, ha, -402, 130, _ | ba);
        this.ⲆΔΔΔ[d++].view = f;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⲆᐃⲆⲆᐃᐃᐃ, ha, -279.25, 130, _ | ba);
        this.ⲆΔΔΔ[d++].view = N;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃⲆΔⲆⵠΔⲆ, ha, -305.5, 130, _ | ba);
        this.ⲆΔΔΔ[d++].view = q;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃⵠⲆⵠᐃΔᐃ, ha, -1222 / 4, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = R;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔᐃⵠⲆᐃⵠⲆ, ha, -Mh.ΔᐃⵠⲆᐃⵠⲆ.width / 4 - 350, -15, _ | ba);
        this.ⲆΔΔΔ[d++].view = S;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔⵠⲆᐃΔⲆⵠ, ha, -1497 / 4, 110, _ | ba);
        this.ⲆΔΔΔ[d++].view = z;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔⲆⲆⵠⲆⵠΔ, ha, -1226 / 4, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = y;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃΔᐃᐃᐃⲆⲆ, ha, -1381 / 4, 80, _ | ba);
        this.ⲆΔΔΔ[d++].view = r;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⵠⲆⲆⵠⵠⲆᐃ, ha, -385.5, 150, _ | ba);
        this.ⲆΔΔΔ[d++].view = k;
        var ja = 3.6;
        var ka = this.ΔᐃᐃⵠⵠΔⵠ([["#25c5d6", ja * 3], ["#e2cf27", ja * 10], ["#afac98", 108], ["#d88e23", ja * 57]]);
        this.ⲆΔΔΔ[d] = Cf(ka, ha, -ka.width / 4, 178, _ | ba);
        this.ⲆΔΔΔ[d++].view = k;
        this.ⵠΔⵠΔᐃⲆᐃⵠⵠ = function (b, c, d) {
            var e;
            H.Δⵠᐃⵠᐃ = 1;
            H.ΔᐃⵠᐃⵠⲆⵠ = 0;
            H.ΔⲆᐃΔⲆΔⲆ = 0;
            H.ⵠᐃΔⵠⵠᐃⵠ = b;
            H.ⲆᐃⲆᐃⲆᐃⵠ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; bj.ΔⲆⵠΔΔ.length > f && d !== bj.ΔⲆⵠΔΔ[f].id; f++);
                e = bj.ΔⲆⵠΔΔ[f];
                H.unlock.ᐃΔΔΔ[f] = 1;
            } else if (c === 1) {
                for (f = 0; f < bj.ΔⵠᐃⲆⲆ.length && bj.ΔⵠᐃⲆⲆ[f].id !== d; f++);
                e = bj.ΔⵠᐃⲆⲆ[f];
                H.unlock.ΔⵠⲆᐃⵠ[f] = 1;
            } else if (c === 2) {
                for (f = 0; f < bj.ΔⵠᐃΔ.length && bj.ΔⵠᐃΔ[f].id !== d; f++);
                e = bj.ΔⵠᐃΔ[f];
                H.unlock.ΔⵠⵠⲆⵠ[f] = 1;
            } else if (c === 3) {
                for (f = 0; f < bj.ΔⲆᐃⵠⲆ.length && bj.ΔⲆᐃⵠⲆ[f].id !== d; f++);
                e = bj.ΔⲆᐃⵠⲆ[f];
                H.unlock.ᐃᐃΔⵠⵠ[f] = 1;
            } else if (c === 4) {
                for (f = 0; bj.ΔⵠⵠΔᐃ.length > f && d !== bj.ΔⵠⵠΔᐃ[f].id; f++);
                e = bj.ΔⵠⵠΔᐃ[f];
                H.unlock.ⲆⵠΔⲆΔ[f] = 1;
                H.unlock.ᐃᐃⵠΔⵠ[f] = 1;
            }
            H.ᐃΔⵠⵠⲆⲆΔ = f;
            H.ⵠᐃⵠⲆΔⲆᐃ = cf("by " + e.ᐃⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, br, undefined, _t, "#000000", 24);
            H.ΔⲆᐃⲆᐃⵠⲆ = cf(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, pt, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
        };
        this.Δⵠᐃⵠᐃ = 0;
        this.ΔᐃⵠᐃⵠⲆⵠ = 0;
        this.ⵠᐃΔⵠⵠᐃⵠ = 0;
        this.ⲆᐃⲆᐃⲆᐃⵠ = 0;
        this.ΔⲆᐃΔⲆΔⲆ = 0;
        this.ⵠᐃⵠⲆΔⲆᐃ = undefined;
        this.ΔⲆᐃⲆᐃⵠⲆ = _t;
        var la = 197;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔⲆᐃΔΔᐃΔ, ha, -1542 / 4, 150, _ | ba);
        this.ⲆΔΔΔ[d++].view = E;
        ka = this.ΔᐃᐃⵠⵠΔⵠ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ja * 57]]);
        this.ⲆΔΔΔ[d] = Cf(ka, ha, -ka.width / 4, 178, _ | ba);
        this.ⲆΔΔΔ[d++].view = E;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃΔΔⵠⵠⲆⵠ, ha, -1542 / 4, 150, _ | ba);
        this.ⲆΔΔΔ[d++].view = A;
        ka = this.ΔᐃᐃⵠⵠΔⵠ([["#d33a2a", ja * 3], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ja * 57]]);
        this.ⲆΔΔΔ[d] = Cf(ka, ha, -ka.width / 4, 178, _ | ba);
        this.ⲆΔΔΔ[d++].view = A;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃΔⵠⵠⵠΔⵠ, ha, -1542 / 4, 150, _ | ba);
        this.ⲆΔΔΔ[d++].view = B;
        ka = this.ΔᐃᐃⵠⵠΔⵠ([["#25c5d6", 10.8], ["#e2cf27", ja * 10], ["#afac98", 108], ["#d88e23", ja * 57]]);
        this.ⲆΔΔΔ[d] = Cf(ka, ha, -ka.width / 4, 178, _ | ba);
        this.ⲆΔΔΔ[d++].view = B;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃᐃΔΔᐃⲆⲆ, ha, -385.5, 150, _ | ba);
        this.ⲆΔΔΔ[d++].view = x;
        ka = this.ΔᐃᐃⵠⵠΔⵠ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ja * 57]]);
        this.ⲆΔΔΔ[d] = Cf(ka, ha, -ka.width / 4, 178, _ | ba);
        this.ⲆΔΔΔ[d++].view = x;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⲆⵠⵠᐃⲆⲆⲆ, ha, -1542 / 4, 150, _ | ba);
        this.ⲆΔΔΔ[d++].view = D;
        ka = this.ΔᐃᐃⵠⵠΔⵠ([["#d33a2a", ja * 3], ["#d45ce5", ja * 10], ["#25c5d6", 108], ["#e2cf27", ja * 57]]);
        this.ⲆΔΔΔ[d] = Cf(ka, ha, -ka.width / 4, 178, _ | ba);
        this.ⲆΔΔΔ[d++].view = D;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⲆⲆΔⵠΔⵠᐃ, ha, -341.5, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = I;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⲆⵠⲆⲆⲆⲆⵠ, ha, -341.5, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = Q;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⵠⵠⲆᐃᐃⵠΔ, ha, -1366 / 4, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = M;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔⵠⵠⲆⵠⵠᐃ, ha, -341.5, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = F;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔΔΔⵠⲆΔᐃ, ha, -341.5, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = J;
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔᐃⲆΔᐃⲆⲆ, ha, -1366 / 4, 100, _ | ba);
        this.ⲆΔΔΔ[d++].view = G;
        ⵠⲆΔΔⵠΔΔ = d++;
        this.ⲆΔΔΔ[ⵠⲆΔΔⵠΔΔ] = Cf(Mh.ⵠⲆΔΔⵠΔΔ, ha, 484, 0, _);
        ᐃΔⵠᐃⵠᐃⵠ = d++;
        this.ⲆΔΔΔ[ᐃΔⵠᐃⵠᐃⵠ] = Cf(Mh.ᐃΔⵠᐃⵠᐃⵠ, ha, 812.5, 0, _);
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃⵠⲆⲆΔΔᐃ, ha, -758 / 4, -5, _ | ba);
        this.ⲆΔΔΔ[d++].view = w;
        this.ⲆΔΔΔ[d] = Cf(Mh.ⲆⲆⲆⵠⲆΔⵠ, ha, -758 / 4, -5, _ | ba);
        this.ⲆΔΔΔ[d++].view = v;
        ΔⲆⵠⵠⵠⲆⲆ = d++;
        this.ⲆΔΔΔ[ΔⲆⵠⵠⵠⲆⲆ] = Cf(Mh.ᐃᐃΔⵠⵠΔᐃ, ia, 93, 30, _);
        this.ⲆΔΔΔ[d] = Cf(Mh.ΔⵠⲆᐃⲆΔΔ, ha, -173, 110, _ | ba);
        this.ⲆΔΔΔ[d++].view = L;
        this.ⲆΔΔΔ[d] = Cf(Mh.ᐃⲆᐃΔΔᐃᐃ, ha, -173, 110, _ | ba);
        this.ⲆΔΔΔ[d++].view = O;
        d = 0;
        this.buttons = [];
        this.buttons[d] = mf(50, 57, 0, [Mh.ᐃᐃⲆⲆΔΔⵠ, Mh.ᐃᐃⲆΔᐃᐃᐃ, Mh.ⲆᐃΔΔΔⵠΔ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                U(r);
            } else {
                U(C);
            }
        }, 320, 0, Y, ia);
        d++;
        if (cj.innerWidth < 1300) {
            this.buttons[d] = mf(202, 97, 0, [Mh.ⲆᐃⵠⵠΔⵠⲆ, Mh.ⵠᐃᐃΔⲆⵠᐃ, Mh.ⲆⲆᐃⵠⵠⵠⵠ], da, ea, this.ΔⵠⲆᐃⲆⵠΔ, 462, 235, _ | Y, ia);
        } else {
            this.buttons[d] = mf(202, 97, 0, [Mh.ⲆᐃⵠⵠΔⵠⲆ, Mh.ⵠᐃᐃΔⲆⵠᐃ, Mh.ⲆⲆᐃⵠⵠⵠⵠ], da, ea, this.ΔⵠⲆᐃⲆⵠΔ, 74, 235, _ | ba, ia);
        }
        this.buttons[d].view = t;
        d++;
        if (cj.innerWidth > 1300) {
            this.buttons[d] = mf(355, 168, 0, [Mh.ⵠᐃΔᐃⵠΔⲆ, Mh.ⵠᐃΔᐃⵠΔⲆ, Mh.ⵠᐃΔᐃⵠΔⲆ], da, ea, function () {
                cj.open("./changelog.html", "_blank");
            }, -195, -115, aa | ba, ia);
            this.buttons[d++].view = t;
            this.buttons[d] = mf(355, 168, 0, [Mh.ⵠⵠΔΔΔΔⲆ, Mh.ⵠⵠΔΔΔΔⲆ, Mh.ⵠⵠΔΔΔΔⲆ], da, ea, function () {
                cj.open("https://taming.io", "_blank");
            }, 20, -115, aa | ba, ia);
            this.buttons[d++].view = t;
        }
        this.buttons[d++] = mf(80, 80, 0, [Mh.ⲆⲆΔᐃᐃⲆⲆ, Mh.ⲆΔᐃΔⲆⵠΔ, Mh.ᐃᐃⵠᐃΔᐃⲆ], da, ea, function () {
            cj.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, Z, ia);
        this.buttons[d++] = mf(80, 80, 0, [Mh.ᐃⵠⵠⲆᐃⲆⵠ, Mh.ΔᐃᐃᐃᐃΔⲆ, Mh.ⵠᐃᐃⲆⵠΔᐃ], da, ea, function () {
            cj.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, Z, ia);
        this.buttons[d++] = mf(80, 80, 0, [Mh.ⲆⲆΔⵠᐃΔΔ, Mh.ΔⲆᐃΔⲆΔⵠ, Mh.ⵠᐃᐃΔⲆΔⵠ], da, ea, function () {
            cj.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, Z, ia);
        this.buttons[d++] = mf(80, 80, 0, [Mh.ⲆⲆⲆⵠΔⲆⵠ, Mh.ⵠᐃᐃⵠᐃΔⵠ, Mh.ᐃΔᐃⵠⵠⵠᐃ], da, ea, function () {
            cj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, Z, ia);
        this.buttons[d++] = mf(80, 80, 0, [Mh.ⲆᐃⲆⲆᐃᐃΔ, Mh.ᐃⲆᐃⵠᐃⲆⲆ, Mh.ᐃⲆΔⵠⵠᐃᐃ], da, ea, function () {
            cj.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, Z, ia);
        this.buttons[d++] = mf(80, 80, 0, [Mh.ⵠⵠⲆⲆᐃᐃⵠ, Mh.ⲆΔⵠⵠᐃⲆᐃ, Mh.ⵠΔΔⵠⲆΔΔ], da, ea, function () {
            cj.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, Z, ia);
        this.buttons[d++] = mf(80, 80, 0, [Mh.ⲆᐃⲆⲆⵠⵠΔ, Mh.ⲆⲆⲆΔⲆⲆΔ, Mh.ⲆⵠⲆⵠⲆⵠⲆ], da, ea, function () {
            cj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, Z, ia);
        ᐃⵠⲆᐃΔⲆΔ = d++;
        this.buttons[ᐃⵠⲆᐃΔⲆΔ] = mf(232, 142, 0, [Mh.ᐃⲆΔᐃⵠᐃΔ, Mh.ⵠΔΔᐃᐃΔΔ, Mh.ᐃⵠⲆⲆΔᐃΔ], da, ea, function () {
            U(y);
            fy(nx.ᐃᐃᐃᐃΔⲆᐃ, nx.ⵠᐃΔⵠᐃⵠⲆ, nx.ⲆⲆᐃᐃΔᐃΔ, nx.ᐃᐃⲆⵠᐃᐃⵠ);
        }, -5, 573, Y, ia);
        this.buttons[d++] = mf(236, 165, 0, [Mh.ΔᐃⵠΔΔᐃᐃ, Mh.ΔᐃⵠΔΔᐃᐃ, Mh.ΔᐃⵠΔΔᐃᐃ], da, fa, function () {
            U(y);
        }, -5, 566, Y, ia);
        ΔⵠⲆⵠⲆΔᐃ = d++;
        this.buttons[ΔⵠⲆⵠⲆΔᐃ] = mf(236, 165, 0, [Mh.ᐃᐃΔⲆⲆⲆΔ, Mh.ΔⵠⲆⲆΔⲆᐃ, Mh.ΔⲆⲆⲆⲆᐃⲆ], da, ea, function () {
            U(z);
        }, -5, 494, Y, ia);
        this.buttons[d++] = mf(236, 165, 0, [Mh.ΔᐃⲆⵠΔⵠⵠ, Mh.ΔᐃⲆⵠΔⵠⵠ, Mh.ΔᐃⲆⵠΔⵠⵠ], da, fa, function () {
            U(z);
        }, -5, 494, Y, ia);
        ⵠΔⵠᐃⵠΔᐃ = d++;
        this.buttons[ⵠΔⵠᐃⵠΔᐃ] = mf(236, 165, 0, [Mh.ᐃᐃΔⲆⲆⲆΔ, Mh.ΔⵠⲆⲆΔⲆᐃ, Mh.ΔⲆⲆⲆⲆᐃⲆ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                if (nx.ⵠⲆᐃⵠⲆⵠⵠ - Date.now() > 0) {
                    U(R);
                } else {
                    U(N);
                }
            } else {
                U(C);
            }
        }, -5, 415, Y, ia);
        this.buttons[d++] = mf(236, 165, 0, [Mh.ᐃⲆΔⵠᐃⵠΔ, Mh.ᐃⲆΔⵠᐃⵠΔ, Mh.ᐃⲆΔⵠᐃⵠΔ], da, fa, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                if (nx.ⵠⲆᐃⵠⲆⵠⵠ - Date.now() > 0) {
                    U(R);
                } else {
                    U(N);
                }
            } else {
                U(C);
            }
        }, -5, 415, Y, ia);
        ᐃⲆΔⵠⲆⲆⲆ = d++;
        this.buttons[ᐃⲆΔⵠⲆⲆⲆ] = mf(236, 165, 0, [Mh.ᐃᐃΔⲆⲆⲆΔ, Mh.ΔⵠⲆⲆΔⲆᐃ, Mh.ΔⲆⲆⲆⲆᐃⲆ], da, ea, function () {
            U(f);
        }, -5, 336, Y, ia);
        this.buttons[d++] = mf(236, 165, 0, [Mh.ⵠⲆᐃᐃΔᐃⲆ, Mh.ⵠⲆᐃᐃΔᐃⲆ, Mh.ⵠⲆᐃᐃΔᐃⲆ], da, fa, function () {
            U(f);
        }, -5, 336, Y, ia);
        ᐃⵠⲆΔⲆᐃⵠ = d++;
        this.buttons[ᐃⵠⲆΔⲆᐃⵠ] = mf(236, 165, 0, [Mh.ᐃᐃΔⲆⲆⲆΔ, Mh.ΔⵠⲆⲆΔⲆᐃ, Mh.ΔⲆⲆⲆⲆᐃⲆ], da, ea, function () {
            U(K);
        }, -5, 257, Y, ia);
        this.buttons[d++] = mf(236, 165, 0, [Mh.ⲆⵠⲆΔᐃᐃⵠ, Mh.ⲆⵠⲆΔᐃᐃⵠ, Mh.ⲆⵠⲆΔᐃᐃⵠ], da, fa, function () {
            U(K);
        }, -5, 257, Y, ia);
        ΔⲆⲆⲆⵠⵠΔ = d++;
        this.buttons[ΔⲆⲆⲆⵠⵠΔ] = mf(236, 165, 0, [Mh.ᐃᐃΔⲆⲆⲆΔ, Mh.ΔⵠⲆⲆΔⲆᐃ, Mh.ΔⲆⲆⲆⲆᐃⲆ], da, ea, function () {
            U(t);
        }, -5, 178, Y, ia);
        this.buttons[d++] = mf(236, 165, 0, [Mh.ⵠΔΔⵠΔⵠΔ, Mh.ⵠΔΔⵠΔⵠΔ, Mh.ⵠΔΔⵠΔⵠΔ], da, fa, function () {
            U(t);
        }, -5, 178, Y, ia);
        ΔⲆⵠⵠΔⲆΔ = d++;
        this.ΔⲆⵠⵠΔⲆΔ = ΔⲆⵠⵠΔⲆΔ;
        this.buttons[ΔⲆⵠⵠΔⲆΔ] = mf(324, 222, 0, [Mh.ⵠᐃΔΔⲆᐃⵠ, Mh.ⵠΔⵠⲆᐃⲆΔ, Mh.ΔⲆⲆΔⲆΔⵠ], da, ea, function () {
            U(C);
        }, 0, 70, Y, ia);
        ᐃⵠⵠᐃⲆᐃΔ = d++;
        ⲆⲆⲆᐃΔⲆⲆ = d++;
        this.ᐃⵠⵠᐃⲆᐃΔ = ᐃⵠⵠᐃⲆᐃΔ;
        this.ⲆⲆⲆᐃΔⲆⲆ = ⲆⲆⲆᐃΔⲆⲆ;
        this.buttons[ᐃⵠⵠᐃⲆᐃΔ] = mf(324, 222, 0, [Mh.ⵠᐃΔᐃᐃⲆᐃ, Mh.ⵠⵠⵠⵠᐃⲆⵠ, Mh.ΔΔΔΔΔⵠⲆ], da, ea, function () {
            U(p);
            sa(-1);
        }, 0, 70, Y, ha);
        this.buttons[ⲆⲆⲆᐃΔⲆⲆ] = mf(324, 222, 0, [Mh.ⲆⵠⵠΔⲆΔⲆ, Mh.ⲆⵠⵠΔⲆΔⲆ, Mh.ⲆⵠⵠΔⲆΔⲆ], da, fa, function () {
            U(p);
            sa(-1);
        }, 0, 70, Y, ha);
        if (ⲆᐃⲆᐃ.ᐃΔⵠᐃⵠᐃᐃ === 0) {
            var ma = d++;
            if (cj.innerWidth < 1300) {
                this.buttons[ma] = mf(266, 176, 0, [Mh.ⲆⲆⵠᐃⲆᐃᐃ, Mh.ⵠΔⲆⲆᐃⲆΔ, Mh.ᐃᐃⲆᐃⲆⵠⵠ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(0);
                }, 150, 300, Y | _, ia);
            } else {
                this.buttons[ma] = mf(266, 176, 0, [Mh.ⲆⲆⵠᐃⲆᐃᐃ, Mh.ⵠΔⲆⲆᐃⲆΔ, Mh.ᐃᐃⲆᐃⲆⵠⵠ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(0);
                }, -340, 100, ba | _, ia);
            }
            this.buttons[ma].view = t;
            this.buttons[ma].hint = 0;
            var na = d++;
            if (cj.innerWidth < 1300) {
                this.buttons[na] = mf(266, 176, 0, [Mh.ΔᐃᐃᐃΔⲆⲆ, Mh.ⲆΔⲆᐃΔΔⵠ, Mh.ⲆᐃⵠⲆⵠⲆⲆ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(4);
                }, 150, 400, Y | _, ia);
            } else {
                this.buttons[na] = mf(266, 176, 0, [Mh.ΔᐃᐃᐃΔⲆⲆ, Mh.ⲆΔⲆᐃΔΔⵠ, Mh.ⲆᐃⵠⲆⵠⲆⲆ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(4);
                }, -340, 200, ba | _, ia);
            }
            this.buttons[na].view = t;
            this.buttons[na].hint = 0;
            var oa = d++;
            if (cj.innerWidth < 1300) {
                this.buttons[oa] = mf(266, 176, 0, [Mh.ᐃᐃΔⵠΔⵠⵠ, Mh.ΔΔᐃΔᐃⵠᐃ, Mh.ⵠΔΔⵠΔᐃⲆ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(6);
                }, 450, 300, Y | _, ia);
            } else {
                this.buttons[oa] = mf(266, 176, 0, [Mh.ᐃᐃΔⵠΔⵠⵠ, Mh.ΔΔᐃΔᐃⵠᐃ, Mh.ⵠΔΔⵠΔᐃⲆ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(6);
                }, -340, 300, ba | _, ia);
            }
            this.buttons[oa].view = t;
            this.buttons[oa].hint = 0;
            var pa = d++;
            if (cj.innerWidth < 1300) {
                this.buttons[pa] = mf(266, 176, 0, [Mh.ᐃᐃᐃᐃΔΔⲆ, Mh.ᐃΔⲆΔⵠⵠⵠ, Mh.ⲆΔΔⵠᐃᐃΔ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(2);
                }, 300, 300, Y | _, ia);
            } else {
                this.buttons[pa] = mf(266, 176, 0, [Mh.ᐃᐃᐃᐃΔΔⲆ, Mh.ᐃΔⲆΔⵠⵠⵠ, Mh.ⲆΔΔⵠᐃᐃΔ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(2);
                }, 204, 100, ba | _, ia);
            }
            this.buttons[pa].view = t;
            this.buttons[pa].hint = 0;
            var qa = d++;
            if (cj.innerWidth < 1300) {
                this.buttons[qa] = mf(266, 176, 0, [Mh.ᐃᐃⲆⲆΔⵠΔ, Mh.ΔΔΔΔⵠⲆΔ, Mh.ᐃⵠⵠⵠᐃΔΔ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(3);
                }, 300, 400, Y | _, ia);
            } else {
                this.buttons[qa] = mf(266, 176, 0, [Mh.ᐃᐃⲆⲆΔⵠΔ, Mh.ΔΔΔΔⵠⲆΔ, Mh.ᐃⵠⵠⵠᐃΔΔ], da, ea, function () {
                    ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(3);
                }, 204, 200, ba | _, ia);
            }
            this.buttons[qa].view = t;
            this.buttons[qa].hint = 0;
            var ra = d++;
            this.buttons[ra] = mf(266, 176, 0, [Mh.ⵠΔⵠᐃⲆⲆᐃ, Mh.ⲆᐃᐃⵠⲆⲆⲆ, Mh.ⵠΔΔⵠⲆΔⵠ], da, ea, function () {
                ⲆᐃⲆᐃ.ΔΔⲆᐃⲆ(7);
            }, cj.innerWidth < 1300 ? 450 : 204, cj.innerWidth < 1300 ? 400 : 300, (cj.innerWidth < 1300 ? Y : ba) | _, ia);
            this.buttons[ra].view = t;
            this.buttons[ra].hint = 0;
        }
        function sa(b, c) {
            if (Yd !== c) {
                nx.ⵠᐃⲆΔᐃΔΔ = c;
                var d = nx.ⲆⲆᐃⵠⲆⵠⵠ[c];
                nx.ⲆⲆⲆᐃΔ = d.score;
                nx.ⲆᐃΔⲆⵠ = d.kill;
                nx.ⵠⵠⲆᐃⵠⵠⵠ = d.death;
                nx.time = d.time;
                nx.ⲆⲆⵠⲆᐃⵠΔ = d.bestScore;
                nx.ⵠΔⵠΔᐃᐃⵠ = d.bestKill;
                nx.ᐃΔΔΔⵠΔᐃ = d.bestTime;
                nx.ΔⵠⵠⲆΔᐃⵠ = d.scoreTotal;
            }
            if (b === undefined) {
                b = nx.ⵠⲆⵠᐃⵠᐃΔ;
            }
            nx.ⵠⲆⵠᐃⵠᐃΔ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = nx.ᐃΔΔΔⵠΔᐃ[b];
                document.getElementById("stats_box_kill").innerHTML = nx.ⵠΔⵠΔᐃᐃⵠ[b];
                document.getElementById("stats_box_score").innerHTML = nx.ⲆⲆⵠⲆᐃⵠΔ[b];
            } else {
                var f = 0;
                for (var g = 0; g < nx.ⲆᐃΔⲆⵠ.length; g++) {
                    f += nx.ⲆᐃΔⲆⵠ[g];
                }
                var h = 0;
                for (g = 0; g < nx.time.length; g++) {
                    h += nx.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = nx.ⲆⲆⲆᐃΔ;
            }
        }
        this.buttons[d] = mf(87, 78, 0, [Mh.ΔᐃΔⵠⵠⲆᐃ, Mh.ⲆⲆⲆⵠⵠΔⲆ, Mh.ΔⵠΔⵠⵠᐃⲆ], da, ea, function () {
            nx.ΔᐃΔΔΔⲆΔᐃⵠ();
            if (nx.ΔᐃᐃΔᐃⲆᐃ === 0) {
                U(O);
            } else {
                U(L);
            }
        }, 127, 110, ba | _, ha);
        this.buttons[d++].view = p;
        this.buttons[d] = mf(87, 78, 0, [Mh.ⵠⵠⲆΔΔΔⲆ, Mh.ⵠⲆΔⲆᐃΔⲆ, Mh.ⵠᐃⵠⲆⲆⵠΔ], da, ea, function () {
            const a = cj.document.createElement("textarea");
            a.value = Qx;
            cj.document.body.appendChild(a);
            a.select();
            cj.document.execCommand("copy");
            cj.document.body.removeChild(a);
        }, 182, 110, ba | _, ha);
        this.buttons[d++].view = p;
        this.buttons[d] = mf(87, 78, 0, [Mh.ⵠⵠⵠΔⲆⵠᐃ, Mh.ⲆᐃⲆᐃΔⲆⲆ, Mh.ΔᐃΔⲆⵠΔΔ], da, ea, function () {
            (function () {
                if (Mx === Ox && cj.FB && cj.FB.getUserID()) {
                    cj.FB.logout();
                }
                if (Lx === Ox && Vx !== undefined) {
                    cj.gapi.auth2.getAuthInstance().signOut();
                    Vx = $g;
                }
                Qx = ei;
                Px = undefined;
                Ox = undefined;
                nx.ΔΔⲆΔᐃ = 0;
                nx.ΔᐃᐃⵠΔ = 0;
                nx.ⲆⲆⲆᐃΔ = 0;
                nx.ΔⲆⵠⵠⵠΔⵠ();
                ᐃΔᐃᐃⲆⲆⵠⲆⵠ();
            })();
        }, 255, 110, ba | _, ha);
        this.buttons[d++].view = p;
        this.buttons[d] = mf(58, 64, 0, [Mh.ⵠⲆⲆⵠⵠⲆΔ, Mh.ΔΔΔⲆⵠΔᐃ, Mh.ⲆⲆᐃᐃⲆᐃΔ], da, ea, function () {
            U(t);
        }, 189, 118, ba | _, ha);
        this.buttons[d++].view = C;
        this.buttons[d] = mf(497, 72, 0, [Mh.ⵠⲆᐃⵠΔⲆⵠ, Mh.ⵠⵠᐃᐃΔⵠᐃ, Mh.ⵠⵠᐃⲆⵠᐃᐃ], da, ea, function () {
            (function () {
                if (yf) {
                    Px = og.ΔΔΔΔΔⲆᐃ(40);
                    Ox = Nx;
                    Qx = yf.userId;
                    cj.ⵠᐃᐃⵠⵠΔⵠ();
                    return;
                }
                cj.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, ba | _, ha);
        this.buttons[d++].view = C;
        this.buttons[d] = mf(497, 72, 0, [Mh.ⵠⵠᐃⵠⵠⵠⲆ, Mh.ᐃⲆⲆΔⲆΔᐃ, Mh.ᐃΔᐃᐃⲆⵠΔ], da, ea, function () {
            cj.FB.login(function (a) {
                if (a.authResponse) {
                    cj.FB.api("/me", function (a) {
                        Ox = Mx;
                        Px = cj.FB.getAuthResponse().accessToken;
                        cy();
                        cj.ⵠᐃᐃⵠⵠΔⵠ();
                    });
                }
            });
        }, -130, 430, ba | _, ha);
        this.buttons[d++].view = C;
        ΔᐃⵠΔΔⵠⵠ = 20000;
        this.ΔⵠⵠⲆᐃΔⲆ = function (a) {
            var b = nx.ⲆᐃⵠⲆⲆⲆⲆ(a);
            var c = b * b * ΔᐃⵠΔΔⵠⵠ;
            return (a -= c) / ((b + 1) * (b + 1) * ΔᐃⵠΔΔⵠⵠ - c);
        };
        this.ⲆᐃⵠⲆⲆⲆⲆ = function (a) {
            return Math.floor(Math.sqrt(a / ΔᐃⵠΔΔⵠⵠ));
        };
        this.ᐃⵠΔⵠⵠᐃΔΔⵠ = function (a) {
            nx.ⵠⲆΔⲆΔ = nx.ⲆᐃⵠⲆⲆⲆⲆ(a);
            nx.ᐃⵠⲆΔⲆⲆΔ = nx.ΔⵠⵠⲆᐃΔⲆ(a);
            nx.ⲆⲆⵠⵠⲆᐃᐃ = 0;
            nx.ⲆⲆⲆᐃΔ = a;
        };
        this.ⲆⵠⵠⵠᐃΔⵠᐃⵠ = function (a) {
            nx.buttons[nx.ΔⲆⵠⵠΔⲆΔ].info.active = 0;
            nx.buttons[nx.ᐃⵠⵠᐃⲆᐃΔ].info.active = 1;
            nx.buttons[nx.ⲆⲆⲆᐃΔⲆⲆ].info.active = 1;
            g();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = cj.decodeURIComponent(cj.escape(cj.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            nx.ΔᐃᐃⵠΔ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            nx.ⲆⲆᐃⵠⲆⵠⵠ = b;
            H.ᐃⵠΔⵠⵠᐃΔΔⵠ(c.score);
            nx.ⲆⲆⲆᐃΔ = c.score;
            nx.ⲆᐃΔⲆⵠ = c.kill;
            nx.ⵠⵠⲆᐃⵠⵠⵠ = c.death;
            nx.time = c.time;
            nx.ⲆⲆⵠⲆᐃⵠΔ = c.bestScore;
            nx.ⵠΔⵠΔᐃᐃⵠ = c.bestKill;
            nx.ᐃΔΔΔⵠΔᐃ = c.bestTime;
            nx.ΔⵠⵠⲆΔᐃⵠ = c.scoreTotal;
            nx.ΔᐃᐃΔᐃⲆᐃ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (nx.ΔᐃᐃΔᐃⲆᐃ === undefined) {
                nx.ΔᐃᐃΔᐃⲆᐃ = 0;
            }
            nx.ⵠⲆᐃⵠⲆⵠⵠ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                nx.ⵠⲆᐃⵠⲆⵠⵠ = Date.now() + Number(a.privateServerTime);
            }
            nx.ΔΔⲆΔᐃ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                nx.ΔΔⲆΔᐃ = Date.now() + Number(a.kit);
            }
            var d = bj.ΔⲆⵠΔΔ;
            for (var e = 0; a.skins.length > e; e++) {
                if ((i = a.skins[e]) > 0) {
                    for (var f = 0; d.length > f; f++) {
                        if (d[f].id === e) {
                            H.unlock.ᐃΔΔΔ[f] = 1;
                        }
                    }
                }
            }
            d = bj.ΔⵠᐃⲆⲆ;
            e = 0;
            for (; a.accessories.length > e; e++) {
                if ((i = a.accessories[e]) > 0) {
                    for (f = 0; d.length > f; f++) {
                        if (e === d[f].id) {
                            H.unlock.ΔⵠⲆᐃⵠ[f] = 1;
                        }
                    }
                }
            }
            d = bj.ΔⲆᐃⵠⲆ;
            e = 0;
            for (; e < a.books.length; e++) {
                var i = a.books[e];
                if (i > 0) {
                    for (f = 0; f < d.length; f++) {
                        if (e === d[f].id) {
                            H.unlock.ᐃᐃΔⵠⵠ[f] = 1;
                        }
                    }
                }
            }
            d = bj.ΔⵠᐃΔ;
            e = 0;
            for (; e < a.bags.length; e++) {
                i = a.bags[e];
                if (i > 0) {
                    for (f = 0; d.length > f; f++) {
                        if (e === d[f].id) {
                            H.unlock.ΔⵠⵠⲆⵠ[f] = 1;
                        }
                    }
                }
            }
            d = bj.ΔⵠⵠΔᐃ;
            e = 0;
            for (; e < a.crates.length; e++) {
                if ((i = a.crates[e]) > 0) {
                    for (f = 0; d.length > f; f++) {
                        if (e === d[f].id) {
                            H.unlock.ⲆⵠΔⲆΔ[f] = 1;
                            H.unlock.ᐃᐃⵠΔⵠ[f] = 1;
                        }
                    }
                }
            }
        };
        this.ⵠⲆᐃⲆⵠⵠᐃᐃⵠ = function () {
            cj.ⵠᐃᐃⵠⵠΔⵠ = function () {
                U(t);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", Jx + "login?token=" + Px + "&type=" + Ox + (yf ? "&userId=" + yf.userId + "&userInfo=" + yf.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(H.ⲆⵠⵠⵠᐃΔⵠᐃⵠ);
            };
            if (Rx === 1) {
                cj.ⵠᐃᐃⵠⵠΔⵠ();
            }
        };
        cj.ᐃΔᐃᐃⲆⲆⵠⲆⵠ = function () {
            nx.buttons[nx.ΔⲆⵠⵠΔⲆΔ].info.active = 1;
            nx.buttons[nx.ᐃⵠⵠᐃⲆᐃΔ].info.active = 0;
            nx.buttons[nx.ⲆⲆⲆᐃΔⲆⲆ].info.active = 0;
            U(t);
        };
        this.ⲆⲆΔⲆⵠ = function () {
            return nx.buttons[nx.ᐃⵠⵠᐃⲆᐃΔ].info.active;
        };
        this.buttons[d] = mf(461, 105, 0, [Mh.ᐃᐃᐃΔΔⲆΔ, Mh.ⲆᐃᐃΔⵠΔⲆ, Mh.ⲆᐃⵠⲆⵠΔⵠ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                U(r);
            } else {
                U(C);
            }
        }, -100, 80, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(157, 158, 0, [Mh.ᐃΔΔΔⵠᐃⲆ, Mh.ΔΔΔᐃᐃⲆⵠ, Mh.ΔⵠΔⲆΔΔⵠ], da, ea, function () {
            cj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, ba | _, ha);
        this.buttons[d++].view = z;
        this.buttons[d] = mf(66, 73, 0, [Mh.ᐃΔᐃⲆΔⲆΔ, Mh.ΔⵠᐃⲆΔΔⲆ, Mh.ⵠⲆᐃⵠⵠⵠΔ], da, ea, undefined, -68, 340, ba | _, ha);
        this.buttons[d++].view = z;
        this.buttons[d] = mf(66, 73, 0, [Mh.ᐃΔΔᐃⵠᐃΔ, Mh.ᐃⲆᐃΔⲆⵠⲆ, Mh.ᐃΔΔᐃⵠⵠΔ], da, ea, undefined, -30, 340, ba | _, ha);
        this.buttons[d++].view = z;
        this.ᐃⵠⵠⲆΔⲆⲆⵠΔ = d;
        this.buttons[d] = mf(97, 66, 0, [Mh.ⲆⵠⵠⲆᐃᐃⲆ, Mh.ΔⵠΔᐃΔⲆᐃ, Mh.ⲆⵠᐃⲆⵠⵠΔ], da, ea, function () {
            fy(_t, rs, nx.ⲆⲆᐃᐃΔᐃΔ);
        }, -14, 151, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⵠⲆᐃⵠⵠΔᐃ = d;
        this.buttons[d] = mf(135, 66, 0, [Mh.ⵠⲆⲆΔⵠⲆΔ, Mh.ⵠⵠᐃᐃⵠΔⵠ, Mh.ⵠΔΔⲆⵠⵠᐃ], da, ea, function () {
            fy(_t, oh, nx.ⵠⲆᐃⵠⵠΔᐃ);
        }, 37.5, 151, ba | _, ha);
        this.buttons[d++].view = y;
        this.ΔᐃⲆⲆᐃᐃⵠ = d;
        this.buttons[d] = mf(160, 66, 0, [Mh.ΔⵠⲆⲆΔΔᐃ, Mh.ⲆⲆⲆⲆⲆΔⵠ, Mh.ΔΔΔᐃⲆⲆΔ], da, ea, function () {
            fy(undefined, undefined, nx.ΔᐃⲆⲆᐃᐃⵠ);
        }, 107.5, 151, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⲆⲆᐃᐃΔᐃΔ = d;
        this.buttons[d] = mf(207, 66, 0, [Mh.ᐃᐃΔΔΔΔⵠ, Mh.ΔΔᐃᐃⵠⲆⵠ, Mh.ᐃΔⵠⵠⲆᐃᐃ], da, ea, function () {
            fy(fq, undefined, nx.ⲆⲆᐃᐃΔᐃΔ);
        }, 190.5, 151, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⵠᐃΔⵠΔΔᐃ = d;
        this.buttons[d] = mf(144, 66, 0, [Mh.ᐃᐃⲆⵠⲆᐃΔ, Mh.ⲆⲆΔⲆᐃᐃΔ, Mh.ⲆⵠⲆⵠⲆⵠΔ], da, ea, function () {
            fy(nx.ⵠᐃΔⵠΔΔᐃ);
        }, 103.5, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ΔⲆⲆᐃⵠⵠⵠ = d;
        this.buttons[d] = mf(124, 66, 0, [Mh.ⲆⲆⲆᐃΔⵠⵠ, Mh.ⵠⵠⲆΔⲆΔⲆ, Mh.ΔⲆⵠⲆⵠⵠᐃ], da, ea, function () {
            fy(nx.ΔⲆⲆᐃⵠⵠⵠ);
        }, 177.5, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ᐃᐃᐃᐃΔⲆᐃ = d;
        this.buttons[d] = mf(104, 66, 0, [Mh.ΔⵠⲆⲆᐃΔᐃ, Mh.ΔⵠⲆⲆⲆⲆΔ, Mh.ΔᐃⲆΔⵠⵠΔ], da, ea, function () {
            fy(nx.ᐃᐃᐃᐃΔⲆᐃ);
        }, 242, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⲆᐃⲆⲆⲆΔⵠ = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ⲆⵠᐃᐃⲆΔᐃ, Mh.ⵠⲆᐃⲆᐃᐃΔ, Mh.ΔⲆⵠΔᐃⵠⲆ], da, ea, function () {
            fy(undefined, undefined, undefined, nx.ⲆᐃⲆⲆⲆΔⵠ);
        }, -185, 528, ba | _, ha);
        this.buttons[d++].view = y;
        this.ᐃᐃᐃⵠᐃⲆⵠ = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ΔⲆⵠⵠⲆⵠᐃ, Mh.ⲆᐃⲆⵠᐃΔΔ, Mh.ⲆⵠⲆⲆⲆΔⲆ], da, ea, function () {
            fy(Yd, pt, oh, nx.ᐃᐃᐃⵠᐃⲆⵠ);
        }, -149, 528, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⵠⲆΔⵠᐃᐃⵠ = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ᐃⵠΔᐃⵠⵠᐃ, Mh.ⲆⵠⲆΔⵠⵠΔ, Mh.ⵠⲆⵠΔΔⲆΔ], da, ea, function () {
            fy(undefined, undefined, undefined, nx.ⵠⲆΔⵠᐃᐃⵠ);
        }, -113, 528, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⲆΔⲆⵠⲆⵠⲆ = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ⲆⵠΔΔΔⲆᐃ, Mh.ΔⵠΔⲆⲆⵠⵠ, Mh.ΔΔΔᐃⲆⵠᐃ], da, ea, function () {
            fy(undefined, rs, undefined, nx.ⲆΔⲆⵠⲆⵠⲆ);
        }, -77, 528, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⲆᐃⵠⲆⵠᐃᐃ = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ⲆⲆⵠⵠⵠΔⵠ, Mh.ΔΔᐃΔΔᐃΔ, Mh.ⲆⵠΔⵠΔΔΔ], da, ea, function () {
            fy(undefined, jj, Ts, nx.ⲆᐃⵠⲆⵠᐃᐃ);
        }, -41, 528, ba | _, ha);
        this.buttons[d++].view = y;
        this.ᐃᐃⲆⵠᐃᐃⵠ = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ᐃⲆᐃⲆᐃΔⲆ, Mh.ⲆⲆⵠᐃⲆᐃΔ, Mh.ᐃΔⲆⲆᐃᐃⲆ], da, ea, function () {
            fy(undefined, undefined, undefined, nx.ᐃᐃⲆⵠᐃᐃⵠ);
        }, -5, 528, ba | _, ha);
        this.buttons[d++].view = y;
        this.buttons[d] = mf(232, 352, 0, [Mh.ⲆΔᐃᐃᐃⵠⵠ, Mh.ⵠⵠᐃᐃᐃᐃΔ, Mh.ΔⵠⲆΔΔⵠⵠ], da, ea, function () {
            by(300);
        }, -330, 135, ba | _, ha);
        this.buttons[d++].view = r;
        this.buttons[d] = mf(232, 352, 0, [Mh.ᐃⲆⵠⲆⲆΔᐃ, Mh.ΔⲆᐃⵠᐃⵠⵠ, Mh.ⲆᐃⵠⲆⵠⵠᐃ], da, ea, function () {
            by(600);
        }, -195, 135, ba | _, ha);
        this.buttons[d++].view = r;
        this.buttons[d] = mf(243, 374, 0, [Mh.ⵠⵠᐃⵠᐃⲆΔ, Mh.ΔⵠΔᐃⵠΔⵠ, Mh.ⵠΔⲆⲆⲆⵠⵠ], da, ea, function () {
            by(2600);
        }, -60, 130, ba | _, ha);
        this.buttons[d++].view = r;
        this.buttons[d] = mf(232, 352, 0, [Mh.ᐃⵠΔΔⲆⲆΔ, Mh.ᐃⲆⵠᐃⵠΔⲆ, Mh.ⵠⲆᐃᐃⲆⵠᐃ], da, ea, function () {
            by(7000);
        }, 78, 135, ba | _, ha);
        this.buttons[d++].view = r;
        this.buttons[d] = mf(243, 374, 0, [Mh.ⵠᐃΔᐃⲆΔⲆ, Mh.ⲆⲆᐃΔⲆΔΔ, Mh.ⵠᐃⲆⲆᐃᐃᐃ], da, ea, function () {
            by(20000);
        }, 213, 130, ba | _, ha);
        this.buttons[d++].view = r;
        this.buttons[d] = mf(58, 64, 0, [Mh.ⵠⲆⲆⵠⵠⲆΔ, Mh.ΔΔΔⲆⵠΔᐃ, Mh.ⲆⲆᐃᐃⲆᐃΔ], da, ea, function () {
            U(f);
        }, 300, 88, ba | _, ha);
        this.buttons[d++].view = r;
        this.buttons[d] = mf(323, 112, 0, [Mh.ᐃⵠⲆᐃⲆᐃᐃ, Mh.ᐃⲆⵠⲆⲆⵠⵠ, Mh.ΔᐃⲆⲆⲆⵠᐃ], da, ea, function () {
            U(I);
            Fa.ⵠⵠⵠⲆΔᐃⵠ();
        }, -315, 185, ba | _, ha);
        this.buttons[d++].view = K;
        this.buttons[d] = mf(323, 112, 0, [Mh.ΔⲆⲆᐃᐃⵠⵠ, Mh.ⲆΔᐃΔⵠᐃⲆ, Mh.ΔΔⵠⵠΔᐃᐃ], da, ea, function () {
            U(Q);
            Ka.ⵠⵠⵠⲆΔᐃⵠ();
        }, -315, 321, ba | _, ha);
        this.buttons[d++].view = K;
        this.buttons[d] = mf(323, 112, 0, [Mh.ⵠΔᐃⲆⲆᐃΔ, Mh.ⲆⵠΔⵠⲆⲆΔ, Mh.ᐃΔⲆⲆᐃⵠΔ], da, ea, function () {
            U(M);
            Ga.ⵠⵠⵠⲆΔᐃⵠ();
        }, 153, 185, ba | _, ha);
        this.buttons[d++].view = K;
        this.buttons[d] = mf(323, 112, 0, [Mh.ⵠⲆⵠⵠᐃⵠⲆ, Mh.ⲆⲆⲆⵠⲆΔΔ, Mh.ⲆΔᐃᐃⲆⲆΔ], da, ea, function () {
            U(F);
            Ha.ⵠⵠⵠⲆΔᐃⵠ();
        }, 153, 321, ba | _, ha);
        this.buttons[d++].view = K;
        this.buttons[d] = mf(323, 112, 0, [Mh.ⵠⲆΔⲆⲆᐃΔ, Mh.ΔⲆᐃⵠⲆⲆᐃ, Mh.ᐃΔⵠⵠⲆⵠⵠ], da, ea, function () {
            U(J);
            Ia.ⵠⵠⵠⲆΔᐃⵠ();
        }, 153, 463, ba | _, ha);
        this.buttons[d++].view = K;
        this.buttons[d] = mf(323, 112, 0, [Mh.ⲆᐃΔⵠΔᐃⲆ, Mh.ΔᐃᐃⲆⵠⵠⲆ, Mh.ⵠΔⲆΔᐃᐃⲆ], da, ea, function () {
            U(G);
            Ja.ⵠⵠⵠⲆΔᐃⵠ();
        }, -315, 463, ba | _, ha);
        this.buttons[d++].view = K;
        this.buttons[d] = mf(327, 117, 0, [Mh.ⵠΔⲆⲆⲆΔᐃ, Mh.ᐃⲆᐃΔⵠᐃᐃ, Mh.ⵠᐃⲆⲆᐃⵠᐃ], da, ea, function () {
            U(S);
        }, 155, 70, Y, ia);
        this.buttons[d++].view = t;
        this.buttons[d] = mf(130, 129, 0, [Mh.ΔⵠⵠⵠᐃΔⵠ, Mh.ΔΔⵠⲆᐃΔΔ, Mh.ᐃΔⵠⲆᐃⲆⲆ], da, ea, function () {
            P(v, ha, "none");
            U(f);
        }, 10, 40, ba | _, ha);
        this.buttons[d++].view = v;
        this.buttons[d] = mf(130, 129, 0, [Mh.ΔⵠⵠⵠᐃΔⵠ, Mh.ΔΔⵠⲆᐃΔΔ, Mh.ᐃΔⵠⲆᐃⲆⲆ], da, ea, function () {
            P(w, ha, "none");
            U(f);
        }, 10, 40, ba | _, ha);
        this.buttons[d++].view = w;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 200, 140, ba | _, ha);
        this.buttons[d++].view = N;
        this.buttons[d] = mf(524, 110, 0, [Mh.ⵠᐃⲆⵠΔⲆΔ, Mh.ⲆᐃⲆᐃⲆᐃΔ, Mh.ᐃⵠΔᐃⵠΔⵠ], da, ea, function () {
            gy("Atlanta");
        }, -265, 300, ba | _, ha);
        this.buttons[d++].view = N;
        this.buttons[d] = mf(523, 110, 0, [Mh.ΔᐃⲆᐃⲆⲆᐃ, Mh.ᐃⵠⵠⵠΔΔΔ, Mh.ⵠᐃΔⵠⵠⲆⲆ], da, ea, function () {
            gy("LosAngeles");
        }, 5, 300, ba | _, ha);
        this.buttons[d++].view = N;
        this.buttons[d] = mf(344, 110, 0, [Mh.ⲆᐃⵠⵠⵠⵠⲆ, Mh.ᐃᐃΔⵠⲆᐃΔ, Mh.ⲆⲆΔΔΔⲆⲆ], da, ea, function () {
            gy("Frankfurt");
        }, -265, 365, ba | _, ha);
        this.buttons[d++].view = N;
        this.buttons[d] = mf(344, 110, 0, [Mh.ΔΔᐃⲆⵠᐃⲆ, Mh.ᐃⲆΔΔⵠΔΔ, Mh.ⲆⵠᐃΔⲆᐃᐃ], da, ea, function () {
            gy("Osaka");
        }, 100, 365, ba | _, ha);
        this.buttons[d++].view = N;
        this.buttons[d] = mf(344, 110, 0, [Mh.ⲆᐃΔΔⲆᐃΔ, Mh.ⵠΔⲆΔⵠΔΔ, Mh.ΔⲆⲆΔᐃΔⵠ], da, ea, function () {
            gy("Sydney");
        }, -86, 365, ba | _, ha);
        this.buttons[d++].view = N;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(N);
        }, 224, 140, ba | _, ha);
        this.buttons[d++].view = q;
        this.buttons[d] = mf(230, 352, 0, [Mh.ΔⲆⵠⲆⲆⵠⲆ, Mh.ΔᐃᐃΔⵠⲆⵠ, Mh.ᐃΔΔΔᐃΔΔ], da, ea, function () {
            by(350);
        }, -280, 240, ba | _, ha);
        this.buttons[d++].view = q;
        this.buttons[d] = mf(230, 352, 0, [Mh.ⲆᐃⵠΔΔⵠⲆ, Mh.ᐃⵠⲆⲆⵠᐃⲆ, Mh.ⲆΔⲆᐃⲆⲆΔ], da, ea, function () {
            by(700);
        }, -130, 240, ba | _, ha);
        this.buttons[d++].view = q;
        this.buttons[d] = mf(230, 352, 0, [Mh.ᐃⵠᐃⵠΔᐃΔ, Mh.ᐃⲆᐃΔᐃᐃⲆ, Mh.ⵠΔⵠⲆⲆⵠⲆ], da, ea, function () {
            by(1400);
        }, 20, 240, ba | _, ha);
        this.buttons[d++].view = q;
        this.buttons[d] = mf(230, 352, 0, [Mh.ⵠΔⵠⲆⲆⲆΔ, Mh.ᐃᐃⵠΔΔⲆⵠ, Mh.ⲆΔⲆΔᐃⲆᐃ], da, ea, function () {
            by(3000);
        }, 170, 240, ba | _, ha);
        this.buttons[d++].view = q;
        this.buttons[d] = mf(105, 119, 0, [Mh.ⵠⲆΔⵠΔⲆⲆ, Mh.ⲆⲆⲆᐃⲆΔᐃ, Mh.ⵠⲆΔⲆⵠⲆⵠ], da, ea, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = cj.document.createElement("textarea");
            b.value = kf + "?server=" + a[1] + "&region=" + a[0];
            cj.document.body.appendChild(b);
            b.select();
            cj.document.execCommand("copy");
            cj.document.body.removeChild(b);
        }, 170, 310, ba | _, ha);
        this.buttons[d++].view = R;
        this.buttons[d] = mf(105, 119, 0, [Mh.ⲆⵠᐃᐃᐃⵠΔ, Mh.ⵠᐃⲆᐃⲆⵠᐃ, Mh.ⵠᐃⲆⲆⲆΔᐃ], da, ea, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", Jx + "rebootServer?token=" + Px + "&userid=" + Qx);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = kf + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, ba | _, ha);
        this.buttons[d++].view = R;
        this.buttons[d] = mf(204, 115, 0, [Mh.ΔⵠⲆⵠᐃᐃⲆ, Mh.ΔΔΔⲆᐃⵠΔ, Mh.ⵠᐃᐃⲆΔⲆⲆ], da, ea, function () {
            cj.open("./commands.html", "_blank");
        }, -265, 490, ba | _, ha);
        this.buttons[d++].view = R;
        this.buttons[d] = mf(145, 69, 0, [Mh.ᐃᐃᐃⵠⲆΔΔ, Mh.ⲆⲆΔⲆⵠΔⵠ, Mh.ᐃΔᐃᐃᐃΔᐃ], da, ea, function () {
            U(k);
        }, -210, 170, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ⲆⵠⵠΔⲆᐃⵠ, Mh.ᐃΔᐃⵠΔⵠᐃ, Mh.ⲆΔᐃᐃᐃⲆⲆ], da, ea, function () {
            U(B);
        }, 70, 170, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ᐃᐃΔᐃⲆᐃΔ, Mh.Ⲇᐃⵠⵠⵠⵠⵠ, Mh.ᐃⵠⲆᐃᐃΔΔ], da, ea, function () {
            U(x);
        }, 70, 204, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ⲆⵠⵠⵠⵠΔⲆ, Mh.ⲆΔⵠⵠⲆΔⲆ, Mh.ᐃⵠᐃⵠⵠΔⲆ], da, ea, function () {
            U(E);
        }, -210, 204, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ⲆⵠⵠⵠⵠΔⲆ, Mh.ⲆΔⵠⵠⲆΔⲆ, Mh.ᐃⵠᐃⵠⵠΔⲆ], da, ea, function () {
            U(D);
        }, 70, 238, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ⲆⵠⵠⵠⵠΔⲆ, Mh.ⲆΔⵠⵠⲆΔⲆ, Mh.ᐃⵠᐃⵠⵠΔⲆ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                $x(0, 300);
            } else {
                U(C);
            }
        }, 307, 205, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ⲆΔᐃⵠᐃᐃᐃ, Mh.ΔΔⵠᐃΔᐃᐃ, Mh.ᐃᐃᐃΔⲆᐃⵠ], da, ea, function () {
            U(A);
        }, -210, 238, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(145, 69, 0, [Mh.ⲆΔᐃⵠᐃᐃᐃ, Mh.ΔΔⵠᐃΔᐃᐃ, Mh.ᐃᐃᐃΔⲆᐃⵠ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                $x(1, 600);
            } else {
                U(C);
            }
        }, 307, 239, ba | _, ha);
        this.buttons[d++].view = f;
        this.buttons[d] = mf(192, 101, 0, [Mh.ⵠⲆⲆΔⲆΔⵠ, Mh.ΔΔΔΔΔΔⲆ, Mh.ⵠᐃⵠⲆⲆΔΔ], da, ea, function () {
            dy();
        }, -100, 250, ba | _, ha);
        this.buttons[d++].view = O;
        this.buttons[d] = mf(192, 104, 0, [Mh.ⵠΔⲆΔⲆΔΔ, Mh.ⵠᐃᐃⵠᐃᐃⵠ, Mh.ᐃΔⵠⲆΔΔᐃ], da, ea, function () {
            dy();
        }, -100, 239, ba | _, ha);
        this.buttons[d++].view = L;
        this.buttons[d] = mf(192, 101, 0, [Mh.ΔⵠΔⲆⲆⲆⵠ, Mh.ⵠΔΔΔΔᐃᐃ, Mh.ᐃⲆⲆⲆΔΔᐃ], da, ea, function () {
            U(p);
        }, 10, 250, ba | _, ha);
        this.buttons[d++].view = O;
        this.buttons[d] = mf(192, 104, 0, [Mh.ᐃᐃΔⵠΔᐃⲆ, Mh.ⵠΔⵠⲆᐃⵠⵠ, Mh.ⲆⵠⲆΔⲆⵠⲆ], da, ea, function () {
            U(p);
        }, 10, 239, ba | _, ha);
        this.buttons[d++].view = L;
        ⵠⵠⵠⲆⲆⵠⵠ = [];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ⲆⵠⲆⲆⵠ] = [Mh.ⵠΔⵠⲆᐃⵠᐃ, Mh.ⵠⵠⲆⵠᐃⲆΔ, Mh.ᐃⵠⵠᐃᐃΔΔ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ΔᐃᐃΔ] = [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.Δᐃᐃᐃ] = [Mh.ΔⵠΔⵠⵠᐃΔ, Mh.ΔⲆⲆΔⲆⲆⵠ, Mh.ⵠᐃᐃⲆΔΔΔ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ᐃΔⲆΔ] = [Mh.ⲆᐃᐃⲆΔΔᐃ, Mh.ᐃⵠᐃᐃΔⲆᐃ, Mh.ⲆⵠⲆᐃΔⵠⲆ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ⵠⵠⵠⵠ] = [Mh.ΔⲆⲆᐃᐃΔⲆ, Mh.ⵠᐃⲆᐃΔᐃΔ, Mh.ᐃⵠΔⵠⲆᐃΔ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ⲆⲆΔΔ] = [Mh.ⲆΔⵠΔᐃⲆᐃ, Mh.ⵠᐃⵠⲆᐃᐃⲆ, Mh.ΔⲆⲆⵠΔⲆΔ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ⵠᐃⲆⲆ] = [Mh.ⲆⵠΔᐃΔⲆⵠ, Mh.ⲆⵠⵠⲆⵠⵠⲆ, Mh.ΔΔᐃΔΔⵠᐃ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.Ⲇⵠᐃⵠᐃ] = [Mh.ⵠⲆⵠⲆⵠᐃⲆ, Mh.ⵠΔⲆΔⲆⵠΔ, Mh.ⵠⵠΔⲆᐃᐃⵠ];
        ⵠⵠⵠⲆⲆⵠⵠ[aj.ⲆⵠⲆᐃᐃⵠᐃ] = [Mh.ⵠᐃᐃⲆᐃⲆΔ, Mh.ΔⵠΔΔᐃΔⵠ, Mh.ⲆΔᐃᐃᐃᐃΔ];
        ⵠᐃⲆⵠⵠⲆⵠ = d;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 205, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 300, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 395, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, xn, 65, 205, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 300, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, $g, 65, 395, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, pt, 159, 205, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Yd, 159, 300, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, _t, 159, 395, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(39, 122, 0, [Mh.ⲆⲆΔⲆΔⵠᐃ, Mh.ⵠⵠᐃⵠᐃⲆⵠ, Mh.ᐃᐃΔᐃΔⵠⲆ], da, ea, undefined, -61, 315, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(39, 122, 0, [Mh.ᐃΔⵠⵠᐃᐃΔ, Mh.ᐃⵠⲆⲆΔⲆΔ, Mh.ᐃⵠⵠⵠⵠⲆⵠ], da, ea, undefined, 260, 315, ba | _, ha);
        this.buttons[d++].view = I;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(K);
        }, -320, 470, ba | _, ha);
        this.buttons[d++].view = I;
        ⲆΔΔⲆᐃΔⲆⵠⵠ = d;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, fq, -29, 205, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 300, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 395, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ta, 65, 205, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 300, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 395, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 159, 205, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ze, 159, 300, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ze, 159, 395, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(39, 122, 0, [Mh.ⲆⲆΔⲆΔⵠᐃ, Mh.ⵠⵠᐃⵠᐃⲆⵠ, Mh.ᐃᐃΔᐃΔⵠⲆ], da, ea, Pl, -61, 315, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(39, 122, 0, [Mh.ᐃΔⵠⵠᐃᐃΔ, Mh.ᐃⵠⲆⲆΔⲆΔ, Mh.ᐃⵠⵠⵠⵠⲆⵠ], da, ea, undefined, 260, 315, ba | _, ha);
        this.buttons[d++].view = Q;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(K);
        }, -320, 470, ba | _, ha);
        this.buttons[d++].view = Q;
        ⵠⵠᐃΔᐃⵠⲆᐃᐃ = d;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Pl, -29, 205, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Wr, -29, 300, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, oh, -29, 395, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 205, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, ei, 65, 300, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 395, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, jj, 159, 205, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 159, 300, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ts, 159, 395, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(39, 122, 0, [Mh.ⲆⲆΔⲆΔⵠᐃ, Mh.ⵠⵠᐃⵠᐃⲆⵠ, Mh.ᐃᐃΔᐃΔⵠⲆ], da, ea, undefined, -61, 315, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(39, 122, 0, [Mh.ᐃΔⵠⵠᐃᐃΔ, Mh.ᐃⵠⲆⲆΔⲆΔ, Mh.ᐃⵠⵠⵠⵠⲆⵠ], da, ea, undefined, 260, 315, ba | _, ha);
        this.buttons[d++].view = G;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(K);
        }, -320, 470, ba | _, ha);
        this.buttons[d++].view = G;
        ΔΔⵠⵠⵠᐃᐃⲆⵠ = d;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 205, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 300, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 395, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 205, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, $g, 65, 300, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ft, 65, 395, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, pt, 159, 205, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, hg, 159, 300, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, fq, 159, 395, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(39, 122, 0, [Mh.ⲆⲆΔⲆΔⵠᐃ, Mh.ⵠⵠᐃⵠᐃⲆⵠ, Mh.ᐃᐃΔᐃΔⵠⲆ], da, ea, pt, -61, 315, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(39, 122, 0, [Mh.ᐃΔⵠⵠᐃᐃΔ, Mh.ᐃⵠⲆⲆΔⲆΔ, Mh.ᐃⵠⵠⵠⵠⲆⵠ], da, ea, ei, 260, 315, ba | _, ha);
        this.buttons[d++].view = M;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(K);
        }, -320, 470, ba | _, ha);
        this.buttons[d++].view = M;
        ⲆⵠΔⲆᐃᐃⵠΔΔ = d;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Pl, -29, 205, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ze, -29, 300, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Pl, -29, 395, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 205, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 300, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Yd, 65, 395, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ts, 159, 205, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, pt, 159, 300, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ze, 159, 395, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(39, 122, 0, [Mh.ⲆⲆΔⲆΔⵠᐃ, Mh.ⵠⵠᐃⵠᐃⲆⵠ, Mh.ᐃᐃΔᐃΔⵠⲆ], da, ea, undefined, -61, 315, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(39, 122, 0, [Mh.ᐃΔⵠⵠᐃᐃΔ, Mh.ᐃⵠⲆⲆΔⲆΔ, Mh.ᐃⵠⵠⵠⵠⲆⵠ], da, ea, oh, 260, 315, ba | _, ha);
        this.buttons[d++].view = F;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(K);
        }, -320, 470, ba | _, ha);
        this.buttons[d++].view = F;
        ᐃΔⲆᐃΔⲆⲆⵠΔ = d;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 205, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ft, -29, 300, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, -29, 395, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, yk, 65, 205, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 300, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 65, 395, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 159, 205, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, undefined, 159, 300, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(178, 182, 0, [Mh.ΔΔⲆΔ, Mh.ᐃⵠⵠⵠ, Mh.ⲆΔᐃⵠ], da, ea, Ta, 159, 395, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(39, 122, 0, [Mh.ⲆⲆΔⲆΔⵠᐃ, Mh.ⵠⵠᐃⵠᐃⲆⵠ, Mh.ᐃᐃΔᐃΔⵠⲆ], da, ea, undefined, -61, 315, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(39, 122, 0, [Mh.ᐃΔⵠⵠᐃᐃΔ, Mh.ᐃⵠⲆⲆΔⲆΔ, Mh.ᐃⵠⵠⵠⵠⲆⵠ], da, ea, ei, 260, 315, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(K);
        }, -320, 470, ba | _, ha);
        this.buttons[d++].view = J;
        this.buttons[d] = mf(260, 260, 0, [Mh.ΔᐃΔᐃⵠⲆᐃ, Mh.ΔᐃΔⵠΔⵠᐃ, Mh.ⲆΔⲆΔⲆⲆᐃ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                _x(3, 50);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, ha);
        this.buttons[d++].view = B;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 309, 180, ba | _, ha);
        this.buttons[d++].view = B;
        this.buttons[d] = mf(260, 260, 0, [Mh.ΔΔⲆᐃΔᐃⲆ, Mh.ΔΔⲆⲆᐃⵠΔ, Mh.ⲆⲆΔΔᐃⲆⵠ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                _x(0, 100);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, ha);
        this.buttons[d++].view = k;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 309, 180, ba | _, ha);
        this.buttons[d++].view = k;
        this.buttons[d] = mf(260, 260, 0, [Mh.Ⲇⵠᐃⵠⵠᐃᐃ, Mh.ⲆᐃΔⵠᐃⵠᐃ, Mh.ᐃΔⵠⲆⲆᐃᐃ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                _x(4, 150);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, ha);
        this.buttons[d++].view = x;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 309, 180, ba | _, ha);
        this.buttons[d++].view = x;
        this.buttons[d] = mf(260, 260, 0, [Mh.ᐃⲆⵠⵠⲆᐃⲆ, Mh.ⲆⲆⵠⵠⲆᐃⲆ, Mh.ᐃⲆΔⲆⵠᐃᐃ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                _x(1, 300);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, ha);
        this.buttons[d++].view = E;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 309, 180, ba | _, ha);
        this.buttons[d++].view = E;
        this.buttons[d] = mf(260, 260, 0, [Mh.ⵠᐃⵠⵠᐃΔΔ, Mh.ⲆⵠΔⵠΔⵠᐃ, Mh.ΔΔΔᐃⲆᐃΔ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                _x(2, 600);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, ha);
        this.buttons[d++].view = A;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 309, 180, ba | _, ha);
        this.buttons[d++].view = A;
        this.buttons[d] = mf(260, 260, 0, [Mh.ᐃⲆⵠⵠⲆᐃⲆ, Mh.ⲆⲆⵠⵠⲆᐃⲆ, Mh.ᐃⲆΔⲆⵠᐃᐃ], da, ea, function () {
            if (H.ⲆⲆΔⲆⵠ()) {
                _x(5, 300);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, ha);
        this.buttons[d++].view = D;
        this.buttons[d] = mf(115, 73, 0, [Mh.ⵠΔΔⲆⵠ, Mh.ᐃΔᐃᐃⲆ, Mh.ΔΔᐃᐃⲆ], da, ea, function () {
            U(f);
        }, 309, 180, ba | _, ha);
        this.buttons[d++].view = D;
        var ta = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ⵠⲆᐃΔⲆΔΔ, Mh.ⵠΔⵠⲆⲆⵠᐃ, Mh.ⲆᐃⵠⵠΔⵠΔ], da, ea, function () {
            sa(Ts, 0);
        }, -305, 132, ba | _, ha);
        this.buttons[d++].view = p;
        var ua = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ΔⲆⵠⵠᐃⵠⲆ, Mh.ΔⵠᐃⵠᐃⲆΔ, Mh.ⲆⵠⵠΔⲆⵠΔ], da, ea, function () {
            sa(undefined, 1);
        }, -273, 132, ba | _, ha);
        this.buttons[d++].view = p;
        var wa = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ⲆⲆᐃⵠΔᐃΔ, Mh.ⵠⲆⲆΔⲆⵠⵠ, Mh.ⵠⲆⵠⲆΔⵠⵠ], da, ea, function () {
            sa(undefined, 2);
        }, -241, 132, ba | _, ha);
        this.buttons[d++].view = p;
        var xa = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ᐃᐃΔᐃⵠΔⲆ, Mh.ⵠᐃᐃⲆᐃⲆᐃ, Mh.ⵠⲆΔⵠⲆΔⵠ], da, ea, function () {
            sa(Yd, 3);
        }, -305, 165, ba | _, ha);
        this.buttons[d++].view = p;
        var ya = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ⵠΔΔᐃⵠⲆⲆ, Mh.ΔⲆᐃⲆΔΔⲆ, Mh.ᐃΔⵠⲆⲆⵠᐃ], da, ea, function () {
            sa(undefined, 4);
        }, -273, 165, ba | _, ha);
        this.buttons[d++].view = p;
        var za = d;
        this.buttons[d] = mf(46, 51, 0, [Mh.ᐃⲆⲆⲆΔⵠⲆ, Mh.ⲆᐃⲆⵠΔⵠᐃ, Mh.ⲆᐃⲆΔΔΔΔ], da, ea, function () {
            sa(Ta, 5);
        }, -241, 165, ba | _, ha);
        this.buttons[d++].view = p;
        var Aa = d;
        this.buttons[d] = mf(460, 73, 0, [Mh.ⵠΔᐃΔⲆⲆΔ, Mh.ⵠᐃⲆⲆⵠⵠⵠ, Mh.ᐃⲆᐃᐃᐃΔⲆ], da, ea, function () {
            sa(-1);
        }, -180, 170, ba | _, ha);
        this.buttons[d++].view = p;
        var Ba = d;
        this.buttons[d] = mf(222, 68, 0, [Mh.ΔΔⲆⵠᐃΔⵠ, Mh.ᐃᐃⵠⵠᐃⵠⵠ, Mh.ⵠⵠΔΔⲆⲆⵠ], da, ea, function () {
            sa(0);
        }, -180, 215, ba | _, ha);
        this.buttons[d++].view = p;
        var Ca = d;
        this.buttons[d] = mf(222, 68, 0, [Mh.Ⲇᐃⵠⵠᐃⵠⵠ, Mh.ⵠⵠΔᐃᐃΔᐃ, Mh.ᐃⵠⵠᐃⵠⵠᐃ], da, ea, function () {
            sa(4);
        }, -180, 260, ba | _, ha);
        this.buttons[d++].view = p;
        var Da = d;
        this.buttons[d] = mf(222, 68, 0, [Mh.ΔΔⲆⲆᐃⲆⲆ, Mh.ⵠⵠΔⵠⲆⲆᐃ, Mh.ⲆΔⲆᐃⲆⵠΔ], da, ea, function () {
            sa(2);
        }, -60, 215, ba | _, ha);
        this.buttons[d++].view = p;
        var Ea = d;
        this.buttons[d] = mf(222, 68, 0, [Mh.ᐃΔⵠΔᐃΔⲆ, Mh.ⲆᐃⵠⵠᐃΔΔ, Mh.ⲆⲆΔᐃᐃΔⲆ], da, ea, function () {
            sa(3);
        }, -60, 260, ba | _, ha);
        this.buttons[d++].view = p;
        this.ⵠᐃΔⵠᐃⵠⲆ = d;
        this.buttons[d] = mf(143, 66, 0, [Mh.ⲆⲆΔΔⵠΔΔ, Mh.ᐃⵠⵠΔⲆΔⵠ, Mh.ᐃΔᐃᐃΔᐃⵠ], da, ea, function () {
            fy(hg, nx.ⵠᐃΔⵠᐃⵠⲆ);
        }, -298, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⲆⲆᐃᐃⵠᐃᐃ = d;
        this.buttons[d] = mf(104, 66, 0, [Mh.ⵠΔⲆⵠᐃᐃΔ, Mh.ᐃΔΔᐃᐃⲆᐃ, Mh.ⲆᐃⵠⲆⲆᐃⵠ], da, ea, function () {
            fy(oh, nx.ⲆⲆᐃᐃⵠᐃᐃ);
        }, -223, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⵠⵠᐃΔΔⵠⵠ = d;
        this.buttons[d] = mf(110, 66, 0, [Mh.ᐃⵠᐃΔΔⲆΔ, Mh.ΔⲆⵠⲆⲆΔΔ, Mh.ⲆⲆⵠᐃⵠⵠⲆ], da, ea, function () {
            fy(br, nx.ⵠⵠᐃΔΔⵠⵠ);
        }, -168, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ⵠⵠᐃΔⵠⵠⵠ = d;
        this.buttons[d] = mf(88, 66, 0, [Mh.ⲆΔⲆⵠΔᐃⲆ, Mh.ⵠΔΔΔⲆⵠΔ, Mh.ⵠⵠᐃⵠⲆⲆΔ], da, ea, function () {
            fy(yk, nx.ⵠⵠᐃΔⵠⵠⵠ);
        }, -110, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.ΔⵠΔΔⵠⲆΔ = d;
        this.buttons[d] = mf(88, 66, 0, [Mh.ᐃⵠᐃΔⲆⵠΔ, Mh.ᐃⵠⲆⲆⲆΔⵠ, Mh.ⲆᐃΔΔᐃⲆᐃ], da, ea, function () {
            fy(undefined, nx.ΔⵠΔΔⵠⲆΔ);
        }, -63, 110, ba | _, ha);
        this.buttons[d++].view = y;
        this.buttons[d] = mf(86, 44, 0, [Mh.ΔᐃΔⵠΔᐃⲆ, Mh.ⵠΔⲆⲆⲆΔⲆ, Mh.ⵠⵠⲆᐃᐃΔⵠ], da, ea, function () {
            cj.open("./terms.html", "_blank");
        }, 349, 290, ba | _, ha);
        this.buttons[d++].view = f;
        var Fa = new e(bj.ΔⲆⵠΔΔ, ⵠᐃⲆⵠⵠⲆⵠ, function (a) {
            nx.ᐃΔΔΔ = a;
            if (nx.unlock.ᐃΔΔΔ[a] === 1) {
                ᐃⵠⵠΔ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃΔΔΔ, this.unlock.ᐃΔΔΔ);
        var Ga = new e(bj.ΔⵠᐃΔ, ΔΔⵠⵠⵠᐃᐃⲆⵠ, function (a) {
            nx.ΔⵠⵠⲆⵠ = a;
            if (nx.unlock.ΔⵠⵠⲆⵠ[a] === 1) {
                ᐃⵠⵠΔ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔⵠⵠⲆⵠ, this.unlock.ΔⵠⵠⲆⵠ);
        var Ha = new e(bj.ΔⲆᐃⵠⲆ, ⲆⵠΔⲆᐃᐃⵠΔΔ, function (a) {
            nx.ᐃᐃΔⵠⵠ = a;
            if (nx.unlock.ᐃᐃΔⵠⵠ[a] === 1) {
                ᐃⵠⵠΔ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃᐃΔⵠⵠ, this.unlock.ᐃᐃΔⵠⵠ);
        var Ia = new e(bj.ΔⵠⵠΔᐃ, ᐃΔⲆᐃΔⲆⲆⵠΔ, function (a) {
            nx.ᐃᐃⵠΔⵠ = a;
            if (nx.unlock.ᐃᐃⵠΔⵠ[a] === 1) {
                ᐃⵠⵠΔ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃᐃⵠΔⵠ, this.unlock.ᐃᐃⵠΔⵠ);
        var Ja = new e(bj.ΔⵠⵠΔᐃ, ⵠⵠᐃΔᐃⵠⲆᐃᐃ, function (a) {
            nx.ⲆⵠΔⲆΔ = a;
            if (nx.unlock.ⲆⵠΔⲆΔ[a] === 1) {
                ᐃⵠⵠΔ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆⵠΔⲆΔ, this.unlock.ⲆⵠΔⲆΔ);
        var Ka = new e(bj.ΔⵠᐃⲆⲆ, ⲆΔΔⲆᐃΔⲆⵠⵠ, function (a) {
            nx.ΔⵠⲆᐃⵠ = a;
            if (nx.unlock.ΔⵠⲆᐃⵠ[a] === 1) {
                ᐃⵠⵠΔ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔⵠⲆᐃⵠ, this.unlock.ΔⵠⲆᐃⵠ);
        this.ⵠⲆΔⵠᐃⲆⵠ = function (a) {
            wx.ⵠⲆΔΔ = pf(H.ⲆⲆ, a);
            for (var b = 0; b < H.buttons.length; b++) {
                if (H.buttons[b].info.active === ia) {
                    H.buttons[b].ⲆⵠΔⵠ(H.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                }
            }
        };
        this.ⵠᐃⲆᐃⵠⵠΔ = function (a) {
            wx.ⵠⲆΔΔ = pf(H.ⲆⲆ, a);
            for (var b = 0; b < H.buttons.length; b++) {
                var c = H.buttons[b];
                if (ia === c.info.active && c.ⲆⵠΔⵠ(H.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ᐃΔᐃᐃᐃⵠΔ = vn;
        this.ⵠⲆⲆΔⵠΔⲆ = function (a) {
            wx.ⵠⲆΔΔ = pf(H.ⲆⲆ, a);
            var c = Xg;
            for (var d = 0; H.buttons.length > d; d++) {
                if (ia === H.buttons[d].info.active) {
                    c |= H.buttons[d].ⲆⵠΔⵠ(H.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                }
            }
            if (H.ᐃΔᐃᐃᐃⵠΔ !== c) {
                H.ᐃΔᐃᐃᐃⵠΔ = c;
                b.style.cursor = c ? H.ⲆᐃⲆⲆⲆᐃᐃ : H.ⵠⲆⲆΔᐃᐃⵠ;
            }
        };
        this.ⵠᐃⵠΔⲆᐃΔ = function () {
            cj.addEventListener("mousedown", this.ⵠⲆΔⵠᐃⲆⵠ, $n);
            cj.addEventListener("mouseup", this.ⵠᐃⲆᐃⵠⵠΔ, false);
            cj.addEventListener("mousemove", this.ⵠⲆⲆΔⵠΔⲆ, false);
        };
        this.ΔᐃΔⵠΔⲆⵠ = function () {
            cj.removeEventListener("mousedown", this.ⵠⲆΔⵠᐃⲆⵠ, false);
            cj.removeEventListener("mouseup", this.ⵠᐃⲆᐃⵠⵠΔ, false);
            cj.removeEventListener("mousemove", this.ⵠⲆⲆΔⵠΔⲆ, va);
        };
    }
    function $w(b, c) {
        this.ⲆⲆ = b;
        this.ⵠ = c;
        var d = this;
        this.ΔⵠⲆΔᐃⵠⲆ = va;
        this.ΔⲆΔΔΔⵠΔ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                y: 0,
                x: 0
            },
            ⵠᐃᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ᐃᐃᐃⲆΔ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + rx.ΔⲆΔᐃⲆⵠΔ.ᐃⵠᐃⵠⲆⲆⵠ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + zb[335] + " : " + rx.ᐃᐃΔ + "</div><div class=\"stats\"> " + zb[334] + " : " + rx.ΔⲆΔᐃⲆⵠΔ.ⲆᐃΔⲆⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + zb[333] + " : " + rx.ΔⲆΔᐃⲆⵠΔ.ⲆⲆⲆᐃΔ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + rx.ΔⲆΔᐃⲆⵠΔ.ΔⵠⵠΔΔᐃⵠ + " " + zb[332] + "</div></div><div id=\"shop_points\">" + zb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + zb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + zb[330] + "</div></div><div id=\"bbback\">" + zb[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", Xw, false);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    sx.ΔΔⵠⲆΔ(nx.ΔⲆⲆⲆᐃ);
                }, va);
                document.getElementById("fffacebook").addEventListener("mouseup", Yw, _e);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", Jx + "getBreadAndScore?userid=" + Qx);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - nx.ΔᐃᐃⵠΔ;
                            nx.ΔᐃᐃⵠΔ = b.b;
                            nx.ⲆⲆⲆᐃΔ = b.s;
                            nx.ⵠⲆΔⲆΔ = nx.ⲆᐃⵠⲆⲆⲆⲆ(nx.ⲆⲆⲆᐃΔ);
                            nx.ᐃⵠⲆΔⲆⲆΔ = nx.ΔⵠⵠⲆᐃΔⲆ(nx.ⲆⲆⲆᐃΔ);
                            nx.ⲆⲆⵠⵠⲆᐃᐃ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.ⵠᐃᐃ();
            if (++g != 30) {
                cj.setTimeout(e, 33);
            } else {
                d.ⵠᐃᐃ();
            }
        }
        this.ΔΔⵠⲆΔ = function (a) {
            if (d.ΔⵠⲆΔᐃⵠⲆ === Ai) {
                d.ΔⵠⲆΔᐃⵠⲆ = false;
                f = a;
                i = -1;
                j();
                Bx();
            }
        };
        var i = -1;
        function j() {
            d.ⵠᐃᐃ();
            if (++i == 30) {
                d.stop();
                d.ΔⲆΔΔΔⵠΔ.style.display = "none";
                f();
                return;
            }
            cj.setTimeout(j, 33);
        }
        this.ⵠⲆⲆΔⲆ = Ur;
        this.stop = function () {
            this.ⵠⲆⲆΔⲆ = vn;
        };
        this.ΔⲆⲆⲆᐃ = function () {
            Dx();
            document.getElementById("game_body").style.backgroundColor = Er.ᐃΔᐃᐃΔ[px.time];
            d.ΔⲆΔΔΔⵠΔ.ᐃᐃᐃⲆΔ();
            nx.ⲆⲆΔⲆΔ.style.display = "inline-block";
            d.ⵠⲆⲆΔⲆ = true;
            d.ΔⵠⲆΔᐃⵠⲆ = true;
            i = -1;
            g = 0;
            e();
        };
        this.ⵠᐃᐃ = function () {
            this.ΔⲆΔΔΔⵠΔ.translate.x = Math.floor(lo - 275);
            this.ΔⲆΔΔΔⵠΔ.translate.y = Math.floor(hq - this.ΔⲆΔΔΔⵠΔ.height - 28);
            nx.ⲆⲆΔⲆΔ.translate.x = this.ΔⲆΔΔΔⵠΔ.translate.x - 350;
            nx.ⲆⲆΔⲆΔ.translate.y = this.ΔⲆΔΔΔⵠΔ.translate.y + 0;
            nx.ⲆⲆΔⲆΔ.ⵠᐃᐃ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ΔⲆΔΔΔⵠΔ.translate.y -= a;
            }
            this.ΔⲆΔΔΔⵠΔ.ⵠᐃᐃ();
        };
        this.ⵠᐃΔⵠ = function () {
            kp();
            rx.alert.ⵠᐃΔⵠ("#FFF", "#000");
        };
    }
    function _w(b, c, d, e, f) {
        const g = ~(b & 56515) & 56515 | ~(b & 56515) & b;
        const a = c ^ 7497;
        const i = Ep(g, a, d ^ 39118, (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)) + (24 << (e & 255)) + (0 << (e >> 16 & 255)), (59834 + f) % 65326);
        const j = Ww(g, a);
        return (24 << ((i ^ j) >> 24 & 255)) + (16 << ((i ^ j) >> 16 & 255)) + (8 << ((i ^ j) & 255)) + (0 << ((i ^ j) >> 8 & 255));
    }
    function ax(b, c) {
        var f = this;
        this.ⲆⲆ = b;
        this.ⵠ = c;
        if (cj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⵠⲆⲆΔᐃᐃⵠ = "default";
            this.ⲆᐃⲆⲆⲆᐃᐃ = "pointer";
        } else {
            this.ⵠⲆⲆΔᐃᐃⵠ = "url('img/cursor0.png'), default";
            this.ⲆᐃⲆⲆⲆᐃᐃ = "url('img/cursor1.png'), pointer";
        }
        this.ⲆⲆᐃΔΔᐃᐃ = 1;
        this.ᐃⲆᐃⲆΔⲆⲆ = 1;
        this.ᐃⵠⲆᐃΔⵠᐃ = 1;
        this.ⲆⲆᐃᐃⵠᐃⵠ = 1;
        this.ᐃΔⲆΔΔⵠΔⲆⵠ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ⲆⵠⲆⵠ = {
            ΔⲆⲆⲆΔⵠⵠ: mf(60, 60, 0, ᐃⵠ[782]),
            Δᐃⵠᐃᐃⵠᐃ: mf(60, 60, 0, ᐃⵠ[783])
        };
        this.sign = {
            open: false,
            ΔΔⲆᐃᐃᐃⵠᐃⲆ: 0,
            ᐃⵠⲆⲆᐃΔᐃ: document.getElementById("sign_object"),
            ⲆⵠᐃᐃⲆⲆⲆ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: mf(60, 60, 0, ᐃⵠ[803]),
            ᐃᐃΔΔⲆΔΔ: function () {
                var a = Math.floor(Math.floor((3 + rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ.length) / 4) * (10 + ᐃⵠ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 150) + "px";
                this.style.top = Math.floor(hq - 115) + "px";
            },
            ΔΔⵠⲆΔ: function () {
                tx.sign.style.display = "none";
                tx.sign.open = false;
            },
            select: function () {
                tx.sign.open = !tx.sign.open;
                if (tx.sign.open) {
                    tx.sign.style.display = "inline-block";
                } else {
                    tx.sign.style.display = "none";
                }
            },
            ok: function () {
                ⲆᐃⲆᐃ.ᐃᐃⵠᐃⲆᐃΔᐃᐃ(rx.sign.ΔᐃΔⵠⲆ, tx.sign.ⲆⵠᐃᐃⲆⲆⲆ);
                tx.sign.select();
            },
            up: function () {
                tx.sign.ⲆⵠᐃᐃⲆⲆⲆ = tx.sign.ⲆⵠᐃᐃⲆⲆⲆ === 0 ? 3 : tx.sign.ⲆⵠᐃᐃⲆⲆⲆ - 1;
                tx.sign.ᐃⵠⲆⲆᐃΔᐃ.src = "./img/sign" + tx.sign.ⲆⵠᐃᐃⲆⲆⲆ + ".png";
            },
            down: function () {
                tx.sign.ⲆⵠᐃᐃⲆⲆⲆ = (tx.sign.ⲆⵠᐃᐃⲆⲆⲆ + 1) % 4;
                tx.sign.ᐃⵠⲆⲆᐃΔᐃ.src = "./img/sign" + tx.sign.ⲆⵠᐃᐃⲆⲆⲆ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Gh);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, Nq);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
        this.ⲆⵠⲆΔⲆ = {
            open: ws,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ΔⲆᐃⵠΔ: 1,
                b: 1,
                a: 3,
                ⵠᐃⵠΔⲆ: 316
            }, {
                id: 1,
                name: "stone",
                ΔⲆᐃⵠΔ: 1,
                b: 1,
                a: 4,
                ⵠᐃⵠΔⲆ: 315
            }, {
                id: 2,
                name: "gold",
                ΔⲆᐃⵠΔ: 1,
                b: 1,
                a: 6,
                ⵠᐃⵠΔⲆ: 297
            }, {
                id: 3,
                name: "diamond",
                ΔⲆᐃⵠΔ: 4,
                b: 4,
                a: 1,
                ⵠᐃⵠΔⲆ: 298
            }, {
                id: 4,
                name: "amethyst",
                ΔⲆᐃⵠΔ: 8,
                b: 8,
                a: 1,
                ⵠᐃⵠΔⲆ: 418
            }, {
                id: 5,
                name: "reidite",
                ΔⲆᐃⵠΔ: 16,
                b: 16,
                a: 1,
                ⵠᐃⵠΔⲆ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ΔⲆᐃⵠΔ: 10,
                b: 10,
                a: 1,
                ⵠᐃⵠΔⲆ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ΔⲆᐃⵠΔ: 16,
                b: 16,
                a: 1,
                ⵠᐃⵠΔⲆ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ΔⲆᐃⵠΔ: 20,
                b: 20,
                a: 1,
                ⵠᐃⵠΔⲆ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ΔⲆᐃⵠΔ: 30,
                b: 30,
                a: 1,
                ⵠᐃⵠΔⲆ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ΔⲆᐃⵠΔ: 40,
                b: 40,
                a: 1,
                ⵠᐃⵠΔⲆ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ΔⲆᐃⵠΔ: 60,
                b: 60,
                a: 1,
                ⵠᐃⵠΔⲆ: 966
            }],
            button: mf(60, 60, 0, ᐃⵠ[795]),
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 450) + "px";
                this.style.top = Math.floor(hq - 270) + "px";
            },
            select: function () {
                tx.ⲆⵠⲆΔⲆ.open = !tx.ⲆⵠⲆΔⲆ.open;
                if (tx.ⲆⵠⲆΔⲆ.open) {
                    tx.ⲆⵠⲆΔⲆ.style.display = "inline-block";
                } else {
                    tx.ⲆⵠⲆΔⲆ.style.display = "none";
                }
            },
            ΔΔⵠⲆΔ: function () {
                tx.ⲆⵠⲆΔⲆ.style.display = "none";
                tx.ⲆⵠⲆΔⲆ.open = false;
            },
            ΔⲆᐃᐃΔⲆⲆ: function () {
                ⲆᐃⲆᐃ.ⲆᐃⵠΔⲆⵠⲆⵠΔ(this.ⲆᐃⵠΔᐃᐃΔ);
            },
            ᐃⵠᐃΔⵠ: function () {
                this.id;
                if (this.ⲆᐃⵠΔᐃᐃΔ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ⲆᐃⵠΔᐃᐃΔ.b);
                    this.ⲆᐃⵠΔᐃᐃΔ.ΔⲆᐃⵠΔ = a;
                    document.getElementById(this.ⲆᐃⵠΔᐃᐃΔ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ⲆᐃⵠΔᐃᐃΔ.a);
                    this.ⲆᐃⵠΔᐃᐃΔ.ΔⲆᐃⵠΔ = a;
                    document.getElementById(this.ⲆᐃⵠΔᐃᐃΔ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ⲆⵠⲆΔⲆ.ΔΔⵠⲆΔ, false);
        var e = [["mouseup", this.ⲆⵠⲆΔⲆ.ΔⲆᐃᐃΔⲆⲆ, "buy_"], ["click", this.ⲆⵠⲆΔⲆ.ᐃⵠᐃΔⵠ, ""], ["change", this.ⲆⵠⲆΔⲆ.ᐃⵠᐃΔⵠ, ""], ["keypress", this.ⲆⵠⲆΔⲆ.keypress, ""]];
        for (var i = 0; i < this.ⲆⵠⲆΔⲆ.items.length; i++) {
            var j = this.ⲆⵠⲆΔⲆ.items[i];
            document.getElementById(j.name + "_market").src = rs === ᐃⵠ[j.ⵠᐃⵠΔⲆ][0].Δⵠⵠᐃᐃ ? ᐃⵠ[j.ⵠᐃⵠΔⲆ][0].src : ᐃⵠ[j.ⵠᐃⵠΔⲆ][0].Δⵠⵠᐃᐃ;
            if (j.a === 1) {
                document.getElementById(j.name + "_trad_number").innerHTML = j.b;
                document.getElementById(j.name + "_number").value = 1;
                document.getElementById(j.name + "_number").step = 1;
                document.getElementById(j.name + "_number").min = 1;
                document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
            } else {
                document.getElementById(j.name + "_trad_number").innerHTML = 1;
                document.getElementById(j.name + "_number").value = j.a;
                document.getElementById(j.name + "_number").step = j.a;
                document.getElementById(j.name + "_number").min = j.a;
            }
            document.getElementById("buy_" + j.name + "_number").ⲆᐃⵠΔᐃᐃΔ = j;
            document.getElementById(j.name + "_number").ⲆᐃⵠΔᐃᐃΔ = j;
            for (var k = 0; e.length > k; k++) {
                document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], cb);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: false,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ΔⵠⵠΔⵠ: document.getElementById("agree_ing").style,
            ΔⵠⲆΔⲆⵠⵠ: document.getElementById("cancel_agree_ing").style,
            ⲆᐃⲆⵠᐃⵠⵠ: document.getElementById("quest_agree_ing").style,
            ⲆᐃᐃᐃΔⲆᐃ: document.getElementById("spectator_agree_ing").style,
            ᐃᐃⵠⵠⵠⵠᐃ: document.getElementById("auto_feed_agree_ing").style,
            ᐃΔΔᐃⲆⵠⲆ: document.getElementById("info_agree_ing").style,
            ᐃΔⲆⵠΔΔᐃ: document.getElementById("pixelated_agree_ing").style,
            button: mf(60, 60, 0, ᐃⵠ[727]),
            ᐃⵠⲆᐃᐃⲆΔᐃⵠ: function () {
                tx.options.open = !tx.options.open;
                if (tx.options.open) {
                    tx.options.style.display = "inline-block";
                } else {
                    tx.options.style.display = "none";
                }
            },
            ᐃΔⵠᐃᐃΔⵠᐃΔ: function () {
                nx.ΔⲆᐃⲆⲆᐃⲆ();
            },
            ⵠⵠⵠⲆᐃᐃᐃⵠⵠ: function () {
                nx.ⵠⲆⲆⵠⲆᐃⲆ();
            },
            high: function () {
                nx.ᐃⲆⲆΔⲆᐃᐃΔᐃ();
            },
            low: function () {
                nx.ΔΔᐃΔⲆⵠⲆⲆΔ();
            },
            ⲆΔᐃΔⵠ: function () {
                tx.Δᐃⵠᐃ.ⲆΔᐃΔⵠ();
            },
            ⲆᐃⵠᐃⵠΔᐃᐃΔ: function () {
                tx.ΔΔⲆⵠⲆ.ⲆΔᐃΔⵠ();
            },
            ᐃΔᐃⲆᐃⲆΔⵠΔ: function () {
                tx.ΔⵠⵠΔ.ⲆΔᐃΔⵠ();
            },
            ᐃᐃᐃⲆⲆⲆᐃᐃΔ: function () {
                rx.ⵠᐃᐃᐃΔ.ⲆⵠⲆΔⲆΔⲆ();
            },
            ⲆⲆΔᐃⵠⲆⵠᐃⲆ: function () {
                rx.ⲆⲆⲆᐃⲆ.ⲆⵠⲆΔⲆΔⲆ();
            },
            ΔΔⵠⲆΔ: function () {
                tx.options.style.display = "none";
                tx.options.open = false;
            },
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 235) + "px";
                this.style.top = Math.floor(hq - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ᐃΔⵠᐃᐃΔⵠᐃΔ, false);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠⵠⵠⲆᐃᐃᐃⵠⵠ, false);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ΔΔⵠⲆΔ, false);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⲆΔᐃΔⵠ, false);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃΔᐃⲆᐃⲆΔⵠΔ, false);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⲆᐃⵠᐃⵠΔᐃᐃΔ, w);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃᐃⲆⲆⲆᐃᐃΔ, Gh);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆΔᐃⵠⲆⵠᐃⲆ, false);
        this.ΔΔⲆⵠⲆ = {
            open: _e,
            ⵠΔⵠᐃⵠ: ᐃⵠⵠΔ.get("starve_cancel") && ᐃⵠⵠΔ.get("starve_cancel") === "0" ? 0 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ΔⵠⵠΔⵠ: document.getElementById("cancel_agree").style,
            button: 0,
            ᐃⲆ: 0,
            ΔΔⵠⲆΔ: function () {
                tx.ΔΔⲆⵠⲆ.style.display = "none";
                tx.ΔΔⲆⵠⲆ.open = false;
            },
            ᐃⲆⵠⵠᐃⵠⲆ: function () {
                if (rx.ⲆΔⲆᐃ.ΔᐃᐃⲆⵠ) {
                    ⲆᐃⲆᐃ.ΔⲆΔⵠΔᐃⵠᐃΔ();
                }
                tx.ΔΔⲆⵠⲆ.ΔΔⵠⲆΔ();
            },
            ⲆΔᐃΔⵠ: function () {
                if (tx.ΔΔⲆⵠⲆ.ⵠΔⵠᐃⵠ) {
                    ᐃⵠⵠΔ.set("starve_cancel", "0");
                    tx.ΔΔⲆⵠⲆ.ΔⵠⵠΔⵠ.display = "inline-block";
                    tx.options.ΔⵠⲆΔⲆⵠⵠ.display = "none";
                } else {
                    ᐃⵠⵠΔ.set("starve_cancel", "1");
                    tx.ΔΔⲆⵠⲆ.ΔⵠⵠΔⵠ.display = "none";
                    tx.options.ΔⵠⲆΔⲆⵠⵠ.display = "inline-block";
                }
                tx.ΔΔⲆⵠⲆ.ⵠΔⵠᐃⵠ = !tx.ΔΔⲆⵠⲆ.ⵠΔⵠᐃⵠ;
            },
            ⵠⵠⵠⲆᐃⲆΔ: function () {
                if (this.ⵠΔⵠᐃⵠ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.ᐃⲆⵠⵠᐃⵠⲆ();
                }
            },
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 235) + "px";
                this.style.top = Math.floor(hq - 130) + "px";
            }
        };
        this.ΔΔⲆⵠⲆ.id.oncontextmenu = function () {
            return false;
        };
        this.ΔΔⲆⵠⲆ.ΔⵠⵠΔⵠ.display = "none";
        if (this.ΔΔⲆⵠⲆ.ⵠΔⵠᐃⵠ) {
            this.options.ΔⵠⲆΔⲆⵠⵠ.display = "inline-block";
        } else {
            this.options.ΔⵠⲆΔⲆⵠⵠ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔΔⲆⵠⲆ.ᐃⲆⵠⵠᐃⵠⲆ, Xg);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔΔⲆⵠⲆ.ΔΔⵠⲆΔ, false);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔΔⲆⵠⲆ.ⲆΔᐃΔⵠ, false);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, false);
        this.ⵠⲆⵠΔΔⲆᐃ = {
            ⵠΔⵠᐃⵠ: ᐃⵠⵠΔ.get("starve_aliasing") && ᐃⵠⵠΔ.get("starve_aliasing") === "0" ? 0 : 1,
            ⲆᐃⵠⵠⲆⲆⲆ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ⲆΔᐃΔⵠ: function () {
                if (tx.ⵠⲆⵠΔΔⲆᐃ.ⵠΔⵠᐃⵠ === 0) {
                    ᐃⵠⵠΔ.set("starve_aliasing", "1");
                    tx.ⵠⲆⵠΔΔⲆᐃ.ⲆᐃⵠⵠⲆⲆⲆ(1);
                    tx.options.ᐃΔⲆⵠΔΔᐃ.display = "inline-block";
                } else {
                    ᐃⵠⵠΔ.set("starve_aliasing", "0");
                    tx.ⵠⲆⵠΔΔⲆᐃ.ⲆᐃⵠⵠⲆⲆⲆ(0);
                    tx.options.ᐃΔⲆⵠΔΔᐃ.display = "none";
                }
                tx.ⵠⲆⵠΔΔⲆᐃ.ⵠΔⵠᐃⵠ = (tx.ⵠⲆⵠΔΔⲆᐃ.ⵠΔⵠᐃⵠ + 1) % 2;
            }
        };
        if (this.ⵠⲆⵠΔΔⲆᐃ.ⵠΔⵠᐃⵠ === 1) {
            this.options.ᐃΔⲆⵠΔΔᐃ.display = "inline-block";
        } else {
            this.ⵠⲆⵠΔΔⲆᐃ.ⲆᐃⵠⵠⲆⲆⲆ(0);
            this.options.ᐃΔⲆⵠΔΔᐃ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⵠⲆⵠΔΔⲆᐃ.ⲆΔᐃΔⵠ, Nq);
        this.ᐃΔᐃΔᐃ = {
            ⵠΔⵠᐃⵠ: ᐃⵠⵠΔ.get("starve_info_box") ? ᐃⵠⵠΔ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ⲆΔⲆᐃ: 0,
            ⲆΔᐃΔⵠ: function () {
                if (tx.ᐃΔᐃΔᐃ.ⵠΔⵠᐃⵠ === 0) {
                    ᐃⵠⵠΔ.set("starve_info_box", "1");
                    tx.options.ᐃΔΔᐃⲆⵠⲆ.display = "inline-block";
                } else {
                    ᐃⵠⵠΔ.set("starve_info_box", "0");
                    tx.options.ᐃΔΔᐃⲆⵠⲆ.display = "none";
                }
                tx.ᐃΔᐃΔᐃ.ⵠΔⵠᐃⵠ = (tx.ᐃΔᐃΔᐃ.ⵠΔⵠᐃⵠ + 1) % 2;
            },
            ⲆⵠΔⵠ: function (a, b, c) {
                if (a && this.ⵠΔⵠᐃⵠ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : kt[b.id].ⵠΔⵠΔ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ⲆΔⲆᐃ = c;
                }
                return a;
            }
        };
        if (this.ᐃΔᐃΔᐃ.ⵠΔⵠᐃⵠ === 1) {
            this.options.ᐃΔΔᐃⲆⵠⲆ.display = "inline-block";
        } else {
            this.options.ᐃΔΔᐃⲆⵠⲆ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃΔᐃΔᐃ.ⲆΔᐃΔⵠ, false);
        if (ᐃⵠⵠΔ.get("starve_scale")) {
            lq = Number(ᐃⵠⵠΔ.get("starve_scale"));
            document.getElementById("input_ratio").value = lq;
            lq *= Mq / Qq;
            Vq();
        }
        this.ⵠⲆΔᐃᐃⵠΔ = function () {
            ᐃⵠⵠΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            lq = Mq / Qq * document.getElementById("input_ratio").value;
            Vq();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ⵠⲆΔᐃᐃⵠΔ, false);
        this.Δᐃⵠᐃ = {
            open: Eh,
            ⵠΔⵠᐃⵠ: ᐃⵠⵠΔ.get("starve_safe") ? ᐃⵠⵠΔ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ΔⵠⵠΔⵠ: document.getElementById("agree").style,
            button: 0,
            ᐃⲆ: 0,
            ΔΔⵠⲆΔ: function () {
                tx.Δᐃⵠᐃ.style.display = "none";
                tx.Δᐃⵠᐃ.open = Nq;
            },
            all: function () {
                if (!rx.ⵠⵠᐃⵠⵠ.wait) {
                    if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && rx.ⲆΔⲆᐃ.id < 0 && !rx.ⵠⵠΔⲆⵠ.enabled) {
                        ⲆᐃⲆᐃ.ⲆⵠⲆΔᐃⵠⵠᐃᐃ(tx.Δᐃⵠᐃ.button);
                    }
                    tx.Δᐃⵠᐃ.ΔΔⵠⲆΔ();
                }
            },
            ᐃΔⲆᐃ: function () {
                if (rx.ⲆΔⲆᐃ.ⲆⵠΔⵠⲆ && !rx.ⵠⵠᐃⵠⵠ.wait) {
                    if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && rx.ⲆΔⲆᐃ.id < 0 && !rx.ⵠⵠΔⲆⵠ.enabled) {
                        ⲆᐃⲆᐃ.ᐃⲆΔⲆᐃΔⲆⵠᐃ(tx.Δᐃⵠᐃ.button);
                    }
                    tx.Δᐃⵠᐃ.ΔΔⵠⲆΔ();
                }
            },
            ΔⲆⵠⵠᐃΔᐃᐃΔ: function () {
                if (!rx.ⵠⵠᐃⵠⵠ.wait) {
                    if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && rx.ⲆΔⲆᐃ.id < 0 && !rx.ⵠⵠΔⲆⵠ.enabled) {
                        ⲆᐃⲆᐃ.ⵠΔⲆΔⲆⲆΔΔΔ(tx.Δᐃⵠᐃ.button);
                    }
                    tx.Δᐃⵠᐃ.ΔΔⵠⲆΔ();
                }
            },
            ⲆΔᐃΔⵠ: function () {
                if (tx.Δᐃⵠᐃ.ⵠΔⵠᐃⵠ) {
                    ᐃⵠⵠΔ.set("starve_safe", "0");
                    tx.Δᐃⵠᐃ.ΔⵠⵠΔⵠ.display = "inline-block";
                    tx.options.ΔⵠⵠΔⵠ.display = "none";
                } else {
                    ᐃⵠⵠΔ.set("starve_safe", "1");
                    tx.Δᐃⵠᐃ.ΔⵠⵠΔⵠ.display = "none";
                    tx.options.ΔⵠⵠΔⵠ.display = "inline-block";
                }
                tx.Δᐃⵠᐃ.ⵠΔⵠᐃⵠ = !tx.Δᐃⵠᐃ.ⵠΔⵠᐃⵠ;
            },
            ⵠⵠⵠⲆᐃⲆΔ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = ᐃⵠ[Tr[a].ⵠΔ][0].Δⵠⵠᐃᐃ === undefined ? ᐃⵠ[Tr[a].ⵠΔ][0].src : ᐃⵠ[Tr[a].ⵠΔ][0].Δⵠⵠᐃᐃ;
                if (Tr[a].ᐃΔⲆᐃ && !rx.ⵠⲆⲆᐃⲆ && rx.ⲆΔⲆᐃ.ⲆⵠΔⵠⲆ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.ⵠΔⵠᐃⵠ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
            },
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 235) + "px";
                this.style.top = Math.floor(hq - 175) + "px";
            }
        };
        this.Δᐃⵠᐃ.ΔⵠⵠΔⵠ.display = "none";
        if (this.Δᐃⵠᐃ.ⵠΔⵠᐃⵠ) {
            this.options.ΔⵠⵠΔⵠ.display = "inline-block";
        } else {
            this.options.ΔⵠⵠΔⵠ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.Δᐃⵠᐃ.ΔⲆⵠⵠᐃΔᐃᐃΔ, w);
        document.getElementById("yes_delete").addEventListener("mouseup", this.Δᐃⵠᐃ.all, Eh);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.Δᐃⵠᐃ.ᐃΔⲆᐃ, w);
        document.getElementById("no_delete").addEventListener("mouseup", this.Δᐃⵠᐃ.ΔΔⵠⲆΔ, fs);
        document.getElementById("case_agree").addEventListener("mouseup", this.Δᐃⵠᐃ.ⲆΔᐃΔⵠ, _e);
        this.ᐃⲆΔⵠΔ = {
            open: vg,
            ΔΔⲆΔᐃ: -1,
            button: mf(60, 60, 0, ᐃⵠ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 300) + "px";
                this.style.top = Math.floor(hq - 215) + "px";
            },
            ΔΔⵠⲆΔ: function () {
                tx.ᐃⲆΔⵠΔ.open = _e;
                tx.ᐃⲆΔⵠΔ.style.display = "none";
            },
            select: function () {
                tx.ᐃⲆΔⵠΔ.open = !tx.ᐃⲆΔⵠΔ.open;
                if (tx.ᐃⲆΔⵠΔ.open) {
                    tx.ᐃⲆΔⵠΔ.style.display = "inline-block";
                } else {
                    tx.ᐃⲆΔⵠΔ.style.display = "none";
                }
            },
            ΔⲆᐃᐃΔⲆⲆ: function () {
                if (tx.ᐃⲆΔⵠΔ.ΔΔⲆΔᐃ >= 0) {
                    ⲆᐃⲆᐃ.ⵠⵠᐃⵠᐃᐃⲆⵠᐃ(tx.ᐃⲆΔⵠΔ.ΔΔⲆΔᐃ);
                    tx.ᐃⲆΔⵠΔ.ΔΔⵠⲆΔ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + tx.ᐃⲆΔⵠΔ.ΔΔⲆΔᐃ);
                    }
                }
            },
            ᐃᐃᐃⲆΔ: function () {
                var a = rx.ᐃⲆΔⵠΔ.value;
                document.getElementById("points_bank").innerHTML = og.ⲆⵠⲆⲆⵠᐃᐃ(a) + " points";
                for (var b = 0; b < Jf.length; b++) {
                    if (Jf[b].ΔⲆⵠⵠⲆ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ᐃΔⲆᐃⵠⲆΔⵠⲆ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = Jf[a - 1];
                if (rx.ᐃⲆΔⵠΔ.value >= b.ΔⲆⵠⵠⲆ) {
                    tx.ᐃⲆΔⵠΔ.ΔΔⲆΔᐃ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    tx.ᐃⲆΔⵠΔ.ΔΔⲆΔᐃ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = ᐃⵠ[Tr[b[c - 1][1]].ⵠΔ][0].Δⵠⵠᐃᐃ === pt ? ᐃⵠ[Tr[b[c - 1][1]].ⵠΔ][0].src : ᐃⵠ[Tr[b[c - 1][1]].ⵠΔ][0].Δⵠⵠᐃᐃ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ᐃⲆΔⵠΔ.ΔΔⵠⲆΔ, false);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ᐃⲆΔⵠΔ.ΔⲆᐃᐃΔⲆⲆ, w);
        for (k = 1; k < 11; k++) {
            document.getElementById("starter" + k).addEventListener("mouseup", this.ᐃⲆΔⵠΔ.ᐃΔⲆᐃⵠⲆΔⵠⲆ, Ur);
        }
        this.ΔⵠⵠΔ = {
            open: cb,
            ⵠΔⵠᐃⵠ: ᐃⵠⵠΔ.get("starve_quests") && ᐃⵠⵠΔ.get("starve_quests") === "1" ? 1 : 0,
            button: mf(60, 60, 0, ᐃⵠ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ⵠᐃᐃ: function () {
                this.style.left = Math.floor(lo - 420) + "px";
                this.style.top = Math.floor(hq - 270) + "px";
            },
            ΔΔⵠⲆΔ: function () {
                tx.ΔⵠⵠΔ.style.display = "none";
                tx.ΔⵠⵠΔ.open = Fl;
            },
            select: function () {
                tx.ΔⵠⵠΔ.open = !tx.ΔⵠⵠΔ.open;
                if (tx.ΔⵠⵠΔ.open) {
                    tx.ΔⵠⵠΔ.style.display = "inline-block";
                } else {
                    tx.ΔⵠⵠΔ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < Sf.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ΔⲆⲆⲆⲆΔᐃ: 0,
            ΔᐃᐃⲆᐃⲆⲆ: 0,
            ⵠⵠᐃᐃⵠⲆⲆⲆΔ: function () {
                if (tx.ΔⵠⵠΔ.open) {
                    var a = new Date().getTime();
                    if (a - this.ΔⲆⲆⲆⲆΔᐃ >= 1000) {
                        this.ΔⲆⲆⲆⲆΔᐃ = a;
                        for (var b = 0; b < Sf.length; b++) {
                            if (tx.ΔⵠⵠΔ.list[b]) {
                                var c = Sf[b].time - (a - qx.ⵠⵠⵠⵠⲆ.ᐃᐃᐃⲆΔ + tx.ΔⵠⵠΔ.ΔᐃᐃⲆᐃⲆⲆ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        tx.ΔⵠⵠΔ.ⵠⲆⲆΔΔᐃᐃ(b, a[b]);
                    }
                }
            },
            ⵠⲆⲆΔΔᐃᐃ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    rx.ⲆⲆΔⵠ.ⲆⲆᐃⲆᐃⲆΔ(0, 1);
                    tx.ⵠⵠΔⵠᐃᐃⵠ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                tx.ΔⵠⵠΔ.list[a] = 0;
            },
            modify: function (a, b) {
                tx.ΔⵠⵠΔ.ⵠⲆⲆΔΔᐃᐃ(a, b);
                if (tx.ΔⵠⵠΔ.ⵠΔⵠᐃⵠ) {
                    tx.ΔⵠⵠΔ.open = ps;
                    tx.ΔⵠⵠΔ.style.display = "inline-block";
                }
            },
            ⲆΔᐃΔⵠ: function () {
                if (tx.ΔⵠⵠΔ.ⵠΔⵠᐃⵠ) {
                    ᐃⵠⵠΔ.set("starve_quests", "0");
                    tx.options.ⲆᐃⲆⵠᐃⵠⵠ.display = "none";
                } else {
                    ᐃⵠⵠΔ.set("starve_quests", "1");
                    tx.options.ⲆᐃⲆⵠᐃⵠⵠ.display = "inline-block";
                }
                tx.ΔⵠⵠΔ.ⵠΔⵠᐃⵠ = !tx.ΔⵠⵠΔ.ⵠΔⵠᐃⵠ;
            },
            ⵠⲆΔⵠᐃᐃⵠⲆᐃ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                ⲆᐃⲆᐃ.ΔⵠᐃⲆᐃⵠⲆΔΔ(a);
            }
        };
        if (this.ΔⵠⵠΔ.ⵠΔⵠᐃⵠ) {
            this.options.ⲆᐃⲆⵠᐃⵠⵠ.display = "inline-block";
        } else {
            this.options.ⲆᐃⲆⵠᐃⵠⵠ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ΔⵠⵠΔ.ΔΔⵠⲆΔ, false);
        for (k = 0; Sf.length > k; k++) {
            document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ΔⵠⵠΔ.ⵠⲆΔⵠᐃᐃⵠⲆᐃ, w);
        }
        this.ⲆⲆⵠⵠ = {
            open: cb,
            button: mf(60, 60, 0, ᐃⵠ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ΔⲆᐃⵠᐃⲆⲆ: [],
                ⲆⵠⲆΔⲆⲆⲆ: 0,
                ⵠᐃᐃ: function () {
                    this.style.left = Math.floor(lo - 335) + "px";
                    this.style.top = Math.floor(hq - 215) + "px";
                },
                ΔΔⵠⲆΔ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    tx.ⲆⲆⵠⵠ.open = false;
                },
                ΔᐃⵠⲆᐃⲆᐃ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ᐃᐃⲆᐃ: function (a) {
                    if ((b = this.ΔⲆᐃⵠᐃⲆⲆ[a]).ΔΔⲆ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = ᐃⵠ[Tr[b[a][0]].ⵠΔ][0].Δⵠⵠᐃᐃ === undefined ? ᐃⵠ[Tr[b[a][0]].ⵠΔ][0].src : ᐃⵠ[Tr[b[a][0]].ⵠΔ][0].Δⵠⵠᐃᐃ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ⲆⵠⲆΔⲆⲆⲆ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < kt.length; b++) {
                        var d = kt[b];
                        if (a === d.ᐃⲆⲆ) {
                            this.ΔⲆᐃⵠᐃⲆⲆ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = ᐃⵠ[Tr[d.ⵠΔⵠΔ].ⵠΔ][0].Δⵠⵠᐃᐃ === undefined ? ᐃⵠ[Tr[d.ⵠΔⵠΔ].ⵠΔ][0].src : ᐃⵠ[Tr[d.ⵠΔⵠΔ].ⵠΔ][0].Δⵠⵠᐃᐃ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ⲆⲆΔⵠΔΔⵠ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ⵠᐃᐃ: function () {
                    this.style.left = Math.floor(lo - 285) + "px";
                    this.style.top = Math.floor(hq - 170) + "px";
                },
                ΔΔⵠⲆΔ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    tx.ⲆⲆⵠⵠ.open = va;
                }
            },
            ⵠΔⵠⲆΔⲆⵠΔᐃ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ⲆⲆⵠⵠ.ⲆⲆΔⵠΔΔⵠ.ΔΔⵠⲆΔ, kk);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆⲆⵠⵠ.list.ΔΔⵠⲆΔ, jt);
        document.getElementById("backhome").addEventListener("mouseup", this.ⲆⲆⵠⵠ.list.ΔᐃⵠⲆᐃⲆᐃ, false);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            tx.ⲆⲆⵠⵠ.list.select(2);
        }, Gh);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            tx.ⲆⲆⵠⵠ.list.select(1);
        }, false);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            tx.ⲆⲆⵠⵠ.list.select(0);
        }, _e);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            tx.ⲆⲆⵠⵠ.list.select(3);
        }, Ur);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            tx.ⲆⲆⵠⵠ.list.select(4);
        }, false);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            tx.ⲆⲆⵠⵠ.list.select(5);
        }, false);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(0);
        }, false);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(1);
        }, Gh);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(2);
        }, _e);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(3);
        }, ws);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(4);
        }, $n);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(5);
        }, false);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(6);
        }, false);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(7);
        }, false);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(8);
        }, false);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(9);
        }, Gh);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(10);
        }, vg);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(11);
        }, false);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(12);
        }, Fl);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(13);
        }, cb);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(14);
        }, false);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(15);
        }, Eh);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(16);
        }, vn);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(17);
        }, false);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(18);
        }, Gh);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(19);
        }, va);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(20);
        }, false);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(21);
        }, va);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(22);
        }, fs);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(23);
        }, false);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(24);
        }, Ur);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(25);
        }, kj);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(26);
        }, false);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(27);
        }, w);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(28);
        }, false);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(29);
        }, false);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(30);
        }, false);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(31);
        }, false);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(32);
        }, false);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(33);
        }, ws);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(34);
        }, Nq);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(35);
        }, false);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(36);
        }, fs);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(37);
        }, w);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(38);
        }, fs);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(39);
        }, false);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(40);
        }, false);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(41);
        }, vg);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(42);
        }, al);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(43);
        }, Fl);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(44);
        }, jt);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(45);
        }, $n);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(46);
        }, false);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            tx.ⲆⲆⵠⵠ.list.ᐃᐃⲆᐃ(47);
        }, false);
        this.ᐃⵠⲆⵠΔ = {
            translate: {
                y: 0,
                x: 0
            },
            ΔⲆⲆⲆⲆ: {
                x: -1,
                y: -1
            },
            ⲆΔᐃΔ: [],
            focus: function (a) {
                var b = this.translate.y + (rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ΔⲆⲆⲆⲆ.x = a.x - this.translate.x;
                    this.ΔⲆⲆⲆⲆ.y = a.y - b;
                }
            }
        };
        this.ⵠΔᐃᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            ⵠΔ: ᐃⵠ[278],
            ⲆⲆ: document.createElement("canvas")
        };
        this.ⵠΔᐃᐃ.ⲆⲆ.width = this.ⵠΔᐃᐃ.ⵠΔ.width;
        this.ⵠΔᐃᐃ.ⲆⲆ.height = this.ⵠΔᐃᐃ.ⵠΔ.height;
        this.ⵠΔᐃᐃ.ⵠ = this.ⵠΔᐃᐃ.ⲆⲆ.getContext("2d");
        this.ᐃᐃⵠᐃ = {
            translate: {
                x: 0,
                y: 0
            },
            ⵠΔ: ᐃⵠ[267],
            ⵠᐃΔⵠ: Lu,
            y: 0
        };
        this.ΔⲆᐃΔᐃⲆΔ = function () {
            ⲆⲆᐃᐃⵠ = document.getElementById("team_box");
            ⲆⲆᐃᐃⵠ.innerHTML = "";
            ⲆⲆᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + qx.ⲆΔᐃΔ[rx.ᐃⲆⲆⲆⲆ[0]].ΔⲆᐃᐃΔ + "</div";
            for (var a = 1; rx.ᐃⲆⲆⲆⲆ.length > a; a++) {
                ⲆⲆᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + qx.ⲆΔᐃΔ[rx.ᐃⲆⲆⲆⲆ[a]].ΔⲆᐃᐃΔ + "</div></div>";
            }
            ⲆⲆᐃᐃⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ⲆⲆᐃᐃⵠ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", ⲆᐃⲆᐃ.ΔⲆᐃΔᐃⲆΔ, Xg);
        };
        this.ΔⲆⵠⲆⵠⵠᐃᐃⵠ = function () {
            ⲆⲆᐃᐃⵠ = document.getElementById("team_box");
            ⲆⲆᐃᐃⵠ.innerHTML = "";
            ⲆⲆᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + qx.ⲆΔᐃΔ[rx.ᐃⲆⲆⲆⲆ[0]].ΔⲆᐃᐃΔ + "</div";
            for (var a = 1; a < rx.ᐃⲆⲆⲆⲆ.length; a++) {
                ⲆⲆᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + qx.ⲆΔᐃΔ[rx.ᐃⲆⲆⲆⲆ[a]].ΔⲆᐃᐃΔ + "</div></div>";
            }
            ⲆⲆᐃᐃⵠ.innerHTML += "</div>";
            ⲆⲆᐃᐃⵠ.style.display = "inline-block";
        };
        this.ⲆᐃᐃⵠΔΔⲆΔᐃ = function () {
            ⲆⲆᐃᐃⵠ = document.getElementById("team_box");
            ⲆⲆᐃᐃⵠ.innerHTML = "";
            ⲆⲆᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + qx.ⲆΔᐃΔ[rx.ᐃⲆⲆⲆⲆ[0]].ΔⲆᐃᐃΔ + "</div";
            for (var a = 1; a < rx.ᐃⲆⲆⲆⲆ.length; a++) {
                ⲆⲆᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + qx.ⲆΔᐃΔ[rx.ᐃⲆⲆⲆⲆ[a]].ΔⲆᐃᐃΔ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (rx.ⲆⲆⵠⵠⵠ.lock === 0) {
                ⲆⲆᐃᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ⲆⲆᐃᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", ⲆᐃⲆᐃ.ⲆⲆΔⵠᐃⲆΔⲆᐃ, Ur);
            ⲆⲆᐃᐃⵠ.style.display = "inline-block";
            for (a = 1; rx.ᐃⲆⲆⲆⲆ.length > a; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(2);
                        }, Nq);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(3);
                        }, false);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(4);
                        }, Gh);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(5);
                        }, false);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(6);
                        }, Ur);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(7);
                        }, Ur);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⲆᐃⲆᐃ.ΔΔΔⵠΔⵠᐃ(8);
                        }, kj);
                }
            }
        };
        this.ⵠᐃΔΔᐃ = [];
        this.ⵠᐃΔΔᐃ[2] = {
            button: mf(60, 60, 0, ᐃⵠ[556]),
            action: this.ΔⲆᐃΔᐃⲆΔ
        };
        this.ⵠᐃΔΔᐃ[3] = {
            button: mf(60, 60, 0, ᐃⵠ[556]),
            action: ⲆᐃⲆᐃ.ᐃΔⲆⲆⲆᐃΔᐃⵠ
        };
        this.ⵠᐃΔΔᐃ[0] = {
            button: mf(60, 60, 0, ᐃⵠ[557]),
            action: this.ⲆᐃᐃⵠΔΔⲆΔᐃ
        };
        this.ⵠᐃΔΔᐃ[1] = {
            button: mf(60, 60, 0, ᐃⵠ[561]),
            action: this.ΔⲆⵠⲆⵠⵠᐃᐃⵠ
        };
        this.ⵠᐃΔΔᐃ[4] = {
            button: mf(60, 60, 0, ᐃⵠ[560]),
            action: function () { }
        };
        this.ᐃᐃᐃⵠⵠ = -1;
        this.ⲆᐃΔⲆⵠⵠᐃ = mf(60, 60, 0, ᐃⵠ[723]);
        this.ⲆⲆᐃᐃΔⵠⵠ = mf(60, 60, 0, ᐃⵠ[724]);
        this.ⵠᐃⲆᐃᐃᐃⲆ = mf(60, 60, 0, ᐃⵠ[658]);
        this.ⵠᐃⵠΔⵠⵠⵠ = mf(60, 60, 0, ᐃⵠ[657]);
        this.ⵠᐃⵠⵠⲆᐃⲆ = mf(60, 60, 0, ᐃⵠ[658]);
        this.ᐃⲆᐃᐃᐃⵠⲆ = mf(60, 60, 0, ᐃⵠ[316]);
        this.ⵠΔᐃᐃⵠᐃΔ = mf(60, 60, 0, ᐃⵠ[315]);
        this.ΔΔⲆⲆᐃᐃⲆ = mf(60, 60, 0, ᐃⵠ[297]);
        this.ΔᐃᐃⵠᐃΔⵠ = mf(60, 60, 0, ᐃⵠ[298]);
        this.ⲆⲆⲆⲆΔⲆΔ = mf(60, 60, 0, ᐃⵠ[418]);
        this.ΔⵠᐃⵠⲆⲆⵠ = mf(60, 60, 0, ᐃⵠ[938]);
        this.Δᐃⵠⵠⵠᐃⵠ = mf(60, 60, 0, ᐃⵠ[412]);
        this.ΔΔⲆⵠⵠⲆᐃ = mf(60, 60, 0, ᐃⵠ[536]);
        this.ⲆᐃΔΔΔᐃⲆ = mf(60, 60, 0, ᐃⵠ[535]);
        this.ᐃⲆᐃΔΔⲆᐃ = mf(60, 60, 0, ᐃⵠ[538]);
        this.ⲆΔⲆⲆⵠ = mf(120, 120, 0, ᐃⵠ[149]);
        this.ⲆΔⲆⲆⵠ.info.translate.x = 10;
        this.ⲆΔⲆⲆⵠ.info.translate.y = 10;
        this.ΔⲆᐃ = [];
        this.ΔⲆᐃ[0] = mf(68, 68, 0, ᐃⵠ[340], 3);
        this.ΔⲆᐃ[0].id = 0;
        this.ΔⲆᐃ[1] = mf(68, 68, 0, ᐃⵠ[341], 3);
        this.ΔⲆᐃ[1].id = 1;
        this.ΔⲆᐃ[108] = mf(68, 68, 0, ᐃⵠ[342], 3);
        this.ΔⲆᐃ[108].id = 108;
        this.ΔⲆᐃ[109] = mf(68, 68, 0, ᐃⵠ[343], 3);
        this.ΔⲆᐃ[109].id = 109;
        this.ΔⲆᐃ[110] = mf(68, 68, 0, ᐃⵠ[269], 3);
        this.ΔⲆᐃ[110].id = 110;
        this.ΔⲆᐃ[233] = mf(68, 68, 0, ᐃⵠ[1155], 3);
        this.ΔⲆᐃ[233].id = 233;
        this.ΔⲆᐃ[111] = mf(68, 68, 0, ᐃⵠ[270], 3);
        this.ΔⲆᐃ[111].id = 111;
        this.ΔⲆᐃ[112] = mf(68, 68, 0, ᐃⵠ[271], 3);
        this.ΔⲆᐃ[112].id = 112;
        this.ΔⲆᐃ[3] = mf(68, 68, 0, ᐃⵠ[272], 3);
        this.ΔⲆᐃ[3].id = 3;
        this.ΔⲆᐃ[4] = mf(68, 68, 0, ᐃⵠ[344], 3);
        this.ΔⲆᐃ[4].id = 4;
        this.ΔⲆᐃ[5] = mf(68, 68, 0, ᐃⵠ[345], 3);
        this.ΔⲆᐃ[5].id = 5;
        this.ΔⲆᐃ[57] = mf(68, 68, 0, ᐃⵠ[831], 3);
        this.ΔⲆᐃ[57].id = 57;
        this.ΔⲆᐃ[6] = mf(68, 68, 0, ᐃⵠ[346], 3);
        this.ΔⲆᐃ[6].id = 6;
        this.ΔⲆᐃ[113] = mf(68, 68, 0, ᐃⵠ[273], 3);
        this.ΔⲆᐃ[113].id = 113;
        this.ΔⲆᐃ[114] = mf(68, 68, 0, ᐃⵠ[358], 3);
        this.ΔⲆᐃ[114].id = 114;
        this.ΔⲆᐃ[115] = mf(68, 68, 0, ᐃⵠ[348], 3);
        this.ΔⲆᐃ[115].id = 115;
        this.ΔⲆᐃ[162] = mf(68, 68, 0, ᐃⵠ[349], 3);
        this.ΔⲆᐃ[162].id = 162;
        this.ΔⲆᐃ[160] = mf(68, 68, 0, ᐃⵠ[350], 3);
        this.ΔⲆᐃ[160].id = 160;
        this.ΔⲆᐃ[8] = mf(68, 68, 0, ᐃⵠ[274], 3);
        this.ΔⲆᐃ[8].id = 8;
        this.ΔⲆᐃ[117] = mf(68, 68, 0, ᐃⵠ[351], 3);
        this.ΔⲆᐃ[117].id = 117;
        this.ΔⲆᐃ[116] = mf(68, 68, 0, ᐃⵠ[275], 3);
        this.ΔⲆᐃ[116].id = 116;
        this.ΔⲆᐃ[118] = mf(68, 68, 0, ᐃⵠ[276], 3);
        this.ΔⲆᐃ[118].id = 118;
        this.ΔⲆᐃ[195] = mf(68, 68, 0, ᐃⵠ[352], 3);
        this.ΔⲆᐃ[195].id = 195;
        this.ΔⲆᐃ[161] = mf(68, 68, 0, ᐃⵠ[353], 3);
        this.ΔⲆᐃ[161].id = 161;
        this.ΔⲆᐃ[163] = mf(68, 68, 0, ᐃⵠ[354], 3);
        this.ΔⲆᐃ[163].id = 163;
        this.ΔⲆᐃ[164] = mf(68, 68, 0, ᐃⵠ[355], 3);
        this.ΔⲆᐃ[164].id = 164;
        this.ΔⲆᐃ[165] = mf(68, 68, 0, ᐃⵠ[356], 3);
        this.ΔⲆᐃ[165].id = 165;
        this.ΔⲆᐃ[166] = mf(68, 68, 0, ᐃⵠ[357], 3);
        this.ΔⲆᐃ[166].id = 166;
        this.ΔⲆᐃ[167] = mf(68, 68, 0, ᐃⵠ[359], 3);
        this.ΔⲆᐃ[167].id = 167;
        this.ΔⲆᐃ[168] = mf(68, 68, 0, ᐃⵠ[382], 3);
        this.ΔⲆᐃ[168].id = 168;
        this.ΔⲆᐃ[169] = mf(68, 68, 0, ᐃⵠ[383], 3);
        this.ΔⲆᐃ[169].id = 169;
        this.ΔⲆᐃ[170] = mf(68, 68, 0, ᐃⵠ[384], 3);
        this.ΔⲆᐃ[170].id = 170;
        this.ΔⲆᐃ[2] = mf(68, 68, 0, ᐃⵠ[386], 3);
        this.ΔⲆᐃ[2].id = 2;
        this.ΔⲆᐃ[237] = mf(68, 68, 0, ᐃⵠ[1163], 3);
        this.ΔⲆᐃ[237].id = 237;
        this.ΔⲆᐃ[174] = mf(68, 68, 0, ᐃⵠ[394], 3);
        this.ΔⲆᐃ[174].id = 174;
        this.ΔⲆᐃ[222] = mf(68, 68, 0, ᐃⵠ[1036], 3);
        this.ΔⲆᐃ[222].id = 222;
        this.ΔⲆᐃ[231] = mf(68, 68, 0, ᐃⵠ[1038], 3);
        this.ΔⲆᐃ[231].id = 231;
        this.ΔⲆᐃ[232] = mf(68, 68, 0, ᐃⵠ[1040], 3);
        this.ΔⲆᐃ[232].id = 232;
        this.ΔⲆᐃ[234] = mf(68, 68, 0, ᐃⵠ[1157], 3);
        this.ΔⲆᐃ[234].id = 234;
        this.ΔⲆᐃ[10] = mf(68, 68, 0, ᐃⵠ[387], 3);
        this.ΔⲆᐃ[10].id = 10;
        this.ΔⲆᐃ[171] = mf(68, 68, 0, ᐃⵠ[388], 3);
        this.ΔⲆᐃ[171].id = 171;
        this.ΔⲆᐃ[172] = mf(68, 68, 0, ᐃⵠ[389], 3);
        this.ΔⲆᐃ[172].id = 172;
        this.ΔⲆᐃ[173] = mf(68, 68, 0, ᐃⵠ[390], 3);
        this.ΔⲆᐃ[173].id = 173;
        this.ΔⲆᐃ[11] = mf(68, 68, 0, ᐃⵠ[391], 3);
        this.ΔⲆᐃ[11].id = 11;
        this.ΔⲆᐃ[12] = mf(68, 68, 0, ᐃⵠ[403], 3);
        this.ΔⲆᐃ[12].id = 12;
        this.ΔⲆᐃ[13] = mf(68, 68, 0, ᐃⵠ[397], 3);
        this.ΔⲆᐃ[13].id = 13;
        this.ΔⲆᐃ[14] = mf(68, 68, 0, ᐃⵠ[400], 3);
        this.ΔⲆᐃ[14].id = 14;
        this.ΔⲆᐃ[15] = mf(68, 68, 0, ᐃⵠ[406], 3);
        this.ΔⲆᐃ[15].id = 15;
        this.ΔⲆᐃ[16] = mf(68, 68, 0, ᐃⵠ[875], 3);
        this.ΔⲆᐃ[16].id = 16;
        this.ΔⲆᐃ[119] = mf(68, 68, 0, ᐃⵠ[410], 3);
        this.ΔⲆᐃ[119].id = 119;
        this.ΔⲆᐃ[23] = mf(68, 68, 0, ᐃⵠ[422], 3);
        this.ΔⲆᐃ[23].id = 23;
        this.ΔⲆᐃ[24] = mf(68, 68, 0, ᐃⵠ[425], 3);
        this.ΔⲆᐃ[24].id = 24;
        this.ΔⲆᐃ[87] = mf(68, 68, 0, ᐃⵠ[1229], 3);
        this.ΔⲆᐃ[87].id = 87;
        this.ΔⲆᐃ[88] = mf(68, 68, 0, ᐃⵠ[1232], 3);
        this.ΔⲆᐃ[88].id = 88;
        this.ΔⲆᐃ[80] = mf(68, 68, 0, ᐃⵠ[1139], 3);
        this.ΔⲆᐃ[80].id = 80;
        this.ΔⲆᐃ[81] = mf(68, 68, 0, ᐃⵠ[1142], 3);
        this.ΔⲆᐃ[81].id = 81;
        this.ΔⲆᐃ[101] = mf(68, 68, 0, ᐃⵠ[1167], 3);
        this.ΔⲆᐃ[101].id = 101;
        this.ΔⲆᐃ[64] = mf(68, 68, 0, ᐃⵠ[571], 3);
        this.ΔⲆᐃ[64].id = 64;
        this.ΔⲆᐃ[71] = mf(68, 68, 0, ᐃⵠ[1240], 3);
        this.ΔⲆᐃ[71].id = 71;
        this.ΔⲆᐃ[102] = mf(68, 68, 0, ᐃⵠ[1170], 3);
        this.ΔⲆᐃ[102].id = 102;
        this.ΔⲆᐃ[65] = mf(68, 68, 0, ᐃⵠ[574], 3);
        this.ΔⲆᐃ[65].id = 65;
        this.ΔⲆᐃ[72] = mf(68, 68, 0, ᐃⵠ[1243], 3);
        this.ΔⲆᐃ[72].id = 72;
        this.ΔⲆᐃ[103] = mf(68, 68, 0, ᐃⵠ[1173], 3);
        this.ΔⲆᐃ[103].id = 103;
        this.ΔⲆᐃ[66] = mf(68, 68, 0, ᐃⵠ[577], 3);
        this.ΔⲆᐃ[66].id = 66;
        this.ΔⲆᐃ[73] = mf(68, 68, 0, ᐃⵠ[1246], 3);
        this.ΔⲆᐃ[73].id = 73;
        this.ΔⲆᐃ[104] = mf(68, 68, 0, ᐃⵠ[1176], 3);
        this.ΔⲆᐃ[104].id = 104;
        this.ΔⲆᐃ[67] = mf(68, 68, 0, ᐃⵠ[580], 3);
        this.ΔⲆᐃ[67].id = 67;
        this.ΔⲆᐃ[74] = mf(68, 68, 0, ᐃⵠ[1249], 3);
        this.ΔⲆᐃ[74].id = 74;
        this.ΔⲆᐃ[105] = mf(68, 68, 0, ᐃⵠ[1179], 3);
        this.ΔⲆᐃ[105].id = 105;
        this.ΔⲆᐃ[68] = mf(68, 68, 0, ᐃⵠ[583], 3);
        this.ΔⲆᐃ[68].id = 68;
        this.ΔⲆᐃ[75] = mf(68, 68, 0, ᐃⵠ[1252], 3);
        this.ΔⲆᐃ[75].id = 75;
        this.ΔⲆᐃ[106] = mf(68, 68, 0, ᐃⵠ[1182], 3);
        this.ΔⲆᐃ[106].id = 106;
        this.ΔⲆᐃ[69] = mf(68, 68, 0, ᐃⵠ[586], 3);
        this.ΔⲆᐃ[69].id = 69;
        this.ΔⲆᐃ[76] = mf(68, 68, 0, ᐃⵠ[1255], 3);
        this.ΔⲆᐃ[76].id = 76;
        this.ΔⲆᐃ[107] = mf(68, 68, 0, ᐃⵠ[1185], 3);
        this.ΔⲆᐃ[107].id = 107;
        this.ΔⲆᐃ[70] = mf(68, 68, 0, ᐃⵠ[589], 3);
        this.ΔⲆᐃ[70].id = 70;
        this.ΔⲆᐃ[94] = mf(68, 68, 0, ᐃⵠ[1258], 3);
        this.ΔⲆᐃ[94].id = 94;
        this.ΔⲆᐃ[95] = mf(68, 68, 0, ᐃⵠ[1261], 3);
        this.ΔⲆᐃ[95].id = 95;
        this.ΔⲆᐃ[96] = mf(68, 68, 0, ᐃⵠ[1264], 3);
        this.ΔⲆᐃ[96].id = 96;
        this.ΔⲆᐃ[97] = mf(68, 68, 0, ᐃⵠ[1267], 3);
        this.ΔⲆᐃ[97].id = 97;
        this.ΔⲆᐃ[98] = mf(68, 68, 0, ᐃⵠ[1270], 3);
        this.ΔⲆᐃ[98].id = 98;
        this.ΔⲆᐃ[99] = mf(68, 68, 0, ᐃⵠ[1273], 3);
        this.ΔⲆᐃ[99].id = 99;
        this.ΔⲆᐃ[58] = mf(68, 68, 0, ᐃⵠ[828], 3);
        this.ΔⲆᐃ[58].id = 58;
        this.ΔⲆᐃ[25] = mf(68, 68, 0, ᐃⵠ[431], 3);
        this.ΔⲆᐃ[25].id = 25;
        this.ΔⲆᐃ[26] = mf(68, 68, 0, ᐃⵠ[434], 3);
        this.ΔⲆᐃ[26].id = 26;
        this.ΔⲆᐃ[27] = mf(68, 68, 0, ᐃⵠ[437], 3);
        this.ΔⲆᐃ[27].id = 27;
        this.ΔⲆᐃ[28] = mf(68, 68, 0, ᐃⵠ[440], 3);
        this.ΔⲆᐃ[28].id = 28;
        this.ΔⲆᐃ[120] = mf(68, 68, 0, ᐃⵠ[443], 3);
        this.ΔⲆᐃ[120].id = 120;
        this.ΔⲆᐃ[29] = mf(68, 68, 0, ᐃⵠ[385], 3);
        this.ΔⲆᐃ[29].id = 29;
        this.ΔⲆᐃ[121] = mf(68, 68, 0, ᐃⵠ[446], 3);
        this.ΔⲆᐃ[121].id = 121;
        this.ΔⲆᐃ[30] = mf(68, 68, 0, ᐃⵠ[457], 3);
        this.ΔⲆᐃ[30].id = 30;
        this.ΔⲆᐃ[9] = mf(68, 68, 0, ᐃⵠ[862], 3);
        this.ΔⲆᐃ[9].id = 9;
        this.ΔⲆᐃ[31] = mf(68, 68, 0, ᐃⵠ[459], 3);
        this.ΔⲆᐃ[31].id = 31;
        this.ΔⲆᐃ[32] = mf(68, 68, 0, ᐃⵠ[1018], 3);
        this.ΔⲆᐃ[32].id = 32;
        this.ΔⲆᐃ[33] = mf(68, 68, 0, ᐃⵠ[474], 3);
        this.ΔⲆᐃ[33].id = 33;
        this.ΔⲆᐃ[35] = mf(68, 68, 0, ᐃⵠ[479], 3);
        this.ΔⲆᐃ[35].id = 35;
        this.ΔⲆᐃ[36] = mf(68, 68, 0, ᐃⵠ[482], 3);
        this.ΔⲆᐃ[36].id = 36;
        this.ΔⲆᐃ[37] = mf(68, 68, 0, ᐃⵠ[485], 3);
        this.ΔⲆᐃ[37].id = 37;
        this.ΔⲆᐃ[38] = mf(68, 68, 0, ᐃⵠ[488], 3);
        this.ΔⲆᐃ[38].id = 38;
        this.ΔⲆᐃ[39] = mf(68, 68, 0, ᐃⵠ[491], 3);
        this.ΔⲆᐃ[39].id = 39;
        this.ΔⲆᐃ[122] = mf(68, 68, 0, ᐃⵠ[494], 3);
        this.ΔⲆᐃ[122].id = 122;
        this.ΔⲆᐃ[123] = mf(68, 68, 0, ᐃⵠ[497], 3);
        this.ΔⲆᐃ[123].id = 123;
        this.ΔⲆᐃ[124] = mf(68, 68, 0, ᐃⵠ[501], 3);
        this.ΔⲆᐃ[124].id = 124;
        this.ΔⲆᐃ[40] = mf(68, 68, 0, ᐃⵠ[504], 3);
        this.ΔⲆᐃ[40].id = 40;
        this.ΔⲆᐃ[146] = mf(68, 68, 0, ᐃⵠ[506], 3);
        this.ΔⲆᐃ[146].id = 146;
        this.ΔⲆᐃ[240] = mf(68, 68, 0, ᐃⵠ[1234], 3);
        this.ΔⲆᐃ[240].id = 240;
        this.ΔⲆᐃ[147] = mf(68, 68, 0, ᐃⵠ[514], 3);
        this.ΔⲆᐃ[147].id = 147;
        this.ΔⲆᐃ[148] = mf(68, 68, 0, ᐃⵠ[520], 3);
        this.ΔⲆᐃ[148].id = 148;
        this.ΔⲆᐃ[149] = mf(68, 68, 0, ᐃⵠ[522], 3);
        this.ΔⲆᐃ[149].id = 149;
        this.ΔⲆᐃ[150] = mf(68, 68, 0, ᐃⵠ[524], 3);
        this.ΔⲆᐃ[150].id = 150;
        this.ΔⲆᐃ[151] = mf(68, 68, 0, ᐃⵠ[531], 3);
        this.ΔⲆᐃ[151].id = 151;
        this.ΔⲆᐃ[158] = mf(68, 68, 0, ᐃⵠ[534], 3);
        this.ΔⲆᐃ[158].id = 158;
        this.ΔⲆᐃ[159] = mf(68, 68, 0, ᐃⵠ[554], 3);
        this.ΔⲆᐃ[159].id = 159;
        this.ΔⲆᐃ[43] = mf(68, 68, 0, ᐃⵠ[543], 3);
        this.ΔⲆᐃ[43].id = 43;
        this.ΔⲆᐃ[45] = mf(68, 68, 0, ᐃⵠ[552], 3);
        this.ΔⲆᐃ[45].id = 45;
        this.ΔⲆᐃ[125] = mf(68, 68, 0, ᐃⵠ[606], 3);
        this.ΔⲆᐃ[125].id = 125;
        this.ΔⲆᐃ[221] = mf(68, 68, 0, ᐃⵠ[1237], 3);
        this.ΔⲆᐃ[221].id = 221;
        this.ΔⲆᐃ[223] = mf(68, 68, 0, ᐃⵠ[1029], 3);
        this.ΔⲆᐃ[223].id = 223;
        this.ΔⲆᐃ[224] = mf(68, 68, 0, ᐃⵠ[1032], 3);
        this.ΔⲆᐃ[224].id = 224;
        this.ΔⲆᐃ[230] = mf(68, 68, 0, ᐃⵠ[1118], 3);
        this.ΔⲆᐃ[230].id = 230;
        this.ΔⲆᐃ[89] = mf(68, 68, 0, ᐃⵠ[1047], 3);
        this.ΔⲆᐃ[89].id = 89;
        this.ΔⲆᐃ[225] = mf(68, 68, 0, ᐃⵠ[1050], 3);
        this.ΔⲆᐃ[225].id = 225;
        this.ΔⲆᐃ[227] = mf(68, 68, 0, ᐃⵠ[1081], 3);
        this.ΔⲆᐃ[227].id = 227;
        this.ΔⲆᐃ[239] = mf(68, 68, 0, ᐃⵠ[1225], 3);
        this.ΔⲆᐃ[239].id = 239;
        this.ΔⲆᐃ[228] = mf(68, 68, 0, ᐃⵠ[1096], 3);
        this.ΔⲆᐃ[228].id = 228;
        this.ΔⲆᐃ[229] = mf(68, 68, 0, ᐃⵠ[1111], 3);
        this.ΔⲆᐃ[229].id = 229;
        this.ΔⲆᐃ[226] = mf(68, 68, 0, ᐃⵠ[1190], 3);
        this.ΔⲆᐃ[226].id = 226;
        this.ΔⲆᐃ[126] = mf(68, 68, 0, ᐃⵠ[610], 3);
        this.ΔⲆᐃ[126].id = 126;
        this.ΔⲆᐃ[127] = mf(68, 68, 0, ᐃⵠ[615], 3);
        this.ΔⲆᐃ[127].id = 127;
        this.ΔⲆᐃ[128] = mf(68, 68, 0, ᐃⵠ[614], 3);
        this.ΔⲆᐃ[128].id = 128;
        this.ΔⲆᐃ[46] = mf(68, 68, 0, ᐃⵠ[617], 3);
        this.ΔⲆᐃ[46].id = 46;
        this.ΔⲆᐃ[50] = mf(68, 68, 0, ᐃⵠ[701], 3);
        this.ΔⲆᐃ[50].id = 50;
        this.ΔⲆᐃ[51] = mf(68, 68, 0, ᐃⵠ[703], 3);
        this.ΔⲆᐃ[51].id = 51;
        this.ΔⲆᐃ[52] = mf(68, 68, 0, ᐃⵠ[707], 3);
        this.ΔⲆᐃ[52].id = 52;
        this.ΔⲆᐃ[55] = mf(68, 68, 0, ᐃⵠ[710], 3);
        this.ΔⲆᐃ[55].id = 55;
        this.ΔⲆᐃ[129] = mf(68, 68, 0, ᐃⵠ[625], 3);
        this.ΔⲆᐃ[129].id = 129;
        this.ΔⲆᐃ[130] = mf(68, 68, 0, ᐃⵠ[628], 3);
        this.ΔⲆᐃ[130].id = 130;
        this.ΔⲆᐃ[131] = mf(68, 68, 0, ᐃⵠ[630], 3);
        this.ΔⲆᐃ[131].id = 131;
        this.ΔⲆᐃ[132] = mf(68, 68, 0, ᐃⵠ[633], 3);
        this.ΔⲆᐃ[132].id = 132;
        this.ΔⲆᐃ[133] = mf(68, 68, 0, ᐃⵠ[636], 3);
        this.ΔⲆᐃ[133].id = 133;
        this.ΔⲆᐃ[134] = mf(68, 68, 0, ᐃⵠ[640], 3);
        this.ΔⲆᐃ[134].id = 134;
        this.ΔⲆᐃ[135] = mf(68, 68, 0, ᐃⵠ[645], 3);
        this.ΔⲆᐃ[135].id = 135;
        this.ΔⲆᐃ[47] = mf(68, 68, 0, ᐃⵠ[648], 3);
        this.ΔⲆᐃ[47].id = 47;
        this.ΔⲆᐃ[48] = mf(68, 68, 0, ᐃⵠ[651], 3);
        this.ΔⲆᐃ[48].id = 48;
        this.ΔⲆᐃ[49] = mf(68, 68, 0, ᐃⵠ[653], 3);
        this.ΔⲆᐃ[49].id = 49;
        this.ΔⲆᐃ[136] = mf(68, 68, 0, ᐃⵠ[661], 3);
        this.ΔⲆᐃ[136].id = 136;
        this.ΔⲆᐃ[143] = mf(68, 68, 0, ᐃⵠ[689], 3);
        this.ΔⲆᐃ[143].id = 143;
        this.ΔⲆᐃ[137] = mf(68, 68, 0, ᐃⵠ[663], 3);
        this.ΔⲆᐃ[137].id = 137;
        this.ΔⲆᐃ[138] = mf(68, 68, 0, ᐃⵠ[665], 3);
        this.ΔⲆᐃ[138].id = 138;
        this.ΔⲆᐃ[139] = mf(68, 68, 0, ᐃⵠ[675], 3);
        this.ΔⲆᐃ[139].id = 139;
        this.ΔⲆᐃ[140] = mf(68, 68, 0, ᐃⵠ[682], 3);
        this.ΔⲆᐃ[140].id = 140;
        this.ΔⲆᐃ[141] = mf(68, 68, 0, ᐃⵠ[683], 3);
        this.ΔⲆᐃ[141].id = 141;
        this.ΔⲆᐃ[142] = mf(68, 68, 0, ᐃⵠ[686], 3);
        this.ΔⲆᐃ[142].id = 142;
        this.ΔⲆᐃ[144] = mf(68, 68, 0, ᐃⵠ[719], 3);
        this.ΔⲆᐃ[144].id = 144;
        this.ΔⲆᐃ[145] = mf(68, 68, 0, ᐃⵠ[731], 3);
        this.ΔⲆᐃ[145].id = 145;
        this.ΔⲆᐃ[59] = mf(68, 68, 0, ᐃⵠ[733], 3);
        this.ΔⲆᐃ[59].id = 59;
        this.ΔⲆᐃ[62] = mf(68, 68, 0, ᐃⵠ[565], 3);
        this.ΔⲆᐃ[62].id = 62;
        this.ΔⲆᐃ[185] = mf(68, 68, 0, ᐃⵠ[590], 3);
        this.ΔⲆᐃ[185].id = 185;
        this.ΔⲆᐃ[184] = mf(68, 68, 0, ᐃⵠ[752], 3);
        this.ΔⲆᐃ[184].id = 184;
        this.ΔⲆᐃ[187] = mf(68, 68, 0, ᐃⵠ[591], 3);
        this.ΔⲆᐃ[187].id = 187;
        this.ΔⲆᐃ[186] = mf(68, 68, 0, ᐃⵠ[754], 3);
        this.ΔⲆᐃ[186].id = 186;
        this.ΔⲆᐃ[77] = mf(68, 68, 0, ᐃⵠ[757], 3);
        this.ΔⲆᐃ[77].id = 77;
        this.ΔⲆᐃ[175] = mf(68, 68, 0, ᐃⵠ[759], 3);
        this.ΔⲆᐃ[175].id = 175;
        this.ΔⲆᐃ[176] = mf(68, 68, 0, ᐃⵠ[763], 3);
        this.ΔⲆᐃ[176].id = 176;
        this.ΔⲆᐃ[78] = mf(68, 68, 0, ᐃⵠ[761], 3);
        this.ΔⲆᐃ[78].id = 78;
        this.ΔⲆᐃ[177] = mf(68, 68, 0, ᐃⵠ[766], 3);
        this.ΔⲆᐃ[177].id = 177;
        this.ΔⲆᐃ[79] = mf(68, 68, 0, ᐃⵠ[765], 3);
        this.ΔⲆᐃ[79].id = 79;
        this.ΔⲆᐃ[83] = mf(68, 68, 0, ᐃⵠ[769], 3);
        this.ΔⲆᐃ[83].id = 83;
        this.ΔⲆᐃ[84] = mf(68, 68, 0, ᐃⵠ[773], 3);
        this.ΔⲆᐃ[84].id = 84;
        this.ΔⲆᐃ[178] = mf(68, 68, 0, ᐃⵠ[774], 3);
        this.ΔⲆᐃ[178].id = 178;
        this.ΔⲆᐃ[179] = mf(68, 68, 0, ᐃⵠ[775], 3);
        this.ΔⲆᐃ[179].id = 179;
        this.ΔⲆᐃ[86] = mf(68, 68, 0, ᐃⵠ[778], 3);
        this.ΔⲆᐃ[86].id = 86;
        this.ΔⲆᐃ[85] = mf(68, 68, 0, ᐃⵠ[781], 3);
        this.ΔⲆᐃ[85].id = 85;
        this.ΔⲆᐃ[180] = mf(68, 68, 0, ᐃⵠ[786], 3);
        this.ΔⲆᐃ[180].id = 180;
        this.ΔⲆᐃ[181] = mf(68, 68, 0, ᐃⵠ[787], 3);
        this.ΔⲆᐃ[181].id = 181;
        this.ΔⲆᐃ[182] = mf(68, 68, 0, ᐃⵠ[790], 3);
        this.ΔⲆᐃ[182].id = 182;
        this.ΔⲆᐃ[183] = mf(68, 68, 0, ᐃⵠ[801], 3);
        this.ΔⲆᐃ[183].id = 183;
        this.ΔⲆᐃ[188] = mf(68, 68, 0, ᐃⵠ[810], 3);
        this.ΔⲆᐃ[188].id = 188;
        this.ΔⲆᐃ[189] = mf(68, 68, 0, ᐃⵠ[815], 3);
        this.ΔⲆᐃ[189].id = 189;
        this.ΔⲆᐃ[190] = mf(68, 68, 0, ᐃⵠ[844], 3);
        this.ΔⲆᐃ[190].id = 190;
        this.ΔⲆᐃ[191] = mf(68, 68, 0, ᐃⵠ[836], 3);
        this.ΔⲆᐃ[191].id = 191;
        this.ΔⲆᐃ[192] = mf(68, 68, 0, ᐃⵠ[841], 3);
        this.ΔⲆᐃ[192].id = 192;
        this.ΔⲆᐃ[193] = mf(68, 68, 0, ᐃⵠ[847], 3);
        this.ΔⲆᐃ[193].id = 193;
        this.ΔⲆᐃ[194] = mf(68, 68, 0, ᐃⵠ[851], 3);
        this.ΔⲆᐃ[194].id = 194;
        this.ΔⲆᐃ[206] = mf(68, 68, 0, ᐃⵠ[961], 3);
        this.ΔⲆᐃ[206].id = 206;
        this.ΔⲆᐃ[207] = mf(68, 68, 0, ᐃⵠ[974], 3);
        this.ΔⲆᐃ[207].id = 207;
        this.ΔⲆᐃ[204] = mf(68, 68, 0, ᐃⵠ[951], 3);
        this.ΔⲆᐃ[204].id = 204;
        this.ΔⲆᐃ[205] = mf(68, 68, 0, ᐃⵠ[956], 3);
        this.ΔⲆᐃ[205].id = 205;
        this.ΔⲆᐃ[208] = mf(68, 68, 0, ᐃⵠ[968], 3);
        this.ΔⲆᐃ[208].id = 208;
        this.ΔⲆᐃ[209] = mf(68, 68, 0, ᐃⵠ[973], 3);
        this.ΔⲆᐃ[209].id = 209;
        this.ΔⲆᐃ[210] = mf(68, 68, 0, ᐃⵠ[983], 3);
        this.ΔⲆᐃ[210].id = 210;
        this.ΔⲆᐃ[211] = mf(68, 68, 0, ᐃⵠ[988], 3);
        this.ΔⲆᐃ[211].id = 211;
        this.ΔⲆᐃ[41] = mf(68, 68, 0, ᐃⵠ[881], 3);
        this.ΔⲆᐃ[41].id = 41;
        this.ΔⲆᐃ[42] = mf(68, 68, 0, ᐃⵠ[883], 3);
        this.ΔⲆᐃ[42].id = 42;
        this.ΔⲆᐃ[12] = mf(68, 68, 0, ᐃⵠ[403], 3);
        this.ΔⲆᐃ[12].id = 12;
        this.ΔⲆᐃ[16] = mf(68, 68, 0, ᐃⵠ[875], 3);
        this.ΔⲆᐃ[16].id = 16;
        this.ΔⲆᐃ[196] = mf(68, 68, 0, ᐃⵠ[898], 3);
        this.ΔⲆᐃ[196].id = 196;
        this.ΔⲆᐃ[18] = mf(68, 68, 0, ᐃⵠ[899], 3);
        this.ΔⲆᐃ[18].id = 18;
        this.ΔⲆᐃ[197] = mf(68, 68, 0, ᐃⵠ[906], 3);
        this.ΔⲆᐃ[197].id = 197;
        this.ΔⲆᐃ[198] = mf(68, 68, 0, ᐃⵠ[908], 3);
        this.ΔⲆᐃ[198].id = 198;
        this.ΔⲆᐃ[61] = mf(68, 68, 0, ᐃⵠ[911], 3);
        this.ΔⲆᐃ[61].id = 61;
        this.ΔⲆᐃ[201] = mf(68, 68, 0, ᐃⵠ[871], 3);
        this.ΔⲆᐃ[201].id = 201;
        this.ΔⲆᐃ[199] = mf(68, 68, 0, ᐃⵠ[863], 3);
        this.ΔⲆᐃ[199].id = 199;
        this.ΔⲆᐃ[200] = mf(68, 68, 0, ᐃⵠ[868], 3);
        this.ΔⲆᐃ[200].id = 200;
        this.ΔΔΔⲆⵠ = [];
        for (k = 0; k < 250; k++) {
            this.ΔΔΔⲆⵠ[k] = mf(0, 0, 0, ᐃⵠ[366]);
        }
        this.ⲆⲆⵠ = [];
        this.ⲆⲆⵠ[0] = mf(60, 60, 0, ᐃⵠ[261], 3);
        this.ⲆⲆⵠ[0].id = 0;
        this.ⲆⲆⵠ[1] = mf(60, 60, 0, ᐃⵠ[312], 3);
        this.ⲆⲆⵠ[1].id = 1;
        this.ⲆⲆⵠ[108] = mf(60, 60, 0, ᐃⵠ[315], 3);
        this.ⲆⲆⵠ[108].id = 108;
        this.ⲆⲆⵠ[108].info.ⵠΔ[2] = this.ⲆⲆⵠ[108].info.ⵠΔ[0];
        this.ⲆⲆⵠ[109] = mf(60, 60, 0, ᐃⵠ[316], 3);
        this.ⲆⲆⵠ[109].id = 109;
        this.ⲆⲆⵠ[109].info.ⵠΔ[2] = this.ⲆⲆⵠ[109].info.ⵠΔ[0];
        this.ⲆⲆⵠ[110] = mf(60, 60, 0, ᐃⵠ[277], 3);
        this.ⲆⲆⵠ[110].id = 110;
        this.ⲆⲆⵠ[233] = mf(60, 60, 0, ᐃⵠ[1154], 3);
        this.ⲆⲆⵠ[233].id = 233;
        this.ⲆⲆⵠ[111] = mf(60, 60, 0, ᐃⵠ[297], 3);
        this.ⲆⲆⵠ[111].id = 111;
        this.ⲆⲆⵠ[111].info.ⵠΔ[2] = this.ⲆⲆⵠ[111].info.ⵠΔ[0];
        this.ⲆⲆⵠ[112] = mf(60, 60, 0, ᐃⵠ[298], 3);
        this.ⲆⲆⵠ[112].id = 112;
        this.ⲆⲆⵠ[112].info.ⵠΔ[2] = this.ⲆⲆⵠ[112].info.ⵠΔ[0];
        this.ⲆⲆⵠ[3] = mf(60, 60, 0, ᐃⵠ[258], 3);
        this.ⲆⲆⵠ[3].id = 3;
        this.ⲆⲆⵠ[4] = mf(60, 60, 0, ᐃⵠ[296], 3);
        this.ⲆⲆⵠ[4].id = 4;
        this.ⲆⲆⵠ[5] = mf(60, 60, 0, ᐃⵠ[292], 3);
        this.ⲆⲆⵠ[5].id = 5;
        this.ⲆⲆⵠ[57] = mf(60, 60, 0, ᐃⵠ[829], 3);
        this.ⲆⲆⵠ[57].id = 57;
        this.ⲆⲆⵠ[6] = mf(60, 60, 0, ᐃⵠ[293], 3);
        this.ⲆⲆⵠ[6].id = 6;
        this.ⲆⲆⵠ[113] = mf(60, 60, 0, ᐃⵠ[309], 3);
        this.ⲆⲆⵠ[113].id = 113;
        this.ⲆⲆⵠ[114] = mf(60, 60, 0, ᐃⵠ[310], 3);
        this.ⲆⲆⵠ[114].id = 114;
        this.ⲆⲆⵠ[115] = mf(60, 60, 0, ᐃⵠ[311], 3);
        this.ⲆⲆⵠ[115].id = 115;
        this.ⲆⲆⵠ[162] = mf(60, 60, 0, ᐃⵠ[317], 3);
        this.ⲆⲆⵠ[162].id = 162;
        this.ⲆⲆⵠ[160] = mf(60, 60, 0, ᐃⵠ[319], 3);
        this.ⲆⲆⵠ[160].id = 160;
        this.ⲆⲆⵠ[8] = mf(60, 60, 0, ᐃⵠ[313], 3);
        this.ⲆⲆⵠ[8].id = 8;
        this.ⲆⲆⵠ[117] = mf(60, 60, 0, ᐃⵠ[323], 3);
        this.ⲆⲆⵠ[117].id = 117;
        this.ⲆⲆⵠ[116] = mf(60, 60, 0, ᐃⵠ[300], 3);
        this.ⲆⲆⵠ[116].id = 116;
        this.ⲆⲆⵠ[118] = mf(60, 60, 0, ᐃⵠ[328], 3);
        this.ⲆⲆⵠ[118].id = 118;
        this.ⲆⲆⵠ[195] = mf(60, 60, 0, ᐃⵠ[303], 3);
        this.ⲆⲆⵠ[195].id = 195;
        this.ⲆⲆⵠ[161] = mf(60, 60, 0, ᐃⵠ[305], 3);
        this.ⲆⲆⵠ[161].id = 161;
        this.ⲆⲆⵠ[161].info.ⵠΔ[2] = this.ⲆⲆⵠ[161].info.ⵠΔ[0];
        this.ⲆⲆⵠ[163] = mf(60, 60, 0, ᐃⵠ[329], 3);
        this.ⲆⲆⵠ[163].id = 163;
        this.ⲆⲆⵠ[164] = mf(60, 60, 0, ᐃⵠ[330], 3);
        this.ⲆⲆⵠ[164].id = 164;
        this.ⲆⲆⵠ[165] = mf(60, 60, 0, ᐃⵠ[331], 3);
        this.ⲆⲆⵠ[165].id = 165;
        this.ⲆⲆⵠ[166] = mf(60, 60, 0, ᐃⵠ[335], 3);
        this.ⲆⲆⵠ[166].id = 166;
        this.ⲆⲆⵠ[167] = mf(60, 60, 0, ᐃⵠ[337], 3);
        this.ⲆⲆⵠ[167].id = 167;
        this.ⲆⲆⵠ[168] = mf(60, 60, 0, ᐃⵠ[361], 3);
        this.ⲆⲆⵠ[168].id = 168;
        this.ⲆⲆⵠ[169] = mf(60, 60, 0, ᐃⵠ[362], 3);
        this.ⲆⲆⵠ[169].id = 169;
        this.ⲆⲆⵠ[170] = mf(60, 60, 0, ᐃⵠ[364], 3);
        this.ⲆⲆⵠ[170].id = 170;
        this.ⲆⲆⵠ[29] = mf(60, 60, 0, ᐃⵠ[392], 3);
        this.ⲆⲆⵠ[29].id = 29;
        this.ⲆⲆⵠ[10] = mf(60, 60, 0, ᐃⵠ[369], 3);
        this.ⲆⲆⵠ[10].id = 10;
        this.ⲆⲆⵠ[171] = mf(60, 60, 0, ᐃⵠ[372], 3);
        this.ⲆⲆⵠ[171].id = 171;
        this.ⲆⲆⵠ[172] = mf(60, 60, 0, ᐃⵠ[375], 3);
        this.ⲆⲆⵠ[172].id = 172;
        this.ⲆⲆⵠ[173] = mf(60, 60, 0, ᐃⵠ[378], 3);
        this.ⲆⲆⵠ[173].id = 173;
        this.ⲆⲆⵠ[2] = mf(60, 60, 0, ᐃⵠ[368], 3);
        this.ⲆⲆⵠ[2].id = 2;
        this.ⲆⲆⵠ[2].info.ⵠΔ[2] = this.ⲆⲆⵠ[2].info.ⵠΔ[0];
        this.ⲆⲆⵠ[237] = mf(60, 60, 0, ᐃⵠ[1162], 3);
        this.ⲆⲆⵠ[237].id = 237;
        this.ⲆⲆⵠ[237].info.ⵠΔ[2] = this.ⲆⲆⵠ[237].info.ⵠΔ[0];
        this.ⲆⲆⵠ[174] = mf(60, 60, 0, ᐃⵠ[393], 3);
        this.ⲆⲆⵠ[174].id = 174;
        this.ⲆⲆⵠ[174].info.ⵠΔ[2] = this.ⲆⲆⵠ[174].info.ⵠΔ[0];
        this.ⲆⲆⵠ[222] = mf(60, 60, 0, ᐃⵠ[1035], 3);
        this.ⲆⲆⵠ[222].id = 222;
        this.ⲆⲆⵠ[231] = mf(60, 60, 0, ᐃⵠ[1037], 3);
        this.ⲆⲆⵠ[231].id = 231;
        this.ⲆⲆⵠ[232] = mf(60, 60, 0, ᐃⵠ[1039], 3);
        this.ⲆⲆⵠ[232].id = 232;
        this.ⲆⲆⵠ[234] = mf(60, 60, 0, ᐃⵠ[1156], 3);
        this.ⲆⲆⵠ[234].id = 234;
        this.ⲆⲆⵠ[10] = mf(60, 60, 0, ᐃⵠ[369], 3);
        this.ⲆⲆⵠ[10].id = 10;
        this.ⲆⲆⵠ[11] = mf(60, 60, 0, ᐃⵠ[381], 3);
        this.ⲆⲆⵠ[11].id = 11;
        this.ⲆⲆⵠ[12] = mf(60, 60, 0, ᐃⵠ[401], 3);
        this.ⲆⲆⵠ[12].id = 12;
        this.ⲆⲆⵠ[13] = mf(60, 60, 0, ᐃⵠ[395], 3);
        this.ⲆⲆⵠ[13].id = 13;
        this.ⲆⲆⵠ[14] = mf(60, 60, 0, ᐃⵠ[398], 3);
        this.ⲆⲆⵠ[14].id = 14;
        this.ⲆⲆⵠ[15] = mf(60, 60, 0, ᐃⵠ[404], 3);
        this.ⲆⲆⵠ[15].id = 15;
        this.ⲆⲆⵠ[16] = mf(60, 60, 0, ᐃⵠ[874], 3);
        this.ⲆⲆⵠ[16].id = 16;
        this.ⲆⲆⵠ[119] = mf(60, 60, 0, ᐃⵠ[408], 3);
        this.ⲆⲆⵠ[119].id = 119;
        this.ⲆⲆⵠ[23] = mf(60, 60, 0, ᐃⵠ[420], 3);
        this.ⲆⲆⵠ[23].id = 23;
        this.ⲆⲆⵠ[24] = mf(60, 60, 0, ᐃⵠ[423], 3);
        this.ⲆⲆⵠ[24].id = 24;
        this.ⲆⲆⵠ[87] = mf(60, 60, 0, ᐃⵠ[1227], 3);
        this.ⲆⲆⵠ[87].id = 87;
        this.ⲆⲆⵠ[88] = mf(60, 60, 0, ᐃⵠ[1230], 3);
        this.ⲆⲆⵠ[88].id = 88;
        this.ⲆⲆⵠ[80] = mf(60, 60, 0, ᐃⵠ[1137], 3);
        this.ⲆⲆⵠ[80].id = 80;
        this.ⲆⲆⵠ[81] = mf(60, 60, 0, ᐃⵠ[1140], 3);
        this.ⲆⲆⵠ[81].id = 81;
        this.ⲆⲆⵠ[64] = mf(60, 60, 0, ᐃⵠ[569], 3);
        this.ⲆⲆⵠ[64].id = 64;
        this.ⲆⲆⵠ[101] = mf(60, 60, 0, ᐃⵠ[1166], 3);
        this.ⲆⲆⵠ[101].id = 101;
        this.ⲆⲆⵠ[71] = mf(60, 60, 0, ᐃⵠ[1239], 3);
        this.ⲆⲆⵠ[71].id = 71;
        this.ⲆⲆⵠ[65] = mf(60, 60, 0, ᐃⵠ[572], 3);
        this.ⲆⲆⵠ[65].id = 65;
        this.ⲆⲆⵠ[102] = mf(60, 60, 0, ᐃⵠ[1169], 3);
        this.ⲆⲆⵠ[102].id = 102;
        this.ⲆⲆⵠ[72] = mf(60, 60, 0, ᐃⵠ[1242], 3);
        this.ⲆⲆⵠ[72].id = 72;
        this.ⲆⲆⵠ[66] = mf(60, 60, 0, ᐃⵠ[575], 3);
        this.ⲆⲆⵠ[66].id = 66;
        this.ⲆⲆⵠ[103] = mf(60, 60, 0, ᐃⵠ[1172], 3);
        this.ⲆⲆⵠ[103].id = 103;
        this.ⲆⲆⵠ[73] = mf(60, 60, 0, ᐃⵠ[1245], 3);
        this.ⲆⲆⵠ[73].id = 73;
        this.ⲆⲆⵠ[67] = mf(60, 60, 0, ᐃⵠ[578], 3);
        this.ⲆⲆⵠ[67].id = 67;
        this.ⲆⲆⵠ[104] = mf(60, 60, 0, ᐃⵠ[1175], 3);
        this.ⲆⲆⵠ[104].id = 104;
        this.ⲆⲆⵠ[74] = mf(60, 60, 0, ᐃⵠ[1248], 3);
        this.ⲆⲆⵠ[74].id = 74;
        this.ⲆⲆⵠ[68] = mf(60, 60, 0, ᐃⵠ[581], 3);
        this.ⲆⲆⵠ[68].id = 68;
        this.ⲆⲆⵠ[105] = mf(60, 60, 0, ᐃⵠ[1178], 3);
        this.ⲆⲆⵠ[105].id = 105;
        this.ⲆⲆⵠ[75] = mf(60, 60, 0, ᐃⵠ[1251], 3);
        this.ⲆⲆⵠ[75].id = 75;
        this.ⲆⲆⵠ[69] = mf(60, 60, 0, ᐃⵠ[584], 3);
        this.ⲆⲆⵠ[69].id = 69;
        this.ⲆⲆⵠ[106] = mf(60, 60, 0, ᐃⵠ[1181], 3);
        this.ⲆⲆⵠ[106].id = 106;
        this.ⲆⲆⵠ[76] = mf(60, 60, 0, ᐃⵠ[1254], 3);
        this.ⲆⲆⵠ[76].id = 76;
        this.ⲆⲆⵠ[70] = mf(60, 60, 0, ᐃⵠ[587], 3);
        this.ⲆⲆⵠ[70].id = 70;
        this.ⲆⲆⵠ[107] = mf(60, 60, 0, ᐃⵠ[1184], 3);
        this.ⲆⲆⵠ[107].id = 107;
        this.ⲆⲆⵠ[94] = mf(60, 60, 0, ᐃⵠ[1257], 3);
        this.ⲆⲆⵠ[94].id = 94;
        this.ⲆⲆⵠ[95] = mf(60, 60, 0, ᐃⵠ[1260], 3);
        this.ⲆⲆⵠ[95].id = 95;
        this.ⲆⲆⵠ[96] = mf(60, 60, 0, ᐃⵠ[1263], 3);
        this.ⲆⲆⵠ[96].id = 96;
        this.ⲆⲆⵠ[97] = mf(60, 60, 0, ᐃⵠ[1266], 3);
        this.ⲆⲆⵠ[97].id = 97;
        this.ⲆⲆⵠ[98] = mf(60, 60, 0, ᐃⵠ[1269], 3);
        this.ⲆⲆⵠ[98].id = 98;
        this.ⲆⲆⵠ[99] = mf(60, 60, 0, ᐃⵠ[1272], 3);
        this.ⲆⲆⵠ[99].id = 99;
        this.ⲆⲆⵠ[58] = mf(60, 60, 0, ᐃⵠ[826], 3);
        this.ⲆⲆⵠ[58].id = 58;
        this.ⲆⲆⵠ[25] = mf(60, 60, 0, ᐃⵠ[429], 3);
        this.ⲆⲆⵠ[25].id = 25;
        this.ⲆⲆⵠ[26] = mf(60, 60, 0, ᐃⵠ[432], 3);
        this.ⲆⲆⵠ[26].id = 26;
        this.ⲆⲆⵠ[27] = mf(60, 60, 0, ᐃⵠ[435], 3);
        this.ⲆⲆⵠ[27].id = 27;
        this.ⲆⲆⵠ[28] = mf(60, 60, 0, ᐃⵠ[438], 3);
        this.ⲆⲆⵠ[28].id = 28;
        this.ⲆⲆⵠ[120] = mf(60, 60, 0, ᐃⵠ[441], 3);
        this.ⲆⲆⵠ[120].id = 120;
        this.ⲆⲆⵠ[120].info.ⵠΔ[2] = this.ⲆⲆⵠ[120].info.ⵠΔ[0];
        this.ⲆⲆⵠ[29] = mf(60, 60, 0, ᐃⵠ[392], 3);
        this.ⲆⲆⵠ[29].id = 29;
        this.ⲆⲆⵠ[121] = mf(60, 60, 0, ᐃⵠ[418], 3);
        this.ⲆⲆⵠ[121].id = 121;
        this.ⲆⲆⵠ[121].info.ⵠΔ[2] = this.ⲆⲆⵠ[121].info.ⵠΔ[0];
        this.ⲆⲆⵠ[30] = mf(60, 60, 0, ᐃⵠ[455], 3);
        this.ⲆⲆⵠ[30].id = 30;
        this.ⲆⲆⵠ[9] = mf(60, 60, 0, ᐃⵠ[860], 3);
        this.ⲆⲆⵠ[9].id = 9;
        this.ⲆⲆⵠ[31] = mf(60, 60, 0, ᐃⵠ[458], 3);
        this.ⲆⲆⵠ[31].id = 31;
        this.ⲆⲆⵠ[32] = mf(60, 60, 0, ᐃⵠ[1017], 3);
        this.ⲆⲆⵠ[32].id = 32;
        this.ⲆⲆⵠ[33] = mf(60, 60, 0, ᐃⵠ[472], 3);
        this.ⲆⲆⵠ[33].id = 33;
        this.ⲆⲆⵠ[35] = mf(60, 60, 0, ᐃⵠ[477], 3);
        this.ⲆⲆⵠ[35].id = 35;
        this.ⲆⲆⵠ[36] = mf(60, 60, 0, ᐃⵠ[480], 3);
        this.ⲆⲆⵠ[36].id = 36;
        this.ⲆⲆⵠ[37] = mf(60, 60, 0, ᐃⵠ[483], 3);
        this.ⲆⲆⵠ[37].id = 37;
        this.ⲆⲆⵠ[38] = mf(60, 60, 0, ᐃⵠ[486], 3);
        this.ⲆⲆⵠ[38].id = 38;
        this.ⲆⲆⵠ[39] = mf(60, 60, 0, ᐃⵠ[489], 3);
        this.ⲆⲆⵠ[39].id = 39;
        this.ⲆⲆⵠ[122] = mf(60, 60, 0, ᐃⵠ[492], 3);
        this.ⲆⲆⵠ[122].id = 122;
        this.ⲆⲆⵠ[123] = mf(60, 60, 0, ᐃⵠ[495], 3);
        this.ⲆⲆⵠ[123].id = 123;
        this.ⲆⲆⵠ[124] = mf(60, 60, 0, ᐃⵠ[499], 3);
        this.ⲆⲆⵠ[124].id = 124;
        this.ⲆⲆⵠ[40] = mf(60, 60, 0, ᐃⵠ[502], 3);
        this.ⲆⲆⵠ[40].id = 40;
        this.ⲆⲆⵠ[146] = mf(60, 60, 0, ᐃⵠ[505], 3);
        this.ⲆⲆⵠ[146].id = 146;
        this.ⲆⲆⵠ[146].info.ⵠΔ[2] = this.ⲆⲆⵠ[146].info.ⵠΔ[0];
        this.ⲆⲆⵠ[240] = mf(60, 60, 0, ᐃⵠ[1233], 3);
        this.ⲆⲆⵠ[240].id = 240;
        this.ⲆⲆⵠ[240].info.ⵠΔ[2] = this.ⲆⲆⵠ[240].info.ⵠΔ[0];
        this.ⲆⲆⵠ[147] = mf(60, 60, 0, ᐃⵠ[513], 3);
        this.ⲆⲆⵠ[147].id = 147;
        this.ⲆⲆⵠ[147].info.ⵠΔ[2] = this.ⲆⲆⵠ[147].info.ⵠΔ[0];
        this.ⲆⲆⵠ[148] = mf(60, 60, 0, ᐃⵠ[518], 3);
        this.ⲆⲆⵠ[148].id = 148;
        this.ⲆⲆⵠ[148].info.ⵠΔ[2] = this.ⲆⲆⵠ[148].info.ⵠΔ[0];
        this.ⲆⲆⵠ[149] = mf(60, 60, 0, ᐃⵠ[521], 3);
        this.ⲆⲆⵠ[149].id = 149;
        this.ⲆⲆⵠ[150] = mf(60, 60, 0, ᐃⵠ[523], 3);
        this.ⲆⲆⵠ[150].id = 150;
        this.ⲆⲆⵠ[151] = mf(60, 60, 0, ᐃⵠ[529], 3);
        this.ⲆⲆⵠ[151].id = 151;
        this.ⲆⲆⵠ[158] = mf(60, 60, 0, ᐃⵠ[532], 3);
        this.ⲆⲆⵠ[158].id = 158;
        this.ⲆⲆⵠ[159] = mf(60, 60, 0, ᐃⵠ[553], 3);
        this.ⲆⲆⵠ[159].id = 159;
        this.ⲆⲆⵠ[43] = mf(60, 60, 0, ᐃⵠ[541], 3);
        this.ⲆⲆⵠ[43].id = 43;
        this.ⲆⲆⵠ[45] = mf(60, 60, 0, ᐃⵠ[550], 3);
        this.ⲆⲆⵠ[45].id = 45;
        this.ⲆⲆⵠ[125] = mf(60, 60, 0, ᐃⵠ[605], 3);
        this.ⲆⲆⵠ[125].id = 125;
        this.ⲆⲆⵠ[221] = mf(60, 60, 0, ᐃⵠ[1236], 3);
        this.ⲆⲆⵠ[221].id = 221;
        this.ⲆⲆⵠ[223] = mf(60, 60, 0, ᐃⵠ[1028], 3);
        this.ⲆⲆⵠ[223].id = 223;
        this.ⲆⲆⵠ[224] = mf(60, 60, 0, ᐃⵠ[1031], 3);
        this.ⲆⲆⵠ[224].id = 224;
        this.ⲆⲆⵠ[230] = mf(60, 60, 0, ᐃⵠ[1117], 3);
        this.ⲆⲆⵠ[230].id = 230;
        this.ⲆⲆⵠ[89] = mf(60, 60, 0, ᐃⵠ[1046], 3);
        this.ⲆⲆⵠ[89].id = 89;
        this.ⲆⲆⵠ[225] = mf(60, 60, 0, ᐃⵠ[1049], 3);
        this.ⲆⲆⵠ[225].id = 225;
        this.ⲆⲆⵠ[226] = mf(60, 60, 0, ᐃⵠ[1189], 3);
        this.ⲆⲆⵠ[226].id = 226;
        this.ⲆⲆⵠ[227] = mf(60, 60, 0, ᐃⵠ[1080], 3);
        this.ⲆⲆⵠ[227].id = 227;
        this.ⲆⲆⵠ[239] = mf(60, 60, 0, ᐃⵠ[1224], 3);
        this.ⲆⲆⵠ[239].id = 239;
        this.ⲆⲆⵠ[228] = mf(60, 60, 0, ᐃⵠ[1095], 3);
        this.ⲆⲆⵠ[228].id = 228;
        this.ⲆⲆⵠ[229] = mf(60, 60, 0, ᐃⵠ[1110], 3);
        this.ⲆⲆⵠ[229].id = 229;
        this.ⲆⲆⵠ[126] = mf(60, 60, 0, ᐃⵠ[609], 3);
        this.ⲆⲆⵠ[126].id = 126;
        this.ⲆⲆⵠ[126].info.ⵠΔ[2] = this.ⲆⲆⵠ[126].info.ⵠΔ[0];
        this.ⲆⲆⵠ[127] = mf(60, 60, 0, ᐃⵠ[613], 3);
        this.ⲆⲆⵠ[127].id = 127;
        this.ⲆⲆⵠ[128] = mf(60, 60, 0, ᐃⵠ[612], 3);
        this.ⲆⲆⵠ[128].id = 128;
        this.ⲆⲆⵠ[46] = mf(60, 60, 0, ᐃⵠ[616], 3);
        this.ⲆⲆⵠ[46].id = 46;
        this.ⲆⲆⵠ[50] = mf(60, 60, 0, ᐃⵠ[699], 3);
        this.ⲆⲆⵠ[50].id = 50;
        this.ⲆⲆⵠ[51] = mf(60, 60, 0, ᐃⵠ[702], 3);
        this.ⲆⲆⵠ[51].id = 51;
        this.ⲆⲆⵠ[52] = mf(60, 60, 0, ᐃⵠ[705], 3);
        this.ⲆⲆⵠ[52].id = 52;
        this.ⲆⲆⵠ[55] = mf(60, 60, 0, ᐃⵠ[709], 3);
        this.ⲆⲆⵠ[55].id = 55;
        this.ⲆⲆⵠ[129] = mf(60, 60, 0, ᐃⵠ[624], 3);
        this.ⲆⲆⵠ[129].id = 129;
        this.ⲆⲆⵠ[129].info.ⵠΔ[2] = this.ⲆⲆⵠ[129].info.ⵠΔ[0];
        this.ⲆⲆⵠ[130] = mf(60, 60, 0, ᐃⵠ[626], 3);
        this.ⲆⲆⵠ[130].id = 130;
        this.ⲆⲆⵠ[131] = mf(60, 60, 0, ᐃⵠ[629], 3);
        this.ⲆⲆⵠ[131].id = 131;
        this.ⲆⲆⵠ[131].info.ⵠΔ[2] = this.ⲆⲆⵠ[131].info.ⵠΔ[0];
        this.ⲆⲆⵠ[132] = mf(60, 60, 0, ᐃⵠ[631], 3);
        this.ⲆⲆⵠ[132].id = 132;
        this.ⲆⲆⵠ[133] = mf(60, 60, 0, ᐃⵠ[634], 3);
        this.ⲆⲆⵠ[133].id = 133;
        this.ⲆⲆⵠ[134] = mf(60, 60, 0, ᐃⵠ[639], 3);
        this.ⲆⲆⵠ[134].id = 134;
        this.ⲆⲆⵠ[134].info.ⵠΔ[2] = this.ⲆⲆⵠ[134].info.ⵠΔ[0];
        this.ⲆⲆⵠ[135] = mf(60, 60, 0, ᐃⵠ[644], 3);
        this.ⲆⲆⵠ[135].id = 135;
        this.ⲆⲆⵠ[47] = mf(60, 60, 0, ᐃⵠ[646], 3);
        this.ⲆⲆⵠ[47].id = 47;
        this.ⲆⲆⵠ[48] = mf(60, 60, 0, ᐃⵠ[649], 3);
        this.ⲆⲆⵠ[48].id = 48;
        this.ⲆⲆⵠ[49] = mf(60, 60, 0, ᐃⵠ[652], 3);
        this.ⲆⲆⵠ[49].id = 49;
        this.ⲆⲆⵠ[136] = mf(60, 60, 0, ᐃⵠ[659], 3);
        this.ⲆⲆⵠ[136].id = 136;
        this.ⲆⲆⵠ[143] = mf(60, 60, 0, ᐃⵠ[143], 3);
        this.ⲆⲆⵠ[143].id = 143;
        this.ⲆⲆⵠ[137] = mf(60, 60, 0, ᐃⵠ[662], 3);
        this.ⲆⲆⵠ[137].id = 137;
        this.ⲆⲆⵠ[138] = mf(60, 60, 0, ᐃⵠ[664], 3);
        this.ⲆⲆⵠ[138].id = 138;
        this.ⲆⲆⵠ[139] = mf(60, 60, 0, ᐃⵠ[674], 3);
        this.ⲆⲆⵠ[139].id = 139;
        this.ⲆⲆⵠ[139].info.ⵠΔ[2] = this.ⲆⲆⵠ[139].info.ⵠΔ[0];
        this.ⲆⲆⵠ[140] = mf(60, 60, 0, ᐃⵠ[140], 3);
        this.ⲆⲆⵠ[140].id = 140;
        this.ⲆⲆⵠ[140].info.ⵠΔ[2] = this.ⲆⲆⵠ[140].info.ⵠΔ[0];
        this.ⲆⲆⵠ[141] = mf(60, 60, 0, ᐃⵠ[685], 3);
        this.ⲆⲆⵠ[141].id = 141;
        this.ⲆⲆⵠ[142] = mf(60, 60, 0, ᐃⵠ[142], 3);
        this.ⲆⲆⵠ[142].id = 142;
        this.ⲆⲆⵠ[142].info.ⵠΔ[2] = this.ⲆⲆⵠ[142].info.ⵠΔ[0];
        this.ⲆⲆⵠ[144] = mf(60, 60, 0, ᐃⵠ[717], 3);
        this.ⲆⲆⵠ[144].id = 144;
        this.ⲆⲆⵠ[145] = mf(60, 60, 0, ᐃⵠ[145], 3);
        this.ⲆⲆⵠ[145].id = 145;
        this.ⲆⲆⵠ[59] = mf(60, 60, 0, ᐃⵠ[732], 3);
        this.ⲆⲆⵠ[59].id = 59;
        this.ⲆⲆⵠ[62] = mf(60, 60, 0, ᐃⵠ[563], 3);
        this.ⲆⲆⵠ[62].id = 62;
        this.ⲆⲆⵠ[185] = mf(60, 60, 0, ᐃⵠ[252], 3);
        this.ⲆⲆⵠ[185].id = 185;
        this.ⲆⲆⵠ[185].info.ⵠΔ[2] = this.ⲆⲆⵠ[185].info.ⵠΔ[0];
        this.ⲆⲆⵠ[184] = mf(60, 60, 0, ᐃⵠ[751], 3);
        this.ⲆⲆⵠ[184].id = 184;
        this.ⲆⲆⵠ[184].info.ⵠΔ[2] = this.ⲆⲆⵠ[184].info.ⵠΔ[0];
        this.ⲆⲆⵠ[17] = mf(60, 60, 0, ᐃⵠ[877], 3);
        this.ⲆⲆⵠ[17].id = 17;
        this.ⲆⲆⵠ[63] = mf(60, 60, 0, ᐃⵠ[566], 3);
        this.ⲆⲆⵠ[63].id = 63;
        this.ⲆⲆⵠ[187] = mf(60, 60, 0, ᐃⵠ[253], 3);
        this.ⲆⲆⵠ[187].id = 187;
        this.ⲆⲆⵠ[187].info.ⵠΔ[2] = this.ⲆⲆⵠ[187].info.ⵠΔ[0];
        this.ⲆⲆⵠ[186] = mf(60, 60, 0, ᐃⵠ[753], 3);
        this.ⲆⲆⵠ[186].id = 186;
        this.ⲆⲆⵠ[186].info.ⵠΔ[2] = this.ⲆⲆⵠ[186].info.ⵠΔ[0];
        this.ⲆⲆⵠ[77] = mf(60, 60, 0, ᐃⵠ[756], 3);
        this.ⲆⲆⵠ[77].id = 77;
        this.ⲆⲆⵠ[175] = mf(60, 60, 0, ᐃⵠ[176], 3);
        this.ⲆⲆⵠ[175].id = 175;
        this.ⲆⲆⵠ[175].info.ⵠΔ[2] = this.ⲆⲆⵠ[175].info.ⵠΔ[0];
        this.ⲆⲆⵠ[176] = mf(60, 60, 0, ᐃⵠ[177], 3);
        this.ⲆⲆⵠ[176].id = 176;
        this.ⲆⲆⵠ[176].info.ⵠΔ[2] = this.ⲆⲆⵠ[176].info.ⵠΔ[0];
        this.ⲆⲆⵠ[78] = mf(60, 60, 0, ᐃⵠ[760], 3);
        this.ⲆⲆⵠ[78].id = 78;
        this.ⲆⲆⵠ[177] = mf(60, 60, 0, ᐃⵠ[175], 3);
        this.ⲆⲆⵠ[177].id = 177;
        this.ⲆⲆⵠ[177].info.ⵠΔ[2] = this.ⲆⲆⵠ[177].info.ⵠΔ[0];
        this.ⲆⲆⵠ[79] = mf(60, 60, 0, ᐃⵠ[764], 3);
        this.ⲆⲆⵠ[79].id = 79;
        this.ⲆⲆⵠ[83] = mf(60, 60, 0, ᐃⵠ[767], 3);
        this.ⲆⲆⵠ[83].id = 83;
        this.ⲆⲆⵠ[84] = mf(60, 60, 0, ᐃⵠ[771], 3);
        this.ⲆⲆⵠ[84].id = 84;
        this.ⲆⲆⵠ[178] = mf(60, 60, 0, ᐃⵠ[178], 3);
        this.ⲆⲆⵠ[178].id = 178;
        this.ⲆⲆⵠ[179] = mf(60, 60, 0, ᐃⵠ[179], 3);
        this.ⲆⲆⵠ[179].id = 179;
        this.ⲆⲆⵠ[86] = mf(60, 60, 0, ᐃⵠ[776], 3);
        this.ⲆⲆⵠ[86].id = 86;
        this.ⲆⲆⵠ[85] = mf(60, 60, 0, ᐃⵠ[779], 3);
        this.ⲆⲆⵠ[85].id = 85;
        this.ⲆⲆⵠ[180] = mf(60, 60, 0, ᐃⵠ[180], 3);
        this.ⲆⲆⵠ[180].id = 180;
        this.ⲆⲆⵠ[181] = mf(60, 60, 0, ᐃⵠ[181], 3);
        this.ⲆⲆⵠ[181].id = 181;
        this.ⲆⲆⵠ[182] = mf(60, 60, 0, ᐃⵠ[789], 3);
        this.ⲆⲆⵠ[182].id = 182;
        this.ⲆⲆⵠ[183] = mf(60, 60, 0, ᐃⵠ[800], 3);
        this.ⲆⲆⵠ[183].id = 183;
        this.ⲆⲆⵠ[188] = mf(60, 60, 0, ᐃⵠ[808], 3);
        this.ⲆⲆⵠ[188].id = 188;
        this.ⲆⲆⵠ[189] = mf(60, 60, 0, ᐃⵠ[814], 3);
        this.ⲆⲆⵠ[189].id = 189;
        this.ⲆⲆⵠ[191] = mf(60, 60, 0, ᐃⵠ[834], 3);
        this.ⲆⲆⵠ[191].id = 191;
        this.ⲆⲆⵠ[192] = mf(60, 60, 0, ᐃⵠ[840], 3);
        this.ⲆⲆⵠ[192].id = 192;
        this.ⲆⲆⵠ[190] = mf(60, 60, 0, ᐃⵠ[842], 3);
        this.ⲆⲆⵠ[190].id = 190;
        this.ⲆⲆⵠ[193] = mf(60, 60, 0, ᐃⵠ[845], 3);
        this.ⲆⲆⵠ[193].id = 193;
        this.ⲆⲆⵠ[194] = mf(60, 60, 0, ᐃⵠ[850], 3);
        this.ⲆⲆⵠ[194].id = 194;
        this.ⲆⲆⵠ[204] = mf(60, 60, 0, ᐃⵠ[949], 3);
        this.ⲆⲆⵠ[204].id = 204;
        this.ⲆⲆⵠ[205] = mf(60, 60, 0, ᐃⵠ[955], 3);
        this.ⲆⲆⵠ[205].id = 205;
        this.ⲆⲆⵠ[206] = mf(60, 60, 0, ᐃⵠ[959], 3);
        this.ⲆⲆⵠ[206].id = 206;
        this.ⲆⲆⵠ[207] = mf(60, 60, 0, ᐃⵠ[965], 3);
        this.ⲆⲆⵠ[207].id = 207;
        this.ⲆⲆⵠ[208] = mf(60, 60, 0, ᐃⵠ[966], 3);
        this.ⲆⲆⵠ[208].id = 208;
        this.ⲆⲆⵠ[209] = mf(60, 60, 0, ᐃⵠ[972], 3);
        this.ⲆⲆⵠ[209].id = 209;
        this.ⲆⲆⵠ[210] = mf(60, 60, 0, ᐃⵠ[981], 3);
        this.ⲆⲆⵠ[210].id = 210;
        this.ⲆⲆⵠ[211] = mf(60, 60, 0, ᐃⵠ[987], 3);
        this.ⲆⲆⵠ[211].id = 211;
        this.ⲆⲆⵠ[41] = mf(60, 60, 0, ᐃⵠ[880], 3);
        this.ⲆⲆⵠ[41].id = 41;
        this.ⲆⲆⵠ[42] = mf(60, 60, 0, ᐃⵠ[882], 3);
        this.ⲆⲆⵠ[42].id = 42;
        this.ⲆⲆⵠ[12] = mf(60, 60, 0, ᐃⵠ[401], 3);
        this.ⲆⲆⵠ[12].id = 12;
        this.ⲆⲆⵠ[16] = mf(60, 60, 0, ᐃⵠ[874], 3);
        this.ⲆⲆⵠ[16].id = 16;
        this.ⲆⲆⵠ[196] = mf(60, 60, 0, ᐃⵠ[196], 3);
        this.ⲆⲆⵠ[196].id = 196;
        this.ⲆⲆⵠ[18] = mf(60, 60, 0, ᐃⵠ[901], 3);
        this.ⲆⲆⵠ[18].id = 18;
        this.ⲆⲆⵠ[197] = mf(60, 60, 0, ᐃⵠ[197], 3);
        this.ⲆⲆⵠ[197].id = 197;
        this.ⲆⲆⵠ[198] = mf(60, 60, 0, ᐃⵠ[907], 3);
        this.ⲆⲆⵠ[198].id = 198;
        this.ⲆⲆⵠ[61] = mf(60, 60, 0, ᐃⵠ[910], 3);
        this.ⲆⲆⵠ[61].id = 61;
        this.ⲆⲆⵠ[201] = mf(60, 60, 0, ᐃⵠ[870], 3);
        this.ⲆⲆⵠ[201].id = 201;
        this.ⲆⲆⵠ[200] = mf(60, 60, 0, ᐃⵠ[200], 3);
        this.ⲆⲆⵠ[200].id = 200;
        this.ⲆⲆⵠ[199] = mf(60, 60, 0, ᐃⵠ[865], 3);
        this.ⲆⲆⵠ[199].id = 199;
        this.ⲆΔᐃ = [];
        this.ⲆΔᐃ[35] = mf(60, 60, 0, ᐃⵠ[254], 3);
        this.ⲆΔᐃ[35].id = 35;
        this.ⲆΔᐃ[5] = mf(60, 60, 0, ᐃⵠ[256], 3);
        this.ⲆΔᐃ[5].id = 5;
        this.ⲆΔᐃ[0] = mf(60, 60, 0, ᐃⵠ[302], 3);
        this.ⲆΔᐃ[0].id = 0;
        this.ⲆΔᐃ[3] = mf(60, 60, 0, ᐃⵠ[262], 3);
        this.ⲆΔᐃ[3].id = 3;
        this.ⲆΔᐃ[55] = mf(60, 60, 0, ᐃⵠ[318], 3);
        this.ⲆΔᐃ[55].id = 55;
        this.ⲆΔᐃ[67] = mf(60, 60, 0, ᐃⵠ[320], 3);
        this.ⲆΔᐃ[67].id = 67;
        this.ⲆΔᐃ[40] = mf(60, 60, 0, ᐃⵠ[284], 3);
        this.ⲆΔᐃ[40].id = 40;
        this.ⲆΔᐃ[6] = mf(60, 60, 0, ᐃⵠ[295], 3);
        this.ⲆΔᐃ[6].id = 6;
        this.ⲆΔᐃ[7] = mf(60, 60, 0, ᐃⵠ[257], 3);
        this.ⲆΔᐃ[7].id = 7;
        this.ⲆΔᐃ[36] = mf(60, 60, 0, ᐃⵠ[290], 3);
        this.ⲆΔᐃ[36].id = 36;
        this.ⲆΔᐃ[34] = mf(60, 60, 0, ᐃⵠ[830], 3);
        this.ⲆΔᐃ[34].id = 34;
        this.ⲆΔᐃ[37] = mf(60, 60, 0, ᐃⵠ[291], 3);
        this.ⲆΔᐃ[37].id = 37;
        this.ⲆΔᐃ[4] = mf(60, 60, 0, ᐃⵠ[314], 3);
        this.ⲆΔᐃ[4].id = 4;
        this.ⲆΔᐃ[49] = mf(60, 60, 0, ᐃⵠ[325], 3);
        this.ⲆΔᐃ[49].id = 49;
        this.ⲆΔᐃ[1] = mf(60, 60, 0, ᐃⵠ[327], 3);
        this.ⲆΔᐃ[1].id = 1;
        this.ⲆΔᐃ[54] = mf(60, 60, 0, ᐃⵠ[304], 3);
        this.ⲆΔᐃ[54].id = 54;
        this.ⲆΔᐃ[56] = mf(60, 60, 0, ᐃⵠ[263], 3);
        this.ⲆΔᐃ[56].id = 56;
        this.ⲆΔᐃ[57] = mf(60, 60, 0, ᐃⵠ[265], 3);
        this.ⲆΔᐃ[57].id = 57;
        this.ⲆΔᐃ[58] = mf(60, 60, 0, ᐃⵠ[332], 3);
        this.ⲆΔᐃ[58].id = 58;
        this.ⲆΔᐃ[61] = mf(60, 60, 0, ᐃⵠ[268], 3);
        this.ⲆΔᐃ[61].id = 61;
        this.ⲆΔᐃ[79] = mf(60, 60, 0, ᐃⵠ[338], 3);
        this.ⲆΔᐃ[79].id = 79;
        this.ⲆΔᐃ[68] = mf(60, 60, 0, ᐃⵠ[360], 3);
        this.ⲆΔᐃ[68].id = 68;
        this.ⲆΔᐃ[69] = mf(60, 60, 0, ᐃⵠ[363], 3);
        this.ⲆΔᐃ[69].id = 69;
        this.ⲆΔᐃ[70] = mf(60, 60, 0, ᐃⵠ[365], 3);
        this.ⲆΔᐃ[70].id = 70;
        this.ⲆΔᐃ[100] = mf(60, 60, 0, ᐃⵠ[367], 3);
        this.ⲆΔᐃ[100].id = 100;
        this.ⲆΔᐃ[83] = mf(60, 60, 0, ᐃⵠ[370], 3);
        this.ⲆΔᐃ[83].id = 83;
        this.ⲆΔᐃ[62] = mf(60, 60, 0, ᐃⵠ[371], 3);
        this.ⲆΔᐃ[62].id = 62;
        this.ⲆΔᐃ[63] = mf(60, 60, 0, ᐃⵠ[374], 3);
        this.ⲆΔᐃ[63].id = 63;
        this.ⲆΔᐃ[64] = mf(60, 60, 0, ᐃⵠ[377], 3);
        this.ⲆΔᐃ[64].id = 64;
        this.ⲆΔᐃ[83] = mf(60, 60, 0, ᐃⵠ[370], 3);
        this.ⲆΔᐃ[83].id = 83;
        this.ⲆΔᐃ[84] = mf(60, 60, 0, ᐃⵠ[380], 3);
        this.ⲆΔᐃ[84].id = 84;
        this.ⲆΔᐃ[25] = mf(60, 60, 0, ᐃⵠ[402], 3);
        this.ⲆΔᐃ[25].id = 25;
        this.ⲆΔᐃ[26] = mf(60, 60, 0, ᐃⵠ[396], 3);
        this.ⲆΔᐃ[26].id = 26;
        this.ⲆΔᐃ[27] = mf(60, 60, 0, ᐃⵠ[399], 3);
        this.ⲆΔᐃ[27].id = 27;
        this.ⲆΔᐃ[28] = mf(60, 60, 0, ᐃⵠ[405], 3);
        this.ⲆΔᐃ[28].id = 28;
        this.ⲆΔᐃ[31] = mf(60, 60, 0, ᐃⵠ[876], 3);
        this.ⲆΔᐃ[31].id = 31;
        this.ⲆΔᐃ[2] = mf(60, 60, 0, ᐃⵠ[409], 3);
        this.ⲆΔᐃ[2].id = 2;
        this.ⲆΔᐃ[80] = mf(60, 60, 0, ᐃⵠ[421], 3);
        this.ⲆΔᐃ[80].id = 80;
        this.ⲆΔᐃ[81] = mf(60, 60, 0, ᐃⵠ[424], 3);
        this.ⲆΔᐃ[81].id = 81;
        this.ⲆΔᐃ[Lr.ᐃΔᐃⲆⲆ] = mf(60, 60, 0, ᐃⵠ[1228], 3);
        this.ⲆΔᐃ[Lr.ᐃΔᐃⲆⲆ].id = Lr.ᐃΔᐃⲆⲆ;
        this.ⲆΔᐃ[86] = mf(60, 60, 0, ᐃⵠ[1231], 3);
        this.ⲆΔᐃ[86].id = 86;
        this.ⲆΔᐃ[98] = mf(60, 60, 0, ᐃⵠ[1138], 3);
        this.ⲆΔᐃ[98].id = 98;
        this.ⲆΔᐃ[99] = mf(60, 60, 0, ᐃⵠ[1141], 3);
        this.ⲆΔᐃ[99].id = 99;
        this.ⲆΔᐃ[131] = mf(60, 60, 0, ᐃⵠ[570], 3);
        this.ⲆΔᐃ[131].id = 131;
        this.ⲆΔᐃ[132] = mf(60, 60, 0, ᐃⵠ[1168], 3);
        this.ⲆΔᐃ[132].id = 132;
        this.ⲆΔᐃ[145] = mf(60, 60, 0, ᐃⵠ[1238], 3);
        this.ⲆΔᐃ[145].id = 145;
        this.ⲆΔᐃ[133] = mf(60, 60, 0, ᐃⵠ[573], 3);
        this.ⲆΔᐃ[133].id = 133;
        this.ⲆΔᐃ[134] = mf(60, 60, 0, ᐃⵠ[1171], 3);
        this.ⲆΔᐃ[134].id = 134;
        this.ⲆΔᐃ[146] = mf(60, 60, 0, ᐃⵠ[1241], 3);
        this.ⲆΔᐃ[146].id = 146;
        this.ⲆΔᐃ[135] = mf(60, 60, 0, ᐃⵠ[576], 3);
        this.ⲆΔᐃ[135].id = 135;
        this.ⲆΔᐃ[136] = mf(60, 60, 0, ᐃⵠ[1174], 3);
        this.ⲆΔᐃ[136].id = 136;
        this.ⲆΔᐃ[147] = mf(60, 60, 0, ᐃⵠ[1244], 3);
        this.ⲆΔᐃ[147].id = 147;
        this.ⲆΔᐃ[137] = mf(60, 60, 0, ᐃⵠ[579], 3);
        this.ⲆΔᐃ[137].id = 137;
        this.ⲆΔᐃ[138] = mf(60, 60, 0, ᐃⵠ[1177], 3);
        this.ⲆΔᐃ[138].id = 138;
        this.ⲆΔᐃ[167] = mf(60, 60, 0, ᐃⵠ[1256], 3);
        this.ⲆΔᐃ[167].id = 167;
        this.ⲆΔᐃ[168] = mf(60, 60, 0, ᐃⵠ[1259], 3);
        this.ⲆΔᐃ[168].id = 168;
        this.ⲆΔᐃ[169] = mf(60, 60, 0, ᐃⵠ[1262], 3);
        this.ⲆΔᐃ[169].id = 169;
        this.ⲆΔᐃ[170] = mf(60, 60, 0, ᐃⵠ[1265], 3);
        this.ⲆΔᐃ[170].id = 170;
        this.ⲆΔᐃ[171] = mf(60, 60, 0, ᐃⵠ[1268], 3);
        this.ⲆΔᐃ[171].id = 171;
        this.ⲆΔᐃ[172] = mf(60, 60, 0, ᐃⵠ[1271], 3);
        this.ⲆΔᐃ[172].id = 172;
        this.ⲆΔᐃ[148] = mf(60, 60, 0, ᐃⵠ[1247], 3);
        this.ⲆΔᐃ[148].id = 148;
        this.ⲆΔᐃ[139] = mf(60, 60, 0, ᐃⵠ[582], 3);
        this.ⲆΔᐃ[139].id = 139;
        this.ⲆΔᐃ[140] = mf(60, 60, 0, ᐃⵠ[1180], 3);
        this.ⲆΔᐃ[140].id = 140;
        this.ⲆΔᐃ[149] = mf(60, 60, 0, ᐃⵠ[1250], 3);
        this.ⲆΔᐃ[149].id = 149;
        this.ⲆΔᐃ[141] = mf(60, 60, 0, ᐃⵠ[585], 3);
        this.ⲆΔᐃ[141].id = 141;
        this.ⲆΔᐃ[142] = mf(60, 60, 0, ᐃⵠ[1183], 3);
        this.ⲆΔᐃ[142].id = 142;
        this.ⲆΔᐃ[150] = mf(60, 60, 0, ᐃⵠ[1253], 3);
        this.ⲆΔᐃ[150].id = 150;
        this.ⲆΔᐃ[143] = mf(60, 60, 0, ᐃⵠ[588], 3);
        this.ⲆΔᐃ[143].id = 143;
        this.ⲆΔᐃ[144] = mf(60, 60, 0, ᐃⵠ[1186], 3);
        this.ⲆΔᐃ[144].id = 144;
        this.ⲆΔᐃ[87] = mf(60, 60, 0, ᐃⵠ[827], 3);
        this.ⲆΔᐃ[87].id = 87;
        this.ⲆΔᐃ[88] = mf(60, 60, 0, ᐃⵠ[430], 3);
        this.ⲆΔᐃ[88].id = 88;
        this.ⲆΔᐃ[89] = mf(60, 60, 0, ᐃⵠ[433], 3);
        this.ⲆΔᐃ[89].id = 89;
        this.ⲆΔᐃ[90] = mf(60, 60, 0, ᐃⵠ[436], 3);
        this.ⲆΔᐃ[90].id = 90;
        this.ⲆΔᐃ[24] = mf(60, 60, 0, ᐃⵠ[439], 3);
        this.ⲆΔᐃ[24].id = 24;
        this.ⲆΔᐃ[101] = mf(60, 60, 0, ᐃⵠ[442], 3);
        this.ⲆΔᐃ[101].id = 101;
        this.ⲆΔᐃ[100] = mf(60, 60, 0, ᐃⵠ[367], 3);
        this.ⲆΔᐃ[100].id = 100;
        this.ⲆΔᐃ[38] = mf(60, 60, 0, ᐃⵠ[456], 3);
        this.ⲆΔᐃ[38].id = 38;
        this.ⲆΔᐃ[Lr.ᐃΔⲆᐃΔ] = mf(60, 60, 0, ᐃⵠ[861], 3);
        this.ⲆΔᐃ[Lr.ᐃΔⲆᐃΔ].id = Lr.ᐃΔⲆᐃΔ;
        this.ⲆΔᐃ[8] = mf(60, 60, 0, ᐃⵠ[460], 3);
        this.ⲆΔᐃ[8].id = 8;
        this.ⲆΔᐃ[9] = mf(60, 60, 0, ᐃⵠ[1019], 3);
        this.ⲆΔᐃ[9].id = 9;
        this.ⲆΔᐃ[29] = mf(60, 60, 0, ᐃⵠ[473], 3);
        this.ⲆΔᐃ[29].id = 29;
        this.ⲆΔᐃ[10] = mf(60, 60, 0, ᐃⵠ[478], 3);
        this.ⲆΔᐃ[10].id = 10;
        this.ⲆΔᐃ[11] = mf(60, 60, 0, ᐃⵠ[481], 3);
        this.ⲆΔᐃ[11].id = 11;
        this.ⲆΔᐃ[12] = mf(60, 60, 0, ᐃⵠ[484], 3);
        this.ⲆΔᐃ[12].id = 12;
        this.ⲆΔᐃ[13] = mf(60, 60, 0, ᐃⵠ[487], 3);
        this.ⲆΔᐃ[13].id = 13;
        this.ⲆΔᐃ[14] = mf(60, 60, 0, ᐃⵠ[490], 3);
        this.ⲆΔᐃ[14].id = 14;
        this.ⲆΔᐃ[59] = mf(60, 60, 0, ᐃⵠ[493], 3);
        this.ⲆΔᐃ[59].id = 59;
        this.ⲆΔᐃ[71] = mf(60, 60, 0, ᐃⵠ[496], 3);
        this.ⲆΔᐃ[71].id = 71;
        this.ⲆΔᐃ[65] = mf(60, 60, 0, ᐃⵠ[498], 3);
        this.ⲆΔᐃ[65].id = 65;
        this.ⲆΔᐃ[85] = mf(60, 60, 0, ᐃⵠ[503], 3);
        this.ⲆΔᐃ[85].id = 85;
        this.ⲆΔᐃ[102] = mf(60, 60, 0, ᐃⵠ[515], 3);
        this.ⲆΔᐃ[102].id = 102;
        this.ⲆΔᐃ[103] = mf(60, 60, 0, ᐃⵠ[519], 3);
        this.ⲆΔᐃ[103].id = 103;
        this.ⲆΔᐃ[115] = mf(60, 60, 0, ᐃⵠ[530], 3);
        this.ⲆΔᐃ[115].id = 115;
        this.ⲆΔᐃ[104] = mf(60, 60, 0, ᐃⵠ[533], 3);
        this.ⲆΔᐃ[104].id = 104;
        this.ⲆΔᐃ[105] = mf(60, 60, 0, ᐃⵠ[555], 3);
        this.ⲆΔᐃ[105].id = 105;
        this.ⲆΔᐃ[91] = mf(60, 60, 0, ᐃⵠ[542], 3);
        this.ⲆΔᐃ[91].id = 91;
        this.ⲆΔᐃ[15] = mf(60, 60, 0, ᐃⵠ[551], 3);
        this.ⲆΔᐃ[15].id = 15;
        this.ⲆΔᐃ[106] = mf(60, 60, 0, ᐃⵠ[604], 3);
        this.ⲆΔᐃ[106].id = 106;
        this.ⲆΔᐃ[108] = mf(60, 60, 0, ᐃⵠ[1235], 3);
        this.ⲆΔᐃ[108].id = 108;
        this.ⲆΔᐃ[163] = mf(60, 60, 0, ᐃⵠ[1027], 3);
        this.ⲆΔᐃ[163].id = 163;
        this.ⲆΔᐃ[164] = mf(60, 60, 0, ᐃⵠ[1030], 3);
        this.ⲆΔᐃ[164].id = 164;
        this.ⲆΔᐃ[166] = mf(60, 60, 0, ᐃⵠ[1116], 3);
        this.ⲆΔᐃ[166].id = 166;
        this.ⲆΔᐃ[165] = mf(60, 60, 0, ᐃⵠ[1048], 3);
        this.ⲆΔᐃ[165].id = 165;
        this.ⲆΔᐃ[Lr.ⲆᐃᐃⲆⵠ] = mf(60, 60, 0, ᐃⵠ[1051], 3);
        this.ⲆΔᐃ[Lr.ⲆᐃᐃⲆⵠ].id = Lr.ⲆᐃᐃⲆⵠ;
        this.ⲆΔᐃ[Lr.ΔⲆⲆΔᐃ] = mf(60, 60, 0, ᐃⵠ[1082], 3);
        this.ⲆΔᐃ[Lr.ΔⲆⲆΔᐃ].id = Lr.ΔⲆⲆΔᐃ;
        this.ⲆΔᐃ[Lr.ᐃⲆΔⲆΔ] = mf(60, 60, 0, ᐃⵠ[1226], 3);
        this.ⲆΔᐃ[Lr.ᐃⲆΔⲆΔ].id = Lr.ᐃⲆΔⲆΔ;
        this.ⲆΔᐃ[Lr.ⵠᐃΔⲆΔ] = mf(60, 60, 0, ᐃⵠ[1191], 3);
        this.ⲆΔᐃ[Lr.ⵠᐃΔⲆΔ].id = Lr.ⵠᐃΔⲆΔ;
        this.ⲆΔᐃ[110] = mf(60, 60, 0, ᐃⵠ[611], 3);
        this.ⲆΔᐃ[110].id = 110;
        this.ⲆΔᐃ[111] = mf(60, 60, 0, ᐃⵠ[715], 3);
        this.ⲆΔᐃ[111].id = 111;
        this.ⲆΔᐃ[112] = mf(60, 60, 0, ᐃⵠ[715], 3);
        this.ⲆΔᐃ[112].id = 112;
        this.ⲆΔᐃ[113] = mf(60, 60, 0, ᐃⵠ[715], 3);
        this.ⲆΔᐃ[113].id = 113;
        this.ⲆΔᐃ[16] = mf(60, 60, 0, ᐃⵠ[618], 3);
        this.ⲆΔᐃ[16].id = 16;
        this.ⲆΔᐃ[17] = mf(60, 60, 0, ᐃⵠ[700], 3);
        this.ⲆΔᐃ[17].id = 17;
        this.ⲆΔᐃ[18] = mf(60, 60, 0, ᐃⵠ[704], 3);
        this.ⲆΔᐃ[18].id = 18;
        this.ⲆΔᐃ[19] = mf(60, 60, 0, ᐃⵠ[706], 3);
        this.ⲆΔᐃ[19].id = 19;
        this.ⲆΔᐃ[122] = mf(60, 60, 0, ᐃⵠ[711], 3);
        this.ⲆΔᐃ[122].id = 122;
        this.ⲆΔᐃ[20] = mf(60, 60, 0, ᐃⵠ[627], 3);
        this.ⲆΔᐃ[20].id = 20;
        this.ⲆΔᐃ[41] = mf(60, 60, 0, ᐃⵠ[632], 3);
        this.ⲆΔᐃ[41].id = 41;
        this.ⲆΔᐃ[52] = mf(60, 60, 0, ᐃⵠ[635], 3);
        this.ⲆΔᐃ[52].id = 52;
        this.ⲆΔᐃ[114] = mf(60, 60, 0, ᐃⵠ[643], 3);
        this.ⲆΔᐃ[114].id = 114;
        this.ⲆΔᐃ[94] = mf(60, 60, 0, ᐃⵠ[647], 3);
        this.ⲆΔᐃ[94].id = 94;
        this.ⲆΔᐃ[93] = mf(60, 60, 0, ᐃⵠ[650], 3);
        this.ⲆΔᐃ[93].id = 93;
        this.ⲆΔᐃ[21] = mf(60, 60, 0, ᐃⵠ[654], 3);
        this.ⲆΔᐃ[21].id = 21;
        this.ⲆΔᐃ[53] = mf(60, 60, 0, ᐃⵠ[660], 3);
        this.ⲆΔᐃ[53].id = 53;
        this.ⲆΔᐃ[51] = mf(60, 60, 0, ᐃⵠ[690], 3);
        this.ⲆΔᐃ[51].id = 51;
        this.ⲆΔᐃ[50] = mf(60, 60, 0, ᐃⵠ[666], 3);
        this.ⲆΔᐃ[50].id = 50;
        this.ⲆΔᐃ[109] = mf(60, 60, 0, ᐃⵠ[684], 3);
        this.ⲆΔᐃ[109].id = 109;
        this.ⲆΔᐃ[124] = mf(60, 60, 0, ᐃⵠ[718], 3);
        this.ⲆΔᐃ[124].id = 124;
        this.ⲆΔᐃ[125] = mf(60, 60, 0, ᐃⵠ[730], 3);
        this.ⲆΔᐃ[125].id = 125;
        this.ⲆΔᐃ[126] = mf(60, 60, 0, ᐃⵠ[734], 3);
        this.ⲆΔᐃ[126].id = 126;
        this.ⲆΔᐃ[129] = mf(60, 60, 0, ᐃⵠ[563], 3);
        this.ⲆΔᐃ[129].id = 129;
        this.ⲆΔᐃ[151] = mf(60, 60, 0, ᐃⵠ[758], 3);
        this.ⲆΔᐃ[151].id = 151;
        this.ⲆΔᐃ[152] = mf(60, 60, 0, ᐃⵠ[762], 3);
        this.ⲆΔᐃ[152].id = 152;
        this.ⲆΔᐃ[153] = mf(60, 60, 0, ᐃⵠ[770], 3);
        this.ⲆΔᐃ[153].id = 153;
        this.ⲆΔᐃ[154] = mf(60, 60, 0, ᐃⵠ[768], 3);
        this.ⲆΔᐃ[154].id = 154;
        this.ⲆΔᐃ[155] = mf(60, 60, 0, ᐃⵠ[772], 3);
        this.ⲆΔᐃ[155].id = 155;
        this.ⲆΔᐃ[157] = mf(60, 60, 0, ᐃⵠ[777], 3);
        this.ⲆΔᐃ[157].id = 157;
        this.ⲆΔᐃ[156] = mf(60, 60, 0, ᐃⵠ[780], 3);
        this.ⲆΔᐃ[156].id = 156;
        this.ⲆΔᐃ[158] = mf(60, 60, 0, ᐃⵠ[784], 3);
        this.ⲆΔᐃ[158].id = 158;
        this.ⲆΔᐃ[159] = mf(60, 60, 0, ᐃⵠ[785], 3);
        this.ⲆΔᐃ[159].id = 159;
        this.ⲆΔᐃ[160] = mf(60, 60, 0, ᐃⵠ[791], 3);
        this.ⲆΔᐃ[160].id = 160;
        this.ⲆΔᐃ[161] = mf(60, 60, 0, ᐃⵠ[799], 3);
        this.ⲆΔᐃ[161].id = 161;
        this.ⲆΔᐃ[42] = mf(60, 60, 0, ᐃⵠ[809], 3);
        this.ⲆΔᐃ[42].id = 42;
        this.ⲆΔᐃ[43] = mf(60, 60, 0, ᐃⵠ[835], 3);
        this.ⲆΔᐃ[43].id = 43;
        this.ⲆΔᐃ[107] = mf(60, 60, 0, ᐃⵠ[843], 3);
        this.ⲆΔᐃ[107].id = 107;
        this.ⲆΔᐃ[44] = mf(60, 60, 0, ᐃⵠ[846], 3);
        this.ⲆΔᐃ[44].id = 44;
        this.ⲆΔᐃ[46] = mf(60, 60, 0, ᐃⵠ[960], 3);
        this.ⲆΔᐃ[46].id = 46;
        this.ⲆΔᐃ[45] = mf(60, 60, 0, ᐃⵠ[950], 3);
        this.ⲆΔᐃ[45].id = 45;
        this.ⲆΔᐃ[47] = mf(60, 60, 0, ᐃⵠ[967], 3);
        this.ⲆΔᐃ[47].id = 47;
        this.ⲆΔᐃ[48] = mf(60, 60, 0, ᐃⵠ[982], 3);
        this.ⲆΔᐃ[48].id = 48;
        this.ⲆΔᐃ[25] = mf(60, 60, 0, ᐃⵠ[402], 3);
        this.ⲆΔᐃ[25].id = 25;
        this.ⲆΔᐃ[31] = mf(60, 60, 0, ᐃⵠ[876], 3);
        this.ⲆΔᐃ[31].id = 31;
        this.ⲆΔᐃ[33] = mf(60, 60, 0, ᐃⵠ[900], 3);
        this.ⲆΔᐃ[33].id = 33;
        this.ⲆΔᐃ[162] = mf(60, 60, 0, ᐃⵠ[909], 3);
        this.ⲆΔᐃ[162].id = 162;
        this.ⲆΔᐃ[128] = mf(60, 60, 0, ᐃⵠ[912], 3);
        this.ⲆΔᐃ[128].id = 128;
        this.ΔⲆᐃ[53] = mf(68, 68, 0, ᐃⵠ[976], 3);
        this.ΔⲆᐃ[53].id = 53;
        this.ⲆⲆⵠ[53] = mf(60, 60, 0, ᐃⵠ[975], 3);
        this.ⲆⲆⵠ[53].id = 53;
        this.ⲆΔᐃ[22] = mf(60, 60, 0, ᐃⵠ[977], 3);
        this.ⲆΔᐃ[22].id = 22;
        this.ΔⲆᐃ[54] = mf(68, 68, 0, ᐃⵠ[979], 3);
        this.ΔⲆᐃ[54].id = 54;
        this.ⲆⲆⵠ[54] = mf(60, 60, 0, ᐃⵠ[978], 3);
        this.ⲆⲆⵠ[54].id = 54;
        this.ⲆΔᐃ[23] = mf(60, 60, 0, ᐃⵠ[980], 3);
        this.ⲆΔᐃ[23].id = 23;
        this.ΔⲆᐃ[56] = mf(68, 68, 0, ᐃⵠ[713], 3);
        this.ΔⲆᐃ[56].id = 56;
        this.ⲆⲆⵠ[56] = mf(60, 60, 0, ᐃⵠ[712], 3);
        this.ⲆⲆⵠ[56].id = 56;
        this.ⲆΔᐃ[123] = mf(60, 60, 0, ᐃⵠ[714], 3);
        this.ⲆΔᐃ[123].id = 123;
        this.ΔⲆᐃ[82] = mf(68, 68, 0, ᐃⵠ[428], 3);
        this.ΔⲆᐃ[82].id = 82;
        this.ⲆⲆⵠ[82] = mf(60, 60, 0, ᐃⵠ[426], 3);
        this.ⲆⲆⵠ[82].id = 82;
        this.ⲆΔᐃ[82] = mf(60, 60, 0, ᐃⵠ[427], 3);
        this.ⲆΔᐃ[82].id = 82;
        this.ΔⲆᐃ[235] = mf(68, 68, 0, ᐃⵠ[1159], 3);
        this.ΔⲆᐃ[235].id = 235;
        this.ⲆⲆⵠ[235] = mf(60, 60, 0, ᐃⵠ[1158], 3);
        this.ⲆⲆⵠ[235].id = 235;
        this.ΔⲆᐃ[238] = mf(68, 68, 0, ᐃⵠ[1188], 3);
        this.ΔⲆᐃ[238].id = 238;
        this.ⲆⲆⵠ[238] = mf(60, 60, 0, ᐃⵠ[1187], 3);
        this.ⲆⲆⵠ[238].id = 238;
        this.ΔⲆᐃ[236] = mf(68, 68, 0, ᐃⵠ[1161], 3);
        this.ΔⲆᐃ[236].id = 236;
        this.ⲆⲆⵠ[236] = mf(60, 60, 0, ᐃⵠ[1160], 3);
        this.ⲆⲆⵠ[236].id = 236;
        this.ΔⲆᐃ[152] = mf(68, 68, 0, ᐃⵠ[1197], 3);
        this.ΔⲆᐃ[152].id = 152;
        this.ⲆⲆⵠ[152] = mf(60, 60, 0, ᐃⵠ[1195], 3);
        this.ⲆⲆⵠ[152].id = 152;
        this.ⲆΔᐃ[116] = mf(60, 60, 0, ᐃⵠ[1196], 3);
        this.ⲆΔᐃ[116].id = 116;
        this.ΔⲆᐃ[212] = mf(68, 68, 0, ᐃⵠ[992], 3);
        this.ΔⲆᐃ[212].id = 212;
        this.ⲆⲆⵠ[212] = mf(60, 60, 0, ᐃⵠ[991], 3);
        this.ⲆⲆⵠ[212].id = 212;
        this.ⲆΔᐃ[73] = mf(60, 60, 0, ᐃⵠ[990], 3);
        this.ⲆΔᐃ[73].id = 73;
        this.ΔⲆᐃ[213] = mf(68, 68, 0, ᐃⵠ[995], 3);
        this.ΔⲆᐃ[213].id = 213;
        this.ⲆⲆⵠ[213] = mf(60, 60, 0, ᐃⵠ[994], 3);
        this.ⲆⲆⵠ[213].id = 213;
        this.ⲆΔᐃ[74] = mf(60, 60, 0, ᐃⵠ[993], 3);
        this.ⲆΔᐃ[74].id = 74;
        this.ΔⲆᐃ[214] = mf(68, 68, 0, ᐃⵠ[998], 3);
        this.ΔⲆᐃ[214].id = 214;
        this.ⲆⲆⵠ[214] = mf(60, 60, 0, ᐃⵠ[997], 3);
        this.ⲆⲆⵠ[214].id = 214;
        this.ⲆΔᐃ[75] = mf(60, 60, 0, ᐃⵠ[996], 3);
        this.ⲆΔᐃ[75].id = 75;
        this.ΔⲆᐃ[215] = mf(68, 68, 0, ᐃⵠ[1001], 3);
        this.ΔⲆᐃ[215].id = 215;
        this.ⲆⲆⵠ[215] = mf(60, 60, 0, ᐃⵠ[1000], 3);
        this.ⲆⲆⵠ[215].id = 215;
        this.ⲆΔᐃ[76] = mf(60, 60, 0, ᐃⵠ[999], 3);
        this.ⲆΔᐃ[76].id = 76;
        this.ΔⲆᐃ[216] = mf(68, 68, 0, ᐃⵠ[1004], 3);
        this.ΔⲆᐃ[216].id = 216;
        this.ⲆⲆⵠ[216] = mf(60, 60, 0, ᐃⵠ[1003], 3);
        this.ⲆⲆⵠ[216].id = 216;
        this.ⲆΔᐃ[77] = mf(60, 60, 0, ᐃⵠ[1002], 3);
        this.ⲆΔᐃ[77].id = 77;
        this.ΔⲆᐃ[220] = mf(68, 68, 0, ᐃⵠ[1007], 3);
        this.ΔⲆᐃ[220].id = 220;
        this.ⲆⲆⵠ[220] = mf(60, 60, 0, ᐃⵠ[1006], 3);
        this.ⲆⲆⵠ[220].id = 220;
        this.ⲆΔᐃ[78] = mf(60, 60, 0, ᐃⵠ[1005], 3);
        this.ⲆΔᐃ[78].id = 78;
        this.ΔⲆᐃ[217] = mf(68, 68, 0, ᐃⵠ[1016], 3);
        this.ΔⲆᐃ[217].id = 217;
        this.ⲆⲆⵠ[217] = mf(60, 60, 0, ᐃⵠ[1015], 3);
        this.ⲆⲆⵠ[217].id = 217;
        this.ⲆΔᐃ[60] = mf(60, 60, 0, ᐃⵠ[1014], 3);
        this.ⲆΔᐃ[60].id = 60;
        this.ΔⲆᐃ[219] = mf(68, 68, 0, ᐃⵠ[1013], 3);
        this.ΔⲆᐃ[219].id = 219;
        this.ⲆⲆⵠ[219] = mf(60, 60, 0, ᐃⵠ[1012], 3);
        this.ⲆⲆⵠ[219].id = 219;
        this.ⲆΔᐃ[72] = mf(60, 60, 0, ᐃⵠ[1011], 3);
        this.ⲆΔᐃ[72].id = 72;
        this.ΔⲆᐃ[218] = mf(68, 68, 0, ᐃⵠ[1010], 3);
        this.ΔⲆᐃ[218].id = 218;
        this.ⲆⲆⵠ[218] = mf(60, 60, 0, ᐃⵠ[1009], 3);
        this.ⲆⲆⵠ[218].id = 218;
        this.ⲆΔᐃ[66] = mf(60, 60, 0, ᐃⵠ[1008], 3);
        this.ⲆΔᐃ[66].id = 66;
        this.ΔⲆᐃ[153] = mf(68, 68, 0, ᐃⵠ[1201], 3);
        this.ΔⲆᐃ[153].id = 153;
        this.ⲆⲆⵠ[153] = mf(60, 60, 0, ᐃⵠ[1199], 3);
        this.ⲆⲆⵠ[153].id = 153;
        this.ⲆΔᐃ[117] = mf(60, 60, 0, ᐃⵠ[1200], 3);
        this.ⲆΔᐃ[117].id = 117;
        this.ΔⲆᐃ[154] = mf(68, 68, 0, ᐃⵠ[1205], 3);
        this.ΔⲆᐃ[154].id = 154;
        this.ⲆⲆⵠ[154] = mf(60, 60, 0, ᐃⵠ[1203], 3);
        this.ⲆⲆⵠ[154].id = 154;
        this.ⲆΔᐃ[118] = mf(60, 60, 0, ᐃⵠ[1204], 3);
        this.ⲆΔᐃ[118].id = 118;
        this.ΔⲆᐃ[155] = mf(68, 68, 0, ᐃⵠ[1209], 3);
        this.ΔⲆᐃ[155].id = 155;
        this.ⲆⲆⵠ[155] = mf(60, 60, 0, ᐃⵠ[1207], 3);
        this.ⲆⲆⵠ[155].id = 155;
        this.ⲆΔᐃ[119] = mf(60, 60, 0, ᐃⵠ[1208], 3);
        this.ⲆΔᐃ[119].id = 119;
        this.ΔⲆᐃ[156] = mf(68, 68, 0, ᐃⵠ[1213], 3);
        this.ΔⲆᐃ[156].id = 156;
        this.ⲆⲆⵠ[156] = mf(60, 60, 0, ᐃⵠ[1211], 3);
        this.ⲆⲆⵠ[156].id = 156;
        this.ⲆΔᐃ[120] = mf(60, 60, 0, ᐃⵠ[1212], 3);
        this.ⲆΔᐃ[120].id = 120;
        this.ΔⲆᐃ[157] = mf(68, 68, 0, ᐃⵠ[1217], 3);
        this.ΔⲆᐃ[157].id = 157;
        this.ⲆⲆⵠ[157] = mf(60, 60, 0, ᐃⵠ[1215], 3);
        this.ⲆⲆⵠ[157].id = 157;
        this.ⲆΔᐃ[121] = mf(60, 60, 0, ᐃⵠ[1216], 3);
        this.ⲆΔᐃ[121].id = 121;
        this.ΔⲆᐃ[203] = mf(68, 68, 0, ᐃⵠ[937], 3);
        this.ΔⲆᐃ[203].id = 203;
        this.ⲆⲆⵠ[203] = mf(60, 60, 0, ᐃⵠ[936], 3);
        this.ⲆⲆⵠ[203].id = 203;
        this.ⲆⲆⵠ[203].info.ⵠΔ[2] = this.ⲆⲆⵠ[203].info.ⵠΔ[0];
        this.ΔⲆᐃ[150] = mf(68, 68, 0, ᐃⵠ[524], 3);
        this.ΔⲆᐃ[150].id = 150;
        this.ⲆⲆⵠ[150] = mf(60, 60, 0, ᐃⵠ[523], 3);
        this.ⲆⲆⵠ[150].id = 150;
        this.ⲆⲆⵠ[150].info.ⵠΔ[2] = this.ⲆⲆⵠ[150].info.ⵠΔ[0];
        this.ΔⲆᐃ[202] = mf(68, 68, 0, ᐃⵠ[939], 3);
        this.ΔⲆᐃ[202].id = 202;
        this.ⲆⲆⵠ[202] = mf(60, 60, 0, ᐃⵠ[938], 3);
        this.ⲆⲆⵠ[202].id = 202;
        this.ⲆⲆⵠ[202].info.ⵠΔ[2] = this.ⲆⲆⵠ[202].info.ⵠΔ[0];
        this.ΔⲆᐃ[19] = mf(68, 68, 0, ᐃⵠ[934], 3);
        this.ΔⲆᐃ[19].id = 19;
        this.ⲆⲆⵠ[19] = mf(60, 60, 0, ᐃⵠ[932], 3);
        this.ⲆⲆⵠ[19].id = 19;
        this.ⲆΔᐃ[39] = mf(60, 60, 0, ᐃⵠ[933], 3);
        this.ⲆΔᐃ[39].id = 39;
        this.ΔⲆᐃ[20] = mf(68, 68, 0, ᐃⵠ[923], 3);
        this.ΔⲆᐃ[20].id = 20;
        this.ⲆⲆⵠ[20] = mf(60, 60, 0, ᐃⵠ[921], 3);
        this.ⲆⲆⵠ[20].id = 20;
        this.ⲆΔᐃ[95] = mf(60, 60, 0, ᐃⵠ[922], 3);
        this.ⲆΔᐃ[95].id = 95;
        this.ΔⲆᐃ[21] = mf(68, 68, 0, ᐃⵠ[927], 3);
        this.ΔⲆᐃ[21].id = 21;
        this.ⲆⲆⵠ[21] = mf(60, 60, 0, ᐃⵠ[925], 3);
        this.ⲆⲆⵠ[21].id = 21;
        this.ⲆΔᐃ[96] = mf(60, 60, 0, ᐃⵠ[926], 3);
        this.ⲆΔᐃ[96].id = 96;
        this.ΔⲆᐃ[22] = mf(68, 68, 0, ᐃⵠ[931], 3);
        this.ΔⲆᐃ[22].id = 22;
        this.ⲆⲆⵠ[22] = mf(60, 60, 0, ᐃⵠ[929], 3);
        this.ⲆⲆⵠ[22].id = 22;
        this.ⲆΔᐃ[97] = mf(60, 60, 0, ᐃⵠ[930], 3);
        this.ⲆΔᐃ[97].id = 97;
        this.ΔⲆᐃ[60] = mf(68, 68, 0, ᐃⵠ[736], 3);
        this.ΔⲆᐃ[60].id = 60;
        this.ⲆⲆⵠ[60] = mf(60, 60, 0, ᐃⵠ[735], 3);
        this.ⲆⲆⵠ[60].id = 60;
        this.ⲆΔᐃ[127] = mf(60, 60, 0, ᐃⵠ[737], 3);
        this.ⲆΔᐃ[127].id = 127;
        this.ΔⲆᐃ[90] = mf(68, 68, 0, ᐃⵠ[739], 3);
        this.ΔⲆᐃ[90].id = 90;
        this.ⲆⲆⵠ[90] = mf(60, 60, 0, ᐃⵠ[738], 3);
        this.ⲆⲆⵠ[90].id = 90;
        this.ⲆΔᐃ[173] = mf(60, 60, 0, ᐃⵠ[740], 3);
        this.ⲆΔᐃ[173].id = 173;
        this.ΔⲆᐃ[92] = mf(68, 68, 0, ᐃⵠ[745], 3);
        this.ΔⲆᐃ[92].id = 92;
        this.ⲆⲆⵠ[92] = mf(60, 60, 0, ᐃⵠ[744], 3);
        this.ⲆⲆⵠ[92].id = 92;
        this.ⲆΔᐃ[174] = mf(60, 60, 0, ᐃⵠ[746], 3);
        this.ⲆΔᐃ[174].id = 174;
        this.ΔⲆᐃ[93] = mf(68, 68, 0, ᐃⵠ[748], 3);
        this.ΔⲆᐃ[93].id = 93;
        this.ⲆⲆⵠ[93] = mf(60, 60, 0, ᐃⵠ[747], 3);
        this.ⲆⲆⵠ[93].id = 93;
        this.ⲆΔᐃ[175] = mf(60, 60, 0, ᐃⵠ[749], 3);
        this.ⲆΔᐃ[175].id = 175;
        this.ΔⲆᐃ[91] = mf(68, 68, 0, ᐃⵠ[742], 3);
        this.ΔⲆᐃ[91].id = 91;
        this.ⲆⲆⵠ[91] = mf(60, 60, 0, ᐃⵠ[741], 3);
        this.ⲆⲆⵠ[91].id = 91;
        this.ⲆΔᐃ[176] = mf(60, 60, 0, ᐃⵠ[743], 3);
        this.ⲆΔᐃ[176].id = 176;
        this.ΔⲆᐃ[100] = mf(68, 68, 0, ᐃⵠ[1165], 3);
        this.ΔⲆᐃ[100].id = 100;
        this.ⲆⲆⵠ[100] = mf(60, 60, 0, ᐃⵠ[1164], 3);
        this.ⲆⲆⵠ[100].id = 100;
        this.ⲆΔᐃ[Lr.ᐃⲆⵠⲆᐃ] = mf(60, 60, 0, ᐃⵠ[Er.ⲆⲆⵠᐃⵠᐃΔⵠⵠ], 3);
        this.ⲆΔᐃ[Lr.ᐃⲆⵠⲆᐃ].id = Lr.ᐃⲆⵠⲆᐃ;
        this.ΔⲆᐃ[34] = mf(68, 68, 0, ᐃⵠ[945], 3);
        this.ΔⲆᐃ[34].id = 34;
        this.ⲆⲆⵠ[34] = mf(60, 60, 0, ᐃⵠ[943], 3);
        this.ⲆⲆⵠ[34].id = 34;
        this.ⲆΔᐃ[30] = mf(60, 60, 0, ᐃⵠ[944], 3);
        this.ⲆΔᐃ[30].id = 30;
        this.ΔⲆᐃ[44] = mf(68, 68, 0, ᐃⵠ[948], 3);
        this.ΔⲆᐃ[44].id = 44;
        this.ⲆⲆⵠ[44] = mf(60, 60, 0, ᐃⵠ[946], 3);
        this.ⲆⲆⵠ[44].id = 44;
        this.ⲆΔᐃ[92] = mf(60, 60, 0, ᐃⵠ[947], 3);
        this.ⲆΔᐃ[92].id = 92;
        this.ΔⲆᐃ[17] = mf(68, 68, 0, ᐃⵠ[878], 3);
        this.ΔⲆᐃ[17].id = 17;
        this.ⲆⲆⵠ[17] = mf(60, 60, 0, ᐃⵠ[877], 3);
        this.ⲆⲆⵠ[17].id = 17;
        this.ⲆΔᐃ[32] = mf(60, 60, 0, ᐃⵠ[879], 3);
        this.ⲆΔᐃ[32].id = 32;
        this.ΔⲆᐃ[63] = mf(68, 68, 0, ᐃⵠ[568], 3);
        this.ΔⲆᐃ[63].id = 63;
        this.ⲆⲆⵠ[63] = mf(60, 60, 0, ᐃⵠ[566], 3);
        this.ⲆⲆⵠ[63].id = 63;
        this.ⲆΔᐃ[130] = mf(60, 60, 0, ᐃⵠ[567], 3);
        this.ⲆΔᐃ[130].id = 130;
        this.ΔⲆᐃ[187] = mf(68, 68, 0, ᐃⵠ[591], 3);
        this.ΔⲆᐃ[187].id = 187;
        this.ⲆⲆⵠ[187] = mf(60, 60, 0, ᐃⵠ[253], 3);
        this.ⲆⲆⵠ[187].id = 187;
        this.ΔⲆᐃ[Rr.ⵠⵠⵠΔⲆⵠⵠ] = mf(68, 68, 0, ᐃⵠ[Er.ⲆⵠⵠᐃⲆᐃⲆΔⵠ], 3);
        this.ΔⲆᐃ[Rr.ⵠⵠⵠΔⲆⵠⵠ].id = Rr.ⵠⵠⵠΔⲆⵠⵠ;
        this.ⲆⲆⵠ[Rr.ⵠⵠⵠΔⲆⵠⵠ] = mf(60, 60, 0, ᐃⵠ[Er.ⲆⵠᐃᐃΔΔⵠⲆⵠ], 3);
        this.ⲆⲆⵠ[Rr.ⵠⵠⵠΔⲆⵠⵠ].id = Rr.ⵠⵠⵠΔⲆⵠⵠ;
        this.ΔⲆᐃ[Rr.ⵠⲆⵠΔⲆⵠΔ] = mf(68, 68, 0, ᐃⵠ[Er.ⲆⲆⵠⲆΔΔⵠΔⲆ], 3);
        this.ΔⲆᐃ[Rr.ⵠⲆⵠΔⲆⵠΔ].id = Rr.ⵠⲆⵠΔⲆⵠΔ;
        this.ⲆⲆⵠ[Rr.ⵠⲆⵠΔⲆⵠΔ] = mf(60, 60, 0, ᐃⵠ[Er.ΔΔΔΔⵠᐃⵠⲆⵠ], 3);
        this.ⲆⲆⵠ[Rr.ⵠⲆⵠΔⲆⵠΔ].id = Rr.ⵠⲆⵠΔⲆⵠΔ;
        this.ΔⲆᐃ[Rr.ΔΔⵠⲆⵠⲆⵠ] = mf(68, 68, 0, ᐃⵠ[Er.ᐃⲆΔⵠⲆΔⲆⲆⲆ], 3);
        this.ΔⲆᐃ[Rr.ΔΔⵠⲆⵠⲆⵠ].id = Rr.ΔΔⵠⲆⵠⲆⵠ;
        this.ⲆⲆⵠ[Rr.ΔΔⵠⲆⵠⲆⵠ] = mf(60, 60, 0, ᐃⵠ[Er.ᐃΔᐃᐃΔΔᐃⵠᐃ], 3);
        this.ⲆⲆⵠ[Rr.ΔΔⵠⲆⵠⲆⵠ].id = Rr.ΔΔⵠⲆⵠⲆⵠ;
        this.ΔⲆᐃ[Rr.ⵠᐃⵠⲆⵠᐃᐃ] = mf(68, 68, 0, ᐃⵠ[Er.ⲆᐃΔⲆΔⲆⲆᐃⲆ], 3);
        this.ΔⲆᐃ[Rr.ⵠᐃⵠⲆⵠᐃᐃ].id = Rr.ⵠᐃⵠⲆⵠᐃᐃ;
        this.ⲆⲆⵠ[Rr.ⵠᐃⵠⲆⵠᐃᐃ] = mf(60, 60, 0, ᐃⵠ[Er.ⲆΔΔⵠⲆᐃⵠᐃΔ], 3);
        this.ⲆⲆⵠ[Rr.ⵠᐃⵠⲆⵠᐃᐃ].id = Rr.ⵠᐃⵠⲆⵠᐃᐃ;
        this.ΔⲆᐃ[Rr.ⲆⲆⲆᐃⲆΔΔ] = mf(68, 68, 0, ᐃⵠ[Er.ⵠΔᐃⵠⵠΔⲆⵠⲆ], 3);
        this.ΔⲆᐃ[Rr.ⲆⲆⲆᐃⲆΔΔ].id = Rr.ⲆⲆⲆᐃⲆΔΔ;
        this.ⲆⲆⵠ[Rr.ⲆⲆⲆᐃⲆΔΔ] = mf(60, 60, 0, ᐃⵠ[Er.ᐃⲆᐃᐃΔⲆⲆⵠⵠ], 3);
        this.ⲆⲆⵠ[Rr.ⲆⲆⲆᐃⲆΔΔ].id = Rr.ⲆⲆⲆᐃⲆΔΔ;
        this.ⵠⵠΔⲆΔᐃⵠ = function () {
            for (var a = rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ, b = 10, c = 10, d = 0; d < a.length; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ⵠⵠⵠⲆΔⵠᐃ = function () {
            var a = Math.floor(Math.floor((3 + rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ.length) / 4) * (10 + this.ΔⲆᐃ[0].info.ⵠΔ[0].width) + 35);
            for (var b = 0; b < this.ΔⲆᐃ.length; b++) {
                if (this.ΔⲆᐃ[b]) {
                    this.ΔⲆᐃ[b].info.translate.x = a;
                    this.ΔⲆᐃ[b].info.translate.y = 22;
                }
            }
            this.ⲆᐃΔΔΔᐃⲆ.info.translate.x = a + 17;
            this.ⲆᐃΔΔΔᐃⲆ.info.translate.y = 22 + ᐃⵠ[339].height;
            this.ᐃⲆᐃΔΔⲆᐃ.info.translate.x = a + 17;
            this.ᐃⲆᐃΔΔⲆᐃ.info.translate.y = 30;
            this.ΔΔⲆⵠⵠⲆᐃ.info.translate.x = a + 17;
            this.ΔΔⲆⵠⵠⲆᐃ.info.translate.y = 22 + ᐃⵠ[339].height;
        };
        this.ᐃⵠΔⲆⲆⲆⵠᐃΔ = function () {
            var a = Math.floor((no - ᐃⵠ[556][0].width) / 2);
            for (var b = 0; this.ⵠᐃΔΔᐃ.length > b; b++) {
                this.ⵠᐃΔΔᐃ[b].button.info.translate.x = a;
                this.ⵠᐃΔΔᐃ[b].button.info.translate.y = -13;
            }
        };
        this.ΔⵠⵠᐃᐃⲆⲆ = function () {
            var a = 12 + Math.floor(Math.floor((3 + rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ.length) / 4) * (10 + this.ⲆᐃΔⲆⵠⵠᐃ.info.ⵠΔ[0].width) + 35);
            this.ⲆᐃΔⲆⵠⵠᐃ.info.translate.x = a;
            this.ⲆᐃΔⲆⵠⵠᐃ.info.translate.y = 33;
            this.ⵠᐃⲆᐃᐃᐃⲆ.info.translate.x = this.ⲆᐃΔⲆⵠⵠᐃ.info.translate.x;
            this.ⵠᐃⲆᐃᐃᐃⲆ.info.translate.y = 137;
            this.ⲆⲆᐃᐃΔⵠⵠ.info.translate.x = this.ⲆᐃΔⲆⵠⵠᐃ.info.translate.x;
            this.ⲆⲆᐃᐃΔⵠⵠ.info.translate.y = 240;
        };
        this.ᐃᐃⵠⵠⵠΔᐃ = function () {
            var a = 12 + Math.floor((10 + this.ᐃⲆᐃᐃᐃⵠⲆ.info.ⵠΔ[0].width) * Math.floor((3 + rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ.length) / 4) + 35);
            this.ᐃⲆᐃᐃᐃⵠⲆ.info.translate.x = a;
            this.ᐃⲆᐃᐃᐃⵠⲆ.info.translate.y = 36;
            a += 83;
            this.ⵠΔᐃᐃⵠᐃΔ.info.translate.x = a;
            this.ⵠΔᐃᐃⵠᐃΔ.info.translate.y = 36;
            this.ΔΔⲆⲆᐃᐃⲆ.info.translate.x = a;
            this.ΔΔⲆⲆᐃᐃⲆ.info.translate.y = 36;
            this.ΔᐃᐃⵠᐃΔⵠ.info.translate.x = a;
            this.ΔᐃᐃⵠᐃΔⵠ.info.translate.y = 36;
            this.ⲆⲆⲆⲆΔⲆΔ.info.translate.x = a;
            this.ⲆⲆⲆⲆΔⲆΔ.info.translate.y = 36;
            this.ΔⵠᐃⵠⲆⲆⵠ.info.translate.x = a;
            this.ΔⵠᐃⵠⲆⲆⵠ.info.translate.y = 36;
        };
        this.ΔΔⵠΔΔⵠⵠ = function () {
            var a = 12 + Math.floor((10 + this.ⵠᐃⵠΔⵠⵠⵠ.info.ⵠΔ[0].width) * Math.floor((3 + rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ.length) / 4) + 35);
            this.ⵠᐃⵠΔⵠⵠⵠ.info.translate.x = a;
            this.ⵠᐃⵠΔⵠⵠⵠ.info.translate.y = 36;
            a += 83;
            this.ⵠᐃⵠⵠⲆᐃⲆ.info.translate.x = a;
            this.ⵠᐃⵠⵠⲆᐃⲆ.info.translate.y = 36;
        };
        this.ᐃⵠΔⲆⲆⲆᐃ = function () {
            var a = Math.floor((10 + this.Δᐃⵠⵠⵠᐃⵠ.info.ⵠΔ[0].width) * Math.floor((3 + rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ.length) / 4) + 35);
            this.Δᐃⵠⵠⵠᐃⵠ.info.translate.x = a;
            this.Δᐃⵠⵠⵠᐃⵠ.info.translate.y = 22;
        };
        this.ⵠⵠΔⵠᐃᐃⵠ = function () {
            var a = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ;
            if (a.length > 0) {
                var b = Math.floor((no - rx.ⲆⲆΔⵠ.max * (a[0].info.width + 5)) / 2);
            }
            for (var c = 0; c < a.length; c++) {
                a[c].info.translate.x = b + c * (a[c].info.width + 5);
                a[c].info.translate.y = so - a[c].info.width - 10;
                this.ΔΔΔⲆⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ΔΔΔⲆⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔΔΔⲆⵠ[a[c].id].info.ⵠΔ[0].height - 6;
            }
        };
        var m;
        var n = 0;
        function o() {
            f.ⵠᐃᐃ();
            if (++n == 30) {
                f.ⵠᐃⵠΔⲆᐃΔ();
                f.ⵠᐃᐃ();
                return;
            }
            cj.setTimeout(o, 33);
        }
        this.ΔΔⵠⲆΔ = function (a) {
            if (rx.ΔΔⲆⲆᐃ.open) {
                rx.ΔΔⲆⲆᐃ.ΔΔⵠⲆΔ();
            }
            if (rx.ΔΔΔΔΔ.open) {
                rx.ΔΔΔΔΔ.ΔΔⵠⲆΔ();
            }
            document.getElementById("team_box").style.display = "none";
            f.ⲆⵠⲆΔⲆ.style.display = "none";
            f.ⲆⵠⲆΔⲆ.open = false;
            f.sign.style.display = "none";
            f.sign.open = al;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            f.ⲆⲆⵠⵠ.open = false;
            document.getElementById("option_in_game").style.display = "none";
            f.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            f.Δᐃⵠᐃ.open = cd;
            document.getElementById("cancel_sure_delete").style.display = "none";
            f.ΔΔⲆⵠⲆ.open = kk;
            document.getElementById("chronoquest").style.display = "none";
            f.ΔⵠⵠΔ.open = false;
            m = a;
            f.ΔᐃΔⵠΔⲆⵠ();
            f.ⲆⲆ.style.cursor = f.ⵠⲆⲆΔᐃᐃⵠ;
            ux.ΔΔⵠⲆΔ();
            g = -1;
            p();
            Bx();
        };
        var g = -1;
        function p() {
            f.ⵠᐃᐃ();
            if (++g == 30) {
                f.stop();
                m();
                return;
            }
            cj.setTimeout(p, 33);
        }
        this.ⵠⲆⲆΔⲆ = vn;
        this.stop = function () {
            this.ⵠⲆⲆΔⲆ = cb;
        };
        this.ΔⲆⲆⲆᐃ = function () {
            ⲆᐃⲆᐃ.ΔⵠᐃⲆⵠΔⵠΔⵠ();
            f.ⵠⲆⲆΔⲆ = nk;
            g = -1;
            n = 0;
            o();
        };
        this.ⵠᐃᐃ = function () {
            this.ⵠΔᐃᐃ.translate.x = no - this.ⵠΔᐃᐃ.ⵠΔ.width - 10;
            this.ⵠΔᐃᐃ.translate.y = 5;
            qx.ⵠⵠⵠⵠⲆ.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[725][0].width - 85;
            qx.ⵠⵠⵠⵠⲆ.translate.y = 10;
            this.ⲆⲆⵠⵠ.button.info.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[708][0].width - 10;
            this.ⲆⲆⵠⵠ.button.info.translate.y = 10;
            this.ΔⵠⵠΔ.button.info.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[755][0].width - 20;
            this.ΔⵠⵠΔ.button.info.translate.y = this.ⲆⲆⵠⵠ.button.info.translate.y + ᐃⵠ[708][0].height + 5;
            this.options.button.info.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[727][0].width - 20;
            this.options.button.info.translate.y = this.ΔⵠⵠΔ.button.info.translate.y + ᐃⵠ[727][0].height + 18;
            this.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.info.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[727][0].width - 20;
            this.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.info.translate.y = this.options.button.info.translate.y + ᐃⵠ[783][0].height;
            this.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.info.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[727][0].width - 20;
            this.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.info.translate.y = this.options.button.info.translate.y + ᐃⵠ[783][0].height;
            this.ⲆⵠⲆΔⲆ.button.info.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[795][0].width - 20;
            this.ⲆⵠⲆΔⲆ.button.info.translate.y = this.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.info.translate.y + ᐃⵠ[795][0].height;
            rx.ⲆⲆⲆᐃⲆ.translate.x = this.ⵠΔᐃᐃ.translate.x - 63 - 85;
            rx.ⲆⲆⲆᐃⲆ.translate.y = 100;
            rx.ⵠᐃᐃᐃΔ.translate.x = this.ⵠΔᐃᐃ.translate.x - ᐃⵠ[517].width - 85;
            rx.ⵠᐃᐃᐃΔ.translate.y = rx.ⲆⲆⲆᐃⲆ.translate.y + 10 + ᐃⵠ[546].height;
            this.ᐃⵠⲆⵠΔ.translate.y = so - 3 - 193;
            this.ᐃⵠⲆⵠΔ.translate.x = no - 3 - 193;
            this.ᐃᐃⵠᐃ.translate.x = 5;
            this.ᐃᐃⵠᐃ.translate.y = so - this.ᐃᐃⵠᐃ.ⵠΔ.height - 5;
            this.ᐃⲆΔⵠΔ.button.info.translate.x = lo - 91 / 2;
            this.ᐃⲆΔⵠΔ.button.info.translate.y = 50;
            this.ⵠⵠΔⲆΔᐃⵠ();
            this.ⵠⵠΔⵠᐃᐃⵠ();
            this.ⵠⵠⵠⲆΔⵠᐃ();
            this.ᐃⵠΔⲆⲆⲆᐃ();
            this.ΔΔⵠΔΔⵠⵠ();
            this.ᐃᐃⵠⵠⵠΔᐃ();
            this.ΔⵠⵠᐃᐃⲆⲆ();
            this.ᐃⵠΔⲆⲆⲆⵠᐃΔ();
            this.sign.ᐃᐃΔΔⲆΔΔ();
            Gp();
            rx.ΔΔⲆⲆᐃ.ⵠᐃᐃ();
            rx.ΔΔΔΔΔ.ⵠᐃᐃ();
            this.ᐃΔⲆΔΔⵠΔⲆⵠ.ⵠᐃᐃ();
            this.ⲆⲆⵠⵠ.ⲆⲆΔⵠΔΔⵠ.ⵠᐃᐃ();
            this.ⲆⲆⵠⵠ.list.ⵠᐃᐃ();
            this.Δᐃⵠᐃ.ⵠᐃᐃ();
            this.ΔΔⲆⵠⲆ.ⵠᐃᐃ();
            this.ΔⵠⵠΔ.ⵠᐃᐃ();
            this.ᐃⲆΔⵠΔ.ⵠᐃᐃ();
            this.options.ⵠᐃᐃ();
            this.ⲆⵠⲆΔⲆ.ⵠᐃᐃ();
            this.sign.ⵠᐃᐃ();
            var a = 0;
            if (n != 30) {
                a = 1500 / (n + 1) - 50;
            }
            if (g != -1) {
                a = -(1500 / (30 - g + 1) - 48);
            }
            this.ᐃⲆΔⵠΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠΔᐃᐃ.translate.y -= a > 0 ? a : -a;
            rx.ⲆⲆⲆᐃⲆ.translate.y -= a > 0 ? a : -a;
            rx.ⵠᐃᐃᐃΔ.translate.y -= a > 0 ? a : -a;
            this.ⲆⲆⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔⵠⵠΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ⲆⵠⲆΔⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.info.translate.y -= a > 0 ? a : -a;
            this.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.info.translate.y -= a > 0 ? a : -a;
            qx.ⵠⵠⵠⵠⲆ.translate.y -= a > 0 ? a : -a;
            this.ᐃᐃⵠᐃ.translate.y -= a < 0 ? a : -a;
            this.ᐃⵠⲆⵠΔ.translate.y -= a < 0 ? a : -a;
        };
        this.ΔᐃΔΔⵠΔᐃΔᐃ = function () {
            if (!rx.ⵠⵠΔⲆⵠ.enabled && !!this.ⲆⲆᐃΔΔᐃᐃ && !rx.ⵠⲆⲆᐃⲆ) {
                bv();
            }
            Xu();
            (function () {
                var a = qx.ⵠⲆⵠ[0];
                if (qx.mode === 0 || qx.mode === 7 || qx.mode === 2 || qx.mode === 4 || qx.mode === 5 || qx.mode === 6 || qx.mode === 3) {
                    for (var b = 0; a.length > b; b++) {
                        a[b].ΔⵠΔⵠⲆⵠᐃ();
                    }
                } else if (qx.mode === 1) {
                    for (b = 0; b < a.length; b++) {
                        if (rx.ΔⲆⲆⵠΔΔⵠ || rx.ⵠᐃᐃᐃΔ.enabled || a[b].ᐃᐃΔⲆ.ΔⲆᐃᐃΔ !== "spectator") {
                            a[b].ΔⵠΔⵠⲆⵠᐃ();
                        }
                    }
                }
            })();
            hr.ⵠⵠⵠⲆⵠⲆᐃ();
            if (this.ⲆⲆᐃΔΔᐃᐃ) {
                Hp();
                if (this.ᐃⵠⲆᐃΔⵠᐃ === 1) {
                    this.ⲆⲆⵠⵠ.button.ⵠᐃΔⵠ(c);
                }
                if (qx.mode !== 2 && qx.mode !== 4 && qx.mode !== 5 && this.ⲆⲆᐃᐃⵠᐃⵠ === 1) {
                    this.ΔⵠⵠΔ.button.ⵠᐃΔⵠ(c);
                }
                this.options.button.ⵠᐃΔⵠ(c);
                if (this.ᐃᐃⵠⵠⵠᐃΔ === 1) {
                    this.ⲆⵠⲆΔⲆ.button.ⵠᐃΔⵠ(c);
                }
                if (ux.ΔⲆⲆⲆᐃ) {
                    this.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.ⵠᐃΔⵠ(c);
                } else {
                    this.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.ⵠᐃΔⵠ(c);
                }
                $p();
                Zu();
                this.ᐃᐃⵠᐃ.ⵠᐃΔⵠ();
                Ku();
                Ou();
                Su();
                Tu();
                Qu();
                Np();
                qp();
                (function () {
                    if (!rx.ⵠⲆⲆⲆ.open && !rx.ⲆⵠΔΔⵠ.open && !rx.ⲆᐃⲆΔ.open && !rx.ⵠⲆΔⲆ.open && !rx.ⵠᐃⵠⵠ.open) {
                        rx.ⲆⲆΔΔᐃ.open = kk;
                        var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                        var b = 100;
                        if (a) {
                            for (var c = 0; c < qx.ⵠⲆⵠ[35].length; c++) {
                                var d = qx.ⵠⲆⵠ[35][c];
                                var e = og.ΔⲆⵠᐃ(d, a);
                                if (b > e) {
                                    b = e;
                                    rx.ⲆⲆΔΔᐃ.open = sn;
                                    rx.ⲆⲆΔΔᐃ.ΔⵠⲆⲆ = d.ΔⵠⲆⲆ;
                                    rx.ⲆⲆΔΔᐃ.ΔᐃΔⵠⲆ = d.id;
                                }
                            }
                        }
                    }
                })();
                Sp();
                Yp();
                Wp();
                Up();
                Gp();
                _p();
            }
            if (rx.ⵠⵠΔⲆⵠ.enabled) {
                Fp();
            }
            jp();
            if (this.ⲆⲆᐃΔΔᐃᐃ && this.ᐃⲆᐃⲆΔⲆⲆ === 1) {
                Mu();
            }
            rx.ⲆᐃⲆᐃᐃΔⵠ.ⵠᐃΔⵠ();
            rx.alert.ⵠᐃΔⵠ("#FFF", "#000");
            if (this.ⲆⲆᐃΔΔᐃᐃ) {
                rx.ⵠⵠΔⲆⵠ.ⵠᐃΔⵠ();
                rx.ᐃⲆΔⵠΔ.ⵠᐃΔⵠ();
                rx.ⲆⲆΔⵠ.ⲆⲆᐃΔᐃΔᐃ.ⵠᐃΔⵠ(wx.ⵠⲆΔΔ.x, wx.ⵠⲆΔΔ.y);
            }
            Kp();
        };
        this.ⲆᐃΔᐃᐃⲆΔΔⵠ = function () {
            rx.ΔᐃⲆ.ⵠᐃᐃ();
            rx.ᐃᐃⵠᐃ.ⵠᐃᐃ();
            if (!rx.reconnect.enabled && rx.ᐃⵠΔᐃᐃ) {
                rx.control.ⵠᐃᐃ();
                rx.ⲆⲆⲆᐃⲆ.ⵠᐃᐃ();
            }
            qx.ⵠᐃᐃ();
            this.ΔⵠⵠΔ.ⵠⵠᐃᐃⵠⲆⲆⲆΔ();
        };
        this.ⵠⵠⵠᐃΔΔᐃᐃᐃ = function () {
            sf();
        };
        this.ⵠⲆΔⵠⲆⵠⵠⵠⲆ = function () {
            ⲆᐃⲆᐃ.ᐃᐃΔᐃᐃᐃᐃᐃᐃ();
            ⲆᐃⲆᐃ.ΔⵠΔᐃᐃⲆⵠΔⲆ();
            ⲆᐃⲆᐃ.ⵠⲆΔᐃⲆᐃⵠⲆⲆ();
            ⲆᐃⲆᐃ.ⵠⲆΔᐃᐃΔⵠⲆᐃ();
        };
        this.ⵠᐃΔⵠ = function () {
            if (!rx.reconnect.enabled && rx.ᐃⵠΔᐃᐃ) {
                this.ⵠⲆΔⵠⲆⵠⵠⵠⲆ();
            }
            ux.ΔᐃΔⲆⲆΔⵠᐃᐃ();
            this.ⲆᐃΔᐃᐃⲆΔΔⵠ();
            if (nx.ᐃΔᐃᐃᐃΔⲆ !== 1) {
                this.ⵠⵠⵠᐃΔΔᐃᐃᐃ();
                this.ΔᐃΔΔⵠΔᐃΔᐃ();
            } else {
                var a = Mh.ⲆΔᐃⲆⲆⲆᐃ;
                Rp(c, a, lo - a.width / 4, hq - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ᐃΔⵠⲆΔⵠᐃ = function (a) {
            if (!rx.ΔΔⲆⲆᐃ.open && !rx.ΔΔΔΔΔ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (rx.ΔΔⲆⲆᐃ.open && a.keyCode === 27) {
                rx.ΔΔⲆⲆᐃ.ΔΔⵠⲆΔ();
            } else if (rx.ΔΔΔΔΔ.open && a.keyCode === 27) {
                rx.ΔΔΔΔΔ.ΔΔⵠⲆΔ();
            } else if (rx.ΔΔⲆⲆᐃ.open || rx.ΔΔΔΔΔ.open || a.keyCode != 79 || g != -1) {
                if (a.keyCode == 13 && g == -1) {
                    if (rx.ΔΔΔΔΔ.open) {
                        rx.ΔΔΔΔΔ.ⵠᐃΔᐃᐃⵠⵠ();
                    } else {
                        rx.ΔΔⲆⲆᐃ.ΔⲆⲆⲆᐃ();
                    }
                } else if (!rx.ΔΔⲆⲆᐃ.open && !rx.ΔΔΔΔΔ.open) {
                    if (a.keyCode === 82) {
                        rx.ⲆⲆⲆᐃⲆ.ⲆⵠⲆΔⲆΔⲆ();
                    } else if (a.keyCode !== 80 || qx.mode !== 1 || rx.ΔⲆⲆⵠΔΔⵠ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (rx.ⲆΔⲆᐃ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ[b];
                                if (c) {
                                    ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            rx.ΔᐃΔⲆΔⵠΔ = !rx.ΔᐃΔⲆΔⵠΔ;
                        } else if (a.keyCode == 71) {
                            rx.ⲆΔⲆᐃ.ΔΔⵠⵠⲆⵠΔᐃΔ();
                        }
                    } else {
                        rx.ⵠᐃᐃᐃΔ.ⲆⵠⲆΔⲆΔⲆ();
                    }
                }
            } else {
                rx.ΔΔΔΔΔ.ⲆΔⵠΔΔⵠⲆᐃΔ();
            }
            vx.up(a);
        };
        this.ᐃΔⵠΔΔᐃⵠ = function (a) {
            vx.down(a);
            if (!rx.ΔΔⲆⲆᐃ.open && !rx.ΔΔΔΔΔ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
            }
        };
        this.ⵠⲆΔⵠᐃⲆⵠ = function (b) {
            wx.ⵠⲆΔΔ = pf(f.ⲆⲆ, b);
            var c = _e;
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                f.ᐃⵠⲆⵠΔ.focus(wx.ⵠⲆΔΔ);
            }
            var d = rx.ⵠⲆⲆⲆ;
            if (rx.ⲆΔⲆᐃ.id < 0 && d.id >= 0 && (!rx.ⵠⲆⲆⲆ.lock || rx.ⵠⲆⲆⲆ.ΔⵠⲆⲆ === rx.id)) {
                c |= f.ΔⲆᐃ[rx.ⵠⲆⲆⲆ.id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            var e = rx.ⲆᐃⲆΔ;
            if (e.open && e.ᐃΔⲆΔⲆ > 0) {
                c |= f.ⵠᐃⵠⵠⲆᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            var j = rx.ⵠᐃⵠⵠ;
            if (j.open && j.ᐃᐃΔⲆⲆᐃΔ > 0) {
                c |= f.ⵠΔᐃᐃⵠᐃΔ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                c |= f.ΔΔⲆⲆᐃᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                c |= f.ΔᐃᐃⵠᐃΔⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                c |= f.ⲆⲆⲆⲆΔⲆΔ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                c |= f.ΔⵠᐃⵠⲆⲆⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            var a = rx.ⵠⲆΔⲆ;
            if (a.open && a.ⵠᐃⲆΔⲆᐃⵠ > 0) {
                c |= f.ⲆⲆᐃᐃΔⵠⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (rx.sign.open) {
                c |= f.sign.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (!rx.ⵠⲆⲆⲆ.lock) {
                if (rx.ⵠⲆⲆⲆ.ⵠΔⵠⲆⲆᐃᐃ) {
                    c |= f.ΔΔⲆⵠⵠⲆᐃ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                }
            }
            if (rx.ⵠⲆⲆⲆ.ΔᐃΔᐃᐃᐃⲆ) {
                c |= f.ⲆᐃΔΔΔᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (rx.ⲆΔⲆᐃ.id < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open && !f.ⲆⵠⲆΔⲆ.open) {
                for (var k = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ, m = 0; k.length > m; m++) {
                    var n = k[m].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                    c |= n;
                    if (n) {
                        rx.ⲆⲆΔⵠ.ⲆⲆᐃΔᐃΔᐃ.start(m, wx.ⵠⲆΔΔ);
                    }
                    if (d.open && (d.id < 0 || d.id == k[m].id) || rx.ⲆⵠΔΔⵠ.open && k[m].id === 109 || rx.ⲆⲆΔΔᐃ.open && k[m].id === 180 || rx.ⵠⲆΔⲆ.open && (k[m].id === 109 || k[m].id === 131) || rx.ⲆᐃⲆΔ.open && k[m].id === 134 || rx.ⵠᐃⵠⵠ.open && k[m].id === 109) {
                        c |= f.ΔΔΔⲆⵠ[k[m].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                    }
                }
            }
            if (rx.ⲆΔⲆⲆⵠ.open) {
                c |= f.ⲆΔⲆⲆⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (f.ᐃᐃᐃⵠⵠ != -1) {
                if (c |= f.ⵠᐃΔΔᐃ[f.ᐃᐃᐃⵠⵠ].button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf)) {
                    var o = true;
                }
            } else {
                o = false;
            }
            if (rx.ⲆΔⲆᐃ.id < 0 && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !o && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ⲆⵠⲆΔⲆ.open && !rx.ⵠⲆⲆᐃⲆ) {
                k = rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ;
                m = 0;
                for (; k.length > m; m++) {
                    c |= k[m].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                }
            }
            if (rx.ⲆΔⲆᐃ.id < 0 && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !!rx.ᐃⲆΔⵠΔ.open && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open) {
                c |= f.ᐃⲆΔⵠΔ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open) {
                c |= f.ⲆⲆⵠⵠ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open) {
                c |= f.options.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open) {
                c |= f.ⲆⵠⲆΔⲆ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open && !f.ⲆⵠⲆΔⲆ.open) {
                if (ux.ΔⲆⲆⲆᐃ) {
                    c |= f.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                } else {
                    c |= f.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
                }
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.ⲆⵠⲆΔⲆ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && qx.mode !== 2 && qx.mode !== 4 && qx.mode !== 5) {
                c |= f.ΔⵠⵠΔ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, gf);
            }
            if (!c && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open && !f.sign.open) {
                if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ >= 0) {
                    ⲆᐃⲆᐃ.ΔᐃΔᐃⲆᐃΔᐃᐃ();
                } else if (!o) {
                    wx.down();
                }
            }
        };
        this.ⵠᐃⲆᐃⵠⵠΔ = function (b) {
            wx.ⵠⲆΔΔ = pf(f.ⲆⲆ, b);
            wx.up();
            if (!rx.ⲆⲆΔⵠ.ⲆⲆᐃΔᐃΔᐃ.release()) {
                var c = rx.ⵠⲆⲆⲆ;
                var d = rx.ⲆⵠΔΔⵠ;
                var e = rx.ⲆⲆΔΔᐃ;
                var i = rx.ⲆᐃⲆΔ;
                var j = rx.ⵠᐃⵠⵠ;
                var k = rx.ⵠⲆΔⲆ;
                if (rx.control.attack) {
                    rx.control.attack = 0;
                    ⲆᐃⲆᐃ.ⲆΔⲆΔⲆⲆⲆᐃᐃ();
                }
                if (f.ᐃᐃᐃⵠⵠ != -1) {
                    var m = f.ⵠᐃΔΔᐃ[f.ᐃᐃᐃⵠⵠ].button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        f.ⵠᐃΔΔᐃ[f.ᐃᐃᐃⵠⵠ].action();
                    }
                }
                if (rx.ⲆΔⲆᐃ.id < 0 && c.id >= 0 && !f.Δᐃⵠᐃ.open) {
                    if (!rx.ⵠⲆⲆⲆ.lock || rx.id === rx.ⵠⲆⲆⲆ.ΔⵠⲆⲆ) {
                        if (m = f.ΔⲆᐃ[rx.ⵠⲆⲆⲆ.id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                            ⲆᐃⲆᐃ.ⲆⲆⵠⲆᐃΔᐃⵠⲆ(c);
                        }
                    }
                }
                if ((i = rx.ⲆᐃⲆΔ).open && i.ᐃΔⲆΔⲆ > 0 && !f.Δᐃⵠᐃ.open) {
                    if (m = f.ⵠᐃⵠⵠⲆᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        ⲆᐃⲆᐃ.ᐃΔⲆⵠⲆⲆΔⲆⵠ(i);
                    }
                }
                if ((j = rx.ⵠᐃⵠⵠ).open && j.ᐃᐃΔⲆⲆᐃΔ > 0 && !f.Δᐃⵠᐃ.open) {
                    switch (j.type) {
                        case 24:
                            if (m = f.ⵠΔᐃᐃⵠᐃΔ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                                ⲆᐃⲆᐃ.ⲆⲆⲆⵠⲆΔᐃ(j);
                            }
                            break;
                        case 25:
                            if (m = f.ΔΔⲆⲆᐃᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                                ⲆᐃⲆᐃ.ⲆⲆⲆⵠⲆΔᐃ(j);
                            }
                            break;
                        case 26:
                            if (m = f.ΔᐃᐃⵠᐃΔⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                                ⲆᐃⲆᐃ.ⲆⲆⲆⵠⲆΔᐃ(j);
                            }
                            break;
                        case 27:
                            if (m = f.ⲆⲆⲆⲆΔⲆΔ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                                ⲆᐃⲆᐃ.ⲆⲆⲆⵠⲆΔᐃ(j);
                            }
                            break;
                        case 28:
                            if (m = f.ΔⵠᐃⵠⲆⲆⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                                ⲆᐃⲆᐃ.ⲆⲆⲆⵠⲆΔᐃ(j);
                            }
                    }
                }
                if ((k = rx.ⵠⲆΔⲆ).open && k.ⵠᐃⲆΔⲆᐃⵠ > 0 && !f.Δᐃⵠᐃ.open) {
                    if (m = f.ⲆⲆᐃᐃΔⵠⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        ⲆᐃⲆᐃ.ΔⲆᐃᐃΔᐃᐃᐃΔ(k);
                    }
                }
                if (rx.sign.open && !f.Δᐃⵠᐃ.open) {
                    if (m = f.sign.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        f.sign.select();
                    }
                }
                if (!rx.ⵠⲆⲆⲆ.lock && !f.Δᐃⵠᐃ.open) {
                    if (rx.ⵠⲆⲆⲆ.ⵠΔⵠⲆⲆᐃᐃ && (m = f.ΔΔⲆⵠⵠⲆᐃ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf))) {
                        ⲆᐃⲆᐃ.ΔⲆᐃⵠⵠⲆⲆΔⲆ(c);
                    }
                }
                if (rx.ⵠⲆⲆⲆ.ΔᐃΔᐃᐃᐃⲆ && !f.Δᐃⵠᐃ.open && (m = f.ⲆᐃΔΔΔᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf))) {
                    ⲆᐃⲆᐃ.ⲆⵠⵠᐃΔΔΔΔᐃ(c);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (rx.ⲆΔⲆⲆⵠ.open) {
                    if (m = f.ⲆΔⲆⲆⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        ⲆᐃⲆᐃ.ⲆΔⲆⲆⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.id < 0 && !rx.ⵠⵠΔⲆⵠ.enabled && !f.Δᐃⵠᐃ.open) {
                    for (var l = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ, o = 0; o < l.length; o++) {
                        if (m = l[o].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                            if (b.which != 1 || b.shiftKey) {
                                if ((b.which == 1 && b.shiftKey || b.which == 3) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                    f.Δᐃⵠᐃ.ⵠⵠⵠⲆᐃⲆΔ(l[o].id);
                                }
                            } else {
                                ⲆᐃⲆᐃ.ⲆᐃⲆⵠᐃ(l[o].id, o);
                            }
                        } else if (c.open && (c.id < 0 || c.id === l[o].id)) {
                            if ((m = f.ΔΔΔⲆⵠ[l[o].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                ⲆᐃⲆᐃ.ΔⲆⲆⲆⲆΔⵠᐃⵠ(c, l[o].id, b.shiftKey ? 10 : 1);
                            }
                        } else if (e.open && l[o].id === 180) {
                            if ((m = f.ΔΔΔⲆⵠ[l[o].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                ⲆᐃⲆᐃ.ᐃⵠΔᐃᐃⵠᐃΔⲆ(e);
                            }
                        } else if (d.open && l[o].id === 109) {
                            if ((m = f.ΔΔΔⲆⵠ[l[o].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                ⲆᐃⲆᐃ.ⵠᐃᐃⵠⲆᐃΔⲆΔ(d, b.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 134) {
                            if ((m = f.ΔΔΔⲆⵠ[l[o].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                ⲆᐃⲆᐃ.ᐃⵠⵠⲆΔᐃΔⵠⵠ(i, b.shiftKey ? 10 : 1);
                            }
                        } else if (j.open && l[o].id === 109) {
                            if ((m = f.ΔΔΔⲆⵠ[l[o].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                ⲆᐃⲆᐃ.ⲆⲆⵠⲆⵠᐃΔⵠΔ(j, b.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = f.ΔΔΔⲆⵠ[l[o].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0) {
                                if (l[o].id === 109) {
                                    ⲆᐃⲆᐃ.ᐃΔⲆⵠΔᐃᐃ(k, b.shiftKey ? 10 : 1, 0);
                                } else {
                                    ⲆᐃⲆᐃ.ᐃΔⲆⵠΔᐃᐃ(k, 0, b.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.id < 0 && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !rx.ⵠⵠΔⲆⵠ.enabled && !f.Δᐃⵠᐃ.open && !rx.ⵠⲆⲆᐃⲆ) {
                    l = rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ;
                    o = 0;
                    for (; l.length > o; o++) {
                        if (m = l[o].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                            ᐃⵠⵠᐃΔ = ⲆᐃⲆᐃ.ⵠⵠᐃᐃⵠᐃⲆⵠⵠ(l[o].id);
                            if (ᐃⵠⵠᐃΔ && ga) {
                                ga("send", "event", "Game", "craft", Tr[kt[l[o].id].ⵠΔⵠΔ].name);
                            }
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.id < 0 && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && rx.ᐃⲆΔⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open) {
                    if (m = f.ᐃⲆΔⵠΔ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf)) {
                        tx.ᐃⲆΔⵠΔ.select();
                    }
                }
                if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ⲆⵠⲆΔⲆ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open) {
                    if (ux.ΔⲆⲆⲆᐃ) {
                        if (m = f.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                            ux.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = f.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        ux.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open) {
                    if (m = f.options.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        f.options.ᐃⵠⲆᐃᐃⲆΔᐃⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open && f.ᐃᐃⵠⵠⵠᐃΔ === 1) {
                    if (m = f.ⲆⵠⲆΔⲆ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        f.ⲆⵠⲆΔⲆ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.Δᐃⵠᐃ.open && !f.ⲆⵠⲆΔⲆ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && f.ᐃⵠⲆᐃΔⵠᐃ === 1) {
                    if (m = f.ⲆⲆⵠⵠ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        f.ⲆⲆⵠⵠ.ⵠΔⵠⲆΔⲆⵠΔᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ⲆⵠⲆΔⲆ.open && qx.mode !== 2 && qx.mode !== 4 && qx.mode !== 5 && f.ⲆⲆᐃᐃⵠᐃⵠ === 1) {
                    if (m = f.ΔⵠⵠΔ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, uf)) {
                        f.ΔⵠⵠΔ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (rx.ⲆΔⲆᐃ.ΔᐃᐃⲆⵠ && b.which == 3) {
                    f.ΔΔⲆⵠⲆ.ⵠⵠⵠⲆᐃⲆΔ();
                }
            }
        };
        this.ᐃΔᐃᐃᐃⵠΔ = false;
        this.ⵠⲆⲆΔⵠΔⲆ = function (c) {
            wx.ⵠⲆΔΔ = pf(f.ⲆⲆ, c);
            var d = vn;
            tx.ᐃΔᐃΔᐃ.display = 0;
            rx.ⲆⲆΔⵠ.ⲆⲆᐃΔᐃΔᐃ.ⵠᐃᐃΔⵠ(wx.ⵠⲆΔΔ);
            if (f.ᐃᐃᐃⵠⵠ != -1) {
                d |= f.ⵠᐃΔΔᐃ[f.ᐃᐃᐃⵠⵠ].button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            var e = rx.ⲆᐃⲆΔ;
            if (e.open && e.ᐃΔⲆΔⲆ > 0) {
                d |= f.ⵠᐃⵠⵠⲆᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            var i = rx.ⵠᐃⵠⵠ;
            if (i.open && i.ᐃᐃΔⲆⲆᐃΔ > 0) {
                d |= f.ⵠΔᐃᐃⵠᐃΔ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                d |= f.ΔΔⲆⲆᐃᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                d |= f.ΔᐃᐃⵠᐃΔⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                d |= f.ⲆⲆⲆⲆΔⲆΔ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                d |= f.ΔⵠᐃⵠⲆⲆⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            var a = rx.ⵠⲆΔⲆ;
            if (a.open && a.ⵠᐃⲆΔⲆᐃⵠ > 0) {
                d |= f.ⲆⲆᐃᐃΔⵠⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.sign.open) {
                d |= f.sign.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            var j = rx.ⵠⲆⲆⲆ;
            if (rx.ⲆΔⲆᐃ.id < 0 && j.id >= 0 && !rx.ⵠⵠΔⲆⵠ.enabled && (!rx.ⵠⲆⲆⲆ.lock || rx.id === rx.ⵠⲆⲆⲆ.ΔⵠⲆⲆ)) {
                d |= f.ΔⲆᐃ[j.id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.ⲆΔⲆⲆⵠ.open) {
                d |= f.ⲆΔⲆⲆⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (!rx.ⵠⲆⲆⲆ.lock && !rx.ⵠⵠΔⲆⵠ.enabled) {
                if (rx.ⵠⲆⲆⲆ.ⵠΔⵠⲆⲆᐃᐃ) {
                    d |= f.ΔΔⲆⵠⵠⲆᐃ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                }
            }
            if (rx.ⵠⲆⲆⲆ.ΔᐃΔᐃᐃᐃⲆ && !rx.ⵠⵠΔⲆⵠ.enabled) {
                d |= f.ⲆᐃΔΔΔᐃⲆ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.ⲆΔⲆᐃ.id < 0 && !rx.ⵠⵠΔⲆⵠ.enabled) {
                for (var k = rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ, m = 0; k.length > m; m++) {
                    var n = k[m].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                    d |= tx.ᐃΔᐃΔᐃ.ⲆⵠΔⵠ(n, k[m], 0);
                    if (j.open && (j.id < 0 || j.id == k[m].id) || rx.ⲆⵠΔΔⵠ.open && k[m].id == 109 || rx.ⲆⲆΔΔᐃ.open && k[m].id === 180 || rx.ⵠⲆΔⲆ.open && (k[m].id == 109 || k[m].id == 131) || rx.ⲆᐃⲆΔ.open && k[m].id == 134 || rx.ⵠᐃⵠⵠ.open && k[m].id == 109) {
                        d |= f.ΔΔΔⲆⵠ[k[m].id].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                    }
                }
            }
            if (rx.ⲆΔⲆᐃ.id < 0 && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !rx.ⵠⵠΔⲆⵠ.enabled && !rx.ⵠⲆⲆᐃⲆ) {
                k = rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ;
                m = 0;
                for (; m < k.length; m++) {
                    n = w;
                    n = k[m].ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                    d |= tx.ᐃΔᐃΔᐃ.ⲆⵠΔⵠ(n, k[m], 1);
                }
            }
            if (rx.ⲆΔⲆᐃ.id < 0 && rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && rx.ᐃⲆΔⵠΔ.open && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open) {
                d |= f.ᐃⲆΔⵠΔ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open && f.ᐃⵠⲆᐃΔⵠᐃ === 1) {
                d |= f.ⲆⲆⵠⵠ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.ⲆⵠⲆΔⲆ.open) {
                d |= f.options.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open && f.ᐃᐃⵠⵠⵠᐃΔ === 1) {
                d |= f.ⲆⵠⲆΔⲆ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.ΔΔⲆⵠⲆ.open && !f.ΔⵠⵠΔ.open && !f.options.open && !f.ⲆⵠⲆΔⲆ.open) {
                if (ux.ΔⲆⲆⲆᐃ) {
                    d |= f.ⲆⵠⲆⵠ.ΔⲆⲆⲆΔⵠⵠ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                } else {
                    d |= f.ⲆⵠⲆⵠ.Δᐃⵠᐃᐃⵠᐃ.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
                }
            }
            if (rx.ⲆΔⲆᐃ.ΔΔΔᐃ < 0 && !f.ⲆⲆⵠⵠ.open && !f.Δᐃⵠᐃ.open && !f.options.open && !f.ΔΔⲆⵠⲆ.open && !f.ⲆⵠⲆΔⲆ.open && qx.mode !== 2 && qx.mode !== 4 && Df.ΔⵠΔΔΔⲆⵠΔΔ !== qx.mode && f.ⲆⲆᐃᐃⵠᐃⵠ === 1) {
                d |= f.ΔⵠⵠΔ.button.ⲆⵠΔⵠ(f.ⲆⲆ, wx.ⵠⲆΔΔ, lf);
            }
            if (d !== f.ᐃΔᐃᐃᐃⵠΔ) {
                f.ᐃΔᐃᐃᐃⵠΔ = d;
                b.style.cursor = d ? f.ⲆᐃⲆⲆⲆᐃᐃ : f.ⵠⲆⲆΔᐃᐃⵠ;
            }
        };
        this.ⵠᐃⵠΔⲆᐃΔ = function () {
            cj.addEventListener("mousedown", this.ⵠⲆΔⵠᐃⲆⵠ, vn);
            cj.addEventListener("mouseup", this.ⵠᐃⲆᐃⵠⵠΔ, cd);
            cj.addEventListener("mousemove", this.ⵠⲆⲆΔⵠΔⲆ, cb);
            cj.addEventListener("keyup", this.ᐃΔⵠⲆΔⵠᐃ, false);
            cj.addEventListener("keydown", this.ᐃΔⵠΔΔᐃⵠ, false);
        };
        this.ΔᐃΔⵠΔⲆⵠ = function () {
            cj.removeEventListener("mousedown", this.ⵠⲆΔⵠᐃⲆⵠ, false);
            cj.removeEventListener("mouseup", this.ⵠᐃⲆᐃⵠⵠΔ, false);
            cj.removeEventListener("mousemove", this.ⵠⲆⲆΔⵠΔⲆ, fs);
            cj.removeEventListener("keyup", this.ᐃΔⵠⲆΔⵠᐃ, al);
            cj.removeEventListener("keydown", this.ᐃΔⵠΔΔᐃⵠ, _e);
        };
    }
    (function () {
        function b() {
            this.ᐃᐃᐃⲆΔ();
        }
        b.prototype = {
            ᐃᐃᐃⲆΔ: function () {
                var a = this || j;
                a.ⲆⵠΔⲆᐃⵠⲆ = 1000;
                a.ᐃⲆⵠΔⵠⵠⵠ = {};
                a.ΔΔΔᐃⲆ = [];
                a.ⵠᐃⲆⵠⵠ = false;
                a.ⵠᐃⲆⲆⲆ = 1;
                a.ⵠᐃᐃⵠᐃⵠⵠ = "canplaythrough";
                a.ⵠⲆΔⲆᐃ = typeof cj != "undefined" && cj.navigator ? cj.navigator : null;
                a.ⲆⵠΔᐃᐃΔⲆ = null;
                a.ΔⲆⵠᐃⵠⵠᐃ = false;
                a.ⵠⵠⲆᐃⲆ = true;
                a.ΔΔᐃᐃⲆⵠΔ = true;
                a.ⵠ = null;
                a.ᐃΔⵠⵠⵠⵠΔ = true;
                a.ⵠⵠΔⵠⵠᐃᐃ();
                return a;
            },
            volume: function (b) {
                var c = this || j;
                b = parseFloat(b);
                if (!c.ⵠ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ⵠᐃⲆⲆⲆ = b;
                    if (c.ⵠᐃⲆⵠⵠ) {
                        return c;
                    }
                    if (c.ⵠⵠⲆᐃⲆ) {
                        c.ⲆⵠΔᐃᐃΔⲆ.gain.value = b;
                    }
                    for (var d = 0; d < c.ΔΔΔᐃⲆ.length; d++) {
                        if (!c.ΔΔΔᐃⲆ[d].ᐃⵠᐃⲆΔ) {
                            for (var f = c.ΔΔΔᐃⲆ[d].ΔⲆⲆᐃΔ(), g = 0; g < f.length; g++) {
                                var h = c.ΔΔΔᐃⲆ[d].ⵠΔᐃᐃΔ(f[g]);
                                if (h && h.ⵠⲆⵠᐃ) {
                                    h.ⵠⲆⵠᐃ.volume = h.ⵠᐃⲆⲆⲆ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ⵠᐃⲆⲆⲆ;
            },
            ΔⲆⲆΔⲆⵠⲆ: function (b) {
                var c = this || j;
                if (!c.ⵠ) {
                    i();
                }
                c.ⵠᐃⲆⵠⵠ = b;
                if (c.ⵠⵠⲆᐃⲆ) {
                    c.ⲆⵠΔᐃᐃΔⲆ.gain.value = b ? 0 : c.ⵠᐃⲆⲆⲆ;
                }
                for (var d = 0; d < c.ΔΔΔᐃⲆ.length; d++) {
                    if (!c.ΔΔΔᐃⲆ[d].ᐃⵠᐃⲆΔ) {
                        for (var e = c.ΔΔΔᐃⲆ[d].ΔⲆⲆᐃΔ(), f = 0; f < e.length; f++) {
                            var g = c.ΔΔΔᐃⲆ[d].ⵠΔᐃᐃΔ(e[f]);
                            if (g && g.ⵠⲆⵠᐃ) {
                                g.ⵠⲆⵠᐃ.muted = !!b || g.ⵠᐃⲆⵠⵠ;
                            }
                        }
                    }
                }
                return c;
            },
            ᐃᐃⵠⲆⲆⲆⵠ: function () {
                var a = this || j;
                for (var b = a.ΔΔΔᐃⲆ.length - 1; b >= 0; b--) {
                    a.ΔΔΔᐃⲆ[b].ᐃᐃⵠⲆⲆⲆⵠ();
                }
                if (a.ⵠⵠⲆᐃⲆ && a.ⵠ && a.ⵠ.close !== undefined) {
                    a.ⵠ.close();
                    a.ⵠ = null;
                    i();
                }
                return a;
            },
            ΔⲆⵠⲆⲆᐃⵠᐃᐃ: function (a) {
                return (this || j).ᐃⲆⵠΔⵠⵠⵠ[a.replace(/^x-/, "")];
            },
            ⵠⵠΔⵠⵠᐃᐃ: function () {
                var a = this || j;
                a.state = a.ⵠ && a.ⵠ.state || "running";
                a.ⲆⲆΔⲆⲆᐃⵠ();
                if (!a.ⵠⵠⲆᐃⲆ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ⵠᐃᐃⵠᐃⵠⵠ = "canplay";
                            }
                        } catch (b) {
                            a.ΔⲆⵠᐃⵠⵠᐃ = true;
                        }
                    } else {
                        a.ΔⲆⵠᐃⵠⵠᐃ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ΔⲆⵠᐃⵠⵠᐃ = true;
                    }
                } catch (a) { }
                if (!a.ΔⲆⵠᐃⵠⵠᐃ) {
                    a.ΔⲆᐃⵠⲆⵠⵠᐃΔ();
                }
                return a;
            },
            ΔⲆᐃⵠⲆⵠⵠᐃΔ: function () {
                var b = this || j;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ⵠⲆΔⲆᐃ && b.ⵠⲆΔⲆᐃ.userAgent.match(/OPR\/([0-6].)/g);
                var f = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ᐃⲆⵠΔⵠⵠⵠ = {
                    ΔᐃΔΔᐃᐃⵠΔΔ: !f && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ⲆⲆⲆⲆᐃΔᐃᐃΔ: !!d,
                    ΔⲆⲆⲆΔᐃᐃⵠᐃ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ΔⲆⵠᐃⲆᐃⵠⵠᐃ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔⲆΔᐃΔⲆΔⵠΔ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⲆᐃΔⵠᐃᐃⵠⲆᐃ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ⵠⵠⲆⵠⲆΔⲆᐃΔ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ΔⲆⲆⵠΔΔᐃΔΔ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ᐃΔᐃⵠᐃᐃΔⵠⲆ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⲆⲆᐃⵠᐃⲆΔⲆΔ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ΔⵠⵠⲆᐃᐃⲆᐃⲆ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔᐃΔΔⵠᐃΔΔⵠ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠΔᐃⵠⲆⲆΔΔΔ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ΔⲆΔᐃᐃΔΔΔΔ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ⵠΔⵠΔᐃᐃΔᐃΔ: function () {
                var b = this || j;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ⵠⲆΔⲆᐃ && b.ⵠⲆΔⲆᐃ.userAgent);
                var c = !!("ontouchend" in cj) || !!b.ⵠⲆΔⲆᐃ && b.ⵠⲆΔⲆᐃ.maxTouchPoints > 0 || !!b.ⵠⲆΔⲆᐃ && b.ⵠⲆΔⲆᐃ.ⵠⲆⵠᐃΔⵠⵠΔᐃ > 0;
                if (!b.ⲆⵠⲆⵠⲆΔⲆ && b.ⵠ && (a || c)) {
                    b.ⲆⵠⲆⵠⲆΔⲆ = false;
                    if (!b.ⵠⲆΔᐃⵠᐃΔⵠⵠ && b.ⵠ.sampleRate !== 44100) {
                        b.ⵠⲆΔᐃⵠᐃΔⵠⵠ = true;
                        b.ᐃᐃⵠⲆⲆⲆⵠ();
                    }
                    b.ΔⵠⲆΔⵠⵠⲆ = b.ⵠ.createBuffer(1, 1, 22050);
                    function c() {
                        j.ⲆⲆⵠⵠᐃⲆⵠ();
                        var a = b.ⵠ.createBufferSource();
                        a.buffer = b.ΔⵠⲆΔⵠⵠⲆ;
                        a.connect(b.ⵠ.destination);
                        if (a.start === undefined) {
                            a.ⵠⲆΔⵠⲆⵠᐃⵠⵠ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.ⵠ.resume == "function") {
                            b.ⵠ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ⲆⵠⲆⵠⲆΔⲆ = true;
                            b.ᐃΔⵠⵠⵠⵠΔ = false;
                            document.removeEventListener("touchend", c, true);
                        };
                    }
                    document.addEventListener("touchend", c, true);
                    return b;
                }
            },
            ⲆⲆΔⲆⲆᐃⵠ: function () {
                var a = this;
                if (a.ΔΔᐃᐃⲆⵠΔ && a.ⵠ && a.ⵠ.suspend !== undefined && j.ⵠⵠⲆᐃⲆ) {
                    for (var b = 0; b < a.ΔΔΔᐃⲆ.length; b++) {
                        if (a.ΔΔΔᐃⲆ[b].ᐃⵠᐃⲆΔ) {
                            for (var c = 0; c < a.ΔΔΔᐃⲆ[b].ⲆᐃᐃⵠΔ.length; c++) {
                                if (!a.ΔΔΔᐃⲆ[b].ⲆᐃᐃⵠΔ[c].ᐃᐃᐃᐃᐃ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ΔⵠⲆᐃᐃᐃⵠ) {
                        clearTimeout(a.ΔⵠⲆᐃᐃᐃⵠ);
                    }
                    a.ΔⵠⲆᐃᐃᐃⵠ = setTimeout(function () {
                        if (a.ΔΔᐃᐃⲆⵠΔ) {
                            a.ΔⵠⲆᐃᐃᐃⵠ = null;
                            a.state = "suspending";
                            a.ⵠ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ⲆΔΔⲆⲆⵠᐃ) {
                                    delete a.ⲆΔΔⲆⲆⵠᐃ;
                                    a.ⲆⲆⵠⵠᐃⲆⵠ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ⲆⲆⵠⵠᐃⲆⵠ: function () {
                var a = this;
                if (a.ⵠ && a.ⵠ.resume !== undefined && j.ⵠⵠⲆᐃⲆ) {
                    if (a.state === "running" && a.ΔⵠⲆᐃᐃᐃⵠ) {
                        clearTimeout(a.ΔⵠⲆᐃᐃᐃⵠ);
                        a.ΔⵠⲆᐃᐃᐃⵠ = null;
                    } else if (a.state === "suspended") {
                        a.ⵠ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ΔΔΔᐃⲆ.length; b++) {
                                a.ΔΔΔᐃⲆ[b].ΔΔᐃⵠⵠ("resume");
                            }
                        });
                        if (a.ΔⵠⲆᐃᐃᐃⵠ) {
                            clearTimeout(a.ΔⵠⲆᐃᐃᐃⵠ);
                            a.ΔⵠⲆᐃᐃᐃⵠ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ⲆΔΔⲆⲆⵠᐃ = true;
                    }
                    return a;
                }
            }
        };
        var j = new b();
        function c(a) {
            if (a.src && a.src.length !== 0) {
                this.ᐃᐃᐃⲆΔ(a);
            } else {
                console.error(undefined);
            }
        }
        c.prototype = {
            ᐃᐃᐃⲆΔ: function (a) {
                var b = this;
                if (!j.ⵠ) {
                    i();
                }
                b.ᐃᐃΔΔΔⵠᐃΔΔ = a.autoplay || false;
                b.ⲆⲆⵠΔΔΔΔ = typeof a.ⲆᐃᐃⵠⵠⲆΔ != "string" ? a.ⲆᐃᐃⵠⵠⲆΔ : [a.ⲆᐃᐃⵠⵠⲆΔ];
                b.ΔᐃΔΔⵠᐃᐃ = a.ⲆⵠΔⵠⵠᐃⵠΔⲆ || false;
                b.ⵠᐃⲆⵠⵠ = a.ΔⲆⲆΔⲆⵠⲆ || false;
                b.ⵠᐃⵠᐃⲆ = a.loop || false;
                b.ⲆᐃᐃⵠⵠⲆΔⵠΔ = a.ᐃⵠⲆΔⵠᐃᐃΔᐃ || 5;
                b.ᐃⵠΔᐃΔᐃⵠⲆⲆ = typeof a.preload != "boolean" || a.preload;
                b.ⲆΔΔᐃⲆ = a.rate || 1;
                b.ΔⵠⲆⲆⵠ = a.ᐃⵠ || {};
                b.Δⵠⵠᐃᐃ = typeof a.src != "string" ? a.src : [a.src];
                b.ⵠᐃⲆⲆⲆ = a.volume !== undefined ? a.volume : 1;
                b.ⲆⲆᐃᐃᐃΔᐃ = 0;
                b.ⲆᐃᐃΔⵠ = "unloaded";
                b.ⲆᐃᐃⵠΔ = [];
                b.ᐃΔⵠⵠⲆᐃⲆ = {};
                b.ⲆᐃⲆΔᐃ = [];
                b.ⲆΔΔΔᐃΔΔⵠⵠ = a.onend ? [{
                    ΔᐃⵠΔⵠ: a.onend
                }] : [];
                b.ΔᐃᐃⲆⵠᐃⵠΔᐃ = a.onfade ? [{
                    ΔᐃⵠΔⵠ: a.onfade
                }] : [];
                b.ⵠᐃⵠⵠᐃⵠΔⲆΔ = a.onload ? [{
                    ΔᐃⵠΔⵠ: a.onload
                }] : [];
                b.ᐃⵠᐃΔᐃᐃⵠⵠᐃ = a.ⲆⲆⲆΔⲆΔⲆⲆΔ ? [{
                    ΔᐃⵠΔⵠ: a.ⲆⲆⲆΔⲆΔⲆⲆΔ
                }] : [];
                b.ᐃⲆᐃⵠⲆΔΔⲆΔ = a.onpause ? [{
                    ΔᐃⵠΔⵠ: a.onpause
                }] : [];
                b.ΔᐃΔᐃᐃⵠⲆⵠᐃ = a.onplay ? [{
                    ΔᐃⵠΔⵠ: a.onplay
                }] : [];
                b.ⵠⲆⵠⲆᐃᐃⵠⲆΔ = a.onstop ? [{
                    ΔᐃⵠΔⵠ: a.onstop
                }] : [];
                b.ⲆⵠΔᐃⲆΔⲆΔⲆ = a.onmute ? [{
                    ΔᐃⵠΔⵠ: a.onmute
                }] : [];
                b.ᐃΔΔⵠⲆΔⵠᐃⲆ = a.ⵠΔⵠΔⵠΔᐃᐃⲆ ? [{
                    ΔᐃⵠΔⵠ: a.ⵠΔⵠΔⵠΔᐃᐃⲆ
                }] : [];
                b.ⵠⲆⵠⵠⵠΔΔⲆⵠ = a.ⵠΔⲆΔᐃⲆᐃᐃⵠ ? [{
                    ΔᐃⵠΔⵠ: a.ⵠΔⲆΔᐃⲆᐃᐃⵠ
                }] : [];
                b.ΔΔΔΔΔΔⵠᐃⲆ = a.ᐃⲆⲆⵠⲆᐃⲆⵠΔ ? [{
                    ΔᐃⵠΔⵠ: a.ᐃⲆⲆⵠⲆᐃⲆⵠΔ
                }] : [];
                b.ⵠΔᐃΔⲆᐃᐃⵠⵠ = [];
                b.ᐃⵠᐃⲆΔ = j.ⵠⵠⲆᐃⲆ && !b.ΔᐃΔΔⵠᐃᐃ;
                if (j.ⵠ !== undefined && j.ⵠ && j.ᐃΔⵠⵠⵠⵠΔ) {
                    j.ⵠΔⵠΔᐃᐃΔᐃΔ();
                }
                j.ΔΔΔᐃⲆ.push(b);
                if (b.ᐃᐃΔΔΔⵠᐃΔΔ) {
                    b.ⲆᐃⲆΔᐃ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ᐃⵠΔᐃΔᐃⵠⲆⲆ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var c = null;
                if (!j.ΔⲆⵠᐃⵠⵠᐃ) {
                    if (typeof b.Δⵠⵠᐃᐃ == "string") {
                        b.Δⵠⵠᐃᐃ = [b.Δⵠⵠᐃᐃ];
                    }
                    for (var e = 0; e < b.Δⵠⵠᐃᐃ.length; e++) {
                        var f;
                        var g;
                        if (b.ⲆⲆⵠΔΔΔΔ && b.ⲆⲆⵠΔΔΔΔ[e]) {
                            f = b.ⲆⲆⵠΔΔΔΔ[e];
                        } else {
                            if (typeof (g = b.Δⵠⵠᐃᐃ[e]) != "string") {
                                b.ΔΔᐃⵠⵠ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(f = /^data:audio\/([^;,]+);/i.exec(g))) {
                                f = /\.([^.]+)$/.exec(g.split("?", 1)[0]);
                            }
                            f &&= f[1].toLowerCase();
                        }
                        if (!f) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (f && j.ΔⲆⵠⲆⲆᐃⵠᐃᐃ(f)) {
                            c = b.Δⵠⵠᐃᐃ[e];
                            break;
                        }
                    }
                    if (c) {
                        b.Δⵠⵠᐃᐃ = c;
                        b.ⲆᐃᐃΔⵠ = "loading";
                        if (cj.location.protocol === "https:" && c.slice(0, 5) === "http:") {
                            b.ΔᐃΔΔⵠᐃᐃ = true;
                            b.ᐃⵠᐃⲆΔ = false;
                        }
                        new d(b);
                        if (b.ᐃⵠᐃⲆΔ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ΔΔᐃⵠⵠ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ΔΔᐃⵠⵠ("loaderror", null, "No audio support.");
            },
            play: function (b, c) {
                var k = this;
                var e = null;
                if (typeof b == "number") {
                    e = b;
                    b = null;
                } else {
                    if (typeof b == "string" && k.ⲆᐃᐃΔⵠ === "loaded" && !k.ΔⵠⲆⲆⵠ[b]) {
                        return null;
                    }
                    if (b === undefined) {
                        b = "__default";
                        var f = 0;
                        for (var n = 0; n < k.ⲆᐃᐃⵠΔ.length; n++) {
                            if (k.ⲆᐃᐃⵠΔ[n].ᐃᐃᐃᐃᐃ && !k.ⲆᐃᐃⵠΔ[n].ΔΔᐃᐃᐃ) {
                                f++;
                                e = k.ⲆᐃᐃⵠΔ[n].ⵠⵠⲆⵠ;
                            }
                        }
                        if (f === 1) {
                            b = null;
                        } else {
                            e = null;
                        }
                    }
                }
                var o = e ? k.ⵠΔᐃᐃΔ(e) : k.ⲆΔΔᐃⵠᐃⲆⵠᐃ();
                if (!o) {
                    return null;
                }
                if (e && !b) {
                    b = o.ΔⵠⲆⲆⵠ || "__default";
                }
                if (k.ⲆᐃᐃΔⵠ !== "loaded") {
                    o.ΔⵠⲆⲆⵠ = b;
                    o.ΔΔᐃᐃᐃ = false;
                    var h = o.ⵠⵠⲆⵠ;
                    k.ⲆᐃⲆΔᐃ.push({
                        event: "play",
                        action: function () {
                            k.play(h);
                        }
                    });
                    return h;
                }
                if (e && !o.ᐃᐃᐃᐃᐃ) {
                    if (!c) {
                        setTimeout(function () {
                            k.ΔΔᐃⵠⵠ("play", o.ⵠⵠⲆⵠ);
                        }, 0);
                    }
                    return o.ⵠⵠⲆⵠ;
                }
                if (k.ᐃⵠᐃⲆΔ) {
                    j.ⲆⲆⵠⵠᐃⲆⵠ();
                }
                var l = Math.max(0, o.ⲆⲆᐃⵠᐃ > 0 ? o.ⲆⲆᐃⵠᐃ : k.ΔⵠⲆⲆⵠ[b][0] / 1000);
                var g = Math.max(0, (k.ΔⵠⲆⲆⵠ[b][0] + k.ΔⵠⲆⲆⵠ[b][1]) / 1000 - l);
                var q = g * 1000 / Math.abs(o.ⲆΔΔᐃⲆ);
                o.ᐃᐃᐃᐃᐃ = false;
                o.ΔΔᐃᐃᐃ = false;
                o.ΔⵠⲆⲆⵠ = b;
                o.ⲆⲆᐃⵠᐃ = l;
                o.ⲆⲆΔΔΔ = k.ΔⵠⲆⲆⵠ[b][0] / 1000;
                o.ⲆᐃⲆᐃᐃΔΔ = (k.ΔⵠⲆⲆⵠ[b][0] + k.ΔⵠⲆⲆⵠ[b][1]) / 1000;
                o.ⵠᐃⵠᐃⲆ = !!o.ⵠᐃⵠᐃⲆ || !!k.ΔⵠⲆⲆⵠ[b][2];
                var d = o.ⵠⲆⵠᐃ;
                if (k.ᐃⵠᐃⲆΔ) {
                    function a() {
                        k.ᐃᐃⲆΔΔⲆᐃᐃⲆ(o);
                        var a = o.ⵠᐃⲆⵠⵠ || k.ⵠᐃⲆⵠⵠ ? 0 : o.ⵠᐃⲆⲆⲆ;
                        d.gain.setValueAtTime(a, j.ⵠ.currentTime);
                        o.ⲆᐃⲆΔΔⵠᐃ = j.ⵠ.currentTime;
                        if (d.ΔΔⵠᐃⵠ.start === undefined) {
                            if (o.ⵠᐃⵠᐃⲆ) {
                                d.ΔΔⵠᐃⵠ.ⲆⵠⵠᐃΔⲆᐃⵠⲆ(0, l, 86400);
                            } else {
                                d.ΔΔⵠᐃⵠ.ⲆⵠⵠᐃΔⲆᐃⵠⲆ(0, l, g);
                            }
                        } else if (o.ⵠᐃⵠᐃⲆ) {
                            d.ΔΔⵠᐃⵠ.start(0, l, 86400);
                        } else {
                            d.ΔΔⵠᐃⵠ.start(0, l, g);
                        }
                        if (q !== Infinity) {
                            k.ᐃΔⵠⵠⲆᐃⲆ[o.ⵠⵠⲆⵠ] = setTimeout(k.ΔΔᐃᐃᐃ.bind(k, o), q);
                        }
                        if (!c) {
                            setTimeout(function () {
                                k.ΔΔᐃⵠⵠ("play", o.ⵠⵠⲆⵠ);
                            }, 0);
                        }
                    }
                    var t = j.state === "running";
                    if (k.ⲆᐃᐃΔⵠ === "loaded" && t) {
                        a();
                    } else {
                        var m = t || k.ⲆᐃᐃΔⵠ !== "loaded" ? "load" : "resume";
                        k.once(m, a, t ? o.ⵠⵠⲆⵠ : null);
                        k.ᐃᐃⵠⲆⵠΔⵠ(o.ⵠⵠⲆⵠ);
                    }
                } else {
                    function a() {
                        d.currentTime = l;
                        d.muted = o.ⵠᐃⲆⵠⵠ || k.ⵠᐃⲆⵠⵠ || j.ⵠᐃⲆⵠⵠ || d.muted;
                        d.volume = o.ⵠᐃⲆⲆⲆ * j.volume();
                        d.playbackRate = o.ⲆΔΔᐃⲆ;
                        d.play();
                        if (q !== Infinity) {
                            k.ᐃΔⵠⵠⲆᐃⲆ[o.ⵠⵠⲆⵠ] = setTimeout(k.ΔΔᐃᐃᐃ.bind(k, o), q);
                        }
                        if (!c) {
                            k.ΔΔᐃⵠⵠ("play", o.ⵠⵠⲆⵠ);
                        }
                    }
                    var p = k.ⲆᐃᐃΔⵠ === "loaded" && (cj && cj.ⲆⵠᐃᐃᐃⵠⵠΔⲆ || !d.readyState && j.ⵠⲆΔⲆᐃ.ⲆⲆᐃⵠⵠⲆⵠⵠΔ);
                    if (d.readyState === 4 || p) {
                        a();
                    } else {
                        function b() {
                            a();
                            d.removeEventListener(j.ⵠᐃᐃⵠᐃⵠⵠ, b, false);
                        }
                        d.addEventListener(j.ⵠᐃᐃⵠᐃⵠⵠ, b, false);
                        k.ᐃᐃⵠⲆⵠΔⵠ(o.ⵠⵠⲆⵠ);
                    }
                }
                return o.ⵠⵠⲆⵠ;
            },
            pause: function (a) {
                var b = this;
                if (b.ⲆᐃᐃΔⵠ !== "loaded") {
                    b.ⲆᐃⲆΔᐃ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ΔⲆⲆᐃΔ(a), d = 0; d < c.length; d++) {
                    b.ᐃᐃⵠⲆⵠΔⵠ(c[d]);
                    var e = b.ⵠΔᐃᐃΔ(c[d]);
                    if (e && !e.ᐃᐃᐃᐃᐃ && (e.ⲆⲆᐃⵠᐃ = b.ᐃⲆΔⵠᐃΔΔ(c[d]), e.ᐃΔᐃᐃⲆΔᐃ = 0, e.ᐃᐃᐃᐃᐃ = true, b.ΔΔᐃⵠⵠᐃⲆ(c[d]), e.ⵠⲆⵠᐃ)) {
                        if (b.ᐃⵠᐃⲆΔ) {
                            if (!e.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ) {
                                continue;
                            }
                            if (e.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.stop === undefined) {
                                e.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.ⵠⵠⲆΔΔⵠⲆᐃΔ(0);
                            } else {
                                e.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.stop(0);
                            }
                            b.ⵠΔⲆⵠⵠⲆΔ(e.ⵠⲆⵠᐃ);
                        } else if (!isNaN(e.ⵠⲆⵠᐃ.duration) || e.ⵠⲆⵠᐃ.duration === Infinity) {
                            e.ⵠⲆⵠᐃ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ΔΔᐃⵠⵠ("pause", e ? e.ⵠⵠⲆⵠ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ⲆᐃᐃΔⵠ !== "loaded") {
                    d.ⲆᐃⲆΔᐃ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ΔⲆⲆᐃΔ(b), f = 0; f < e.length; f++) {
                    d.ᐃᐃⵠⲆⵠΔⵠ(e[f]);
                    var g = d.ⵠΔᐃᐃΔ(e[f]);
                    if (g) {
                        g.ⲆⲆᐃⵠᐃ = g.ⲆⲆΔΔΔ || 0;
                        g.ᐃΔᐃᐃⲆΔᐃ = 0;
                        g.ᐃᐃᐃᐃᐃ = true;
                        g.ΔΔᐃᐃᐃ = true;
                        d.ΔΔᐃⵠⵠᐃⲆ(e[f]);
                        if (g.ⵠⲆⵠᐃ) {
                            if (d.ᐃⵠᐃⲆΔ) {
                                if (g.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ) {
                                    if (g.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.stop === undefined) {
                                        g.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.ⵠⵠⲆΔΔⵠⲆᐃΔ(0);
                                    } else {
                                        g.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.stop(0);
                                    }
                                    d.ⵠΔⲆⵠⵠⲆΔ(g.ⵠⲆⵠᐃ);
                                }
                            } else if (!isNaN(g.ⵠⲆⵠᐃ.duration) || g.ⵠⲆⵠᐃ.duration === Infinity) {
                                g.ⵠⲆⵠᐃ.currentTime = g.ⲆⲆΔΔΔ || 0;
                                g.ⵠⲆⵠᐃ.pause();
                            }
                        }
                        if (!c) {
                            d.ΔΔᐃⵠⵠ("stop", g.ⵠⵠⲆⵠ);
                        }
                    }
                }
                return d;
            },
            ΔⲆⲆΔⲆⵠⲆ: function (b, c) {
                var d = this;
                if (d.ⲆᐃᐃΔⵠ !== "loaded") {
                    d.ⲆᐃⲆΔᐃ.push({
                        event: "mute",
                        action: function () {
                            d.ΔⲆⲆΔⲆⵠⲆ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠᐃⲆⵠⵠ;
                    }
                    d.ⵠᐃⲆⵠⵠ = b;
                }
                for (var e = d.ΔⲆⲆᐃΔ(c), f = 0; f < e.length; f++) {
                    var g = d.ⵠΔᐃᐃΔ(e[f]);
                    if (g) {
                        g.ⵠᐃⲆⵠⵠ = b;
                        if (d.ᐃⵠᐃⲆΔ && g.ⵠⲆⵠᐃ) {
                            g.ⵠⲆⵠᐃ.gain.setValueAtTime(b ? 0 : g.ⵠᐃⲆⲆⲆ, j.ⵠ.currentTime);
                        } else if (g.ⵠⲆⵠᐃ) {
                            g.ⵠⲆⵠᐃ.muted = !!j.ⵠᐃⲆⵠⵠ || b;
                        }
                        d.ΔΔᐃⵠⵠ("mute", g.ⵠⵠⲆⵠ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ⵠᐃⲆⲆⲆ;
                }
                if (g.length === 1 || g.length === 2 && g[1] === undefined) {
                    if (f.ΔⲆⲆᐃΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        b = parseFloat(g[0]);
                    }
                } else if (g.length >= 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? f.ⵠΔᐃᐃΔ(c) : f.ⲆᐃᐃⵠΔ[0]) {
                        return d.ⵠᐃⲆⲆⲆ;
                    } else {
                        return 0;
                    }
                }
                if (f.ⲆᐃᐃΔⵠ !== "loaded") {
                    f.ⲆᐃⲆΔᐃ.push({
                        event: "volume",
                        action: function () {
                            f.volume.apply(f, g);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ⵠᐃⲆⲆⲆ = b;
                }
                c = f.ΔⲆⲆᐃΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ⵠΔᐃᐃΔ(c[a])) {
                        d.ⵠᐃⲆⲆⲆ = b;
                        if (!g[2]) {
                            f.ΔΔᐃⵠⵠᐃⲆ(c[a]);
                        }
                        if (f.ᐃⵠᐃⲆΔ && d.ⵠⲆⵠᐃ && !d.ⵠᐃⲆⵠⵠ) {
                            d.ⵠⲆⵠᐃ.gain.setValueAtTime(b, j.ⵠ.currentTime);
                        } else if (d.ⵠⲆⵠᐃ && !d.ⵠᐃⲆⵠⵠ) {
                            d.ⵠⲆⵠᐃ.volume = b * j.volume();
                        }
                        f.ΔΔᐃⵠⵠ("volume", d.ⵠⵠⲆⵠ);
                    }
                }
                return f;
            },
            fade: function (b, e, f, i) {
                var k = this;
                var a = Math.abs(b - e);
                var n = b > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? f / o : f;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ⲆᐃᐃΔⵠ !== "loaded") {
                    k.ⲆᐃⲆΔᐃ.push({
                        event: "fade",
                        action: function () {
                            k.fade(b, e, f, i);
                        }
                    });
                    return k;
                }
                k.volume(b, i);
                for (var q = k.ΔⲆⲆᐃΔ(i), g = 0; g < q.length; g++) {
                    var r = k.ⵠΔᐃᐃΔ(q[g]);
                    if (r) {
                        if (!i) {
                            k.ΔΔᐃⵠⵠᐃⲆ(q[g]);
                        }
                        if (k.ᐃⵠᐃⲆΔ && !r.ⵠᐃⲆⵠⵠ) {
                            var s = j.ⵠ.currentTime;
                            var t = s + f / 1000;
                            r.ⵠᐃⲆⲆⲆ = b;
                            r.ⵠⲆⵠᐃ.gain.setValueAtTime(b, s);
                            r.ⵠⲆⵠᐃ.gain.linearRampToValueAtTime(e, t);
                        }
                        var w = b;
                        r.ΔⲆⵠᐃΔⲆΔ = setInterval(function (a, c) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.ᐃⵠᐃⲆΔ) {
                                if (i === undefined) {
                                    k.ⵠᐃⲆⲆⲆ = w;
                                }
                                c.ⵠᐃⲆⲆⲆ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < b && w <= e || e > b && w >= e) {
                                clearInterval(c.ΔⲆⵠᐃΔⲆΔ);
                                c.ΔⲆⵠᐃΔⲆΔ = null;
                                k.volume(e, a);
                                k.ΔΔᐃⵠⵠ("fade", a);
                            }
                        }.bind(k, q[g], r), p);
                    }
                }
                return k;
            },
            ΔΔᐃⵠⵠᐃⲆ: function (a) {
                var b = this;
                var c = b.ⵠΔᐃᐃΔ(a);
                if (c && c.ΔⲆⵠᐃΔⲆΔ) {
                    if (b.ᐃⵠᐃⲆΔ) {
                        c.ⵠⲆⵠᐃ.gain.cancelScheduledValues(j.ⵠ.currentTime);
                    }
                    clearInterval(c.ΔⲆⵠᐃΔⲆΔ);
                    c.ΔⲆⵠᐃΔⲆΔ = null;
                    b.ΔΔᐃⵠⵠ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ⵠᐃⵠᐃⲆ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ⵠΔᐃᐃΔ(parseInt(g[0], 10))) && d.ⵠᐃⵠᐃⲆ;
                    }
                    b = g[0];
                    f.ⵠᐃⵠᐃⲆ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ΔⲆⲆᐃΔ(c), a = 0; a < h.length; a++) {
                    if (d = f.ⵠΔᐃᐃΔ(h[a])) {
                        d.ⵠᐃⵠᐃⲆ = b;
                        if (f.ᐃⵠᐃⲆΔ && d.ⵠⲆⵠᐃ && d.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ) {
                            d.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.loop = b;
                            if (b) {
                                d.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.loopStart = d.ⲆⲆΔΔΔ || 0;
                                d.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.loopEnd = d.ⲆᐃⲆᐃᐃΔΔ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    c = f.ⲆᐃᐃⵠΔ[0].ⵠⵠⲆⵠ;
                } else if (g.length === 1) {
                    if (f.ΔⲆⲆᐃΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (typeof b != "number") {
                    if (d = f.ⵠΔᐃᐃΔ(c)) {
                        return d.ⲆΔΔᐃⲆ;
                    } else {
                        return f.ⲆΔΔᐃⲆ;
                    }
                }
                if (f.ⲆᐃᐃΔⵠ !== "loaded") {
                    f.ⲆᐃⲆΔᐃ.push({
                        event: "rate",
                        action: function () {
                            f.rate.apply(f, g);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ⲆΔΔᐃⲆ = b;
                }
                c = f.ΔⲆⲆᐃΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ⵠΔᐃᐃΔ(c[a])) {
                        d.ᐃΔᐃᐃⲆΔᐃ = f.ᐃⲆΔⵠᐃΔΔ(c[a]);
                        d.ⲆᐃⲆΔΔⵠᐃ = f.ᐃⵠᐃⲆΔ ? j.ⵠ.currentTime : d.ⲆᐃⲆΔΔⵠᐃ;
                        d.ⲆΔΔᐃⲆ = b;
                        if (f.ᐃⵠᐃⲆΔ && d.ⵠⲆⵠᐃ && d.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ) {
                            d.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.playbackRate.value = b;
                        } else if (d.ⵠⲆⵠᐃ) {
                            d.ⵠⲆⵠᐃ.playbackRate = b;
                        }
                        var k = f.ᐃⲆΔⵠᐃΔΔ(c[a]);
                        var l = ((f.ΔⵠⲆⲆⵠ[d.ΔⵠⲆⲆⵠ][0] + f.ΔⵠⲆⲆⵠ[d.ΔⵠⲆⲆⵠ][1]) / 1000 - k) * 1000 / Math.abs(d.ⲆΔΔᐃⲆ);
                        if (!!f.ᐃΔⵠⵠⲆᐃⲆ[c[a]] || !d.ᐃᐃᐃᐃᐃ) {
                            f.ᐃᐃⵠⲆⵠΔⵠ(c[a]);
                            f.ᐃΔⵠⵠⲆᐃⲆ[c[a]] = setTimeout(f.ΔΔᐃᐃᐃ.bind(f, d), l);
                        }
                        f.ΔΔᐃⵠⵠ("rate", d.ⵠⵠⲆⵠ);
                    }
                }
                return f;
            },
            ᐃⲆΔⵠᐃΔΔ: function () {
                var b;
                var c;
                var d = this;
                var f = arguments;
                if (f.length === 0) {
                    c = d.ⲆᐃᐃⵠΔ[0].ⵠⵠⲆⵠ;
                } else if (f.length === 1) {
                    if (d.ΔⲆⲆᐃΔ().indexOf(f[0]) >= 0) {
                        c = parseInt(f[0], 10);
                    } else {
                        c = d.ⲆᐃᐃⵠΔ[0].ⵠⵠⲆⵠ;
                        b = parseFloat(f[0]);
                    }
                } else if (f.length === 2) {
                    b = parseFloat(f[0]);
                    c = parseInt(f[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ⲆᐃᐃΔⵠ !== "loaded") {
                    d.ⲆᐃⲆΔᐃ.push({
                        event: "seek",
                        action: function () {
                            d.ᐃⲆΔⵠᐃΔΔ.apply(d, f);
                        }
                    });
                    return d;
                }
                var g = d.ⵠΔᐃᐃΔ(c);
                if (g) {
                    if (typeof b != "number" || b < 0) {
                        if (d.ᐃⵠᐃⲆΔ) {
                            var a = d.ΔΔⲆⲆⲆⲆΔ(c) ? j.ⵠ.currentTime - g.ⲆᐃⲆΔΔⵠᐃ : 0;
                            var k = g.ᐃΔᐃᐃⲆΔᐃ ? g.ᐃΔᐃᐃⲆΔᐃ - g.ⲆⲆᐃⵠᐃ : 0;
                            return g.ⲆⲆᐃⵠᐃ + (k + a * Math.abs(g.ⲆΔΔᐃⲆ));
                        }
                        return g.ⵠⲆⵠᐃ.currentTime;
                    }
                    var l = d.ΔΔⲆⲆⲆⲆΔ(c);
                    if (l) {
                        d.pause(c, true);
                    }
                    g.ⲆⲆᐃⵠᐃ = b;
                    g.ΔΔᐃᐃᐃ = false;
                    d.ᐃᐃⵠⲆⵠΔⵠ(c);
                    if (l) {
                        d.play(c, true);
                    }
                    if (!d.ᐃⵠᐃⲆΔ && g.ⵠⲆⵠᐃ) {
                        g.ⵠⲆⵠᐃ.currentTime = b;
                    }
                    d.ΔΔᐃⵠⵠ("seek", c);
                }
                return d;
            },
            ΔΔⲆⲆⲆⲆΔ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ⵠΔᐃᐃΔ(a);
                    return !!c && !c.ᐃᐃᐃᐃᐃ;
                }
                for (var d = 0; d < b.ⲆᐃᐃⵠΔ.length; d++) {
                    if (!b.ⲆᐃᐃⵠΔ[d].ᐃᐃᐃᐃᐃ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ⲆⲆᐃᐃᐃΔᐃ;
                var d = b.ⵠΔᐃᐃΔ(a);
                if (d) {
                    c = b.ΔⵠⲆⲆⵠ[d.ΔⵠⲆⲆⵠ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ⲆᐃᐃΔⵠ;
            },
            ᐃᐃⵠⲆⲆⲆⵠ: function () {
                var a = this;
                for (var b = a.ⲆᐃᐃⵠΔ, c = 0; c < b.length; c++) {
                    if (!b[c].ᐃᐃᐃᐃᐃ) {
                        a.stop(b[c].ⵠⵠⲆⵠ);
                    }
                    if (!a.ᐃⵠᐃⲆΔ) {
                        if (!/MSIE |Trident\//.test(j.ⵠⲆΔⲆᐃ && j.ⵠⲆΔⲆᐃ.userAgent)) {
                            b[c].ⵠⲆⵠᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[c].ⵠⲆⵠᐃ.removeEventListener("error", b[c].ⲆΔΔⵠⵠΔⲆ, false);
                        b[c].ⵠⲆⵠᐃ.removeEventListener(j.ⵠᐃᐃⵠᐃⵠⵠ, b[c].ΔᐃⵠΔⲆⲆⲆ, false);
                    }
                    delete b[c].ⵠⲆⵠᐃ;
                    a.ᐃᐃⵠⲆⵠΔⵠ(b[c].ⵠⵠⲆⵠ);
                    var d = j.ΔΔΔᐃⲆ.indexOf(a);
                    if (d >= 0) {
                        j.ΔΔΔᐃⲆ.splice(d, 1);
                    }
                }
                var g = true;
                for (c = 0; c < j.ΔΔΔᐃⲆ.length; c++) {
                    if (j.ΔΔΔᐃⲆ[c].Δⵠⵠᐃᐃ === a.Δⵠⵠᐃᐃ) {
                        g = false;
                        break;
                    }
                }
                if (f && g) {
                    delete f[a.Δⵠⵠᐃᐃ];
                }
                j.ΔⲆⵠᐃⵠⵠᐃ = false;
                a.ⲆᐃᐃΔⵠ = "unloaded";
                a.ⲆᐃᐃⵠΔ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ΔᐃⵠΔⵠ: b,
                        once: d
                    } : {
                        id: c,
                        ΔᐃⵠΔⵠ: b
                    });
                }
                return this;
            },
            ΔⲆΔⵠⲆᐃⲆⲆⲆ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ΔᐃⵠΔⵠ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ΔΔᐃⵠⵠ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ΔᐃⵠΔⵠ), 0);
                        if (f[g].once) {
                            e.ΔⲆΔⵠⲆᐃⲆⲆⲆ(b, f[g].ΔᐃⵠΔⵠ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ⵠⲆΔⵠⲆΔΔ: function () {
                var a = this;
                if (a.ⲆᐃⲆΔᐃ.length > 0) {
                    var b = a.ⲆᐃⲆΔᐃ[0];
                    a.once(b.event, function () {
                        a.ⲆᐃⲆΔᐃ.shift();
                        a.ⵠⲆΔⵠⲆΔΔ();
                    });
                    b.action();
                }
                return a;
            },
            ΔΔᐃᐃᐃ: function (b) {
                var c = this;
                var d = b.ΔⵠⲆⲆⵠ;
                if (!c.ᐃⵠᐃⲆΔ && c.ⵠⲆⵠᐃ && !c.ⵠⲆⵠᐃ.ended) {
                    setTimeout(c.ΔΔᐃᐃᐃ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ⵠᐃⵠᐃⲆ || !!c.ΔⵠⲆⲆⵠ[d][2];
                c.ΔΔᐃⵠⵠ("end", b.ⵠⵠⲆⵠ);
                if (!c.ᐃⵠᐃⲆΔ && e) {
                    c.stop(b.ⵠⵠⲆⵠ, true).play(b.ⵠⵠⲆⵠ);
                }
                if (c.ᐃⵠᐃⲆΔ && e) {
                    c.ΔΔᐃⵠⵠ("play", b.ⵠⵠⲆⵠ);
                    b.ⲆⲆᐃⵠᐃ = b.ⲆⲆΔΔΔ || 0;
                    b.ᐃΔᐃᐃⲆΔᐃ = 0;
                    b.ⲆᐃⲆΔΔⵠᐃ = j.ⵠ.currentTime;
                    var f = (b.ⲆᐃⲆᐃᐃΔΔ - b.ⲆⲆΔΔΔ) * 1000 / Math.abs(b.ⲆΔΔᐃⲆ);
                    c.ᐃΔⵠⵠⲆᐃⲆ[b.ⵠⵠⲆⵠ] = setTimeout(c.ΔΔᐃᐃᐃ.bind(c, b), f);
                }
                if (c.ᐃⵠᐃⲆΔ && !e) {
                    b.ᐃᐃᐃᐃᐃ = true;
                    b.ΔΔᐃᐃᐃ = true;
                    b.ⲆⲆᐃⵠᐃ = b.ⲆⲆΔΔΔ || 0;
                    b.ᐃΔᐃᐃⲆΔᐃ = 0;
                    c.ᐃᐃⵠⲆⵠΔⵠ(b.ⵠⵠⲆⵠ);
                    c.ⵠΔⲆⵠⵠⲆΔ(b.ⵠⲆⵠᐃ);
                    j.ⲆⲆΔⲆⲆᐃⵠ();
                }
                if (!c.ᐃⵠᐃⲆΔ && !e) {
                    c.stop(b.ⵠⵠⲆⵠ);
                }
                return c;
            },
            ᐃᐃⵠⲆⵠΔⵠ: function (a) {
                var b = this;
                if (b.ᐃΔⵠⵠⲆᐃⲆ[a]) {
                    clearTimeout(b.ᐃΔⵠⵠⲆᐃⲆ[a]);
                    delete b.ᐃΔⵠⵠⲆᐃⲆ[a];
                }
                return b;
            },
            ⵠΔᐃᐃΔ: function (a) {
                for (var b = this, c = 0; c < b.ⲆᐃᐃⵠΔ.length; c++) {
                    if (a === b.ⲆᐃᐃⵠΔ[c].ⵠⵠⲆⵠ) {
                        return b.ⲆᐃᐃⵠΔ[c];
                    }
                }
                return null;
            },
            ⲆΔΔᐃⵠᐃⲆⵠᐃ: function () {
                var a = this;
                a.ⵠⵠᐃⲆⵠⵠⲆⲆΔ();
                for (var b = 0; b < a.ⲆᐃᐃⵠΔ.length; b++) {
                    if (a.ⲆᐃᐃⵠΔ[b].ΔΔᐃᐃᐃ) {
                        return a.ⲆᐃᐃⵠΔ[b].reset();
                    }
                }
                return new d(a);
            },
            ⵠⵠᐃⲆⵠⵠⲆⲆΔ: function () {
                var a = this;
                var b = a.ⲆᐃᐃⵠⵠⲆΔⵠΔ;
                var c = 0;
                var d = 0;
                if (a.ⲆᐃᐃⵠΔ.length >= b) {
                    for (d = 0; d < a.ⲆᐃᐃⵠΔ.length; d++) {
                        if (a.ⲆᐃᐃⵠΔ[d].ΔΔᐃᐃᐃ) {
                            c++;
                        }
                    }
                    for (d = a.ⲆᐃᐃⵠΔ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ⲆᐃᐃⵠΔ[d].ΔΔᐃᐃᐃ) {
                            if (a.ᐃⵠᐃⲆΔ && a.ⲆᐃᐃⵠΔ[d].ⵠⲆⵠᐃ) {
                                a.ⲆᐃᐃⵠΔ[d].ⵠⲆⵠᐃ.disconnect(0);
                            }
                            a.ⲆᐃᐃⵠΔ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ΔⲆⲆᐃΔ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ⲆᐃᐃⵠΔ.length; c++) {
                        b.push(this.ⲆᐃᐃⵠΔ[c].ⵠⵠⲆⵠ);
                    }
                    return b;
                }
                return [a];
            },
            ᐃᐃⲆΔΔⲆᐃᐃⲆ: function (a) {
                a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ = j.ⵠ.createBufferSource();
                a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.buffer = f[this.Δⵠⵠᐃᐃ];
                if (a.ᐃⵠⲆⲆⵠ) {
                    a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.connect(a.ᐃⵠⲆⲆⵠ);
                } else {
                    a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.connect(a.ⵠⲆⵠᐃ);
                }
                a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.loop = a.ⵠᐃⵠᐃⲆ;
                if (a.ⵠᐃⵠᐃⲆ) {
                    a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.loopStart = a.ⲆⲆΔΔΔ || 0;
                    a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.loopEnd = a.ⲆᐃⲆᐃᐃΔΔ;
                }
                a.ⵠⲆⵠᐃ.ΔΔⵠᐃⵠ.playbackRate.value = a.ⲆΔΔᐃⲆ;
                return this;
            },
            ⵠΔⲆⵠⵠⲆΔ: function (a) {
                var b = this;
                if (b.ΔⵠⲆΔⵠⵠⲆ) {
                    a.ΔΔⵠᐃⵠ.onended = null;
                    a.ΔΔⵠᐃⵠ.disconnect(0);
                    try {
                        a.ΔΔⵠᐃⵠ.buffer = b.ΔⵠⲆΔⵠⵠⲆ;
                    } catch (a) { }
                }
                a.ΔΔⵠᐃⵠ = null;
                return b;
            }
        };
        function d(a) {
            this.ΔⲆⵠⵠⵠⵠⵠ = a;
            this.ᐃᐃᐃⲆΔ();
        }
        d.prototype = {
            ᐃᐃᐃⲆΔ: function () {
                var a = this;
                var b = a.ΔⲆⵠⵠⵠⵠⵠ;
                a.ⵠᐃⲆⵠⵠ = b.ⵠᐃⲆⵠⵠ;
                a.ⵠᐃⵠᐃⲆ = b.ⵠᐃⵠᐃⲆ;
                a.ⵠᐃⲆⲆⲆ = b.ⵠᐃⲆⲆⲆ;
                a.ⲆΔΔᐃⲆ = b.ⲆΔΔᐃⲆ;
                a.ⲆⲆᐃⵠᐃ = 0;
                a.ᐃᐃᐃᐃᐃ = true;
                a.ΔΔᐃᐃᐃ = true;
                a.ΔⵠⲆⲆⵠ = "__default";
                a.ⵠⵠⲆⵠ = ++j.ⲆⵠΔⲆᐃⵠⲆ;
                b.ⲆᐃᐃⵠΔ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ΔⲆⵠⵠⵠⵠⵠ;
                var c = j.ⵠᐃⲆⵠⵠ || a.ⵠᐃⲆⵠⵠ || a.ΔⲆⵠⵠⵠⵠⵠ.ⵠᐃⲆⵠⵠ ? 0 : a.ⵠᐃⲆⲆⲆ;
                if (b.ᐃⵠᐃⲆΔ) {
                    a.ⵠⲆⵠᐃ = j.ⵠ.createGain === undefined ? j.ⵠ.ⲆΔᐃⲆᐃⲆΔᐃᐃ() : j.ⵠ.createGain();
                    a.ⵠⲆⵠᐃ.gain.setValueAtTime(c, j.ⵠ.currentTime);
                    a.ⵠⲆⵠᐃ.paused = true;
                    a.ⵠⲆⵠᐃ.connect(j.ⲆⵠΔᐃᐃΔⲆ);
                } else {
                    a.ⵠⲆⵠᐃ = new Audio();
                    a.ⲆΔΔⵠⵠΔⲆ = a.ⵠⲆⵠⵠᐃᐃⵠⵠᐃ.bind(a);
                    a.ⵠⲆⵠᐃ.addEventListener("error", a.ⲆΔΔⵠⵠΔⲆ, false);
                    a.ΔᐃⵠΔⲆⲆⲆ = a.ᐃΔⲆⲆⲆᐃⲆⲆⲆ.bind(a);
                    a.ⵠⲆⵠᐃ.addEventListener(j.ⵠᐃᐃⵠᐃⵠⵠ, a.ΔᐃⵠΔⲆⲆⲆ, false);
                    a.ⵠⲆⵠᐃ.src = b.Δⵠⵠᐃᐃ;
                    a.ⵠⲆⵠᐃ.preload = "auto";
                    a.ⵠⲆⵠᐃ.volume = c * j.volume();
                    a.ⵠⲆⵠᐃ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ΔⲆⵠⵠⵠⵠⵠ;
                a.ⵠᐃⲆⵠⵠ = b.ⵠᐃⲆⵠⵠ;
                a.ⵠᐃⵠᐃⲆ = b.ⵠᐃⵠᐃⲆ;
                a.ⵠᐃⲆⲆⲆ = b.ⵠᐃⲆⲆⲆ;
                a.ⲆΔΔᐃⲆ = b.ⲆΔΔᐃⲆ;
                a.ⲆⲆᐃⵠᐃ = 0;
                a.ᐃΔᐃᐃⲆΔᐃ = 0;
                a.ᐃᐃᐃᐃᐃ = true;
                a.ΔΔᐃᐃᐃ = true;
                a.ΔⵠⲆⲆⵠ = "__default";
                a.ⵠⵠⲆⵠ = ++j.ⲆⵠΔⲆᐃⵠⲆ;
                return a;
            },
            ⵠⲆⵠⵠᐃᐃⵠⵠᐃ: function () {
                var a = this;
                a.ΔⲆⵠⵠⵠⵠⵠ.ΔΔᐃⵠⵠ("loaderror", a.ⵠⵠⲆⵠ, a.ⵠⲆⵠᐃ.error ? a.ⵠⲆⵠᐃ.error.code : 0);
                a.ⵠⲆⵠᐃ.removeEventListener("error", a.ⲆΔΔⵠⵠΔⲆ, false);
            },
            ᐃΔⲆⲆⲆᐃⲆⲆⲆ: function () {
                var a = this;
                var b = a.ΔⲆⵠⵠⵠⵠⵠ;
                b.ⲆⲆᐃᐃᐃΔᐃ = Math.ceil(a.ⵠⲆⵠᐃ.duration * 10) / 10;
                if (Object.keys(b.ΔⵠⲆⲆⵠ).length === 0) {
                    b.ΔⵠⲆⲆⵠ = {
                        ⲆⵠΔΔΔΔⲆⵠⵠ: [0, b.ⲆⲆᐃᐃᐃΔᐃ * 1000]
                    };
                }
                if (b.ⲆᐃᐃΔⵠ !== "loaded") {
                    b.ⲆᐃᐃΔⵠ = "loaded";
                    b.ΔΔᐃⵠⵠ("load");
                    b.ⵠⲆΔⵠⲆΔΔ();
                }
                a.ⵠⲆⵠᐃ.removeEventListener(j.ⵠᐃᐃⵠᐃⵠⵠ, a.ΔᐃⵠΔⲆⲆⲆ, false);
            }
        };
        var f = {};
        function a(a) {
            var b = a.Δⵠⵠᐃᐃ;
            if (f[b]) {
                a.ⲆⲆᐃᐃᐃΔᐃ = f[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                k(d.buffer, a);
            } else {
                var j = new XMLHttpRequest();
                j.open("GET", b, true);
                j.responseType = "arraybuffer";
                j.onload = function () {
                    var b = (j.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        k(j.response, a);
                    } else {
                        a.ΔΔᐃⵠⵠ("loaderror", null, "Failed loading audio file with status: " + j.status + ".");
                    }
                };
                j.onerror = function () {
                    if (a.ᐃⵠᐃⲆΔ) {
                        a.ΔᐃΔΔⵠᐃᐃ = true;
                        a.ᐃⵠᐃⲆΔ = false;
                        a.ⲆᐃᐃⵠΔ = [];
                        delete f[b];
                        a.load();
                    }
                };
                g(j);
            }
        }
        function g(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function k(a, b) {
            j.ⵠ.decodeAudioData(a, function (a) {
                if (a && b.ⲆᐃᐃⵠΔ.length > 0) {
                    f[b.Δⵠⵠᐃᐃ] = a;
                    h(b, a);
                }
            }, function () {
                b.ΔΔᐃⵠⵠ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ⲆⲆᐃᐃᐃΔᐃ) {
                a.ⲆⲆᐃᐃᐃΔᐃ = b.duration;
            }
            if (Object.keys(a.ΔⵠⲆⲆⵠ).length === 0) {
                a.ΔⵠⲆⲆⵠ = {
                    ⲆⵠΔΔΔΔⲆⵠⵠ: [0, a.ⲆⲆᐃᐃᐃΔᐃ * 1000]
                };
            }
            if (a.ⲆᐃᐃΔⵠ !== "loaded") {
                a.ⲆᐃᐃΔⵠ = "loaded";
                a.ΔΔᐃⵠⵠ("load");
                a.ⵠⲆΔⵠⲆΔΔ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    j.ⵠ = new AudioContext();
                } else if (typeof ⲆⲆⲆⲆΔⵠΔⲆΔ != "undefined") {
                    j.ⵠ = new ⲆⲆⲆⲆΔⵠΔⲆΔ();
                } else {
                    j.ⵠⵠⲆᐃⲆ = false;
                }
            } catch (a) {
                j.ⵠⵠⲆᐃⲆ = false;
            }
            var a = /iP(hone|od|ad)/.test(j.ⵠⲆΔⲆᐃ && j.ⵠⲆΔⲆᐃ.platform);
            var b = j.ⵠⲆΔⲆᐃ && j.ⵠⲆΔⲆᐃ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(j.ⵠⲆΔⲆᐃ && j.ⵠⲆΔⲆᐃ.userAgent.toLowerCase());
                if (j.ⵠⲆΔⲆᐃ && j.ⵠⲆΔⲆᐃ.ΔΔᐃΔΔⵠᐃⵠⵠ && !d || j.ⵠⲆΔⲆᐃ && !j.ⵠⲆΔⲆᐃ.ΔΔᐃΔΔⵠᐃⵠⵠ && !d) {
                    j.ⵠⵠⲆᐃⲆ = false;
                }
            }
            if (j.ⵠⵠⲆᐃⲆ) {
                j.ⲆⵠΔᐃᐃΔⲆ = j.ⵠ.createGain === undefined ? j.ⵠ.ⲆΔᐃⲆᐃⲆΔᐃᐃ() : j.ⵠ.createGain();
                j.ⲆⵠΔᐃᐃΔⲆ.gain.value = j.ⵠᐃⲆⵠⵠ ? 0 : 1;
                j.ⲆⵠΔᐃᐃΔⲆ.connect(j.ⵠ.destination);
            }
            j.ⵠⵠΔⵠⵠᐃᐃ();
        }
        if (typeof ΔᐃᐃⲆᐃⲆᐃ == "function" && ΔᐃᐃⲆᐃⲆᐃ.ⲆⲆᐃΔⲆᐃⵠ) {
            ΔᐃᐃⲆᐃⲆᐃ([], function () {
                return {
                    Howler: j,
                    Howl: c
                };
            });
        }
        if (typeof ΔΔΔᐃᐃᐃⲆ != "undefined") {
            ΔΔΔᐃᐃᐃⲆ.Howler = j;
            ΔΔΔᐃᐃᐃⲆ.Howl = c;
        }
        if (typeof cj != "undefined") {
            cj.ΔⵠᐃⲆⲆΔΔ = b;
            cj.Howler = j;
            cj.Howl = c;
            cj.ᐃⵠⵠᐃⲆᐃᐃ = d;
        } else if (typeof ⵠᐃᐃⵠⵠᐃⵠ != "undefined") {
            ⵠᐃᐃⵠⵠᐃⵠ.ΔⵠᐃⲆⲆΔΔ = b;
            ⵠᐃᐃⵠⵠᐃⵠ.Howler = j;
            ⵠᐃᐃⵠⵠᐃⵠ.Howl = c;
            ⵠᐃᐃⵠⵠᐃⵠ.ᐃⵠⵠᐃⲆᐃᐃ = d;
        }
    })();
    (function () {
        ΔⵠᐃⲆⲆΔΔ.prototype.ⲆΔᐃⲆⲆ = [0, 0, 0];
        ΔⵠᐃⲆⲆΔΔ.prototype.ᐃⲆⵠᐃᐃ = [0, 0, -1, 0, 1, 0];
        ΔⵠᐃⲆⲆΔΔ.prototype.ΔⵠᐃⲆΔⲆⲆ = function (a) {
            var b = this;
            if (!b.ⵠ || !b.ⵠ.listener) {
                return b;
            }
            for (var c = b.ΔΔΔᐃⲆ.length - 1; c >= 0; c--) {
                b.ΔΔΔᐃⲆ[c].ΔⵠᐃⲆΔⲆⲆ(a);
            }
            return b;
        };
        ΔⵠᐃⲆⲆΔΔ.prototype.ⵠⲆΔΔ = function (a, b, c) {
            var d = this;
            if (d.ⵠ && d.ⵠ.listener) {
                b = typeof b != "number" ? d.ⲆΔᐃⲆⲆ[1] : b;
                c = typeof c != "number" ? d.ⲆΔᐃⲆⲆ[2] : c;
                if (typeof a != "number") {
                    return d.ⲆΔᐃⲆⲆ;
                } else {
                    d.ⲆΔᐃⲆⲆ = [a, b, c];
                    d.ⵠ.listener.setPosition(d.ⲆΔᐃⲆⲆ[0], d.ⲆΔᐃⲆⲆ[1], d.ⲆΔᐃⲆⲆ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ΔⵠᐃⲆⲆΔΔ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.ⵠ || !h.ⵠ.listener) {
                return h;
            }
            var j = h.ᐃⲆⵠᐃᐃ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ᐃⲆⵠᐃᐃ = [b, c, d, e, f, g];
                h.ⵠ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ᐃᐃᐃⲆΔ = function (a) {
            return function (b) {
                var c = this;
                c.ᐃⲆⵠᐃᐃ = b.orientation || [1, 0, 0];
                c.ᐃⲆⲆΔΔⲆΔ = b.ΔⵠᐃⲆΔⲆⲆ || null;
                c.ⲆΔᐃⲆⲆ = b.ⵠⲆΔΔ || null;
                c.ⲆᐃⵠⵠⲆ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ΔⵠⲆΔᐃᐃᐃⲆⵠ = b.ᐃΔᐃⲆΔΔⵠⲆΔ ? [{
                    ΔᐃⵠΔⵠ: b.ᐃΔᐃⲆΔΔⵠⲆΔ
                }] : [];
                c.ΔΔΔΔΔⵠᐃΔΔ = b.ᐃᐃⵠⵠᐃⵠᐃⲆⲆ ? [{
                    ΔᐃⵠΔⵠ: b.ᐃᐃⵠⵠᐃⵠᐃⲆⲆ
                }] : [];
                c.ⲆΔⲆⲆΔΔⵠⵠⵠ = b.ⲆΔΔΔᐃⲆΔᐃⲆ ? [{
                    ΔᐃⵠΔⵠ: b.ⲆΔΔΔᐃⲆΔᐃⲆ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ᐃᐃᐃⲆΔ);
        Howl.prototype.ΔⵠᐃⲆΔⲆⲆ = function (c, d) {
            var e = this;
            if (!e.ᐃⵠᐃⲆΔ) {
                return e;
            }
            if (e.ⲆᐃᐃΔⵠ !== "loaded") {
                e.ⲆᐃⲆΔᐃ.push({
                    event: "stereo",
                    action: function () {
                        e.ΔⵠᐃⲆΔⲆⲆ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.ⵠ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ᐃⲆⲆΔΔⲆΔ;
                }
                e.ᐃⲆⲆΔΔⲆΔ = c;
                e.ⲆΔᐃⲆⲆ = [c, 0, 0];
            }
            for (var g = e.ΔⲆⲆᐃΔ(d), a = 0; a < g.length; a++) {
                var h = e.ⵠΔᐃᐃΔ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ᐃⲆⲆΔΔⲆΔ;
                    }
                    h.ᐃⲆⲆΔΔⲆΔ = c;
                    h.ⲆΔᐃⲆⲆ = [c, 0, 0];
                    if (h.ⵠⲆⵠᐃ) {
                        h.ⲆᐃⵠⵠⲆ.panningModel = "equalpower";
                        if (!h.ᐃⵠⲆⲆⵠ || !h.ᐃⵠⲆⲆⵠ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ᐃⵠⲆⲆⵠ.setPosition(c, 0, 0);
                        } else {
                            h.ᐃⵠⲆⲆⵠ.pan.value = c;
                        }
                    }
                    e.ΔΔᐃⵠⵠ("stereo", h.ⵠⵠⲆⵠ);
                }
            }
            return e;
        };
        Howl.prototype.ⵠⲆΔΔ = function (c, d, e, f) {
            var g = this;
            if (!g.ᐃⵠᐃⲆΔ) {
                return g;
            }
            if (g.ⲆᐃᐃΔⵠ !== "loaded") {
                g.ⲆᐃⲆΔᐃ.push({
                    event: "pos",
                    action: function () {
                        g.ⵠⲆΔΔ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⲆΔᐃⲆⲆ;
                }
                g.ⲆΔᐃⲆⲆ = [c, d, e];
            }
            for (var a = g.ΔⲆⲆᐃΔ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠΔᐃᐃΔ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⲆΔᐃⲆⲆ;
                    }
                    j.ⲆΔᐃⲆⲆ = [c, d, e];
                    if (j.ⵠⲆⵠᐃ) {
                        if (!j.ᐃⵠⲆⲆⵠ || !!j.ᐃⵠⲆⲆⵠ.pan) {
                            b(j, "spatial");
                        }
                        j.ᐃⵠⲆⲆⵠ.setPosition(c, d, e);
                    }
                    g.ΔΔᐃⵠⵠ("pos", j.ⵠⵠⲆⵠ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ᐃⵠᐃⲆΔ) {
                return g;
            }
            if (g.ⲆᐃᐃΔⵠ !== "loaded") {
                g.ⲆᐃⲆΔᐃ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ᐃⲆⵠᐃᐃ[1] : d;
            e = typeof e != "number" ? g.ᐃⲆⵠᐃᐃ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ᐃⲆⵠᐃᐃ;
                }
                g.ᐃⲆⵠᐃᐃ = [c, d, e];
            }
            for (var a = g.ΔⲆⲆᐃΔ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠΔᐃᐃΔ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ᐃⲆⵠᐃᐃ;
                    }
                    j.ᐃⲆⵠᐃᐃ = [c, d, e];
                    if (j.ⵠⲆⵠᐃ) {
                        if (!j.ᐃⵠⲆⲆⵠ) {
                            j.ⲆΔᐃⲆⲆ ||= g.ⲆΔᐃⲆⲆ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ᐃⵠⲆⲆⵠ.setOrientation(c, d, e);
                    }
                    g.ΔΔᐃⵠⵠ("orientation", j.ⵠⵠⲆⵠ);
                }
            }
            return g;
        };
        Howl.prototype.ᐃΔⵠΔⵠΔⲆΔᐃ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ᐃⵠᐃⲆΔ) {
                return f;
            }
            if (g.length === 0) {
                return f.ⲆᐃⵠⵠⲆ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ⵠΔᐃᐃΔ(parseInt(g[0], 10))) {
                        return e.ⲆᐃⵠⵠⲆ;
                    } else {
                        return f.ⲆᐃⵠⵠⲆ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ⲆᐃⵠⵠⲆ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ᐃⲆΔΔΔᐃᐃΔⵠ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ΔΔΔⵠⲆⵠⲆⵠⲆ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⵠᐃⲆΔᐃΔⵠⵠΔ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ᐃⵠⵠⵠⲆⵠⲆᐃΔ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⲆᐃⲆⵠⲆⲆⵠⵠΔ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ⲆⵠⲆΔᐃΔΔⲆΔ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ᐃⵠᐃΔΔᐃΔΔⵠ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ᐃⲆⵠⲆᐃⲆⵠᐃⲆ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ΔⲆⲆᐃΔ(d), j = 0; j < a.length; j++) {
                if (e = f.ⵠΔᐃᐃΔ(a[j])) {
                    var k = e.ⲆᐃⵠⵠⲆ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ᐃⵠⲆⲆⵠ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⲆΔᐃⲆⲆ ||= f.ⲆΔᐃⲆⲆ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ᐃⵠⵠᐃⲆᐃᐃ.prototype.ᐃᐃᐃⲆΔ = function (a) {
            return function () {
                var b = this;
                var c = b.ΔⲆⵠⵠⵠⵠⵠ;
                b.ᐃⲆⵠᐃᐃ = c.ᐃⲆⵠᐃᐃ;
                b.ᐃⲆⲆΔΔⲆΔ = c.ᐃⲆⲆΔΔⲆΔ;
                b.ⲆΔᐃⲆⲆ = c.ⲆΔᐃⲆⲆ;
                b.ⲆᐃⵠⵠⲆ = c.ⲆᐃⵠⵠⲆ;
                a.call(this);
                if (b.ᐃⲆⲆΔΔⲆΔ) {
                    c.ΔⵠᐃⲆΔⲆⲆ(b.ᐃⲆⲆΔΔⲆΔ);
                } else if (b.ⲆΔᐃⲆⲆ) {
                    c.ⵠⲆΔΔ(b.ⲆΔᐃⲆⲆ[0], b.ⲆΔᐃⲆⲆ[1], b.ⲆΔᐃⲆⲆ[2], b.ⵠⵠⲆⵠ);
                }
            };
        }(ᐃⵠⵠᐃⲆᐃᐃ.prototype.ᐃᐃᐃⲆΔ);
        ᐃⵠⵠᐃⲆᐃᐃ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ΔⲆⵠⵠⵠⵠⵠ;
                b.ᐃⲆⵠᐃᐃ = c.ᐃⲆⵠᐃᐃ;
                b.ⲆΔᐃⲆⲆ = c.ⲆΔᐃⲆⲆ;
                b.ⲆᐃⵠⵠⲆ = c.ⲆᐃⵠⵠⲆ;
                return a.call(this);
            };
        }(ᐃⵠⵠᐃⲆᐃᐃ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ᐃⵠⲆⲆⵠ = Howler.ⵠ.createPanner();
                a.ᐃⵠⲆⲆⵠ.coneInnerAngle = a.ⲆᐃⵠⵠⲆ.coneInnerAngle;
                a.ᐃⵠⲆⲆⵠ.coneOuterAngle = a.ⲆᐃⵠⵠⲆ.coneOuterAngle;
                a.ᐃⵠⲆⲆⵠ.coneOuterGain = a.ⲆᐃⵠⵠⲆ.coneOuterGain;
                a.ᐃⵠⲆⲆⵠ.distanceModel = a.ⲆᐃⵠⵠⲆ.distanceModel;
                a.ᐃⵠⲆⲆⵠ.maxDistance = a.ⲆᐃⵠⵠⲆ.maxDistance;
                a.ᐃⵠⲆⲆⵠ.panningModel = a.ⲆᐃⵠⵠⲆ.panningModel;
                a.ᐃⵠⲆⲆⵠ.refDistance = a.ⲆᐃⵠⵠⲆ.refDistance;
                a.ᐃⵠⲆⲆⵠ.rolloffFactor = a.ⲆᐃⵠⵠⲆ.rolloffFactor;
                a.ᐃⵠⲆⲆⵠ.setPosition(a.ⲆΔᐃⲆⲆ[0], a.ⲆΔᐃⲆⲆ[1], a.ⲆΔᐃⲆⲆ[2]);
                a.ᐃⵠⲆⲆⵠ.setOrientation(a.ᐃⲆⵠᐃᐃ[0], a.ᐃⲆⵠᐃᐃ[1], a.ᐃⲆⵠᐃᐃ[2]);
            } else {
                a.ᐃⵠⲆⲆⵠ = Howler.ⵠ.createStereoPanner();
                a.ᐃⵠⲆⲆⵠ.pan.value = a.ᐃⲆⲆΔΔⲆΔ;
            }
            a.ᐃⵠⲆⲆⵠ.connect(a.ⵠⲆⵠᐃ);
            if (!a.ᐃᐃᐃᐃᐃ) {
                a.ΔⲆⵠⵠⵠⵠⵠ.pause(a.ⵠⵠⲆⵠ, true).play(a.ⵠⵠⲆⵠ);
            }
        }
    })();
    var bx = 1;
    var cx = 1;
    var dx = {
        ΔᐃᐃⵠᐃΔΔ: 3000,
        ⵠⲆΔᐃ: 8,
        ᐃΔⲆᐃⲆᐃⵠⲆⵠ: 12,
        ΔⲆⵠⲆⵠᐃᐃ: 12,
        ᐃΔⲆᐃⲆⲆᐃ: 460000,
        ⲆⵠΔ: 6,
        ᐃΔΔⵠᐃ: 3,
        ΔᐃⵠᐃᐃⲆΔᐃⵠ: 5000,
        ᐃΔⵠⲆΔᐃᐃΔⲆ: 5000,
        ΔⵠΔⵠⲆ: 2,
        ⵠⵠᐃⵠΔΔᐃΔᐃ: 5000,
        ⵠⵠΔⵠᐃ: 1,
        ⲆΔΔⲆᐃᐃⵠᐃᐃ: 12
    };
    var ex = [];
    ex[-1] = 1;
    ex[28] = 1;
    ex[49] = 1;
    ex[Rr.ᐃⲆⲆⲆΔⵠⲆⲆⵠ] = 2;
    ex[8] = 2;
    ex[1] = 2;
    ex[3] = 2;
    ex[4] = 2;
    ex[31] = 2;
    ex[32] = 2;
    ex[9] = 2;
    ex[57] = 2;
    ex[0] = 2;
    ex[63] = 2;
    ex[17] = 2;
    ex[5] = 2;
    ex[6] = 2;
    ex[30] = 2;
    ex[Rr.ⵠΔΔⲆᐃΔⵠⲆⲆ] = 2;
    ex[18] = 2;
    ex[12] = 2;
    ex[13] = 2;
    ex[14] = 2;
    ex[15] = 2;
    ex[16] = 2;
    ex[33] = 2;
    ex[Rr.ᐃⵠⵠΔΔⵠᐃⵠΔ] = 2;
    ex[35] = 2;
    ex[36] = 2;
    ex[37] = 2;
    ex[38] = 2;
    ex[39] = 2;
    ex[45] = 2;
    ex[62] = 2;
    ex[54] = 2;
    ex[53] = 2;
    ex[46] = 3;
    ex[50] = 3;
    function fx(a) {
        return cj.String.fromCharCode(a);
    }
    ex[51] = 3;
    ex[52] = 3;
    ⲆΔᐃᐃ = [];
    ⲆΔᐃᐃ[0] = 0;
    ⲆΔᐃᐃ[1] = 1;
    ⲆΔᐃᐃ[2] = 1;
    ⲆΔᐃᐃ[3] = 1;
    ⲆΔᐃᐃ[4] = 0;
    ⲆΔᐃᐃ[5] = 0;
    ⲆΔᐃᐃ[6] = 0;
    ⲆΔᐃᐃ[7] = 0;
    ⲆΔᐃᐃ[8] = 0;
    ⲆΔᐃᐃ[9] = 0;
    ⲆΔᐃᐃ[10] = 1;
    ⲆΔᐃᐃ[11] = 1;
    ⲆΔᐃᐃ[12] = 1;
    ⲆΔᐃᐃ[13] = 1;
    ⲆΔᐃᐃ[14] = 1;
    ⲆΔᐃᐃ[15] = 1;
    ⲆΔᐃᐃ[16] = 0;
    ⲆΔᐃᐃ[17] = 0;
    ⲆΔᐃᐃ[18] = 0;
    ⲆΔᐃᐃ[19] = 0;
    ⲆΔᐃᐃ[20] = 0;
    ⲆΔᐃᐃ[21] = 0;
    ⲆΔᐃᐃ[22] = 0;
    ⲆΔᐃᐃ[23] = 1;
    ⲆΔᐃᐃ[24] = 1;
    ⲆΔᐃᐃ[25] = 1;
    ⲆΔᐃᐃ[26] = 1;
    ⲆΔᐃᐃ[27] = 1;
    ⲆΔᐃᐃ[28] = 1;
    ⲆΔᐃᐃ[29] = 1;
    ⲆΔᐃᐃ[30] = 1;
    ⲆΔᐃᐃ[31] = 1;
    ⲆΔᐃᐃ[32] = 1;
    ⲆΔᐃᐃ[33] = 1;
    ⲆΔᐃᐃ[34] = 1;
    ⲆΔᐃᐃ[35] = 1;
    ⲆΔᐃᐃ[36] = 1;
    ⲆΔᐃᐃ[37] = 1;
    ⲆΔᐃᐃ[38] = 1;
    ⲆΔᐃᐃ[40] = 0;
    ⲆΔᐃᐃ[41] = 0;
    ⲆΔᐃᐃ[42] = 0;
    ⲆΔᐃᐃ[50] = 1;
    ⲆΔᐃᐃ[51] = 1;
    ⲆΔᐃᐃ[52] = 1;
    ⲆΔᐃᐃ[55] = 0;
    ⲆΔᐃᐃ[56] = 0;
    ⲆΔᐃᐃ[57] = 0;
    ⲆΔᐃᐃ[58] = 0;
    ⲆⲆⵠᐃⲆ = [];
    ⲆⲆⵠᐃⲆ[Qf.ΔⲆΔⲆΔ] = 0;
    ⲆⲆⵠᐃⲆ[1] = 0;
    ⲆⲆⵠᐃⲆ[29] = 0;
    ⲆⲆⵠᐃⲆ[6] = 0;
    ⲆⲆⵠᐃⲆ[3] = -1;
    ⲆⲆⵠᐃⲆ[31] = -1;
    ⲆⲆⵠᐃⲆ[2] = 0;
    ⲆⲆⵠᐃⲆ[4] = 0;
    ⲆⲆⵠᐃⲆ[30] = 0;
    ⲆⲆⵠᐃⲆ[33] = 0;
    ⲆⲆⵠᐃⲆ[32] = 1;
    ⲆⲆⵠᐃⲆ[35] = 1;
    ⲆⲆⵠᐃⲆ[7] = 1;
    ⲆⲆⵠᐃⲆ[8] = 1;
    ⲆⲆⵠᐃⲆ[9] = 1;
    ⲆⲆⵠᐃⲆ[19] = 1;
    ⲆⲆⵠᐃⲆ[50] = 1;
    ⲆⲆⵠᐃⲆ[5] = 0;
    ⲆⲆⵠᐃⲆ[12] = 1;
    ⲆⲆⵠᐃⲆ[13] = 1;
    ⲆⲆⵠᐃⲆ[14] = 1;
    ⲆⲆⵠᐃⲆ[20] = 1;
    ⲆⲆⵠᐃⲆ[52] = 1;
    ⲆⲆⵠᐃⲆ[10] = 0;
    ⲆⲆⵠᐃⲆ[15] = 1;
    ⲆⲆⵠᐃⲆ[16] = 1;
    ⲆⲆⵠᐃⲆ[17] = 1;
    ⲆⲆⵠᐃⲆ[21] = 1;
    ⲆⲆⵠᐃⲆ[51] = 1;
    ⲆⲆⵠᐃⲆ[45] = 0;
    ⲆⲆⵠᐃⲆ[46] = 1;
    ⲆⲆⵠᐃⲆ[47] = 1;
    ⲆⲆⵠᐃⲆ[48] = 1;
    ⲆⲆⵠᐃⲆ[49] = 1;
    ⲆⲆⵠᐃⲆ[53] = 1;
    ⲆⲆⵠᐃⲆ[18] = 1;
    ⲆⲆⵠᐃⲆ[22] = 1;
    ⲆⲆⵠᐃⲆ[23] = 1;
    ⲆⲆⵠᐃⲆ[11] = 0;
    ⲆⲆⵠᐃⲆ[34] = 1;
    var gx = {
        Ⲇᐃᐃⵠⵠᐃᐃ: {
            ⲆⵠⵠᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃⵠ: {
                d0: [90086, 300, Gh],
                d1: [90391, 300, false],
                d2: [90684, 300, false]
            },
            sample: {
                d0: 8,
                d1: 8,
                d2: 8
            }
        },
        ⵠⲆⲆⵠⵠⲆⲆ: {
            ⲆⵠⵠᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃⵠ: {
                p2: [89815, 300, false],
                p0: [89303, 300, false],
                p1: [89549, 300, Nq]
            },
            sample: {
                p0: 8,
                p1: 8,
                p2: 8
            }
        },
        ⵠᐃⲆⲆⲆᐃⲆ: {
            ⲆⵠⵠᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃⵠ: {
                w0: [88195, 300, _e],
                w3: [89025, 300, Nq],
                w1: [88473, 300, $n],
                w2: [88751, 300, false]
            },
            sample: {
                w0: 8,
                w1: 8,
                w2: 8,
                w3: 8
            }
        },
        ᐃΔⵠⵠΔⲆⵠ: {
            ⲆⵠⵠᐃΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃⵠ: {
                ᐃΔⵠΔΔᐃᐃ: [3100, 8800, F],
                ⲆᐃΔᐃⲆᐃⵠ: [19882, 8301, kq],
                ΔᐃⵠⲆⲆᐃⵠ: [91022, 400, false],
                ΔⵠⵠⵠΔΔᐃ: [32604, 21890, kq],
                ΔⲆⲆᐃⲆΔᐃ: [92249, 500, false],
                ⵠⵠⲆⵠΔ: [91431, 400, _e],
                ΔΔᐃᐃⵠᐃᐃ: [66961, 21223, true],
                ΔΔᐃⵠⲆΔᐃ: [66014, 925, true],
                ⵠᐃᐃⲆⲆ: [12356, 6965, kq],
                ⲆᐃⲆᐃⲆⲆΔΔⲆ: [100, 2800, true],
                ⵠⲆⵠΔΔ: [28380, 1797, zh],
                ᐃᐃΔᐃⲆⲆⵠ: [54524, 11393, true],
                ΔΔΔΔⵠᐃⲆ: [66961, 21223, true],
                ⵠⵠⲆⲆΔΔⲆ: [31658, 813, true],
                ΔΔᐃⲆΔⲆⵠ: [30562, 655, Dj]
            },
            sample: {
                ⲆᐃⲆᐃⲆⲆΔΔⲆ: 1,
                ᐃΔⵠΔΔᐃᐃ: 1,
                ⲆᐃΔᐃⲆᐃⵠ: 1,
                ΔⵠⵠⵠΔΔᐃ: 1,
                ᐃᐃΔᐃⲆⲆⵠ: 1,
                ΔΔΔΔⵠᐃⲆ: 1,
                ΔΔᐃᐃⵠᐃᐃ: 1,
                ⵠᐃᐃⲆⲆ: 8,
                ⵠⲆⵠΔΔ: 8,
                ΔΔᐃⲆΔⲆⵠ: 8,
                ⵠⵠⲆⲆΔΔⲆ: 8,
                ΔΔᐃⵠⲆΔᐃ: 8,
                ΔᐃⵠⲆⲆᐃⵠ: 6,
                ⵠⵠⲆⵠΔ: 6,
                ΔⲆⲆᐃⲆΔᐃ: 6
            }
        }
    };
    function hx(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.ⵠⵠᐃᐃᐃ = b;
        this.ⵠΔⵠⲆⵠⲆⵠ = b;
        this.ΔᐃΔ = c;
        this.ᐃᐃΔ = d;
        this.fade = e;
        this.ΔⲆⲆⵠⲆⲆΔ = f;
        this.ⲆⵠⵠΔΔⵠᐃ = i;
        this.ᐃᐃΔⲆ = a;
        this.ᐃⵠⲆⵠⵠⵠⲆ = j;
        this.source = k;
        this.source.ⲆⲆⵠᐃⲆΔΔ = k.x + k.w;
        this.source.ⲆΔⲆΔⵠ = k.y + k.ⵠⵠΔ;
        this.ᐃⵠⵠⵠᐃⲆⲆⲆⲆ = h;
        this.ⵠⲆⵠᐃᐃⲆᐃ = l;
        this.ΔᐃⲆΔᐃⲆᐃ = 0;
        this.ᐃⵠΔⲆⵠΔᐃ = {
            d: 5,
            ⲆᐃΔᐃ: 5
        };
        this.ⲆΔᐃΔⲆ = function () {
            this.ⵠⵠᐃᐃᐃ -= yx;
            if (this.ⵠⵠᐃᐃᐃ < 0) {
                this.ⵠⵠᐃᐃᐃ = this.ⵠΔⵠⲆⵠⲆⵠ;
                var a = gx.ᐃΔⵠⵠΔⲆⵠ.ⲆⵠⵠᐃΔ.playing(this.ΔᐃΔ);
                var b = gx.ᐃΔⵠⵠΔⲆⵠ.ⲆⵠⵠᐃΔ.playing(this.ᐃᐃΔ);
                if (a && !b) {
                    var c = cx * this.ᐃᐃΔⲆ.volume(this.ΔᐃΔ);
                    var d = cx * (Math.random() * this.ⲆⵠⵠΔΔⵠᐃ + this.ΔⲆⲆⵠⲆⲆΔ);
                    this.ᐃᐃΔⲆ.fade(c, d, this.fade, this.ΔᐃΔ);
                } else if (!a && b) {
                    c = this.ᐃᐃΔⲆ.volume(this.ᐃᐃΔ) * cx;
                    d = cx * (Math.random() * this.ⲆⵠⵠΔΔⵠᐃ + this.ΔⲆⲆⵠⲆⲆΔ);
                    this.ᐃᐃΔⲆ.fade(c, d, this.fade, this.ᐃᐃΔ);
                }
            }
        };
        this.transition = function () {
            this.ⵠⵠᐃᐃᐃ = this.ⵠΔⵠⲆⵠⲆⵠ;
            this.ᐃⵠΔⲆⵠΔᐃ.d = this.ᐃⵠΔⲆⵠΔᐃ.ⲆᐃΔᐃ;
            if (qx.time) {
                this.ᐃᐃΔⲆ.fade(0, cx * this.ΔⲆⲆⵠⲆⲆΔ, this.ᐃⵠⲆⵠⵠⵠⲆ, this.ΔᐃΔ);
                this.ᐃᐃΔⲆ.play(this.ΔᐃΔ);
                if (this.ᐃᐃΔⲆ.playing(this.ᐃᐃΔ)) {
                    var a = this.ᐃᐃΔⲆ.volume(this.ᐃᐃΔ) * cx;
                    this.ᐃᐃΔⲆ.fade(a, 0, this.ᐃⵠⲆⵠⵠⵠⲆ, this.ᐃᐃΔ);
                }
            } else {
                this.ᐃᐃΔⲆ.fade(0, this.ΔⲆⲆⵠⲆⲆΔ * cx, this.ᐃⵠⲆⵠⵠⵠⲆ, this.ᐃᐃΔ);
                this.ᐃᐃΔⲆ.play(this.ᐃᐃΔ);
                if (this.ᐃᐃΔⲆ.playing(this.ΔᐃΔ)) {
                    a = this.ᐃᐃΔⲆ.volume(this.ΔᐃΔ) * cx;
                    this.ᐃᐃΔⲆ.fade(a, 0, this.ᐃⵠⲆⵠⵠⵠⲆ, this.ΔᐃΔ);
                }
            }
        };
        this.check = function (a) {
            if (this.ΔᐃⲆΔᐃⲆᐃ) {
                if (og.ⵠⲆⵠᐃᐃⲆᐃ(a, this.ᐃⵠⵠⵠᐃⲆⲆⲆⲆ)) {
                    if (!ux.transition && qx.ⵠⵠⵠⵠⲆ.now < 460000) {
                        if (qx.time) {
                            if (!this.ᐃᐃΔⲆ.playing(this.ΔᐃΔ)) {
                                this.ᐃⵠΔⲆⵠΔᐃ.d -= yx;
                                if (this.ᐃⵠΔⲆⵠΔᐃ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ᐃᐃΔⲆ.playing(this.ᐃᐃΔ)) {
                            this.ᐃⵠΔⲆⵠΔᐃ.d -= yx;
                            if (this.ᐃⵠΔⲆⵠΔᐃ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ΔᐃⲆΔᐃⲆᐃ = 0;
                    if (this.ᐃᐃΔⲆ.playing(this.ΔᐃΔ)) {
                        var b = cx * this.ᐃᐃΔⲆ.volume(this.ΔᐃΔ);
                        this.ᐃᐃΔⲆ.fade(b, 0, this.ᐃⵠⲆⵠⵠⵠⲆ, this.ΔᐃΔ);
                    }
                    if (this.ᐃᐃΔⲆ.playing(this.ᐃᐃΔ)) {
                        b = this.ᐃᐃΔⲆ.volume(this.ᐃᐃΔ) * cx;
                        this.ᐃᐃΔⲆ.fade(b, 0, this.ᐃⵠⲆⵠⵠⵠⲆ, this.ᐃᐃΔ);
                    }
                }
            } else if (og.ⵠⲆⵠᐃᐃⲆᐃ(a, this.ⵠⲆⵠᐃᐃⲆᐃ)) {
                this.ΔᐃⲆΔᐃⲆᐃ = 1;
                if (!ux.transition && qx.ⵠⵠⵠⵠⲆ.now < 460000) {
                    this.transition();
                }
            }
        };
        this.ⵠᐃᐃ = function (a, b) {
            var c;
            var d;
            c = a.x < this.source.x ? ux.ᐃΔᐃⵠⵠΔΔ(this.source.x) : this.source.ⲆⲆⵠᐃⲆΔΔ < a.x ? ux.ᐃΔᐃⵠⵠΔΔ(this.source.ⲆⲆⵠᐃⲆΔΔ) : b.x;
            d = this.source.y > a.y ? ux.ⲆⲆⲆΔⵠΔⵠ(this.source.y) : this.source.ⲆΔⲆΔⵠ < a.y ? ux.ⲆⲆⲆΔⵠΔⵠ(this.source.ⲆΔⲆΔⵠ) : b.y;
            this.ᐃᐃΔⲆ.pos(c, d, -0.5, this.ΔᐃΔ);
            this.ᐃᐃΔⲆ.pos(c, d, -0.5, this.ᐃᐃΔ);
        };
    }
    function ix(b, c, d, e, f) {
        const g = (8 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b & 255)) + (0 << (b >> 16 & 255));
        const a = ~(e & 17339) & 17339 | ~(e & 17339) & e;
        const h = zt(g);
        zt(a);
        return ~(h & 10250) & (h | 10250);
    }
    var jx;
    jx = {
        ΔⵠᐃΔΔⵠⵠⵠᐃ: 0.2,
        ⵠΔᐃΔⲆΔᐃ: 4,
        ⵠΔᐃΔΔⲆⲆ: 100,
        ΔΔⵠⵠⵠᐃᐃᐃⵠ: 0.2,
        ⲆΔΔⵠⵠΔⵠ: 100,
        ΔⵠΔⵠⵠᐃⵠ: 300,
        ⵠΔⲆⵠⲆⲆΔⵠⲆ: 0.4,
        ⵠⵠΔⵠⵠ: 2,
        ⲆᐃⵠⵠⵠᐃΔ: 2,
        ΔⵠⵠⵠΔΔⵠ: 100,
        ⲆᐃΔΔⵠΔⲆⵠⵠ: 0.2,
        ⵠΔΔᐃΔᐃΔ: 3,
        ⵠⵠᐃΔΔΔΔ: 0,
        ⲆΔΔΔᐃΔⲆ: 1
    };
    function kx(a, b, c) {
        this.ΔⵠⵠΔᐃⲆΔ = a;
        this.c = 0;
        this.ᐃᐃΔⲆ = b;
        this.ⲆⲆⲆⵠⵠ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ⲆⲆⲆⵠⵠ[this.c];
            this.ΔⵠⵠΔᐃⲆΔ.ΔᐃⵠⲆᐃΔᐃ(this.ᐃᐃΔⲆ, a);
            this.ᐃᐃΔⲆ.play(a);
        };
    }
    function lx(a) {
        this.ⲆⵠⵠⲆᐃΔⵠ = 1;
        this.ᐃΔΔⲆ = 0;
        this.mode = -1;
        this.ⵠⲆⵠΔΔ = ux.sample.ⵠⲆⵠΔΔ[a];
        this.ΔΔᐃⲆΔⲆⵠ = ux.sample.ΔΔᐃⲆΔⲆⵠ[a];
        this.ⵠⵠⲆⲆΔΔⲆ = ux.sample.ⵠⵠⲆⲆΔΔⲆ[a];
        this.ΔΔᐃⵠⲆΔᐃ = ux.sample.ΔΔᐃⵠⲆΔᐃ[a];
        this.ⵠⵠΔΔⵠⵠᐃ = new kx(this, gx.ⵠⲆⲆⵠⵠⲆⲆ.ⲆⵠⵠᐃΔ, ux.ΔΔΔᐃᐃ.ⵠⵠΔΔⵠⵠᐃ[a]);
        this.ⵠⵠⵠⲆⲆ = new kx(this, gx.ⵠᐃⲆⲆⲆᐃⲆ.ⲆⵠⵠᐃΔ, ux.ΔΔΔᐃᐃ.ⵠⵠⵠⲆⲆ[a]);
        this.ᐃⲆⲆⵠⲆ = new kx(this, gx.Ⲇᐃᐃⵠⵠᐃᐃ.ⲆⵠⵠᐃΔ, ux.ΔΔΔᐃᐃ.ᐃⲆⲆⵠⲆ[a]);
        this.ⵠⵠᐃΔⲆ = a;
        this.x = 0;
        this.y = 0;
        this.ⵠᐃᐃΔⵠ = 0;
        this.ⵠⵠᐃᐃᐃ = jx.ⵠᐃⲆᐃⵠΔⵠⲆⲆ;
        this.ⵠⲆΔΔ = {
            y: 0,
            x: 0
        };
        this.ⵠⵠⲆᐃᐃ = gx.ᐃΔⵠⵠΔⲆⵠ.ⲆⵠⵠᐃΔ;
        this.ᐃΔⵠΔⲆⲆⲆΔⵠ = function (a) {
            if (a === 1) {
                this.ⵠⵠΔΔⵠⵠᐃ.play();
            } else if (a === 2) {
                this.ⵠⵠⵠⲆⲆ.play();
            } else if (a === 3) {
                this.ᐃⲆⲆⵠⲆ.play();
            }
        };
        this.ⲆΔᐃⲆΔⵠⲆ = function (a) {
            if (a.ᐃΔΔⵠⵠᐃᐃ > 0) {
                return jx.ⵠⵠΔⵠⵠ;
            } else if (a.ⵠⵠⵠⵠⲆᐃΔ > 0) {
                return jx.ⲆΔΔΔᐃΔⲆ;
            } else if (a.ⲆⵠᐃⵠⲆ > 0 || a.ⲆΔΔⵠⵠ > 0) {
                return jx.ⵠΔΔᐃΔᐃΔ;
            } else {
                return jx.ⵠⵠᐃΔΔΔΔ;
            }
        };
        this.ᐃᐃᐃⲆΔ = function (a) {
            this.ⲆⵠⵠⲆᐃΔⵠ = 0;
            this.ᐃΔΔⲆ = a;
            var b = qx.ᐃⲆⵠⲆ[a];
            b.ⵠⵠᐃΔⲆ = this.ⵠⵠᐃΔⲆ;
            this.mode = this.ⲆΔᐃⲆΔⵠⲆ(b);
            this.ⵠⲆΔΔ.x = b.x;
            this.ⵠⲆΔΔ.y = b.y;
        };
        this.ⲆⵠⵠⵠⲆᐃⲆ = function () {
            this.ⲆⵠⵠⲆᐃΔⵠ = 1;
            this.mode = -1;
            this.ⵠⵠⲆᐃᐃ.stop(this.ⵠⲆⵠΔΔ);
            this.ⵠⵠⲆᐃᐃ.stop(this.ΔΔᐃⲆΔⲆⵠ);
            this.ⵠⵠⲆᐃᐃ.stop(this.ⵠⵠⲆⲆΔΔⲆ);
            this.ⵠⵠⲆᐃᐃ.stop(this.ΔΔᐃⵠⲆΔᐃ);
        };
        this.fade = function (a, b) {
            var c = this.ⵠⵠⲆᐃᐃ.volume(a) * bx;
            this.ⵠⵠⲆᐃᐃ.fade(c, 0, b, a);
        };
        this.ΔᐃⵠⲆᐃΔᐃ = function (a, b) {
            if (this.ⵠᐃᐃΔⵠ && this.ⵠⵠᐃΔⲆ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ⲆΔᐃΔⲆ = function (b, c, d, e, f, g, a) {
            this.ⵠⵠᐃᐃᐃ = g;
            if (e && f === this.mode) {
                var i = bx * this.ⵠⵠⲆᐃᐃ.volume(b);
                if (this.ⵠᐃᐃΔⵠ) {
                    var j = bx * (d * Math.random() + c);
                    this.ⵠⵠⲆᐃᐃ.fade(i, j, a, b);
                } else {
                    this.ⵠⵠⲆᐃᐃ.fade(i, 0, a, b);
                }
            } else if (this.mode != f && this.ⵠᐃᐃΔⵠ) {
                this.ⵠⵠⲆᐃᐃ.fade(0, bx * (c + d), a, b);
            } else if (this.ⵠᐃᐃΔⵠ) {
                i = this.ⵠⵠⲆᐃᐃ.volume(b) * bx;
                j = (d * Math.random() + c) * bx;
                this.ⵠⵠⲆᐃᐃ.fade(i, j, a, b);
            }
            this.ΔᐃⵠⲆᐃΔᐃ(this.ⵠⵠⲆᐃᐃ, b);
            this.ⵠⵠⲆᐃᐃ.play(b);
        };
        this.ⵠᐃᐃ = function () {
            var a = qx.ᐃⲆⵠⲆ[this.ᐃΔΔⲆ];
            this.ⵠⵠᐃᐃᐃ -= yx;
            if (this.ⵠⵠᐃᐃᐃ <= 0) {
                var b = 0;
                if (a.x != this.ⵠⲆΔΔ.x || a.y != this.ⵠⲆΔΔ.y) {
                    if (!this.ⵠᐃᐃΔⵠ) {
                        b = 1;
                        this.ⵠᐃᐃΔⵠ = 1;
                    }
                    this.x = ux.ᐃΔⵠⲆᐃΔᐃ(a.x, jx.ⲆᐃⵠⵠⵠᐃΔ);
                    this.y = ux.ⵠΔⲆᐃⲆΔⵠ(a.y, jx.ⲆᐃⵠⵠⵠᐃΔ);
                } else if (this.ⵠᐃᐃΔⵠ) {
                    b = 1;
                    this.ⵠᐃᐃΔⵠ = 0;
                }
                this.ⵠⲆΔΔ.x = a.x;
                this.ⵠⲆΔΔ.y = a.y;
                ᐃΔⵠⵠ = this.ⲆΔᐃⲆΔⵠⲆ(a);
                if (this.mode != ᐃΔⵠⵠ) {
                    if (jx.ⲆΔΔΔᐃΔⲆ === this.mode) {
                        this.fade(this.ⵠⲆⵠΔΔ, jx.ΔⵠΔⵠⵠᐃⵠ);
                    } else if (this.mode === jx.ⵠⵠΔⵠⵠ) {
                        this.fade(this.ΔΔᐃⲆΔⲆⵠ, jx.ⵠΔᐃΔΔⲆⲆ);
                    } else if (jx.ⵠⵠᐃΔΔΔΔ === this.mode) {
                        this.fade(this.ⵠⵠⲆⲆΔΔⲆ, jx.ⲆΔΔⵠⵠΔⵠ);
                    } else if (this.mode === jx.ⵠΔΔᐃΔᐃΔ) {
                        this.fade(this.ΔΔᐃⵠⲆΔᐃ, jx.ΔⵠⵠⵠΔΔⵠ);
                    }
                }
                if (ᐃΔⵠⵠ === jx.ⲆΔΔΔᐃΔⲆ) {
                    this.ⲆΔᐃΔⲆ(this.ⵠⲆⵠΔΔ, 0.08, 0.3, b, ᐃΔⵠⵠ, jx.ⵠΔⲆⵠⲆⲆΔⵠⲆ, jx.ΔⵠΔⵠⵠᐃⵠ);
                } else if (jx.ⵠⵠΔⵠⵠ === ᐃΔⵠⵠ) {
                    this.ⲆΔᐃΔⲆ(this.ΔΔᐃⲆΔⲆⵠ, 0.2, 0.3, b, ᐃΔⵠⵠ, jx.ΔⵠᐃΔΔⵠⵠⵠᐃ, jx.ⵠΔᐃΔΔⲆⲆ);
                } else if (ᐃΔⵠⵠ === jx.ⵠⵠᐃΔΔΔΔ) {
                    this.ⲆΔᐃΔⲆ(this.ⵠⵠⲆⲆΔΔⲆ, 0.3, 0.6, b, ᐃΔⵠⵠ, jx.ΔΔⵠⵠⵠᐃᐃᐃⵠ, jx.ⲆΔΔⵠⵠΔⵠ);
                } else if (ᐃΔⵠⵠ === jx.ⵠΔΔᐃΔᐃΔ) {
                    this.ⲆΔᐃΔⲆ(this.ΔΔᐃⵠⲆΔᐃ, 0.1, 0.25, b, ᐃΔⵠⵠ, jx.ⲆᐃΔΔⵠΔⲆⵠⵠ, jx.ΔⵠⵠⵠΔΔⵠ);
                }
                this.mode = ᐃΔⵠⵠ;
            }
        };
        this.check = function () {
            var a = qx.ᐃⲆⵠⲆ[this.ᐃΔΔⲆ];
            return !!a || (this.ⲆⵠⵠⵠⲆᐃⲆ(a), vg);
        };
    }
    ΔΔⲆΔⵠᐃⲆ = 0;
    document.getElementById("version").innerHTML = 52 + ".3";
    function mx(a) {
        const b = cj.setTimeout;
        const c = b;
        const d = function () {
            b(d, 4775);
            c(d, 6617);
        };
        d();
    }
    var nx;
    var ox = [];
    var px = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = Er.ᐃΔᐃᐃΔ[px.time];
    px.items.push(new Rf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    px.items.push(new Rf(100, 0, 0, 0, 0, 0, 0, 5));
    px.items.push(new Rf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    px.items.push(new Rf(100, 0, 0, 0, 0, 0, 0, 5));
    ⲆᐃⲆᐃ = new function () {
        var b = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + zb[324] + "]";
            }
        }
        this.ΔᐃⵠΔ = null;
        this.ᐃΔⲆⵠⲆ = 0;
        this.ⵠⵠΔΔⲆ = [];
        this.ᐃⲆⵠⲆᐃᐃⵠ = {};
        this.ⲆⲆΔⲆⵠⵠᐃ = {};
        this.ⵠⵠᐃᐃΔ = [[], [], [], [], [], [], [], [], []];
        this.ⵠᐃⵠⲆⲆⵠⲆ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ⵠᐃⵠᐃΔ = 0;
        this.ᐃΔⵠᐃⵠᐃᐃ = 0;
        this.ⲆᐃᐃΔⲆⵠⵠ = function (c) {
            if (yf !== undefined) {
                b.ⵠⵠΔΔⲆ.push({
                    a: yf.name,
                    gm: yf.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                c();
                return;
            }
            fetch(kf + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        b.ⵠⵠΔΔⲆ = [];
                        b.ⲆⲆΔⲆⵠⵠᐃ = {};
                        for (let a in Df.ⵠⲆⲆΔΔⲆᐃ) {
                            const c = Df.ⵠⲆⲆΔΔⲆᐃ[a];
                            b.ⵠⵠΔΔⲆ.push({
                                a: "Auto Select",
                                gm: c,
                                m: 100,
                                nu: 0,
                                auto: true
                            });
                        }
                        var f = 0;
                        var i = 3;
                        for (let c = 0; c < d.length; c++) {
                            const e = d[c];
                            const a = e.n;
                            const j = e.l;
                            const k = e.p;
                            const h = [];
                            b.ᐃⲆⵠⲆᐃᐃⵠ[a] = h;
                            const l = [];
                            for (let b = 0; k.length > b; b++) {
                                const c = a + k[b][f];
                                l.push(c);
                                h.push(c);
                            }
                            for (let c = 0; c < j.length; c++) {
                                const d = j[c];
                                let e;
                                let a = Df.ⵠⲆⲆΔΔⲆᐃ[d[2]];
                                let g = a + d[1];
                                e = a in b.ⲆⲆΔⲆⵠⵠᐃ ? ++b.ⲆⲆΔⲆⵠⵠᐃ[a] : b.ⲆⲆΔⲆⵠⵠᐃ[a] = 1;
                                if (g in b.ⲆⲆΔⲆⵠⵠᐃ) {
                                    ⵠⲆᐃΔⵠΔᐃ = ++b.ⲆⲆΔⲆⵠⵠᐃ[g];
                                } else {
                                    ⵠⲆᐃΔⵠΔᐃ = b.ⲆⲆΔⲆⵠⵠᐃ[g] = 1;
                                }
                                b.ⵠⵠΔΔⲆ.push({
                                    name: d[4],
                                    a: Df.ΔⲆⵠⵠⵠᐃⵠΔΔ[d[1]] + " " + ⵠⲆᐃΔⵠΔᐃ,
                                    r: d[1],
                                    gm: Df.ⵠⲆⲆΔΔⲆᐃ[d[2]],
                                    idx: e,
                                    m: 100,
                                    nu: d[i],
                                    id: d[1] + d[f],
                                    p: l
                                });
                            }
                        }
                        const g = [];
                        const a = [];
                        const e = [];
                        for (let c = 0; b.ⵠⵠΔΔⲆ.length > c; c++) {
                            const d = b.ⵠⵠΔΔⲆ[c];
                            if (!d.auto) {
                                if (d.gm === Df.ⵠⲆⲆΔΔⲆᐃ[6]) {
                                    if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                                        a.push(d);
                                    } else {
                                        e.push(d);
                                    }
                                    g.push(c);
                                }
                            }
                        }
                        const j = [];
                        j.push(...e.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        j.push(...a.sort(function (a, b) {
                            return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
                        }));
                        for (let a = 0; g.length > a; a++) {
                            const c = g[a];
                            const d = j[a];
                            d.idx = a + 1;
                            b.ⵠⵠΔΔⲆ[c] = d;
                        }
                        c();
                    });
                } else {
                    cj.setTimeout(function () {
                        b.ⲆᐃᐃΔⲆⵠⵠ(c);
                    }, 3000);
                }
            });
        };
        this.ⵠᐃΔᐃᐃⲆⲆΔⲆ = function (a) {
            var b = [];
            for (var c = 0; c < a.length; c++) {
                if (a[c].a.indexOf(ur) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ΔᐃⵠⵠΔᐃΔ = function (b) {
            var c = 0;
            for (var d = 0; b.length > d; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (ⲆᐃⲆᐃ.ⵠᐃⵠⲆⲆⵠⲆ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ] === -1) {
                ⲆᐃⲆᐃ.ⵠᐃⵠⲆⲆⵠⲆ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ] = e.selectedIndex = ⲆᐃⲆᐃ.ⵠᐃΔᐃᐃⲆⲆΔⲆ(b);
            } else {
                e.selectedIndex = ⲆᐃⲆᐃ.ⵠᐃⵠⲆⲆⵠⲆ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + zb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + zb[323] + " (" + this.ᐃⲆᐃⲆⲆⵠΔ + ") " + zb[325] + "</li>";
            for (d = 0; d < b.length; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + zb[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = ⲆᐃⲆᐃ.ⵠⵠᐃᐃΔ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ], e = 0; d.length > e; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    ⲆᐃⲆᐃ.ⵠᐃⵠⲆⲆⵠⲆ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ᐃⲆᐃⲆⲆⵠΔ = 0;
        this.ΔⲆⵠᐃΔⵠⵠⲆⲆ = function () {
            this.ᐃⲆᐃⲆⲆⵠΔ = 0;
            for (var a = 0; a < ⲆᐃⲆᐃ.ⵠⵠΔΔⲆ.length; a++) {
                if (this.ⵠⵠΔΔⲆ[a].gm == "experimental") {
                    this.ⵠⵠᐃᐃΔ[7].push(this.ⵠⵠΔΔⲆ[a]);
                } else if (this.ⵠⵠΔΔⲆ[a].gm == "zombies") {
                    this.ⵠⵠᐃᐃΔ[2].push(this.ⵠⵠΔΔⲆ[a]);
                } else if (this.ⵠⵠΔΔⲆ[a].gm == "community") {
                    this.ⵠⵠᐃᐃΔ[6].push(this.ⵠⵠΔΔⲆ[a]);
                } else if (this.ⵠⵠΔΔⲆ[a].gm == "forest") {
                    this.ⵠⵠᐃᐃΔ[4].push(this.ⵠⵠΔΔⲆ[a]);
                } else if (this.ⵠⵠΔΔⲆ[a].gm == "battle-royale") {
                    this.ⵠⵠᐃᐃΔ[5].push(this.ⵠⵠΔΔⲆ[a]);
                } else if (this.ⵠⵠΔΔⲆ[a].gm == "vampires") {
                    this.ⵠⵠᐃᐃΔ[3].push(this.ⵠⵠΔΔⲆ[a]);
                } else {
                    this.ⵠⵠᐃᐃΔ[0].push(this.ⵠⵠΔΔⲆ[a]);
                }
                this.ᐃⲆᐃⲆⲆⵠΔ += this.ⵠⵠΔΔⲆ[a].nu;
            }
            for (a = 0; a < this.ⵠⵠᐃᐃΔ.length; a++) {
                if (this.ⵠⵠᐃᐃΔ[a].length === 0) {
                    this.ⵠⵠᐃᐃΔ[a].push({
                        a: zb[327],
                        ⲆᐃΔᐃⲆᐃΔⵠΔ: 0,
                        ᐃⲆ: "127.0.0.1",
                        ⲆΔΔ: 80
                    });
                }
            }
            this.ΔᐃⵠⵠΔᐃΔ(this.ⵠⵠᐃᐃΔ[0]);
            this.ΔΔⲆᐃⲆ = function (a) {
                ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ = a;
                ⲆᐃⲆᐃ.ΔᐃⵠⵠΔᐃΔ(ⲆᐃⲆᐃ.ⵠⵠᐃᐃΔ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ]);
                ⲆᐃⲆᐃ.ΔᐃⵠⵠΔᐃΔ(ⲆᐃⲆᐃ.ⵠⵠᐃᐃΔ[ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ]);
                document.getElementById("servselect").selectedIndex = ⲆᐃⲆᐃ.ⵠᐃⵠᐃΔ;
            };
        };
        this.ⵠᐃΔⲆⲆΔⲆ = 0;
        this.ᐃⵠΔⲆΔᐃΔ = 0;
        this.ᐃⵠⲆⵠⲆ = null;
        this.timeout = function () {
            b.ᐃⵠΔⲆΔᐃΔ++;
            b.ΔᐃⵠΔ.close();
            if (b.ᐃⵠΔⲆΔᐃΔ > 3) {
                Cx = 1;
                nx.ⵠᐃᐃⵠⲆΔᐃΔΔ = Lw.ⵠᐃⲆⵠΔⵠΔᐃΔ;
                b.ΔⲆⵠΔⵠ(zb[300]);
                nx.waiting = Xg;
                if (rx.reconnect.enabled) {
                    tx.ΔΔⵠⲆΔ(nx.ΔⲆⲆⲆᐃ);
                }
            } else if (rx.ⵠⲆΔⵠΔᐃᐃ === rs || Ta === rx.ᐃⵠⵠⵠᐃⵠⵠ || rx.ⵠΔΔⵠΔⲆΔ === undefined) {
                nx.ⵠⵠΔⵠΔⵠⵠ(function () {
                    b.ΔⵠᐃᐃⵠᐃⲆ();
                }, 1);
            } else {
                b.ΔⵠᐃᐃⵠᐃⲆ();
            }
        };
        this.ⵠⵠΔΔΔᐃⲆ = function (a) {
            if (this.ᐃΔⲆⵠⲆ == this.ΔᐃⵠΔ.ᐃΔⲆⵠⲆ) {
                this.ᐃΔⲆⵠⲆ++;
                this.ΔⲆⵠΔⵠ(zb[301] + a);
                tx.ΔΔⵠⲆΔ(nx.ΔⲆⲆⲆᐃ);
            }
        };
        this.ΔⲆⲆΔⲆⵠⲆ = function () {
            this.ΔⲆⵠΔⵠ("You speak too much");
        };
        this.ΔᐃⵠⵠⵠⵠᐃΔΔ = function () {
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ(zb[302]);
            nx.waiting = Eh;
        };
        this.ⵠᐃᐃΔΔⲆΔᐃⲆ = function () {
            rx.ᐃⲆΔⵠΔ.open = vn;
        };
        this.ⲆΔΔΔᐃⵠⲆⵠΔ = function () {
            tx.ᐃⵠⲆᐃΔⵠᐃ = 0;
        };
        this.ΔΔⵠⲆⲆⵠᐃⵠΔ = function () {
            tx.ᐃⲆᐃⲆΔⲆⲆ = 0;
        };
        this.ⵠΔⵠⵠⵠⲆᐃΔΔ = function (a) {
            rx.ⲆΔΔⲆⲆ.ΔᐃⵠⵠⲆ = a;
            if (qx.ⵠⲆᐃᐃⲆ > -300) {
                if (a === 0) {
                    this.ΔⲆⵠΔⵠ(zb[340]);
                } else {
                    this.ΔⲆⵠΔⵠ(zb[341]);
                }
            }
        };
        this.ᐃⲆΔⲆⵠ = function (a) {
            rx.ᐃⲆΔⲆⵠ = a;
        };
        this.ⲆᐃⲆᐃᐃᐃⵠⵠᐃ = function (a) {
            rx.ⵠΔⵠⲆᐃᐃⵠ = a;
        };
        this.ⵠΔⵠⲆᐃᐃⵠ = function (a) {
            rx.ⲆΔⵠᐃᐃ.ΔᐃⵠⵠⲆ = a;
            if (qx.ⲆⵠᐃⵠⲆ > -300) {
                if (a === 0) {
                    this.ΔⲆⵠΔⵠ(zb[342]);
                } else {
                    this.ΔⲆⵠΔⵠ(zb[343]);
                }
            }
        };
        this.ⵠᐃⲆᐃᐃᐃΔᐃᐃ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ⵠⲆⲆⲆⲆᐃΔⵠᐃ = function () {
            tx.ᐃᐃⵠⵠⵠᐃΔ = 0;
        };
        this.ⲆⵠᐃⵠⲆⲆⵠΔΔ = function () {
            tx.ⲆⲆᐃᐃⵠᐃⵠ = 0;
        };
        this.ⵠᐃᐃᐃⵠᐃⲆⲆⵠ = function () {
            rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ = [];
            rx.ⲆⲆΔⵠ.ⲆΔⵠ = [];
            rx.ⲆⲆΔⵠ.id = -1;
            rx.ⲆⲆΔⵠ.ⲆⲆᐃΔᐃΔᐃ.stop();
            rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ = [];
            rx.ⲆΔⲆᐃ.ΔᐃᐃⲆⵠ = kk;
            rx.ⲆΔⲆᐃ.Δⵠⵠᐃᐃⵠⵠᐃᐃ = false;
            rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
            rx.ⲆΔⲆᐃ.id = -1;
            rx.ⲆΔⲆᐃ.ⲆⵠΔⵠⲆ = va;
            rx.ⲆΔⲆᐃ.ⲆⲆΔΔᐃ = kj;
            rx.ⲆΔⲆᐃ.ⵠᐃᐃⲆⲆ = false;
            rx.ⲆΔⲆᐃ.ΔⵠⵠⲆⲆⵠⲆ = false;
            rx.ⲆΔⲆᐃ.timeout = new og.ⵠⵠᐃΔ(false, 0, 1, 0, 1, 1);
        };
        this.ΔⲆᐃᐃᐃⵠⵠⲆᐃ = function () {
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ();
            nx.waiting = false;
        };
        this.ΔΔᐃΔᐃⲆΔ = function (a) {
            for (var b = 0; a.length > b; b++) {
                if (typeof a[b] === "string") {
                    a[b] = og.ⵠⵠΔᐃⲆⵠΔ(a[b]);
                }
            }
            rx.ΔΔΔΔΔ.ᐃᐃⵠⲆᐃ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ΔⲆⵠΔⵠ(a);
        };
        this.ⵠΔΔΔⵠⵠⲆⵠⲆ = function () {
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ(zb[339]);
            nx.waiting = false;
        };
        this.ΔⵠⵠⵠⲆΔⲆΔᐃ = function () {
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ(zb[338]);
            nx.waiting = false;
        };
        this.ⲆⵠⲆΔⵠᐃⵠΔⵠ = function () {
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ(zb[304]);
            nx.waiting = kk;
        };
        this.ΔⲆΔⵠΔⲆⲆⲆⲆ = function () {
            rx.ⲆⲆΔⵠ.ⲆⲆᐃⲆᐃⲆΔ(1, 0);
            tx.ⵠⵠΔⵠᐃᐃⵠ();
        };
        this.ⲆⵠᐃᐃΔⵠⵠⵠⲆ = function (a) {
            var b = a[1];
            var c = qx.ⲆΔᐃΔ[b];
            c.ᐃΔΔΔ = a[2];
            c.ΔⵠⲆᐃⵠ = a[3];
            c.ᐃᐃᐃⲆⲆΔᐃ = a[4];
            c.ᐃᐃΔⵠⵠ = a[5];
            c.ⲆⵠΔⲆΔ = a[6];
            c.ᐃᐃⵠΔⵠ = a[7];
            c.level = a[8];
            var d = qx.ᐃⲆⵠⲆ[b * qx.ᐃⲆΔⵠⲆⵠⲆ];
            if (d) {
                d.ᐃΔΔΔ = a[2];
                d.ΔⵠⲆᐃⵠ = a[3];
                d.ᐃᐃᐃⲆⲆΔᐃ = a[4];
                d.ᐃᐃΔⵠⵠ = a[5];
            }
        };
        this.ᐃᐃᐃΔⲆⲆⵠⲆⵠ = function (a) {
            if (a === 29) {
                rx.ⲆⲆΔⵠ.ⲆⲆᐃⲆᐃⲆΔ(1, 0);
                tx.ⵠⵠΔⵠᐃᐃⵠ();
            } else {
                this.ᐃⵠⵠⲆⲆΔⲆ([0, a, 1]);
            }
            rx.ⲆΔⲆᐃ.ⵠΔⵠᐃⵠᐃΔ();
        };
        this.ⵠᐃⵠⵠⵠⵠⲆΔᐃ = function (a) {
            rx.ⲆⲆⲆᐃⲆ.ⵠⵠᐃᐃᐃ = 0;
            rx.ⲆΔⲆᐃ.ᐃⵠΔᐃⲆⵠⲆΔⲆ(a);
        };
        this.ᐃΔⲆᐃⲆΔⵠΔΔ = function (a) {
            for (var b = kt[a].r, c = 0; b.length > c; c++) {
                if (rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length < rx.ⲆⲆΔⵠ.max || rx.ⲆⲆΔⵠ.ⲆΔⵠ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ᐃⵠⵠⲆⲆΔⲆ([0, b[c][0], d]);
                }
            }
            rx.ⲆΔⲆᐃ.ⵠΔⵠᐃⵠᐃΔ();
        };
        this.ΔᐃᐃⲆΔᐃΔⵠⲆ = function (a) {
            rx.ⲆⲆⲆᐃⲆ.ⵠⵠᐃᐃᐃ = 0;
            rx.ⲆΔⲆᐃ.ᐃᐃΔⵠⵠᐃᐃΔⲆ(a);
        };
        this.ΔⲆⵠΔⵠ = function (a) {
            if (rx.alert.text) {
                if (rx.alert.text !== a && a !== rx.alert.list[rx.alert.list.length - 1]) {
                    rx.alert.list.push(a);
                }
            } else {
                rx.alert.text = a;
            }
        };
        this.ΔⲆΔᐃⲆᐃᐃΔΔ = function () {
            this.ΔⲆⵠΔⵠ(zb[305]);
        };
        this.ⵠᐃᐃΔⲆⲆΔΔΔ = function () {
            var a;
            a = rx.ᐃᐃΔ == 0 ? zb[306] : zb[307] + (rx.ᐃᐃΔ + 1) + zb[308];
            this.ΔⲆⵠΔⵠ(a);
            rx.ᐃᐃΔ++;
        };
        this.ⵠᐃΔΔᐃᐃⵠⲆⲆ = function () {
            clearTimeout(b.ᐃⵠⲆⵠⲆ);
            rx.reconnect.enabled = fs;
            rx.ᐃⵠΔᐃᐃ = false;
            this.ΔⲆⵠΔⵠ(zb[309]);
            tx.ΔΔⵠⲆΔ(nx.ΔⲆⲆⲆᐃ);
            this.ΔᐃⵠΔ.close();
        };
        this.ΔⵠΔΔᐃΔᐃⲆᐃ = function () {
            Cx = 1;
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ(zb[310]);
            nx.waiting = false;
        };
        this.ⲆⲆⲆΔΔⵠⵠⵠⵠ = function () {
            Cx = 1;
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            this.ΔⲆⵠΔⵠ(zb[311]);
            nx.waiting = _e;
        };
        this.ᐃΔⲆΔᐃⲆᐃⲆⵠ = function (a) {
            var b = a[1];
            var c = qx.ⲆΔᐃΔ;
            c[b].ΔⲆᐃᐃΔ = a[2];
            c[b].ᐃΔΔΔ = a[3];
            c[b].ΔⵠⲆᐃⵠ = a[4];
            c[b].ᐃᐃᐃⲆⲆΔᐃ = a[5];
            c[b].ᐃᐃΔⵠⵠ = a[6];
            c[b].ⲆⵠΔⲆΔ = a[7];
            c[b].ᐃᐃⵠΔⵠ = a[8];
            c[b].level = a[9];
            c[b].ⲆⲆⲆᐃΔ = 0;
            c[b].ⲆⲆΔᐃᐃᐃⲆ = null;
            c[b].label = null;
            c[b].ⵠᐃΔⵠⵠⵠΔ = null;
            c[b].ᐃⵠΔᐃᐃ = Ha;
            if (ff === 1) {
                c[b].ΔⲆᐃᐃΔ += "|" + b;
            }
        };
        this.ᐃᐃⵠΔᐃΔᐃΔΔ = function () {
            this.ΔᐃⵠΔ[Tf](oq[qq].stringify([29]));
        };
        this.ⲆⲆⵠⲆᐃⵠⲆΔΔ = function () {
            this.ΔⲆⵠΔⵠ(zb[312]);
        };
        this.ΔΔΔⲆᐃᐃᐃ = function () {
            this.ΔⲆⵠΔⵠ(zb[313]);
        };
        this.ⵠⵠᐃⵠᐃᐃⲆⵠᐃ = function (a) {
            this.ΔᐃⵠΔ[Tf](jo[ta].stringify([32, a]));
            rx.ᐃⲆΔⵠΔ.open = vn;
        };
        this.ⵠᐃΔⵠⲆⵠᐃⲆⵠ = function (a) {
            for (var b = Jf[a - 1].items, c = 0; c < b.length && rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length < rx.ⲆⲆΔⵠ.max; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    rx.ⲆⲆΔⵠ.ⲆⲆᐃⲆᐃⲆΔ(1, 0);
                } else {
                    this.ᐃⵠⵠⲆⲆΔⲆ([0, d, e]);
                }
            }
        };
        this.ᐃⵠⵠⲆⲆΔⲆ = function (b) {
            for (var c = b.length, d = rx.ⲆⲆΔⵠ, e = 1; c > e; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; d.Δᐃⵠⵠⵠ.length > h; h++) {
                    if (d.Δᐃⵠⵠⵠ[h].id == f) {
                        d.ⲆΔⵠ[f] += g;
                        break;
                    }
                }
                if (h == d.Δᐃⵠⵠⵠ.length) {
                    d.ⲆΔⵠ[f] = g;
                    d.Δᐃⵠⵠⵠ.push(tx.ⲆⲆⵠ[f]);
                    tx.ⵠⵠΔⵠᐃᐃⵠ();
                }
            }
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ᐃᐃⵠᐃ = function (b, c, d, e, f, g, a) {
            rx.ᐃᐃⵠᐃ.ⲆⵠᐃΔ = b / 100;
            rx.ᐃᐃⵠᐃ.ⵠⵠΔ = c / 100;
            rx.ᐃᐃⵠᐃ.c = d / 100;
            rx.ᐃᐃⵠᐃ.ᐃⲆⲆ = e / 100;
            rx.ᐃᐃⵠᐃ.ΔΔⲆ = f / 100;
            rx.ᐃᐃⵠᐃ.ⵠⲆⵠᐃⲆᐃⵠ = g / 100;
            rx.ᐃⲆΔⲆⵠ = a;
        };
        this.ⵠⵠᐃΔΔⲆΔⵠⲆ = function (a) {
            tx.ΔⵠⵠΔ.modify(a, 2);
        };
        this.ΔⵠΔᐃΔᐃⲆΔᐃ = function (a) {
            tx.ΔⵠⵠΔ.modify(a, 0);
        };
        this.claimed = function (a) {
            tx.ΔⵠⵠΔ.modify(a, 3);
        };
        this.ⵠⵠΔⲆᐃΔⲆᐃⲆ = function (a, b) {
            rx.ᐃᐃⵠᐃ.ⲆⵠᐃΔ = a / 100;
            rx.ᐃⲆΔⲆⵠ = b;
        };
        this.ΔⲆᐃⵠᐃⲆⵠⲆⵠ = function (a) {
            rx.ᐃᐃⵠᐃ.ᐃⲆⲆ = a / 100;
        };
        this.ΔᐃⲆⵠⲆⲆⵠⲆⲆ = function (a) {
            rx.ᐃᐃⵠᐃ.ⵠⵠΔ = a / 100;
        };
        this.ⲆⲆⵠΔΔΔⲆⵠΔ = function (a) {
            rx.ᐃᐃⵠᐃ.ⵠⲆⵠᐃⲆᐃⵠ = a / 100;
        };
        this.ᐃⵠΔⲆⵠⲆⲆⵠᐃ = function (a) {
            rx.ᐃᐃⵠᐃ.c = a / 100;
        };
        this.ⲆΔⲆⵠᐃⵠΔᐃΔ = function (a) {
            qx.time = a;
            qx.transition = sn;
            ux.transition = 1;
        };
        this.ΔⵠᐃⲆⵠΔⵠΔⵠ = function () {
            document.getElementById("game_body").style.backgroundColor = Er.ᐃΔᐃᐃΔ[qx.time];
        };
        this.ᐃΔᐃᐃⲆᐃⲆᐃⵠ = function (a) {
            if (qx.mode == 1 && qx.ⲆΔᐃΔ[a].ΔⲆᐃᐃΔ !== "spectator") {
                this.ΔⲆⵠΔⵠ(qx.ⲆΔᐃΔ[a].ΔⲆᐃᐃΔ + zb[314]);
            }
            qx.ⲆΔᐃΔ[a].ᐃⵠΔᐃᐃ = Gh;
        };
        this.ⵠⵠⵠⵠⲆⲆΔᐃⲆ = function (a) {
            var b = new Uint16Array(a);
            ᐃᐃΔⲆ.ΔᐃⲆ.ᐃⵠᐃΔⵠ(b[1], b[2]);
        };
        this.ⲆⵠⵠᐃᐃᐃΔⵠⲆ = function (a) {
            var b = new Uint16Array(a);
            rx.ΔᐃⲆ.ᐃⵠᐃΔⵠ(b[1], b[2]);
        };
        this.ᐃⲆⲆᐃⵠΔⵠᐃᐃ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
                var k = qx.ᐃⲆⵠⲆ[i * qx.ᐃⲆΔⵠⲆⵠⲆ + g];
                if (k && k.ⵠΔⲆⵠ) {
                    if (ux.loaded && ux.ΔⲆⲆⲆᐃ) {
                        ux.ⵠΔⲆⵠ(b[5 + f * 4] & 1, ⲆⲆⵠᐃⲆ[k.type], k.x, k.y);
                    }
                    k.ⵠΔⲆⵠ.angle = j;
                    k.ⵠΔⲆⵠ.ⵠᐃᐃ = j;
                }
            }
        };
        this.ᐃᐃᐃⲆⵠⲆᐃᐃᐃ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
                var f;
                var i = e * 4;
                var j = c[1 + i];
                var k = c[2 + i];
                var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
                var p = c[4 + i];
                var q = ox.ᐃⲆⲆⲆ[k][j];
                switch (p) {
                    case 0:
                        (f = q.p[0][0]).angle = m;
                        f.ⵠᐃᐃ = Ha;
                        break;
                    case 1:
                        (f = q.s[0][0]).angle = m;
                        f.ⵠᐃᐃ = F;
                        break;
                    case 2:
                        (f = q.s[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 3:
                        (f = q.s[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 4:
                        (f = q.t[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 5:
                        (f = q.t[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 6:
                        (f = q.t[2][0]).angle = m;
                        f.ⵠᐃᐃ = _q;
                        break;
                    case 7:
                        (f = q.t[3][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 8:
                        (f = q.t[4][0]).angle = m;
                        f.ⵠᐃᐃ = zh;
                        break;
                    case 9:
                        (f = q.t[5][0]).angle = m;
                        f.ⵠᐃᐃ = ps;
                        break;
                    case 10:
                        (f = q.g[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 11:
                        (f = q.g[1][0]).angle = m;
                        f.ⵠᐃᐃ = nk;
                        break;
                    case 12:
                        (f = q.g[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 13:
                        (f = q.d[0][0]).angle = m;
                        f.ⵠᐃᐃ = Aq;
                        break;
                    case 14:
                        (f = q.d[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 15:
                        (f = q.d[2][0]).angle = m;
                        f.ⵠᐃᐃ = sn;
                        break;
                    case 16:
                        (f = q.b[0][0]).angle = m;
                        f.ⵠᐃᐃ = Dr;
                        break;
                    case 17:
                        (f = q.b[1][0]).angle = m;
                        f.ⵠᐃᐃ = nk;
                        break;
                    case 18:
                        (f = q.b[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 19:
                        (f = q.b[3][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 20:
                        (f = q.f[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 21:
                        (f = q.f[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 22:
                        (f = q.f[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 23:
                        (f = q.sw[0][0]).angle = m;
                        f.ⵠᐃᐃ = Ls;
                        break;
                    case 24:
                        (f = q.sw[1][0]).angle = m;
                        f.ⵠᐃᐃ = Aq;
                        break;
                    case 25:
                        (f = q.sw[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 26:
                        (f = q.gw[0][0]).angle = m;
                        f.ⵠᐃᐃ = zh;
                        break;
                    case 27:
                        (f = q.gw[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 28:
                        (f = q.gw[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 29:
                        (f = q.dw[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 30:
                        (f = q.dw[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 31:
                        (f = q.dw[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 32:
                        (f = q.a[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 33:
                        (f = q.a[1][0]).angle = m;
                        f.ⵠᐃᐃ = xb;
                        break;
                    case 34:
                        (f = q.a[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 35:
                        (f = q.cs[0][0]).angle = m;
                        f.ⵠᐃᐃ = ps;
                        break;
                    case 36:
                        (f = q.cs[1][0]).angle = m;
                        f.ⵠᐃᐃ = kq;
                        break;
                    case 37:
                        (f = q.cs[2][0]).angle = m;
                        f.ⵠᐃᐃ = Dr;
                        break;
                    case 38:
                        (f = q.cs[3][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 40:
                        (f = q.plm[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 41:
                        (f = q.plm[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 42:
                        (f = q.plm[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 50:
                        (f = q.re[0][0]).angle = m;
                        f.ⵠᐃᐃ = P;
                        break;
                    case 51:
                        (f = q.re[1][0]).angle = m;
                        f.ⵠᐃᐃ = _q;
                        break;
                    case 52:
                        (f = q.re[2][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 55:
                        (f = q.c[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 56:
                        (f = q.m[0][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 57:
                        (f = q.m[1][0]).angle = m;
                        f.ⵠᐃᐃ = true;
                        break;
                    case 58:
                        (f = q.m[2][0]).angle = m;
                        f.ⵠᐃᐃ = xb;
                }
                if (ux.loaded && ux.ΔⲆⲆⲆᐃ && f) {
                    ux.ⵠΔⲆⵠ(c[3 + i] & 1, ⲆΔᐃᐃ[p], f.x, f.y);
                }
            }
        };
        this.ⲆΔⲆⲆⵠ = function () {
            this.ΔᐃⵠΔ[Tf](Mo[yo].stringify([33, rx.ⲆΔⲆⲆⵠ.ΔⵠⲆⲆ, rx.ⲆΔⲆⲆⵠ.ΔᐃΔⵠⲆ]));
        };
        this.ᐃⵠⵠⲆΔᐃΔⵠⵠ = function (a, b) {
            this.ΔᐃⵠΔ[Tf](Mo[Wo].stringify([14, b, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ᐃΔⲆⵠΔᐃᐃ = function (a, b, c) {
            if (b) {
                this.ΔᐃⵠΔ[Tf](Mo[Wo].stringify([17, b, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
            } else {
                this.ΔᐃⵠΔ[Tf](Mo[Io].stringify([0, c, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
            }
        };
        this.ΔⲆᐃᐃΔᐃᐃᐃΔ = function (a) {
            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([12, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ΔⵠᐃⲆᐃⵠⲆΔΔ = function (a) {
            this.ΔᐃⵠΔ[Tf](Ko[ba].stringify([30, a]));
        };
        this.ᐃⵠΔᐃᐃⵠᐃΔⲆ = function (a) {
            this.ΔᐃⵠΔ[Tf](Uo[yo].stringify([21, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ⲆⲆⵠⲆⵠᐃΔⵠΔ = function (a, b) {
            this.ΔᐃⵠΔ[Tf](jo[Zo].stringify([9, b, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ, a.type]));
        };
        this.ⵠᐃᐃⵠⲆᐃΔⲆΔ = function (a, b) {
            this.ΔᐃⵠΔ[Tf](jo[Zo].stringify([34, b, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ΔⲆⲆⲆⲆΔⵠᐃⵠ = function (a, b, c) {
            this.ΔᐃⵠΔ[Tf](Uo[Wo].stringify([13, b, c, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ⲆⲆⲆⵠⲆΔᐃ = function (a) {
            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([1, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ, a.type]));
        };
        this.ᐃΔⲆⵠⲆⲆΔⲆⵠ = function (a) {
            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([26, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ⲆⲆⵠⲆᐃΔᐃⵠⲆ = function (a) {
            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([27, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ⲆⵠⵠᐃΔΔΔΔᐃ = function (a) {
            this.ΔᐃⵠΔ[Tf](yq[ea].stringify([23, a.ΔⵠⲆⲆ, a.ΔᐃΔⵠⲆ]));
        };
        this.ΔⲆᐃⵠⵠⲆⲆΔⲆ = function (a) {
            this.ΔᐃⵠΔ[Tf](sa[ta].stringify([5, a.ΔᐃΔⵠⲆ]));
        };
        this.ΔΔΔⵠΔⵠᐃ = function (a) {
            b.ΔᐃⵠΔ[Tf](ca[ba].stringify([22, rx.ⲆⲆⵠⵠⵠ.id, rx.ᐃⲆⲆⲆⲆ[a]]));
        };
        this.ᐃΔⲆⲆⲆᐃΔᐃⵠ = function () {
            b.ΔᐃⵠΔ[Tf](xa[ya].stringify([38, rx.ⲆⲆⵠⵠⵠ.ΔⵠⲆⲆ, rx.ⲆⲆⵠⵠⵠ.id]));
        };
        this.ΔⲆᐃΔᐃⲆΔ = function () {
            b.ΔᐃⵠΔ[Tf](Sa[Ea].stringify([18]));
        };
        this.ⲆⲆΔⵠᐃⲆΔⲆᐃ = function () {
            b.ΔᐃⵠΔ[Tf](Sa[ba].stringify([4, rx.ⲆⲆⵠⵠⵠ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                rx.ⲆⲆⵠⵠⵠ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                rx.ⲆⲆⵠⵠⵠ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.ⵠⲆⵠ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                qx.ⲆⲆⵠᐃⵠⵠⲆᐃⲆ();
            }
            for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = qx.ᐃⲆΔⵠⲆⵠⲆ * w + y;
                if (x & 1) {
                    qx.ᐃⵠΔⲆΔⵠᐃΔⵠ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = Math.PI * (e[q + 1] / 255) * 2;
                    if (qx.ᐃⲆⵠⲆ[z]) {
                        var I = qx.ᐃⲆⵠⲆ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && og.ΔⲆⵠᐃ(I, I.r) > 200) {
                            I.x = B;
                            I.y = D;
                        }
                        if (I.id !== rx.id || w === 0) {
                            I.ⵠᐃⵠΔⲆⵠΔ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ⵠⲆᐃⲆⵠ = F;
                        I.ᐃⵠⵠΔⲆ = G;
                        if (I.ⵠᐃᐃ) {
                            I.ⵠᐃᐃ(x);
                        }
                    } else {
                        var J = new Rf(A, w, y, B, D, H, x, E, F, G);
                        qx.ᐃⲆⵠⲆ[z] = J;
                        qx.ⵠⲆⵠ[A].push(J);
                    }
                }
            }
        };
        this.ⵠΔᐃᐃ = function (a) {
            this.ⵠᐃΔⲆⲆΔⲆ = xx;
            var b = new Uint16Array(a);
            rx.ⲆⵠΔᐃⵠ.ᐃᐃᐃⲆΔ(b);
        };
        this.ᐃᐃⲆᐃΔⲆⵠⵠΔ = function (a) {
            if (gt !== undefined) {
                kt = gt;
            }
            if (a.length > 0) {
                gt = JSON.parse(JSON.stringify(kt));
                for (var b = 0; a.length > b; b++) {
                    var c = a[b];
                    var d = kt[c.item];
                    if (d !== Pl) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ΔΔⲆ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ⲆᐃⲆᐃᐃΔⵠ = function (a) {
            if (a && a.length !== 0) {
                rx.ⲆᐃⲆᐃᐃΔⵠ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    Ⲇⵠ = [];
                    var f = 14;
                    var g = (f + 4) * b.length + 10;
                    var h = 0;
                    d.font = f + "px Baloo Paaji";
                    for (var i = 0; i < b.length; i++) {
                        if (b[i].charAt(0) === "#") {
                            Ⲇⵠ[i] = b[i].substring(0, 7);
                            b[i] = b[i].substring(8);
                        } else {
                            Ⲇⵠ[i] = "#FFFFFF";
                        }
                        h = Math.max(d.measureText(b[i]).width + 16, h);
                    }
                    c.height = g;
                    c.width = h;
                    i = 0;
                    for (; i < b.length; i++) {
                        var j = Cu(1, b[i], f, Ⲇⵠ[i], null, null, null, null, null, "#000", 6);
                        d.drawImage(j, 8, (f + 4) * i + 5);
                    }
                    return c;
                }(a);
            } else {
                rx.ⲆᐃⲆᐃᐃΔⵠ.message = fq;
            }
        };
        this.ΔΔⲆⲆᐃ = function (a) {
            var b = qx.ᐃⲆⵠⲆ[a[1] * qx.ᐃⲆΔⵠⲆⵠⲆ];
            if (b) {
                if (qx.mode === 2 && b.ᐃΔΔΔ === 0) {
                    if (rx.ⵠⲆⲆᐃⲆ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ⵠⵠⵠⵠᐃ);
                        } else {
                            b.text.push(ⵠⵠⵠⵠᐃ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ⵠΔᐃᐃⲆⵠᐃ[Math.floor(Math.random() * ⵠΔᐃᐃⲆⵠᐃ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ⵠⵠᐃᐃⵠᐃⲆⵠⵠ = function (a) {
            if (rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ.length !== rx.ⲆⲆΔⵠ.max || kt[a].ⵠΔⵠΔ === 29 || rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(kt[a].ⵠΔⵠΔ) != -1 || rx.ⲆⲆΔⵠ.ⵠⵠⵠΔⵠᐃᐃᐃⲆ(kt[a].r)) {
                this.ΔᐃⵠΔ[Tf](oq[qq].stringify([2, a]));
                return 1;
            } else {
                this.ΔΔΔⲆᐃᐃᐃ();
                return 0;
            }
        };
        this.ⲆⵠΔⵠⲆ = function (a) {
            rx.ⲆΔⲆᐃ.ΔΔᐃᐃⵠΔⲆⲆᐃ(a);
        };
        this.ⲆⲆΔΔᐃ = function (a) {
            rx.ⲆΔⲆᐃ.ⲆⲆΔΔᐃ = a;
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ⵠᐃᐃⲆⲆ = function (a) {
            rx.ⲆΔⲆᐃ.ⵠᐃᐃⲆⲆ = a;
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ΔⵠⵠⲆⲆⵠⲆ = function (a) {
            rx.ⲆΔⲆᐃ.ΔⵠⵠⲆⲆⵠⲆ = a;
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ⲆᐃᐃᐃⵠⲆⲆΔⵠ = function (a) {
            this.ΔⲆⵠΔⵠ(zb[315]);
        };
        this.ᐃⵠⲆⵠΔᐃⲆⵠᐃ = function () {
            rx.ⲆΔⲆᐃ.ⵠΔⵠᐃⵠᐃΔ();
        };
        this.ᐃⵠⲆⵠΔ = function (a) {
            tx.ᐃⵠⲆⵠΔ.ⲆΔᐃΔ = [];
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            var c = 0;
            for (var d = 1; a.length > d; d += 2) {
                var e = {
                    x: Math.floor(a[d] * qx.w / 250),
                    y: Math.floor(a[d + 1] * qx.ⵠⵠΔ / 250)
                };
                if (b && !c && !rx.ΔⲆⲆⵠΔΔⵠ && og.ΔⲆⵠᐃ(e, b) < 250) {
                    c += 1;
                } else {
                    tx.ᐃⵠⲆⵠΔ.ⲆΔᐃΔ.push(e);
                }
            }
        };
        this.ΔⵠⲆⵠⲆΔΔⲆΔ = function () {
            rx.ⲆΔⲆⲆⵠ.open = vn;
            rx.ⵠⵠΔⲆⵠ.enabled = kj;
            rx.ⵠⵠΔⲆⵠ.ⵠⵠᐃᐃᐃ = -1;
            rx.ⵠⵠΔⲆⵠ.label = null;
            rx.ⵠⵠΔⲆⵠ.ᐃᐃⲆⵠᐃᐃΔ = null;
            rx.ⵠⵠΔⲆⵠ.now = -1;
        };
        this.ⵠⵠΔⲆⵠ = function (a) {
            Df.ⲆⲆᐃⲆⵠΔᐃ = a;
            rx.ⵠⵠΔⲆⵠ.enabled = true;
            rx.ⵠⵠΔⲆⵠ.ⵠⵠᐃᐃᐃ = new Date().getTime();
            rx.ⵠⵠΔⲆⵠ.label = null;
            rx.ⵠⵠΔⲆⵠ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
                var d = rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(b[c]);
                if (d != -1) {
                    rx.ⲆⲆΔⵠ.ⵠⲆⲆᐃⵠⵠᐃ(b.length[c], d);
                }
            }
            rx.ⲆΔⲆᐃ.ⵠΔⵠᐃⵠᐃΔ();
        };
        this.ⵠⲆΔΔⵠΔΔⵠᐃ = function (a, b, c) {
            this.ⵠᐃΔΔⲆⲆᐃ(a, b * 256 + c);
        };
        this.ⵠᐃΔΔⲆⲆᐃ = function (a, b) {
            rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
            rx.ⲆⲆΔⵠ.ⲆᐃᐃΔⵠᐃⵠ(a, b, rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(a));
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ᐃᐃⵠᐃᐃΔⲆΔΔ = function (a) {
            rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
            rx.ⵠⵠᐃⵠⵠ.wait = true;
            var b = rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(a);
            rx.ⲆⲆΔⵠ.ⲆᐃᐃΔⵠᐃⵠ(a, 1, b);
            if (b >= 0 && !rx.ⲆⲆΔⵠ.ⲆΔⵠ[a]) {
                rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
            }
            if (a == 159) {
                rx.ᐃⲆⲆⲆⲆ = [rx.id];
            }
        };
        this.ΔⲆΔⵠΔᐃⵠᐃΔ = function () {
            this.ΔᐃⵠΔ[Tf](Mo[yo].stringify([37]));
        };
        this.ⲆᐃⵠΔⲆⵠⲆⵠΔ = function (a) {
            this.ΔᐃⵠΔ[Tf](jo[Io].stringify([28, a.ΔⲆᐃⵠΔ, a.id]));
        };
        this.ᐃᐃⵠᐃⲆᐃΔᐃᐃ = function (a, b) {
            this.ΔᐃⵠΔ[Tf](jo[Zo].stringify([7, a, b]));
        };
        this.ΔᐃΔᐃⲆᐃΔᐃᐃ = function () {
            var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            if (a) {
                var b = Math.PI * 2;
                this.ΔᐃⵠΔ[Tf](jo[Io].stringify([15, rx.ⲆΔⲆᐃ.ΔΔΔᐃ, Math.floor((a.angle + b) % b * 255 / b), rx.ⲆΔⲆᐃ.mode]));
            }
        };
        this.ⲆᐃⲆⵠᐃ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
                    this.ΔᐃⵠΔ[Tf](Uo[Wo].stringify([16, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!rx.ⵠⲆⲆᐃⲆ) {
                        if (a === rx.ⲆΔⲆᐃ.ΔΔΔᐃ) {
                            rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
                        } else {
                            rx.ⲆΔⲆᐃ.ΔΔΔᐃ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case Rr.ᐃⵠⵠΔΔⵠᐃⵠΔ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!rx.ⵠⲆⲆᐃⲆ) {
                        rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
                        if ((c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ]) && a === c.right) {
                            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([16, 7]));
                        } else {
                            rx.ⵠⵠⵠⲆⲆ.wait = Ls;
                            this.ΔᐃⵠΔ[Tf](yq[ea].stringify([16, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!rx.ⵠⲆⲆᐃⲆ) {
                        rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
                        if ((c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ]) && a === c.right) {
                            this.ΔᐃⵠΔ[Tf](sa[ta].stringify([16, 7]));
                        } else {
                            this.ΔᐃⵠΔ[Tf](ca[ba].stringify([16, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!rx.ⵠⲆⲆᐃⲆ) {
                        rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
                        var c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                        this.ΔᐃⵠΔ[Tf](ca[ba].stringify([16, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ]) && c.ᐃⵠⵠᐃᐃ !== a) {
                        rx.ΔΔΔⵠΔ.wait = true;
                    }
                    this.ΔᐃⵠΔ[Tf](Uo[Zo].stringify([16, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ΔᐃⵠΔ[Tf](xa[ya].stringify([16, a]));
            }
        };
        this.ⲆⵠⲆΔᐃⵠⵠᐃᐃ = function (a) {
            this.ΔᐃⵠΔ[Tf](jo[qq].stringify([11, a]));
        };
        this.ΔΔΔⲆⲆⲆΔⲆⲆ = function (a) {
            rx.ⵠⵠᐃⵠⵠ.wait = true;
            var b = rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(a);
            rx.ⲆⲆΔⵠ.ⵠⲆⲆᐃⵠⵠᐃ(a, b);
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ᐃⲆΔⲆᐃΔⲆⵠᐃ = function (a, b) {
            this.ΔᐃⵠΔ[Tf](oq[ta].stringify([20, a]));
        };
        this.ⵠΔⲆΔⲆⲆΔΔΔ = function (a, b) {
            this.ΔᐃⵠΔ[Tf](Mo[yo].stringify([35, a]));
        };
        this.ΔΔⵠᐃⲆⲆᐃΔΔ = function (a) {
            rx.ⵠⵠᐃⵠⵠ.wait = true;
            var b = rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(a);
            rx.ⲆⲆΔⵠ.ⲆᐃᐃΔⵠᐃⵠ(a, 1, b);
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ⵠΔᐃⵠⲆΔⲆΔΔ = function (a) {
            var b = a[1];
            var c = a[2];
            rx.ⵠⵠᐃⵠⵠ.wait = true;
            var d = rx.ⲆⲆΔⵠ.Ⲇᐃⵠᐃᐃ(b);
            rx.ⲆⲆΔⵠ.ⲆᐃᐃΔⵠᐃⵠ(b, c, d);
            rx.ⲆΔⲆᐃ.ⵠᐃᐃ();
        };
        this.ⲆΔⲆΔⲆⲆⲆᐃᐃ = function () {
            this.ΔᐃⵠΔ[Tf](Mo[yo].stringify([36]));
        };
        this.ⲆⲆⵠᐃΔⵠⵠⵠΔ = function (a) {
            var b = Math.PI * 2;
            this.ΔᐃⵠΔ[Tf](jo[Io].stringify([24, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⲆⵠⲆⵠⲆⵠⵠΔΔ = function (a) {
            var b = Math.PI * 2;
            this.ΔᐃⵠΔ[Tf](jo[Io].stringify([19, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ΔⵠΔΔᐃⲆΔΔΔ = function (a) {
            this.ΔᐃⵠΔ[Tf](ⲆᐃΔⵠᐃΔᐃ[rq].stringify([3, a]));
        };
        this.ΔΔⵠᐃᐃΔΔΔⲆ = function (a) {
            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([31, a]));
        };
        this.ΔⲆΔⲆⵠᐃᐃᐃΔ = function (a) {
            var b = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            if (rx.ⵠⲆⲆᐃⲆ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ⵠⵠⵠⵠᐃ);
                } else {
                    b.text.push(ⵠⵠⵠⵠᐃ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ΔᐃⵠΔ[Tf](Ko[Zo].stringify([8, a]));
        };
        this.ⵠΔⵠⲆΔ = function (a) {
            var b = ᐃᐃΔⲆ.select.ⵠⲆⵠ;
            if (b.length != 0) {
                var c = [3];
                var d = [];
                og.ᐃᐃᐃᐃⲆΔΔ(a, {
                    x: ᐃᐃΔⲆ.ΔᐃⲆ.rx,
                    y: ᐃᐃΔⲆ.ΔᐃⲆ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; b.length > e; e++) {
                    d.push(b[e].ⲆᐃⲆⲆⲆⵠᐃⲆⲆ);
                }
                c.push(d);
                this.ΔᐃⵠΔ[Tf](yq[ea].stringify(c));
            }
        };
        this.ⲆᐃⵠⵠⵠⲆᐃ = 0;
        this.ⵠⵠⵠΔⵠⲆⵠ = {
            ⵠΔᐃⵠ: 0,
            ᐃⲆ: 0
        };
        this.ⵠⲆΔᐃᐃΔⵠⲆᐃ = function () {
            if (xx - this.ⲆᐃⵠⵠⵠⲆᐃ > 50) {
                this.ⲆᐃⵠⵠⵠⲆᐃ = xx;
                var a = rx.ΔᐃⲆ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (b != this.ⵠⵠⵠΔⵠⲆⵠ.ᐃⲆ || c != this.ⵠⵠⵠΔⵠⲆⵠ.ⵠΔᐃⵠ) {
                    this.ΔᐃⵠΔ[Tf](ca[ta].stringify([10, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ⵠⵠⵠΔⵠⲆⵠ.ᐃⲆ = b;
                    this.ⵠⵠⵠΔⵠⲆⵠ.ⵠΔᐃⵠ = c;
                }
            }
        };
        this.ᐃΔⲆⵠΔⲆⲆ = 0;
        this.ⵠⲆΔᐃⲆᐃⵠⲆⲆ = function () {
            if (xx - this.ᐃΔⲆⵠΔⲆⲆ > 60000) {
                this.ᐃΔⲆⵠΔⲆⲆ = xx;
                this.ping();
            }
        };
        this.ⲆᐃⵠⲆΔⲆΔΔᐃ = function () {
            rx.reconnect.enabled = true;
            if (this.ᐃΔⲆⵠⲆ == this.ΔᐃⵠΔ.ᐃΔⲆⵠⲆ) {
                this.ᐃΔⲆⵠⲆ++;
                this.ΔᐃⵠΔ.close();
                ⲆᐃⲆᐃ.connect();
            }
        };
        this.ᐃΔᐃᐃⵠᐃⲆⵠΔ = function (a) {
            this.ΔⲆⵠΔⵠ(zb[316]);
            for (var b = 1; b < a.length; b++) {
                rx.ᐃⲆⲆⲆⲆ.push(a[b]);
            }
        };
        this.ΔⲆⵠⵠⵠⵠᐃⵠᐃ = function (a) {
            this.ΔⲆⵠΔⵠ(qx.ⲆΔᐃΔ[a].ΔⲆᐃᐃΔ + zb[318]);
            rx.ᐃⲆⲆⲆⲆ.push(a);
            var b = document.getElementById("team_box");
            if (tx.ᐃᐃᐃⵠⵠ != -1 && b.style.display == "inline-block") {
                tx.ⵠᐃΔΔᐃ[tx.ᐃᐃᐃⵠⵠ].action();
            }
        };
        this.ᐃⵠᐃΔᐃⵠⲆⲆᐃ = function () {
            this.ΔⲆⵠΔⵠ(zb[319]);
            rx.ⲆⲆⵠⵠⵠ.wait = xb;
            rx.ᐃⲆⲆⲆⲆ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ΔⵠⵠΔΔⲆΔⵠⲆ = function (a) {
            if (a == rx.id) {
                this.ΔⲆⵠΔⵠ(zb[320]);
                rx.ⲆⲆⵠⵠⵠ.wait = Dj;
                rx.ᐃⲆⲆⲆⲆ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ΔⲆⵠΔⵠ(qx.ⲆΔᐃΔ[a].ΔⲆᐃᐃΔ + zb[321]);
                for (var b = 0; rx.ᐃⲆⲆⲆⲆ.length > b; b++) {
                    if (a == rx.ᐃⲆⲆⲆⲆ[b]) {
                        rx.ᐃⲆⲆⲆⲆ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (tx.ᐃᐃᐃⵠⵠ != -1 && c.style.display == "inline-block") {
                    tx.ⵠᐃΔΔᐃ[tx.ᐃᐃᐃⵠⵠ].action();
                }
            }
        };
        this.ΔⲆⲆⲆⵠⲆⵠᐃΔ = function (a) {
            rx.ᐃⵠΔᐃᐃ = kj;
            this.ΔⲆⵠΔⵠ(zb[322]);
            if (this.ΔᐃⵠΔ.ᐃΔⲆⵠⲆ == this.ᐃΔⲆⵠⲆ) {
                this.ᐃΔⲆⵠⲆ++;
                tx.ΔΔⵠⲆΔ(nx.ΔⲆⲆⲆᐃ);
                this.ΔᐃⵠΔ.close();
            }
        };
        this.ΔΔᐃΔⵠΔᐃⵠⲆ = function (a, b) {
            rx.ᐃⵠΔᐃᐃ = false;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            rx.ΔⲆΔᐃⲆⵠΔ.ᐃⵠᐃⵠⲆⲆⵠ = Ct[a][Math.floor(Math.random() * Ct[a].length)];
            rx.ΔⲆΔᐃⲆⵠΔ.ⲆⲆⲆᐃΔ = og.ⲆⵠⲆⲆⵠᐃᐃ(qx.ⲆΔᐃΔ[rx.id].ⲆⲆⲆᐃΔ);
            rx.ΔⲆΔᐃⲆⵠΔ.ΔⵠⵠΔΔᐃⵠ = og.ⲆⵠⲆⲆⵠᐃᐃ(d[1]);
            rx.ΔⲆΔᐃⲆⵠΔ.ⲆᐃΔⲆⵠ = c[1];
            this.ΔⲆⵠΔⵠ(zb[317]);
            if (this.ᐃΔⲆⵠⲆ == this.ΔᐃⵠΔ.ᐃΔⲆⵠⲆ) {
                this.ᐃΔⲆⵠⲆ++;
                tx.ΔΔⵠⲆΔ(sx.ΔⲆⲆⲆᐃ);
                this.ΔᐃⵠΔ.close();
                try {
                    cj.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false;
        };
        this.ping = function () {
            this.ΔᐃⵠΔ[Tf]("[6]");
        };
        this.ᐃᐃΔᐃᐃᐃᐃᐃᐃ = function () {
            if (this.ΔᐃⵠΔ.readyState == 3) {
                this.ⵠᐃΔⲆⲆΔⲆ -= 600000;
            }
        };
        this.ΔⵠΔᐃᐃⲆⵠΔⲆ = function () {
            if (yx > 5) {
                this.ⵠᐃΔⲆⲆΔⲆ = xx;
            }
            if (xx - this.ⵠᐃΔⲆⲆΔⲆ > 600000) {
                this.ⵠᐃΔⲆⲆΔⲆ = xx;
                this.ⲆᐃⵠⲆΔⲆΔΔᐃ();
            }
        };
        this.ΔᐃᐃⲆⲆⵠⲆⵠⵠ = function (c) {
            Cx++;
            clearTimeout(this.ᐃⵠⲆⵠⲆ);
            document.getElementById("commandMainBoxName").innerHTML = this.ⵠⵠᐃᐃΔ[this.ⵠᐃⵠᐃΔ][this.ⵠᐃⵠⲆⲆⵠⲆ[this.ⵠᐃⵠᐃΔ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ⵠᐃΔⲆⲆΔⲆ = xx;
            rx.ᐃᐃⵠᐃ.Δᐃᐃᐃⵠ.ⲆⲆⵠΔⵠ = rx.ᐃᐃⵠᐃ.Δᐃᐃᐃⵠ.ⲆΔⲆᐃᐃ;
            rx.ᐃᐃⵠᐃ.ⲆΔᐃⵠΔⵠΔ.ⲆⲆⵠΔⵠ = rx.ᐃᐃⵠᐃ.ⲆΔᐃⵠΔⵠΔ.ⲆΔⲆᐃᐃ;
            rx.ᐃᐃⵠᐃ.ⲆⲆⲆⲆΔᐃⲆ.ⲆⲆⵠΔⵠ = rx.ᐃᐃⵠᐃ.ⲆⲆⲆⲆΔᐃⲆ.ⲆΔⲆᐃᐃ;
            rx.ᐃᐃⵠᐃ.ᐃᐃⵠᐃΔⲆΔ.ⲆⲆⵠΔⵠ = rx.ᐃᐃⵠᐃ.ᐃᐃⵠᐃΔⲆΔ.ⲆΔⲆᐃᐃ;
            rx.ᐃᐃⵠᐃ.ⵠⵠⵠᐃᐃ.ⲆⲆⵠΔⵠ = rx.ᐃᐃⵠᐃ.ⵠⵠⵠᐃᐃ.ⲆΔⲆᐃᐃ;
            rx.ᐃᐃⵠᐃ.ⲆⵠᐃΔ = 1;
            rx.ᐃᐃⵠᐃ.c = 1;
            rx.ᐃᐃⵠᐃ.ⵠⵠΔ = 1;
            rx.ᐃᐃⵠᐃ.ᐃⲆⲆ = 1;
            rx.ᐃᐃⵠᐃ.ΔΔⲆ = 1;
            rx.ᐃᐃⵠᐃ.ⵠⲆⵠᐃⲆᐃⵠ = 1;
            rx.ΔᐃΔⲆΔⵠΔ = va;
            tx.ᐃΔᐃΔᐃ.display = 0;
            rx.ⲆⲆΔⵠ.Δᐃⵠⵠⵠ = [];
            rx.ⲆⲆΔⵠ.ⲆΔⵠ = [];
            rx.ⲆⲆΔⵠ.max = 10;
            rx.ⲆⲆΔⵠ.ΔⵠΔΔⲆⵠᐃ = 0;
            rx.ⲆⲆΔⵠ.ΔⵠⵠⲆⵠ = 0;
            rx.ⲆⲆΔⵠ.id = -1;
            tx.ᐃⵠⲆᐃΔⵠᐃ = 1;
            tx.ᐃⲆᐃⲆΔⲆⲆ = 1;
            tx.ⲆⲆᐃᐃⵠᐃⵠ = 1;
            tx.ᐃᐃⵠⵠⵠᐃΔ = 1;
            rx.ᐃⵠΔᐃᐃ = true;
            rx.ⲆⲆΔⵠ.ⲆⲆᐃΔᐃΔᐃ.stop();
            rx.ⲆΔⲆᐃ.ⲆⲆΔⵠⵠ = [];
            rx.ⲆΔⲆᐃ.ΔᐃᐃⲆⵠ = false;
            rx.ⲆΔⲆᐃ.Δⵠⵠᐃᐃⵠⵠᐃᐃ = cd;
            rx.ⲆΔⲆᐃ.ΔΔΔᐃ = -1;
            rx.ⲆΔⲆᐃ.id = -1;
            rx.ⲆΔⲆᐃ.ⲆⵠΔⵠⲆ = Fl;
            rx.ⲆΔⲆᐃ.ⲆⲆΔΔᐃ = false;
            rx.ⲆΔⲆᐃ.ⵠᐃᐃⲆⲆ = false;
            rx.ⲆΔⲆᐃ.ΔⵠⵠⲆⲆⵠⲆ = vg;
            rx.ⲆΔⲆᐃ.timeout = new og.ⵠⵠᐃΔ(false, 0, 1, 0, 1, 1);
            rx.ⵠⵠⵠⲆⲆ.timeout = new og.ⵠⵠᐃΔ(false, 0, 1, 0, 0.1, 1);
            rx.ⵠⵠⵠⲆⲆ.wait = kk;
            rx.ΔΔΔⵠΔ.timeout = new og.ⵠⵠᐃΔ(false, 0, 1, 0, 0.2, 1);
            rx.ΔΔΔⵠΔ.wait = false;
            rx.ⵠⵠᐃⵠⵠ.timeout = new og.ⵠⵠᐃΔ(false, 0, 1, 0, 1, 1);
            rx.ⵠⵠᐃⵠⵠ.wait = false;
            rx.ⲆⲆⵠⵠⵠ.id = -1;
            rx.ⲆⲆⵠⵠⵠ.ΔⵠⲆⲆ = -1;
            rx.ⲆⲆⵠⵠⵠ.wait = false;
            rx.ⲆⲆⵠⵠⵠ.timeout = new og.ⵠⵠᐃΔ(Nq, 0, 1, 0, 1 / 30, 1);
            tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.x = -1;
            tx.ᐃⵠⲆⵠΔ.ΔⲆⲆⲆⲆ.y = -1;
            tx.ⲆⲆⵠⵠ.open = false;
            tx.ᐃⵠⲆⵠΔ.ⲆΔᐃΔ = [];
            rx.ⵠᐃᐃᐃΔ.enabled = Eh;
            qx.mode = c[1];
            if (Ta !== c[20] && c[21] !== undefined) {
                qx.ᐃᐃΔᐃᐃ = c[20];
                qx.ⵠΔᐃΔⵠ = c[21];
                qx.w = qx.ⲆⲆⲆⲆᐃⲆⲆ * qx.ᐃᐃΔᐃᐃ;
                qx.ⵠⵠΔ = qx.ⵠⵠⲆⵠⲆⲆⵠ * qx.ⵠΔᐃΔⵠ;
            }
            qx.ⲆΔᐃⲆΔⵠᐃ = c[22];
            qx.ⵠᐃΔⲆᐃ = c[23];
            b.ⲆᐃⲆᐃᐃΔⵠ(c[24]);
            b.ᐃᐃⲆᐃΔⲆⵠⵠΔ(c[25]);
            rx.ⲆΔΔⲆⲆ.ΔᐃⵠⵠⲆ = c[26];
            rx.ⵠΔⵠⲆᐃᐃⵠ = 0;
            rx.ⲆΔⵠᐃᐃ.ΔᐃⵠⵠⲆ = c[27];
            qx.ᐃΔⲆⲆΔᐃᐃⵠⲆ(c[19]);
            qx.time = c[5];
            qx.ⵠⵠⵠⵠⲆ.ⵠⵠⲆⵠⲆ = c[15];
            qx.ⵠⵠⵠⵠⲆ.ᐃᐃᐃⲆΔ = new Date().getTime();
            tx.ΔⵠⵠΔ.ΔᐃᐃⲆᐃⲆⲆ = c[16];
            qx.transition = false;
            rx.ᐃᐃΔ = c[2];
            tx.ΔⵠⵠΔ.reset();
            rx.ᐃⲆⲆⲆⲆ = c[8];
            qx.ⵠⲆⵠ[0] = [];
            qx.ⵠⲆⵠ[100] = [];
            qx.ⵠⲆⵠ[2] = [];
            qx.ⵠⲆⵠ[1] = [];
            qx.ⵠⲆⵠ[6] = [];
            qx.ⵠⲆⵠ[3] = [];
            qx.ⵠⲆⵠ[31] = [];
            qx.ⵠⲆⵠ[37] = [];
            qx.ⵠⲆⵠ[43] = [];
            qx.ⵠⲆⵠ[44] = [];
            qx.ⵠⲆⵠ[39] = [];
            qx.ⵠⲆⵠ[40] = [];
            qx.ⵠⲆⵠ[54] = [];
            qx.ⵠⲆⵠ[55] = [];
            qx.ⵠⲆⵠ[4] = [];
            qx.ⵠⲆⵠ[7] = [];
            qx.ⵠⲆⵠ[8] = [];
            qx.ⵠⲆⵠ[9] = [];
            qx.ⵠⲆⵠ[10] = [];
            qx.ⵠⲆⵠ[15] = [];
            qx.ⵠⲆⵠ[16] = [];
            qx.ⵠⲆⵠ[17] = [];
            qx.ⵠⲆⵠ[45] = [];
            qx.ⵠⲆⵠ[46] = [];
            qx.ⵠⲆⵠ[47] = [];
            qx.ⵠⲆⵠ[48] = [];
            qx.ⵠⲆⵠ[49] = [];
            qx.ⵠⲆⵠ[53] = [];
            qx.ⵠⲆⵠ[11] = [];
            qx.ⵠⲆⵠ[22] = [];
            qx.ⵠⲆⵠ[23] = [];
            qx.ⵠⲆⵠ[5] = [];
            qx.ⵠⲆⵠ[12] = [];
            qx.ⵠⲆⵠ[13] = [];
            qx.ⵠⲆⵠ[14] = [];
            qx.ⵠⲆⵠ[60] = [];
            qx.ⵠⲆⵠ[70] = [];
            qx.ⵠⲆⵠ[71] = [];
            qx.ⵠⲆⵠ[72] = [];
            qx.ⵠⲆⵠ[73] = [];
            qx.ⵠⲆⵠ[74] = [];
            qx.ⵠⲆⵠ[81] = [];
            qx.ⵠⲆⵠ[82] = [];
            qx.ⵠⲆⵠ[87] = [];
            qx.ⵠⲆⵠ[86] = [];
            qx.ⵠⲆⵠ[34] = [];
            qx.ⵠⲆⵠ[65] = [];
            qx.ⵠⲆⵠ[66] = [];
            qx.ⵠⲆⵠ[67] = [];
            qx.ⵠⲆⵠ[62] = [];
            qx.ⵠⲆⵠ[63] = [];
            qx.ⵠⲆⵠ[78] = [];
            qx.ⵠⲆⵠ[77] = [];
            qx.ⵠⲆⵠ[75] = [];
            qx.ⵠⲆⵠ[76] = [];
            qx.ⵠⲆⵠ[64] = [];
            qx.ⵠⲆⵠ[69] = [];
            qx.ⵠⲆⵠ[68] = [];
            qx.ⵠⲆⵠ[79] = [];
            qx.ⵠⲆⵠ[89] = [];
            qx.ⵠⲆⵠ[83] = [];
            qx.ⵠⲆⵠ[84] = [];
            qx.ⵠⲆⵠ[85] = [];
            qx.ⵠⲆⵠ[80] = [];
            qx.ⵠⲆⵠ[88] = [];
            qx.ⵠⲆⵠ[91] = [];
            qx.ⵠⲆⵠ[90] = [];
            qx.ⵠⲆⵠ[61] = [];
            qx.ⵠⲆⵠ[18] = [];
            qx.ⵠⲆⵠ[19] = [];
            qx.ⵠⲆⵠ[20] = [];
            qx.ⵠⲆⵠ[21] = [];
            qx.ⵠⲆⵠ[50] = [];
            qx.ⵠⲆⵠ[52] = [];
            qx.ⵠⲆⵠ[51] = [];
            qx.ⵠⲆⵠ[29] = [];
            qx.ⵠⲆⵠ[56] = [];
            qx.ⵠⲆⵠ[30] = [];
            qx.ⵠⲆⵠ[38] = [];
            qx.ⵠⲆⵠ[33] = [];
            qx.ⵠⲆⵠ[32] = [];
            qx.ⵠⲆⵠ[24] = [];
            qx.ⵠⲆⵠ[25] = [];
            qx.ⵠⲆⵠ[26] = [];
            qx.ⵠⲆⵠ[27] = [];
            qx.ⵠⲆⵠ[28] = [];
            qx.ⵠⲆⵠ[42] = [];
            qx.ⵠⲆⵠ[41] = [];
            qx.ⵠⲆⵠ[35] = [];
            qx.ⵠⲆⵠ[36] = [];
            qx.ᐃⲆⵠⲆ = [];
            qx.ᐃⲆΔⵠⲆⵠⲆ = c[7];
            rx.id = c[9];
            rx.ᐃΔΔⲆ = rx.id * qx.ᐃⲆΔⵠⲆⵠⲆ;
            if (ux.loaded) {
                ux.ⲆΔᐃΔ[0].ᐃΔΔⲆ = rx.ᐃΔΔⲆ;
                ux.ⲆΔᐃΔ[0].ⲆⵠⵠⲆᐃΔⵠ = 0;
            }
            vx.ⵠⲆⵠⵠᐃΔⲆ();
            rx.ΔᐃⲆ.ᐃⵠᐃΔⵠ(c[3], c[10]);
            qx.ⲆΔᐃΔ = [];
            var d = qx.ⲆΔᐃΔ;
            for (var e = 0; e < c[11]; e++) {
                d.push(new Lf());
            }
            e = 0;
            for (var f = c[4]; f.length > e; e++) {
                var g = d[f[e].i];
                g.ΔⲆᐃᐃΔ = f[e].n;
                g.ᐃΔΔΔ = f[e].s;
                g.ΔⵠⲆᐃⵠ = f[e].a;
                g.ⲆⵠΔⲆΔ = f[e].c;
                g.ᐃᐃΔⵠⵠ = f[e].b;
                g.ᐃᐃⵠΔⵠ = f[e].d;
                g.ᐃᐃᐃⲆⲆΔᐃ = f[e].g;
                g.level = f[e].l;
                g.ⲆⲆⲆᐃΔ = og.ⵠⵠΔⲆᐃⲆⲆ(f[e].p);
                g.ᐃⵠΔᐃᐃ = F;
                if (ff === 1) {
                    g.ΔⲆᐃᐃΔ += "|" + f[e].i;
                }
            }
            rx.ⲆⵠΔᐃⵠ.sort();
            if (qx.mode === 1 && qx.ⲆΔᐃΔ[rx.id].ΔⲆᐃᐃΔ === "spectator") {
                rx.ΔⲆⲆⵠΔΔⵠ = Ls;
            } else {
                rx.ΔⲆⲆⵠΔΔⵠ = al;
            }
            if (qx.mode === 2 && qx.ⲆΔᐃΔ[rx.id].ᐃΔΔΔ === 0) {
                rx.ⵠⲆⲆᐃⲆ = Aq;
            } else {
                rx.ⵠⲆⲆᐃⲆ = cb;
            }
            if (qx.mode === 3 && qx.ⲆΔᐃΔ[rx.id].ᐃΔΔΔ === 0) {
                rx.ⲆΔⲆΔⵠⵠⵠ = true;
            } else {
                rx.ⲆΔⲆΔⵠⵠⵠ = false;
            }
            ᐃⵠⵠΔ.set("starve_token", rx.ᐃⲆⲆᐃⲆ);
            if (c[12] === 0) {
                rx.ᐃⲆΔⵠΔ.ⵠⵠᐃᐃᐃ = 0;
                tx.ΔⵠⵠΔ.restore(c[17]);
                var h = c[14];
                if (h[29]) {
                    rx.ⲆⲆΔⵠ.ⲆⲆᐃⲆᐃⲆΔ(1, 0);
                }
                for (e = 0; h.length > e; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ᐃⵠⵠⲆⲆΔⲆ([0, e, h[e]]);
                    }
                }
                rx.ᐃⲆΔⵠΔ.open = va;
            } else {
                if (qx.mode === 4) {
                    this.ᐃⵠⵠⲆⲆΔⲆ([0, 238, 1]);
                } else if (qx.mode === 3) {
                    if (rx.ⲆΔⲆΔⵠⵠⵠ) {
                        this.ᐃⵠⵠⲆⲆΔⲆ([0, 190, 4]);
                    } else {
                        this.ᐃⵠⵠⲆⲆΔⲆ([0, 191, 3]);
                    }
                }
                if (qx.mode === 0 || qx.mode === 3 || qx.mode === 7 || qx.mode === 4) {
                    rx.ᐃⲆΔⵠΔ.ⵠⵠᐃᐃᐃ = new Date().getTime();
                    rx.ᐃⲆΔⵠΔ.open = true;
                    rx.ᐃⲆΔⵠΔ.value = c[13];
                    tx.ᐃⲆΔⵠΔ.ᐃᐃᐃⲆΔ();
                } else {
                    rx.ᐃⲆΔⵠΔ.ⵠⵠᐃᐃᐃ = 0;
                    rx.ᐃⲆΔⵠΔ.open = _e;
                    rx.ᐃⲆΔⵠΔ.value = 0;
                }
                rx.ⲆᐃⲆⲆΔΔΔ = c[12].toString();
            }
            rx.ⵠⵠΔⲆⵠ.enabled = c[6];
            rx.ⵠⵠΔⲆⵠ.ⵠⵠᐃᐃᐃ = -1;
            rx.ⵠⵠΔⲆⵠ.label = null;
            rx.ⵠⵠΔⲆⵠ.now = -1;
            ᐃⵠⵠΔ.set("starve_token_id", rx.ⲆᐃⲆⲆΔΔΔ);
            if (rx.reconnect.enabled) {
                rx.reconnect.rotate = 0;
                rx.reconnect.enabled = false;
            } else {
                nx.ΔΔⵠⲆΔ(tx.ΔⲆⲆⲆᐃ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + nx.ᐃΔΔΔ + "A" + nx.ΔⵠⲆᐃⵠ);
                }
            }
        };
        this.connect = function () {
            b.ᐃⵠΔⲆΔᐃΔ = 0;
            b.ΔⵠᐃᐃⵠᐃⲆ();
        };
        this.ᐃᐃᐃΔΔΔΔ = [];
        this.ⲆⵠⲆⲆΔⲆⵠΔᐃ = function (c) {
            const d = b.ⵠⵠΔΔⲆ.filter(a => a.gm === c);
            const f = {};
            for (let a = 0; d.length > a; a++) {
                const b = d[a];
                const c = b.r;
                if (c !== undefined) {
                    if (Ta === f[c]) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function e(d) {
                b.ᐃᐃᐃΔΔΔΔ[c] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                b.ᐃⵠᐃᐃⵠΔᐃ({
                    domain: Af,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (b.ᐃᐃᐃΔΔΔΔ[c] !== undefined) {
                e(b.ᐃᐃᐃΔΔΔΔ[c]);
                return;
            }
            let a = 1;
            function g(b) {
                const c = new cj.XMLHttpRequest();
                const d = b[0];
                const f = d.p;
                const g = d.r;
                const i = f[Math.floor(Math.random() * f.length)];
                c.open("GET", "https://" + i + "." + Af + "/", true);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        e(g);
                    }
                };
                c.send();
            }
            for (let a in f) {
                g(f[a]);
            }
            cj.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = cj.Object.keys(f);
                e(b[Math.floor(Math.random() * b.length)]);
            }, 5000);
        };
        this.ⲆΔᐃⵠⵠΔⵠΔⵠ = function () {
            let a = Df.ⵠⲆⲆΔΔⲆᐃ[b.ⵠᐃⵠᐃΔ];
            console.log(undefined, undefined, undefined);
            let c = b.ⵠᐃⵠⲆⲆⵠⲆ[b.ⵠᐃⵠᐃΔ];
            let d = b.ⵠⵠΔΔⲆ.find(b => b.gm == a && b.idx == c);
            if (fq === d) {
                b.ⲆⵠⲆⲆΔⲆⵠΔᐃ(a);
            } else {
                b.ᐃⵠᐃᐃⵠΔᐃ({
                    domain: Af,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ΔⵠᐃᐃⵠᐃⲆ = function () {
            console.log(hg);
            if (Kw !== Pl && Pf !== undefined) {
                console.log(undefined, jj, undefined);
                b.ᐃⵠᐃᐃⵠΔᐃ({
                    domain: Af,
                    is_tls: 1,
                    id: Pf + Kw,
                    p: b.ᐃⲆⵠⲆᐃᐃⵠ[Pf]
                });
                return;
            }
            if (yf === undefined) {
                b.ⲆΔᐃⵠⵠΔⵠΔⵠ();
            } else {
                b.ᐃⵠᐃᐃⵠΔᐃ({
                    domain: yf.domain,
                    is_tls: yf.ssl,
                    id: yf.id,
                    p: [yf.p]
                });
            }
        };
        this.ᐃⵠᐃᐃⵠΔᐃ = function (c) {
            let d = c.domain;
            let e = c.is_tls;
            let f = c.id;
            let a = c.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(Wr, undefined);
            b.ΔᐃⵠΔ = new cj.WebSocket(i);
            b.ΔᐃⵠΔ.binaryType = "arraybuffer";
            b.ΔᐃⵠΔ.ᐃΔⲆⵠⲆ = b.ᐃΔⲆⵠⲆ;
            b.ΔᐃⵠΔ.onmessage = function (a) {
                if (b.ᐃΔⲆⵠⲆ == b.ᐃΔⲆⵠⲆ) {
                    if (typeof a.data == "string") {
                        var c = JSON.parse(a.data);
                        switch (c[0]) {
                            case 0:
                                b.ΔΔⲆⲆᐃ(c);
                                break;
                            case 1:
                                b.ⵠⵠΔΔΔᐃⲆ(c[1]);
                                break;
                            case 2:
                                b.ᐃΔⲆΔᐃⲆᐃⲆⵠ(c);
                                break;
                            case 3:
                                b.ΔᐃᐃⲆⲆⵠⲆⵠⵠ(c);
                                break;
                            case 4:
                                b.message(c[1]);
                                break;
                            case 5:
                                b.ΔΔᐃΔᐃⲆΔ(c);
                                break;
                            case 6:
                                b.ⲆᐃⲆᐃᐃΔⵠ(c[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g;
                            let h = Mf[e];
                            let i = yk;
                            if (h === undefined) {
                                Bf += e * 2;
                                if (Bf < 65535) {
                                    g = lj(Tj(e));
                                } else {
                                    Bf = e;
                                    for (let a = 0; Mf.length > a; a++) {
                                        if (Mf[a] !== undefined) {
                                            const b = Mf[a][0];
                                            Mf[a] = undefined;
                                            pj(b);
                                        }
                                    }
                                    g = lj(Tj(e));
                                    nj();
                                }
                                i = vk(g);
                                Mf[e] = [g, i];
                            } else {
                                g = h[0];
                                i = h[1];
                            }
                            for (let a = 0; a < f.length; a++) {
                                i[a] = f[a];
                            }
                            Kj(g, c, d);
                            for (let a = 0; a < f.length; a++) {
                                f[a] = i[a];
                            }
                            return f;
                        }(a.data, rx.ⲆΔⵠᐃᐃⵠⲆ, rx.ΔᐃⲆⵠⲆΔⵠᐃΔ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                b.ⵠⲆⵠ(e, d, vg);
                                break;
                            case 1:
                                b.ⵠⲆⵠ(e, d, true);
                                break;
                            case 2:
                                b.ᐃⵠⲆⵠΔᐃⲆⵠᐃ();
                                break;
                            case 3:
                                b.ᐃⵠⵠⲆⲆΔⲆ(new Uint16Array(e));
                                break;
                            case 4:
                                b.ⲆⵠⲆΔⵠᐃⵠΔⵠ();
                                break;
                            case 5:
                                b.ⲆⲆⲆΔΔⵠⵠⵠⵠ();
                                break;
                            case 6:
                                b.ⲆᐃᐃᐃⵠⲆⲆΔⵠ();
                                break;
                            case 7:
                                b.ᐃᐃᐃⲆⵠⲆᐃᐃᐃ(e);
                                break;
                            case 8:
                                b.ᐃᐃᐃΔⲆⲆⵠⲆⵠ(d[1]);
                                break;
                            case 9:
                                b.ΔᐃᐃⲆΔᐃΔⵠⲆ(d[1]);
                                break;
                            case 10:
                                b.ΔΔΔⲆᐃᐃᐃ();
                                break;
                            case 11:
                                b.ⵠᐃΔΔⲆⲆᐃ(d[1], d[2]);
                                break;
                            case 12:
                                b.ⲆⵠΔⵠⲆ(d[1]);
                                break;
                            case 13:
                                b.ᐃⲆⲆᐃⵠΔⵠᐃᐃ(d, e);
                                break;
                            case 14:
                                b.ΔⲆⲆΔⲆⵠⲆ();
                                break;
                            case 15:
                                b.ᐃΔᐃᐃⲆᐃⲆᐃⵠ(d[1]);
                                break;
                            case 16:
                                b.ᐃᐃⵠᐃ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                b.ⲆⵠⵠᐃᐃᐃΔⵠⲆ(e);
                                break;
                            case 18:
                                b.ⲆⲆⵠⲆᐃⵠⲆΔΔ();
                                break;
                            case 19:
                                b.ⵠᐃᐃⲆⲆ(d[1]);
                                break;
                            case 20:
                                b.ⵠᐃᐃΔⲆⲆΔΔΔ();
                                break;
                            case 21:
                                b.ⵠΔᐃᐃ(e);
                                break;
                            case 22:
                                b.ⲆΔⲆⵠᐃⵠΔᐃΔ(d[1]);
                                break;
                            case 23:
                                b.ⵠⵠⵠⵠⲆⲆΔᐃⲆ(e);
                                break;
                            case 24:
                                b.ᐃᐃⵠᐃᐃΔⲆΔΔ(d[1]);
                                break;
                            case 25:
                                b.ΔΔᐃΔⵠΔᐃⵠⲆ(d[1], e);
                                break;
                            case 26:
                                b.ᐃⵠⲆⵠΔ(d);
                                break;
                            case 27:
                                b.ⵠᐃΔΔᐃᐃⵠⲆⲆ();
                                break;
                            case 28:
                                b.ⵠⵠΔⲆⵠ(d[1]);
                                break;
                            case 29:
                                b.ΔⵠⲆⵠⲆΔΔⲆΔ();
                                break;
                            case 30:
                                b.ΔⲆⲆⲆⵠⲆⵠᐃΔ();
                                break;
                            case 31:
                                b.ᐃΔᐃᐃⵠᐃⲆⵠΔ(d);
                                break;
                            case 32:
                                b.ΔⵠⵠΔΔⲆΔⵠⲆ(d[1]);
                                break;
                            case 33:
                                b.ΔⲆⵠⵠⵠⵠᐃⵠᐃ(d[1]);
                                break;
                            case 34:
                                b.ᐃⵠᐃΔᐃⵠⲆⲆᐃ();
                                break;
                            case 35:
                                b.ⵠᐃΔⵠⲆⵠᐃⲆⵠ(d[1]);
                                break;
                            case 36:
                                b.ΔⵠⵠⲆⲆⵠⲆ(d[1]);
                                break;
                            case 37:
                                b.ⵠⵠΔⲆᐃΔⲆᐃⲆ(d[1], d[2]);
                                break;
                            case 38:
                                b.ΔᐃⲆⵠⲆⲆⵠⲆⲆ(d[1]);
                                break;
                            case 39:
                                b.ΔⲆᐃⵠᐃⲆⵠⲆⵠ(d[1]);
                                break;
                            case 40:
                                b.ΔⲆΔⵠΔⲆⲆⲆⲆ();
                                break;
                            case 41:
                                b.ⲆⵠᐃᐃΔⵠⵠⵠⲆ(d);
                                break;
                            case 42:
                                b.ⵠⵠᐃΔΔⲆΔⵠⲆ(d[1]);
                                break;
                            case 43:
                                b.ΔⵠΔᐃΔᐃⲆΔᐃ(d[1]);
                                break;
                            case 44:
                                b.claimed(d[1]);
                                break;
                            case 45:
                                b.ⵠᐃⵠⵠⵠⵠⲆΔᐃ(d[1]);
                                break;
                            case 46:
                                b.ᐃΔⲆᐃⲆΔⵠΔΔ(d[1]);
                                break;
                            case 47:
                                b.ⲆⲆΔΔᐃ(d[1]);
                                break;
                            case 48:
                                b.ΔⲆΔᐃⲆᐃᐃΔΔ();
                                break;
                            case 50:
                                b.ⵠⲆΔΔⵠΔΔⵠᐃ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                b.ΔⵠΔΔᐃΔᐃⲆᐃ();
                                break;
                            case 52:
                                b.ΔΔΔⲆⲆⲆΔⲆⲆ(d[1]);
                                break;
                            case 53:
                                b.ΔΔⵠᐃⲆⲆᐃΔΔ(d[1]);
                                break;
                            case 54:
                                b.ΔΔⵠΔⵠⲆⵠⵠⵠ();
                                break;
                            case 55:
                                b.ⲆⲆⵠΔΔΔⲆⵠΔ(d[1]);
                                break;
                            case 56:
                                b.ᐃⵠΔⲆⵠⲆⲆⵠᐃ(d[1]);
                                break;
                            case 57:
                                b.ΔⵠⵠⵠⲆΔⲆΔᐃ();
                                break;
                            case 58:
                                b.ⵠΔΔΔⵠⵠⲆⵠⲆ();
                                break;
                            case 59:
                                b.ⵠᐃᐃᐃⵠᐃⲆⲆⵠ();
                                break;
                            case 60:
                                b.ⵠᐃᐃΔΔⲆΔᐃⲆ();
                                break;
                            case 61:
                                rx.ΔᐃⲆ.ᐃⵠⲆⲆΔᐃⲆ = 0.2;
                                rx.ΔᐃⲆ.ⵠⵠᐃᐃᐃ = 3;
                                break;
                            case 62:
                                b.ⵠΔᐃⵠⲆΔⲆΔΔ(new Uint16Array(e));
                                break;
                            case 63:
                                b.ΔΔⵠⲆⲆⵠᐃⵠΔ();
                                break;
                            case 64:
                                b.ⲆΔΔΔᐃⵠⲆⵠΔ();
                                break;
                            case 65:
                                b.ⲆⵠᐃⵠⲆⲆⵠΔΔ();
                                break;
                            case 66:
                                b.ⵠⲆⲆⲆⲆᐃΔⵠᐃ();
                                break;
                            case 67:
                                b.ⵠᐃⲆᐃᐃᐃΔᐃᐃ(d[1]);
                                break;
                            case 68:
                                b.ⵠΔⵠⵠⵠⲆᐃΔΔ(d[1]);
                                break;
                            case 69:
                                b.ⵠΔⵠⲆᐃᐃⵠ(d[1]);
                                break;
                            case 70:
                                b.ⲆᐃⲆᐃᐃᐃⵠⵠᐃ(d[1]);
                                break;
                            case 71:
                                b.ᐃⲆΔⲆⵠ(d[1]);
                        }
                    }
                }
            };
            b.ΔᐃⵠΔ.onerror = function () {
                if (rx.reconnect.enabled) {
                    cj.setTimeout(b.timeout, 2500);
                }
            };
            this.ΔᐃⵠΔ.onopen = function () {
                clearTimeout(b.ᐃⵠⲆⵠⲆ);
                rx.ⵠⲆΔⵠΔᐃᐃ = rx.ⵠⲆΔⵠΔᐃᐃ || og.ΔⵠⲆⵠⵠΔⵠ("token");
                og.ⲆⲆⵠⲆⵠᐃⲆ().then(a => {
                    b.ΔᐃⵠΔ[Tf](Sa[ya].stringify([nx.ΔⲆᐃᐃΔ.input.value, screen.width + 200, screen.height + 200, 52, rx.ᐃⲆⲆᐃⲆ, rx.ⲆᐃⲆⲆΔΔΔ, rx.reconnect.enabled ? 1 : 0, nx.ᐃΔΔΔ, nx.ΔⵠⲆᐃⵠ, nx.ΔⵠⵠⲆⵠ, nx.ᐃᐃΔⵠⵠ, nx.ⲆⵠΔⲆΔ, nx.ᐃᐃⵠΔⵠ, Qx === _t ? 0 : Qx, Px === Pl ? 0 : Px.substring(Px.length - 50), zf, rx.ⵠⲆΔⵠΔᐃᐃ, a, rx.ᐃⵠⵠⵠᐃⵠⵠ, rx.ⵠΔΔⵠΔⲆΔ]));
                    rx.ⵠⲆΔⵠΔᐃᐃ = undefined;
                    rx.ᐃⵠⵠⵠᐃⵠⵠ = undefined;
                    rx.ⵠΔΔⵠΔⲆΔ = rs;
                    b.ᐃⵠⲆⵠⲆ = setTimeout(b.timeout, 2000);
                });
            };
        };
    }();
    var qx;
    var rx;
    var sx;
    var tx = {
        ⵠⲆⲆΔⲆ: Eh
    };
    var ux = new function () {
        this.ΔⲆⲆⲆᐃ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ᐃΔᐃⵠⵠΔΔ = function (a) {
            return a / qx.w * 100;
        };
        this.ⲆⲆⲆΔⵠΔⵠ = function (a) {
            return a / qx.ⵠⵠΔ * 100;
        };
        this.ᐃΔⵠⲆᐃΔᐃ = function (a, b) {
            a = this.ᐃΔᐃⵠⵠΔΔ(a) - this.ⵠᐃⲆⲆᐃ.x;
            return this.ⵠᐃⲆⲆᐃ.x + b * a;
        };
        this.ⵠΔⲆᐃⲆΔⵠ = function (a, b) {
            a = Math.abs(this.ⲆⲆⲆΔⵠΔⵠ(a) - this.ⵠᐃⲆⲆᐃ.y);
            return this.ⵠᐃⲆⲆᐃ.y + b * a;
        };
        this.sample = {};
        this.ΔΔΔᐃᐃ = {};
        this.ᐃᐃΔⲆ = {};
        this.ⲆΔⲆⲆΔⵠᐃ = function (b, c, d, e) {
            for (var f = 0; c.length > f; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return true;
                }
            }
            return va;
        };
        this.ⵠΔⲆⵠ = function (a, b, c, d) {
            c = this.ᐃΔⵠⲆᐃΔᐃ(c, jx.ⵠΔᐃΔⲆΔᐃ);
            d = this.ⵠΔⲆᐃⲆΔⵠ(d, jx.ⵠΔᐃΔⲆΔᐃ);
            console.log("HIT", a, b, c, d, jx.ⵠΔᐃΔⲆΔᐃ);
            if (a) {
                if (b === 1) {
                    this.ⲆΔⲆⲆΔⵠᐃ(this.ᐃᐃΔⲆ.ΔⲆⲆᐃⲆΔᐃ, this.sample.ΔⲆⲆᐃⲆΔᐃ, c, d);
                } else if (b === 0) {
                    this.ⲆΔⲆⲆΔⵠᐃ(this.ᐃᐃΔⲆ.ΔᐃⵠⲆⲆᐃⵠ, this.sample.ΔᐃⵠⲆⲆᐃⵠ, c, d);
                }
            } else {
                this.ⲆΔⲆⲆΔⵠᐃ(this.ᐃᐃΔⲆ.ⵠⵠⲆⵠΔ, this.sample.ⵠⵠⲆⵠΔ, c, d);
            }
        };
        this.ⵠᐃⲆⲆᐃ = {
            x: 0,
            y: 0
        };
        this.ⵠⲆΔᐃΔΔⲆ = {
            y: 0,
            x: 0
        };
        this.ᐃⵠⵠΔᐃ = {};
        this.ⲆΔᐃΔ = [];
        this.ⵠⵠⲆᐃᐃ = function (a, b) {
            for (var c in this.ᐃⵠⵠΔᐃ) {
                var d = this.ᐃⵠⵠΔᐃ[c];
                d.check(a);
                if (d.ΔᐃⲆΔᐃⲆᐃ) {
                    if (qx.ⵠⵠⵠⵠⲆ.now < 460000) {
                        d.ⲆΔᐃΔⲆ();
                    }
                    if (b) {
                        d.ⵠᐃᐃ(a, this.ⵠᐃⲆⲆᐃ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ᐃⵠΔΔⵠΔⲆⵠⲆ = function () {
            var a = [];
            for (var b = 0; this.ⲆΔᐃΔ.length > b; b++) {
                if ((e = this.ⲆΔᐃΔ[b]).ⲆⵠⵠⲆᐃΔⵠ) {
                    a.push(b);
                } else if (!e.ⲆⵠⵠⲆᐃΔⵠ && !qx.ᐃⲆⵠⲆ[e.ᐃΔΔⲆ]) {
                    e.ⲆⵠⵠⵠⲆᐃⲆ();
                    a.push(b);
                }
            }
            var c = qx.ⵠⲆⵠ[0];
            var d = 0;
            for (b = 0; b < c.length && a.length > d; b++) {
                var e = c[b];
                if ((qx.mode != 1 || qx.ⲆΔᐃΔ[e.id].ΔⲆᐃᐃΔ !== "spectator") && e.ⵠⵠᐃΔⲆ === -1 && rx.ᐃΔΔⲆ !== e.ᐃΔΔⲆ) {
                    this.ⲆΔᐃΔ[a[d]].ᐃᐃᐃⲆΔ(e.ᐃΔΔⲆ);
                    d++;
                }
            }
        };
        this.ΔⲆⲆⲆⲆΔⲆᐃΔ = function () {
            this.ᐃⵠΔΔⵠΔⲆⵠⲆ();
            for (var a = 0; this.ⲆΔᐃΔ.length > a; a++) {
                var b = this.ⲆΔᐃΔ[a];
                if (!b.ⲆⵠⵠⲆᐃΔⵠ && b.check()) {
                    b.ⵠᐃᐃ();
                }
            }
        };
        this.ᐃᐃⲆⲆᐃⲆⵠΔⵠ = function (a) {
            if (this.ⵠⲆΔᐃΔΔⲆ.x === a.x && a.y === this.ⵠⲆΔᐃΔΔⲆ.y) {
                return 0;
            } else {
                this.ⵠⲆΔᐃΔΔⲆ.x = a.x;
                this.ⵠⲆΔᐃΔΔⲆ.y = a.y;
                this.ⵠᐃⲆⲆᐃ.x = this.ᐃΔᐃⵠⵠΔΔ(a.x);
                this.ⵠᐃⲆⲆᐃ.y = this.ⲆⲆⲆΔⵠΔⵠ(a.y);
                Howler.pos(this.ⵠᐃⲆⲆᐃ.x, this.ⵠᐃⲆⲆᐃ.y, 0);
                return 1;
            }
        };
        this.ΔᐃΔⲆⲆΔⵠᐃᐃ = function () {
            if (this.ΔⲆⲆⲆᐃ && this.loaded) {
                var a = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
                if (a) {
                    a.ⵠⵠᐃΔⲆ = 0;
                    var b = this.ᐃᐃⲆⲆᐃⲆⵠΔⵠ(a);
                    if (qx.mode !== 2 && qx.mode !== 4 && qx.mode !== 5) {
                        this.ⵠⵠⲆᐃᐃ(a, b);
                    }
                    this.ΔⲆⲆⲆⲆΔⲆᐃΔ();
                }
            }
        };
        this.ⲆΔⲆⵠΔⲆΔΔⲆ = function () {
            for (var b in gx) {
                var c = gx[b];
                if (typeof c === "object" && c.path) {
                    c.ⲆⵠⵠᐃΔ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.ᐃⵠ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(undefined);
                    for (var h = 0; h < f; h++) {
                        var j = c.ⲆⵠⵠᐃΔ.play(d);
                        c.ⲆⵠⵠᐃΔ.stop(j);
                        c.ⲆⵠⵠᐃΔ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(Yd, undefined);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        ux.sample[d] = g;
                    } else {
                        ux.sample[d] = g[0];
                    }
                    ux.ᐃᐃΔⲆ[d] = c.ⲆⵠⵠᐃΔ;
                }
            }
        };
        this.ⲆΔᐃᐃⵠⲆⲆ = function (a, b, c) {
            for (var d = 0; d < a.length; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ᐃⵠⵠᐃⲆⵠⵠ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; i < d; i++) {
                var j = a[i] = [];
                for (ⵠΔᐃⵠ = 0; e > ⵠΔᐃⵠ; ⵠΔᐃⵠ++) {
                    j[ⵠΔᐃⵠ] = ux.sample[f + ⵠΔᐃⵠ][i];
                    c.ⲆⵠⵠᐃΔ.volume(g, j[ⵠΔᐃⵠ]);
                }
            }
        };
        this.ᐃᐃᐃⲆΔ = function () {
            ux.ⲆΔⲆⵠΔⲆΔΔⲆ();
            ux.ΔΔΔᐃᐃ.ⵠⵠΔΔⵠⵠᐃ = [];
            ux.ΔΔΔᐃᐃ.ⵠⵠⵠⲆⲆ = [];
            ux.ΔΔΔᐃᐃ.ᐃⲆⲆⵠⲆ = [];
            ux.ᐃⵠⵠᐃⲆⵠⵠ(ux.ΔΔΔᐃᐃ.ⵠⵠΔΔⵠⵠᐃ, gx.ⵠⲆⲆⵠⵠⲆⲆ, 8, 3, "p", 0.15);
            ux.ᐃⵠⵠᐃⲆⵠⵠ(ux.ΔΔΔᐃᐃ.ⵠⵠⵠⲆⲆ, gx.ⵠᐃⲆⲆⲆᐃⲆ, 8, 4, "w", 0.15);
            ux.ᐃⵠⵠᐃⲆⵠⵠ(ux.ΔΔΔᐃᐃ.ᐃⲆⲆⵠⲆ, gx.Ⲇᐃᐃⵠⵠᐃᐃ, 8, 3, "d", 0.09);
            ux.ⲆΔᐃᐃⵠⲆⲆ(ux.sample.ⵠⵠⲆⵠΔ, ux.ᐃᐃΔⲆ.ⵠⵠⲆⵠΔ, 0.15);
            ux.ⲆΔᐃᐃⵠⲆⲆ(ux.sample.ΔᐃⵠⲆⲆᐃⵠ, ux.ᐃᐃΔⲆ.ΔᐃⵠⲆⲆᐃⵠ, 0.2);
            ux.ⲆΔᐃᐃⵠⲆⲆ(ux.sample.ΔⲆⲆᐃⲆΔᐃ, ux.ᐃᐃΔⲆ.ΔⲆⲆᐃⲆΔᐃ, 1);
            ux.ᐃⵠⵠΔᐃ.ⲆΔΔⲆΔᐃⵠⲆⲆ = new hx(12, this.sample.ⲆᐃΔᐃⲆᐃⵠ, this.sample.ᐃΔⵠΔΔᐃᐃ, 5000, 0.05, 0.4, gx.ᐃΔⵠⵠΔⲆⵠ.ⲆⵠⵠᐃΔ, 3000, {
                x: Er.ᐃⵠᐃⵠⵠΔⵠ,
                y: Er.ⵠᐃΔⵠΔΔⵠ,
                w: qx.w,
                ⵠⵠΔ: qx.ⵠⵠΔ
            }, {
                x: Er.ᐃⵠᐃⵠⵠΔⵠ - 2300,
                y: Er.ⵠᐃΔⵠΔΔⵠ - 4000,
                w: qx.w,
                ⵠⵠΔ: qx.ⵠⵠΔ
            }, {
                x: Er.ᐃⵠᐃⵠⵠΔⵠ - 1500,
                y: Er.ⵠᐃΔⵠΔΔⵠ - 2000,
                w: qx.w,
                ⵠⵠΔ: qx.ⵠⵠΔ
            });
            ux.ᐃⵠⵠΔᐃ.ⲆᐃᐃΔⲆΔΔⲆⲆ = new hx(12, this.sample.ᐃᐃΔᐃⲆⲆⵠ, this.sample.ΔⵠⵠⵠΔΔᐃ, 5000, 0.03, 0.25, gx.ᐃΔⵠⵠΔⲆⵠ.ⲆⵠⵠᐃΔ, 3000, {
                x: 0,
                y: Er.ⵠᐃΔⵠΔΔⵠ + 800,
                w: Er.ᐃⵠᐃⵠⵠΔⵠ - 2300,
                ⵠⵠΔ: qx.ⵠⵠΔ
            }, {
                x: -100,
                y: Er.ⵠᐃΔⵠΔΔⵠ - 300,
                w: Er.ᐃⵠᐃⵠⵠΔⵠ - 100,
                ⵠⵠΔ: qx.ⵠⵠΔ
            }, {
                x: -100,
                y: Er.ⵠᐃΔⵠΔΔⵠ + 400,
                w: Er.ᐃⵠᐃⵠⵠΔⵠ - 1400,
                ⵠⵠΔ: qx.ⵠⵠΔ
            });
            ux.ᐃⵠⵠΔᐃ.ΔΔᐃⵠⲆΔᐃ = new hx(12, this.sample.ΔΔᐃᐃⵠᐃᐃ, this.sample.ΔΔΔΔⵠᐃⲆ, 5000, 0.01, 0.22, gx.ᐃΔⵠⵠΔⲆⵠ.ⲆⵠⵠᐃΔ, 3000, {
                x: -100,
                y: -100,
                w: qx.w + 200,
                ⵠⵠΔ: Er.ⵠᐃΔⵠΔΔⵠ - 1000
            }, {
                x: -100,
                y: -100,
                w: qx.w + 200,
                ⵠⵠΔ: Er.ⵠᐃΔⵠΔΔⵠ + 600
            }, {
                x: -100,
                y: -100,
                w: qx.w + 200,
                ⵠⵠΔ: Er.ⵠᐃΔⵠΔΔⵠ + 100
            });
            for (var a = 0; a < 8; a++) {
                ux.ⲆΔᐃΔ[a] = new lx(a);
            }
            ux.ⲆΔᐃΔ[0].ᐃᐃᐃⲆΔ(rx.ᐃΔΔⲆ);
            ux.loaded = 1;
        };
        this.ⲆⵠᐃⵠⲆᐃᐃᐃᐃ = function () {
            if (!this.transition && qx.ⵠⵠⵠⵠⲆ.now < 460000) {
                this.transition = 1;
            }
        };
        this.ΔΔⵠⲆΔ = function () {
            if (this.ΔⲆⲆⲆᐃ && this.loaded) {
                for (var a in ux.sample) {
                    var b = ux.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            ux.ᐃᐃΔⲆ[a].stop(b[c]);
                        }
                    } else {
                        ux.ᐃᐃΔⲆ[a].stop(b);
                    }
                }
                for (c = 0; c < ux.ⲆΔᐃΔ.length; c++) {
                    ux.ⲆΔᐃΔ[c].ⲆⵠⵠⵠⲆᐃⲆ();
                }
            }
        };
        this.select = function () {
            if (ux.ΔⲆⲆⲆᐃ) {
                ux.ΔΔⵠⲆΔ();
            } else {
                if (!ux.loaded) {
                    ux.ᐃᐃᐃⲆΔ();
                }
                ux.ⲆΔᐃΔ[0].ᐃΔΔⲆ = rx.ᐃΔΔⲆ;
                ux.ⲆΔᐃΔ[0].ⲆⵠⵠⲆᐃΔⵠ = 0;
                ux.ⲆⵠᐃⵠⲆᐃᐃᐃᐃ();
            }
            ux.ΔⲆⲆⲆᐃ = !ux.ΔⲆⲆⲆᐃ;
        };
    }();
    var vx = new function () {
        this.ΔⲆᐃⲆⲆᐃⲆ = function () {
            this.ⲆⲆⲆΔⵠ = 81;
            this.ᐃΔᐃⵠⵠ = 68;
            this.ᐃᐃᐃⵠΔ = 90;
            this.ⲆᐃΔΔⵠⵠᐃ = 83;
        };
        this.ⵠⲆⲆⵠⲆᐃⲆ = function () {
            this.ⲆⲆⲆΔⵠ = 65;
            this.ᐃΔᐃⵠⵠ = 68;
            this.ᐃᐃᐃⵠΔ = 87;
            this.ⲆⲆⲆⲆⲆ = 83;
        };
        this.ᐃⲆⲆᐃᐃ = 0;
        this.ⲆᐃΔΔⵠⵠᐃ = 1;
        this.ⲆᐃᐃⲆᐃΔᐃ = 49;
        this.ⵠΔΔⲆᐃⲆΔ = 50;
        this.ᐃᐃⵠⲆΔⲆⲆ = 51;
        this.ⵠⵠⵠⲆⲆΔᐃ = 52;
        this.ᐃᐃΔⵠᐃΔⵠⵠᐃ = 53;
        this.ⲆᐃᐃΔΔⲆⲆ = 17;
        this.ᐃⵠᐃⵠⲆΔⲆ = 37;
        this.ⲆᐃᐃⲆΔⲆⲆ = 39;
        this.ΔⲆΔΔⵠⵠΔ = 38;
        this.ⵠΔᐃⵠⲆⲆᐃ = 40;
        this.ᐃⲆⵠⲆⲆΔΔ = 32;
        this.ⲆᐃⵠⵠΔΔΔ = 82;
        this.ΔᐃⲆᐃΔⲆⵠ = 71;
        this.ΔⵠⵠⵠᐃΔⲆ = 86;
        this.ⲆΔᐃΔⵠⲆⲆ = 66;
        this.ⵠⲆⲆⵠⲆᐃⲆ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ᐃⲆⲆᐃᐃ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ᐃⲆⲆᐃᐃ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (b == this.ⲆⲆⲆΔⵠ || b == this.ᐃⵠᐃⵠⲆΔⲆ) {
                this.ⵠⵠᐃⵠᐃΔΔ();
            } else if (this.ᐃᐃᐃⵠΔ == b || b == this.ΔⲆΔΔⵠⵠΔ) {
                this.ΔⲆᐃⵠⵠᐃⲆ();
            } else if (b == this.ⲆᐃΔΔⵠⵠᐃ || this.ⲆΔⵠᐃⵠΔᐃᐃΔ == b) {
                this.ᐃᐃⲆᐃᐃᐃΔ();
            } else if (this.ᐃΔᐃⵠⵠ == b || b == this.ⲆᐃᐃⲆΔⲆⲆ) {
                this.ᐃⵠⲆⲆᐃⵠΔ();
            }
            this.keys[b] = this.ⲆᐃΔΔⵠⵠᐃ;
            return b;
        };
        this.ⵠⵠᐃⵠᐃΔΔ = function () {
            this.keys[this.ᐃΔᐃⵠⵠ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ⲆᐃᐃⲆΔⲆⲆ] = this.ᐃⲆⲆᐃᐃ;
        };
        this.ᐃⵠⲆⲆᐃⵠΔ = function () {
            this.keys[this.ⲆⲆⲆΔⵠ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ᐃⵠᐃⵠⲆΔⲆ] = this.ᐃⲆⲆᐃᐃ;
        };
        this.ᐃᐃⲆᐃᐃᐃΔ = function () {
            this.keys[this.ᐃᐃᐃⵠΔ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ΔⲆΔΔⵠⵠΔ] = this.ᐃⲆⲆᐃᐃ;
        };
        this.ΔⲆᐃⵠⵠᐃⲆ = function () {
            this.keys[this.ⲆⲆⲆⲆⲆ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ⵠΔᐃⵠⲆⲆᐃ] = this.ᐃⲆⲆᐃᐃ;
        };
        this.ⵠⲆⵠⵠᐃΔⲆ = function () {
            this.keys[this.ᐃΔᐃⵠⵠ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ⲆᐃᐃⲆΔⲆⲆ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ⲆⲆⲆΔⵠ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ᐃⵠᐃⵠⲆΔⲆ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ᐃᐃᐃⵠΔ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ΔⲆΔΔⵠⵠΔ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ⲆⲆⲆⲆⲆ] = this.ᐃⲆⲆᐃᐃ;
            this.keys[this.ⵠΔᐃⵠⲆⲆᐃ] = this.ᐃⲆⲆᐃᐃ;
        };
        this.ⵠΔᐃᐃⲆⲆᐃ = function () {
            return this.keys[this.ⲆⲆⲆΔⵠ] || this.keys[this.ᐃⵠᐃⵠⲆΔⲆ];
        };
        this.ΔⲆΔᐃΔⵠⲆ = function () {
            return this.keys[this.ᐃΔᐃⵠⵠ] || this.keys[this.ⲆᐃᐃⲆΔⲆⲆ];
        };
        this.ⵠⲆᐃΔᐃᐃΔ = function () {
            return this.keys[this.ᐃᐃᐃⵠΔ] || this.keys[this.ΔⲆΔΔⵠⵠΔ];
        };
        this.ⵠΔᐃⵠⵠⵠⵠ = function () {
            return this.keys[this.ⲆⲆⲆⲆⲆ] || this.keys[this.ⵠΔᐃⵠⲆⲆᐃ];
        };
        this.ᐃᐃⲆⲆᐃᐃᐃᐃⲆ = function () {
            return this.keys[this.ⲆᐃᐃΔΔⲆⲆ];
        };
        this.ⲆΔⲆⲆⵠΔⵠⲆⵠ = function () {
            return this.keys[this.ⲆᐃᐃⲆᐃΔᐃ];
        };
        this.ⵠⵠⵠⵠⵠⲆΔⵠᐃ = function () {
            return this.keys[this.ⵠΔΔⲆᐃⲆΔ];
        };
        this.ⵠⵠᐃⲆᐃⵠⵠΔΔ = function () {
            return this.keys[this.ᐃᐃⵠⲆΔⲆⲆ];
        };
        this.ⲆΔⲆᐃⵠⵠᐃΔⵠ = function () {
            return this.keys[this.ⵠⵠⵠⲆⲆΔᐃ];
        };
        this.ⲆᐃΔᐃΔᐃΔᐃΔ = function () {
            return this.keys[this.ᐃⲆⵠⲆⲆΔΔ];
        };
        this.ᐃⲆΔᐃᐃⵠᐃⵠΔ = function () {
            return this.keys[this.ⲆᐃⵠⵠΔΔΔ];
        };
        this.ⵠΔⵠᐃⵠⲆᐃΔΔ = function () {
            return this.keys[this.ΔᐃⲆᐃΔⲆⵠ];
        };
        this.ᐃⲆⲆⵠΔΔⲆᐃⵠ = function () {
            return this.keys[this.ΔⵠⵠⵠᐃΔⲆ];
        };
        this.ⲆᐃΔΔᐃᐃⵠⲆᐃ = function () {
            return this.keys[this.ⲆΔᐃΔⵠⲆⲆ];
        };
    }();
    var wx = new function () {
        this.ⲆᐃΔΔⵠⵠᐃ = 0;
        this.ᐃⲆⲆᐃᐃ = 1;
        this.IDLE = 2;
        this.ⵠᐃⵠᐃⵠⵠⲆ = 0;
        this.ᐃΔⵠⲆΔⵠⵠⲆⵠ = 1;
        this.ⵠⲆΔΔ = {
            y: 0,
            x: 0
        };
        this.ⲆⵠⲆⵠⲆⲆⲆ = 0;
        this.ΔⵠⲆⵠⲆⵠⵠ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ΔⲆⵠᐃ = this.ⵠᐃⵠᐃⵠⵠⲆ;
        this.down = function () {
            this.state = this.ⲆᐃΔΔⵠⵠᐃ;
        };
        this.up = function () {
            this.state = this.ᐃⲆⲆᐃᐃ;
        };
        this.ⵠᐃᐃ = function () {
            if (this.ⵠⲆΔΔ.x != this.ⲆⵠⲆⵠⲆⲆⲆ || this.ΔⵠⲆⵠⲆⵠⵠ != this.ⵠⲆΔΔ.y) {
                this.ⲆⵠⲆⵠⲆⲆⲆ = this.ⵠⲆΔΔ.x;
                this.ΔⵠⲆⵠⲆⵠⵠ = this.ⵠⲆΔΔ.y;
                return true;
            } else {
                return kk;
            }
        };
    }();
    var xx = 0;
    var yx = 0;
    var zx = new function (e, f, i) {
        this.ⲆⲆ = e;
        this.ⵠ = f;
        this.ΔⵠᐃⵠΔⵠⵠ = {
            translate: {
                y: 0,
                x: 0
            },
            style: document.getElementById("loading").style,
            ⵠᐃᐃ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ΔⵠᐃⵠΔⵠⵠ.style.position = "absolute";
        this.ΔⵠᐃⵠΔⵠⵠ.style.display = "inline-block";
        this.ΔⵠᐃⵠΔⵠⵠ.ⵠᐃᐃ();
        this.ⵠⲆⲆΔⲆ = _q;
        this.stop = function () {
            this.ⵠⲆⲆΔⲆ = va;
        };
        this.ΔΔᐃⲆⲆᐃΔ = {
            total: 1
        };
        var j = this;
        function k() { }
        var n = 0;
        function o(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ⲆΔⲆᐃⵠ = function () {
            j.ⵠᐃᐃ();
            if (++n == 40) {
                j.stop();
                k();
                return;
            }
            cj.setTimeout(j.ⲆΔⲆᐃⵠ, 33);
        };
        this.ΔΔⵠⲆΔ = function (a) {
            k = a;
            j.ⲆΔⲆᐃⵠ();
        };
        new Date().getTime();
        Object.keys(Mh).length;
        console.log(Uh, xn);
        for (var p in Mh) {
            if (o(Mh[p]) === 0) {
                0;
            }
        }
        console.log(undefined, undefined);
        function q() {
            if (this.ᐃΔᐃⵠⵠΔⲆ !== 0) {
                return this.ᐃΔᐃⵠⵠΔⲆ;
            } else {
                this.ᐃΔᐃⵠⵠΔⲆ = 2;
                this.src = this.Δⵠⵠᐃᐃ;
                return 0;
            }
        }
        function l(a) {
            this.ᐃΔᐃⵠⵠΔⲆ = 1;
        }
        var g = 0;
        function s() {
            console.log(undefined);
            if (g !== 1) {
                g = 1;
                console.log(undefined);
                if (ut !== Jb) {
                    ut();
                }
                Jb();
                var a = og.ΔⵠⲆⵠⵠΔⵠ("server");
                if (a !== null) {
                    ⲆᐃⲆᐃ.ᐃΔⵠᐃⵠᐃᐃ = 1;
                    ⲆᐃⲆᐃ.ⵠⵠΔΔⲆ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                ⲆᐃⲆᐃ.ΔⲆⵠᐃΔⵠⵠⲆⲆ();
                setTimeout(i, 100);
            }
        }
        function d() {
            let a = function () {
                ⲆᐃⲆᐃ.ⲆᐃᐃΔⲆⵠⵠ(s);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(d, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function v() {
            this.ⵠᐃⲆⲆᐃΔΔ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠᐃⲆⲆᐃΔΔ}`, this);
            if (this.ⵠᐃⲆⲆᐃΔΔ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ⵠᐃⲆⲆᐃΔΔ;
            var c = this.src;
            var d = o(c) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var d in b) {
                    if (c.indexOf(b[d]) !== -1) {
                        Mh[d] = new Image();
                        Mh[d].onload = l;
                        Mh[d].onerror = v;
                        Mh[d].ⵠᐃⲆⲆᐃΔΔ = a;
                        Mh[d].src = c;
                        break;
                    }
                }
            }, d);
        }
        function c(a) {
            for (var b in Mh) {
                var c = Mh[b];
                if (typeof c === "string" && o(c) === a) {
                    Mh[b] = new Image();
                    Mh[b].ᐃΔᐃⵠⵠΔⲆ = 0;
                    Mh[b].ⵠᐃⲆⲆᐃΔΔ = 0;
                    Mh[b].onload = l;
                    Mh[b].onerror = v;
                    Mh[b].ΔΔᐃΔᐃⵠⲆ = q;
                    Mh[b].Δⵠⵠᐃᐃ = c;
                }
            }
        }
        c(1);
        c(0);
        Cu(1, "l", 20, "#000");
        d();
        Zm();
        this.ⵠᐃᐃ = function () {
            this.ΔⵠᐃⵠΔⵠⵠ.translate.x = (no - 500) / 2;
            this.ΔⵠᐃⵠΔⵠⵠ.translate.y = (so - 150) / 2;
            var a = 2500 / (40 - n + 1) - 48;
            this.ΔⵠᐃⵠΔⵠⵠ.translate.y -= a;
            this.ΔⵠᐃⵠΔⵠⵠ.ⵠᐃᐃ();
        };
        this.ΔⵠᐃⵠΔⵠⵠ.ⵠᐃᐃ();
        this.ⵠᐃΔⵠ = function () {
            try {
                kp();
            } catch (a) { }
            this.ⵠᐃᐃ();
        };
    }(eo, io, function () {
        bp();
        tx = new ax(eo, io);
        (nx = new Zw(eo, io)).ⵠⲆᐃⲆⵠⵠᐃᐃⵠ();
        sx = new $w(eo, io);
        qx = new Gf();
        rx = new Ow();
        zx.ΔΔⵠⲆΔ(function () {
            zx.ΔⵠᐃⵠΔⵠⵠ.style.display = "none";
            nx.ΔⲆⲆⲆᐃ();
        });
    });
    cj.onbeforeunload = function () {
        if (tx.ⵠⲆⲆΔⲆ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    Vq();
    function Ax(a) {
        return cj.String.fromCharCode(a);
    }
    function Bx() {
        try {
            cj.Widget.adsRefresh();
        } catch (a) { }
    }
    (function b(a) {
        cj.requestAnimationFrame(b);
        yx = (a - xx) / 1000;
        xx = a;
        yx = yx > 1 ? 1 : yx;
        if (tx.ⵠⲆⲆΔⲆ) {
            tx.ⵠᐃΔⵠ();
        } else {
            io.clearRect(0, 0, no, so);
            if (zx.ⵠⲆⲆΔⲆ) {
                zx.ⵠᐃΔⵠ();
            } else if (nx.ⵠⲆⲆΔⲆ) {
                nx.ⵠᐃΔⵠ();
            } else if (sx.ⵠⲆⲆΔⲆ) {
                sx.ⵠᐃΔⵠ();
            }
        }
    })(0);
    var Cx = 0;
    function Dx() {
        Ex.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", _q);
        Ex.send();
    }
    var Ex = new XMLHttpRequest();
    function Fx(b, c, d, e, f, g) {
        const a = ~(b & 3902) & (b | 3902);
        const i = ~(c & 39270) & (c | 39270);
        const j = ((10159 + d) * 2147483629 + 2147483587) % 2147483647;
        const h = function (b, c, d, e, f, g) {
            const a = (16 << (e >> 16 & 255)) + (8 << (e >> 8 & 255)) + (0 << (e >> 24 & 255)) + (24 << (e & 255));
            const i = (26704 + f) % 65292;
            const j = g ^ 23826;
            const h = Vw((b | 23830) & ~(b & 23830), (2147483587 + (62465 + c) * 2147483629) % 2147483647, (1013904223 + (d + 65053) * 1664525) % 4294967296);
            Cb(a, i, j);
            return ~(h & 8768) & 8768 | ~(h & 8768) & h;
        }(a, i, j, ~(e & 1716) & 1716 | ~(e & 1716) & e, (1 + (f + 36832) * 22695477) % 4294967296, (8 << (g >> 16 & 255)) + (24 << (g >> 8 & 255)) + (16 << (g & 255)) + (0 << (g >> 24 & 255)));
        Vw(a, i, j);
        return h ^ 55716;
    }
    Ex.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    let Gx;
    let Hx = jj;
    const Ix = gk;

    /*
          *****************
          *SCRIPT VARIABLE*
          *****************
  */

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
    };

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function LouxInterval() {
        if (ⲆᐃⲆᐃ.ΔᐃⵠΔ && ⲆᐃⲆᐃ.ΔᐃⵠΔ.readyState === 1 && rx && rx.ᐃⵠΔᐃᐃ) {
            let myPlayer = qx.ᐃⲆⵠⲆ[rx.ᐃΔΔⲆ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !rx.ⲆⲆΔⵠ.ⲆΔⵠ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang <= 15; ang++) {
                                ⲆᐃⲆᐃ.ΔᐃⵠΔ.send(JSON.stringify([15, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                ⲆᐃⲆᐃ.ΔᐃⵠΔ.send(JSON.stringify([15, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]));
                            }
                        }
                        ⲆᐃⲆᐃ.ΔᐃⵠΔ.send(JSON.stringify([15, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    gk = async function () {
        Hx = lj(Lj(9));
        Gx = vk(Hx);
        if (Ix) {
            Ix();
        }

        await window.gapi.load("auth2", Wx);

        let MainHackInterval;
        setTimeout(() => {
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80);
        }, 7000);

        window.Utils.LoadHack();
    };
    var Jx = "https://token.starve.io/";
    var Kx = "https://token2.starve.io/";
    var Lx = 0;
    var Mx = 1;
    var Nx = 4;
    var Ox = undefined;
    var Px = Wr;
    var Qx = undefined;
    var Rx = 0;
    cj.ⵠᐃᐃⵠⵠΔⵠ = function () {
        Rx = 1;
    };
    var Sx = {
        ΔⲆⵠⵠᐃⵠⵠΔΔⵠⵠ: "ACCESS_TOKEN"
    };
    var Tx = document.createElement("script");
    Tx.type = "text/javascript";
    Tx.async = true;
    Tx.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    Tx.addEventListener("load", function (a) {
        cj.XPayStationWidget.init(Sx);
        cj.XPayStationWidget.on("status-done", ay);
    }, jt);
    document.getElementsByTagName("head")[0].appendChild(Tx);
    cj.fbAsyncInit = function () {
        cy();
        console.log(fq);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var Ux = Yd;
    var Vx = undefined;
    function Wx() {
        cj.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (Ux = a).isSignedIn.listen(Xx);
            Ux.currentUser.listen(Yx);
            if (Ux.isSignedIn.get()) {
                Ux.signIn();
            }
            Zx();
        });
    }
    function Xx(a) { }
    function Yx(a) {
        if (rs === Px && Vx !== jj && (Px = Vx.getAuthResponse().id_token) !== undefined) {
            Ox = Lx;
            Qx = Vx.getBasicProfile().getId();
            cj.ⵠᐃᐃⵠⵠΔⵠ();
            return;
        }
        if (a !== Wr && a.isSignedIn() === true) {
            Qx = (Vx = a).id;
            Qx = Vx.getBasicProfile().getId();
            Px = Vx.getAuthResponse().id_token;
            Ox = Lx;
            cj.ⵠᐃᐃⵠⵠΔⵠ();
        }
    }
    function Zx() {
        if (Ux) {
            Vx = Ux.currentUser.get();
        }
    }
    function $x(a, b) {
        if (b > nx.ΔᐃᐃⵠΔ) {
            nx.ᐃⵠⲆᐃ(nx.ⵠⲆⲆⲆⵠ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", Jx + "buyKit?token=" + Px + "&userid=" + Qx + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    nx.ΔᐃᐃⵠΔ -= b;
                    nx.ΔΔⲆΔᐃ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function _x(a, b) {
        if (nx.Δⵠᐃⵠᐃ <= 0) {
            if (b > nx.ΔᐃᐃⵠΔ) {
                nx.ᐃⵠⲆᐃ(nx.ⵠⲆⲆⲆⵠ);
            } else {
                nx.Δⵠᐃⵠᐃ = 2;
                nx.ΔᐃⵠᐃⵠⲆⵠ = 0;
                nx.ⵠᐃΔⵠⵠᐃⵠ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", Jx + "buySpin?token=" + Px + "&userid=" + Qx + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            nx.ⵠΔⵠΔᐃⲆᐃⵠⵠ(Math.PI * a.rand * 2, a.type, a.id);
                            nx.ΔᐃᐃⵠΔ -= b;
                        } else {
                            nx.Δⵠᐃⵠᐃ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    function ay() {
        var a = new XMLHttpRequest();
        a.open("GET", Jx + "claimBread?userid=" + Qx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    nx.ΔᐃᐃⵠΔ = b;
                }
            }
        };
        a.send();
    }
    function by(a) {
        if (Qx) {
            var b = new XMLHttpRequest();
            b.open("GET", Jx + "xsolla?userid=" + Qx + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    Sx.access_token = b.responseText;
                    cj.XPayStationWidget.init(Sx);
                    cj.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function cy() {
        if (cj.FB) {
            cj.FB.init({
                cookie: gg,
                xfbml: true,
                version: "v15.0",
                appId: "642017356260407"
            });
        }
        if (Qx === undefined) {
            (function () {
                try {
                    if (cj.FB && cj.FB.getUserID()) {
                        Qx = cj.FB.getUserID();
                        if (Px === ei) {
                            cj.FB.getLoginStatus(function () {
                                Ox = Mx;
                                Px = cj.FB.getAuthResponse().accessToken;
                                cj.ⵠᐃᐃⵠⵠΔⵠ(Qx);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    Qx = Vx.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function dy() {
        if (nx.ΔᐃᐃⵠΔ >= 300 || nx.ΔᐃᐃΔᐃⲆᐃ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", Jx + "changeNickname?token=" + Px + "&userid=" + Qx + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            nx.ΔᐃᐃⵠΔ -= a;
                        }
                        nx.ΔᐃᐃΔᐃⲆᐃ = 1;
                        nx.ᐃⵠⲆᐃ(nx.ⵠᐃⲆᐃΔ);
                    }
                };
                b.send();
            }
        }
    }
    function fy(b, c, d, e) {
        b = b === Pl ? nx.ⵠⵠⵠΔⲆᐃⵠ : b;
        c = c === undefined ? nx.ΔⲆΔᐃᐃⵠᐃ : c;
        d = d === undefined ? nx.ΔΔΔΔᐃΔᐃ : d;
        e = yk === e ? nx.ᐃᐃⲆⲆΔᐃⵠ : e;
        if (nx.ⵠⵠⵠΔⲆᐃⵠ !== b || c !== nx.ΔⲆΔᐃᐃⵠᐃ || d !== nx.ΔΔΔΔᐃΔᐃ || nx.ᐃᐃⲆⲆΔᐃⵠ !== e) {
            nx.ⵠⵠⵠΔⲆᐃⵠ = b;
            nx.ΔⲆΔᐃᐃⵠᐃ = c;
            nx.ΔΔΔΔᐃΔᐃ = d;
            nx.ᐃᐃⲆⲆΔᐃⵠ = e;
            if (e === nx.ⲆᐃⲆⲆⲆΔⵠ) {
                e = "0";
            } else if (e === nx.ᐃᐃᐃⵠᐃⲆⵠ) {
                e = "1";
            } else if (e === nx.ⵠⲆΔⵠᐃᐃⵠ) {
                e = "2";
            } else if (e === nx.ⲆΔⲆⵠⲆⵠⲆ) {
                e = "3";
            } else if (nx.ⲆᐃⵠⲆⵠᐃᐃ === e) {
                e = "4";
            } else if (e === nx.ᐃᐃⲆⵠᐃᐃⵠ) {
                e = "5";
            }
            if (c === nx.ⵠᐃΔⵠᐃⵠⲆ) {
                c = "total";
            } else if (c === nx.ⲆⲆᐃᐃⵠᐃᐃ) {
                c = "normal";
            } else if (c === nx.ⵠⵠᐃΔⵠⵠⵠ) {
                c = "zombie";
            } else if (c === nx.ΔⵠΔΔⵠⲆΔ) {
                c = "vampire";
            } else if (c === nx.ⵠⵠᐃΔΔⵠⵠ) {
                c = "forest";
            }
            if (nx.ᐃᐃᐃᐃΔⲆᐃ === b) {
                b = "all";
            }
            if (b === nx.ΔⲆⲆᐃⵠⵠⵠ) {
                b = "week";
            }
            if (b === nx.ⵠᐃΔⵠΔΔᐃ) {
                b = "today";
            }
            if (nx.ⵠⲆᐃⵠⵠΔᐃ === d) {
                d = "kill";
            } else if (d === nx.ⲆⲆᐃᐃΔᐃΔ) {
                d = "score";
            } else if (d === nx.ΔᐃⲆⲆᐃᐃⵠ) {
                d = "time";
            }
            var f = new XMLHttpRequest();
            f.open("GET", Jx + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
            f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            f.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
                    for (var a = JSON.parse(f.responseText), b = "", c = 0; c < a.length; c++) {
                        ᐃⲆΔⲆⲆ = a[c];
                        var d = ᐃⲆΔⲆⲆ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = cj.decodeURIComponent(cj.escape(cj.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += nx.ⲆᐃⵠⲆⲆⲆⲆ(ᐃⲆΔⲆⲆ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ᐃⲆΔⲆⲆ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ᐃⲆΔⲆⲆ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ᐃⲆΔⲆⲆ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            f.send();
        }
    }
    function gy(a) {
        var b = new XMLHttpRequest();
        b.open("GET", Jx + "setRegion?token=" + Px + "&userid=" + Qx + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    nx.ᐃⵠⲆᐃ(nx.ᐃⲆᐃᐃΔ);
                } else {
                    nx.ᐃⵠⲆᐃ(nx.ᐃⵠΔΔᐃ);
                }
            }
        };
        b.send();
    }
})();
