(function () {
  const jg = window;
  var d = 79;
  if (d === 0) {
    d = 210;
  }
  Math.floor(247[247 .ⵠᐃᐃΔΔᐃᐃ]);
  var Hg = 123;
  if (Hg > 6) {
    Hg = 50;
  }
  var Ig = 185;
  if (Ig === 4) {
    Ig = 95;
  }
  Math.floor(238[238 .ⵠⲆᐃⵠΔΔⲆ]);
  let Th = 131;
  const aj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += jg.String.fromCharCode(a[c] ^ Th++ % 255);
    }
    return b;
  };
  var a = 61;
  if (a >= 2) {
    a = 254;
  }
  var bj = 233;
  if (bj === 13) {
    bj = 132;
  }
  var cj = 83;
  if (cj === 13) {
    cj = 146;
  }
  var dj = 250;
  if (dj == 1) {
    dj = 80;
  }
  var ej = 170;
  if (ej > 5) {
    ej = 181;
  }
  var fj = 135;
  if (fj == 14) {
    fj = 100;
  }
  var gj = 21;
  if (gj == 6) {
    gj = 182;
  }
  const hj = 255;
  const v = 19;
  const m = 18;
  const c = 15;
  const p = 2;
  const C = -8;
  const T = true;
  const ij = undefined;
  const f = T;
  const z = false;
  const w = -4;
  const y = 17;
  const k = 256;
  const A = 20;
  const x = 2;
  const J = 14;
  var M = jg.Math.acos;
  jg.Math.acos = jg.Math.asin;
  jg.Math.asin = M;
  var B = jg.Math.cos;
  jg.Math.cos = jg.Math.sin;
  jg.Math.sin = B;
  const D = 1 << 2;
  const I = 100;
  const E = 10;
  const P = 6;
  const Q = 12;
  const S = 1;
  const F = 16;
  const R = 8;
  const j = 13;
  const L = 3;
  const G = 5;
  const W = 6;
  const N = 2048;
  const q = 11;
  const O = 4;
  const H = 7;
  const U = T;
  const Y = 0;
  const K = 1 << 12;
  const X = 0;
  const V = 1;
  const Z = 19;
  const _ = {};
  _.get = function (a, b) {
    if (b !== "ΔᐃⵠΔⲆⵠⵠ") {
      const a = function () {
        jg.addEventListener("mousemove", function () {
          a();
        });
      };
      a();
    }
    return jg.Reflect.get(...arguments);
  };
  const ee = 4;
  const ie = 12;
  const ne = 12;
  const oe = 1;
  let ae;
  let te;
  let jj = ij;
  let kj = ij;
  let lj = ij;
  const mj = 6;
  const ue = 15;
  let be;
  let nj;
  let oj = ij;
  const pj = 11;
  let ce = "_";
  let qj = [];
  const Ce = 14;
  let Te;
  const rj = 9;
  let ze;
  let sj;
  let tj = ij;
  let uj = ij;
  const vj = 256;
  let Ae;
  let wj = ij;
  const xj = 18;
  let Me;
  let yj;
  let zj = ij;
  let Aj = ij;
  const Bj = 13;
  const Se = 9;
  const Qe = f;
  const _e = 3;
  const Fe = 17;
  let Re;
  const Cj = 12;
  const Le = z;
  const Ge = 15;
  let We;
  const Dj = 20;
  const qe = Le;
  let Oe = ij;
  const Ej = U;
  const Ue = 15;
  const Ye = 7;
  let Ke;
  const Fj = 16;
  let Ve = ij;
  const Gj = ij;
  let $e;
  let Hj = Gj;
  const Ij = Gj;
  let ti = Gj;
  let Jj = ij;
  const Kj = 255;
  let ai = ij;
  let Lj = ij;
  const Mj = 100;
  const hi = 8;
  let gi;
  let Nj;
  let Oj;
  let Pj = Ij;
  const Qj = 10;
  const vi = 4;
  let mi;
  const Rj = 14;
  const pi = 255;
  let Ci = ij;
  const Sj = 11;
  const fi = 7;
  let zi = Ij;
  let Tj = Ij;
  const Uj = 2;
  let Pi = Ij;
  const Vj = 16;
  const Ai = 2;
  const xi = 3;
  let Ji = ij;
  const Wj = 15;
  let Bi;
  let Xj = ij;
  let Yj = Gj;
  let Zj = Gj;
  let $j = Ij;
  let _j = Gj;
  let ak = ij;
  const bk = 5;
  let Ri = ij;
  const ck = 19;
  let Li = Ij;
  const dk = 9;
  let Wi;
  let ek = Ij;
  const fk = 14;
  let Oi = 0;
  const gk = 1;
  const Ui = Qe;
  if (!jg.WebAssembly || !jg.WebAssembly.instantiate) {
    ⲆⲆᐃᐃΔⲆΔⲆⵠ();
  }
  const Yi = z;
  const Ki = 256;
  const Xi = {
    Date: Date
  };
  const Vi = 8;
  const Zi = 15;
  jg.WebAssembly.instantiate(Uint8Array.from(jg.atob(""), function (a) {
    return a.charCodeAt(0);
  }), Xi).then(async function (a) {
    kj = a.instance;
    jj = kj.exports;
    ae = jj.memory;
    te = ae.buffer;
    lj = jj.__pin;
    be = jj.__unpin;
    nj = jj.__new;
    oj = jj.__collect;
    ce = "_";
    for (let b = 0; b < 31; b++) {
      qj[b] = jj[ce + b];
    }
    Te = jj.__rtti_base;
    tj = new Float32Array(te);
    ze = new Float64Array(te);
    sj = new BigUint64Array(te);
    uj = new Uint32Array(te);
    wj = new Uint16Array(te);
    Ae = new Uint8Array(te);
    zj = new BigInt64Array(te);
    Me = new Int32Array(te);
    yj = new Int16Array(te);
    Aj = new Int8Array(te);
    ak = qj[4];
    Bi = qj[6];
    Wi = qj[20];
    Oj = qj[9];
    mi = qj[13];
    Oe = qj[18];
    ai = qj[3];
    We = qj[5];
    $e = qj[0];
    Tj = qj[27];
    Pj = qj[15];
    ti = qj[30];
    Lj = qj[29];
    Zj = qj[1];
    Hj = qj[7];
    _j = qj[16];
    zi = qj[24];
    Xj = qj[2];
    Ji = qj[17];
    Nj = qj[8];
    Ve = qj[25];
    Pi = qj[11];
    Ci = qj[14];
    Re = qj[22];
    Jj = qj[28];
    $j = qj[10];
    Ke = qj[12];
    Ri = qj[19];
    Li = qj[23];
    Yj = qj[21];
    gi = qj[26];
    Oi = 1;
    if (ek) {
      await ek();
    }
  });
  const $i = Ij;
  const hk = function (a) {
    return uj[(Te + 4 >>> 2) + (a << 1)];
  };
  function ik(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const jk = 0;
  function kk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return tj;
        case 3:
          return ze;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Aj;
          } else {
            return Ae;
          }
        case 1:
          if (b) {
            return yj;
          } else {
            return wj;
          }
        case 2:
          if (b) {
            return Me;
          } else {
            return uj;
          }
        case 3:
          if (b) {
            return zj;
          } else {
            return sj;
          }
      }
    }
  }
  const lk = 7;
  function mk(b) {
    const c = uj[b + C >>> 2];
    const d = hk(c);
    const e = ik(d);
    let f = d & D ? b : uj[b + 4 >>> 2];
    const g = d & 2 ? uj[b + 12 >>> 2] : uj[f + w >>> 2] >>> e;
    return kk(e, d & N, d & K).subarray(f >>>= e, f + g);
  }
  const nk = 8;
  function ok(b, c, d, e) {
    const f = b ^ 23775;
    const g = (8 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (24 << (d & 255)) + (0 << (d >> 24 & 255));
    const a = ~(e & 42745) & 42745 | ~(e & 42745) & e;
    const h = function (a, b) {
      const c = (a + 57152) % 65399;
      const d = (12345 + (62536 + b) * 1103515245) % 2147483648;
      const e = Cb(c, d, c, d, c);
      $r(d, c, d, c, d, c);
      return e ^ 61941;
    }(f, c ^ 5408);
    Zf(g, a, f);
    return h ^ 30918;
  }
  const pk = 12;
  const qk = 20;
  const rk = 18;
  const sk = 9;
  const tk = 17;
  const uk = 256;
  const vk = 19;
  const wk = "development";
  const xk = 17;
  const yk = 13;
  const zk = 6;
  const Ak = "production";
  const Bk = 9;
  const Ck = 3;
  const Dk = 100;
  function Ek(b, c) {
    const d = b ^ 47063;
    const e = ~(c & 62821) & 62821 | ~(c & 62821) & c;
    const f = ix(d, e, d, e, d);
    const g = function (b, c, d, e) {
      const f = ~(b & 4843) & (b | 4843);
      const i = (24 << (c >> 24 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
      const a = d ^ 26600;
      const j = (2147483587 + (e + 37574) * 2147483629) % 2147483647;
      const k = function (c, e, f, i, j, k) {
        const a = ((c + 48538) * 214013 + 2531011) % 4294967296;
        const m = (0 << (e >> 8 & 255)) + (16 << (e >> 24 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e & 255));
        const n = ~(f & 57732) & 57732 | ~(f & 57732) & f;
        const h = (8 << (i >> 8 & 255)) + (16 << (i >> 24 & 255)) + (24 << (i & 255)) + (0 << (i >> 16 & 255));
        const g = (1013904223 + (59202 + j) * 1664525) % 4294967296;
        const l = (56126 + k) % 65388;
        const o = zo(a, m, n, h);
        const b = $r(g, l, a, m, n, h);
        return (50444 + (o ^ b)) % 65297;
      }(f, i, a, j, f, i);
      const h = Dp(a, j, f);
      return ((41434 + (k ^ h)) * 2147483629 + 2147483587) % 2147483647;
    }(e, d, e, d);
    return (0 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255));
  }
  function Fk(b, c, d, e, f, i) {
    const a = (b | 38932) & ~(b & 38932);
    const j = ~(f & 32769) & f | ~(f & 32769) & 32769;
    const k = i ^ 60071;
    const h = fs(a, ~(c & 41006) & c | ~(c & 41006) & 41006, ~(d & 9748) & d | ~(d & 9748) & 9748, (e + 35871) % 65432);
    yo(j, k, a);
    return (h | 34570) & ~(h & 34570);
  }
  const Gk = 255;
  function Hk(a) {
    this.ⵠΔᐃᐃ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⵠΔᐃᐃ - 1));
  }
  const Ik = 10;
  Hk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠΔᐃᐃ;
    return this.state / this.ⵠΔᐃᐃ;
  };
  const Jk = 11;
  Hk.prototype.ΔᐃⲆⲆⲆΔⲆ = function (a) {
    this.state = a;
  };
  ⵠⵠᐃⵠⵠᐃᐃ = 10000;
  const Kk = 255;
  const Lk = 16;
  const Mk = 12;
  ⲆⲆᐃⲆΔⲆⲆ = [];
  const Nk = 3;
  const Ok = 15;
  var Pk = new Hk();
  const Qk = f;
  Pk.ΔᐃⲆⲆⲆΔⲆ(new Date().getTime());
  for (var Rk = 0; ⵠⵠᐃⵠⵠᐃᐃ > Rk; Rk++) {
    ⲆⲆᐃⲆΔⲆⲆ.push(Pk.random());
  }
  const Sk = 0;
  function Tk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = tn(a, m, n, h, g, l);
      tn(a, m, n, h, g, l);
      kn(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = Yn(a, j, f, i, a);
    tn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  function Uk(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = xn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = xn(a, k, m, h, g);
      Vk(l, a, k, m, h);
      cn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    gn(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function Vk(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 63080;
    const j = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = Zk(f, i, a, j);
      const h = Jn(f, i, a, j);
      Tk(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(i, a, j, k);
    const l = Yn(h, i, a, j, k);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ eo(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  const Wk = 12;
  const Xk = 4;
  function Yk(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = Xn(j, a);
    const l = Tk(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = Vn(c, d, c);
        nn(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ Ml(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = Qn(a, j, f, i, a);
      Xn(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  function Zk(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  const $k = 18;
  function _k(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = Dn(i, a);
    Qn(j, k, h, i, a);
    cn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  function Ml(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = Zk(i, a, j, k);
    Qn(h, i, a, j, k);
    gn(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  const Fm = 19;
  const Gm = Gj;
  function Un(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = un(e, f, i, e, f);
      const j = eo(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = cn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = Vk(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = en(a, m, n, h);
                const b = Qn(g, l, a, m, n);
                const d = en(h, g, l, a);
              })(g, e, f, g, e, f);
              Jn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            kn(d, c, d, c, d);
            Zk(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          nn(j, k, h, i);
          const l = _k(a, j, k, h, i);
        })(c, d, c, d, c);
        Dn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    Jn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ en(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const po = 1;
  const uo = 6;
  const Zp = 20;
  function en(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = xn(f, i, a, j, f);
      const h = Yk(i, a, j, f, i);
      const g = dn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    Jn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ xn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  function tn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Ln(a, j, k, h, g) ^ Jn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ kn(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  function nn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = Uk(f, g, a, i, f, g);
    Jn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ gn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const on = 2;
  const an = 1;
  const rn = 13;
  const sn = Le;
  const hn = 7;
  function gn(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (Zk(a, j, d ^ 53590, e ^ 36633) ^ Zk(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  const ln = 20;
  function un(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = gn(i, a, j, k, h, i);
    const l = Zk(a, j, k, h);
    Vn(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  const bn = 5;
  function dn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = gn(d, e, d, e, d, e);
    const g = gn(d, e, d, e, d, e);
    Zk(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  const vn = 8;
  const mn = 11;
  function cn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = eo(a, m, n, h, g, l);
    Ml(a, m, n, h, g);
    Zk(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  const pn = 19;
  const Cn = 9;
  const Tn = 14;
  const fn = Ej;
  const zn = Gj;
  const yn = 100;
  const wn = 3;
  const Pn = 256;
  function kn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = gn(i, a, j, k, h, i);
    const l = cn(a, j, k, h, i, a);
    Zk(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const An = 12;
  function xn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = Vk(i, a, j, k, h);
    eo(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ Yn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function Jn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = Dn(f, i);
    Dn(a, j);
    Yn(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  const Mn = 4;
  const Bn = 19;
  function Dn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Ln(c, d, c, d, c) ^ Qn(d, c, d, c, d))) % 65357 ^ Zk(c, d, c, d))) * 22695477) % 4294967296;
  }
  const In = 15;
  const En = 255;
  const Sn = 1;
  function Qn(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = eo(i, a, j, k, h, i);
    eo(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ Zk(j, k, h, i))) * 214013) % 4294967296;
  }
  const _n = 13;
  const Fn = 14;
  const Rn = 6;
  const jn = 8;
  function Ln(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = Qn(j, a, k, m, h);
    const l = kn(j, a, k, m, h);
    Zk(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  const Gn = String.fromCharCode;
  const Wn = Gn(101);
  const Nn = Gn(118);
  const qn = Gn(97);
  const On = Gn(108);
  const Hn = 0;
  function Yn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = Ml(j, a, k, m, h);
    const l = Xn(j, a);
    Ml(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const Kn = 17;
  function Xn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = _k(d, e, d, e, d);
    const g = Ln(e, d, e, d, e);
    un(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  function Vn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = _k(e, f, g, e, f);
    const h = _k(g, e, f, g, e);
    _k(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  const Zn = 4;
  const $n = U;
  function eo(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = dn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = dn(a, j);
    dn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  const io = 20;
  function to(a, b, c) {
    Ri(Ct, a, b, c);
    return ((84 + (zr(Eb[0], Eb[1], Eb[2], Eb[0], Eb[1], Eb[2]) ^ function (b, c, d, e, f, g) {
      Bi(Ct, b, c, d, e, f, g);
      const a = xr(Eb[0], Eb[1], Eb[2], Eb[3]);
      const h = function (b, c, d, e, f) {
        Zj(Ct, b, c, d, e, f);
        const g = function (b, c, d, e, f, g) {
          _j(Ct, b, c, d, e, f, g);
          const a = xr(Eb[0], Eb[1], Eb[2], Eb[3]);
          const h = function (a, b) {
            $j(Ct, a, b);
            const c = ts(Eb[0], Eb[1]);
            Gc(Eb[0], Eb[1], Eb[0], Eb[1]);
            return ~(c & 49114) & 49114 | ~(c & 49114) & c;
          }(Eb[4], Eb[5]);
          return ((67 + (a ^ h)) * 75 + 74) % 65537;
        }(Eb[0], Eb[1], Eb[2], Eb[3], Eb[4], Eb[0]);
        const a = ts(Eb[1], Eb[2]);
        return (16 << ((g ^ a) >> 8 & 255)) + (8 << ((g ^ a) >> 16 & 255)) + (0 << ((g ^ a) >> 24 & 255)) + (24 << ((g ^ a) & 255));
      }(Eb[4], Eb[5], Eb[0], Eb[1], Eb[2]);
      return (8 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) >> 24 & 255));
    }(Eb[0], Eb[1], Eb[2], Eb[0], Eb[1], Eb[2]))) * 8121 + 28411) % 134456;
  }
  ⵠᐃΔᐃ = {
    ⲆᐃⵠΔⵠΔᐃ: () => new Promise((a, b) => {
      jg.grecaptcha.ready(function () {
        jg.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Wf) {
            a(0);
          } else {
            console.log(Ij);
            b(c);
          }
        });
      });
    }),
    ⲆᐃⲆⵠⵠⲆΔᐃⵠ: function (a) {
      jg.open(a, "_blank").focus();
    },
    ⲆⲆᐃᐃⵠᐃᐃ: function (a) {
      jg.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⵠᐃΔΔᐃⵠⵠ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return Le;
        }
      }
      return $n;
    },
    ᐃᐃΔⵠⲆⵠⵠⵠⲆ: function (a, b) {
      if (a.length != b.length) {
        return qe;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⵠᐃΔΔᐃⵠⵠ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return Yi;
        }
      }
      return Qe;
    },
    ⲆᐃᐃᐃⲆⲆΔ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ᐃᐃⵠΔᐃⲆᐃ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⵠΔⵠⵠᐃΔᐃᐃᐃ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠΔΔΔⲆⲆⲆ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⵠⲆⵠⵠΔΔᐃ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ⲆΔΔᐃΔΔᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⵠᐃⵠΔⲆⵠⲆ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ⵠΔᐃⵠΔΔⲆ: function (a, b) {
      return Math.asin(this.ⵠΔΔΔⲆⲆⲆ(a, b) / (this.ⵠⲆⵠⵠΔΔᐃ(a) * this.ⵠⲆⵠⵠΔΔᐃ(b))) * this.sign(this.ⲆΔΔᐃΔΔᐃ(a, b));
    },
    ⵠⲆⵠⵠⵠⲆⲆ: function (a) {
      ΔⲆΔⲆⵠⲆⵠ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ΔⲆΔⲆⵠⲆⵠ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ᐃⲆᐃΔⵠⲆⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ᐃᐃᐃⲆⲆⲆⲆ: function (a, b) {
      return this.ⵠΔᐃⵠΔΔⲆ({
        x: 1,
        y: 0
      }, this.ᐃᐃⵠΔᐃⲆᐃ(a, b));
    },
    ᐃⲆΔⵠ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⵠⲆᐃⲆᐃΔⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⵠΔⵠⲆᐃΔΔ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ΔΔᐃⵠΔⲆᐃ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ᐃᐃⵠⵠᐃⲆⲆⲆΔ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ΔⲆⲆΔⲆⵠⵠⵠⵠ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠΔⲆᐃⵠ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⵠᐃᐃⵠⲆⵠⵠ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ΔⲆᐃⵠⵠᐃᐃ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ⵠⵠⵠⲆⵠΔⵠ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⵠⲆⲆⲆⲆⵠⲆⵠΔ: function (b, c, d) {
      var e = this.ⵠⵠⵠⲆⵠΔⵠ();
      var f = this.ⵠⵠⵠⲆⵠΔⵠ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ΔᐃⲆᐃΔΔΔᐃᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ⲆΔΔ = d;
    },
    ᐃⵠᐃⵠⵠⲆⵠⵠΔ: function (a) {
      ᐃᐃᐃⵠ = [];
      ᐃᐃᐃⵠ.push.apply(ᐃᐃᐃⵠ, a);
      var b = [];
      while (ᐃᐃᐃⵠ.length > 0) {
        var c = Math.floor(Math.random() * ᐃᐃᐃⵠ.length);
        b.push(ᐃᐃᐃⵠ[c]);
        ᐃᐃᐃⵠ.splice(c, 1);
      }
      return b;
    },
    ᐃΔⵠⵠΔΔⵠ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃⲆΔⵠᐃᐃⵠ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ΔΔⲆⲆᐃⵠⲆ: function (a) {
      return a * (2 - a);
    },
    ΔⲆⵠΔᐃΔⵠ: function (a) {
      return --a * a * a + 1;
    },
    ⲆⲆΔⲆᐃ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ᐃᐃⲆᐃᐃⵠᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⵠΔⵠᐃⲆΔΔⵠⵠ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ⲆᐃⲆⲆⵠΔᐃ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⲆΔᐃⵠⲆΔⵠ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ΔΔⲆⵠ: function (b, c, d, e, f, g) {
      this.ᐃΔⲆ = b;
      this.ⲆᐃΔ = c;
      this.max = d;
      this.min = e;
      this.ΔᐃⲆᐃⲆⲆⵠ = f;
      this.ⲆΔⵠΔⲆΔΔ = g;
      this.ⵠⲆᐃⵠᐃ = 0;
      this.ᐃᐃⵠ = function () {
        if (this.ᐃΔⲆ) {
          if ((a = this.ⲆᐃΔ + Ox * this.ΔᐃⲆᐃⲆⲆⵠ) > this.max) {
            this.ⲆᐃΔ = this.max;
            this.ᐃΔⲆ = false;
            return true;
          }
          this.ⲆᐃΔ = a;
        } else {
          var a;
          if ((a = this.ⲆᐃΔ - Ox * this.ⲆΔⵠΔⲆΔΔ) < this.min) {
            this.ⲆᐃΔ = this.min;
            this.ᐃΔⲆ = true;
          } else {
            this.ⲆᐃΔ = a;
          }
        }
      };
      return false;
    },
    ΔᐃⲆΔⲆ: function (b, c, d, e, f, g) {
      this.ⲆⲆᐃⲆⲆ = b;
      this.Δⵠⵠᐃᐃ = c;
      this.ᐃⵠΔⲆᐃ = d;
      this.ᐃⲆⵠⲆᐃ = e;
      this.x = f;
      this.ΔⵠⵠᐃΔ = g;
      this.ᐃᐃⵠΔᐃΔᐃ = function () {
        this.x = this.ᐃΔΔⵠᐃᐃΔᐃΔ;
        this.Δⵠⵠᐃᐃ = 0;
      };
      this.ΔᐃⵠΔⲆ = function (a) {
        if (a !== this.ΔⵠⵠᐃΔ) {
          this.ΔⵠⵠᐃΔ = a;
          this.ᐃⲆⵠⲆᐃ = this.x;
          this.Δⵠⵠᐃᐃ = 0;
        }
        if (this.ΔⵠⵠᐃΔ !== this.x) {
          this.Δⵠⵠᐃᐃ += Ox;
          if (this.Δⵠⵠᐃᐃ > this.ᐃⵠΔⲆᐃ) {
            this.x = this.ΔⵠⵠᐃΔ;
          } else {
            var b = this.ⲆⲆᐃⲆⲆ(this.Δⵠⵠᐃᐃ / this.ᐃⵠΔⲆᐃ);
            this.x = this.ᐃⲆⵠⲆᐃ + (this.ΔⵠⵠᐃΔ - this.ᐃⲆⵠⲆᐃ) * b;
          }
        }
      };
    },
    ⵠᐃΔΔⵠⲆᐃ: function (b, c, d, e, f, g, a, i, j) {
      this.ⲆⲆᐃⲆⲆ = b;
      this.Δⵠⵠᐃᐃ = c;
      this.ᐃⵠΔⲆᐃ = d;
      this.ᐃⲆⵠⲆᐃ = e;
      this.ΔΔⵠⲆⲆ = f;
      this.x = g;
      this.y = a;
      this.ΔⵠⵠᐃΔ = i;
      this.ΔΔⵠΔΔΔᐃ = j;
      this.ΔᐃⵠΔⲆ = function (a) {
        if (a.x != this.ΔⵠⵠᐃΔ || a.y != this.ΔΔⵠΔΔΔᐃ) {
          this.ΔⵠⵠᐃΔ = a.x;
          this.ΔΔⵠΔΔΔᐃ = a.y;
          this.ᐃⲆⵠⲆᐃ = this.x;
          this.ΔΔⵠⲆⲆ = this.y;
          this.Δⵠⵠᐃᐃ = 0;
        }
        if (this.ΔⵠⵠᐃΔ != this.x || this.ΔΔⵠΔΔΔᐃ != this.y) {
          this.Δⵠⵠᐃᐃ += Ox;
          if (this.Δⵠⵠᐃᐃ > this.ᐃⵠΔⲆᐃ) {
            this.x = this.ΔⵠⵠᐃΔ;
            this.y = this.ΔΔⵠΔΔΔᐃ;
          } else {
            var b = this.ⲆⲆᐃⲆⲆ(this.Δⵠⵠᐃᐃ / this.ᐃⵠΔⲆᐃ);
            this.x = this.ᐃⲆⵠⲆᐃ + (this.ΔⵠⵠᐃΔ - this.ᐃⲆⵠⲆᐃ) * b;
            this.y = this.ΔΔⵠⲆⲆ + (this.ΔΔⵠΔΔΔᐃ - this.ΔΔⵠⲆⲆ) * b;
          }
        }
      };
    },
    ⲆΔᐃΔΔΔᐃ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ᐃᐃΔΔⲆⲆⵠ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ΔᐃⵠⵠΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ᐃΔⵠⵠⵠᐃⵠ: function (a, b) {
      if (a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⲆΔΔ) {
        return Ui;
      } else {
        return Yi;
      }
    },
    ΔΔᐃᐃⲆⵠⵠ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ⲆᐃⲆΔⵠ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⲆΔᐃⵠⲆⵠΔ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const no = 10;
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ᐃⵠΔⵠⵠⵠΔⲆΔ;
  };
  const oo = 15;
  const ao = String.fromCharCode;
  const ro = ao(101);
  const so = ao(118);
  const ho = ao(97);
  const go = ao(108);
  const lo = 16;
  const bo = 255;
  function vo(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function mo(a) {
    return jg.String.fromCharCode(a);
  }
  function co(a, b, c) {
    Re(Ct, a, b, c);
    const d = zr(Eb[0], Eb[1], Eb[2], Eb[0], Eb[1], Eb[2]);
    const e = xr(Eb[0], Eb[1], Eb[2], Eb[0]);
    return (24 << ((d ^ e) & 255)) + (8 << ((d ^ e) >> 8 & 255)) + (16 << ((d ^ e) >> 16 & 255)) + (0 << ((d ^ e) >> 24 & 255));
  }
  function Co(b, c, d, e, f) {
    const i = (b | 21682) & ~(b & 21682);
    const a = c ^ 62604;
    const j = d ^ 63535;
    const k = (8 << (e & 255)) + (0 << (e >> 16 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 24 & 255));
    const h = ~(f & 14985) & f | ~(f & 14985) & 14985;
    const g = vr(i, a, j, k, h, i);
    const l = Rb(a, j, k, h);
    return (24 << ((g ^ l) & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (0 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255));
  }
  const To = 13;
  const fo = $i;
  function zo(b, c, d, e) {
    const f = (b | 57773) & ~(b & 57773);
    const g = ((61597 + c) * 22695477 + 1) % 4294967296;
    const a = ((62742 + d) * 214013 + 2531011) % 4294967296;
    const h = (8 << (e >> 16 & 255)) + (24 << (e & 255)) + (0 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    return (1013904223 + (29281 + (yo(f, g, a) ^ function (c, d, e, f, i, j) {
      const a = ~(c & 44995) & (c | 44995);
      const k = d ^ 64944;
      const m = (1 + (62202 + e) * 22695477) % 4294967296;
      const h = i ^ 1768;
      const g = (2531011 + (j + 3623) * 214013) % 4294967296;
      const l = zx(a, k, m, (f | 60188) & ~(f & 60188));
      const n = wp(h, g, a, k, m);
      return (1 + (65193 + (l ^ n)) * 22695477) % 4294967296;
    }(h, f, g, a, h, f))) * 1664525) % 4294967296;
  }
  function yo(b, c, d) {
    const e = ~(b & 4482) & b | ~(b & 4482) & 4482;
    const f = (c + 63222) % 65379;
    const g = (d | 57526) & ~(d & 57526);
    const a = $r(e, f, g, e, f, g);
    $r(e, f, g, e, f, g);
    return ~(a & 63779) & 63779 | ~(a & 63779) & a;
  }
  (function (a) {
    var b = z;
    if (typeof ΔⲆΔⵠⵠⲆⵠ == "function" && ΔⲆΔⵠⵠⲆⵠ.ᐃⲆⵠⵠⵠⵠⵠᐃΔ) {
      ΔⲆΔⵠⵠⲆⵠ(a);
      b = true;
    }
    if (typeof ᐃⵠΔⵠΔΔⵠ === "object") {
      ΔⲆⵠⵠⵠΔⲆⵠᐃ.exports = a();
      b = true;
    }
    if (!b) {
      var c = jg.ΔᐃⲆΔ;
      var d = jg.ΔᐃⲆΔ = a();
      d.ΔᐃᐃΔⵠᐃⲆᐃⲆ = function () {
        jg.ΔᐃⲆΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; arguments.length > a; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ᐃᐃΔΔⵠⲆⲆ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⲆⵠᐃᐃⲆⲆΔᐃΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; g < n.length; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⵠⲆⵠⵠⲆᐃᐃⲆⵠ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ᐃᐃΔΔⵠⲆⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ΔᐃᐃᐃᐃⲆⵠⵠᐃ = a;
      return d;
    }(function () { });
  });
  const wo = 13;
  function Po(b, c, d) {
    const e = (12345 + (b + 58781) * 1103515245) % 2147483648;
    const f = (c | 53227) & ~(c & 53227);
    const g = ((23631 + d) * 2147483629 + 2147483587) % 2147483647;
    const a = function (b, c, d, e, f, i) {
      const a = b ^ 45281;
      const j = (1013904223 + (e + 52944) * 1664525) % 4294967296;
      const k = ~(f & 6621) & f | ~(f & 6621) & 6621;
      const h = (8 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (24 << (i & 255)) + (0 << (i >> 16 & 255));
      const g = ns(a, c ^ 64632, d ^ 48645);
      fs(j, k, h, a);
      return ~(g & 18448) & (g | 18448);
    }(e, f, g, e, f, g);
    Zf(e, f, g);
    return ~(a & 8336) & 8336 | ~(a & 8336) & a;
  }
  var ko = document.getElementById("game_canvas");
  const Ao = 5;
  const xo = sn;
  var Jo = ko.getContext("2d");
  var Mo = ko.width;
  const aq = 14;
  var Do = ko.height;
  const bq = 18;
  var Eo = ko.width / 2;
  const cq = 10;
  const Qo = 100;
  var _o = ko.height / 2;
  const dq = 255;
  var Ro = {
    x: Eo,
    y: _o
  };
  var eq = 1;
  var fq = 1;
  var gq = -1;
  const hq = 12;
  var No = "J" + tq;
  const iq = 4;
  const Oo = 9;
  const Ho = $n;
  var Uo = "S" + Jq;
  var jq = jg;
  const Ko = 7;
  var Xo;
  const kq = 2;
  var Zo = (ua = "O") + "N";
  var lq;
  var mq = 0;
  var ia = jq;
  const ta = 16;
  const na = Le;
  const oa = 1;
  const aa = 19;
  Uo = "N";
  var ra;
  var nq = "J";
  const oq = 13;
  const la = 3;
  var ua = "O" + tq;
  const pq = 15;
  const da = 8;
  var va = ia;
  const ma = 11;
  var ca;
  const qq = 6;
  const Ca = 255;
  const Ta = 17;
  const fa = 7;
  const za = 20;
  const ya = 256;
  const wa = 10;
  const Pa = 12;
  const ka = 13;
  var Aa = va;
  const xa = 9;
  const Ja = sn;
  Zo = "N" + undefined;
  const Ma = 100;
  var Ba = Aa;
  const Da = 0;
  var Ia;
  const rq = 256;
  const Sa = Gj;
  var Qa;
  const sq = 20;
  const Fa = 100;
  const Ra = 6;
  var ja = Ba;
  const La = 16;
  var Ga;
  var tq;
  const uq = 6;
  const qa = Yi;
  var Oa = ja;
  const Ha = f;
  const Ua = ij;
  var Ya;
  var vq = Oa;
  const wq = 10;
  const Va = 8;
  nq = "O";
  const Za = 7;
  const $a = 256;
  const xq = 3;
  const yq = 15;
  const zq = 14;
  var Aq = "S";
  const Bq = 13;
  const Cq = 18;
  var Dq = vq = Oa;
  function Eq(a) {
    return jg.String.fromCharCode(a);
  }
  var Fq;
  (function () {
    const a = {
      ⲆᐃⲆᐃ: 13902811,
      ΔᐃΔᐃⲆⲆⲆ: 11679000,
      ⲆⲆⲆᐃⲆᐃⵠ: 3922246,
      ΔⲆⲆⲆ: 12186959
    };
  })();
  var Gq = Dq;
  const Hq = 11;
  const Iq = 6;
  var Jq = "J" + Aq;
  ko.oncontextmenu = function () {
    return sn;
  };
  const Kq = 4;
  const Lq = 5;
  const Mq = 6;
  const Nq = 8;
  function Oq(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠᐃᐃⲆᐃⵠⲆ = 1;
    return b;
  }
  No = "J";
  const Pq = 5;
  const Qq = $i;
  const Rq = 7;
  const Sq = 16;
  lq = Jq + (nq += No = Uo);
  const Tq = 19;
  ua = Zo;
  const Uq = 1;
  const Vq = 2;
  Zo = tq;
  const Wq = 100;
  tq = Jq;
  const Xq = 14;
  const Yq = 2;
  const Zq = Ja;
  const $q = 18;
  const _q = 4;
  ua = Jq;
  const ar = 255;
  ca = Ia = Jq + nq;
  Uo = nq + No;
  const br = 255;
  Qa = Xo = lq;
  const cr = Qe;
  ua = Jq + nq;
  Ga = lq;
  Zo = Jq + nq;
  Ya = ra = Xo;
  const dr = 16;
  const er = 17;
  nq = tq = Jq;
  const fr = 1;
  const hr = 3;
  const ir = 9;
  Aq = lq;
  Fq = Xo;
  const jr = 12;
  const kr = 15;
  No = ua;
  var lr = jg.devicePixelRatio || 1;
  var mr = Jo.ᐃⵠᐃᐃΔΔⲆⲆΔ || Jo.ΔΔⲆᐃⲆⵠⲆᐃᐃ || Jo.ⵠᐃⲆⲆⲆΔΔⲆⲆ || Jo.ⲆᐃΔⵠⵠⲆΔᐃᐃ || Jo.ⵠΔᐃⲆΔᐃΔᐃΔ || 1;
  function nr() {
    if (ko.width != jg.innerWidth) {
      ko.width = jg.innerWidth;
      Mo = ko.width;
      Eo = ko.width / 2;
    }
    if (jg.innerHeight != ko.height) {
      ko.height = jg.innerHeight;
      Do = ko.height;
      _o = ko.height / 2;
    }
    Ro = {
      x: Eo,
      y: _o
    };
    var a = ko.width;
    var b = ko.height;
    fq = gq === -1 ? lr / mr : gq;
    ko.width = a * fq;
    ko.height = fq * b;
    ko.style.width = a + "px";
    ko.style.height = b + "px";
    Jo.scale(fq, fq);
    if (Gx) {
      Gx.ᐃⵠⲆ.ΔⵠΔⲆⵠᐃΔ = a;
      Gx.ᐃⵠⲆ.ⵠⵠᐃᐃΔΔΔ = b;
    }
    if (Px.ΔⲆΔⵠⵠ) {
      Px.ᐃᐃⵠ();
    } else if (Ex.ΔⲆΔⵠⵠ) {
      Ex.ᐃᐃⵠ();
    } else if (Jx.ΔⲆΔⵠⵠ) {
      Jx.ᐃᐃⵠ();
    } else if (Hx.ΔⲆΔⵠⵠ) {
      Hx.ᐃᐃⵠ();
    }
  }
  var pr = document.getElementById("game_body");
  const qr = 17;
  pr.ondragstart = function () {
    return qa;
  };
  const rr = 0;
  const sr = 20;
  const tr = 10;
  pr.ondrop = function () {
    return false;
  };
  pr.onresize = nr;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !jg.requestAnimationFrame; ++c) {
      jg.requestAnimationFrame = jg[a[c] + "RequestAnimationFrame"];
      jg.cancelAnimationFrame = jg[a[c] + "CancelAnimationFrame"] || jg[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!jg.requestAnimationFrame) {
      jg.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var f = Math.max(0, 16 - (e - b));
        var a = jg.setTimeout(function () {
          c(e + f);
        }, f);
        b = e + f;
        return a;
      };
    }
    jg.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const ur = Gj;
  function vr(b, c, d, e, f, i) {
    const a = (b + 50691) % 65506;
    const j = ((42387 + c) * 214013 + 2531011) % 4294967296;
    const k = ~(d & 9283) & 9283 | ~(d & 9283) & d;
    const h = (1013904223 + (e + 42615) * 1664525) % 4294967296;
    const g = (2995 + f) % 65455;
    const l = (24 << (i & 255)) + (16 << (i >> 8 & 255)) + (0 << (i >> 24 & 255)) + (8 << (i >> 16 & 255));
    return ((25631 + (Kr(a, j, k, h, g, l) ^ Kr(a, j, k, h, g, l))) * 1103515245 + 12345) % 2147483648;
  }
  function wr(a, b) {
    ai(Ct, a, b);
    const c = xb(Eb[0], Eb[1], Eb[0], Eb[1], Eb[0]);
    const d = xb(Eb[1], Eb[0], Eb[1], Eb[0], Eb[1]);
    return (16 << ((c ^ d) >> 8 & 255)) + (0 << ((c ^ d) >> 16 & 255)) + (8 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) & 255));
  }
  function xr(b, c, d, e) {
    Tj(Ct, b, c, d, e);
    const f = wr(Eb[0], Eb[1]);
    const g = wr(Eb[2], Eb[3]);
    return (0 << ((f ^ g) >> 0 & 255)) + (8 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255));
  }
  function zr(b, c, d, e, f, g) {
    mi(Ct, b, c, d, e, f, g);
    return (52909 + (function (a, b) {
      ak(Ct, a, b);
      const c = Bb(Eb[0], Eb[1], Eb[0]);
      (function (a, b, c) {
        Oe(Ct, a, b, c);
        const d = function (b, c, d, e, f, g) {
          gi(Ct, b, c, d, e, f, g);
          const a = Ib(Eb[0], Eb[1], Eb[2], Eb[3]);
          const h = Gc(Eb[4], Eb[5], Eb[0], Eb[1]);
          return (41392 + (a ^ h)) % 65525;
        }(Eb[0], Eb[1], Eb[2], Eb[0], Eb[1], Eb[2]);
        const e = xb(Eb[0], Eb[1], Eb[2], Eb[0], Eb[1]);
      })(Eb[1], Eb[0], Eb[1]);
      return ~(c & 17949) & (c | 17949);
    }(Eb[0], Eb[1]) ^ xb(Eb[2], Eb[3], Eb[4], Eb[5], Eb[0]))) % 65290;
  }
  const Ar = String.fromCharCode;
  const Br = Ar(101);
  const Dr = Ar(118);
  const Er = Ar(97);
  const Fr = Ar(108);
  function Gr(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Hr(a) {
    return jg.String.fromCharCode(a);
  }
  const Ir = 256;
  const Jr = 6;
  function Kr(b, c, d, e, f, i) {
    const a = (b | 59149) & ~(b & 59149);
    const j = (16 << (c >> 8 & 255)) + (0 << (c & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255));
    const k = (2147483587 + (f + 57231) * 2147483629) % 2147483647;
    const h = (i + 30910) % 65322;
    const g = Rb(a, j, ~(d & 52801) & 52801 | ~(d & 52801) & d, ((e + 13431) * 1664525 + 1013904223) % 4294967296);
    const l = Rb(k, h, a, j);
    return (24 << ((g ^ l) >> 8 & 255)) + (16 << ((g ^ l) & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (0 << ((g ^ l) >> 16 & 255));
  }
  var Lr = navigator.language || navigator.userLanguage;
  const Mr = 8;
  var Nr = -new Date().getTimezoneOffset() / 60;
  var Or = "Europe";
  const Pr = 11;
  const Qr = 9;
  const Rr = Ui;
  const Sr = 255;
  var Tr = "South America";
  const Ur = 5;
  const Vr = 13;
  var Wr = Or;
  const Xr = 10;
  const Yr = 15;
  if (Nr >= -2 && Nr <= 2) {
    Wr = Or;
  } else if (Nr > 2 && Nr <= 5) {
    Wr = "Russia";
  } else if (Nr > 5 && Nr <= 9) {
    Wr = "Asia";
  } else if (Nr > 9) {
    Wr = "Australia";
  } else if (Nr >= -5 && Nr < -2) {
    Wr = Lr === "pt-BR" || Lr === "pt-br" || Lr === "pt" || Lr === "pt-pt" ? Tr : "North America";
  } else if (Nr < -5) {
    Wr = Lr === "pt-BR" || Lr === "pt-br" || Lr === "pt" || Lr === "pt-pt" ? Tr : "West America";
  }
  const Zr = 20;
  function $r(b, c, d, e, f, i) {
    const a = ~(b & 6022) & (b | 6022);
    const j = (45709 + c) % 65445;
    const k = (0 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (16 << (e & 255)) + (8 << (e >> 8 & 255));
    const h = (2531011 + (f + 32944) * 214013) % 4294967296;
    const g = (16 << (i & 255)) + (0 << (i >> 8 & 255)) + (24 << (i >> 24 & 255)) + (8 << (i >> 16 & 255));
    const l = Dp(a, j, ((d + 48534) * 22695477 + 1) % 4294967296);
    Co(k, h, g, a, j);
    return l ^ 6755;
  }
  const _r = Ja;
  function as(a, b) {
    Yj(Ct, a, b);
    const c = co(Eb[0], Eb[1], Eb[0]);
    (function (a, b, c, d) {
      Pi(Ct, a, b, c, d);
      const e = function (b, c, d, e, f, g) {
        Ke(Ct, b, c, d, e, f, g);
        const a = to(Eb[0], Eb[1], Eb[2]);
        const h = Ib(Eb[3], Eb[4], Eb[5], Eb[0]);
        return (0 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 8 & 255));
      }(Eb[0], Eb[1], Eb[2], Eb[3], Eb[0], Eb[1]);
      co(Eb[2], Eb[3], Eb[0]);
    })(Eb[1], Eb[0], Eb[1], Eb[0]);
    return (c | 28898) & ~(c & 28898);
  }
  const bs = 10;
  const cs = 2;
  const ds = 1;
  const es = 100;
  function fs(b, c, d, e) {
    const f = ~(b & 40102) & 40102 | ~(b & 40102) & b;
    const i = (24 << (c >> 8 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (8 << (c >> 24 & 255));
    const a = (d | 33552) & ~(d & 33552);
    const j = ~(e & 64818) & 64818 | ~(e & 64818) & e;
    const k = vr(f, i, a, j, f, i);
    const h = Co(a, j, f, i, a);
    return (24 << ((k ^ h) >> 16 & 255)) + (0 << ((k ^ h) >> 24 & 255)) + (16 << ((k ^ h) >> 8 & 255)) + (8 << ((k ^ h) & 255));
  }
  var Hk = {
    ᐃΔᐃⲆΔᐃᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ΔⲆᐃᐃⵠ = function (a) {
        c = a || Math.floor((b - 1) * Math.random());
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const gs = 18;
  const hs = Ua;
  const is = Qe;
  const js = 14;
  const ls = 17;
  const ms = 19;
  function ns(b, c, d) {
    const e = ~(b & 35305) & (b | 35305);
    const f = (0 << (c & 255)) + (8 << (c >> 24 & 255)) + (16 << (c >> 8 & 255)) + (24 << (c >> 16 & 255));
    const g = (0 << (d >> 24 & 255)) + (24 << (d & 255)) + (8 << (d >> 8 & 255)) + (16 << (d >> 16 & 255));
    const a = Fb(e, f, g, e, f);
    Zf(g, e, f);
    return ~(a & 53588) & 53588 | ~(a & 53588) & a;
  }
  const os = z;
  const ps = 7;
  const qs = 6;
  const rs = 19;
  const ss = 18;
  function ts(a, b) {
    Xj(Ct, a, b);
    return ((152 + (co(Eb[0], Eb[1], Eb[0]) ^ Gc(Eb[1], Eb[0], Eb[1], Eb[0]))) * 48271 + 0) % 2147483647;
  }
  var us = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  var ws = 0;
  let xs = {
    ⵠᐃΔⲆΔ: ["#133A2B", "#042b30"],
    ΔΔᐃⵠⵠⵠΔⵠᐃ: ["#EBF2F0", "#136167"],
    ⵠᐃᐃⵠⲆΔΔ: ["#4EB687", "#187484"],
    ΔⵠᐃᐃᐃΔΔ: ["#664516", "#13474C"],
    ⲆⲆΔᐃΔⲆΔ: ["#FCEFBB", "#0F4D48"],
    ΔⲆΔᐃᐃΔΔ: ["#C1AA7E", "#0F423D"],
    ⲆⵠⵠⲆⲆΔΔ: ["#594837", "#163A3A"],
    ᐃⲆᐃΔΔⵠⲆ: ["#A5D6D6", "#539CA0"],
    ᐃⵠΔΔⲆ: ["#0B6A84", "#09373F"],
    ᐃⵠΔⵠΔⲆᐃ: ["#2A8B9B", "#0F464C"],
    ᐃⵠΔᐃⵠⵠⵠ: ["#A9D6D3", "#115E60"],
    ⵠⲆᐃⲆΔΔΔ: ["#ECF7F9", "#539CA0"],
    ⵠᐃⵠⲆⲆᐃᐃ: ["#FFF", "#FFF"],
    ⲆΔⲆⵠⵠᐃⵠ: ["#FFF", "#FFF"],
    ᐃᐃᐃΔᐃᐃᐃ: ["#1C9BA4", "#00272F"],
    ⲆⵠⵠΔΔ: ["#2D2017", "#031C1E"],
    ΔΔΔ: 0,
    ⵠᐃⲆ: 1,
    ⲆⲆⵠΔᐃⲆⵠΔⲆ: 2300,
    ᐃᐃΔΔⲆⵠⵠΔⵠ: 2290,
    ⲆᐃⲆᐃⵠⲆᐃ: 34,
    ᐃⵠᐃⵠΔⵠⲆ: 5,
    ⲆⲆⲆⲆᐃᐃΔ: 68,
    ᐃⵠΔⲆⲆΔⲆ: 34,
    ᐃⵠΔⵠⲆⵠΔ: 5,
    ⵠᐃⲆΔⲆᐃⵠ: 1,
    ⲆⵠⵠⲆΔⲆⵠ: 0.6,
    ⵠᐃᐃᐃΔⵠⲆ: 0.25,
    ⵠΔⲆᐃᐃⵠΔ: 50,
    ⵠⵠⲆΔΔⲆΔ: 10,
    ⲆⲆΔⲆⵠᐃⲆ: 75,
    ᐃᐃΔⵠᐃΔᐃ: 20,
    ⵠⲆⲆΔΔᐃΔ: 5,
    ⵠⲆᐃⲆⵠ: 0,
    ᐃⲆΔⵠᐃ: 1,
    ΔⲆⵠΔⲆ: 2,
    Ⲇⵠᐃᐃᐃ: 3,
    ⵠᐃⲆⲆᐃ: 4,
    ⲆⲆⲆΔΔ: 5,
    ᐃΔᐃᐃⲆ: 6,
    Ⲇᐃᐃⵠᐃ: 7,
    ⲆΔⲆⵠΔ: 8,
    ᐃᐃⲆⲆⲆ: 9,
    ⲆⲆⵠⲆⲆ: 10,
    ᐃⵠⲆΔᐃ: 11,
    ΔᐃⵠᐃⲆ: 12,
    ⵠᐃⵠⵠΔ: 13,
    ⵠΔⲆⲆᐃ: 14,
    ᐃⵠᐃⵠⲆ: 15,
    ⵠᐃⵠⲆᐃ: 16,
    ΔⵠᐃⵠΔ: 17,
    ᐃⵠᐃᐃⲆ: 18,
    ᐃⲆΔⵠⵠ: 19,
    ⵠᐃⵠΔⲆ: 20,
    ⵠΔⲆᐃΔ: 21,
    ⲆΔΔᐃⵠ: 22,
    ΔⵠⵠⲆⲆ: 23,
    ᐃΔᐃΔΔ: 24,
    ᐃⲆⲆⵠΔ: 25,
    ⵠΔΔΔΔ: 26,
    ⲆᐃⵠΔΔ: 27,
    Δⵠᐃᐃⵠ: 28,
    ⲆⲆⲆⲆ: 29,
    ⵠΔⵠⵠᐃ: 30,
    ⲆᐃΔⵠⲆ: 31,
    ΔⵠᐃᐃⲆ: 32,
    ⵠⲆⲆⲆΔ: 33,
    ᐃⲆⵠᐃΔ: 34,
    ΔΔΔⲆⲆ: 35,
    ⲆᐃᐃⵠⲆ: 36,
    ⵠᐃΔΔᐃ: 37,
    ⵠΔⲆⵠⵠ: 38,
    ⵠΔⵠⵠΔ: 39,
    ⲆⲆᐃᐃΔ: 40,
    ᐃᐃⵠΔΔ: 41,
    ⵠᐃᐃΔⵠ: 42,
    ΔⲆΔⲆⵠ: 43,
    ⲆᐃΔΔⲆ: 44,
    ⲆⵠⲆΔΔ: 45,
    ⵠⲆΔⵠᐃ: 46,
    ΔⵠΔᐃⵠ: 47,
    ΔⵠⲆᐃⲆ: 48,
    ⲆⵠⲆᐃΔ: 49,
    ⵠⲆⵠⵠᐃ: 50,
    ⵠᐃΔⵠⵠ: 51,
    ⵠⲆΔᐃⲆ: 52,
    ⲆⵠΔᐃΔ: 53,
    ⲆᐃΔᐃΔ: 54,
    ᐃⵠᐃᐃⵠ: 55,
    ⵠⵠⵠⵠΔ: 56,
    ΔᐃΔΔΔ: 57,
    ᐃΔᐃΔⲆ: 58,
    ΔⵠΔⵠⲆ: 59,
    ᐃᐃᐃᐃⵠ: 60,
    ΔΔⲆΔⲆ: 61,
    ᐃⵠΔᐃᐃ: 62,
    ⲆⵠⲆⲆⵠ: 63,
    ⲆⵠⲆⵠᐃ: 64,
    ⵠΔΔΔᐃ: 65,
    ⵠⵠⵠⲆⲆ: 66,
    ⵠᐃⵠᐃΔ: 67,
    ΔΔⵠⵠⲆ: 68,
    ⵠⵠⲆᐃΔ: 69,
    ⲆΔᐃⵠΔ: 70,
    ⲆⲆΔⲆⲆ: 71,
    ⵠⲆⲆⲆᐃ: 72,
    ⲆⲆⲆΔⵠ: 73,
    ΔⵠᐃᐃΔ: 74,
    ᐃΔΔⲆⵠ: 75,
    ΔⵠᐃⲆᐃ: 76,
    ⲆᐃⲆᐃΔ: 77,
    ᐃᐃⵠⲆⵠ: 78,
    ΔᐃⲆⵠᐃ: 79,
    ⵠᐃⲆⲆΔ: 80,
    ΔⲆᐃⲆⵠ: 81,
    ⵠΔᐃⵠⵠ: 82,
    ᐃΔΔᐃⵠ: 83,
    ⵠⵠⵠᐃᐃ: 84,
    ΔⵠΔⲆⵠ: 85,
    ΔΔΔΔΔ: 86,
    ⵠⵠᐃⲆⲆ: 87,
    ΔᐃⲆⲆᐃ: 88,
    ᐃⲆᐃΔᐃ: 89,
    ΔⵠᐃⵠⲆ: 90,
    ⲆⲆⲆΔⲆ: 91,
    ⲆᐃΔⲆΔ: 92,
    Δᐃᐃᐃⵠ: 93,
    ΔΔⲆⵠᐃ: 94,
    ⲆᐃⵠⲆΔ: 95,
    ⲆⲆΔⵠᐃ: 96,
    ⵠⵠⲆⲆⲆ: 97,
    ⵠⲆⲆᐃᐃ: 98,
    ⲆΔΔⲆⲆ: 99,
    ᐃᐃⵠᐃⵠⲆⵠᐃᐃ: 100,
    ⵠⵠΔΔᐃ: 101,
    ΔᐃᐃΔᐃ: 102,
    ΔΔⲆⲆΔ: 103,
    ᐃΔⲆᐃⲆ: 104,
    ⵠⲆⵠⵠⵠ: 105,
    ᐃⵠΔⵠᐃ: 106,
    ΔⲆΔⵠΔ: 107,
    ᐃΔᐃⵠⵠ: 108,
    ΔⲆⵠᐃ: 109,
    ⲆⲆⲆᐃⵠ: 110,
    ᐃⵠⵠᐃ: 111,
    ⵠⲆᐃᐃ: 112,
    ΔⵠⲆⵠΔⵠΔ: 113,
    ⵠⵠᐃⲆⵠ: 114,
    ᐃΔᐃⲆⲆΔⵠ: 115,
    ⵠⵠᐃⵠΔ: 116,
    ΔΔᐃΔⵠ: 117,
    ⵠΔⲆᐃΔΔⲆ: 118,
    ᐃⵠΔⵠⲆⵠᐃ: 119,
    ⲆΔΔᐃᐃ: 120,
    ᐃΔⲆᐃ: 121,
    ᐃᐃΔᐃᐃ: 122,
    ⵠᐃΔΔⵠ: 123,
    ⲆΔⵠᐃΔΔⵠ: 124,
    ⲆΔⵠᐃᐃ: 125,
    ⲆᐃᐃΔⵠ: 126,
    ΔΔⲆⲆᐃ: 127,
    ΔⲆⵠⲆⲆ: 128,
    ⵠⵠⵠΔΔ: 129,
    ⵠⵠⲆⲆΔ: 130,
    ⵠΔⲆⲆⵠ: 131,
    ΔΔᐃⲆⵠ: 132,
    ΔᐃᐃᐃⲆ: 133,
    ⲆᐃΔᐃᐃ: 134,
    ᐃᐃᐃⵠᐃ: 135,
    ΔᐃⲆΔⵠ: 136,
    ᐃᐃⵠⲆᐃ: 137,
    ᐃⵠⵠᐃⲆ: 138,
    ΔⵠⵠᐃⲆ: 139,
    ΔⵠⵠⲆᐃΔⵠ: 140,
    ΔΔⲆᐃⲆ: 141,
    ΔΔΔΔΔΔⵠ: 142,
    ⲆⲆⵠᐃⲆΔⲆ: 143,
    ⵠⲆᐃⲆᐃⵠᐃ: 144,
    ⲆΔⵠⲆᐃⲆᐃ: 145,
    ⲆⲆⲆᐃΔ: 146,
    ᐃⵠΔⲆⲆ: 147,
    ᐃⲆΔⵠⲆ: 148,
    ᐃᐃᐃⵠΔ: 149,
    ⵠⲆᐃΔⵠ: 150,
    ⵠΔⲆΔᐃ: 151,
    ΔΔⵠⲆⵠ: 152,
    ⲆⵠΔⵠⵠ: 153,
    ᐃⵠⵠΔⵠ: 154,
    ᐃⵠⵠⵠΔ: 155,
    ΔⲆᐃΔᐃ: 156,
    ᐃⲆΔᐃΔ: 157,
    ⵠⵠⵠΔⲆ: 158,
    ᐃΔΔⵠᐃ: 159,
    ᐃⵠᐃⲆᐃ: 160,
    ⲆⵠⲆⵠⵠ: 161,
    ⲆᐃⲆⲆⲆ: 162,
    ΔⲆⵠΔⵠ: 163,
    ⵠⲆⵠⵠΔ: 164,
    ⲆⵠⵠⲆΔ: 165,
    ᐃᐃΔⲆΔⵠⵠ: 166,
    ᐃⵠΔⵠΔ: 167,
    ⵠⵠΔᐃᐃ: 168,
    ΔᐃΔⵠⵠ: 169,
    ⲆⲆΔᐃᐃ: 170,
    ⲆⲆᐃⲆⲆⲆⲆ: 171,
    ᐃⵠᐃᐃΔΔⵠ: 172,
    ⲆⵠΔΔΔⵠᐃ: 173,
    ⵠⲆⲆⲆⵠ: 174,
    ⲆᐃⲆⵠⵠⵠⵠ: 175,
    ⵠᐃΔⲆᐃⲆᐃ: 176,
    ΔⲆⲆⵠΔⲆΔ: 177,
    ⵠΔᐃⲆΔᐃⲆ: 178,
    ΔⲆᐃⵠⲆⵠⲆ: 179,
    ⵠᐃⲆⵠⵠⲆΔ: 180,
    ⵠⵠᐃⲆⲆⲆⵠ: 181,
    ⲆⲆⲆⲆⵠⲆⵠ: 182,
    ᐃΔΔⵠⵠ: 183,
    ⵠⲆⲆⵠᐃ: 184,
    ΔᐃⲆᐃⲆ: 185,
    ᐃΔⵠᐃΔ: 186,
    ⵠⵠⵠⵠⲆ: 187,
    ᐃΔᐃⲆⲆⲆΔ: 188,
    ΔⲆⵠᐃᐃ: 189,
    ⵠΔⵠᐃΔ: 190,
    ΔⲆᐃⲆΔΔⲆ: 191,
    ΔⵠᐃⲆΔ: 192,
    ᐃⵠⵠⵠⵠᐃⲆ: 193,
    ⵠΔⵠΔⵠ: 194,
    ⲆⲆΔΔᐃ: 195,
    ⲆΔⲆⵠⲆᐃᐃ: 196,
    ⵠⵠⲆⵠᐃᐃⲆ: 197,
    ⵠⲆⵠΔΔ: 198,
    ⲆᐃᐃⵠΔ: 199,
    ᐃⲆΔⵠᐃⲆΔ: 200,
    ⲆⵠⵠⲆᐃ: 201,
    Ⲇⵠⵠᐃ: 202,
    ΔⲆΔΔⲆ: 203,
    ΔΔⲆΔΔⵠΔ: 204,
    ᐃⲆΔⲆⲆ: 205,
    ΔΔᐃⲆⲆⲆᐃ: 206,
    ⵠᐃⲆΔᐃ: 207,
    ΔΔΔᐃⵠΔⵠ: 208,
    ᐃᐃⵠᐃᐃ: 209,
    ⵠᐃⵠᐃΔΔⵠ: 210,
    ⵠⲆⵠᐃⵠᐃⵠ: 211,
    ⲆⲆᐃⵠⵠ: 212,
    ⲆΔⵠⲆⵠ: 213,
    ᐃⲆⵠΔⲆ: 214,
    ⵠΔΔⲆⲆ: 215,
    ΔⵠⵠⲆΔ: 216,
    ⲆᐃⵠᐃΔ: 217,
    ΔᐃΔⲆⲆ: 218,
    ⵠⲆⵠΔᐃ: 219,
    ΔΔΔⲆᐃ: 220,
    ⲆᐃⲆΔᐃ: 221,
    ⵠⵠⲆΔΔ: 222,
    ᐃΔⵠΔΔ: 223,
    ⲆᐃΔⲆⲆ: 224,
    ΔⲆⵠᐃⵠΔⲆ: 225,
    ΔΔΔⵠᐃⲆᐃ: 226,
    ⵠⵠΔⵠⲆ: 227,
    ΔᐃⵠⵠΔⵠᐃ: 228,
    ⲆⵠΔⵠⲆ: 229,
    ᐃΔⲆᐃᐃ: 230,
    ᐃᐃⵠⵠᐃ: 231,
    ⵠᐃⲆΔⲆ: 232,
    ⲆΔᐃⲆΔ: 233,
    ΔⲆⲆⲆⵠΔⵠ: 234,
    ΔⲆⵠΔᐃ: 235,
    ⵠⲆⲆΔᐃ: 236,
    ᐃⵠⲆⲆΔ: 237,
    ⵠⵠΔᐃⵠ: 238,
    ⲆⲆⲆⵠⵠ: 239,
    ⲆⵠᐃⲆΔ: 240,
    ΔᐃΔⵠΔ: 241,
    ΔⲆⵠᐃⲆ: 242,
    ⲆⵠΔⲆΔⲆⵠ: 243,
    ⲆΔΔΔᐃ: 244,
    ⲆᐃΔⵠᐃ: 245,
    ΔⵠᐃⵠⲆΔΔ: 246,
    ⵠⵠⲆⵠⵠ: 247,
    ᐃΔⲆΔⵠ: 248,
    ⲆⲆⵠⵠⵠⵠΔ: 249,
    ⵠⵠⲆⵠᐃ: 250,
    ⲆΔΔΔⵠ: 251,
    ⲆⲆⵠⵠᐃΔⵠ: 252,
    ⲆⵠΔⲆᐃᐃᐃ: 253,
    ΔⵠᐃΔⲆᐃⲆ: 254,
    ᐃᐃᐃΔⲆᐃᐃ: 255,
    ᐃⲆΔⲆᐃⵠⲆ: 256,
    ᐃⵠΔᐃⵠⲆⲆ: 257,
    ⵠΔⵠⲆⲆⲆᐃ: 258,
    ⲆΔΔⲆΔΔⵠ: 259,
    ᐃⵠⲆΔⵠ: 260,
    ΔⲆⵠⵠⲆΔⲆ: 261,
    ⵠᐃⵠⵠⵠⲆⲆ: 262,
    ᐃᐃΔΔⵠⵠⲆ: 263,
    ΔⲆⲆⲆΔ: 264,
    ΔᐃᐃΔⲆⵠⲆ: 265,
    ΔᐃᐃⵠⵠⵠΔ: 266,
    ΔᐃᐃⵠⵠΔΔ: 267,
    ᐃΔⵠⵠᐃⵠᐃ: 268,
    ⲆᐃᐃΔᐃΔⲆ: 269,
    ⲆᐃⵠᐃⵠΔΔ: 270,
    ᐃᐃΔΔᐃⵠᐃ: 271,
    ΔⲆⲆᐃⵠⵠΔ: 272,
    ΔΔΔⵠⲆΔΔ: 273,
    ⲆᐃⲆᐃΔΔⲆ: 274,
    ⲆᐃᐃΔⵠΔⲆ: 275,
    ⲆᐃⲆⲆⵠΔΔ: 276,
    ⲆⵠⲆΔⵠⵠⲆ: 277,
    ⲆⵠⲆⲆⲆΔΔ: 278,
    ΔΔⵠⵠ: 279,
    ΔⵠᐃⲆⵠ: 280,
    ΔⲆⲆᐃⲆᐃⲆ: 281,
    ⲆᐃⲆΔⵠΔⵠ: 282,
    ⵠⲆ: 283,
    ⵠⲆΔᐃΔᐃⵠ: 284,
    ⲆΔᐃⲆᐃ: 285,
    ᐃΔᐃⵠⲆ: 286,
    ΔⲆᐃⵠⲆⲆΔ: 287,
    ⲆⵠⲆⲆᐃ: 288,
    ⵠΔⵠⲆᐃΔⲆ: 289,
    ΔΔΔΔΔᐃⲆ: 290,
    ⲆⵠΔᐃΔⲆⵠ: 291,
    ᐃⲆΔⵠΔⵠⲆ: 292,
    ⲆᐃΔᐃᐃΔⲆ: 293,
    ᐃᐃΔᐃⵠ: 294,
    ΔⲆⵠⵠⵠᐃⲆ: 295,
    ⲆᐃᐃⵠΔⵠⲆ: 296,
    ⵠⵠⵠᐃᐃⵠΔ: 297,
    ⲆⵠⲆΔⵠΔⲆ: 298,
    ⲆΔⲆⵠⵠ: 299,
    ⲆΔⲆᐃᐃΔⵠ: 300,
    ⲆⲆᐃⲆⵠⵠᐃ: 301,
    ⵠⵠᐃᐃᐃΔᐃ: 302,
    ΔᐃᐃⲆⵠᐃΔ: 303,
    ⲆᐃⵠⵠⲆᐃⲆ: 304,
    ⵠⵠΔΔᐃΔᐃ: 305,
    ⲆᐃⵠⲆΔᐃⵠ: 306,
    ⲆⵠⵠᐃⲆ: 307,
    ᐃⲆΔΔⲆᐃΔ: 308,
    ⲆⲆⲆⲆⲆᐃⲆ: 309,
    ⵠᐃΔΔⲆᐃⲆ: 310,
    ΔⲆⲆⵠⲆᐃΔ: 311,
    ⵠΔΔⲆⲆΔⲆ: 312,
    Ⲇᐃᐃⵠⵠⵠⵠ: 313,
    ᐃⲆⲆΔⵠᐃᐃ: 314,
    ⵠⵠⵠᐃⵠⵠΔ: 315,
    ⵠΔΔⵠⲆᐃⵠ: 316,
    ⵠⵠΔΔⲆⵠⲆ: 317,
    ΔⲆⵠᐃᐃΔⲆ: 318,
    ΔⲆᐃᐃᐃΔⵠ: 319,
    ⵠⵠⵠⵠⵠΔⵠ: 320,
    ⲆⲆⵠⲆΔ: 321,
    ⵠⵠᐃⵠᐃᐃⲆ: 322,
    ⵠᐃᐃΔᐃⵠΔ: 323,
    ᐃⲆΔⵠⲆⲆᐃ: 324,
    ᐃⵠΔⲆΔᐃᐃ: 325,
    ⲆⵠⲆⵠⵠⵠᐃ: 326,
    ΔⵠΔⵠΔⵠⵠ: 327,
    ᐃΔⵠΔⵠⵠⵠ: 328,
    ΔⵠΔⲆⲆⵠΔ: 329,
    ⵠᐃΔⵠΔⲆⵠ: 330,
    ⵠⲆΔᐃⲆⲆΔ: 331,
    ⲆᐃΔⲆᐃᐃᐃ: 332,
    ᐃΔᐃΔⲆΔᐃ: 333,
    ΔᐃⲆᐃΔᐃΔ: 334,
    ΔⵠⵠᐃᐃΔⵠ: 335,
    ⲆΔⵠⲆΔⵠⲆ: 336,
    ⵠΔΔΔᐃᐃⲆ: 337,
    ⵠⲆⲆⲆⲆⲆΔ: 338,
    Δᐃᐃⵠⵠᐃᐃ: 339,
    ΔⵠⵠⵠⲆⵠⵠ: 340,
    ΔⵠⲆⵠΔⲆᐃ: 341,
    ΔΔᐃᐃΔΔᐃ: 342,
    ᐃΔΔΔᐃⲆᐃ: 343,
    ⲆᐃⵠⲆⲆⲆⲆ: 344,
    ΔⵠⲆⵠⲆⵠᐃ: 345,
    ⵠⲆⲆᐃΔⵠⵠ: 346,
    ⵠⲆᐃΔᐃᐃΔΔⵠ: 347,
    ᐃᐃⲆⵠⵠΔⵠ: 348,
    ΔⲆᐃⲆΔΔΔ: 349,
    ΔⵠⲆⵠΔΔⵠ: 350,
    ᐃΔᐃᐃⲆⵠΔ: 351,
    ⵠⵠΔⵠⲆΔΔ: 352,
    ᐃⲆⵠᐃⵠᐃⵠ: 353,
    ⲆᐃⲆᐃⲆⲆⵠ: 354,
    ᐃᐃⵠⵠⵠⲆΔ: 355,
    ΔΔⵠᐃᐃᐃⵠ: 356,
    ΔⲆⵠΔᐃⲆᐃ: 357,
    ⵠΔΔᐃΔΔⲆ: 358,
    ⲆᐃⵠᐃᐃΔⲆ: 359,
    ⵠⲆΔⲆᐃⲆᐃ: 360,
    ⲆΔΔΔⵠᐃΔ: 361,
    ⲆΔⵠΔΔⵠᐃ: 362,
    ⲆΔΔΔΔⲆᐃ: 363,
    ᐃⲆⲆⲆᐃᐃⵠ: 364,
    ΔⵠΔΔΔⵠⲆ: 365,
    ⲆΔᐃΔΔΔⲆ: 366,
    ⲆⵠᐃⵠΔⲆⲆ: 367,
    ⲆᐃΔⵠΔⵠᐃ: 368,
    ΔⵠⲆᐃΔⵠⵠ: 369,
    ⵠⵠⲆⲆᐃᐃᐃ: 370,
    ⵠΔⲆⵠⵠⲆᐃ: 371,
    ⵠᐃⵠⲆΔⲆⲆ: 372,
    ⲆΔⵠⲆⲆⵠᐃ: 373,
    ⲆⵠⵠΔΔᐃᐃ: 374,
    ⲆⲆᐃΔΔⵠⵠ: 375,
    ⵠⲆᐃⲆⵠᐃⲆ: 376,
    ΔᐃᐃⵠⲆⲆⲆ: 377,
    ΔⵠⵠⲆⲆⲆΔ: 378,
    ⵠᐃⵠⲆΔⵠⲆ: 379,
    ⵠᐃⲆⵠⲆⵠⵠ: 380,
    ᐃⵠᐃᐃⵠⲆΔ: 381,
    ⵠΔΔᐃⵠΔⲆ: 382,
    ᐃⲆⲆⲆᐃⲆⵠ: 383,
    ΔᐃΔⲆⵠΔⲆ: 384,
    Ⲇᐃⵠᐃᐃᐃⵠ: 385,
    ᐃᐃΔⵠⵠΔⲆ: 386,
    ΔⵠⵠⲆⲆᐃⲆ: 387,
    ⵠⲆᐃΔⲆⲆᐃ: 388,
    ⲆⵠⵠΔΔᐃΔ: 389,
    ⲆⲆⵠΔᐃⵠΔ: 390,
    ⵠΔΔⲆⵠᐃⵠ: 391,
    ⵠΔⲆⵠᐃⵠᐃ: 392,
    ᐃΔΔΔⲆΔΔ: 393,
    ⵠⲆᐃΔΔΔᐃ: 394,
    ΔⵠΔⲆⲆⲆᐃ: 395,
    ᐃΔᐃᐃⲆΔⵠ: 396,
    ᐃᐃᐃⲆᐃΔⵠ: 397,
    ᐃⲆⲆⲆⲆᐃⲆ: 398,
    ⲆⵠⲆᐃᐃᐃΔ: 399,
    ⲆⵠⵠⲆⵠⵠⵠ: 400,
    ⵠⵠᐃΔᐃᐃⲆ: 401,
    ⵠⲆⲆΔⲆᐃⲆ: 402,
    ᐃⵠΔᐃΔⵠᐃ: 403,
    ⲆΔᐃⵠⲆᐃⵠ: 404,
    ΔΔⵠⲆΔΔΔ: 405,
    ⵠⲆᐃΔⲆⵠᐃ: 406,
    ᐃΔⵠᐃⲆΔΔ: 407,
    ᐃⵠⲆᐃΔⲆⵠ: 408,
    ⵠⲆᐃΔⵠΔΔ: 409,
    ᐃⵠⵠⵠΔᐃᐃ: 410,
    ⲆᐃᐃⵠΔᐃᐃ: 411,
    ΔΔⲆⲆᐃᐃΔ: 412,
    ⵠⲆᐃᐃᐃ: 413,
    ᐃᐃⵠⵠᐃΔⵠⲆⲆ: 414,
    ⲆᐃⲆⵠΔ: 415,
    ⵠⲆᐃᐃⵠ: 416,
    ⲆΔⲆΔⵠⲆⵠⵠΔ: 417,
    ᐃΔᐃⲆⲆⲆⲆ: 418,
    ᐃⲆⵠᐃᐃ: 419,
    ᐃⵠⲆⵠΔᐃⵠ: 420,
    ⵠΔⵠΔΔⵠᐃ: 421,
    ⲆΔΔΔᐃⲆⲆ: 422,
    ᐃΔᐃⲆⲆᐃⲆ: 423,
    ΔⲆⲆⵠᐃΔⲆ: 424,
    ᐃᐃΔΔⵠᐃᐃ: 425,
    ⵠΔⲆᐃΔⵠⵠ: 426,
    ΔⵠⵠⲆⲆⵠᐃ: 427,
    ᐃΔⵠⵠⲆΔᐃ: 428,
    ΔΔⲆⲆᐃⲆΔ: 429,
    ⵠⵠᐃⵠᐃᐃᐃ: 430,
    ΔⲆⲆⲆΔⵠⵠ: 431,
    ⲆᐃᐃⲆⵠⲆΔ: 432,
    ⲆⵠΔᐃΔΔᐃ: 433,
    ⵠᐃΔΔⲆⲆⲆ: 434,
    ᐃΔⵠⵠⵠᐃᐃ: 435,
    ᐃᐃΔΔᐃⲆⲆ: 436,
    ⵠⵠᐃⵠΔⲆᐃ: 437,
    ⵠΔΔΔⲆⲆΔ: 438,
    ᐃⲆᐃⵠᐃⵠΔ: 439,
    ᐃⲆᐃΔⲆᐃΔ: 440,
    ⵠⵠᐃᐃΔᐃᐃ: 441,
    ⵠᐃᐃⲆⵠΔⵠ: 442,
    ⲆᐃᐃΔⲆᐃᐃ: 443,
    ΔᐃᐃⵠⲆⵠⲆⵠⵠ: 444,
    ⵠⵠΔⵠᐃ: 445,
    ΔΔⲆᐃⵠⵠⲆ: 446,
    ⵠΔⲆⲆⲆᐃⵠ: 447,
    ⲆᐃΔΔⵠΔᐃⵠΔ: 448,
    ⵠⵠⲆΔⲆ: 449,
    ⲆᐃΔⲆᐃ: 450,
    ᐃⲆⵠⲆᐃᐃⵠ: 451,
    ⲆᐃⲆᐃΔⲆⵠ: 452,
    ⲆᐃⵠΔᐃⲆⵠ: 453,
    ⲆΔⲆⲆⵠⵠᐃ: 454,
    ΔᐃᐃᐃⲆΔᐃ: 455,
    ᐃⲆⲆⲆⵠᐃⲆ: 456,
    ᐃᐃᐃᐃⵠⲆⲆ: 457,
    ⲆⵠⲆⲆⵠⵠΔ: 458,
    ΔⵠΔⵠⲆᐃⲆ: 459,
    ᐃᐃΔⲆᐃΔΔ: 460,
    ΔⲆΔΔᐃᐃⵠ: 461,
    ΔᐃⵠᐃᐃᐃΔ: 462,
    ΔⵠⵠᐃⵠᐃⲆ: 463,
    ⲆΔⵠᐃⵠⵠᐃ: 464,
    ΔΔΔⲆⵠⵠᐃ: 465,
    ⲆᐃⲆΔᐃᐃⵠ: 466,
    ΔⲆⲆᐃΔⵠᐃ: 467,
    ΔⲆᐃⵠⲆᐃⲆ: 468,
    ΔⲆΔⵠⲆΔΔ: 469,
    ⲆᐃⲆⲆⵠⵠⵠ: 470,
    ᐃⲆΔⲆΔⵠⲆ: 471,
    ⲆⲆᐃᐃⵠⵠᐃ: 472,
    ᐃᐃⲆᐃⵠⵠᐃ: 473,
    ⵠⲆⲆΔⵠΔⲆ: 474,
    ΔⲆⲆᐃⵠⲆⲆ: 475,
    ΔΔᐃᐃΔⵠⵠ: 476,
    ᐃᐃΔᐃΔⵠⲆ: 477,
    ⲆⵠᐃΔⵠⲆⲆ: 478,
    ᐃΔΔᐃⵠⵠⵠ: 479,
    ⲆⵠΔᐃΔᐃΔ: 480,
    ⲆⵠⲆΔᐃΔⵠ: 481,
    ⵠΔᐃⲆᐃΔΔ: 482,
    ΔⵠⵠⲆⲆᐃΔ: 483,
    ΔⵠⲆᐃⲆⵠᐃ: 484,
    ΔⲆⲆⲆᐃΔⲆ: 485,
    ⲆⵠΔᐃⵠⵠᐃ: 486,
    ⲆⲆⵠΔᐃΔΔ: 487,
    ᐃΔΔⲆΔΔᐃ: 488,
    ᐃΔⵠⲆⲆⲆⵠ: 489,
    ⲆΔΔⲆᐃⲆⲆ: 490,
    ᐃⵠⲆΔΔᐃᐃ: 491,
    ΔⲆΔΔⵠΔΔ: 492,
    ΔᐃⲆⲆΔⵠⲆ: 493,
    ΔᐃᐃᐃᐃΔⵠ: 494,
    ΔΔⲆⲆᐃⲆⵠ: 495,
    ⲆᐃⲆⵠΔⵠᐃ: 496,
    ⵠⵠΔⵠⵠⵠΔ: 497,
    ΔᐃΔΔᐃⵠᐃ: 498,
    ᐃΔᐃΔⵠᐃⵠ: 499,
    ⲆⲆᐃΔⵠⲆᐃ: 500,
    ᐃᐃⲆΔⵠⲆⵠ: 501,
    ⲆΔᐃᐃΔᐃΔ: 502,
    ⲆⵠΔΔⵠΔⵠ: 503,
    ⵠⲆΔⵠΔⵠΔ: 504,
    ⵠΔΔⵠΔⲆⵠ: 505,
    ⲆⲆⵠⲆΔᐃⲆ: 506,
    ΔΔΔⲆⵠⵠᐃ: 507,
    ᐃⲆΔⵠᐃⵠΔ: 508,
    ⲆΔⲆⵠᐃΔΔ: 509,
    ⲆⲆᐃⲆᐃⲆᐃ: 510,
    ⲆⲆⲆΔΔⵠᐃ: 511,
    ⵠᐃΔᐃΔᐃⵠ: 512,
    ΔᐃⵠᐃⲆᐃᐃ: 513,
    ΔᐃᐃᐃⲆⵠⵠ: 514,
    ⵠΔⵠⲆᐃᐃΔ: 515,
    ΔᐃⵠⲆⵠᐃⲆ: 516,
    ⵠⲆⲆΔⲆⲆΔ: 517,
    ⲆⲆΔᐃⵠⵠΔ: 518,
    ᐃⲆⲆⲆΔⲆⵠ: 519,
    ⵠᐃⵠᐃⵠⵠⵠ: 520,
    ⵠΔΔⵠⵠᐃⲆ: 521,
    ⲆΔΔⲆΔⵠᐃ: 522,
    ⵠΔᐃⵠΔⲆᐃ: 523,
    ⲆⵠⵠⲆᐃΔᐃ: 524,
    ⵠᐃⵠⲆᐃⵠᐃ: 525,
    ⵠⲆⵠⵠΔⲆΔ: 526,
    ΔⵠᐃⲆΔΔⲆ: 527,
    ⵠΔΔᐃᐃⵠⲆ: 528,
    ⲆΔⵠⵠⲆᐃⲆ: 529,
    ΔᐃⲆᐃΔΔⵠ: 530,
    ⲆᐃᐃⲆⲆⲆⲆ: 531,
    ΔⲆⲆⲆⲆΔᐃ: 532,
    ΔᐃΔⲆΔᐃⵠ: 533,
    ⲆⵠᐃΔⵠⵠᐃ: 534,
    ΔⲆⲆⲆΔⲆⲆ: 535,
    ΔᐃᐃⲆⵠΔⲆ: 536,
    ⵠΔⵠᐃΔⵠⵠ: 537,
    ΔⵠⵠᐃᐃⲆΔ: 538,
    ΔⵠⲆⲆᐃⵠⲆⲆⵠ: 539,
    ΔⲆⲆΔΔⵠᐃ: 540,
    ᐃΔΔⵠⲆⵠⵠ: 541,
    ᐃⵠΔᐃⲆⲆⲆ: 542,
    ⵠᐃⵠᐃΔᐃᐃ: 543,
    ᐃΔΔΔΔⲆΔᐃⵠ: 544,
    POINTS: 545,
    ⲆΔᐃΔᐃΔᐃ: 546,
    ⵠⲆⵠᐃΔⵠΔ: 547,
    ⲆᐃⲆΔΔΔⲆ: 548,
    ⲆⵠᐃΔΔᐃᐃ: 549,
    ⵠⲆᐃⲆᐃᐃΔ: 550,
    ⵠᐃᐃΔⲆᐃⵠ: 551,
    ΔⲆᐃᐃᐃᐃᐃ: 552,
    ΔᐃⲆⲆⵠⲆΔ: 553,
    ΔⲆΔⵠⲆⲆⵠ: 554,
    ⵠⵠΔⵠᐃⵠΔ: 555,
    ᐃΔΔΔⲆⲆⵠ: 556,
    ⵠᐃᐃᐃᐃᐃⵠ: 557,
    ᐃΔᐃᐃⲆΔᐃ: 558,
    ᐃⲆⲆⲆᐃΔΔ: 559,
    ΔⵠⵠΔΔᐃⲆ: 560,
    ⲆᐃⵠᐃᐃⵠⲆ: 561,
    ⵠⲆⵠΔⲆᐃⲆ: 562,
    ⵠΔⲆⲆᐃΔⲆ: 563,
    ⵠⲆⵠⵠΔᐃΔ: 564,
    ⲆⲆᐃᐃᐃⵠΔ: 565,
    ΔΔᐃⲆⵠⲆⲆ: 566,
    ⲆᐃⵠᐃΔⲆᐃ: 567,
    ᐃᐃⵠⵠⲆΔΔ: 568,
    ⵠⵠⲆⲆΔᐃᐃ: 569,
    ⲆⲆⵠⲆⵠⵠⵠ: 570,
    ΔΔᐃᐃⲆⲆᐃ: 571,
    ᐃⵠⲆⲆᐃⵠⵠ: 572,
    ᐃⵠⲆᐃᐃᐃⵠ: 573,
    ΔⲆΔΔⵠᐃⵠ: 574,
    ΔⵠⲆⵠⵠⵠᐃ: 575,
    ⲆⲆⲆⲆⵠⲆⲆ: 576,
    ⲆⲆΔᐃΔⲆⲆ: 577,
    ⵠⲆΔᐃⲆⲆᐃ: 578,
    ΔᐃⵠᐃᐃⲆⲆ: 579,
    ΔᐃᐃⵠΔᐃⵠ: 580,
    ΔΔⵠⲆΔⲆⵠ: 581,
    ᐃⲆⵠⲆᐃⲆᐃ: 582,
    ⲆᐃⵠᐃᐃᐃΔ: 583,
    ⲆΔᐃΔᐃᐃΔ: 584,
    ⲆᐃⵠⲆⲆⵠΔ: 585,
    ⵠⲆΔΔⵠᐃᐃ: 586,
    ⲆΔᐃᐃΔⵠΔ: 587,
    ᐃᐃΔΔⵠᐃⲆ: 588,
    ⲆⲆⵠᐃᐃΔᐃ: 589,
    ⵠΔⲆⵠΔⵠⲆ: 590,
    ⵠᐃⵠᐃΔᐃⵠ: 591,
    ⲆⵠᐃⲆΔⲆΔ: 592,
    ΔΔΔⲆᐃΔΔΔᐃ: 593,
    ΔΔⲆⵠⵠΔᐃ: 594,
    ΔΔⲆΔⵠⵠⵠⲆᐃ: 595,
    ⲆⲆΔⵠᐃⲆⲆ: 596,
    ᐃⲆⵠⵠΔⵠᐃΔⵠ: 597,
    ⲆᐃᐃᐃⵠᐃⲆᐃⲆ: 598,
    ΔⵠᐃⵠⵠΔᐃⵠⵠ: 599,
    ΔΔⲆΔⵠⵠΔⲆⵠ: 600,
    ᐃⲆⵠⲆⵠΔΔΔⵠ: 601,
    ⵠⲆΔⲆᐃⵠᐃ: 602,
    ᐃᐃⲆⲆⵠ: 603,
    ⵠΔᐃⲆΔΔᐃ: 604,
    ᐃⵠⵠⲆᐃⵠΔ: 605,
    ⵠΔⵠᐃΔⲆΔ: 606,
    ᐃⵠΔᐃⵠⲆⵠΔᐃ: 607,
    ⵠⲆᐃⵠᐃⵠⲆ: 608,
    ᐃᐃᐃᐃΔⵠⵠ: 609,
    ΔᐃΔⵠⵠⵠᐃ: 610,
    ΔⲆⵠᐃⲆⵠΔ: 611,
    ⲆΔᐃⲆΔⵠⵠ: 612,
    ᐃᐃⵠⵠΔᐃⲆ: 613,
    ⲆⵠΔΔΔΔΔ: 614,
    ΔΔΔΔⲆᐃΔ: 615,
    ⲆⲆᐃⲆⲆⲆᐃ: 616,
    ⲆⲆⵠⲆⵠΔᐃ: 617,
    ᐃⲆⵠΔⲆΔᐃ: 618,
    ⲆⵠΔⲆᐃ: 619,
    ΔⵠⵠⵠⲆ: 620,
    ΔⲆⵠⵠᐃ: 621,
    ᐃΔΔⵠΔΔᐃⵠⵠ: 622,
    ᐃᐃⲆⲆⵠⵠⲆ: 623,
    ⵠΔΔⵠⲆⲆⲆ: 624,
    ⵠᐃⵠΔⲆⵠⵠ: 625,
    ᐃᐃⲆΔⵠΔⲆ: 626,
    ⵠΔΔⲆΔⵠⵠ: 627,
    ΔⵠⲆⲆᐃΔⵠ: 628,
    ΔΔⲆⲆᐃᐃⲆ: 629,
    ΔᐃΔⲆᐃⲆⲆ: 630,
    ΔⲆⵠⲆⲆΔᐃ: 631,
    ⵠⵠⲆⲆᐃᐃⵠ: 632,
    ᐃⵠᐃⲆᐃΔⲆ: 633,
    ⲆᐃᐃᐃⲆΔᐃ: 634,
    ⵠⵠⵠΔᐃᐃΔ: 635,
    ΔⲆⵠΔⵠᐃⵠ: 636,
    ⵠΔⵠⲆᐃ: 637,
    ΔΔⵠⲆᐃⵠⲆ: 638,
    ⲆΔΔᐃⵠⵠⲆ: 639,
    Δⵠⵠᐃᐃᐃⵠ: 640,
    ΔⲆⵠΔΔᐃΔ: 641,
    ΔΔⵠⵠΔⲆΔ: 642,
    ⲆⵠⵠΔΔⲆᐃ: 643,
    ⲆⵠⵠⵠᐃΔⲆ: 644,
    ⲆⲆⲆⲆⲆⲆΔ: 645,
    ⵠΔⵠⲆⵠⵠⵠ: 646,
    ᐃᐃᐃⵠΔⵠᐃ: 647,
    ΔΔⲆΔⵠᐃᐃ: 648,
    ΔᐃᐃⲆᐃᐃⵠ: 649,
    ΔᐃⵠⵠⲆⲆⲆ: 650,
    ⲆⵠΔᐃⵠⵠⲆ: 651,
    ⲆⲆⲆΔⵠⲆᐃ: 652,
    ΔⵠⵠⵠⵠΔⲆ: 653,
    ⵠΔⲆᐃΔᐃᐃ: 654,
    ΔⲆΔΔⲆΔⵠ: 655,
    ᐃⲆⲆΔᐃᐃᐃ: 656,
    ⲆΔΔΔΔᐃⵠ: 657,
    ⲆΔⲆⵠᐃⵠⵠ: 658,
    ᐃΔⲆⲆⵠΔΔ: 659,
    ᐃⲆⵠⵠΔⵠⵠ: 660,
    ΔΔᐃⲆⲆᐃⵠ: 661,
    ᐃΔᐃⵠᐃΔᐃ: 662,
    ᐃΔⵠⲆⵠΔⲆ: 663,
    ⲆⵠΔⵠᐃᐃᐃ: 664,
    ⵠΔⲆᐃⲆⲆⵠ: 665,
    ᐃⲆᐃᐃᐃⵠᐃ: 666,
    ⵠⵠΔΔᐃⵠⵠ: 667,
    ⵠΔⵠⲆᐃⵠΔ: 668,
    ΔⲆⵠᐃΔⲆᐃ: 669,
    ⲆᐃᐃⵠⵠⲆΔ: 670,
    ⲆⲆⲆⵠᐃΔⲆ: 671,
    ⵠⵠⲆⵠΔᐃⵠ: 672,
    ⵠⲆⲆⵠⵠ: 673,
    ΔΔⲆⵠΔⲆⲆ: 674,
    ΔⵠⲆⲆⲆΔᐃ: 675,
    ΔⵠΔᐃΔ: 676,
    ᐃⵠᐃⵠⵠΔΔⵠΔ: 677,
    ⲆⵠⵠⵠΔΔⵠ: 678,
    Δⵠᐃⵠᐃ: 679,
    ⲆΔⵠΔⵠⵠⲆ: 680,
    ᐃⵠⲆΔᐃⲆⵠ: 681,
    ⲆⵠΔⵠΔⵠΔ: 682,
    ⵠⵠΔⲆᐃΔⲆ: 683,
    ⲆⲆⵠΔΔⲆⲆ: 684,
    ΔⵠΔⲆⵠΔΔ: 685,
    ⲆⵠᐃΔᐃΔⵠ: 686,
    ᐃᐃⲆⲆΔᐃΔ: 687,
    ᐃⵠⵠᐃΔΔⲆ: 688,
    ⵠⵠⲆᐃⲆᐃⲆ: 689,
    ⲆΔⵠΔΔΔⲆ: 690,
    ΔᐃᐃⲆᐃ: 691,
    ΔᐃⵠⲆᐃ: 692,
    ᐃⵠⵠᐃⵠ: 693,
    ⲆᐃᐃⲆⵠ: 694,
    ⲆⲆΔΔΔ: 695,
    ᐃⲆᐃΔⵠⵠᐃ: 696,
    ᐃᐃⲆⲆⵠⵠᐃ: 697,
    ΔᐃⲆⵠⲆⵠᐃ: 698,
    ⲆⵠⵠᐃⲆᐃᐃ: 699,
    ⲆᐃᐃⲆⵠΔⵠ: 700,
    ΔⵠᐃⲆΔΔᐃ: 701,
    ΔⲆᐃΔⲆⵠΔ: 702,
    ⲆⲆᐃⲆΔⲆᐃ: 703,
    ᐃᐃⲆΔΔⵠⵠ: 704,
    ⵠᐃⲆⵠΔⵠᐃ: 705,
    ᐃᐃⵠᐃΔΔⲆ: 706,
    ᐃΔᐃᐃⵠΔᐃ: 707,
    ⵠⵠⵠⵠⲆᐃΔ: 708,
    ᐃᐃΔᐃΔᐃᐃ: 709,
    ⵠᐃⲆⲆⵠⵠΔ: 710,
    ΔΔᐃΔΔΔⵠ: 711,
    ⲆⵠⵠΔⲆⲆΔ: 712,
    ΔⵠᐃⵠΔⵠⲆ: 713,
    ΔΔⲆΔᐃⵠⵠ: 714,
    ⵠⲆⲆⵠΔΔⲆ: 715,
    ΔΔⲆⲆⲆΔᐃ: 716,
    ᐃᐃⲆᐃⵠⲆⵠ: 717,
    ᐃⵠⲆΔᐃⵠΔ: 718,
    ⵠΔⵠⵠᐃᐃⵠ: 719,
    ΔΔΔΔⵠⵠΔ: 720,
    ᐃᐃⲆⲆΔΔΔᐃⲆ: 721,
    ΔᐃⲆᐃᐃⵠⵠ: 722,
    ΔΔΔⲆᐃᐃΔ: 723,
    ⵠᐃⲆᐃᐃⲆⲆ: 724,
    ⵠΔⲆᐃⲆᐃᐃ: 725,
    ΔⵠΔΔᐃᐃΔ: 726,
    ᐃΔᐃⵠᐃⵠⵠ: 727,
    ᐃⵠᐃΔⵠᐃᐃ: 728,
    ⵠⲆᐃⵠᐃᐃᐃ: 729,
    ⲆⲆΔⵠⵠΔᐃ: 730,
    ΔΔⲆᐃΔⵠⲆ: 731,
    ⲆΔᐃⵠⲆⲆΔ: 732,
    ⲆᐃⲆⵠΔΔⵠ: 733,
    ΔⲆⵠⲆⲆΔΔ: 734,
    ⵠᐃΔⲆⲆⲆⵠ: 735,
    ᐃⲆⲆⲆΔΔⵠ: 736,
    ⵠⵠⲆΔⲆⵠΔ: 737,
    ᐃⲆⵠⵠⵠⵠⲆ: 738,
    ᐃⲆⵠΔⲆⲆΔ: 739,
    ⵠⵠΔᐃⵠⵠⵠ: 740,
    ΔΔⵠᐃΔᐃⵠ: 741,
    ᐃⵠⲆⵠⲆⲆΔ: 742,
    ⲆⵠⲆⲆⵠⲆⲆ: 743,
    ⲆⲆⲆⵠⲆⵠᐃ: 744,
    ΔΔΔΔⲆΔⵠ: 745,
    ⲆⵠᐃᐃⲆⵠⲆ: 746,
    ΔⲆⵠⲆⲆᐃⵠ: 747,
    ΔⵠᐃΔΔΔΔ: 748,
    ΔⲆΔⲆⵠΔⵠ: 749,
    ⵠⲆⵠⵠᐃⲆᐃ: 750,
    ⵠᐃⲆⵠⵠⵠᐃ: 751,
    ⵠⵠⵠᐃⲆΔᐃ: 752,
    ⲆⵠᐃⲆⲆᐃⵠ: 753,
    ⲆⵠⲆⲆᐃⲆⲆ: 754,
    ᐃᐃΔⵠΔⵠⲆ: 755,
    ⲆᐃⵠᐃⲆⲆᐃ: 756,
    ⲆⲆᐃⵠⵠⲆⲆ: 757,
    ⲆᐃᐃᐃⲆⵠᐃ: 758,
    ΔⵠⵠΔΔΔᐃ: 759,
    ΔᐃⵠⲆⲆⲆⲆ: 760,
    ΔⵠᐃⲆⵠΔⲆ: 761,
    ΔⵠᐃΔⲆⲆΔ: 762,
    ᐃΔⵠΔⵠΔⲆ: 763,
    ΔᐃΔⵠⵠᐃᐃ: 764,
    ΔⲆⵠᐃⵠⵠᐃ: 765,
    ⵠᐃⲆΔΔⲆⵠ: 766,
    ⵠᐃⲆⲆΔᐃᐃ: 767,
    ⲆⲆⵠΔΔⵠᐃ: 768,
    ΔᐃᐃⵠⵠⲆΔ: 769,
    ⲆᐃΔᐃⵠᐃⲆ: 770,
    ⵠⲆⵠⲆⵠⲆⲆ: 771,
    ΔΔᐃᐃⵠᐃΔ: 772,
    ⲆⲆⵠᐃⲆΔΔ: 773,
    ᐃⵠⵠⲆΔⲆΔ: 774,
    ⲆⵠᐃⲆⲆⲆⲆ: 775,
    ⵠΔΔᐃⵠΔⵠ: 776,
    ⲆⲆᐃⲆⲆⲆⵠ: 777,
    ⵠⵠⵠΔⲆⵠΔ: 778,
    ⲆⵠΔⲆᐃᐃⵠ: 779,
    ΔⵠΔΔΔⲆΔ: 780,
    ΔᐃΔⲆΔⲆᐃ: 781,
    ⲆⲆᐃⵠⲆᐃⵠ: 782,
    ΔⲆⲆᐃⲆᐃᐃ: 783,
    ΔΔⵠᐃΔΔΔ: 784,
    ⵠⵠᐃᐃⵠΔⲆ: 785,
    ⵠᐃⵠΔᐃⵠⲆ: 786,
    ΔⵠⵠⵠⲆⵠᐃ: 787,
    ⲆΔΔⵠΔⵠⵠ: 788,
    ᐃᐃⲆⲆᐃⲆΔ: 789,
    ⵠⵠⲆᐃᐃΔΔ: 790,
    ⵠᐃⲆⵠⵠΔΔ: 791,
    ΔᐃΔΔᐃⵠⵠ: 792,
    ᐃⲆⲆⲆᐃ: 793,
    ΔⵠᐃⲆⲆⲆΔ: 794,
    ΔᐃᐃⲆⵠⵠⵠ: 795,
    ⵠⵠΔⲆᐃ: 796,
    ⵠΔⲆⵠⵠⵠⵠ: 797,
    ᐃΔⵠⲆΔᐃⵠ: 798,
    ΔΔᐃⵠⲆⲆⵠ: 799,
    ⵠⲆⵠⲆⲆΔᐃ: 800,
    ⲆᐃΔⲆᐃΔᐃ: 801,
    ΔⲆⵠⲆⵠ: 802,
    ⵠⲆΔⵠΔΔⵠ: 803,
    ΔΔⲆΔⵠⵠⵠᐃⲆ: 804,
    ⲆⵠⲆΔⵠⲆᐃⲆΔ: 805,
    ᐃⲆⵠⵠⲆⵠΔⵠᐃ: 806,
    ΔᐃΔΔⵠⵠᐃᐃᐃ: 807,
    ᐃⵠⲆⲆⲆⲆᐃ: 808,
    ΔΔΔᐃΔᐃᐃ: 809,
    ⵠⲆⵠⵠⵠΔᐃ: 810,
    ᐃⵠΔΔⵠⲆᐃ: 811,
    ⵠΔⵠⵠⵠⵠᐃ: 812,
    ⲆΔΔᐃΔⲆⲆ: 813,
    Δᐃⵠᐃⵠⵠⵠ: 814,
    ΔᐃⵠΔⲆᐃᐃ: 815,
    ⲆⵠⲆⵠⲆⵠⵠ: 816,
    ⲆⲆⵠⵠᐃⵠⲆ: 817,
    ᐃⲆΔᐃⲆ: 818,
    ΔᐃⲆᐃᐃ: 819,
    ΔΔⵠᐃΔⲆᐃ: 820,
    ⲆⵠᐃⵠΔᐃΔ: 821,
    ⲆⲆⵠᐃΔᐃᐃ: 822,
    ᐃⵠⵠⵠⵠΔⵠ: 823,
    ⲆΔΔᐃΔΔⲆ: 824,
    ⵠⵠⲆⵠⵠⲆᐃ: 825,
    ᐃⲆΔΔᐃⲆⵠ: 826,
    ⲆⲆΔⲆⲆⵠⲆ: 827,
    ⲆⲆⲆΔΔⲆᐃ: 828,
    ΔᐃⵠⵠⲆᐃⲆ: 829,
    ⵠⵠΔⵠⲆⲆΔ: 830,
    ⲆⵠⲆⲆⲆΔⵠ: 831,
    ⲆⲆⵠΔᐃⵠΔⲆΔ: 832,
    ⵠⵠΔΔᐃΔⵠΔⲆ: 833,
    ⲆⵠΔⵠᐃⵠΔ: 834,
    ᐃⵠᐃᐃⵠᐃᐃ: 835,
    ΔᐃⲆΔᐃΔⲆ: 836,
    ᐃⲆΔⵠⵠᐃᐃ: 837,
    ⵠᐃⲆΔⵠᐃⲆ: 838,
    ᐃΔΔᐃⲆⲆⲆ: 839,
    ⲆⲆⵠⵠⲆΔᐃ: 840,
    ΔΔⲆⵠⲆⵠⲆ: 841,
    ⲆⲆⲆⲆΔⲆⵠ: 842,
    ⵠΔᐃⵠⵠⲆᐃ: 843,
    ᐃⵠᐃⲆΔⲆΔ: 844,
    ΔΔᐃⲆⵠΔᐃ: 845,
    ΔⲆⲆⲆΔᐃᐃ: 846,
    ᐃⲆⲆⲆΔⲆⲆ: 847,
    ⲆᐃⲆⵠΔᐃΔ: 848,
    ΔΔⵠᐃⵠⲆⵠ: 849,
    ⲆⲆΔᐃᐃⵠᐃ: 850,
    ΔΔΔᐃΔⲆΔ: 851,
    ⲆⵠⲆⵠᐃⲆΔⵠΔ: 852,
    ⵠᐃᐃⲆⵠΔⲆ: 853,
    ΔᐃᐃⵠΔ: 854,
    ᐃᐃΔⵠⵠᐃΔⵠᐃ: 855,
    ΔᐃⲆᐃΔⲆΔΔΔ: 856,
    ⲆⵠΔⲆᐃⲆᐃⵠⵠ: 857,
    ⵠΔΔⵠⲆⲆⲆᐃⵠ: 858,
    ⲆᐃⲆⵠᐃᐃΔ: 859,
    ΔⲆⲆⲆⵠⵠᐃ: 860,
    ⲆⵠⵠⵠΔⵠⲆ: 861,
    ᐃᐃⲆⲆΔΔΔ: 862,
    ᐃᐃᐃⲆⵠⵠⵠ: 863,
    ⲆⲆᐃᐃΔⵠΔᐃΔ: 864,
    ⲆᐃⵠⲆΔⲆΔ: 865,
    ⲆΔᐃⲆᐃⲆⵠ: 866,
    ⲆⲆⲆⵠΔⵠⵠ: 867,
    ⵠⲆⵠⵠⲆΔⲆ: 868,
    ⵠⵠᐃⲆᐃΔΔ: 869,
    ⵠᐃⵠΔⲆΔⵠ: 870,
    ⵠΔⵠⵠᐃΔΔ: 871,
    ᐃⲆⵠᐃⲆ: 872,
    ᐃⲆᐃᐃΔⲆⲆⵠⵠ: 873,
    ⵠᐃⵠⲆᐃΔΔ: 874,
    ΔⵠⲆᐃⵠⵠΔ: 875,
    ᐃΔΔⵠⵠΔᐃ: 876,
    ⵠⵠΔⲆⵠⵠⵠ: 877,
    ⲆΔⲆⲆⲆΔⵠ: 878,
    ⲆⲆᐃⲆΔᐃΔ: 879,
    ΔⲆᐃᐃⲆⲆⲆ: 880,
    ᐃⲆΔΔⵠⵠΔ: 881,
    ΔⲆᐃⵠⵠⲆΔ: 882,
    ⲆΔΔⲆⲆⵠΔ: 883,
    ⵠΔᐃⵠⵠΔⲆ: 884,
    ⲆᐃⲆⲆⵠⵠⲆ: 885,
    ᐃⵠΔΔⵠᐃⵠ: 886,
    ΔΔᐃΔⲆ: 887,
    ⵠⵠⲆⲆⲆᐃᐃ: 888,
    ΔⵠᐃⲆᐃⲆⲆ: 889,
    ⵠⵠᐃΔⵠⲆⵠ: 890,
    ⲆᐃᐃΔⲆⵠΔ: 891,
    ⵠⵠⵠⵠⲆⲆⵠ: 892,
    ᐃΔᐃΔΔΔⵠ: 893,
    ΔⵠⵠᐃΔΔᐃ: 894,
    ⵠΔⲆⵠⲆΔⵠ: 895,
    ⲆⵠΔⵠⵠⵠⵠ: 896,
    ᐃΔⲆⲆΔⵠⵠ: 897,
    ΔΔᐃⲆΔᐃᐃ: 898,
    ΔᐃⲆᐃΔⲆΔ: 899,
    ⵠΔⵠΔΔⲆΔ: 900,
    ⵠⵠᐃΔⲆᐃᐃ: 901,
    ΔᐃΔᐃᐃΔᐃ: 902,
    ⵠⲆΔⵠⲆΔⵠ: 903,
    ᐃⲆᐃⵠᐃᐃⵠ: 904,
    ⲆΔΔⲆⵠⲆⲆ: 905,
    ⵠⵠΔΔⲆⵠⵠ: 906,
    ΔⲆΔⲆΔⲆΔ: 907,
    ΔⵠⲆᐃⵠⵠⲆ: 908,
    ⲆᐃᐃⲆΔΔⵠ: 909,
    ⲆⲆΔΔᐃᐃᐃ: 910,
    ΔΔΔᐃᐃᐃⵠ: 911,
    ΔⵠᐃⵠᐃᐃⲆ: 912,
    ⲆⵠΔⲆⵠⵠⲆ: 913,
    ᐃⵠᐃⲆΔᐃΔᐃᐃ: 914,
    ΔⲆΔⲆΔⲆⵠΔΔ: 915,
    ΔⲆⵠⲆΔⲆᐃΔᐃ: 916,
    ᐃⲆⲆⵠᐃΔⲆᐃᐃ: 917,
    ⲆⲆⵠⵠⲆΔΔ: 918,
    ᐃⵠᐃⲆΔΔᐃ: 919,
    ⵠΔⲆⲆΔ: 920,
    ΔⲆⲆΔᐃⲆⲆ: 921,
    ΔᐃΔⲆᐃᐃᐃ: 922,
    ⵠᐃΔᐃⵠⵠⲆ: 923,
    ⵠᐃⲆᐃⵠⲆⵠ: 924,
    ⵠⵠᐃⲆᐃᐃⵠ: 925,
    ⵠⲆᐃⵠΔΔᐃ: 926,
    ⵠⵠΔΔΔΔⲆ: 927,
    ⵠⲆⲆⲆΔΔⵠ: 928,
    ⲆⵠⵠΔⵠⲆᐃ: 929,
    ⵠⵠΔⵠᐃᐃⵠ: 930,
    ⲆⲆΔΔΔᐃΔ: 931,
    ΔᐃⲆⵠᐃⵠⵠ: 932,
    ΔⵠᐃⲆΔᐃⲆ: 933,
    ⵠⵠᐃⵠΔᐃᐃ: 934,
    ΔΔΔᐃⲆⲆᐃ: 935,
    ΔΔⲆΔⵠⲆᐃ: 936,
    ⵠΔᐃᐃⲆⲆΔ: 937,
    ΔⲆᐃΔΔᐃᐃ: 938,
    ⲆⵠⲆⵠΔⲆᐃ: 939,
    ᐃⲆΔⲆᐃⵠᐃⲆⵠ: 940,
    Δᐃᐃⵠⵠ: 941,
    ⲆⵠⲆⵠΔᐃΔ: 942,
    ⲆΔᐃᐃΔΔⲆ: 943,
    ⵠᐃᐃᐃⲆᐃΔ: 944,
    ⲆⲆΔⵠᐃΔⲆ: 945,
    ΔⵠⲆⲆⵠⲆⵠ: 946,
    ΔᐃⲆⲆⵠⲆᐃ: 947,
    ΔΔⲆⵠⲆΔⲆ: 948,
    ᐃᐃΔⵠⵠⵠΔ: 949,
    ΔⵠⵠΔᐃⲆᐃ: 950,
    ⲆⵠᐃⵠⲆⲆᐃ: 951,
    ⲆⵠΔᐃⲆΔΔ: 952,
    ᐃⲆⲆΔΔⵠⲆ: 953,
    ᐃᐃΔⲆⲆⲆΔ: 954,
    ⲆΔⵠΔⲆΔᐃ: 955,
    ᐃⲆⵠᐃΔᐃⵠ: 956,
    ⵠᐃⲆⵠⲆⲆᐃ: 957,
    ⵠⵠⲆᐃⲆⵠᐃ: 958,
    ᐃⵠᐃⵠⲆΔᐃ: 959,
    ⲆⵠⵠᐃⲆᐃΔ: 960,
    ΔⲆⵠⲆᐃⵠⵠ: 961,
    ⲆⲆⵠᐃᐃⵠⵠ: 962,
    ⵠᐃⲆᐃⵠⵠⲆ: 963,
    ⲆⵠⲆⵠⵠᐃⲆⵠⵠ: 964,
    ΔⲆΔᐃᐃᐃⵠ: 965,
    ᐃⲆᐃⲆΔⵠᐃ: 966,
    ΔⵠⵠΔᐃΔᐃ: 967,
    ΔⲆᐃᐃⵠΔᐃ: 968,
    ΔΔⲆΔⲆΔⵠ: 969,
    ⲆⲆᐃⲆⵠΔᐃ: 970,
    ⵠⲆᐃⵠΔⲆΔ: 971,
    ⵠⵠᐃᐃΔᐃⲆ: 972,
    ⵠⵠᐃΔⵠᐃᐃ: 973,
    ⵠⵠᐃΔⵠᐃΔ: 974,
    ᐃⵠⲆΔⲆⵠΔ: 975,
    ⲆΔⵠᐃΔⲆΔ: 976,
    ⵠΔⵠⵠⲆⲆⲆ: 977,
    ΔΔⲆⵠⲆⲆᐃ: 978,
    ΔⲆᐃᐃΔⲆᐃ: 979,
    ⵠⲆᐃᐃⵠᐃᐃ: 980,
    ᐃⲆᐃⲆΔΔⲆ: 981,
    ᐃᐃᐃΔᐃⵠᐃ: 982,
    ΔᐃⵠⵠΔᐃⲆ: 983,
    Ⲇⵠⵠⵠᐃⵠⵠ: 984,
    ⵠⵠΔⲆᐃᐃᐃ: 985,
    ⲆⵠΔᐃⵠⲆⲆ: 986,
    ⲆⵠⲆⵠΔⵠⲆ: 987,
    ⲆⲆᐃᐃⲆΔⵠ: 988,
    ⵠⵠⲆᐃⲆ: 989,
    ⵠΔⵠΔᐃΔⵠ: 990,
    ⲆΔΔⲆⵠΔΔ: 991,
    ⲆⵠⵠⵠΔΔⲆ: 992,
    ΔⵠᐃΔᐃⲆΔ: 993,
    ᐃⲆᐃⲆⲆⲆⵠ: 994,
    ⲆⲆᐃᐃΔⵠΔ: 995,
    ⲆⲆⲆⲆⵠᐃⲆ: 996,
    ᐃᐃᐃⲆΔⵠΔ: 997,
    ⲆⵠᐃⲆⲆᐃⲆ: 998,
    ⲆΔΔᐃⵠΔⲆ: 999,
    ⵠᐃⲆᐃΔΔⲆ: 1000,
    ⵠⵠⲆᐃΔΔᐃ: 1001,
    ⵠᐃΔΔⲆⵠᐃ: 1002,
    ᐃⲆⲆΔⲆⲆⲆ: 1003,
    ᐃⲆⵠᐃΔⲆΔ: 1004,
    ΔΔᐃⵠⵠⲆⵠ: 1005,
    ᐃⲆᐃΔΔⲆⵠ: 1006,
    ᐃΔⲆΔΔΔᐃ: 1007,
    ⲆⲆⵠⵠΔⵠᐃ: 1008,
    ᐃⲆⵠΔΔⵠᐃ: 1009,
    ⲆΔᐃᐃⵠⵠⵠ: 1010,
    ᐃΔⵠΔⵠⵠⲆ: 1011,
    ⲆⲆΔⲆΔⲆⲆ: 1012,
    ΔⲆⵠᐃΔᐃΔ: 1013,
    ΔᐃⲆΔΔΔΔ: 1014,
    ᐃᐃⲆᐃᐃⵠΔ: 1015,
    ΔⵠΔⵠᐃᐃΔ: 1016,
    ⲆΔΔᐃⲆᐃⵠ: 1017,
    ⲆⵠⲆⲆⵠΔⲆ: 1018,
    ΔⵠⲆΔΔⲆⵠ: 1019,
    ΔⵠⲆⵠⲆⲆⵠ: 1020,
    ⵠⲆⵠᐃⵠⵠΔ: 1021,
    ⲆᐃⲆΔⲆᐃⵠ: 1022,
    ᐃⲆⲆᐃⲆⵠⲆ: 1023,
    ⲆΔⵠⵠ: 1024,
    ⲆⲆΔⵠ: 1025,
    ΔⵠΔᐃⵠΔⲆ: 1026,
    ⲆᐃΔΔⲆᐃⲆ: 1027,
    ΔⲆΔΔⲆᐃⲆ: 1028,
    ⵠⲆⵠᐃⲆⵠⵠ: 1029,
    ΔΔΔⲆΔᐃⵠ: 1030,
    ΔΔⲆᐃⵠΔⵠ: 1031,
    ΔⵠΔᐃⲆⲆΔ: 1032,
    Δⵠⵠᐃⵠ: 1033,
    ᐃᐃⲆⵠⲆᐃᐃ: 1034,
    ⵠᐃⲆⵠⵠ: 1035,
    ⵠⵠᐃⵠⵠⵠᐃ: 1036,
    ᐃᐃⵠΔⲆ: 1037,
    ᐃᐃⲆᐃⲆⵠᐃ: 1038,
    ⲆΔⲆⲆᐃ: 1039,
    ΔⵠⲆⲆΔⵠⲆ: 1040,
    ΔⲆΔⲆΔ: 1041,
    ⵠⵠᐃᐃⵠ: 1042,
    ΔΔⲆΔⲆⵠΔ: 1043,
    ⲆⲆΔΔᐃᐃⲆ: 1044,
    ⲆⵠⵠⵠᐃⲆⵠ: 1045,
    ΔᐃⲆⲆΔⵠᐃ: 1046,
    ⲆᐃΔⵠⲆΔᐃ: 1047,
    ΔᐃΔⵠⲆΔⵠ: 1048,
    ᐃⲆΔⵠⵠⵠᐃ: 1049,
    ᐃᐃᐃⵠᐃⵠⲆ: 1050,
    ᐃᐃⵠΔⲆⵠᐃ: 1051,
    ⵠⲆᐃⲆΔ: 1052,
    ᐃᐃΔⵠᐃΔⵠ: 1053,
    ᐃᐃⵠⵠᐃ: 1054,
    ⵠⲆΔᐃᐃⲆΔ: 1055,
    ⵠᐃΔᐃΔⲆΔ: 1056,
    ⵠΔᐃⵠⵠⵠⵠ: 1057,
    ⲆⵠⲆⵠΔⲆⵠ: 1058,
    ⲆΔΔᐃⲆⲆΔ: 1059,
    ⵠΔᐃⲆᐃΔᐃ: 1060,
    ΔᐃⵠΔⲆⲆⲆΔΔ: 1061,
    ⲆⵠⲆⵠᐃⲆⲆ: 1062,
    ⵠᐃⲆᐃᐃⲆΔ: 1063,
    ⲆⲆᐃᐃᐃⵠΔⲆⵠ: 1064,
    ⵠⵠⲆⲆᐃΔᐃ: 1065,
    ΔΔΔᐃᐃΔᐃ: 1066,
    ⲆᐃⵠⵠⵠⵠⲆ: 1067,
    ⵠᐃⵠⵠΔΔᐃ: 1068,
    ⵠᐃⲆΔⲆ: 1069,
    ΔⲆⲆⲆⲆⲆΔ: 1070,
    ΔⲆΔΔᐃⵠⲆ: 1071,
    ᐃⵠⵠᐃⲆⲆΔ: 1072,
    ⲆΔⲆⵠⵠΔᐃ: 1073,
    ᐃᐃⵠⲆΔΔⲆ: 1074,
    ΔⵠⲆᐃⵠΔⵠ: 1075,
    ⲆΔᐃΔΔⵠΔ: 1076,
    ⲆᐃᐃⲆⲆᐃᐃ: 1077,
    ⲆⲆⲆᐃᐃΔⲆ: 1078,
    ᐃΔⵠⲆⲆᐃⵠ: 1079,
    ⲆΔⲆⲆⵠΔΔ: 1080,
    ⵠⵠᐃⲆᐃᐃⲆ: 1081,
    ΔⵠΔΔᐃⵠᐃ: 1082,
    ⲆΔⲆΔⲆⲆⵠ: 1083,
    ⲆΔᐃⲆΔ: 1084,
    ⲆⲆⲆⵠΔⵠᐃ: 1085,
    ⵠⵠᐃⲆΔⵠⲆ: 1086,
    ⲆᐃΔⲆᐃᐃⲆ: 1087,
    ΔΔΔⵠΔⵠⵠ: 1088,
    ⵠⵠⵠⵠⵠΔᐃ: 1089,
    ⲆⲆΔΔⵠⲆⲆ: 1090,
    ᐃⵠⲆⲆⵠΔᐃ: 1091,
    ᐃⵠⵠΔⵠᐃⵠ: 1092,
    ᐃⲆᐃⲆⲆⲆᐃ: 1093,
    ⵠⲆΔⲆⲆΔⲆ: 1094,
    ⲆΔᐃΔⵠᐃⲆ: 1095,
    ΔΔΔⲆᐃΔⵠ: 1096,
    ⵠΔᐃⲆⲆΔΔ: 1097,
    ⵠⵠⲆΔⵠΔⵠ: 1098,
    ΔⲆⵠΔᐃ: 1099,
    ΔΔΔⵠΔⲆⲆ: 1100,
    ᐃⲆᐃᐃⲆᐃⵠ: 1101,
    ⲆⵠⲆΔᐃᐃⲆ: 1102,
    ΔⲆΔᐃⵠⲆᐃ: 1103,
    ⵠΔⲆΔΔⵠᐃ: 1104,
    ΔⵠΔΔΔⲆᐃ: 1105,
    ⲆⲆⵠⲆⲆⲆⵠ: 1106,
    ᐃⵠⵠⵠⲆⲆⲆ: 1107,
    ᐃⲆᐃΔⵠᐃⵠ: 1108,
    ⵠⵠⵠᐃⲆᐃⲆ: 1109,
    ⲆΔΔⲆⵠⲆᐃ: 1110,
    ΔⲆΔⲆΔⲆⵠ: 1111,
    ᐃᐃⵠⵠᐃⲆⵠ: 1112,
    ⲆⵠᐃΔⵠⲆΔ: 1113,
    ᐃⲆᐃΔⲆⲆΔ: 1114,
    ΔᐃΔΔⲆⲆΔ: 1115,
    ⲆᐃⵠΔΔⲆᐃ: 1116,
    ⵠᐃᐃⵠΔΔΔ: 1117,
    ⵠΔᐃΔⵠⵠⲆ: 1118,
    ⲆΔⵠᐃⲆⵠᐃ: 1119,
    ⵠⵠΔᐃⵠ: 1120,
    ⵠⲆⲆⲆΔⲆᐃ: 1121,
    ΔⵠⲆᐃΔⲆⲆ: 1122,
    Ⲇⵠⵠᐃᐃⵠᐃ: 1123,
    ⲆᐃΔᐃΔⲆⵠ: 1124,
    ΔⵠᐃᐃⲆΔⲆ: 1125,
    ΔΔᐃΔⲆⲆⲆ: 1126,
    ΔΔᐃⵠⲆΔⵠ: 1127,
    ⲆΔⵠᐃΔⵠⵠ: 1128,
    ᐃⲆⲆΔΔᐃᐃ: 1129,
    ᐃᐃΔΔⵠᐃΔ: 1130,
    ⵠᐃⲆᐃⲆⲆⵠ: 1131,
    ΔΔⵠᐃΔᐃΔ: 1132,
    ᐃᐃᐃⲆⵠⵠⲆ: 1133,
    ᐃⲆⲆᐃⲆⲆΔ: 1134,
    ΔⵠΔⲆⲆᐃⵠ: 1135,
    ᐃΔⵠΔΔⲆΔ: 1136,
    ⲆᐃΔⵠᐃΔΔ: 1137,
    ⵠᐃᐃⲆΔΔⲆ: 1138,
    ⵠᐃⵠⲆⵠⲆⲆ: 1139,
    ⲆᐃⵠΔᐃΔⵠ: 1140,
    ⲆⵠᐃᐃⲆᐃⵠ: 1141,
    ΔⵠᐃᐃⵠⵠΔ: 1142,
    ⲆᐃⲆΔⲆⲆⲆ: 1143,
    ⲆΔᐃⵠᐃⲆΔ: 1144,
    ⵠᐃᐃⵠⵠΔⲆ: 1145,
    ΔⲆΔⵠⲆⵠⵠ: 1146,
    ᐃⲆⲆΔⵠⵠⵠ: 1147,
    ⲆⵠᐃᐃᐃᐃΔ: 1148,
    ᐃΔΔⲆⵠᐃΔ: ["#E9CF96", "#144940"],
    ⲆΔⲆⵠΔΔᐃ: 1149,
    ΔⲆⵠᐃΔⵠΔ: 1150,
    ᐃⵠΔⲆᐃⵠⵠ: 1151,
    ΔⵠⵠⲆⲆⵠⵠ: 1152,
    ΔᐃΔⲆᐃⵠΔ: 1153,
    ΔΔⲆᐃΔΔⵠ: 1154,
    ΔⲆᐃⲆⵠⲆⲆ: 1155,
    ᐃΔΔⲆΔ: 1156,
    ⲆᐃⲆⵠᐃΔⵠ: 1157,
    ΔᐃΔᐃⵠᐃᐃ: 1158,
    ⲆⲆᐃᐃⲆΔΔ: 1159,
    ΔⲆⲆΔΔΔᐃ: 1160,
    ⲆⵠⲆᐃΔⲆⲆ: 1161,
    ΔᐃⲆᐃᐃⲆⵠ: 1162,
    ⵠⲆΔΔΔⵠⲆ: 1163,
    ⵠⲆΔⲆᐃΔᐃ: 1164,
    ⲆᐃⲆΔᐃᐃⲆ: 1165,
    ΔᐃⵠΔΔᐃΔ: 1166,
    ⵠⲆᐃΔᐃⵠⲆ: 1167,
    ΔⵠⵠᐃΔᐃΔ: 1168,
    ΔⵠᐃΔᐃⲆᐃ: 1169,
    ᐃⲆΔⵠᐃⵠᐃ: 1170,
    ⵠⵠᐃⵠⵠⲆⵠ: 1171,
    ⵠΔⲆΔᐃᐃΔ: 1172,
    ⵠⵠᐃⵠᐃⲆⵠ: 1173,
    ⲆⲆⲆΔⲆⲆⵠ: 1174,
    ⵠⲆⲆⵠⵠⲆᐃ: 1175,
    ᐃⵠⵠⲆⲆⲆⲆ: 1176,
    ᐃΔΔΔᐃᐃⵠ: 1177,
    ⲆᐃⲆⲆΔᐃⲆ: 1178,
    ΔᐃᐃⵠΔᐃⲆ: 1179,
    ΔⲆⵠⵠΔᐃᐃ: 1180,
    ⵠⵠΔⲆⲆΔⲆ: 1181,
    ΔᐃⵠΔᐃᐃⲆ: 1182,
    ᐃⵠⲆΔΔⲆᐃ: 1183,
    ΔΔⲆⲆⵠΔΔ: 1184,
    ΔⵠᐃⵠΔΔⲆ: 1185,
    ΔⲆⲆⵠⵠⲆᐃ: 1186,
    ⲆᐃⲆᐃᐃⵠΔ: 1187,
    ΔΔⵠⲆⵠΔⵠ: 1188,
    ᐃⲆΔⲆⵠΔΔ: 1189,
    ᐃΔⵠᐃᐃⲆⲆ: 1190,
    ᐃⲆⲆᐃⲆᐃⵠ: 1191,
    ⲆᐃᐃⵠⲆᐃΔ: 1192,
    ⲆⵠⲆᐃⵠΔⵠ: 1193,
    ΔⲆⵠᐃᐃΔⵠ: 1194,
    ⲆᐃᐃᐃⲆⲆᐃ: 1195,
    ΔΔᐃΔΔⲆᐃ: 1196,
    ⵠⵠΔⲆⵠΔᐃ: 1197,
    ⲆⵠⲆⵠⵠΔᐃ: 1198,
    ⲆᐃΔΔᐃᐃⵠ: 1199,
    ⵠᐃΔⵠᐃΔᐃ: 1200,
    ᐃⵠΔᐃᐃⲆᐃ: 1201,
    ⵠⵠⲆΔⵠⵠⲆ: 1202,
    ᐃΔⲆⲆΔΔᐃ: 1203,
    ΔⲆⲆΔᐃᐃᐃ: 1204,
    ⵠⲆⲆⵠⲆⲆⲆ: 1205,
    ⵠᐃⵠΔⲆᐃΔ: 1206,
    ⲆΔⲆⵠⲆⵠⲆ: 1207,
    ΔΔⲆᐃᐃⵠΔ: 1208,
    ⵠᐃⲆΔΔᐃΔ: 1209,
    ΔⲆΔᐃⲆⵠⵠ: 1210,
    ⵠᐃⲆⲆⲆⵠⲆ: 1211,
    ⵠΔᐃⵠⲆⲆᐃ: 1212,
    ⵠⵠⲆⵠⵠⵠΔ: 1213,
    ⵠⲆⲆⲆᐃᐃⲆ: 1214,
    ⵠⲆᐃⵠⵠΔΔ: 1215,
    ᐃⵠⵠⲆΔᐃᐃ: 1216,
    ⵠⵠᐃᐃᐃⵠΔ: 1217,
    ⵠᐃⲆᐃΔ: 1218,
    ⲆΔᐃⵠⵠΔⲆ: 1219,
    ᐃΔⲆΔⵠ: 1220,
    ⲆⲆᐃⲆΔΔᐃ: 1221,
    ᐃⲆⲆᐃⵠΔⲆ: 1222,
    ᐃΔⲆⵠⵠⲆᐃ: 1223,
    ᐃⵠⵠᐃΔⲆΔ: 1224,
    ΔΔⵠΔᐃⵠΔ: 1225,
    ⲆᐃⵠⲆᐃᐃⲆ: 1226,
    ᐃᐃⲆⲆⵠⲆΔ: 1227,
    ⲆΔⵠⵠᐃⲆⲆ: 1228,
    Ⲇᐃᐃⵠⵠⵠᐃ: 1229,
    ΔⲆⵠᐃⵠᐃᐃ: 1230,
    ⲆᐃᐃⵠᐃᐃⲆ: 1231,
    ᐃΔⲆⲆᐃᐃΔ: 1232,
    ⲆⵠΔΔⵠⲆᐃ: 1233,
    ⲆᐃΔⵠⵠΔⲆ: 1234,
    ᐃⲆᐃⵠΔⲆᐃ: 1235,
    ᐃⲆΔⵠⲆᐃⲆ: 1236,
    ⲆΔⲆⵠⵠᐃⲆ: 1237,
    ᐃᐃΔᐃⲆⲆⵠ: 1238,
    ⲆⲆⲆⵠⵠⵠⵠ: 1239,
    ΔⵠᐃΔⵠⲆΔ: 1240,
    ⵠᐃⲆᐃⵠᐃⵠ: 1241,
    ΔᐃΔⵠΔᐃᐃ: 1242,
    ⲆΔΔΔⲆⲆΔ: 1243,
    ΔᐃⵠⲆΔⲆⲆ: 1244,
    ᐃⵠⲆᐃⵠⲆⲆ: 1245,
    ΔⵠΔᐃᐃⲆⵠ: 1246,
    ΔⵠⲆⲆᐃᐃΔ: 1247,
    ΔⵠⲆᐃᐃᐃⲆ: 1248,
    ΔⲆⵠΔⲆΔᐃ: 1249,
    ᐃᐃⵠⵠⵠᐃⵠ: 1250,
    ᐃΔΔⲆⵠΔᐃ: 1251,
    ⲆⲆᐃⲆⲆᐃⲆ: 1252,
    ⲆᐃᐃⵠΔΔⵠ: 1253,
    ᐃⲆⵠᐃΔΔᐃ: 1254,
    ΔⵠⵠⲆΔⲆᐃ: 1255,
    ΔΔⵠⵠᐃⲆΔ: 1256,
    ⵠΔⵠⲆⵠⵠΔ: 1257,
    ⲆᐃΔΔᐃᐃΔ: 1258,
    ΔⵠⵠΔΔⵠⵠ: 1259,
    ⲆΔΔᐃᐃᐃᐃ: 1260,
    ⵠⲆⲆᐃⵠᐃⲆ: 1261,
    ᐃⵠΔΔⵠΔᐃ: 1262,
    ΔⵠΔΔⲆᐃᐃ: 1263,
    ⲆⵠᐃⲆᐃᐃⲆ: 1264,
    ᐃΔᐃⵠᐃⲆⲆ: 1265,
    ᐃΔⲆⵠⲆⵠⵠ: 1266,
    ᐃⵠᐃᐃΔⵠⲆ: 1267,
    ⵠⵠΔⲆΔⵠᐃ: 1268,
    ᐃΔᐃΔⲆⲆᐃ: 1269,
    ⵠⲆⵠᐃᐃⲆⲆ: 1270,
    ΔΔⲆᐃᐃⲆⲆ: 1271,
    ⲆΔⲆⵠⵠⲆᐃ: 1272,
    ⲆΔΔⵠΔⲆΔ: 1273
  };
  ws = 0;
  const ys = 13;
  const zs = 16;
  const eh = 8;
  var ih = {
    ⲆⵠⲆⲆᐃ: 0,
    ᐃᐃⲆΔᐃ: 1,
    Δⵠⵠⵠⵠ: 2,
    ⵠⵠᐃⲆⵠ: 3,
    ⲆΔⲆⵠΔ: 4,
    ᐃⲆΔⵠᐃ: 5,
    Ⲇⵠᐃᐃᐃ: 6,
    ⵠᐃⲆⲆᐃ: 7,
    ⲆᐃΔⵠⲆ: 8,
    ΔⵠᐃᐃⲆ: 9,
    ΔΔΔⲆⲆ: 10,
    ⲆᐃᐃⵠⲆ: 11,
    ⵠᐃΔΔᐃ: 12,
    ⵠΔⲆⵠⵠ: 13,
    ⵠΔⵠⵠΔ: 14,
    ⲆⵠⲆΔΔ: 15,
    ⵠⲆΔⵠᐃ: 16,
    ⵠⲆⵠⵠᐃ: 17,
    ⵠᐃΔⵠⵠ: 18,
    ⵠⲆΔᐃⲆ: 19,
    ⵠⵠⲆⲆΔ: 20,
    ⲆⵠⲆᐃΔ: 21,
    ⲆⵠΔᐃΔ: 22,
    ⲆᐃΔᐃΔ: 23,
    Δⵠᐃᐃⵠ: 24,
    ΔᐃⵠᐃⲆ: 25,
    ⵠᐃⵠⵠΔ: 26,
    ⵠΔⲆⲆᐃ: 27,
    ᐃⵠᐃⵠⲆ: 28,
    ⵠⲆⲆⲆΔ: 29,
    ᐃⲆⵠᐃΔ: 30,
    ⵠᐃⵠⲆᐃ: 31,
    ΔⵠᐃⵠΔ: 32,
    ᐃⵠᐃᐃⲆ: 33,
    ΔᐃΔΔΔ: 34,
    ⵠⲆᐃⲆⵠ: 35,
    ⲆⲆⲆΔΔ: 36,
    ᐃΔᐃᐃⲆ: 37,
    ⵠΔⵠⵠᐃ: 38,
    ᐃⲆΔⵠⵠ: 39,
    ⲆΔΔΔⵠ: 40,
    ΔΔᐃⲆⵠ: 41,
    Ⲇⵠⵠⵠⵠ: 42,
    ᐃᐃⲆⲆᐃ: 43,
    ᐃⵠΔᐃⲆ: 44,
    ᐃⲆⲆᐃⵠ: 45,
    ⲆᐃⲆⵠᐃ: 46,
    ΔⵠⲆᐃΔ: 47,
    ᐃᐃⵠⲆⲆ: 48,
    ΔΔᐃΔⵠ: 49,
    ᐃⵠⵠᐃⲆ: 50,
    ᐃⵠⲆᐃⵠ: 51,
    ΔᐃᐃᐃⲆ: 52,
    ΔᐃⲆΔⵠ: 53,
    ⲆⲆΔΔᐃ: 54,
    ⲆᐃⲆⲆⲆ: 55,
    ΔⲆⵠΔⵠ: 56,
    ⵠⲆⵠⵠΔ: 57,
    ⲆⵠⵠⲆΔ: 58,
    ᐃᐃΔᐃᐃ: 59,
    ⲆᐃⵠᐃΔ: 60,
    ⵠΔⵠⲆⵠ: 61,
    ΔⵠᐃΔΔ: 62,
    ᐃΔⲆᐃΔ: 63,
    ⵠⵠᐃⵠⲆ: 64,
    ᐃⵠᐃⲆΔ: 65,
    ΔᐃΔⲆⲆ: 66,
    ᐃⵠᐃⲆᐃ: 67,
    ⵠⵠΔᐃᐃ: 68,
    ΔᐃΔⵠⵠ: 69,
    ⲆⲆΔᐃᐃ: 70,
    ⵠᐃΔΔⵠ: 71,
    ⵠⲆⵠΔᐃ: 72,
    ⲆⲆᐃⵠⵠ: 73,
    ⲆΔⵠⲆⵠ: 74,
    ᐃⲆⵠΔⲆ: 75,
    ⵠΔΔⲆⲆ: 76,
    ΔⵠⵠⲆΔ: 77,
    ΔΔΔⲆᐃ: 78,
    ᐃⵠΔⵠΔ: 79,
    ΔⵠⵠⲆⲆ: 80,
    ᐃΔᐃΔΔ: 81,
    ⵠΔᐃⵠⵠ: 82,
    ⲆⲆⵠⲆⲆ: 83,
    ᐃⵠⲆΔᐃ: 84,
    ⲆⲆᐃᐃΔ: 85,
    ΔᐃⲆⲆᐃ: 86,
    ᐃΔᐃΔⲆ: 87,
    ᐃⲆⲆⵠΔ: 88,
    ⵠΔΔΔΔ: 89,
    ⲆᐃⵠΔΔ: 90,
    ΔⲆΔⲆⵠ: 91,
    ⲆᐃΔΔⲆ: 92,
    ΔⵠⲆᐃⲆ: 93,
    ΔⵠΔᐃⵠ: 94,
    ⵠᐃⵠΔⲆ: 95,
    ⵠΔⲆᐃΔ: 96,
    ⲆΔΔᐃⵠ: 97,
    ⵠᐃⲆⲆΔ: 98,
    ΔⲆᐃⲆⵠ: 99,
    ⲆⲆⲆⲆ: 100,
    ⲆΔΔᐃᐃ: 101,
    ᐃⵠΔⲆⲆ: 102,
    ᐃⲆΔⵠⲆ: 103,
    ⵠⵠⵠΔⲆ: 104,
    ᐃΔΔⵠᐃ: 105,
    ⲆΔⵠᐃᐃ: 106,
    ⵠΔⵠᐃΔ: 107,
    ⲆᐃⲆΔᐃ: 108,
    ΔΔⲆᐃⲆ: 109,
    ΔⲆⵠⲆⲆ: 110,
    ΔΔⲆⲆᐃ: 111,
    ⲆⲆⵠⲆⲆⲆⲆ: 112,
    ᐃⵠΔᐃᐃᐃΔ: 113,
    ᐃᐃᐃⵠᐃ: 114,
    ⵠΔⲆΔᐃ: 115,
    ΔΔⵠⲆⵠ: 116,
    ⲆⵠΔⵠⵠ: 117,
    ᐃⵠⵠΔⵠ: 118,
    ᐃⵠⵠⵠΔ: 119,
    ΔⲆᐃΔᐃ: 120,
    ᐃⲆΔᐃΔ: 121,
    ᐃⵠᐃᐃⵠ: 122,
    ⵠⵠⵠⵠΔ: 123,
    ⲆⲆᐃⲆᐃ: 124,
    ⲆⲆΔⵠⵠ: 125,
    ΔⵠΔⵠⲆ: 126,
    ᐃᐃᐃᐃⵠ: 127,
    ΔΔⲆΔⲆ: 128,
    ᐃⵠΔᐃᐃ: 129,
    ⲆⵠⲆⲆⵠ: 130,
    ⲆⵠⲆⵠᐃ: 131,
    ⵠⵠΔΔᐃ: 132,
    ⵠΔΔΔᐃ: 133,
    ΔᐃᐃΔᐃ: 134,
    ⵠⵠⵠⲆⲆ: 135,
    ΔΔⲆⲆΔ: 136,
    ⵠᐃⵠᐃΔ: 137,
    ᐃΔⲆᐃⲆ: 138,
    ΔΔⵠⵠⲆ: 139,
    ⵠⲆⵠⵠⵠ: 140,
    ⵠⵠⲆᐃΔ: 141,
    ᐃⵠΔⵠᐃ: 142,
    ⲆΔᐃⵠΔ: 143,
    ΔⲆΔⵠΔ: 144,
    ⲆⲆΔⲆⲆ: 145,
    ⵠⲆⲆⲆᐃ: 146,
    ⲆⲆⲆΔⵠ: 147,
    ΔⵠᐃᐃΔ: 148,
    ᐃΔΔⲆⵠ: 149,
    ΔⵠᐃⲆᐃ: 150,
    ⲆᐃⲆᐃΔ: 151,
    ᐃᐃⵠⲆⵠ: 152,
    ΔᐃⲆⵠᐃ: 153,
    ᐃΔΔᐃⵠ: 154,
    ⵠⵠⵠᐃᐃ: 155,
    ΔⵠΔⲆⵠ: 156,
    ΔΔΔΔΔ: 157,
    ΔΔⵠΔΔ: 158,
    ΔΔΔⵠΔ: 159,
    ⵠⲆⲆΔⵠ: 160,
    ᐃΔΔⵠⵠ: 161,
    ⵠⲆⵠΔΔ: 162,
    ᐃΔⵠΔΔ: 163,
    ⲆᐃΔⲆⲆ: 164,
    ᐃⲆᐃΔᐃ: 165,
    ⵠⲆⲆΔᐃ: 166,
    ΔΔⲆⵠᐃ: 167,
    ⲆᐃⵠⲆΔ: 168,
    ⲆⲆΔⵠᐃ: 169,
    ⵠⵠⲆⲆⲆ: 170,
    ⵠⲆⲆᐃᐃ: 171,
    ⲆΔΔⲆⲆ: 172,
    ΔⵠᐃⵠⲆ: 173,
    ⲆᐃΔⲆΔ: 174,
    Δᐃᐃᐃⵠ: 175,
    ⲆⲆⲆΔⲆ: 176
  };
  const th = 3;
  const nh = 7;
  const oh = 100;
  ws = 0;
  var ah = {
    ⵠⲆᐃⲆⵠ: 0,
    ᐃⲆΔⵠᐃ: 1,
    ΔⲆⵠΔⲆ: 2,
    Ⲇⵠᐃᐃᐃ: 3,
    ⵠᐃⲆⲆᐃ: 4,
    ⲆⲆⲆΔΔ: 5,
    ᐃΔᐃᐃⲆ: 6,
    Ⲇᐃᐃⵠᐃ: 7,
    ⲆΔⲆⵠΔ: 8,
    ᐃᐃⲆⲆⲆ: 9,
    ⲆⲆⵠⲆⲆ: 10,
    ᐃⵠⲆΔᐃ: 11,
    ΔᐃⵠᐃⲆ: 12,
    ⵠᐃⵠⵠΔ: 13,
    ⵠΔⲆⲆᐃ: 14,
    ᐃⵠᐃⵠⲆ: 15,
    ⵠᐃⵠⲆᐃ: 16,
    ΔⵠᐃⵠΔ: 17,
    ᐃⵠᐃᐃⲆ: 18,
    ᐃⲆΔⵠⵠ: 19,
    ⵠᐃⵠΔⲆ: 20,
    ⵠΔⲆᐃΔ: 21,
    ⲆΔΔᐃⵠ: 22,
    ΔⵠⵠⲆⲆ: 23,
    ᐃΔᐃΔΔ: 24,
    ᐃⲆⲆⵠΔ: 25,
    ⵠΔΔΔΔ: 26,
    ⲆᐃⵠΔΔ: 27,
    Δⵠᐃᐃⵠ: 28,
    ⲆⲆⲆⲆ: 29,
    ⵠΔⵠⵠᐃ: 30,
    ⲆᐃΔⵠⲆ: 31,
    ΔⵠᐃᐃⲆ: 32,
    ⵠⲆⲆⲆΔ: 33,
    ᐃⲆⵠᐃΔ: 34,
    ΔΔΔⲆⲆ: 35,
    ⲆᐃᐃⵠⲆ: 36,
    ⵠᐃΔΔᐃ: 37,
    ⵠΔⲆⵠⵠ: 38,
    ⵠΔⵠⵠΔ: 39,
    ⲆⲆᐃᐃΔ: 40,
    ᐃᐃⵠΔΔ: 41,
    ⵠᐃᐃΔⵠ: 42,
    ΔⲆΔⲆⵠ: 43,
    ⲆᐃΔΔⲆ: 44,
    ⲆⵠⲆΔΔ: 45,
    ⵠⲆΔⵠᐃ: 46,
    ΔⵠΔᐃⵠ: 47,
    ΔⵠⲆᐃⲆ: 48,
    ⲆⵠⲆᐃΔ: 49,
    ⵠⲆⵠⵠᐃ: 50,
    ⵠᐃΔⵠⵠ: 51,
    ⵠⲆΔᐃⲆ: 52,
    ⲆⵠΔᐃΔ: 53,
    ⲆᐃΔᐃΔ: 54,
    ᐃⵠᐃᐃⵠ: 55,
    ⵠⵠⵠⵠΔ: 56,
    ΔᐃΔΔΔ: 57,
    ᐃΔᐃΔⲆ: 58,
    ΔⵠΔⵠⲆ: 59,
    ᐃᐃᐃᐃⵠ: 60,
    ΔΔⲆΔⲆ: 61,
    ᐃⵠΔᐃᐃ: 62,
    ⲆⵠⲆⲆⵠ: 63,
    ⲆⵠⲆⵠᐃ: 64,
    ⵠΔΔΔᐃ: 65,
    ⵠⵠⵠⲆⲆ: 66,
    ⵠᐃⵠᐃΔ: 67,
    ΔΔⵠⵠⲆ: 68,
    ⵠⵠⲆᐃΔ: 69,
    ⲆΔᐃⵠΔ: 70,
    ⲆⲆΔⲆⲆ: 71,
    ⵠⲆⲆⲆᐃ: 72,
    ⲆⲆⲆΔⵠ: 73,
    ΔⵠᐃᐃΔ: 74,
    ᐃΔΔⲆⵠ: 75,
    ΔⵠᐃⲆᐃ: 76,
    ⲆᐃⲆᐃΔ: 77,
    ᐃᐃⵠⲆⵠ: 78,
    ΔᐃⲆⵠᐃ: 79,
    ⵠᐃⲆⲆΔ: 80,
    ΔⲆᐃⲆⵠ: 81,
    ⵠΔᐃⵠⵠ: 82,
    ᐃΔΔᐃⵠ: 83,
    ⵠⵠⵠᐃᐃ: 84,
    ΔⵠΔⲆⵠ: 85,
    ΔΔΔΔΔ: 86,
    ⵠⵠᐃⲆⲆ: 87,
    ΔᐃⲆⲆᐃ: 88,
    ᐃⲆᐃΔᐃ: 89,
    ΔⵠᐃⵠⲆ: 90,
    ⲆⲆⲆΔⲆ: 91,
    ⲆᐃΔⲆΔ: 92,
    Δᐃᐃᐃⵠ: 93,
    ΔΔⲆⵠᐃ: 94,
    ⲆᐃⵠⲆΔ: 95,
    ⲆⲆΔⵠᐃ: 96,
    ⵠⵠⲆⲆⲆ: 97,
    ⵠⲆⲆᐃᐃ: 98,
    ⲆΔΔⲆⲆ: 99,
    ⲆᐃΔⵠᐃ: 100,
    ⵠⵠΔΔᐃ: 101,
    ΔᐃᐃΔᐃ: 102,
    ΔΔⲆⲆΔ: 103,
    ᐃΔⲆᐃⲆ: 104,
    ⵠⲆⵠⵠⵠ: 105,
    ᐃⵠΔⵠᐃ: 106,
    ΔⲆΔⵠΔ: 107,
    ᐃⵠᐃᐃ: 108,
    ᐃⲆΔⲆ: 109,
    ⲆⲆⲆᐃⵠ: 110,
    ᐃⵠⵠᐃ: 111,
    ⵠⲆᐃᐃ: 112,
    ⲆⵠⲆⲆᐃ: 113,
    ⵠⵠᐃⲆⵠ: 114,
    ⲆΔΔΔⵠ: 115,
    ⵠⵠᐃⵠΔ: 116,
    ΔΔᐃΔⵠ: 117,
    ᐃᐃⲆΔᐃ: 118,
    Δⵠⵠⵠⵠ: 119,
    ⲆΔΔᐃᐃ: 120,
    ᐃΔⲆᐃ: 121,
    ᐃᐃΔᐃᐃ: 122,
    ⵠᐃΔΔⵠ: 123,
    ᐃⵠᐃⲆΔ: 124,
    ⲆΔⵠᐃᐃ: 125,
    ⲆᐃᐃΔⵠ: 126,
    ΔΔⲆⲆᐃ: 127,
    ΔⲆⵠⲆⲆ: 128,
    ⵠⵠⵠΔΔ: 129,
    ⵠⵠⲆⲆΔ: 130,
    ⵠΔⲆⲆⵠ: 131,
    ΔΔᐃⲆⵠ: 132,
    ΔᐃᐃᐃⲆ: 133,
    ⲆᐃΔᐃᐃ: 134,
    ᐃᐃᐃⵠᐃ: 135,
    ΔᐃⲆΔⵠ: 136,
    ᐃᐃⵠⲆᐃ: 137,
    ᐃⵠⵠᐃⲆ: 138,
    ΔⵠⵠᐃⲆ: 139,
    ⵠᐃΔⲆΔ: 140,
    ΔΔⲆᐃⲆ: 141,
    ᐃᐃᐃⵠⲆ: 142,
    ᐃⵠⲆᐃⵠ: 143,
    ⲆⲆᐃⲆᐃ: 144,
    ⲆⲆΔⵠⵠ: 145,
    ⲆⲆⲆᐃΔ: 146,
    ᐃⵠΔⲆⲆ: 147,
    ᐃⲆΔⵠⲆ: 148,
    ᐃᐃᐃⵠΔ: 149,
    ⵠⲆᐃΔⵠ: 150,
    ⵠΔⲆΔᐃ: 151,
    ΔΔⵠⲆⵠ: 152,
    ⲆⵠΔⵠⵠ: 153,
    ᐃⵠⵠΔⵠ: 154,
    ᐃⵠⵠⵠΔ: 155,
    ΔⲆᐃΔᐃ: 156,
    ᐃⲆΔᐃΔ: 157,
    ⵠⵠⵠΔⲆ: 158,
    ᐃΔΔⵠᐃ: 159,
    ᐃⵠᐃⲆᐃ: 160,
    ⲆⵠⲆⵠⵠ: 161,
    ⲆᐃⲆⲆⲆ: 162,
    ΔⲆⵠΔⵠ: 163,
    ⵠⲆⵠⵠΔ: 164,
    ⲆⵠⵠⲆΔ: 165,
    ⵠΔⵠⲆⵠ: 166,
    ᐃⵠΔⵠΔ: 167,
    ⵠⵠΔᐃᐃ: 168,
    ΔᐃΔⵠⵠ: 169,
    ⲆⲆΔᐃᐃ: 170,
    ΔⵠᐃΔΔ: 171,
    ᐃΔⲆᐃΔ: 172,
    ⵠⵠᐃⵠⲆ: 173,
    ⵠⲆⲆⲆⵠ: 174,
    ⲆⵠⵠᐃΔ: 175,
    ᐃᐃⲆᐃⲆ: 176,
    ⵠᐃᐃⲆΔ: 177,
    ΔᐃⵠΔᐃ: 178,
    ᐃⵠΔᐃⵠ: 179,
    ΔΔⵠΔΔ: 180,
    ΔΔΔⵠΔ: 181,
    ⵠⲆⲆΔⵠ: 182,
    ᐃΔΔⵠⵠ: 183,
    ⵠⲆⲆⵠᐃ: 184,
    ΔᐃⲆᐃⲆ: 185,
    ᐃΔⵠᐃΔ: 186,
    ⵠⵠⵠⵠⲆ: 187,
    Ⲇⵠⵠⵠⵠ: 188,
    ΔⲆⵠᐃᐃ: 189,
    ⵠΔⵠᐃΔ: 190,
    ᐃᐃⲆⲆᐃ: 191,
    ΔⵠᐃⲆΔ: 192,
    ᐃⵠΔᐃⲆ: 193,
    ⵠΔⵠΔⵠ: 194,
    ⲆⲆΔΔᐃ: 195,
    ⲆⵠΔⵠⲆ: 196,
    ᐃΔⲆᐃᐃ: 197,
    ⵠⲆⵠΔΔ: 198,
    ⲆᐃᐃⵠΔ: 199,
    ᐃⵠΔᐃΔ: 200,
    ⲆⵠⵠⲆᐃ: 201,
    Ⲇⵠⵠᐃ: 202,
    ⵠΔΔⵠⲆ: 203,
    ᐃⲆⲆᐃⵠ: 204,
    ᐃⲆΔⲆⲆ: 205,
    ⲆᐃⲆⵠᐃ: 206,
    ⵠᐃⲆΔᐃ: 207,
    ΔⵠⲆᐃΔ: 208,
    ᐃᐃⵠᐃᐃ: 209,
    ᐃᐃⵠⲆⲆ: 210,
    ⲆⲆⲆⵠⵠ: 211,
    ⲆⲆᐃⵠⵠ: 212,
    ⲆΔⵠⲆⵠ: 213,
    ᐃⲆⵠΔⲆ: 214,
    ⵠΔΔⲆⲆ: 215,
    ΔⵠⵠⲆΔ: 216,
    ⲆᐃⵠᐃΔ: 217,
    ΔᐃΔⲆⲆ: 218,
    ⵠⲆⵠΔᐃ: 219,
    ΔΔΔⲆᐃ: 220,
    ⲆᐃⲆΔᐃ: 221,
    ⵠⵠⲆΔΔ: 222,
    ᐃΔⵠΔΔ: 223,
    ⲆᐃΔⲆⲆ: 224,
    ⵠⵠΔⵠⲆ: 225,
    ᐃᐃⵠⵠᐃ: 226,
    ⵠᐃⲆΔⲆ: 227,
    ⲆΔᐃⲆΔ: 228,
    ΔⲆⵠΔᐃ: 229,
    ⵠⲆⲆΔᐃ: 230,
    ᐃⵠⲆⲆΔ: 231,
    ⲆⵠᐃⲆΔ: 232,
    ⵠⵠⲆᐃⲆ: 233,
    ΔᐃΔⵠΔ: 234,
    ᐃᐃⵠᐃⲆᐃᐃ: 235,
    ᐃᐃΔᐃⲆⵠⲆ: 236,
    ΔⲆⵠᐃⲆ: 237,
    ΔᐃⲆⲆΔ: 238,
    ᐃΔⲆΔⵠ: 239,
    ᐃⵠᐃᐃΔ: 240
  };
  const rh = 16;
  var sh = {
    ΔΔΔΔᐃ: 4,
    ᐃⲆⵠⵠⵠ: 5,
    ᐃΔΔΔᐃ: 2,
    ΔⲆⲆΔⲆ: 0,
    ΔⲆⲆΔᐃ: 3,
    ᐃᐃΔⲆ: 1
  };
  const hh = 4;
  const gh = 0;
  const lh = 12;
  var uh = [];
  uh[109] = {
    name: "Wood",
    ⵠΔ: 316,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[108] = {
    name: "Stone",
    ⵠΔ: 315,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const bh = 16;
  uh[111] = {
    name: "Gold",
    ⵠΔ: 297,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const dh = 256;
  uh[112] = {
    name: "Diamond",
    ⵠΔ: 298,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const vh = 255;
  uh[121] = {
    name: "Amethyst",
    ⵠΔ: 418,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[2] = {
    name: "Rabbit fur",
    ⵠΔ: 368,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[174] = {
    name: "Wolf fur",
    ⵠΔ: 393,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const mh = 16;
  function ch(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function ph(a) {
    return jg.String.fromCharCode(a);
  }
  uh[237] = {
    name: "Boar fur",
    ⵠΔ: 1162,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ch = 5;
  uh[100] = {
    name: "Firefly",
    ⵠΔ: 1164,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[101] = {
    name: "Wood arrow",
    ⵠΔ: 1166,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[102] = {
    name: "Stone arrow",
    ⵠΔ: 1169,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const fh = $i;
  const zh = 10;
  uh[103] = {
    name: "Gold arrow",
    ⵠΔ: 1172,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[104] = {
    name: "Diamond arrow",
    ⵠΔ: 1175,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[105] = {
    name: "Amethyst arrow",
    ⵠΔ: 1178,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const yh = 17;
  uh[106] = {
    name: "Reidite arrow",
    ⵠΔ: 1181,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const wh = 100;
  uh[107] = {
    name: "Dragon arrow",
    ⵠΔ: 1184,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[146] = {
    name: "Winter fur",
    ⵠΔ: 505,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[240] = {
    name: "Fur mammoth",
    ⵠΔ: 1233,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[161] = {
    name: "Web",
    ⵠΔ: 305,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[116] = {
    name: "Meat",
    ⵠΔ: 300,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ph = 11;
  uh[137] = {
    name: "Fish",
    ⵠΔ: 662,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[129] = {
    name: "Kraken skin",
    ⵠΔ: 624,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[139] = {
    name: "Piranha scales",
    ⵠΔ: 674,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[142] = {
    name: "Ice",
    ⵠΔ: 142,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[126] = {
    name: "Sand",
    ⵠΔ: 609,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const kh = 9;
  uh[140] = {
    name: "Dirt",
    ⵠΔ: 140,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[110] = {
    name: "Berrie",
    ⵠΔ: 277,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ah = 18;
  uh[131] = {
    name: "Flour",
    ⵠΔ: 629,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[134] = {
    name: "Flour",
    ⵠΔ: 639,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[178] = {
    name: "Special fur peasant",
    ⵠΔ: 178,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const xh = 15;
  const Jh = 2;
  const Mh = Ij;
  const Bh = 15;
  const Dh = Qk;
  const Ih = 20;
  const Eh = 4;
  const Sh = 255;
  uh[179] = {
    name: "Special fur hood",
    ⵠΔ: 179,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Qh = 11;
  uh[189] = {
    name: "Pumpkin",
    ⵠΔ: 814,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[192] = {
    name: "Garlic",
    ⵠΔ: 840,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const _h = 4;
  uh[194] = {
    name: "Thornbush",
    ⵠΔ: 850,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[205] = {
    name: "Carrot",
    ⵠΔ: 955,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Fh = 6;
  const Rh = 3;
  const jh = 19;
  uh[207] = {
    name: "Tomato",
    ⵠΔ: 965,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[209] = {
    name: "Watermelon",
    ⵠΔ: 972,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Lh = 8;
  uh[211] = {
    name: "Aloe Vera",
    ⵠΔ: 987,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Gh = 20;
  const Wh = os;
  uh[222] = {
    name: "Penguin Feather",
    ⵠΔ: 1035,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[231] = {
    name: "Hawk Feather",
    ⵠΔ: 1037,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[232] = {
    name: "Vulture Feather",
    ⵠΔ: 1039,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[233] = {
    name: "Cactus",
    ⵠΔ: 1154,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Nh = 4;
  const qh = 7;
  const Oh = 1;
  const Hh = 15;
  const Uh = 12;
  const Yh = 5;
  const Kh = 13;
  uh[236] = {
    name: "Cactus",
    ⵠΔ: 1160,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[235] = {
    name: "Pitchfork Part",
    ⵠΔ: 1158,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[238] = {
    name: "Emerald Machine",
    ⵠΔ: 1187,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  function Xh(a) {
    return jg.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⵠⲆⵠⲆΔΔΔⵠⵠ: 1518608,
      ⲆᐃᐃΔⵠⵠᐃ: 3473604,
      ⵠⵠΔᐃᐃΔⲆⲆΔ: 13171591,
      ᐃᐃᐃⵠⵠᐃΔ: 2930093
    };
  })();
  const Vh = 1;
  const Zh = 255;
  const $h = 14;
  const eg = 4;
  const ig = 15;
  uh[234] = {
    name: "Emerald",
    ⵠΔ: 1156,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[41] = {
    name: "Christmas Hat",
    ⵠΔ: 880,
    ᐃΔᐃΔ: 0
  };
  const tg = Qk;
  const ng = 10;
  uh[42] = {
    name: "Elf Hat",
    ⵠΔ: 882,
    ᐃΔᐃΔ: 0
  };
  uh[201] = {
    name: "Garland",
    ⵠΔ: 870,
    ᐃΔᐃΔ: 0,
    ⲆΔⵠⲆ: 0
  };
  uh[200] = {
    name: "Candy",
    ⵠΔ: 200,
    ᐃΔᐃΔ: 0
  };
  uh[199] = {
    name: "Sugar Cane",
    ⵠΔ: 865,
    ᐃΔᐃΔ: 0
  };
  uh[9] = {
    name: "Pirate Sword",
    ⵠΔ: 860,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[196] = {
    name: "Crab Stick",
    ⵠΔ: 196,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[202] = {
    name: "Reidite",
    ⵠΔ: 938,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[203] = {
    name: "Flame",
    ⵠΔ: 936,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const og = 1;
  uh[113] = {
    name: "Campfire",
    ⵠΔ: 302,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const ag = 3;
  uh[198] = {
    name: "Bed",
    ⵠΔ: 909,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const rg = 14;
  const sg = 16;
  const hg = Qq;
  uh[114] = {
    name: "Workbench",
    ⵠΔ: 262,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[0] = {
    name: "Stone sword",
    ⵠΔ: 254,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const gg = 2;
  const lg = 255;
  const ug = 12;
  const bg = 14;
  uh[1] = {
    name: "Stone pick",
    ⵠΔ: 256,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[115] = {
    name: "Berries bush",
    ⵠΔ: 284,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[3] = {
    name: "Gold pick",
    ⵠΔ: 295,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const dg = tg;
  const vg = 14;
  uh[4] = {
    name: "Diamond pick",
    ⵠΔ: 257,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[57] = {
    name: "Wood sword",
    ⵠΔ: 830,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const mg = 100;
  const cg = 17;
  uh[5] = {
    name: "Gold sword",
    ⵠΔ: 290,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const pg = 3;
  uh[6] = {
    name: "Diamond sword",
    ⵠΔ: 291,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[8] = {
    name: "Wood pick",
    ⵠΔ: 314,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Cg = 0;
  const Tg = 255;
  uh[162] = {
    name: "Wood wall",
    ⵠΔ: 318,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const fg = 6;
  uh[160] = {
    name: "Wood spike",
    ⵠΔ: 320,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const zg = 11;
  uh[117] = {
    name: "Cooked meat",
    ⵠΔ: 325,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[118] = {
    name: "Big campfire",
    ⵠΔ: 327,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[195] = {
    name: "Bandage",
    ⵠΔ: 304,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const yg = 9;
  uh[163] = {
    name: "Stone wall",
    ⵠΔ: 263,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[164] = {
    name: "Gold wall",
    ⵠΔ: 265,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[165] = {
    name: "Diamond wall",
    ⵠΔ: 332,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const wg = 18;
  const Pg = 7;
  const kg = $n;
  const Ag = String.fromCharCode;
  const xg = Ag(101);
  const Jg = Ag(118);
  const Mg = Ag(97);
  const Bg = Ag(108);
  const Dg = 5;
  uh[166] = {
    name: "Wood door",
    ⵠΔ: 268,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[167] = {
    name: "Chest",
    ⵠΔ: 338,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[168] = {
    name: "Stone spike",
    ⵠΔ: 360,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Eg = 5;
  uh[169] = {
    name: "Gold spike",
    ⵠΔ: 363,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Sg = 16;
  uh[170] = {
    name: "Diamond spike",
    ⵠΔ: 365,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Qg = os;
  const _g = 14;
  const Fg = 4;
  ;
  uh[171] = {
    name: "Stone door",
    ⵠΔ: 371,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Rg = 15;
  uh[172] = {
    name: "Gold door",
    ⵠΔ: 374,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[173] = {
    name: "Diamond door",
    ⵠΔ: 377,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Lg = String.fromCharCode;
  const Gg = Lg(101);
  const Wg = Lg(118);
  const Ng = Lg(97);
  const qg = Lg(108);
  const Og = 19;
  const Ug = 20;
  uh[10] = {
    name: "Chapka",
    ⵠΔ: 370,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[11] = {
    name: "Big Chapka",
    ⵠΔ: 380,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[12] = {
    name: "Wood spear",
    ⵠΔ: 402,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[13] = {
    name: "Stone spear",
    ⵠΔ: 396,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[14] = {
    name: "Gold spear",
    ⵠΔ: 399,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[15] = {
    name: "Diamond spear",
    ⵠΔ: 405,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Yg = 11;
  uh[16] = {
    name: "Dragon spear",
    ⵠΔ: 876,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[17] = {
    name: "Dragon spear",
    ⵠΔ: 879,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[18] = {
    name: "Crab spear",
    ⵠΔ: 900,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Kg = 4;
  uh[197] = {
    name: "Crab loot",
    ⵠΔ: 197,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Xg = T;
  uh[119] = {
    name: "Furnace",
    ⵠΔ: 409,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Vg = 8;
  const Zg = 18;
  uh[23] = {
    name: "Explorer hat",
    ⵠΔ: 421,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[24] = {
    name: "Pirate hat",
    ⵠΔ: 424,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const $g = ur;
  uh[87] = {
    name: "Flower hat",
    ⵠΔ: 1228,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const el = 17;
  uh[88] = {
    name: "Fur hat",
    ⵠΔ: 1231,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const il = 1;
  uh[58] = {
    name: "Wood helmet",
    ⵠΔ: 827,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[25] = {
    name: "Stone helmet",
    ⵠΔ: 430,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const tl = 13;
  const nl = Qe;
  const ol = 12;
  uh[26] = {
    name: "Gold helmet",
    ⵠΔ: 433,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const al = 255;
  const rl = 3;
  const sl = 2;
  uh[27] = {
    name: "Diamond helmet",
    ⵠΔ: 436,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const hl = os;
  uh[28] = {
    name: "Book",
    ⵠΔ: 439,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[120] = {
    name: "Paper",
    ⵠΔ: 442,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[29] = {
    name: "Bag",
    ⵠΔ: 367,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[30] = {
    name: "Amethyst sword",
    ⵠΔ: 456,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[31] = {
    name: "Amethyst pick",
    ⵠΔ: 460,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const gl = {};
  gl.get = function (a, b) {
    if (b !== "ᐃⵠⵠᐃᐃ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          jg.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return jg.Reflect.get(...arguments);
  };
  const ll = 15;
  uh[33] = {
    name: "Amethyst spear",
    ⵠΔ: 473,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[35] = {
    name: "Stone hammer",
    ⵠΔ: 478,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const ul = hl;
  const bl = 15;
  const dl = 10;
  uh[36] = {
    name: "Gold hammer",
    ⵠΔ: 481,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[37] = {
    name: "Diamond hammer",
    ⵠΔ: 484,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const vl = 0;
  uh[38] = {
    name: "Amethyst hammer",
    ⵠΔ: 487,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const ml = 255;
  uh[39] = {
    name: "Reidite hammer",
    ⵠΔ: 490,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[122] = {
    name: "Amethyst wall",
    ⵠΔ: 493,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[123] = {
    name: "Amethyst spike",
    ⵠΔ: 496,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[124] = {
    name: "Amethyst door",
    ⵠΔ: 498,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[40] = {
    name: "Cap & scarf",
    ⵠΔ: 503,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[147] = {
    name: "Blue cord",
    ⵠΔ: 515,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[148] = {
    name: "Lock",
    ⵠΔ: 519,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const cl = 5;
  uh[151] = {
    name: "Resurrection",
    ⵠΔ: 530,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const pl = 7;
  uh[158] = {
    name: "Lockpick",
    ⵠΔ: 533,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[159] = {
    name: "Totem",
    ⵠΔ: 555,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Cl = 4;
  const Tl = 100;
  const fl = 7;
  const zl = 2;
  const yl = 9;
  uh[43] = {
    name: "Amethyst helmet",
    ⵠΔ: 542,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[45] = {
    name: "Super hammer",
    ⵠΔ: 551,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const wl = Qq;
  uh[125] = {
    name: "Bridge",
    ⵠΔ: 604,
    ⲆΔⵠⲆ: 1,
    ᐃΔᐃΔ: 1
  };
  const Pl = 3;
  uh[221] = {
    name: "Wood Tower",
    ⵠΔ: 1235,
    ⲆΔⵠⲆ: 1,
    ᐃΔᐃΔ: 1
  };
  uh[127] = {
    name: "Bottle full",
    ⵠΔ: 715,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[128] = {
    name: "Bottle empty",
    ⵠΔ: 611,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const kl = 19;
  uh[46] = {
    name: "Stone shovel",
    ⵠΔ: 618,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[130] = {
    name: "Watering can",
    ⵠΔ: 627,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Al = 11;
  function xl(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 3386; a++) {
        c.push(a);
      }
      return b();
    };
  }
  const Jl = 20;
  const Bl = ij;
  const Dl = 14;
  const Il = 6;
  uh[132] = {
    name: "Wheat",
    ⵠΔ: 632,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const El = 16;
  uh[133] = {
    name: "Cookie",
    ⵠΔ: 635,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Sl = 18;
  function Ql(a) {
    return jg.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⲆᐃⵠⲆΔΔⵠⲆΔ: 3808300,
      ⵠΔⵠᐃᐃⵠⲆ: 1813026,
      ⲆⵠⲆΔⵠΔΔ: 14833400,
      ⲆⵠⲆΔᐃⵠᐃΔΔ: 9312098
    };
  })();
  const _l = 16;
  const Fl = 12;
  uh[135] = {
    name: "Windmill",
    ⵠΔ: 643,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Rl = 2;
  uh[47] = {
    name: "Super diving suit",
    ⵠΔ: 647,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[48] = {
    name: "Diving mask",
    ⵠΔ: 650,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const jl = 20;
  uh[49] = {
    name: "Watering can full",
    ⵠΔ: 654,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[136] = {
    name: "Cake",
    ⵠΔ: 660,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ll = 18;
  uh[138] = {
    name: "Foodfish cooked",
    ⵠΔ: 666,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Gl = 3;
  uh[141] = {
    name: "Plot",
    ⵠΔ: 684,
    ⲆΔⵠⲆ: 1,
    ᐃΔᐃΔ: 1
  };
  uh[143] = {
    name: "Bread",
    ⵠΔ: 690,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[ah.ⲆⲆⵠⲆⲆⲆⲆ] = {
    name: "Bottle full (with ice)",
    ⵠΔ: xs.ᐃⵠⲆⲆᐃⲆⵠᐃⲆ,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[ah.ᐃⵠΔᐃᐃᐃΔ] = {
    name: "Bottle full (with well)",
    ⵠΔ: xs.ΔⲆΔΔⵠΔΔⵠⵠ,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[50] = {
    name: "Gold shovel",
    ⵠΔ: 700,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Wl = 12;
  const Nl = 17;
  uh[51] = {
    name: "Diamond shovel",
    ⵠΔ: 704,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[52] = {
    name: "Amethyst shovel",
    ⵠΔ: 706,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[55] = {
    name: "Spanner",
    ⵠΔ: 711,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const ql = 8;
  const Ol = 18;
  const Hl = 19;
  uh[56] = {
    name: "Machete",
    ⵠΔ: 714,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Ul = 4;
  const Yl = 1;
  const Kl = 256;
  uh[144] = {
    name: "Bread oven",
    ⵠΔ: 718,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[145] = {
    name: "Sandwich",
    ⵠΔ: 730,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Xl = 13;
  uh[59] = {
    name: "Dragon helmet",
    ⵠΔ: 734,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[60] = {
    name: "Dragon helmet",
    ⵠΔ: 737,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[90] = {
    name: "Witch",
    ⵠΔ: 740,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[91] = {
    name: "Nimbus",
    ⵠΔ: 743,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[92] = {
    name: "Wand1",
    ⵠΔ: 746,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[93] = {
    name: "Wand2",
    ⵠΔ: 749,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[62] = {
    name: "Dragon sword",
    ⵠΔ: 564,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[63] = {
    name: "Dragon sword",
    ⵠΔ: 567,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Vl = 3;
  const Zl = 100;
  uh[71] = {
    name: "Wood shield",
    ⵠΔ: 1238,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[72] = {
    name: "Stone shield",
    ⵠΔ: 1241,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[73] = {
    name: "Gold shield",
    ⵠΔ: 1244,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[74] = {
    name: "Diamond shield",
    ⵠΔ: 1247,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const $l = 12;
  const As = 6;
  const Bs = na;
  uh[75] = {
    name: "Amethyst shield",
    ⵠΔ: 1250,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[76] = {
    name: "Reidite shield",
    ⵠΔ: 1253,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Cs = ur;
  uh[94] = {
    name: "Wood axe",
    ⵠΔ: 1256,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[95] = {
    name: "Stone axe",
    ⵠΔ: 1259,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[96] = {
    name: "Gold axe",
    ⵠΔ: 1262,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Ds = 8;
  uh[97] = {
    name: "Diamond axe",
    ⵠΔ: 1265,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[98] = {
    name: "Amethyst axe",
    ⵠΔ: 1268,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Es = Cs;
  const Fs = 17;
  uh[99] = {
    name: "Reidite axe",
    ⵠΔ: 1271,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[64] = {
    name: "Wood bow",
    ⵠΔ: 570,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Gs = 10;
  uh[65] = {
    name: "Stone bow",
    ⵠΔ: 573,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Hs = 14;
  const Is = 5;
  uh[66] = {
    name: "Gold bow",
    ⵠΔ: 576,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[67] = {
    name: "Diamond bow",
    ⵠΔ: 579,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[68] = {
    name: "Amethyst bow",
    ⵠΔ: 582,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Js = 7;
  const Ks = 6;
  uh[69] = {
    name: "Reidite bow",
    ⵠΔ: 585,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[70] = {
    name: "Dragon bow",
    ⵠΔ: 588,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[77] = {
    name: "Crown of life",
    ⵠΔ: 758,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ls = 2;
  const Ms = 4;
  uh[175] = {
    name: "Gem of life",
    ⵠΔ: 176,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[185] = {
    name: "Orb of the dragon",
    ⵠΔ: 252,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[187] = {
    name: "Orb of the dragon",
    ⵠΔ: 253,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ns = 20;
  const Os = 0;
  uh[184] = {
    name: "Cube of the dragon",
    ⵠΔ: 751,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ps = 10;
  ;
  uh[186] = {
    name: "Cube of the dragon",
    ⵠΔ: 753,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[78] = {
    name: "Crown of luck",
    ⵠΔ: 762,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Qs = 9;
  uh[176] = {
    name: "Gem of luck",
    ⵠΔ: 177,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[79] = {
    name: "Crown of the angel",
    ⵠΔ: 770,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[177] = {
    name: "Gem of the angel",
    ⵠΔ: 175,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Rs = 19;
  uh[149] = {
    name: "Dragon heart",
    ⵠΔ: 521,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ss = 11;
  uh[150] = {
    name: "Lava heart",
    ⵠΔ: 523,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[83] = {
    name: "Hood",
    ⵠΔ: 768,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[84] = {
    name: "Peasant",
    ⵠΔ: 772,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const Ts = 19;
  uh[86] = {
    name: "Winter peasant",
    ⵠΔ: 777,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[85] = {
    name: "Winter hood",
    ⵠΔ: 780,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Us = 16;
  uh[180] = {
    name: "Bucket full",
    ⵠΔ: 784,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[181] = {
    name: "Bucket empty",
    ⵠΔ: 785,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[182] = {
    name: "Well",
    ⵠΔ: 791,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[183] = {
    name: "Sign",
    ⵠΔ: 799,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[188] = {
    name: "Pumpkin Seed",
    ⵠΔ: 809,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ws = 17;
  uh[191] = {
    name: "Garlic Seed",
    ⵠΔ: 835,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Xs = 8;
  uh[193] = {
    name: "Thorbushes Seed",
    ⵠΔ: 846,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const Ys = 14;
  const Zs = 11;
  const $s = 7;
  const _s = 13;
  const at = 12;
  uh[190] = {
    name: "Roof",
    ⵠΔ: 843,
    ⲆΔⵠⲆ: 1,
    ᐃΔᐃΔ: 1
  };
  uh[61] = {
    name: "Crab Crown",
    ⵠΔ: 912,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[204] = {
    name: "Carrot Seed",
    ⵠΔ: 950,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const bt = 3;
  uh[206] = {
    name: "Tomato Seed",
    ⵠΔ: 960,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const ct = 18;
  const dt = 1;
  uh[208] = {
    name: "Watermelon Seed",
    ⵠΔ: 967,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[210] = {
    name: "Aloe Vera Seed",
    ⵠΔ: 982,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[80] = {
    name: "Cap",
    ⵠΔ: 1138,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[81] = {
    name: "Turban",
    ⵠΔ: 1141,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[82] = {
    name: "Pilot Helmet",
    ⵠΔ: 427,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[152] = {
    name: "Emerald Machine",
    ⵠΔ: 1196,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[153] = {
    name: "Emerald Machine",
    ⵠΔ: 1200,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const et = 256;
  uh[154] = {
    name: "Emerald Machine",
    ⵠΔ: 1204,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const ft = Bs;
  const gt = 12;
  uh[155] = {
    name: "Emerald Machine",
    ⵠΔ: 1208,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  ;
  const ht = 19;
  uh[156] = {
    name: "Emerald Machine",
    ⵠΔ: 1212,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[157] = {
    name: "Emerald Machine",
    ⵠΔ: 1216,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[53] = {
    name: "Pitchfork",
    ⵠΔ: 977,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[212] = {
    name: "Wood Door Spike",
    ⵠΔ: 990,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const it = 13;
  uh[213] = {
    name: "Stone Door Spike",
    ⵠΔ: 993,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const jt = 100;
  const kt = 14;
  uh[214] = {
    name: "Gold Door Spike",
    ⵠΔ: 996,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const lt = 9;
  const mt = 11;
  const nt = {};
  nt.get = function (a, b) {
    if (b !== "ΔΔⵠΔⲆᐃΔⲆⲆ") {
      const a = function () {
        jg.addEventListener("mousemove", function () {
          a();
        });
      };
      a();
    }
    return jg.Reflect.get(...arguments);
  };
  uh[215] = {
    name: "Diamond Door Spike",
    ⵠΔ: 999,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[216] = {
    name: "Amethyst Door Spike",
    ⵠΔ: 1002,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[20] = {
    name: "Diamond Fire Protection ",
    ⵠΔ: 922,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[21] = {
    name: "Amethyst Fire Protection ",
    ⵠΔ: 926,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const ot = 10;
  const pt = 17;
  const qt = 5;
  const rt = 16;
  uh[22] = {
    name: "Amethyst Fire Protection ",
    ⵠΔ: 930,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[19] = {
    name: "Reidite Sword",
    ⵠΔ: 933,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[34] = {
    name: "Reidite Spear",
    ⵠΔ: 944,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const st = 4;
  const tt = 0;
  const ut = 14;
  uh[44] = {
    name: "Reidite Helmet",
    ⵠΔ: 947,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[220] = {
    name: "Reidite Door Spike",
    ⵠΔ: 1005,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[218] = {
    name: "Reidite Door",
    ⵠΔ: 1008,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[219] = {
    name: "Reidite Spike",
    ⵠΔ: 1011,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[217] = {
    name: "Reidite Wall",
    ⵠΔ: 1014,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[32] = {
    name: "Reidite pick",
    ⵠΔ: 1019,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  const vt = 7;
  uh[223] = {
    name: "Boat",
    ⵠΔ: 1027,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[224] = {
    name: "Sled",
    ⵠΔ: 1030,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[89] = {
    name: "Saddle",
    ⵠΔ: 1048,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 1
  };
  uh[225] = {
    name: "Mount Boar",
    ⵠΔ: 1051,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[226] = {
    name: "Mount King Crab",
    ⵠΔ: 1191,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const wt = 1;
  uh[227] = {
    name: "Mount Baby Dragon",
    ⵠΔ: 1082,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const yt = 4;
  const zt = 0;
  const eb = 20;
  const ib = sn;
  const tb = 6;
  uh[228] = {
    name: "Mount Baby Lava",
    ⵠΔ: 1097,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  uh[229] = {
    name: "Mount Hawk",
    ⵠΔ: 1112,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const nb = 11;
  uh[230] = {
    name: "Plane",
    ⵠΔ: 1116,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const ob = 2;
  uh[54] = {
    name: "Pitchfork 2",
    ⵠΔ: 980,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const ab = 20;
  const rb = 12;
  uh[239] = {
    name: "Baby Mammoth",
    ⵠΔ: 1226,
    ⲆΔⵠⲆ: 0,
    ᐃΔᐃΔ: 0
  };
  const sb = 13;
  const hb = 10;
  const gb = 17;
  var lb = undefined;
  var At = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 0,
    ⵠⵠⲆᐃ: 113,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 1,
    ⵠⵠⲆᐃ: 118,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 2,
    ⵠⵠⲆᐃ: 119,
    time: 1 / 20,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 3,
    ⵠⵠⲆᐃ: 114,
    time: 0.16666666666666666,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 4,
    ⵠⵠⲆᐃ: 8,
    time: 1 / 3,
    ΔⲆᐃ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 5,
    ⵠⵠⲆᐃ: 1,
    time: 1 / 8,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 6,
    ⵠⵠⲆᐃ: 3,
    time: 1 / 12,
    ΔⲆᐃ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 7,
    ⵠⵠⲆᐃ: 4,
    time: 1 / 20,
    ΔⲆᐃ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 8,
    ⵠⵠⲆᐃ: 31,
    time: 0.016666666666666666,
    ΔⲆᐃ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 9,
    ⵠⵠⲆᐃ: 32,
    time: 1 / 90,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 10,
    ⵠⵠⲆᐃ: 35,
    time: 1 / 10,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 11,
    ⵠⵠⲆᐃ: 36,
    time: 1 / 15,
    ΔⲆᐃ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 12,
    ⵠⵠⲆᐃ: 37,
    time: 1 / 20,
    ΔⲆᐃ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 13,
    ⵠⵠⲆᐃ: 38,
    time: 1 / 60,
    ΔⲆᐃ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 14,
    ⵠⵠⲆᐃ: 39,
    time: 1 / 90,
    ΔⲆᐃ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 15,
    ⵠⵠⲆᐃ: 45,
    time: 1 / 120,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 16,
    ⵠⵠⲆᐃ: 46,
    time: 1 / 5,
    ΔⲆᐃ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 17,
    ⵠⵠⲆᐃ: 50,
    time: 1 / 10,
    ΔⲆᐃ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 18,
    ⵠⵠⲆᐃ: 51,
    time: 1 / 20,
    ΔⲆᐃ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 19,
    ⵠⵠⲆᐃ: 52,
    time: 0.025,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 20,
    ⵠⵠⲆᐃ: 130,
    time: 1 / 5,
    ΔⲆᐃ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 1,
    e: 0,
    id: 21,
    ⵠⵠⲆᐃ: 49,
    time: 1 / 5,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 22,
    ⵠⵠⲆᐃ: 53,
    time: 0.1,
    ΔⲆᐃ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 23,
    ⵠⵠⲆᐃ: 54,
    time: 1 / 60,
    ΔⲆᐃ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 24,
    ⵠⵠⲆᐃ: 28,
    time: 1 / 15,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 25,
    ⵠⵠⲆᐃ: 12,
    time: 0.2,
    ΔⲆᐃ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 26,
    ⵠⵠⲆᐃ: 13,
    time: 1 / 10,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 27,
    ⵠⵠⲆᐃ: 14,
    ΔⲆᐃ: 1,
    time: 0.05
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 28,
    ⵠⵠⲆᐃ: 15,
    time: 0.03333333333333333,
    ΔⲆᐃ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 29,
    ⵠⵠⲆᐃ: 33,
    time: 1 / 60,
    ΔⲆᐃ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 30,
    ⵠⵠⲆᐃ: 34,
    time: 0.011111111111111112,
    ΔⲆᐃ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 31,
    ⵠⵠⲆᐃ: 16,
    time: 1 / 120,
    ΔⲆᐃ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 32,
    ⵠⵠⲆᐃ: 17,
    time: 0.005,
    ΔⲆᐃ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 33,
    ⵠⵠⲆᐃ: 18,
    time: 1 / 30,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 34,
    ⵠⵠⲆᐃ: 57,
    time: 0.2,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 35,
    ⵠⵠⲆᐃ: 0,
    time: 1 / 10,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 36,
    ⵠⵠⲆᐃ: 5,
    time: 1 / 20,
    ΔⲆᐃ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 37,
    ⵠⵠⲆᐃ: 6,
    time: 1 / 30,
    ΔⲆᐃ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 38,
    ⵠⵠⲆᐃ: 30,
    time: 1 / 60,
    ΔⲆᐃ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 39,
    ⵠⵠⲆᐃ: 19,
    time: 0.011111111111111112,
    ΔⲆᐃ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 40,
    ⵠⵠⲆᐃ: 115,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 41,
    ⵠⵠⲆᐃ: 132,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 42,
    ⵠⵠⲆᐃ: 188,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 43,
    ⵠⵠⲆᐃ: 191,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 44,
    ⵠⵠⲆᐃ: 193,
    time: 0.2,
    ΔⲆᐃ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 45,
    ⵠⵠⲆᐃ: 204,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 46,
    ⵠⵠⲆᐃ: 206,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 47,
    ⵠⵠⲆᐃ: 208,
    time: 0.2,
    ΔⲆᐃ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 48,
    ⵠⵠⲆᐃ: 210,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 49,
    ⵠⵠⲆᐃ: 117,
    time: 0.2,
    ΔⲆᐃ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 50,
    ⵠⵠⲆᐃ: 138,
    time: 1 / 3,
    ΔⲆᐃ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 51,
    ⵠⵠⲆᐃ: 143,
    time: 1 / 3,
    ΔⲆᐃ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 52,
    ⵠⵠⲆᐃ: 133,
    time: 1 / 3,
    ΔⲆᐃ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 53,
    ⵠⵠⲆᐃ: 136,
    time: 0.2,
    ΔⲆᐃ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 54,
    ⵠⵠⲆᐃ: 195,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 55,
    ⵠⵠⲆᐃ: 162,
    time: 1 / 5,
    ΔⲆᐃ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 56,
    ⵠⵠⲆᐃ: 163,
    time: 0.2,
    ΔⲆᐃ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 57,
    ⵠⵠⲆᐃ: 164,
    time: 1 / 5,
    ΔⲆᐃ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 58,
    ⵠⵠⲆᐃ: 165,
    time: 1 / 5,
    ΔⲆᐃ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 59,
    ⵠⵠⲆᐃ: 122,
    time: 1 / 5,
    ΔⲆᐃ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 60,
    ⵠⵠⲆᐃ: 217,
    time: 1 / 5,
    ΔⲆᐃ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 61,
    ⵠⵠⲆᐃ: 166,
    time: 1 / 8,
    ΔⲆᐃ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 62,
    ⵠⵠⲆᐃ: 171,
    time: 1 / 8,
    ΔⲆᐃ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 63,
    ⵠⵠⲆᐃ: 172,
    time: 1 / 8,
    ΔⲆᐃ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 64,
    ⵠⵠⲆᐃ: 173,
    time: 1 / 8,
    ΔⲆᐃ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 65,
    ⵠⵠⲆᐃ: 124,
    time: 1 / 8,
    ΔⲆᐃ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 66,
    ⵠⵠⲆᐃ: 218,
    time: 0.125,
    ΔⲆᐃ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 67,
    ⵠⵠⲆᐃ: 160,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 68,
    ⵠⵠⲆᐃ: 168,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 69,
    ⵠⵠⲆᐃ: 169,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 70,
    ⵠⵠⲆᐃ: 170,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 71,
    ⵠⵠⲆᐃ: 123,
    time: 0.05,
    ΔⲆᐃ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 72,
    ⵠⵠⲆᐃ: 219,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 73,
    ⵠⵠⲆᐃ: 212,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 74,
    ⵠⵠⲆᐃ: 213,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 75,
    ⵠⵠⲆᐃ: 214,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 76,
    ⵠⵠⲆᐃ: 215,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 77,
    ⵠⵠⲆᐃ: 216,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 78,
    ⵠⵠⲆᐃ: 220,
    time: 1 / 20,
    ΔⲆᐃ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 79,
    ⵠⵠⲆᐃ: 167,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 80,
    ⵠⵠⲆᐃ: 23,
    time: 0.2,
    ΔⲆᐃ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 81,
    ⵠⵠⲆᐃ: 24,
    time: 1 / 30,
    ΔⲆᐃ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 82,
    ⵠⵠⲆᐃ: 82,
    time: 1 / 60,
    ΔⲆᐃ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 83,
    ⵠⵠⲆᐃ: 10,
    time: 0.2,
    ΔⲆᐃ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 84,
    ⵠⵠⲆᐃ: 11,
    time: 1 / 12,
    ΔⲆᐃ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 85,
    ⵠⵠⲆᐃ: 40,
    time: 1 / 30,
    ΔⲆᐃ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 86,
    ⵠⵠⲆᐃ: 88,
    time: 1 / 50,
    ΔⲆᐃ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 87,
    ⵠⵠⲆᐃ: 58,
    time: 1 / 5,
    ΔⲆᐃ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 88,
    ⵠⵠⲆᐃ: 25,
    time: 1 / 10,
    ΔⲆᐃ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 89,
    ⵠⵠⲆᐃ: 26,
    time: 1 / 20,
    ΔⲆᐃ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 90,
    ⵠⵠⲆᐃ: 27,
    time: 0.03333333333333333,
    ΔⲆᐃ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 91,
    ⵠⵠⲆᐃ: 43,
    time: 1 / 60,
    ΔⲆᐃ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 92,
    ⵠⵠⲆᐃ: 44,
    time: 1 / 90,
    ΔⲆᐃ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 93,
    ⵠⵠⲆᐃ: 48,
    time: 0.05,
    ΔⲆᐃ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 94,
    ⵠⵠⲆᐃ: 47,
    time: 1 / 90,
    ΔⲆᐃ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 95,
    ⵠⵠⲆᐃ: 20,
    time: 1 / 20,
    ΔⲆᐃ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 96,
    ⵠⵠⲆᐃ: 21,
    time: 1 / 60,
    ΔⲆᐃ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 97,
    ⵠⵠⲆᐃ: 22,
    time: 1 / 90,
    ΔⲆᐃ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 98,
    ⵠⵠⲆᐃ: 80,
    time: 1 / 15,
    ΔⲆᐃ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 99,
    ⵠⵠⲆᐃ: 81,
    time: 1 / 150,
    ΔⲆᐃ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 100,
    ⵠⵠⲆᐃ: 29,
    time: 0.06666666666666667,
    ΔⲆᐃ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 101,
    ⵠⵠⲆᐃ: 120,
    time: 1 / 3,
    ΔⲆᐃ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 102,
    ⵠⵠⲆᐃ: 147,
    time: 1 / 3,
    ΔⲆᐃ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 103,
    ⵠⵠⲆᐃ: 148,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 104,
    ⵠⵠⲆᐃ: 158,
    time: 1 / 60,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 105,
    ⵠⵠⲆᐃ: 159,
    time: 1 / 10,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 106,
    ⵠⵠⲆᐃ: 125,
    time: 0.2,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 107,
    ⵠⵠⲆᐃ: 190,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 108,
    ⵠⵠⲆᐃ: 221,
    time: 1 / 15,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 109,
    ⵠⵠⲆᐃ: 141,
    time: 0.2,
    ΔⲆᐃ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 110,
    ⵠⵠⲆᐃ: 128,
    time: 1 / 5,
    ΔⲆᐃ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 1,
    e: 0,
    id: 111,
    ⵠⵠⲆᐃ: 127,
    time: 0.2,
    ΔⲆᐃ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 112,
    ⵠⵠⲆᐃ: 127,
    time: 1 / 10,
    ΔⲆᐃ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 1,
    id: 113,
    ⵠⵠⲆᐃ: 127,
    time: 1 / 3,
    ΔⲆᐃ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 114,
    ⵠⵠⲆᐃ: 135,
    time: 1 / 10,
    ΔⲆᐃ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 115,
    ⵠⵠⲆᐃ: 151,
    time: 0.05,
    ΔⲆᐃ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 116,
    ⵠⵠⲆᐃ: 152,
    time: 1 / 200,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 117,
    ⵠⵠⲆᐃ: 153,
    time: 0.011111111111111112,
    ΔⲆᐃ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 118,
    ⵠⵠⲆᐃ: 154,
    time: 1 / 90,
    ΔⲆᐃ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 119,
    ⵠⵠⲆᐃ: 155,
    time: 1 / 90,
    ΔⲆᐃ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 120,
    ⵠⵠⲆᐃ: 156,
    time: 1 / 90,
    ΔⲆᐃ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 121,
    ⵠⵠⲆᐃ: 157,
    time: 1 / 90,
    ΔⲆᐃ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 122,
    ⵠⵠⲆᐃ: 55,
    time: 0.1,
    ΔⲆᐃ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 123,
    ⵠⵠⲆᐃ: 56,
    time: 1 / 10,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 124,
    ⵠⵠⲆᐃ: 144,
    time: 1 / 10,
    ΔⲆᐃ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 125,
    ⵠⵠⲆᐃ: 145,
    time: 1 / 3,
    ΔⲆᐃ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 126,
    ⵠⵠⲆᐃ: 59,
    time: 1 / 120,
    ΔⲆᐃ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 127,
    ⵠⵠⲆᐃ: 60,
    time: 1 / 180,
    ΔⲆᐃ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 128,
    ⵠⵠⲆᐃ: 61,
    time: 0.016666666666666666,
    ΔⲆᐃ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 129,
    ⵠⵠⲆᐃ: 62,
    time: 1 / 120,
    ΔⲆᐃ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 130,
    ⵠⵠⲆᐃ: 63,
    time: 0.005555555555555556,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 131,
    ⵠⵠⲆᐃ: 64,
    time: 1 / 20,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 132,
    ⵠⵠⲆᐃ: 101,
    time: 1 / 5,
    ΔⲆᐃ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 133,
    ⵠⵠⲆᐃ: 65,
    time: 0.04,
    ΔⲆᐃ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 134,
    ⵠⵠⲆᐃ: 102,
    time: 1 / 5,
    ΔⲆᐃ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 135,
    ⵠⵠⲆᐃ: 66,
    time: 0.03333333333333333,
    ΔⲆᐃ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 136,
    ⵠⵠⲆᐃ: 103,
    time: 1 / 10,
    ΔⲆᐃ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 137,
    ⵠⵠⲆᐃ: 67,
    time: 1 / 35,
    ΔⲆᐃ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 138,
    ⵠⵠⲆᐃ: 104,
    time: 0.1,
    ΔⲆᐃ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 139,
    ⵠⵠⲆᐃ: 68,
    time: 1 / 40,
    ΔⲆᐃ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 140,
    ⵠⵠⲆᐃ: 105,
    time: 1 / 15,
    ΔⲆᐃ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 141,
    ⵠⵠⲆᐃ: 69,
    time: 0.022222222222222223,
    ΔⲆᐃ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 142,
    ⵠⵠⲆᐃ: 106,
    time: 1 / 15,
    ΔⲆᐃ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 143,
    ⵠⵠⲆᐃ: 70,
    time: 0.02,
    ΔⲆᐃ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 144,
    ⵠⵠⲆᐃ: 107,
    time: 1 / 20,
    ΔⲆᐃ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 145,
    ⵠⵠⲆᐃ: 71,
    time: 0.04,
    ΔⲆᐃ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 146,
    ⵠⵠⲆᐃ: 72,
    time: 1 / 40,
    ΔⲆᐃ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 147,
    ⵠⵠⲆᐃ: 73,
    time: 1 / 50,
    ΔⲆᐃ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 148,
    ⵠⵠⲆᐃ: 74,
    time: 0.014285714285714285,
    ΔⲆᐃ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 149,
    ⵠⵠⲆᐃ: 75,
    time: 1 / 90,
    ΔⲆᐃ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 150,
    ⵠⵠⲆᐃ: 76,
    time: 0.008333333333333333,
    ΔⲆᐃ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 151,
    ⵠⵠⲆᐃ: 77,
    time: 0.016666666666666666,
    ΔⲆᐃ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 152,
    ⵠⵠⲆᐃ: 78,
    time: 1 / 60,
    ΔⲆᐃ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 1,
    e: 0,
    id: 153,
    ⵠⵠⲆᐃ: 79,
    time: 1 / 60,
    ΔⲆᐃ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 154,
    ⵠⵠⲆᐃ: 83,
    time: 0.1,
    ΔⲆᐃ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 155,
    ⵠⵠⲆᐃ: 84,
    time: 1 / 10,
    ΔⲆᐃ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 156,
    ⵠⵠⲆᐃ: 85,
    time: 0.016666666666666666,
    ΔⲆᐃ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 157,
    ⵠⵠⲆᐃ: 86,
    time: 1 / 60,
    ΔⲆᐃ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ᐃΔⲆ: 1,
    e: 0,
    id: 158,
    ⵠⵠⲆᐃ: 180,
    time: 0.2,
    ΔⲆᐃ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 159,
    ⵠⵠⲆᐃ: 181,
    time: 1 / 5,
    ΔⲆᐃ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ᐃΔⲆ: 0,
    e: 0,
    id: 160,
    ⵠⵠⲆᐃ: 182,
    time: 1 / 10,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 161,
    ⵠⵠⲆᐃ: 183,
    time: 1 / 5,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 162,
    ⵠⵠⲆᐃ: 198,
    time: 1 / 20,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 163,
    ⵠⵠⲆᐃ: 223,
    time: 0.02,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 164,
    ⵠⵠⲆᐃ: 224,
    time: 1 / 50,
    ΔⲆᐃ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 165,
    ⵠⵠⲆᐃ: 89,
    time: 1 / 20,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 166,
    ⵠⵠⲆᐃ: 230,
    time: 0.02,
    ΔⲆᐃ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 167,
    ⵠⵠⲆᐃ: 94,
    time: 1 / 5,
    ΔⲆᐃ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 168,
    ⵠⵠⲆᐃ: 95,
    time: 0.1,
    ΔⲆᐃ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 169,
    ⵠⵠⲆᐃ: 96,
    time: 1 / 20,
    ΔⲆᐃ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 170,
    ⵠⵠⲆᐃ: 97,
    time: 1 / 30,
    ΔⲆᐃ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 171,
    ⵠⵠⲆᐃ: 98,
    time: 0.016666666666666666,
    ΔⲆᐃ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ᐃΔⲆ: 0,
    e: 0,
    id: 172,
    ⵠⵠⲆᐃ: 99,
    time: 1 / 90,
    ΔⲆᐃ: 1
  }];
  const Bt = 16;
  const db = 100;
  function vb(b, c, d, e) {
    const f = (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255)) + (0 << (b & 255)) + (16 << (b >> 16 & 255));
    const i = c ^ 5644;
    const a = ~(d & 31068) & d | ~(d & 31068) & 31068;
    const j = ~(e & 64994) & 64994 | ~(e & 64994) & e;
    const k = function (b, c) {
      const d = (b | 40901) & ~(b & 40901);
      const e = (0 << (c >> 8 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c & 255));
      const f = Cb(d, e, d, e, d);
      const g = function (b, c, d, e) {
        const f = (b | 45672) & ~(b & 45672);
        const i = c ^ 47155;
        const a = (2147483587 + (48758 + d) * 2147483629) % 2147483647;
        const j = (16 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)) + (8 << (e & 255)) + (0 << (e >> 8 & 255));
        const k = function (b, c, d) {
          const e = (16 << (b >> 24 & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b & 255));
          const f = (24 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255)) + (8 << (c >> 24 & 255));
          const g = ((d + 48969) * 22695477 + 1) % 4294967296;
          const a = fs(e, f, g, e);
          const h = function (b, c, d, e, f) {
            const i = (24 << (b >> 16 & 255)) + (0 << (b & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 24 & 255));
            const a = ~(c & 44861) & 44861 | ~(c & 44861) & c;
            const j = ((d + 58347) * 22695477 + 1) % 4294967296;
            const k = ~(e & 22779) & (e | 22779);
            const h = function (b, c, d, e, f, i) {
              const a = ~(b & 7896) & (b | 7896);
              const j = (f | 47009) & ~(f & 47009);
              const k = (1013904223 + (32686 + i) * 1664525) % 4294967296;
              const h = ok(a, ((43550 + c) * 1103515245 + 12345) % 2147483648, (d | 26528) & ~(d & 26528), ((e + 32544) * 1664525 + 1013904223) % 4294967296);
              const g = Ax(j, k, a);
              return (16 << ((h ^ g) >> 24 & 255)) + (0 << ((h ^ g) >> 8 & 255)) + (8 << ((h ^ g) & 255)) + (24 << ((h ^ g) >> 16 & 255));
            }(i, a, j, k, (24 << (f & 255)) + (8 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255)), i);
            Ax(a, j, k);
            return h ^ 13566;
          }(f, g, e, f, g);
          return (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) & 255)) + (24 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 8 & 255));
        }(f, i, a);
        const h = zx(j, f, i, a);
        return ((58471 + (k ^ h)) * 214013 + 2531011) % 4294967296;
      }(e, d, e, d);
      return (6282 + (f ^ g)) % 65463;
    }(f, i);
    const h = wp(a, j, f, i, a);
    return (24 << ((k ^ h) >> 16 & 255)) + (0 << ((k ^ h) & 255)) + (16 << ((k ^ h) >> 8 & 255)) + (8 << ((k ^ h) >> 24 & 255));
  }
  const mb = 9;
  const cb = 18;
  const pb = 19;
  ws = 300;
  function Cb(b, c, d, e, f) {
    const i = (b + 9052) % 65314;
    const a = c ^ 52255;
    const j = ~(d & 15215) & (d | 15215);
    const k = e ^ 64138;
    const h = function (b, c, d, e, f) {
      const g = ~(b & 6707) & 6707 | ~(b & 6707) & b;
      const a = ((11546 + c) * 1664525 + 1013904223) % 4294967296;
      const i = (1 + (f + 38021) * 22695477) % 4294967296;
      const j = function (b, c, d, e) {
        const f = ~(b & 641) & 641 | ~(b & 641) & b;
        const g = ~(c & 16770) & 16770 | ~(c & 16770) & c;
        const a = zx(f, g, (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> 8 & 255)) + (0 << (d & 255)), (8 << (e & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 24 & 255)) + (0 << (e >> 16 & 255)));
        const h = wx(f, g);
        return (24 << ((a ^ h) & 255)) + (0 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 8 & 255)) + (8 << ((a ^ h) >> 16 & 255));
      }(g, a, (d | 5131) & ~(d & 5131), (1013904223 + (977 + e) * 1664525) % 4294967296);
      qb(i, g, a);
      return ~(j & 21474) & (j | 21474);
    }(i, a, j, k, (1013904223 + (f + 55167) * 1664525) % 4294967296);
    Rb(i, a, j, k);
    return (h | 3727) & ~(h & 3727);
  }
  ΔΔΔΔ = {
    ΔⲆᐃᐃⲆⲆⵠ: 300,
    ΔⲆΔᐃⵠΔⲆ: 301,
    ⲆⵠⲆⵠᐃⵠΔ: 302,
    ᐃⲆⲆΔⵠᐃΔ: 303,
    ΔΔⵠΔⲆⵠΔ: 304,
    ⵠⵠⵠⲆᐃⵠΔ: 305,
    ΔⵠᐃⲆⵠᐃᐃ: 306,
    ⲆᐃⵠΔᐃᐃᐃ: 307,
    ⲆᐃΔᐃΔⲆⲆ: 308,
    ⵠⵠⲆⲆΔⲆᐃ: 309,
    ᐃⵠᐃⲆΔᐃⲆ: 310,
    ⵠⲆᐃⲆΔΔⵠ: 311,
    EMPTY: 312,
    ⵠΔⲆⵠᐃⵠⵠ: 313,
    ΔⲆΔᐃᐃⵠⵠ: 314,
    ⲆᐃⵠⵠᐃⲆΔ: 315,
    ᐃᐃⲆⵠⲆΔΔ: 316,
    ΔΔⵠΔⵠᐃⲆ: 317,
    ⵠⲆᐃᐃⲆⲆⲆ: 318,
    ᐃΔⵠⵠΔⲆᐃ: 319,
    ᐃᐃⵠⲆⲆΔⵠ: 320,
    ᐃΔΔᐃⵠᐃⲆ: 321,
    ᐃⵠΔΔᐃ: 322,
    ᐃΔⲆⲆΔᐃΔ: 323,
    ᐃⲆⲆⲆ: 324,
    ᐃⵠΔⵠΔᐃΔ: 325,
    ⲆⵠΔᐃⲆⲆⵠ: 326,
    ᐃΔΔⲆΔⵠⲆ: 327,
    ⵠⵠⲆⵠⲆᐃⵠ: 328,
    ᐃⲆΔΔᐃⲆᐃ: 329,
    ΔᐃΔᐃⲆΔⵠ: 330,
    ⵠΔⵠⲆⵠⲆᐃ: 331,
    POINTS: 332,
    ᐃⵠⲆⵠΔΔΔ: 333,
    ⲆΔⵠᐃᐃᐃⵠ: 334,
    ⵠⲆⵠᐃⲆⲆΔ: 335,
    ⲆᐃⲆⲆⵠᐃᐃ: 336,
    ⲆΔⲆⲆΔⵠᐃ: 337,
    ⲆⵠⲆᐃⲆΔⲆ: 338,
    ⲆⵠⲆΔⲆⵠⵠ: 339,
    ⲆⲆⲆⵠⲆΔⵠ: 340,
    ΔⵠⲆⵠΔⵠⲆ: 341,
    ⵠⲆⵠΔⲆᐃΔ: 342,
    ⵠⲆⲆⵠΔᐃⲆ: 343
  };
  function Tb() {
    Zb[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Zb[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Zb[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Zb[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Zb[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Zb[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Zb[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Zb[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Zb[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Zb[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Zb[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Zb[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Zb[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Zb[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Zb[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Zb[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Zb[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Zb[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Zb[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Zb[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Zb[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Zb[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Zb[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Zb[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Zb[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Zb[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Zb[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Zb[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Zb[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Zb[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Zb[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Zb[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Zb[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Zb[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Zb[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Zb[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Zb[232] = ["Vulture Feather", "From a deadly vulture"];
    Zb[234] = ["Emerald", "How many golden breads can you get from it?"];
    Zb[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Zb[80] = ["Turban", "Useful to survive in the desert."];
    Zb[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Zb[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Zb[236] = ["Pilot Glasses"];
    Zb[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Zb[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Zb[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Zb[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Zb[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Zb[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Zb[89] = ["Saddle", "Hit a boar with it to tame it."];
    Zb[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Zb[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Zb[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Zb[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Zb[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Zb[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Zb[224] = ["Sled", "You are faster with it in the snow"];
    Zb[223] = ["Boat", "You are faster with it in the water"];
    Zb[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Zb[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    Zb[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Zb[231] = ["Hawk Feather", "From a deadly hawk."];
    Zb[233] = ["Cactus", "Food : 20", "Water : 10"];
    Zb[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Zb[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Zb[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Zb[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Zb[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Zb[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Zb[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Zb[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Zb[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Zb[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Zb[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Zb[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Zb[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Zb[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Zb[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Zb[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Zb[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Zb[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Zb[53] = ["Pitchfork", "Perfect for gathering"];
    Zb[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Zb[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Zb[ah.ⵠΔⲆⲆⵠΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Zb[ah.ⵠⵠᐃⲆⵠΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Zb[ah.ⵠᐃᐃΔⲆⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Zb[ah.ⲆᐃⵠᐃᐃⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Zb[ah.ⵠⵠᐃΔⲆⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Zb[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Zb[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Zb[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Zb[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Zb[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Zb[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Zb[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Zb[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Zb[203] = ["Flame", "It's hot!"];
    Zb[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Zb[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Zb[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Zb[202] = ["Reidite", "The ultimate ore"];
    Zb[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Et[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Et[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Et[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Et[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Et[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Et[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Et[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Et[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Et[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Et[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Et[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Et[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Et[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Et[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Et[38] = ["You died crushed by an angry baby mammoth."];
    Et[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Et[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[341] = "A sandstorm is approaching in a few seconds.";
    Zb[340] = "The sandstorm will soon stop.";
    Zb[343] = "A blizzard is approaching in a few seconds.";
    Zb[342] = "The blizzard will soon stop.";
    Zb[328] = " BACK TO THE GAME";
    Zb[329] = " Share on Twitter";
    Zb[330] = " Share on Facebook";
    Zb[331] = "You can buy items on the shop in the next game with your points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Kill";
    Zb[335] = "Days survived";
    Zb[336] = "Building method: Free. Press G to change";
    Zb[337] = "Building method: Grid. Press G to change";
    Zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Zb[7] = ["Hand"];
    Zb[140] = ["Dirt", "Dirty!"];
    Zb[126] = ["Sand", "I got it in my eyes!"];
    Zb[109] = ["Wood", "You can't get enough of it!"];
    Zb[108] = ["Stone", "Also called a rock"];
    Zb[111] = ["Gold", "Be generous, give it to others"];
    Zb[112] = ["Diamond", "What will you make with it?"];
    Zb[121] = ["Amethyst", "It's Mauve like Lapa"];
    Zb[131] = ["Flour", "Used in cooking"];
    Zb[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Zb[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Zb[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Zb[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Zb[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Zb[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Zb[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Zb[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Zb[200] = ["Candies", "Only for children!", "Food: 20"];
    Zb[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Zb[201] = ["Garland", "Perfect decoration for roofs"];
    Zb[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Zb[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Zb[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Zb[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Zb[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Zb[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Zb[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Zb[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Zb[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Zb[194] = ["Thorn bush", "It stings!"];
    Zb[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Zb[142] = ["Ice", "Useful for making cakes and water"];
    Zb[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Zb[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Zb[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Zb[178] = ["Pure Fur", "You're a bread factory"];
    Zb[179] = ["Dark Fur", "You get ready to do something wrong"];
    Zb[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Zb[139] = ["Scales", "It smells like fish!"];
    Zb[129] = ["Kraken Skin", "Weren't you too scared?"];
    Zb[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Zb[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Zb[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Zb[161] = ["Cord", "Used in crafting Hats and Bag"];
    Zb[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Zb[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Zb[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Zb[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Zb[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Zb[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Zb[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Zb[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Zb[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Zb[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Zb[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Zb[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Zb[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Zb[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Zb[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Zb[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Zb[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Zb[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Zb[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Zb[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    Zb[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Zb[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Zb[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Zb[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Zb[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Zb[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Zb[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Zb[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Zb[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Zb[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Zb[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Zb[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Zb[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Zb[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Zb[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Zb[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Zb[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Zb[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Zb[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Zb[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Zb[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Zb[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Zb[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Zb[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Zb[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Zb[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Zb[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Zb[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Zb[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Zb[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Zb[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Zb[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Zb[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Zb[177] = ["Blue Gemstone", "For too kind people"];
    Zb[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Zb[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Zb[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Zb[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Zb[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Zb[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Zb[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Zb[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Zb[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Zb[29] = ["Bag", "More space for your items!"];
    Zb[120] = ["Paper", "Used in book-crafting"];
    Zb[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Zb[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Zb[148] = ["Lock", "Allow you to lock your chest"];
    Zb[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Zb[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Zb[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Zb[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Zb[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Zb[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Zb[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Zb[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Zb[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Zb[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Zb[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Zb[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Zb[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Zb[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Zb[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Zb[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Zb[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Zb[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Zb[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Zb[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Zb[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Zb[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Zb[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Zb[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Zb[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Zb[300] = "You cannot join this server";
    Zb[301] = "Kicked: ";
    Zb[302] = "Your key is already used by someone else";
    Zb[303] = "Your key is wrong";
    Zb[304] = "You have an old version, you need to clear your cache";
    Zb[338] = "Your client version is too recent for this server. The server is being updated";
    Zb[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Zb[305] = "There are no more new resources";
    Zb[306] = "You survived 1 day";
    Zb[307] = "You survived ";
    Zb[308] = " days";
    Zb[309] = "You are dead ;-;";
    Zb[310] = "Server cannot find spawn location! Spam the play button!";
    Zb[311] = "Server is full! Spam the play button!";
    Zb[312] = "Resource is empty";
    Zb[313] = "Inventory is full (right-click to empty items)";
    Zb[314] = " is dead";
    Zb[315] = "This is not the right tool";
    Zb[316] = "You joined a team";
    Zb[317] = "You are dead";
    Zb[318] = " joined the team";
    Zb[319] = "Your team was destroyed";
    Zb[320] = "You left the team";
    Zb[321] = " left the team";
    Zb[322] = "Someone stole your token :>";
    Zb[323] = "Choose a server";
    Zb[324] = "players";
    Zb[325] = "total players";
    Zb[326] = "players on this mode";
    Zb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Et[0] = ["You were killed for no reason"];
    Et[1] = ["You starved to death, as the name of the game implies"];
    Et[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Et[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Et[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Et[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Et[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Et[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Et[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Et[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Et[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Et[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Et[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Et[13] = ["You died of thirst. Better drink your own piss."];
    Et[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Et[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Et[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Et[17] = ["Your skin's falling apart, the sun killed you."];
    Et[18] = ["Garlic stored in your pockets boiled your brain."];
    Et[19] = ["As a vampire, don't stand near the garlic cloves."];
    Et[20] = ["You ate garlic as a vampire, what did you expect?"];
    Et[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const fb = 8;
  function zb(b, c, d, e) {
    const f = ~(b & 18734) & 18734 | ~(b & 18734) & b;
    const g = (1 + (c + 45231) * 22695477) % 4294967296;
    const a = ((21388 + d) * 22695477 + 1) % 4294967296;
    const h = (e | 11128) & ~(e & 11128);
    return (38565 + (function (b, c, d, e, f) {
      const i = (b | 2660) & ~(b & 2660);
      const a = ~(c & 14385) & c | ~(c & 14385) & 14385;
      const j = (16 << (d & 255)) + (8 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (24 << (d >> 16 & 255));
      const k = ((e + 55647) * 1664525 + 1013904223) % 4294967296;
      const h = (0 << (f & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (24 << (f >> 24 & 255));
      const g = Ek(i, a);
      Co(j, k, h, i, a);
      return g ^ 19142;
    }(f, g, a, h, f) ^ Kr(g, a, h, f, g, a))) % 65443;
  }
  const yb = 100;
  function wb() {
    Zb[184] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[328] = " BACK TO THE GAME";
    Zb[329] = " Share on Twitter";
    Zb[330] = " Share on Facebook";
    Zb[331] = "You can buy items on the shop in the next game with your points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Kill";
    Zb[335] = "Days survived";
    Zb[336] = "Building method: Free. Press G to change";
    Zb[337] = "Building method: Grid. Press G to change";
    Zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Zb[7] = ["Рука"];
    Zb[140] = ["Земля", "Грязно!"];
    Zb[126] = ["Песок", "Он в моих глазах!"];
    Zb[109] = ["Дерево", "Постоянно нужно больше!"];
    Zb[108] = ["Камень", "Твердый"];
    Zb[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Zb[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Zb[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Zb[131] = ["Мука", "Используется в готовке"];
    Zb[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Zb[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Zb[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Zb[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Zb[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Zb[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Zb[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Zb[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Zb[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Zb[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Zb[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Zb[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Zb[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Zb[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Zb[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Zb[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Zb[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Zb[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Zb[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Zb[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Zb[194] = ["Колючий Куст", "Это больно!"];
    Zb[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Zb[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Zb[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Zb[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Zb[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Zb[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Zb[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Zb[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Zb[139] = ["Чешуя", "Она пахнет рыбой!"];
    Zb[129] = ["Шкура Кракена", "Вы не испугались?"];
    Zb[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Zb[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Zb[114] = ["Верстак", "Необходим для создания многих предметов"];
    Zb[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Zb[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Zb[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Zb[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Zb[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Zb[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Zb[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Zb[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Zb[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Zb[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Zb[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Zb[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Zb[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Zb[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Zb[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Zb[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Zb[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Zb[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Zb[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Zb[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Zb[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Zb[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Zb[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Zb[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Zb[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Zb[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Zb[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Zb[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Zb[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Zb[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Zb[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Zb[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Zb[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Zb[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Zb[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Zb[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Zb[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Zb[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Zb[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Zb[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Zb[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Zb[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Zb[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Zb[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Zb[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Zb[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Zb[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Zb[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Zb[185] = ["Шар Дракона", "Даётся за квест"];
    Zb[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Zb[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Zb[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Zb[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Zb[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Zb[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Zb[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Zb[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Zb[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Zb[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Zb[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Zb[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Zb[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Zb[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Zb[120] = ["Бумага", "Используется при создании книги"];
    Zb[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Zb[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Zb[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Zb[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Zb[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Zb[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Zb[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Zb[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Zb[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Zb[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Zb[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Zb[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Zb[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Zb[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Zb[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Zb[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Zb[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Zb[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Zb[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Zb[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Zb[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Zb[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Zb[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Zb[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Zb[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Zb[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Zb[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Zb[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Zb[300] = "Вы не можете зайти на этот сервер";
    Zb[301] = "Выгнаны: ";
    Zb[302] = "Ваш ключ уже используется кем-то";
    Zb[303] = "Ваш ключ неправильный";
    Zb[304] = "У вас старая версия, вам нужно очистить кеш";
    Zb[305] = "Ресурсов больше нет";
    Zb[306] = "Вы выжили 1 день";
    Zb[307] = "Вы выжили ";
    Zb[308] = " дней";
    Zb[309] = "Вы умерли ;-;";
    Zb[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Zb[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Zb[312] = "Ресурсы закончились";
    Zb[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Zb[314] = " умер";
    Zb[315] = "Это не тот инструмент";
    Zb[316] = "Вы вошли в команду";
    Zb[317] = "Вы умерли";
    Zb[318] = " вошёл в команду";
    Zb[319] = "Ваша команда была разрушена";
    Zb[320] = "Вы покинули команду";
    Zb[321] = " покинул команду";
    Zb[322] = "Кто-то использует ваш токен :>";
    Zb[323] = "Выберите сервер";
    Zb[324] = "игроков";
    Zb[325] = "игроков всего";
    Zb[326] = "игроков в этом режиме";
    Zb[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Et[0] = ["Вы были убиты без причины"];
    Et[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Et[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Et[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Et[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Et[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Et[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Et[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Et[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Et[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Et[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Et[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Et[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Et[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Et[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Et[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Et[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Et[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Et[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Et[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Et[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Et[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function Pb() {
    Zb[184] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[328] = " BACK TO THE GAME";
    Zb[329] = " Share on Twitter";
    Zb[330] = " Share on Facebook";
    Zb[331] = "You can buy items on the shop in the next game with your points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Kill";
    Zb[335] = "Days survived";
    Zb[336] = "Building method: Free. Press G to change";
    Zb[337] = "Building method: Grid. Press G to change";
    Zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Zb[7] = ["mão"];
    Zb[140] = ["terra", "está sujo!"];
    Zb[126] = ["areia", "entrou nos meus olhos!"];
    Zb[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Zb[108] = ["pedra", "também chamado rocha"];
    Zb[111] = ["ouro", "seja generoso, dê para outros"];
    Zb[112] = ["diamante", "o que você irá fazer com isso?"];
    Zb[121] = ["ametista", "é mauve como lapa"];
    Zb[131] = ["farinha", "usada na cozinha"];
    Zb[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Zb[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Zb[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Zb[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Zb[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Zb[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Zb[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Zb[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Zb[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Zb[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Zb[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Zb[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Zb[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Zb[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Zb[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Zb[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Zb[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Zb[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Zb[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Zb[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Zb[194] = ["mato de espinhos", "pica!"];
    Zb[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Zb[142] = ["gelo", "útil para fazer bolo e água"];
    Zb[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Zb[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Zb[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Zb[178] = ["pele pura", "você é uma fábrica de pão"];
    Zb[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Zb[146] = ["pele de inverno", "ele só queria um abraço"];
    Zb[139] = ["escala", "é pequeno como peixe!"];
    Zb[129] = ["pele do kraken", "você não está com medo?"];
    Zb[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Zb[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Zb[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Zb[161] = ["linha", "usada para fazer chapéus e mochila"];
    Zb[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Zb[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Zb[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Zb[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Zb[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Zb[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Zb[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Zb[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Zb[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Zb[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Zb[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Zb[ah.ΔᐃΔⲆᐃⲆΔⲆᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Zb[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Zb[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Zb[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Zb[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Zb[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Zb[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Zb[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Zb[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Zb[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Zb[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Zb[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Zb[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Zb[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Zb[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Zb[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Zb[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Zb[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Zb[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Zb[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Zb[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Zb[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Zb[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Zb[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Zb[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Zb[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Zb[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Zb[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Zb[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Zb[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Zb[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Zb[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Zb[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Zb[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Zb[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Zb[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Zb[185] = ["esfera do dragão", "dado na questt"];
    Zb[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Zb[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Zb[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Zb[177] = ["pedra azul", "para pessoas muito gentis"];
    Zb[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Zb[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Zb[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Zb[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Zb[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Zb[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Zb[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Zb[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Zb[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Zb[29] = ["mochila", "mais espaço para seus itens!"];
    Zb[120] = ["papel", "usado para fazer o livro"];
    Zb[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Zb[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Zb[148] = ["fechadura", "permite você trancar seu baú"];
    Zb[158] = ["chave", "permite destrancar um baú"];
    Zb[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Zb[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Zb[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Zb[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Zb[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Zb[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Zb[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Zb[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Zb[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Zb[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Zb[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Zb[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Zb[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Zb[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Zb[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Zb[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Zb[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Zb[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Zb[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Zb[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Zb[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Zb[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Zb[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Zb[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Zb[300] = "você não pode entrar no servidor";
    Zb[301] = "kickado: ";
    Zb[302] = "sua chave está em uso por outra pessoa";
    Zb[303] = "sua chave está errada";
    Zb[304] = "você tem uma versão velha, limpe seu cache";
    Zb[305] = "não tem mais recursos";
    Zb[306] = "você sobreviveu 1 dia";
    Zb[307] = "você sobreviveu ";
    Zb[308] = " dias";
    Zb[309] = "você está morto ;-;";
    Zb[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Zb[311] = "servidor está cheio! spam o botão de play!";
    Zb[312] = "não tem recursos";
    Zb[313] = "inventário está cheio (botão direito para deletar itens)";
    Zb[314] = " está morto";
    Zb[315] = "essa não é a ferramenta certa";
    Zb[316] = "você entrou no time";
    Zb[317] = "você está morto";
    Zb[318] = "entrou no time";
    Zb[319] = "seu time foi destruido";
    Zb[320] = "você saiu do time";
    Zb[321] = " saiu do time";
    Zb[322] = "alguém roubou sua ficha :>";
    Zb[323] = "escolha um servidor";
    Zb[324] = "jogadores";
    Zb[325] = "jogadores totais";
    Zb[326] = "jogadores nesse modo";
    Zb[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Et[0] = ["você morreu sem motivo"];
    Et[1] = ["você morreu de fome, como o jogo diz"];
    Et[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Et[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Et[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Et[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Et[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Et[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Et[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Et[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Et[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Et[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Et[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Et[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Et[14] = ["você sabia que você morre afogado? agora você sabe."];
    Et[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Et[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Et[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Et[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Et[19] = ["como vampiro, não chegue perto do alho."];
    Et[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Et[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const kb = 18;
  const Ab = 6;
  function xb(b, c, d, e, f) {
    Hj(Ct, b, c, d, e, f);
    const g = ((163 + (Eb[0] ^ Eb[1])) * 48271 + 0) % 2147483647 ^ 54821 ^ 20673;
    return ~(g & 47928) & 47928 | ~(g & 47928) & g;
  }
  function Jb() {
    Zb[184] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[328] = " BACK TO THE GAME";
    Zb[329] = " Share on Twitter";
    Zb[330] = " Share on Facebook";
    Zb[331] = "You can buy items on the shop in the next game with your points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Kill";
    Zb[335] = "Days survived";
    Zb[336] = "Building method: Free. Press G to change";
    Zb[337] = "Building method: Grid. Press G to change";
    Zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Zb[7] = ["Mano"];
    Zb[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Zb[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Zb[109] = ["Madera", "¡Nunca hay suficiente!"];
    Zb[108] = ["Piedra", "También llamada roca."];
    Zb[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Zb[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Zb[121] = ["Amatista", "Es Mauve como Lapa"];
    Zb[131] = ["Harina", "Usada para cocinar."];
    Zb[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Zb[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Zb[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Zb[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Zb[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Zb[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Zb[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Zb[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Zb[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Zb[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Zb[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Zb[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Zb[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Zb[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Zb[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Zb[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Zb[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Zb[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Zb[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Zb[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Zb[194] = ["Planta de Espinas", "¡Te daña!"];
    Zb[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Zb[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Zb[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Zb[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Zb[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Zb[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Zb[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Zb[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Zb[139] = ["Escamas", "¡Huele a pescado!"];
    Zb[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Zb[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Zb[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Zb[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Zb[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Zb[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Zb[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Zb[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Zb[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Zb[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Zb[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Zb[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Zb[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Zb[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Zb[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Zb[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Zb[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Zb[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Zb[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Zb[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Zb[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Zb[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Zb[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Zb[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Zb[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Zb[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Zb[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Zb[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Zb[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Zb[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Zb[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Zb[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Zb[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Zb[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Zb[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Zb[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Zb[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Zb[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Zb[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Zb[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Zb[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Zb[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Zb[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Zb[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Zb[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Zb[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Zb[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Zb[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Zb[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Zb[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Zb[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Zb[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Zb[185] = ["Esfera del Dragón", "Dada en la misión"];
    Zb[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Zb[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Zb[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Zb[177] = ["Gema Azul", "Para gente muy amable"];
    Zb[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Zb[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Zb[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Zb[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Zb[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Zb[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Zb[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Zb[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Zb[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Zb[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Zb[120] = ["Hoja", "Usada para hacer un libro"];
    Zb[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Zb[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Zb[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Zb[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Zb[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Zb[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Zb[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Zb[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Zb[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Zb[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Zb[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Zb[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Zb[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Zb[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Zb[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Zb[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Zb[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Zb[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Zb[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Zb[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Zb[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Zb[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Zb[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Zb[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Zb[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Zb[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Zb[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Zb[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Zb[300] = "No puedes unirte a este servidor";
    Zb[301] = "Expulsado: ";
    Zb[302] = "Tu llave ya está usada";
    Zb[303] = "Tu llave está mal";
    Zb[304] = "Tienes una versión antigua, limpia tu cache";
    Zb[305] = "No hay mas recursos";
    Zb[306] = "Has sobrevivido 1 día";
    Zb[307] = "Has sobrevivido ";
    Zb[308] = " días";
    Zb[309] = "Estás muerto ;-;";
    Zb[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Zb[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Zb[312] = "Recurso vacio";
    Zb[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Zb[314] = " está muerto";
    Zb[315] = "Esta no es la herramienta correcta";
    Zb[316] = "Te has unido a un equipo";
    Zb[317] = "Estás muerto";
    Zb[318] = " se unió al equipo";
    Zb[319] = "Tu equipo ha sido destruido";
    Zb[320] = "Has dejado el equipo";
    Zb[321] = " dejo el equipo ";
    Zb[322] = "Alguien te robó tu token :>";
    Zb[323] = "Elige un servidor";
    Zb[324] = "jugadores";
    Zb[325] = "total de jugadores";
    Zb[326] = "Jugadores en este modo de juego";
    Zb[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Et[0] = ["Has muerto por ninguna razón"];
    Et[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Et[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Et[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Et[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Et[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Et[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Et[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Et[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Et[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Et[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Et[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Et[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Et[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Et[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Et[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Et[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Et[17] = ["Tu piel se cayó, el sol te quemó."];
    Et[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Et[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Et[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Et[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const Mb = 6;
  function Bb(a, b, c) {
    Oj(Ct, a, b, c);
    return ((240 + (Gc(Eb[0], Eb[1], Eb[2], Eb[0]) ^ wr(Eb[1], Eb[2]))) * 16807 + 0) % 2147483647;
  }
  const Db = 17;
  function Ib(a, b, c, d) {
    Ji(Ct, a, b, c, d);
    const e = xr(Eb[0], Eb[1], Eb[2], Eb[3]);
    Bb(Eb[0], Eb[1], Eb[2]);
    return (e | 9107) & ~(e & 9107);
  }
  let Eb = Ua;
  let Ct = Gm;
  const Dt = ek;
  ek = async function () {
    Ct = lj(Ve(11));
    Eb = mk(Ct);
    if (Dt) {
      Dt();
    }

    await jg.gapi.load("auth2", ly);
  };
  const _b = 2;
  function Fb(b, c, d, e, f) {
    const i = (b | 29754) & ~(b & 29754);
    const a = ~(c & 10006) & c | ~(c & 10006) & 10006;
    const j = (0 << (d >> 8 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d & 255)) + (24 << (d >> 24 & 255));
    const k = e ^ 4559;
    const h = (8 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (24 << (f & 255)) + (0 << (f >> 8 & 255));
    return ((30058 + (Fk(i, a, j, k, h, i) ^ $r(a, j, k, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  function Rb(b, c, d, e) {
    const f = (8 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b >> 8 & 255)) + (24 << (b & 255));
    const g = (24 << (d >> 24 & 255)) + (16 << (d >> 0 & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 16 & 255));
    const a = ~(f & 6221) & 6221 | ~(f & 6221) & f;
    return ((19222 + ((16 << ((a ^ g) & 255)) + (8 << ((a ^ g) >> 8 & 255)) + (0 << ((a ^ g) >> 24 & 255)) + (24 << ((a ^ g) >> 16 & 255)) ^ (~(e & 36500) & e | ~(e & 36500) & 36500))) * 1103515245 + 12345) % 2147483648;
  }
  function jb() {
    Zb[184] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[328] = " BACK TO THE GAME";
    Zb[329] = " Share on Twitter";
    Zb[330] = " Share on Facebook";
    Zb[331] = "You can buy items on the shop in the next game with your points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Kill";
    Zb[335] = "Days survived";
    Zb[336] = "Building method: Free. Press G to change";
    Zb[337] = "Building method: Grid. Press G to change";
    Zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Zb[7] = ["Hand"];
    Zb[140] = ["Boden", "Dreckig!"];
    Zb[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Zb[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Zb[108] = ["Stein", "Auch Fels gennant"];
    Zb[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Zb[112] = ["Diamant", "Was wirst du daraus machen?"];
    Zb[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Zb[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Zb[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Zb[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Zb[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Zb[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Zb[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Zb[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Zb[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Zb[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Zb[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Zb[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Zb[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Zb[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Zb[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Zb[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Zb[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Zb[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Zb[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Zb[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Zb[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Zb[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Zb[194] = ["Dornenbusch", "Es sticht!"];
    Zb[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Zb[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Zb[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Zb[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Zb[2] = ["Hasenfell", "Der Hase war so süß..."];
    Zb[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Zb[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Zb[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Zb[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Zb[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Zb[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Zb[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Zb[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Zb[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Zb[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Zb[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Zb[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Zb[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Zb[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Zb[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Zb[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Zb[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Zb[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Zb[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Zb[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Zb[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Zb[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Zb[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Zb[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Zb[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Zb[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Zb[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Zb[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Zb[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Zb[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Zb[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Zb[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Zb[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Zb[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Zb[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Zb[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Zb[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Zb[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Zb[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Zb[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Zb[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Zb[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Zb[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Zb[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Zb[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Zb[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Zb[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Zb[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Zb[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Zb[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Zb[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Zb[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Zb[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Zb[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Zb[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Zb[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Zb[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Zb[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Zb[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Zb[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Zb[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Zb[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Zb[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Zb[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Zb[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Zb[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Zb[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Zb[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Zb[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Zb[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Zb[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Zb[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Zb[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Zb[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Zb[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Zb[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Zb[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Zb[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Zb[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Zb[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Zb[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Zb[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Zb[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Zb[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Zb[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Zb[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Zb[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Zb[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Zb[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Zb[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Zb[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Zb[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Zb[300] = "Du kannst diesem Server nicht beitreten";
    Zb[301] = "Gekickt: ";
    Zb[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Zb[303] = "Dein Schlüssel ist falsch";
    Zb[304] = "Deine Version ist veraltet, säubere dein Cache";
    Zb[305] = "Es gibt keine neuen Ressourcen";
    Zb[306] = "Du hast einen Tag überlebt";
    Zb[307] = "Du hast überlebt ";
    Zb[308] = " Tage";
    Zb[309] = "Du bist gestorben ;-;";
    Zb[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Zb[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Zb[312] = "Ressource ist leer";
    Zb[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Zb[314] = " ist gestorben";
    Zb[315] = "Das ist nicht das richtige Werkzeug";
    Zb[316] = "Du bist einem Team beigetreten";
    Zb[317] = "Du bist gestorben";
    Zb[318] = " ist dem Team beigetreten";
    Zb[319] = "Dein Team wurde zerstört";
    Zb[320] = "Du hast das Team verlassen";
    Zb[321] = " hat das Team verlassen";
    Zb[322] = "Jemand hat dein Token gestohlen :>";
    Zb[323] = "Suche dir ein Server aus";
    Zb[324] = "Spieler";
    Zb[325] = "alle Spieler";
    Zb[326] = "Spieler in diesem Modus";
    Zb[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Et[0] = ["Du wurdest ohne Grund getötet"];
    Et[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Et[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Et[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Et[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Et[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Et[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Et[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Et[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Et[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Et[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Et[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Et[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Et[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Et[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Et[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Et[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Et[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Et[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Et[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Et[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Et[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const Lb = 3;
  const Gb = 2;
  function Wb() {
    Zb[184] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[328] = " BACK TO THE GAME";
    Zb[329] = " Share on Twitter";
    Zb[330] = " Share on Facebook";
    Zb[331] = "You can buy items on the shop in the next game with your points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Kill";
    Zb[335] = "Days survived";
    Zb[336] = "Building method: Free. Press G to change";
    Zb[337] = "Building method: Grid. Press G to change";
    Zb[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Zb[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Zb[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Zb[7] = ["Ręka"];
    Zb[140] = ["Ziemia", "Brudna!"];
    Zb[126] = ["Piasek", "Mam go w oczach!"];
    Zb[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Zb[108] = ["Kamień", "Także nazywany skałą"];
    Zb[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Zb[112] = ["Diament", "Co z nim zrobisz?"];
    Zb[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Zb[131] = ["Mąka", "Używana w gotowaniu"];
    Zb[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Zb[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Zb[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Zb[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Zb[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Zb[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Zb[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Zb[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Zb[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Zb[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Zb[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Zb[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Zb[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Zb[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Zb[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Zb[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Zb[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Zb[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Zb[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Zb[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Zb[194] = ["Kolczasty krzew", "Kłuje!"];
    Zb[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Zb[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Zb[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Zb[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Zb[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Zb[178] = ["Skóra", "Jesteś fabryką chleba"];
    Zb[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Zb[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Zb[139] = ["Łuski", "Pachnie jak ryba!"];
    Zb[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Zb[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Zb[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Zb[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Zb[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Zb[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Zb[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Zb[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Zb[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Zb[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Zb[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Zb[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Zb[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Zb[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Zb[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Zb[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Zb[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Zb[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Zb[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Zb[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Zb[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Zb[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Zb[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Zb[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Zb[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Zb[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Zb[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Zb[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Zb[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Zb[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Zb[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Zb[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Zb[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Zb[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Zb[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Zb[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Zb[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Zb[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Zb[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Zb[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Zb[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Zb[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Zb[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Zb[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Zb[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Zb[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Zb[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Zb[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Zb[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Zb[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Zb[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Zb[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Zb[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Zb[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Zb[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Zb[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Zb[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Zb[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Zb[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Zb[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Zb[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Zb[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Zb[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Zb[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Zb[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Zb[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Zb[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Zb[120] = ["Papier", "Używany w tworzeniu książki"];
    Zb[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Zb[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Zb[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Zb[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Zb[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Zb[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Zb[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Zb[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Zb[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Zb[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Zb[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Zb[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Zb[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Zb[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Zb[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Zb[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Zb[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Zb[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Zb[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Zb[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Zb[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Zb[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Zb[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Zb[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Zb[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Zb[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Zb[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Zb[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Zb[300] = "Nie możesz dołączyć do tego serwera";
    Zb[301] = "Wyrzucony: ";
    Zb[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Zb[303] = "Twój klucz jest nieprawidłowy";
    Zb[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Zb[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Zb[306] = "Przeżyłeś 1 dzień";
    Zb[307] = "Przeżyłeś ";
    Zb[308] = " dni";
    Zb[309] = "Jesteś martwy ;-;";
    Zb[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Zb[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Zb[312] = "Źródło jest puste";
    Zb[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Zb[314] = " jest martwy";
    Zb[315] = "To nie jest właściwe narzędzie";
    Zb[316] = "Dołączyłeś do drużyny";
    Zb[317] = "Jesteś martwy";
    Zb[318] = " dołączył do drużyny";
    Zb[319] = "Twoja drużyna została zniszczona";
    Zb[320] = " Opuściłeś drużynę";
    Zb[321] = " opuścił drużynę";
    Zb[322] = "Ktoś ukradł twój żeton :>";
    Zb[323] = "Wybierz serwer";
    Zb[324] = "graczy";
    Zb[325] = "wszystkich graczy";
    Zb[326] = "graczy w tym trybie";
    Zb[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Et[0] = ["Zostałeś zabity bez powodu"];
    Et[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Et[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Et[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Et[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Et[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Et[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Et[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Et[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Et[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Et[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Et[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Et[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Et[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Et[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Et[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Et[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Et[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Et[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Et[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Et[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Et[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const Nb = 2;
  function qb(b, c, d) {
    const e = (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b & 255));
    const f = (2147483587 + (c + 38281) * 2147483629) % 2147483647;
    const g = ~(d & 21585) & d | ~(d & 21585) & 21585;
    return (43243 + ($r(e, f, g, e, f, g) ^ function (b, c) {
      const d = ~(b & 32699) & 32699 | ~(b & 32699) & b;
      const e = (16 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 24 & 255)) + (24 << (c >> 0 & 255));
      const f = ix(d, e, d, e, d);
      const g = Co(e, d, e, d, e);
      return (16 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (8 << ((f ^ g) & 255)) + (0 << ((f ^ g) >> 8 & 255));
    }(e, f))) % 65362;
  }
  const Ob = 7;
  const Hb = 3;
  const Ub = 8;
  const Yb = 20;
  const Kb = 11;
  const Xb = 9;
  var Vb = function () {
    Zb[184] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Zb[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Zb[328] = " RETOUR AU JEU";
    Zb[329] = " Partage sur Twitter";
    Zb[330] = " Partage sur Facebook";
    Zb[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Zb[332] = "points";
    Zb[333] = "Score";
    Zb[334] = "Tués";
    Zb[335] = "Jours survécus";
    Zb[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Zb[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Zb[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Zb[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Zb[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Zb[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Zb[7] = ["Main"];
    Zb[140] = ["Terre", "C'est sale!"];
    Zb[126] = ["Sable", "J'en ai dans les yeux"];
    Zb[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Zb[108] = ["Pierre", "Aussi appelée roche"];
    Zb[111] = ["Or", "Sois généreux, donne en aux autres"];
    Zb[112] = ["Diamant", "Comme tes yeux! wesh"];
    Zb[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Zb[131] = ["Farine", "Utile pour la cuisine"];
    Zb[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Zb[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Zb[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Zb[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Zb[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Zb[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Zb[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Zb[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Zb[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Zb[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Zb[201] = ["Guirlandes", "Utilisable sur les toits"];
    Zb[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Zb[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Zb[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Zb[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Zb[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Zb[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Zb[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Zb[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Zb[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Zb[194] = ["Ronces", "Ça pique!"];
    Zb[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Zb[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Zb[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Zb[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Zb[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Zb[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Zb[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Zb[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Zb[139] = ["Écailles", "Ça sent le poisson!"];
    Zb[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Zb[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Zb[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Zb[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Zb[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Zb[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Zb[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Zb[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Zb[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Zb[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Zb[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Zb[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Zb[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Zb[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Zb[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Zb[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Zb[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Zb[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Zb[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Zb[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Zb[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Zb[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Zb[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Zb[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Zb[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Zb[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Zb[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Zb[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Zb[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Zb[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Zb[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Zb[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Zb[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Zb[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Zb[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Zb[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Zb[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Zb[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Zb[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Zb[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Zb[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Zb[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Zb[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Zb[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Zb[185] = ["Orbe du Dragon", "Donné en Quête"];
    Zb[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Zb[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Zb[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Zb[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Zb[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Zb[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Zb[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Zb[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Zb[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Zb[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Zb[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Zb[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Zb[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Zb[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Zb[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Zb[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Zb[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Zb[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Zb[158] = ["Clé", "Pour déverrouiller un coffre"];
    Zb[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Zb[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Zb[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Zb[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Zb[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Zb[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Zb[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Zb[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Zb[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Zb[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Zb[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Zb[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Zb[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Zb[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Zb[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Zb[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Zb[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Zb[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Zb[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Zb[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Zb[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Zb[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Zb[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Zb[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Zb[300] = "Tu ne peux pas rejoindre le serveur";
    Zb[301] = "Expulsé: ";
    Zb[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Zb[303] = "Ta clé est fausse";
    Zb[304] = "Tu as une vieille version, rafraichis tes caches";
    Zb[305] = "Il n'y a plus de nouvelles ressources";
    Zb[306] = "Tu as survécu 1 jour";
    Zb[307] = "Tu as survécu ";
    Zb[308] = " jours";
    Zb[309] = "Tu es mort ;-;";
    Zb[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Zb[311] = "Le serveur est complet! Spam le bouton jouer";
    Zb[312] = "Cette ressource est vide";
    Zb[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Zb[314] = " est mort";
    Zb[315] = "Ce n'est pas le bon outil";
    Zb[316] = "Tu as rejoins une équipe";
    Zb[317] = "Tu es mort";
    Zb[318] = " a rejoint l'équipe";
    Zb[319] = "Ton équipe a été détruite";
    Zb[320] = "Tu as quitté l'équipe";
    Zb[321] = " a quitté l'équipe";
    Zb[322] = "Quelqu'un a volé ton token :>";
    Zb[323] = "Choisis un serveur";
    Zb[324] = "joueurs";
    Zb[325] = "joueurs";
    Zb[326] = "joueurs dans ce mode";
    Zb[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Et[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Et[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Et[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Et[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Et[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Et[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Et[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Et[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Et[8] = ["Cet ours voulait juste un câlin."];
    Et[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Et[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Et[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Et[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Et[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Et[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Et[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Et[16] = ["Un kraken a 'kraké' tes os."];
    Et[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Et[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Et[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Et[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Et[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃⵠᐃΔΔ = "Uuunnnggg";
    ΔⲆⵠΔⲆⲆⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  };
  var Zb = [];
  for (var $b = 0; $b < 344; $b++) {
    Zb[$b] = "";
  }
  var Et = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Tb();
    } else if (a === "Français") {
      Vb();
    } else if (a === "Deutsch") {
      jb();
    } else if (a === "Español") {
      Jb();
    } else if (a === "Português") {
      Pb();
    } else if (a === "Русский") {
      wb();
    } else if (a === "Polski") {
      Wb();
    }
    ⲆⲆΔΔⵠ = [];
    Gx.ⲆΔᐃⵠ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const id = 19;
  const td = 0;
  Lr = "EN";
  const nd = 11;
  const od = 10;
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Lr = "RU";
      break;
    case "en":
      Lr = "EN";
      break;
    case "es":
      Lr = "SP";
      break;
    case "fr":
      Lr = "FR";
      break;
    case "pl":
      Lr = "PL";
      break;
    case "de":
      Lr = "DE";
      break;
    case "pt":
      Lr = "PT";
  }
  const ad = 5;
  var rd;
  const Gt = 9;
  if (Lr === "FR") {
    $(".md-languages label button").text("Français");
    rd = Vb;
  } else if (Lr === "PL") {
    $(".md-languages label button").text("Polski");
    rd = Wb;
  } else if (Lr === "PT") {
    $(".md-languages label button").text("Português");
    rd = Pb;
  } else if (Lr === "SP") {
    $(".md-languages label button").text("Español");
    rd = Jb;
  } else if (Lr === "RU") {
    $(".md-languages label button").text("Русский");
    rd = wb;
  } else if (Lr === "DE") {
    $(".md-languages label button").text("Deutsch");
    rd = jb;
  } else {
    $(".md-languages label button").text("English");
    rd = Tb;
  }
  ΔⲆ = {
    ⲆΔᐃⲆᐃⵠⲆᐃΔ: "img/logo.png",
    ⵠⲆⲆΔΔᐃⵠ: "img/mapday.png",
    ⲆΔⲆΔΔᐃΔ: "img/mapnight.png",
    ⵠᐃΔⵠΔΔΔᐃⵠ: "img/bigzday.png",
    ⵠΔⲆⵠⵠⵠⲆΔΔ: "img/bigznight.png",
    ΔⲆΔⵠⲆⲆΔ: "img/bigday-river1.png",
    ᐃⲆⲆⵠⵠⵠΔᐃΔ: "img/bigday-lake.png",
    ᐃⲆⲆⵠᐃΔⵠ: "img/bigday-berry.png",
    ᐃⵠᐃΔⵠⲆΔ: "img/bigday-stone1.png",
    ⲆᐃᐃΔᐃⵠΔ: "img/bigday-stone2.png",
    ⵠΔΔΔᐃΔⲆ: "img/bigday-gold1.png",
    ⲆⲆᐃΔⲆⲆⵠ: "img/bigday-gold2.png",
    ⲆⲆᐃⲆᐃΔᐃ: "img/bigday-emerald1.png",
    ΔⲆᐃᐃΔᐃΔ: "img/bigday-emerald2.png",
    ⵠΔΔⵠⲆⲆΔ: "img/bigday-amethyst.png",
    ⵠᐃⲆⲆⲆΔⲆ: "img/bigday-bear.png",
    ⵠᐃᐃⲆΔⲆⵠ: "img/bigday-cave.png",
    ᐃⵠⵠᐃΔᐃⵠ: "img/bigday-diamond.png",
    ᐃⲆⲆΔⵠⲆᐃ: "img/bigday-island.png",
    ΔΔᐃⵠᐃⲆⲆ: "img/bigday-reidite.png",
    ᐃΔᐃᐃΔᐃⲆ: "img/bigday-spider.png",
    ⲆᐃⵠⵠⵠⲆⵠ: "img/bigday-wolf.png",
    ⲆΔᐃᐃⲆⲆᐃ: "img/bigday-fir-tree.png",
    ΔⵠΔΔⵠᐃⲆ: "img/bigday-fox.png",
    ᐃⵠᐃᐃΔᐃⲆ: "img/bigday-kraken.png",
    ⵠΔⲆⲆⲆⵠⵠ: "img/bigday-piranha.png",
    ΔᐃⲆⵠΔᐃⲆ: "img/bigday-cactus.png",
    ᐃΔⵠΔⵠⲆΔ: "img/bigday-magma.png",
    Δᐃᐃᐃⵠᐃᐃ: "img/bigday-river1.png",
    ΔΔΔΔⲆᐃⲆΔᐃ: "img/bignight-lake.png",
    ⵠΔᐃΔⲆⲆⵠⵠᐃ: "img/bignight-berry.png",
    ⲆⲆΔᐃΔΔΔ: "img/bignight-stone1.png",
    ⵠⵠⲆⵠΔⵠⵠ: "img/bignight-stone2.png",
    ⲆⲆΔᐃⲆⵠᐃ: "img/bignight-gold1.png",
    ΔⵠⲆᐃⲆⵠΔ: "img/bignight-gold2.png",
    ᐃⵠᐃΔᐃⲆΔ: "img/bignight-emerald1.png",
    ᐃⵠΔⵠᐃⲆΔ: "img/bignight-emerald2.png",
    ΔⵠⵠⵠΔⵠⵠ: "img/bignight-amethyst.png",
    ᐃⵠᐃΔⲆᐃᐃ: "img/bignight-bear.png",
    ⵠΔⲆᐃⵠΔⵠ: "img/bignight-cave.png",
    ΔⲆⵠΔᐃⵠᐃ: "img/bignight-diamond.png",
    ⲆΔⲆᐃⲆᐃⲆ: "img/bignight-island.png",
    ⵠᐃⵠⵠΔⲆΔ: "img/bignight-reidite.png",
    ⵠⲆΔᐃᐃⵠᐃ: "img/bignight-spider.png",
    ᐃⲆᐃΔᐃⵠⵠ: "img/bignight-wolf.png",
    ⵠⵠⲆΔᐃⵠᐃ: "img/bignight-fir-tree.png",
    ᐃΔⵠⲆⲆᐃΔ: "img/bignight-fox.png",
    ⲆⵠⲆⲆΔΔΔ: "img/bignight-kraken.png",
    ᐃⵠⲆᐃᐃⲆᐃ: "img/bignight-piranha.png",
    ΔⵠΔΔΔⲆⵠ: "img/bignight-cactus.png",
    ᐃΔᐃⵠⲆᐃⲆ: "img/bignight-magma.png",
    ᐃⲆᐃⵠΔΔΔ: "img/bigday-desert.png",
    ⲆᐃΔⲆⲆᐃⵠ: "img/bigday-winter.png",
    ᐃⲆᐃⵠⲆᐃⵠ: "img/bigday-lava.png",
    ⲆⲆᐃⵠΔⵠᐃ: "img/bigday-forest.png",
    ΔΔΔⲆᐃΔⲆ: "img/bignight-desert.png",
    ⲆⲆᐃᐃᐃⵠⲆ: "img/bignight-winter.png",
    ⲆΔΔⵠⵠᐃΔ: "img/bignight-lava.png",
    ⲆᐃⵠΔⲆΔⲆ: "img/bignight-forest.png",
    ⵠⲆΔᐃᐃᐃᐃ: "img/day-river-wave.png",
    ΔⵠΔⵠⵠᐃⵠ: "img/night-river-wave.png",
    ᐃΔΔⵠⲆΔᐃ: "img/day-fog0.png",
    ⵠᐃΔⵠᐃᐃΔ: "img/day-fog1.png",
    ⲆⲆⲆᐃᐃΔᐃ: "img/day-fog2.png",
    ᐃᐃⵠⵠⵠΔⲆ: "img/night-fog0.png",
    ⲆⲆⵠⵠⲆΔⵠ: "img/night-fog1.png",
    ⲆⲆⵠᐃⲆⵠⵠ: "img/night-fog2.png",
    ΔⵠⲆΔᐃΔΔ: "img/day-fogdesert0.png",
    ⲆⵠᐃⵠⲆⵠⲆ: "img/day-fogdesert1.png",
    ΔᐃⵠΔⵠᐃΔ: "img/day-fogdesert2.png",
    ⲆⲆΔⵠΔⵠⵠ: "img/night-fogdesert0.png",
    ᐃⲆΔᐃⵠⵠΔ: "img/night-fogdesert1.png",
    ⵠᐃⵠⲆᐃᐃΔ: "img/night-fogdesert2.png",
    ΔⵠΔⵠᐃⵠᐃ: "img/day-cross-server.png",
    ᐃⲆΔᐃⵠᐃⵠ: "img/day-here-server.png",
    ΔⵠⵠΔΔᐃΔ: "img/day-finish-server.png",
    ⲆΔΔΔΔⲆⲆ: "img/day-item-server.png",
    ⵠⲆⲆΔⲆⵠⵠ: "img/day-skull-server.png",
    ⵠᐃᐃΔⵠΔᐃ: "img/night-cross-server.png",
    ΔΔⲆⲆⲆⵠΔ: "img/night-here-server.png",
    ᐃⵠΔⵠⲆⲆΔ: "img/night-finish-server.png",
    ΔⲆΔⲆΔⲆⲆ: "img/night-item-server.png",
    ΔⲆⲆΔⵠΔᐃ: "img/night-skull-server.png",
    ᐃᐃΔⵠⵠⲆΔ: "img/day-reidite0.png",
    ΔⲆΔⲆΔⵠⲆ: "img/night-reidite0.png",
    ⵠⲆⲆⲆⵠⵠⲆ: "img/day-reidite1.png",
    ⵠⵠⲆⵠⵠΔᐃ: "img/night-reidite1.png",
    ᐃΔΔᐃΔⵠΔ: "img/day-reidite2.png",
    ⵠᐃⵠΔᐃⲆᐃ: "img/night-reidite2.png",
    ᐃΔⲆⵠᐃⲆΔ: "img/day-lava1.png",
    ΔΔΔΔⲆᐃⲆ: "img/night-lava1.png",
    ΔⵠⲆΔΔⲆⲆ: "img/day-lava2.png",
    ΔⲆⵠΔᐃᐃΔ: "img/night-lava2.png",
    ⵠΔᐃΔⲆᐃⲆ: "img/day-lava3.png",
    ⲆⵠᐃⲆᐃΔⵠ: "img/night-lava3.png",
    ΔᐃᐃΔⵠⵠᐃ: "img/day-lava4.png",
    ΔⵠⵠᐃΔΔΔ: "img/night-lava4.png",
    ⵠⵠΔᐃΔⲆᐃ: "img/day-lava5.png",
    ⵠⲆⵠⲆΔⵠᐃ: "img/night-lava5.png",
    ΔⲆⲆᐃΔᐃⲆ: "img/day-lava6.png",
    ΔΔᐃᐃⵠΔⲆ: "img/night-lava6.png",
    ⲆΔΔΔΔΔⵠ: "img/day-lava-ground1.png",
    ΔΔΔᐃⵠΔΔ: "img/night-lava-ground1.png",
    ⲆⵠΔᐃⲆᐃⲆ: "img/day-lava-ground2.png",
    ΔⵠΔⲆᐃⵠᐃ: "img/night-lava-ground2.png",
    ᐃⵠΔᐃⵠᐃⲆ: "img/day-lava-ground3.png",
    ⵠᐃⵠΔⵠⲆⲆ: "img/night-lava-ground3.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/day-lava-ground4.png",
    ΔΔⲆΔᐃⲆⵠ: "img/night-lava-ground4.png",
    ⲆⲆⵠⵠΔⲆᐃ: "img/day-lava-ground5.png",
    ᐃΔΔⵠΔⵠⵠ: "img/night-lava-ground5.png",
    ᐃᐃᐃⲆⲆᐃᐃ: "img/day-lava-ground6.png",
    ΔⲆᐃⲆⵠΔⲆ: "img/night-lava-ground6.png",
    ⲆᐃⲆΔⵠⵠᐃ: "img/day-fire-mob.png",
    ΔⵠΔⵠⵠⲆⵠ: "img/night-fire-mob.png",
    ⲆⲆΔⵠⲆⲆⵠ: "img/hurt-fire-mob.png",
    ⵠᐃᐃᐃⲆᐃᐃ: "img/day-diamond-protection.png",
    ᐃᐃⲆΔΔΔᐃ: "img/night-diamond-protection.png",
    ᐃΔᐃᐃᐃⵠⲆ: "img/day-hand-diamond-protection.png",
    ⵠΔⲆⲆΔⵠⵠ: "img/night-hand-diamond-protection.png",
    ΔΔⵠⲆΔΔⲆ: "img/inv-diamond-protection-out.png",
    ⲆⵠΔΔⲆⲆⵠ: "img/inv-diamond-protection-in.png",
    ⵠΔΔᐃⵠΔΔ: "img/inv-diamond-protection-click.png",
    ⵠⲆⵠⵠⲆΔᐃ: "img/day-amethyst-protection.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/night-amethyst-protection.png",
    ⵠᐃᐃⲆᐃⵠΔⵠⵠ: "img/day-hand-amethyst-protection.png",
    ⵠⲆⵠⵠΔᐃΔΔⲆ: "img/night-hand-amethyst-protection.png",
    ᐃᐃΔΔΔΔⵠ: "img/inv-amethyst-protection-out.png",
    ⵠΔⵠⲆΔⵠᐃ: "img/inv-amethyst-protection-in.png",
    ⵠⵠᐃⲆⲆⵠᐃ: "img/inv-amethyst-protection-click.png",
    ⵠⵠΔΔⲆᐃⲆ: "img/day-reidite-sword.png",
    ⲆΔⲆⵠᐃⲆᐃ: "img/night-reidite-sword.png",
    ⲆΔΔᐃᐃΔᐃ: "img/inv-reidite-sword-out.png",
    ⲆⵠⲆⵠᐃⲆᐃ: "img/inv-reidite-sword-in.png",
    ΔⵠΔΔⲆᐃⵠ: "img/inv-reidite-sword-click.png",
    ᐃⲆΔᐃΔΔᐃ: "img/inv-reidite-out.png",
    ᐃⲆᐃⵠᐃⲆⵠ: "img/inv-reidite-in.png",
    ᐃᐃΔⵠⲆᐃΔ: "img/inv-reidite-click.png",
    ΔᐃᐃᐃⲆⲆᐃ: "img/inv-flame-out.png",
    ⵠᐃΔΔⵠⵠᐃ: "img/inv-flame-in.png",
    ⵠⲆΔⲆⲆΔⵠ: "img/inv-flame-click.png",
    ΔⵠⲆΔⲆᐃⵠ: "img/day-magma-buble0.png",
    ΔⲆⲆᐃⵠΔⲆ: "img/night-magma-buble0.png",
    ΔΔⲆᐃᐃᐃⲆ: "img/day-magma-buble1.png",
    ⵠⵠⲆⵠᐃΔΔ: "img/night-magma-buble1.png",
    ⵠⲆⵠᐃᐃΔΔ: "img/day-magma-buble2.png",
    ΔⵠⲆᐃⵠⲆⲆ: "img/night-magma-buble2.png",
    ⵠⲆΔⲆΔⵠⲆ: "img/day-lava-dragon.png",
    ⵠⲆᐃΔᐃΔⵠ: "img/night-lava-dragon.png",
    ᐃΔᐃⵠΔᐃⵠⵠⵠ: "img/day-fire-dragon.png",
    ΔⲆⵠⲆΔⵠΔᐃⵠ: "img/night-fire-dragon.png",
    ⲆΔⵠᐃⵠⵠᐃ: "img/hurt-lava-dragon.png",
    ⲆΔⵠⵠΔⲆⲆ: "img/day-lava-wing-left.png",
    ΔΔᐃᐃΔᐃⲆ: "img/night-lava-wing-left.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/day-lava-wing-right.png",
    ΔⵠᐃⵠⵠⵠⲆ: "img/night-lava-wing-right.png",
    ΔⲆᐃⵠⲆᐃⲆ: "img/hurt-lava-wing-left.png",
    ΔⲆΔⵠⲆΔΔ: "img/hurt-lava-wing-right.png",
    ᐃⵠΔᐃᐃΔᐃ: "img/day-reidite-spear.png",
    ⵠⵠΔⵠⵠᐃΔ: "img/night-reidite-spear.png",
    ⲆΔⵠᐃⵠΔⲆ: "img/inv-reidite-spear-out.png",
    ᐃⵠⲆⲆΔⲆⲆ: "img/inv-reidite-spear-in.png",
    ⲆⵠⲆᐃΔⲆΔ: "img/inv-reidite-spear-click.png",
    ΔⲆᐃΔᐃΔⲆ: "img/day-reidite-helmet.png",
    ⲆⵠⵠⲆⵠⲆΔ: "img/night-reidite-helmet.png",
    ⲆᐃⲆΔΔᐃⵠ: "img/inv-reidite-helmet-out.png",
    ⵠⵠⲆΔΔΔΔ: "img/inv-reidite-helmet-in.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/inv-reidite-helmet-click.png",
    ⵠᐃⲆΔΔⵠⲆ: "img/day-hand-reidite-protection.png",
    ΔⵠᐃⵠⵠΔᐃ: "img/night-hand-reidite-protection.png",
    ⲆΔᐃⲆⲆⵠⵠ: "img/day-reidite-protection.png",
    ΔΔⵠᐃⵠΔⵠ: "img/night-reidite-protection.png",
    ⵠΔⲆᐃᐃⲆᐃ: "img/inv-reidite-protection-out.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/inv-reidite-protection-in.png",
    ᐃΔⵠⲆⵠⲆⵠ: "img/inv-reidite-protection-click.png",
    ᐃⲆⲆⵠⵠⲆⲆ: "img/day-lava-dragon-sword.png",
    ⲆΔΔⲆᐃᐃΔ: "img/night-lava-dragon-sword.png",
    ⵠᐃⲆⵠΔⲆⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃᐃᐃΔᐃᐃⵠ: "img/inv-lava-dragon-sword-in.png",
    ⵠⲆΔᐃᐃΔⵠ: "img/inv-lava-dragon-sword-click.png",
    ⵠⵠⲆⲆⵠᐃᐃ: "img/day-lava-spear.png",
    ⵠⲆⵠⲆⲆΔΔ: "img/night-lava-spear.png",
    ᐃᐃⲆⲆⵠⲆⲆ: "img/inv-lava-spear-out.png",
    ΔⲆΔⲆⲆᐃΔ: "img/inv-lava-spear-in.png",
    ⵠᐃⲆᐃᐃⵠⵠ: "img/inv-lava-spear-click.png",
    ⵠΔⲆⲆⲆΔⲆ: "img/day-lava-helmet.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/night-lava-helmet.png",
    ⲆⲆΔᐃΔᐃᐃ: "img/inv-lava-helmet-out.png",
    ⲆⲆᐃΔΔᐃΔ: "img/inv-lava-helmet-in.png",
    ⵠΔⲆⵠΔⲆᐃ: "img/inv-lava-helmet-click.png",
    ᐃΔⲆΔⵠⵠⲆ: "img/day-witch-hat.png",
    ᐃⵠⵠⵠⲆᐃⵠ: "img/night-witch-hat.png",
    ᐃⵠⵠⲆⵠΔᐃ: "img/inv-witch-hat-out.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/inv-witch-hat-in.png",
    ᐃᐃΔⲆⲆⵠⲆ: "img/inv-witch-hat-click.png",
    ΔⲆⲆⵠᐃⵠⲆ: "img/day-nimbus2000.png",
    ⵠᐃᐃⲆⲆΔᐃ: "img/night-nimbus2000.png",
    ⵠᐃΔⵠⵠⲆᐃ: "img/inv-nimbus2000-out.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/inv-nimbus2000-in.png",
    ΔᐃΔⵠᐃⵠΔ: "img/inv-nimbus2000-click.png",
    ΔᐃΔΔΔᐃⵠ: "img/day-accessory1-pacques.png",
    ⲆⲆⵠᐃΔⵠⲆ: "img/night-accessory1-pacques.png",
    ΔᐃⲆⲆΔΔΔ: "img/day-accessory2-pacques.png",
    ΔⵠᐃΔⲆΔᐃ: "img/night-accessory2-pacques.png",
    ⲆⵠⲆⲆΔⵠΔ: "img/day-accessory3-pacques.png",
    ΔᐃΔΔΔᐃΔ: "img/night-accessory3-pacques.png",
    ΔⵠⲆⵠⲆⲆᐃ: "img/day-accessory5-pacques.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/night-accessory5-pacques.png",
    ⵠⵠᐃⵠᐃⵠⵠ: "img/day-accessory6-pacques.png",
    ⵠⲆᐃᐃⲆᐃᐃ: "img/night-accessory6-pacques.png",
    ⵠᐃᐃᐃⲆⲆᐃ: "img/day-accessory7-pacques.png",
    ᐃⲆΔⵠⵠⲆΔ: "img/night-accessory7-pacques.png",
    ΔΔᐃΔΔⲆΔ: "img/day-accessory8-pacques.png",
    ᐃᐃⵠᐃⲆⲆΔ: "img/night-accessory8-pacques.png",
    ᐃⲆⵠⲆᐃΔᐃ: "img/day-bag-pacques.png",
    ΔΔⲆⵠⵠⵠⵠ: "img/night-bag-pacques.png",
    ᐃⵠΔᐃⵠΔΔ: "img/day-carrot.png",
    ⵠᐃⲆⲆΔΔΔ: "img/night-carrot.png",
    ΔᐃⲆᐃᐃᐃⵠ: "img/day-carrot-dried.png",
    ⲆⲆΔΔΔΔΔ: "img/night-carrot-dried.png",
    ⵠᐃⲆⵠᐃΔᐃ: "img/day-tomato-herb.png",
    ᐃΔΔᐃᐃᐃΔ: "img/night-tomato-herb.png",
    ⵠΔΔΔΔΔΔ: "img/day-tomato-herb-dried.png",
    ᐃⲆⲆΔΔⵠⵠ: "img/night-tomato-herb-dried.png",
    ΔⵠⵠⵠⵠⲆΔ: "img/day-tomato.png",
    ⵠⲆᐃⲆⲆⲆΔ: "img/night-tomato.png",
    ΔⵠⵠⵠΔᐃⲆ: "img/inv-carrot-out.png",
    ⵠⵠᐃⵠΔΔᐃ: "img/inv-carrot-in.png",
    ⵠΔᐃΔΔⵠⵠ: "img/inv-carrot-click.png",
    ΔΔᐃΔΔᐃⲆ: "img/inv-tomato-out.png",
    ΔΔⲆᐃᐃΔΔ: "img/inv-tomato-in.png",
    ⲆΔⵠᐃⲆⲆⲆ: "img/inv-tomato-click.png",
    ⲆᐃⵠΔᐃⵠⵠ: "img/day-player0.png",
    ⲆᐃⲆⵠⲆΔΔ: "img/night-player0.png",
    ΔΔᐃΔⵠᐃⵠ: "img/day-player1.png",
    ⵠΔⲆⵠⵠⵠᐃ: "img/night-player1.png",
    ⲆⲆⲆⵠΔⵠⲆ: "img/day-player2.png",
    ᐃΔⲆΔⲆΔⵠ: "img/night-player22.png",
    ⵠⵠⲆΔΔᐃⵠ: "img/day-player3.png",
    ⵠΔΔⲆⲆΔΔ: "img/night-player33.png",
    ⲆΔⲆΔⲆᐃΔ: "img/day-player4.png",
    ΔⵠⲆⲆΔⲆⲆ: "img/night-player4.png",
    ⲆⲆⵠⵠⲆᐃⵠ: "img/day-player5.png",
    ΔᐃᐃⲆⲆᐃⵠ: "img/night-player5.png",
    ΔΔⵠⲆᐃⲆⲆ: "img/day-player6.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/night-player6.png",
    ⵠᐃⵠⲆⲆⵠⵠ: "img/day-player7.png",
    ⲆⲆΔⲆⲆⵠⵠ: "img/night-player7.png",
    ⲆⵠᐃΔⵠΔⲆ: "img/day-player8.png",
    ΔΔᐃⲆΔⲆΔ: "img/night-player8.png",
    ΔΔⵠᐃΔⲆⵠ: "img/day-player9.png",
    ⲆⲆᐃⲆⲆΔⵠ: "img/night-player9.png",
    ⲆⵠⵠⲆᐃΔΔ: "img/day-player10.png",
    ⵠΔⲆⵠⲆΔᐃ: "img/night-player10.png",
    ᐃⵠⲆΔⵠⵠⲆ: "img/day-player11.png",
    ᐃⵠⲆᐃᐃⲆΔ: "img/night-player11.png",
    ⲆᐃᐃΔⲆⲆᐃ: "img/day-player12.png",
    ᐃᐃᐃⲆᐃⵠΔ: "img/night-player12.png",
    ΔⵠⵠᐃⲆΔᐃ: "img/day-player13.png",
    ᐃⲆᐃⲆᐃⵠΔ: "img/night-player13.png",
    ᐃⵠⲆΔΔᐃΔ: "img/day-player14.png",
    ⲆⲆΔⲆⵠⵠᐃ: "img/night-player14.png",
    ᐃᐃⲆⲆᐃⵠᐃ: "img/day-player15.png",
    ᐃᐃⲆⵠᐃⲆⲆ: "img/night-player15.png",
    ᐃⵠⵠΔΔⲆᐃ: "img/day-player16.png",
    ᐃⵠⵠⲆΔⵠᐃ: "img/night-player16.png",
    ΔⵠᐃⵠΔⲆⵠ: "img/day-player17.png",
    ⲆⵠⲆΔⵠⵠⵠ: "img/night-player17.png",
    ⵠⵠⲆⵠᐃⲆᐃ: "img/day-player18.png",
    ⲆᐃᐃᐃΔⲆⲆ: "img/night-player18.png",
    ᐃⵠᐃᐃΔΔΔ: "img/day-player19.png",
    ΔⲆᐃⲆⵠⲆᐃ: "img/night-player19.png",
    ⲆⵠⲆⲆΔⵠⵠ: "img/day-hand-player0.png",
    ΔⲆᐃⲆᐃΔΔ: "img/night-hand-player0.png",
    ⲆⲆΔᐃᐃⵠⵠ: "img/day-hand-player1.png",
    ΔΔΔᐃⲆᐃᐃ: "img/night-hand-player1.png",
    ΔⵠⲆⲆΔᐃᐃ: "img/day-hand-player2.png",
    ⲆⵠⵠⵠⵠⲆΔ: "img/night-hand-player22.png",
    ΔΔΔᐃᐃⵠⲆ: "img/day-hand-player3.png",
    ⵠΔⲆΔΔΔᐃ: "img/night-hand-player33.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/day-hand-player4.png",
    ᐃΔᐃᐃᐃⲆⲆ: "img/night-hand-player4.png",
    ᐃᐃΔⵠᐃⲆᐃ: "img/day-hand-player5.png",
    ᐃⲆᐃᐃⲆᐃⲆ: "img/night-hand-player5.png",
    ΔⲆΔⲆᐃⲆⲆ: "img/day-hand-player6.png",
    ᐃᐃⲆⵠΔᐃΔ: "img/night-hand-player6.png",
    ⲆⲆⲆΔⲆΔᐃ: "img/day-hand-player7.png",
    ⵠⵠΔΔΔⲆⲆ: "img/night-hand-player7.png",
    ΔᐃΔᐃᐃΔΔ: "img/day-hand-player8.png",
    ⲆᐃΔⲆΔᐃⵠ: "img/night-hand-player8.png",
    ΔΔᐃⲆΔΔᐃ: "img/day-hand-player9.png",
    ⲆᐃΔⲆΔⵠⵠ: "img/night-hand-player9.png",
    ΔΔᐃΔⵠⵠⵠ: "img/day-hand-player10.png",
    ⲆⵠⵠᐃⲆᐃⲆ: "img/night-hand-player10.png",
    ⵠⲆⵠⲆΔΔⲆ: "img/day-hand-player11.png",
    ΔΔⲆⲆᐃⲆᐃ: "img/night-hand-player11.png",
    ⲆΔᐃᐃΔΔᐃ: "img/day-hand-player12.png",
    ⲆⲆᐃΔᐃᐃⲆ: "img/night-hand-player12.png",
    ᐃⲆⵠⵠᐃⵠⵠ: "img/day-hand-player13.png",
    ⵠΔⵠΔᐃᐃⵠ: "img/night-hand-player13.png",
    ⲆᐃΔⲆΔⲆᐃ: "img/day-hand-player14.png",
    ᐃⲆⵠΔⲆΔⲆ: "img/night-hand-player14.png",
    ⵠⲆΔⵠⲆⵠᐃ: "img/day-hand-player15.png",
    ΔⲆΔᐃᐃⵠΔ: "img/night-hand-player15.png",
    ᐃⵠⵠΔΔⵠΔ: "img/day-hand-player16.png",
    ⵠᐃΔᐃᐃΔᐃ: "img/night-hand-player16.png",
    ⵠᐃᐃⲆⲆᐃⲆ: "img/day-hand-player17.png",
    ⵠᐃⵠⵠᐃᐃⵠ: "img/night-hand-player17.png",
    ΔΔⵠⵠᐃⵠΔ: "img/day-hand-player18.png",
    ΔⵠⲆᐃⲆⵠⲆ: "img/night-hand-player18.png",
    ⵠᐃΔᐃⵠⲆⵠ: "img/day-hand-player19.png",
    ΔᐃⲆⲆⲆⲆⵠ: "img/night-hand-player19.png",
    ΔΔⲆⲆᐃⵠⵠ: "img/day-accessory4.png",
    ⲆⵠⵠⵠⲆⲆⲆ: "img/night-accessory4.png",
    ⵠⵠⲆᐃᐃΔⵠ: "img/day-accessory9.png",
    ⲆΔΔⵠⲆᐃΔ: "img/night-accessory9.png",
    ⲆⲆΔⲆⵠᐃᐃ: "img/day-accessory10.png",
    ΔᐃⵠᐃΔⲆⲆ: "img/night-accessory10.png",
    ᐃᐃⵠΔⵠΔᐃ: "img/day-accessory11.png",
    ⲆⲆᐃⲆⵠᐃΔ: "img/night-accessory11.png",
    ⲆⲆΔⲆΔⵠⵠ: "img/day-accessory12.png",
    ⵠⵠⲆᐃⵠⲆⵠ: "img/night-accessory12.png",
    ᐃⵠⲆᐃⵠΔⵠ: "img/day-bag.png",
    ᐃᐃⵠΔⵠⲆΔ: "img/night-bag.png",
    ⵠᐃΔᐃⲆⵠⲆ: "img/inv-bag-out.png",
    ᐃⵠΔⵠΔⵠᐃ: "img/inv-bag-in.png",
    ⲆⲆⵠⲆᐃⲆⵠ: "img/inv-bag-click.png",
    ᐃⲆᐃᐃⵠⲆᐃ: "img/day-pitchfork.png",
    ⵠⲆⲆΔΔⵠΔ: "img/night-pitchfork.png",
    ⵠⵠΔᐃΔΔᐃ: "img/inv-pitchfork-out.png",
    ΔᐃΔΔⲆⵠⲆ: "img/inv-pitchfork-in.png",
    ⵠⵠᐃΔⲆᐃⵠ: "img/inv-pitchfork-click.png",
    ΔᐃⲆⲆΔᐃᐃ: "img/inv-wood-spike-door-out.png",
    ΔⲆⵠⵠᐃΔⲆ: "img/inv-wood-spike-door-in.png",
    ᐃᐃᐃΔⲆⲆⵠ: "img/inv-wood-spike-door-click.png",
    ⵠⵠᐃΔᐃΔⲆ: "img/inv-stone-spike-door-out.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/inv-stone-spike-door-in.png",
    ⵠⵠᐃⵠⲆⵠΔ: "img/inv-stone-spike-door-click.png",
    ⵠⵠᐃᐃⲆΔᐃ: "img/inv-gold-spike-door-out.png",
    ᐃᐃΔᐃᐃᐃⵠ: "img/inv-gold-spike-door-in.png",
    ᐃⲆᐃΔⲆΔⵠ: "img/inv-gold-spike-door-click.png",
    ᐃᐃⲆⲆⲆᐃⵠ: "img/inv-diamond-spike-door-out.png",
    ⲆᐃᐃᐃⵠⵠΔ: "img/inv-diamond-spike-door-in.png",
    ⵠⵠⵠᐃⲆⵠΔ: "img/inv-diamond-spike-door-click.png",
    ⵠΔᐃⵠⵠΔⵠ: "img/inv-amethyst-spike-door-out.png",
    ⲆⵠⲆⲆᐃⵠᐃ: "img/inv-amethyst-spike-door-in.png",
    ⵠΔⲆᐃΔⲆⲆ: "img/inv-amethyst-spike-door-click.png",
    ᐃⲆᐃⵠⵠⲆᐃ: "img/day-wood-spike-door.png",
    ᐃⵠΔΔⵠⲆⲆ: "img/night-wood-spike-door.png",
    ⲆᐃⵠⲆᐃⲆᐃ: "img/day-stone-spike-door.png",
    ⲆΔΔᐃᐃᐃⲆ: "img/night-stone-spike-door.png",
    ΔΔⵠⵠΔⲆⵠ: "img/day-gold-spike-door.png",
    ⲆⲆᐃΔΔⲆⵠ: "img/night-gold-spike-door.png",
    ⵠⲆΔᐃⲆᐃⵠ: "img/day-diamond-spike-door.png",
    ᐃⵠᐃⵠⲆⲆΔ: "img/night-diamond-spike-door.png",
    ᐃΔⵠⵠΔⲆΔ: "img/day-amethyst-spike-door.png",
    ⵠΔⵠⵠⵠⲆΔ: "img/night-amethyst-spike-door.png",
    ΔΔⵠΔⲆΔⲆ: "img/inv-reidite-spike-door-out.png",
    ⵠⵠⵠᐃⲆⲆΔ: "img/inv-reidite-spike-door-in.png",
    ᐃⵠΔᐃⲆΔⲆ: "img/inv-reidite-spike-door-click.png",
    ⲆⵠᐃᐃΔⵠΔ: "img/inv-reidite-door-out.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/inv-reidite-door-in.png",
    ᐃᐃⲆⵠΔΔΔ: "img/inv-reidite-door-click.png",
    ᐃᐃᐃᐃⲆᐃΔ: "img/inv-reidite-spike-out.png",
    ΔᐃⲆΔⵠΔᐃ: "img/inv-reidite-spike-in.png",
    ΔᐃⵠⲆΔᐃΔ: "img/inv-reidite-spike-click.png",
    ⵠᐃⵠᐃⲆΔΔ: "img/inv-reidite-wall-out.png",
    ᐃᐃⲆᐃᐃΔᐃ: "img/inv-reidite-wall-in.png",
    ΔⲆⲆΔⵠⵠⲆ: "img/inv-reidite-wall-click.png",
    ΔΔⲆᐃⲆᐃⲆ: "img/day-reidite-wall.png",
    ⲆⲆⲆⲆΔⲆΔ: "img/night-reidite-wall.png",
    ⲆⵠᐃⵠⵠⲆⵠ: "img/day-reidite-door.png",
    ΔⵠⲆⲆⵠⵠΔ: "img/night-reidite-door.png",
    ᐃⵠⵠⵠⲆΔᐃ: "img/day-reidite-spike.png",
    ᐃᐃⲆⵠⵠⲆᐃ: "img/night-reidite-spike.png",
    ⵠⵠⲆⵠΔΔΔ: "img/day-reidite-spike-door.png",
    ⵠᐃⵠⲆΔᐃᐃ: "img/night-reidite-spike-door.png",
    ΔᐃⵠΔΔΔⲆ: "img/inv-reidite-pickaxe-out.png",
    ΔⲆΔᐃⲆΔⲆ: "img/inv-reidite-pickaxe-in.png",
    ⵠⲆⲆΔⲆᐃᐃ: "img/inv-reidite-pickaxe-click.png",
    ΔΔⲆⵠᐃⲆⲆ: "img/day-reidite-pickaxe.png",
    ⲆᐃⵠΔⲆΔⵠ: "img/night-reidite-pickaxe.png",
    ᐃΔᐃⵠᐃᐃⵠ: "img/inv-reidite-hammer-out.png",
    ⵠⵠΔΔΔΔᐃ: "img/inv-reidite-hammer-in.png",
    ⵠⵠΔΔᐃᐃᐃ: "img/inv-reidite-hammer-click.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-reidite-hammer.png",
    ΔᐃᐃⲆΔᐃᐃ: "img/night-reidite-hammer.png",
    Ⲇⵠᐃⵠⵠᐃᐃ: "img/day-watermelon1.png",
    ΔⲆⵠΔⵠⲆΔ: "img/night-watermelon1.png",
    ⵠΔⵠⲆᐃⵠⲆ: "img/day-watermelon-dried1.png",
    ⲆᐃⲆᐃⵠᐃⲆ: "img/night-watermelon-dried1.png",
    Δⵠᐃᐃⵠⵠⵠ: "img/inv-watermelon-out.png",
    ΔΔᐃᐃᐃᐃᐃ: "img/inv-watermelon-in.png",
    ᐃⵠⵠᐃΔⵠⵠ: "img/inv-watermelon-click.png",
    ᐃΔᐃᐃᐃΔⲆ: "img/day-boat.png",
    ⵠΔΔⵠⲆΔⵠ: "img/night-boat.png",
    ⲆⲆⵠⵠⵠΔΔ: "img/day-boat-wave.png",
    ΔⲆΔᐃⵠⵠᐃ: "img/night-boat-wave.png",
    ΔΔᐃⵠᐃΔᐃ: "img/inv-boat-out.png",
    ⲆⲆⵠΔᐃⵠᐃ: "img/inv-boat-in.png",
    ᐃᐃᐃⲆᐃⲆΔ: "img/inv-boat-click.png",
    ⲆⵠⲆᐃᐃⲆΔ: "img/day-plane.png",
    ⲆᐃΔⵠⲆⵠᐃ: "img/night-plane.png",
    ⲆⵠᐃⲆΔⲆⲆ: "img/inv-plane-out.png",
    ΔⲆⲆⲆⲆΔΔ: "img/inv-plane-in.png",
    ᐃᐃⵠΔⵠᐃᐃ: "img/inv-plane-click.png",
    ᐃᐃΔⲆⵠⵠΔ: "img/day-sled.png",
    ᐃⲆᐃⲆᐃᐃΔ: "img/night-sled.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/day-sled-wave.png",
    ⲆⲆⵠⵠΔⵠΔ: "img/night-sled-wave.png",
    ΔⲆΔⲆᐃᐃΔ: "img/inv-sled-out.png",
    ⵠᐃⲆⲆⵠᐃᐃ: "img/inv-sled-in.png",
    ΔᐃⵠⲆᐃᐃᐃ: "img/inv-sled-click.png",
    ᐃⵠΔⲆⵠⵠⵠ: "img/day-pirate-hat.png",
    ⵠⲆᐃᐃᐃⲆⵠ: "img/night-pirate-hat.png",
    ᐃᐃⲆⵠⵠΔᐃ: "img/inv-pirate-hat-out.png",
    ΔⵠⵠⲆᐃΔᐃ: "img/inv-pirate-hat-in.png",
    ΔⲆⲆᐃⲆᐃΔ: "img/inv-pirate-hat-click.png",
    ᐃᐃΔⵠᐃⲆⲆ: "img/day-penguin.png",
    ΔⲆᐃΔᐃⲆⵠ: "img/night-penguin.png",
    ᐃᐃⲆⵠⲆᐃᐃ: "img/hurt-penguin.png",
    ⵠᐃⲆⵠⵠ: "img/inv-penguin-feather-click.png",
    ᐃᐃⵠΔⲆ: "img/inv-hawk-feather-click.png",
    ⵠᐃⲆⵠᐃⲆΔ: "img/day-boar1.png",
    ⲆΔΔᐃᐃΔⲆ: "img/day-boar1-tamed.png",
    ᐃⲆΔⵠΔᐃᐃ: "img/day-boar1-angry.png",
    ⵠΔⲆⲆⵠⲆⵠ: "img/night-boar1.png",
    ⵠᐃᐃΔⵠᐃⲆ: "img/night-boar1-tamed.png",
    ⵠⵠⵠΔΔΔΔ: "img/night-boar1-angry.png",
    ⵠⲆΔⲆΔᐃΔ: "img/inv-mount-boar-out.png",
    ΔⵠᐃᐃⵠⲆⵠ: "img/inv-mount-boar-in.png",
    ⵠᐃⵠⵠΔᐃΔ: "img/inv-mount-boar-click.png",
    ⲆⵠⵠⵠᐃⲆⵠ: "img/day-hurt-boar1.png",
    ΔᐃⵠⵠΔⵠᐃ: "img/boar1-step.png",
    ⵠΔΔᐃᐃᐃⲆ: "img/day-saddle1.png",
    ⵠᐃΔΔⵠᐃⲆ: "img/night-saddle1.png",
    ᐃⵠⵠⲆΔΔᐃ: "img/inv-saddle-out.png",
    ΔⵠⲆᐃⵠⲆᐃ: "img/inv-saddle-in.png",
    ΔΔⵠⵠⵠⵠⲆ: "img/inv-saddle-click.png",
    ΔⲆᐃΔᐃᐃⵠ: "img/day-magic-wand0.png",
    ᐃΔⵠΔΔⵠΔ: "img/night-magic-wand0.png",
    ⲆΔᐃⲆⵠⲆᐃ: "img/day-light-wand1.png",
    ᐃᐃΔΔᐃΔⲆ: "img/night-light-wand1.png",
    ᐃⲆᐃⵠᐃΔⲆ: "img/inv-magic-wand0-out.png",
    ⲆΔᐃⲆⲆᐃΔ: "img/inv-magic-wand0-in.png",
    ⲆᐃᐃΔΔᐃⲆ: "img/inv-magic-wand0-click.png",
    ⲆⲆⲆⵠⵠⵠΔ: "img/day-magic-wand1.png",
    ΔᐃΔⲆⲆⵠΔ: "img/night-magic-wand1.png",
    ᐃᐃⵠΔΔᐃⵠ: "img/day-light-wand0.png",
    ⲆᐃΔᐃⲆΔⲆ: "img/night-light-wand0.png",
    ⲆⵠⲆⵠᐃΔΔ: "img/inv-magic-wand1-out.png",
    ⲆⲆⵠᐃᐃᐃⵠ: "img/inv-magic-wand1-in.png",
    ᐃⵠⲆᐃⲆⲆΔ: "img/inv-magic-wand1-click.png",
    ᐃⲆⵠᐃⵠⲆΔ: "img/day-firefly.png",
    ᐃⵠⲆΔᐃⲆΔ: "img/night-firefly.png",
    ΔⵠᐃⵠⲆΔΔ: "img/hurt-firefly.png",
    ᐃΔⲆᐃⵠⲆᐃ: "img/inv-firefly-out.png",
    ⲆⵠᐃⵠⲆⵠᐃ: "img/inv-firefly-in.png",
    ⲆᐃᐃⲆⵠⵠᐃ: "img/inv-firefly-click.png",
    ⲆᐃᐃΔᐃⲆⵠ: "img/day-baby-dragon.png",
    ⵠᐃⲆⲆⵠⵠᐃ: "img/night-baby-dragon.png",
    ⲆΔⲆΔⵠᐃΔ: "img/day-baby-dragon-angry.png",
    ΔΔΔⲆΔⵠⵠ: "img/night-baby-dragon-angry.png",
    ⲆΔⲆⲆⵠᐃⵠ: "img/day-baby-dragon-tamed.png",
    ᐃⵠⵠⲆᐃⲆΔ: "img/night-baby-dragon-tamed.png",
    ᐃᐃⲆᐃⲆⵠΔ: "img/day-wing-dragon-left-angry.png",
    ⵠΔΔⵠⵠᐃⵠ: "img/night-dragon-wing-left-angry.png",
    ᐃᐃΔⲆᐃᐃⵠ: "img/day-wing-dragon-right-angry.png",
    ⵠᐃᐃᐃᐃΔⵠ: "img/night-dragon-wing-right-angry.png",
    ⲆⲆᐃᐃⲆⲆΔ: "img/day-wing-dragon-left-tamed.png",
    ᐃⲆⲆΔΔΔΔ: "img/night-dragon-wing-left-tamed.png",
    ΔⲆⲆⲆΔⵠᐃ: "img/day-wing-dragon-right-tamed.png",
    ΔⵠⲆⵠⲆᐃⵠ: "img/night-wing-dragon-right-tamed.png",
    ΔΔᐃΔⲆᐃⵠ: "img/day-wing-dragon-left.png",
    ᐃⵠⲆⲆᐃⲆᐃ: "img/night-dragon-wing-left.png",
    ⵠⲆᐃⵠⵠⲆⲆ: "img/day-wing-dragon-right.png",
    ⲆᐃᐃⲆᐃᐃᐃ: "img/night-wing-dragon-right.png",
    ⲆᐃᐃⲆⲆᐃᐃ: "img/hurt-baby-dragon.png",
    ⲆⲆⲆᐃᐃΔⲆ: "img/hurt-baby-dragon-wing-left.png",
    ᐃΔⵠⲆⲆᐃⵠ: "img/hurt-baby-dragon-wing-right.png",
    ΔⲆΔΔΔΔᐃ: "img/inv-baby-dragon-out.png",
    ⲆⵠΔᐃⵠᐃΔ: "img/inv-baby-dragon-in.png",
    ⲆⲆΔΔⲆⵠᐃ: "img/inv-baby-dragon-click.png",
    ᐃⵠⲆⲆᐃΔᐃ: "img/day-baby-lava.png",
    ⲆⲆⲆⵠᐃΔⵠ: "img/night-baby-lava.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/day-baby-lava-angry.png",
    ⵠⲆⵠⲆΔᐃⲆ: "img/night-baby-lava-angry.png",
    ⲆΔⲆⵠΔΔⲆ: "img/day-baby-lava-tamed.png",
    ΔΔⵠⵠⵠⵠΔ: "img/night-baby-lava-tamed.png",
    ⵠⲆΔⲆΔΔⵠ: "img/day-wing-lava-left-angry.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/night-wing-lava-left-angry.png",
    ᐃⲆᐃᐃᐃΔⵠ: "img/day-wing-lava-right-angry.png",
    ᐃᐃΔᐃᐃᐃΔ: "img/night-wing-lava-right-angry.png",
    ⵠⵠⲆⵠⲆᐃⲆ: "img/day-wing-lava-left-tamed.png",
    ᐃᐃᐃⲆᐃᐃⵠ: "img/night-wing-lava-left-tamed.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/day-wing-lava-right-tamed.png",
    ⵠΔⲆᐃⵠΔⲆ: "img/night-wing-lava-right-tamed.png",
    ⲆΔΔΔⲆⵠᐃ: "img/day-wing-lava-left.png",
    ΔⲆⵠⵠⲆⵠⵠ: "img/night-wing-lava-left.png",
    ⲆⲆⲆᐃⵠⲆⵠ: "img/day-wing-lava-right.png",
    ⵠΔⲆⲆΔⵠᐃ: "img/night-wing-lava-right.png",
    ᐃⵠⵠΔⵠᐃⵠ: "img/hurt-baby-lava.png",
    ᐃⲆᐃⲆⲆⲆᐃ: "img/hurt-baby-lava-wing-left.png",
    ⵠⲆΔⲆⲆΔⲆ: "img/hurt-baby-lava-wing-right.png",
    ᐃΔᐃᐃⵠΔⲆ: "img/inv-baby-lava-out.png",
    ⵠⲆᐃᐃⲆΔⲆ: "img/inv-baby-lava-in.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/inv-baby-lava-click.png",
    ᐃᐃΔᐃᐃⲆᐃ: "img/day-falcon.png",
    ΔⵠⵠΔΔΔⵠ: "img/night-falcon.png",
    ⲆⲆⲆⵠΔΔΔ: "img/day-falcon-angry.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/night-falcon-angry.png",
    ⵠⲆΔⵠΔᐃⵠ: "img/day-falcon-ground.png",
    ᐃᐃⲆᐃⵠᐃⵠ: "img/night-falcon-ground.png",
    ⲆⵠΔⵠᐃΔⲆ: "img/day-falcon-ground-angry.png",
    ᐃΔΔᐃᐃΔⵠ: "img/night-falcon-ground-angry.png",
    ᐃΔᐃⵠⲆᐃⵠ: "img/day-falcon-wings-left.png",
    ΔⵠⵠⵠⵠⲆᐃ: "img/night-falcon-wings-left.png",
    ⵠᐃⲆᐃⵠΔⵠ: "img/day-falcon-wings-right.png",
    ⵠΔⲆⲆᐃⲆⵠ: "img/night-falcon-wings-right.png",
    ΔⵠΔⲆΔⵠⵠ: "img/day-falcon-angry-wings-left.png",
    ⲆΔⵠᐃⵠᐃΔ: "img/night-falcon-angry-wings-left.png",
    ΔⲆⵠᐃⲆΔⲆ: "img/day-falcon-angry-wings-right.png",
    ᐃⵠΔⲆⵠⲆᐃ: "img/night-falcon-angry-wings-right.png",
    ᐃⲆⲆⲆⲆⵠᐃ: "img/day-falcon-wings-left-tamed.png",
    ⵠⵠΔΔⲆΔᐃ: "img/night-falcon-wings-left-tamed.png",
    ΔΔⲆΔΔΔᐃ: "img/day-falcon-wings-right-tamed.png",
    ᐃⵠⲆⲆⲆⲆⵠ: "img/night-falcon-wings-right-tamed.png",
    ⵠᐃᐃⲆⵠᐃᐃ: "img/day-falcon-tamed.png",
    ᐃΔΔΔΔᐃⵠ: "img/night-falcon-tamed.png",
    ΔᐃΔΔⲆⲆΔ: "img/hurt-falcon-ground.png",
    ᐃⵠⵠⵠⲆⲆⲆ: "img/hurt-falcon.png",
    ᐃⲆᐃΔⵠᐃⵠ: "img/hurt-falcon-wings-left.png",
    ⵠⵠⵠᐃⲆᐃⲆ: "img/hurt-falcon-wings-right.png",
    ⲆΔⲆⲆᐃⲆⲆ: "img/inv-falcon-out.png",
    ⵠⲆⲆᐃⵠᐃᐃ: "img/inv-falcon-in.png",
    ⲆᐃᐃᐃⵠⵠⲆ: "img/inv-falcon-click.png",
    ᐃⵠᐃᐃⵠᐃⵠ: "img/day-crab-boss.png",
    ᐃᐃΔᐃⲆΔⲆ: "img/night-crab-boss.png",
    ⵠⵠⵠΔᐃᐃⵠ: "img/day-crab-boss-angry.png",
    ᐃⵠⲆⵠⵠΔⵠ: "img/night-crab-boss-angry.png",
    ⵠⲆΔⵠΔⲆᐃ: "img/day-crab-boss-tamed.png",
    ⵠⵠΔᐃΔᐃⵠ: "img/night-crab-boss-tamed.png",
    ⵠᐃᐃΔᐃᐃⲆ: "img/day-crab-boss-claw-left-attack.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/night-crab-boss-claw-left-attack.png",
    ⲆⵠΔⵠⵠᐃᐃ: "img/day-crab-boss-claw-right-attack.png",
    ⵠⵠᐃΔΔᐃⵠ: "img/night-crab-boss-claw-right-attack.png",
    ⵠⲆΔᐃᐃⲆΔᐃⵠ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃⲆᐃⲆⵠΔΔΔΔ: "img/night-crab-boss-claw-left-tamed.png",
    ᐃⵠⵠᐃΔⵠⲆⵠⵠ: "img/day-crab-boss-claw-right-tamed.png",
    ᐃΔΔᐃⲆᐃᐃⲆΔ: "img/night-crab-boss-claw-right-tamed.png",
    ⲆⵠⲆⲆΔⲆΔ: "img/day-crab-boss-claw-left.png",
    ᐃΔΔᐃᐃᐃⲆ: "img/night-crab-boss-claw-left.png",
    ⵠⲆΔΔⵠΔⵠ: "img/day-crab-boss-claw-right.png",
    ᐃⵠΔᐃⲆⲆᐃ: "img/night-crab-boss-claw-right.png",
    ⵠᐃΔᐃΔⲆΔ: "img/hurt-crab-boss.png",
    ⵠΔᐃⵠⵠⵠⵠ: "img/hurt-crab-boss-claw-left.png",
    ⲆⵠⲆⵠΔⲆⵠ: "img/hurt-crab-boss-claw-right.png",
    ⵠⵠⲆⲆᐃΔᐃ: "img/heal-crab-boss.png",
    ΔΔΔᐃᐃΔᐃ: "img/heal-crab-boss-claw-left.png",
    ⲆᐃⵠⵠⵠⵠⲆ: "img/heal-crab-boss-claw-right.png",
    ΔⲆⲆⲆⵠΔⵠ: "img/crab-step.png",
    ΔΔΔⵠⲆⵠᐃ: "img/inv-crab-boss-out.png",
    Ⲇᐃⵠᐃⵠⵠᐃ: "img/inv-crab-boss-in.png",
    ⲆᐃΔⲆᐃⵠⵠ: "img/inv-crab-boss-click.png",
    ΔᐃⲆᐃⵠⲆᐃ: "img/day-cactus10.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/night-cactus10.png",
    ᐃΔᐃᐃⲆᐃⵠ: "img/inv-cactus-out.png",
    ⵠⲆᐃⲆⲆⲆᐃ: "img/inv-cactus-in.png",
    ⵠⲆⵠᐃⵠⲆΔ: "img/inv-cactus-click.png",
    ΔⲆⲆΔⵠⲆᐃ: "img/day-scorpion.png",
    ⲆΔⲆⵠⲆΔⲆ: "img/night-scorpion.png",
    ΔᐃᐃⵠΔᐃᐃ: "img/day-scorpion-hand-left.png",
    ⲆⲆⲆΔⵠΔⲆ: "img/night-scorpion-hand-left.png",
    ⲆⲆᐃⵠᐃⲆᐃ: "img/day-scorpion-hand-right.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/night-scorpion-hand-right.png",
    ⲆΔᐃⵠᐃⲆΔ: "img/hurt-scorpion.png",
    ᐃⲆⲆΔⵠⵠⵠ: "img/hurt-scorpion-hand-left.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/hurt-scorpion-hand-right.png",
    ⵠΔⲆΔΔⲆΔ: "img/day-vulture.png",
    ΔⲆⵠΔⵠΔᐃ: "img/night-vulture.png",
    ⲆᐃᐃⲆᐃⵠⵠ: "img/day-vulture-angry.png",
    ⵠⲆⵠⲆⵠⲆⵠ: "img/night-vulture-angry.png",
    ΔΔᐃⵠΔΔⵠ: "img/day-vulture-ground.png",
    ⲆⲆⲆⵠⵠⵠᐃ: "img/night-vulture-ground.png",
    ⵠΔⲆᐃⲆⵠⲆ: "img/day-vulture-ground-angry.png",
    ⵠⵠⲆᐃΔⲆⵠ: "img/night-vulture-ground-angry.png",
    ᐃΔᐃΔⲆⵠⲆ: "img/day-vulture-wings-left.png",
    ΔΔⲆΔᐃⵠⲆ: "img/night-vulture-wings-left.png",
    ΔⵠΔΔⵠΔⵠ: "img/day-vulture-wings-right.png",
    ᐃΔⲆΔΔΔⵠ: "img/night-vulture-wings-right.png",
    ᐃᐃⵠΔΔⵠⵠ: "img/day-vulture-angry-wings-left.png",
    ᐃΔᐃⲆⵠᐃᐃ: "img/night-vulture-angry-wings-left.png",
    ᐃⲆᐃⲆᐃΔΔ: "img/day-vulture-angry-wings-right.png",
    ᐃⵠΔⵠΔΔᐃ: "img/night-vulture-angry-wings-right.png",
    ⲆᐃᐃᐃⲆⲆⲆ: "img/day-vulture-wings-left-tamed.png",
    ΔΔⲆᐃⵠⲆᐃ: "img/night-vulture-wings-left-tamed.png",
    ΔⵠΔᐃᐃᐃⲆ: "img/day-vulture-wings-right-tamed.png",
    ᐃΔΔΔᐃⲆⲆ: "img/night-vulture-wings-right-tamed.png",
    ΔⵠᐃΔᐃΔⵠ: "img/day-vulture-tamed.png",
    ΔᐃΔⵠⲆⵠΔ: "img/night-vulture-tamed.png",
    ᐃΔⵠΔΔⲆΔ: "img/hurt-vulture-ground.png",
    ⲆΔⵠᐃΔⵠⵠ: "img/hurt-vulture.png",
    ᐃⲆⲆΔΔᐃᐃ: "img/hurt-vulture-wings-left.png",
    ᐃᐃΔΔⵠᐃΔ: "img/hurt-vulture-wings-right.png",
    ⵠⲆⵠΔΔⵠΔ: "img/day-aloe-vera.png",
    ⲆᐃⲆⵠΔᐃⵠ: "img/night-aloe-vera.png",
    ⵠᐃⵠⲆⵠΔᐃ: "img/inv-aloe-vera-out.png",
    ΔⲆᐃᐃⲆᐃⵠ: "img/inv-aloe-vera-in.png",
    ΔΔΔᐃΔⲆⵠ: "img/inv-aloe-vera-click.png",
    ΔΔΔΔᐃⵠᐃ: "img/day-aloe-vera-grown.png",
    ᐃⲆⵠⵠᐃⲆᐃ: "img/night-aloe-vera-grown.png",
    ⵠⵠᐃΔᐃⵠⲆ: "img/day-aloe-vera-dried.png",
    ⲆΔᐃΔⲆⵠᐃ: "img/night-aloe-vera-dried.png",
    ⲆⵠΔⲆΔⵠΔ: "img/day-turban1.png",
    ΔⵠⲆⵠⲆⲆΔ: "img/night-turban1.png",
    ΔⵠΔᐃΔΔΔ: "img/day-turban2.png",
    ΔⲆⵠⲆⵠⲆΔ: "img/night-turban2.png",
    ΔᐃⲆΔΔⲆⵠ: "img/inv-turban2-out.png",
    ⵠᐃⲆᐃᐃΔΔ: "img/inv-turban2-in.png",
    ⵠΔⲆⲆⵠⵠⲆ: "img/inv-turban2-click.png",
    ᐃⲆΔᐃΔᐃⵠ: "img/inv-turban1-out.png",
    ᐃΔⵠᐃΔᐃⵠ: "img/inv-turban1-in.png",
    ⵠⵠⲆⲆⲆᐃⲆ: "img/inv-turban1-click.png",
    ᐃⲆᐃⵠⵠΔⲆ: "img/day-pitchfork2.png",
    ⵠΔⵠⵠᐃⲆᐃ: "img/night-pitchfork2.png",
    ᐃⵠⵠᐃⲆᐃⵠ: "img/inv-pitchfork2-out.png",
    ΔⵠⵠᐃⲆⲆᐃ: "img/inv-pitchfork2-in.png",
    ⲆΔΔΔⲆᐃⵠ: "img/inv-pitchfork2-click.png",
    ᐃⲆⲆⵠΔⵠⵠ: "img/inv-gold-fork-click.png",
    ΔⵠⲆⲆⲆⵠⵠ: "img/inv-pilot-glasses-click.png",
    ΔᐃΔⵠΔΔΔ: "img/day-pilot-helmet.png",
    ⵠΔⲆⲆⵠᐃⲆ: "img/night-pilot-helmet.png",
    ⵠᐃⲆᐃΔⲆᐃ: "img/inv-pilot-helmet-out.png",
    ΔⲆⲆᐃΔⲆⲆ: "img/inv-pilot-helmet-in.png",
    ᐃΔⲆΔᐃⵠⲆ: "img/inv-pilot-helmet-click.png",
    ⵠΔⲆΔⲆⲆᐃᐃᐃ: "img/day-sandworm0.png",
    ΔⲆⵠᐃᐃⵠΔ: "img/day-sandworm1.png",
    ⵠⲆⲆᐃⲆⲆⲆ: "img/day-sandworm2.png",
    ᐃᐃΔⲆΔⲆⲆΔⵠ: "img/night-sandworm0.png",
    ⵠⵠΔⵠΔᐃᐃ: "img/night-sandworm1.png",
    ⵠᐃⲆⲆⲆᐃⵠ: "img/night-sandworm2.png",
    ⲆΔⲆⵠΔΔᐃ: "img/hurt-sandworm0.png",
    ᐃⵠΔⲆᐃⵠⵠ: "img/hurt-sandworm1.png",
    ΔᐃΔⲆᐃⵠΔ: "img/hurt-sandworm2.png",
    ⲆΔⲆⲆᐃ: "img/inv-vulture-feather-click.png",
    ΔΔⲆΔⲆΔΔ: "img/day-emerald0.png",
    ᐃⲆⵠⵠⵠⲆⲆ: "img/night-emerald0.png",
    ⵠⵠⵠⲆᐃⵠⲆ: "img/day-emerald1.png",
    ⲆⵠᐃΔⵠᐃΔ: "img/night-emerald1.png",
    ⲆⲆΔᐃⲆΔⲆ: "img/day-emerald2.png",
    ⲆᐃᐃΔⲆᐃⲆ: "img/night-emerald2.png",
    ᐃΔΔⲆΔ: "img/inv-emerald-click.png",
    ⲆᐃⵠΔⵠⵠⵠ: "img/inv-sworm-juice-out.png",
    ⵠᐃΔⵠᐃⲆⲆ: "img/inv-sworm-juice-in.png",
    ⵠΔΔΔⵠⲆⲆ: "img/inv-sworm-juice-click.png",
    ᐃⵠΔⲆⵠⲆΔ: "img/day-point-machine.png",
    ⵠᐃⵠᐃⲆⲆΔ: "img/night-point-machine.png",
    ᐃᐃⵠΔⵠⵠᐃ: "img/day-point-machine-hole.png",
    ΔⵠⵠⲆⲆΔⲆ: "img/night-point-machine-hole.png",
    ᐃⲆᐃΔᐃⲆⵠ: "img/day-point-machine-ground.png",
    ᐃΔᐃΔΔⲆᐃ: "img/night-point-machine-ground.png",
    ᐃΔⲆⲆΔⲆⲆ: "img/day-point-machine-rotate.png",
    ⵠⵠⲆⲆⵠⵠᐃ: "img/night-point-machine-rotate.png",
    ⵠⲆⲆΔΔΔⲆ: "img/inv-point-machine-out.png",
    ⵠΔⵠᐃⵠΔΔ: "img/inv-point-machine-in.png",
    ΔΔΔΔⲆᐃⵠ: "img/inv-point-machine-click.png",
    ΔⲆᐃⵠᐃᐃΔ: "img/day-extractor-machine0-stone.png",
    ᐃᐃΔᐃᐃⵠᐃ: "img/night-extractor-machine0-stone.png",
    ΔᐃΔᐃΔⵠΔ: "img/day-extractor-machine-stone.png",
    ᐃⲆⲆⵠⲆⲆᐃ: "img/night-extractor-machine-stone.png",
    ΔⵠⲆᐃᐃᐃᐃ: "img/inv-extractor-machine-stone-out.png",
    ⲆΔⵠⲆΔⲆⵠ: "img/inv-extractor-machine-stone-in.png",
    ⵠΔⲆⲆᐃⲆᐃ: "img/inv-extractor-machine-stone-click.png",
    ΔᐃΔᐃⲆΔΔ: "img/day-extractor-machine0-gold.png",
    ᐃᐃⲆⵠᐃΔΔ: "img/night-extractor-machine0-gold.png",
    ⵠⵠΔⲆΔΔⵠ: "img/day-extractor-machine-gold.png",
    ⲆⲆᐃⵠᐃΔᐃ: "img/night-extractor-machine-gold.png",
    ⵠⲆᐃΔᐃⲆΔ: "img/inv-extractor-machine-gold-out.png",
    ᐃΔⲆΔⵠᐃΔ: "img/inv-extractor-machine-gold-in.png",
    ⵠΔⵠΔᐃⵠΔ: "img/inv-extractor-machine-gold-click.png",
    ΔⵠⲆΔᐃⲆΔ: "img/day-extractor-machine0-diamond.png",
    ⵠᐃⲆⲆΔⲆⵠ: "img/night-extractor-machine0-diamond.png",
    ΔⲆⲆᐃᐃⵠᐃ: "img/day-extractor-machine-diamond.png",
    ⵠΔⲆΔΔΔⲆ: "img/night-extractor-machine-diamond.png",
    ΔⵠⵠⵠⵠⵠⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⵠΔᐃⲆΔⵠ: "img/inv-extractor-machine-diamond-in.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/inv-extractor-machine-diamond-click.png",
    ⲆᐃⲆᐃⲆⲆᐃ: "img/day-extractor-machine0-amethyst.png",
    ΔⲆΔᐃⲆᐃΔ: "img/night-extractor-machine0-amethyst.png",
    ⲆⵠΔⲆᐃΔΔ: "img/day-extractor-machine-amethyst.png",
    ᐃᐃⵠⵠⲆᐃⲆ: "img/night-extractor-machine-amethyst.png",
    ⵠᐃᐃΔΔΔⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ⲆⲆⵠᐃᐃΔⲆ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆᐃΔᐃⵠᐃⵠ: "img/inv-extractor-machine-amethyst-click.png",
    ⵠⵠΔⵠΔΔⵠ: "img/day-extractor-machine0-reidite.png",
    ΔᐃⲆⵠΔⵠⵠ: "img/night-extractor-machine0-reidite.png",
    ᐃⵠΔᐃⲆᐃᐃ: "img/day-extractor-machine-reidite.png",
    ⵠΔΔᐃΔᐃⲆ: "img/night-extractor-machine-reidite.png",
    ⲆⵠΔⵠΔⵠⲆ: "img/inv-extractor-machine-reidite-out.png",
    ᐃΔⲆⲆΔᐃⲆ: "img/inv-extractor-machine-reidite-in.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/inv-extractor-machine-reidite-click.png",
    ᐃⲆⲆΔᐃᐃᐃ: "img/extractor-cases.png",
    ΔⵠⲆⵠᐃᐃΔ: "img/day-golden-hen.png",
    ⲆⵠⲆᐃΔΔΔ: "img/night-golden-hen.png",
    ⵠΔᐃᐃⲆⲆⲆ: "img/day-golden-chicken.png",
    ⲆⵠⲆᐃᐃⵠᐃ: "img/night-golden-chicken.png",
    ⲆᐃⲆΔⲆᐃⵠ: "img/hurt-golden-hen.png",
    ᐃⲆⲆᐃⲆⵠⲆ: "img/hurt-golden-chicken.png",
    ⵠᐃⵠᐃⲆⵠᐃ: "img/logo-interface.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/forest-mode-hover.png",
    ᐃᐃᐃΔΔΔΔ: "img/normal-mode-hover.png",
    ΔⲆᐃⵠΔⵠⵠ: "img/vampire-mode-hover.png",
    ⵠΔΔⲆΔΔⲆ: "img/zombie-mode-hover.png",
    ⵠΔⲆⵠⵠΔᐃ: "img/community-mode-hover2.png",
    ᐃⵠᐃᐃⲆΔⵠ: "img/experimental-mode-hover.png",
    ΔΔⵠᐃⵠⵠⲆ: "img/zombie-mode-out.png",
    ΔᐃᐃᐃⵠⵠΔ: "img/zombie-mode-in.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/zombie-mode-click.png",
    ⵠⲆⲆΔⵠⵠⵠ: "img/vampire-mode-out.png",
    ᐃΔⲆᐃᐃⵠᐃ: "img/vampire-mode-in.png",
    ΔⲆᐃᐃᐃᐃΔ: "img/vampire-mode-click.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/normal-mode-out.png",
    ᐃⵠᐃᐃΔⵠⵠ: "img/normal-mode-in.png",
    ⲆᐃΔᐃⵠΔⲆ: "img/normal-mode-click.png",
    ⵠⵠⵠⵠΔΔⲆ: "img/forest-mode-out.png",
    ᐃⵠⵠᐃᐃᐃΔ: "img/forest-mode-in.png",
    ᐃⲆⲆⲆⵠᐃΔ: "img/forest-mode-click.png",
    ⵠⲆⵠΔᐃⵠΔ: "img/community-mode-out.png",
    ΔⵠⲆΔⵠᐃΔ: "img/community-mode-in.png",
    ⲆᐃΔΔΔΔΔ: "img/community-mode-click.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/experimental-modes-out.png",
    ⲆⵠΔΔΔᐃⵠ: "img/experimental-modes-in.png",
    ⵠΔⲆᐃΔᐃⲆ: "img/experimental-modes-click.png",
    ⲆⲆᐃᐃΔᐃⲆ: "img/youtube-button-out.png",
    ΔΔⲆⲆᐃΔⵠ: "img/youtube-button-in.png",
    ᐃᐃⵠⲆⲆⵠⲆ: "img/youtube-button-click.png",
    ᐃⵠⲆⵠⵠⵠⲆ: "img/wiki-button-out.png",
    ⵠΔᐃⵠᐃᐃΔ: "img/wiki-button-in.png",
    ᐃᐃᐃⵠΔᐃⵠ: "img/wiki-button-click.png",
    ⵠΔⵠᐃᐃᐃᐃ: "img/twitter-button-out.png",
    ⵠΔΔᐃⲆⲆᐃ: "img/twitter-button-in.png",
    ᐃⲆⵠᐃⵠⵠΔ: "img/twitter-button-click.png",
    ⲆᐃΔᐃΔΔΔ: "img/facebook-button-out.png",
    ⵠΔᐃⲆᐃⵠΔ: "img/facebook-button-in.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/facebook-button-click.png",
    ⵠⵠᐃⲆⵠⲆΔ: "img/reddit-button-out.png",
    ΔᐃᐃᐃⲆᐃⵠ: "img/reddit-button-in.png",
    ΔⵠⲆΔⲆⲆᐃ: "img/reddit-button-click.png",
    ⲆΔΔᐃⲆⵠⲆ: "img/discord-button-out.png",
    ΔᐃᐃⵠⲆᐃΔ: "img/discord-button-in.png",
    ⲆᐃΔΔⵠᐃⵠ: "img/discord-button-click.png",
    ᐃᐃⲆⲆΔⲆⲆ: "img/merch-button-out.png",
    ⵠⲆᐃᐃⲆⲆⵠ: "img/merch-button-in.png",
    ΔⲆΔᐃⵠⵠⲆ: "img/merch-button-click.png",
    ᐃΔᐃⲆⲆᐃⵠⲆⲆ: "img/terminal-button-out.png",
    ΔⵠᐃⵠⵠᐃⵠⲆⲆ: "img/terminal-button-in.png",
    ΔΔᐃⲆᐃⲆΔⲆⵠ: "img/terminal-button-click.png",
    ⲆⲆⵠΔⵠΔᐃ: "img/restart-out.png",
    ⲆΔᐃᐃⵠᐃⲆ: "img/restart-in.png",
    ΔⵠΔⵠⵠⲆᐃ: "img/restart-click.png",
    ⲆⲆⲆⵠⲆΔᐃ: "img/reboot-out.png",
    ⵠⵠΔᐃᐃΔⵠ: "img/reboot-in.png",
    ⲆΔᐃⲆⵠΔᐃ: "img/reboot-click.png",
    ⵠΔⲆΔΔᐃᐃ: "img/guide-out.png",
    ᐃΔΔⲆⲆⵠⵠ: "img/guide-in.png",
    ᐃᐃᐃⲆᐃᐃΔ: "img/guide-click.png",
    ⵠⲆⲆⵠᐃⲆⵠ: "img/copy-paste-out.png",
    ᐃᐃΔⵠⵠⵠⲆ: "img/copy-paste-in.png",
    ΔᐃⵠΔⲆᐃΔ: "img/copy-paste-click.png",
    ⲆⲆⲆΔⵠᐃΔ: "img/link-buttons-bg.png",
    ΔⵠⲆⵠᐃᐃᐃ: "img/changelog-box2.png",
    ᐃᐃⵠⵠᐃⵠᐃ: "img/changelog_31.png",
    ⲆⵠⲆⵠⲆᐃⵠ: "img/banner-taming.png",
    ⲆΔᐃΔⲆΔᐃ: "img/profile-button-out.png",
    ⵠⵠΔⵠΔⵠΔ: "img/profile-button-in.png",
    ⲆᐃᐃⲆΔⵠᐃ: "img/profile-button-click.png",
    ᐃⵠⲆΔⲆΔⵠ: "img/login-button-out.png",
    ΔΔⵠᐃⲆⲆᐃ: "img/login-button-in.png",
    ⵠᐃΔΔⲆⲆⵠ: "img/login-button-click.png",
    ⵠⵠᐃᐃⲆᐃⵠ: "img/login-google-out.png",
    ΔⵠⲆⲆᐃⵠⵠ: "img/login-google-in.png",
    ΔⵠⵠΔⲆⲆⲆ: "img/login-google-click.png",
    ΔⲆⵠⲆΔⲆᐃ: "img/login-facebook-out.png",
    ⲆⵠΔⵠⲆⵠΔ: "img/login-facebook-in.png",
    ⵠⲆⲆⵠⲆⵠⲆ: "img/login-facebook-click.png",
    ΔⲆⵠⲆΔⲆΔ: "img/account-box.png",
    ᐃⵠΔΔΔΔΔᐃΔ: "img/account-under-maintenance.png",
    ⵠⵠᐃᐃΔⵠⵠ: "img/close-button-account-out.png",
    ⲆΔⵠⲆⵠΔⵠ: "img/close-button-account-in.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/close-button-account-click.png",
    ⲆᐃΔᐃⲆⲆⵠ: "img/play-button-out.png",
    ⵠΔⲆᐃΔⵠᐃ: "img/play-button-in.png",
    ⵠⲆⵠⵠⵠⵠⵠ: "img/play-button-click.png",
    ΔᐃΔᐃⵠΔⵠⵠⲆ: "img/app-store-badge.png",
    ⵠⲆᐃⵠⲆⲆᐃΔΔ: "img/play-store-badge.png",
    ⵠΔᐃΔᐃΔΔΔᐃ: "img/mobile-boxad.png",
    ΔⲆΔⵠⵠᐃᐃ: "img/modify-name-out.png",
    ⲆΔᐃᐃΔⲆⵠ: "img/modify-name-in.png",
    ΔᐃⵠᐃᐃΔⲆ: "img/modify-name-click.png",
    ΔΔⵠⵠᐃⲆⵠ: "img/copy-id-button-out.png",
    ΔⵠⲆⵠⲆᐃᐃ: "img/copy-id-button-hover.png",
    ⲆⲆⲆⲆΔⵠΔ: "img/copy-id-button-active.png",
    ⵠⲆᐃⲆⲆᐃΔ: "img/yes-button-out.png",
    ΔⲆⲆⵠᐃⵠⵠ: "img/yes-button-in.png",
    ᐃⵠᐃⵠΔⲆⲆ: "img/yes-button-click.png",
    ⲆᐃⲆᐃΔⵠⵠ: "img/yes-300-button-out.png",
    ⲆⲆⵠΔᐃΔᐃ: "img/yes-300-button-in.png",
    ᐃᐃⵠⲆⵠⲆⲆ: "img/yes-300-button-click.png",
    ⲆⲆᐃⵠⵠΔⵠ: "img/no-button-out.png",
    ᐃΔᐃᐃᐃΔᐃ: "img/no-button-in.png",
    ⲆⲆΔᐃᐃⲆⲆ: "img/no-button-click.png",
    ⲆⲆᐃⲆΔⵠᐃ: "img/no-thanks-button-out.png",
    ⲆⵠᐃΔΔΔⲆ: "img/no-thanks-button-in.png",
    ⵠΔᐃᐃⲆⵠΔ: "img/no-thanks-button-click.png",
    ⵠⵠΔⲆⲆⵠᐃ: "img/shop-button-out.png",
    ΔⲆⵠⲆᐃⲆⲆ: "img/shop-button-in.png",
    ⵠⲆⵠᐃᐃΔⵠ: "img/shop-button-click.png",
    ᐃΔᐃᐃΔⵠⵠ: "img/logout-out.png",
    ᐃⲆⵠⵠⵠⵠⵠ: "img/logout-in.png",
    ⵠΔⵠⲆⲆᐃΔ: "img/logout-click.png",
    ⲆᐃᐃⲆΔⵠⲆ: "img/terms-button-out.png",
    ΔᐃᐃΔΔᐃⲆ: "img/terms-button-in.png",
    ΔⵠⲆᐃⵠⵠᐃ: "img/terms-button-click.png",
    ⵠᐃⵠⵠⲆⲆΔ: "img/tutorial-icon.png",
    ⵠⲆⵠⵠΔΔΔ: "img/skins-icon.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/shop-icon.png",
    ⵠΔⵠᐃΔⵠⵠⲆⲆ: "img/paint-icon.png",
    ΔΔᐃⲆⲆⵠΔ: "img/leaderboard-icon.png",
    ⵠⵠⲆⵠⵠᐃΔ: "img/start-icon.png",
    ΔΔᐃⲆΔⵠⲆ: "img/profile-icon.png",
    ⲆᐃⵠΔⵠΔⲆ: "img/server-access-icon2.png",
    ᐃᐃⵠⲆⲆᐃΔ: "img/button-homepage-bg-out.png",
    ΔΔⵠΔⵠⲆᐃ: "img/button-homepage-bg-in.png",
    ⲆⲆⲆΔΔⵠⵠ: "img/button-homepage-bg-click.png",
    ⵠΔᐃⵠⵠᐃⵠ: "img/button-bottom-homepage-bg-out.png",
    ᐃⲆⵠᐃΔᐃΔ: "img/button-bottom-homepage-bg-in.png",
    ⵠᐃΔᐃⲆᐃΔ: "img/button-bottom-homepage-bg-click.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/lvl-player.png",
    ⵠᐃΔⵠᐃΔⲆ: "img/avatar-player.png",
    ⵠⵠⲆΔᐃⲆᐃ: "img/avatar-player1.png",
    ⵠⵠΔᐃᐃⵠⵠ: "img/avatar-player2.png",
    ΔᐃⲆⲆᐃΔⲆ: "img/avatar-player3.png",
    ⵠⲆⲆᐃΔᐃΔ: "img/avatar-player4.png",
    ⲆΔΔⲆⲆΔᐃ: "img/avatar-player5.png",
    ⲆᐃᐃΔΔⵠΔ: "img/avatar-player6.png",
    ᐃΔᐃⲆⲆΔᐃ: "img/avatar-player7.png",
    ⵠᐃⲆᐃⵠΔΔ: "img/avatar-player8.png",
    ΔΔⵠⲆΔⲆⲆ: "img/avatar-player9.png",
    ᐃᐃⵠΔΔΔⲆ: "img/avatar-player10.png",
    ᐃΔⵠⵠⲆⲆⵠ: "img/avatar-player11.png",
    ⵠΔΔΔⵠⵠΔ: "img/avatar-player12.png",
    ⵠⲆⵠᐃᐃⵠΔ: "img/avatar-player13.png",
    ᐃΔᐃΔΔΔⲆ: "img/avatar-player14.png",
    ⵠⲆⵠⲆᐃⵠΔ: "img/avatar-player14.png",
    ΔᐃᐃⵠⲆᐃⵠ: "img/avatar-player14.png",
    ᐃΔᐃⲆⲆᐃⵠ: "img/avatar-player14.png",
    ᐃⵠⵠⲆΔⵠᐃΔⲆ: "img/golden-bread.png",
    ⲆΔᐃΔΔᐃⲆ: "img/buy-bread-out.png",
    ⲆⵠΔⵠΔΔᐃ: "img/buy-bread-in.png",
    ΔⵠⲆΔᐃⵠⲆ: "img/buy-bread-click.png",
    ᐃᐃᐃΔⲆⲆⲆ: "img/gauge.png",
    ᐃΔᐃⵠΔⲆⲆᐃᐃ: "img/season-4-out.png",
    ⵠΔΔΔΔᐃⵠΔⲆ: "img/season-4-in.png",
    ⲆΔᐃⲆⲆᐃᐃᐃⲆ: "img/season-4-click.png",
    ⵠᐃⲆⲆⲆⵠⲆⲆᐃ: "img/season4-box.png",
    ᐃⲆⲆᐃᐃᐃⵠΔᐃ: "img/season-5-out.png",
    ⲆΔΔⵠᐃⵠΔᐃᐃ: "img/season-5-in.png",
    ΔⲆⲆΔⵠⲆⲆᐃΔ: "img/season-5-click.png",
    ⵠᐃⲆⲆΔΔⵠⲆⲆ: "img/season5-box.png",
    ΔⲆΔᐃΔΔΔ: "img/season-6-out.png",
    ᐃⵠⲆⵠⵠᐃΔ: "img/season-6-in.png",
    ΔⵠⵠᐃᐃᐃⲆ: "img/season-6-click.png",
    ⵠⲆᐃΔⵠᐃⵠ: "img/season6-box.png",
    ⲆⵠΔⲆⵠᐃᐃ: "img/profile3-box.png",
    ⵠⵠΔᐃᐃᐃⲆ: "img/skins-box.png",
    ᐃΔΔΔⲆⵠᐃ: "img/shop-box.png",
    ⵠⵠᐃⲆᐃΔΔⵠⲆ: "img/private-server-box.png",
    ⲆⲆΔⲆΔⲆΔ: "img/location-box.png",
    ⲆⲆⲆᐃⲆⵠᐃ: "img/server-duration-box.png",
    ⲆΔⵠⲆᐃⵠᐃ: "img/tutorial-box.png",
    ⲆΔᐃᐃⲆᐃΔ: "img/leaderboard2-box.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/buy-breads-box.png",
    ᐃⲆⲆⵠⵠΔⲆ: "img/bag-box.png",
    ⲆⲆᐃⵠⲆⲆⲆ: "img/deadbox-box.png",
    ⲆΔΔΔΔⵠⵠ: "img/book-box.png",
    ⲆⵠΔⵠΔᐃᐃ: "img/accessories-box.png",
    ⲆᐃⲆⵠΔⲆΔ: "img/customskin-box.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/bag-lasts.png",
    ᐃᐃⵠᐃᐃⲆᐃ: "img/server-lasts.png",
    ⲆⲆΔΔⲆⵠⲆ: "img/server-access-box3.png",
    ΔⵠⲆᐃⲆΔⵠ: "img/lootbox-box.png",
    ⲆᐃΔⵠΔΔᐃ: "img/change-nickname0.png",
    ᐃⵠⲆⵠᐃⲆⵠ: "img/change-nickname1.png",
    ⲆⲆᐃⲆΔⵠⵠ: "img/cheating-box.png",
    ΔΔΔⵠⲆᐃᐃΔⵠ: "img/daily-quest-box.png",
    ΔΔⲆⵠⲆⲆⵠᐃⲆ: "img/daily-5-bread.png",
    ΔⲆΔΔΔⵠᐃⲆΔ: "img/daily-10-bread.png",
    ⲆΔΔᐃᐃⲆᐃᐃⲆ: "img/daily-valid.png",
    ᐃᐃⲆⲆⲆΔⵠ: "img/normal-profile-out.png",
    ΔΔᐃⵠᐃᐃΔ: "img/normal-profile-in.png",
    ⵠⲆᐃᐃᐃⵠⲆ: "img/normal-profile-click.png",
    ⵠᐃᐃᐃᐃⲆⵠ: "img/forest-profile-out.png",
    ΔᐃⲆⵠⲆⲆᐃ: "img/forest-profile-in.png",
    ⲆΔⲆΔⲆᐃⵠ: "img/forest-profile-click.png",
    ᐃⵠᐃΔⲆⲆⲆ: "img/zombie-profile-out.png",
    ⲆΔⲆΔⵠΔᐃ: "img/zombie-profile-in.png",
    ᐃᐃΔᐃⲆᐃΔ: "img/zombie-profile-click.png",
    Δⵠⵠⵠⵠⵠᐃ: "img/vampire-profile-out.png",
    ⲆΔΔⵠⲆⵠΔ: "img/vampire-profile-in.png",
    ΔⵠⵠΔᐃᐃᐃ: "img/vampire-profile-click.png",
    ΔⵠᐃⵠⵠᐃΔ: "img/total-profile-out.png",
    ᐃᐃⵠᐃⵠΔⵠ: "img/total-profile-in.png",
    ⲆⲆⵠΔⲆⲆⵠ: "img/total-profile-click.png",
    ᐃᐃⲆⲆΔⵠⵠ: "img/season1-out.png",
    ᐃΔΔᐃⵠΔⵠ: "img/season1-in.png",
    ΔⵠⲆΔᐃΔⵠ: "img/season1-click.png",
    ᐃᐃΔⲆⵠΔⵠ: "img/season2-out.png",
    ⲆΔⵠΔᐃⵠⵠ: "img/season2-in.png",
    ΔⵠⵠⵠⵠΔΔ: "img/season2-click.png",
    ⵠⲆᐃⵠⵠᐃᐃ: "img/season3-out.png",
    ΔⲆΔⵠΔᐃⵠ: "img/season3-in.png",
    ⲆⵠΔΔΔⲆΔ: "img/season3-click.png",
    ΔᐃⲆᐃⵠᐃᐃ: "img/season4-out.png",
    ⲆΔⵠⲆⲆᐃⲆ: "img/season4-in.png",
    ⲆⲆⲆΔᐃⵠⲆ: "img/season4-click.png",
    ⵠᐃⵠⲆⲆΔᐃ: "img/season5-out.png",
    ⵠΔⲆⲆΔᐃΔ: "img/season5-in.png",
    ΔⵠᐃⲆᐃᐃⲆ: "img/season5-click.png",
    ⲆⵠⵠΔⲆⵠⵠ: "img/season6-out.png",
    ΔⵠⲆⲆⵠⲆΔ: "img/season6-in.png",
    ⵠⲆΔΔΔᐃⵠ: "img/season6-click.png",
    ΔΔΔⵠⲆᐃⵠ: "img/locked-skin-alert.png",
    ΔⵠᐃⲆⵠⵠⵠ: "img/locked-custom-alert.png",
    ᐃⵠΔⲆⲆⵠΔ: "img/bg-red-locked.png",
    ⵠⲆⵠⲆⵠᐃⵠ: "img/skin-button-out.png",
    ⵠᐃⵠᐃⵠᐃᐃ: "img/skin-button-in.png",
    ᐃᐃⲆᐃΔⲆⲆ: "img/skin-button-click.png",
    ΔⲆⵠΔΔⵠⲆ: "img/accessory-button-out.png",
    ᐃᐃΔⲆᐃᐃⲆ: "img/accessory-button-in.png",
    ΔⲆⲆᐃᐃⲆⲆ: "img/accessory-button-click.png",
    ⵠⲆⲆᐃᐃΔᐃ: "img/bag-button-out.png",
    ᐃⲆⵠΔΔⲆⵠ: "img/bag-button-in.png",
    ᐃᐃΔⵠᐃᐃⵠ: "img/bag-button-click.png",
    ᐃΔⵠΔⵠⲆᐃ: "img/book-button-out.png",
    ⲆΔΔⲆΔⲆⵠ: "img/book-button-in.png",
    ΔᐃⲆᐃᐃΔⲆ: "img/book-button-click.png",
    ΔⲆⲆⵠⲆΔΔ: "img/deadbox-button-out.png",
    ⲆᐃⵠⵠⵠⲆᐃ: "img/deadbox-button-in.png",
    ⵠⵠⲆⲆⲆⲆᐃ: "img/deadbox-button-click.png",
    ⵠᐃⵠΔΔⵠᐃ: "img/loot-button-out.png",
    ΔⲆⲆᐃᐃⵠⲆ: "img/loot-button-in.png",
    ᐃⲆᐃⲆᐃᐃⲆ: "img/loot-button-click.png",
    ΔⲆᐃᐃΔᐃⵠ: "img/free-item-out.png",
    ⵠⵠⲆΔⵠⲆⲆ: "img/free-item-in.png",
    ⲆΔΔⲆΔⵠⵠ: "img/free-item-click.png",
    ᐃⲆⲆΔ: "img/wood-item-out.png",
    ⵠᐃΔΔ: "img/wood-item-in.png",
    ⵠⵠᐃᐃ: "img/wood-item-click.png",
    ⲆᐃⵠΔⵠᐃᐃ: "img/stone-item.png",
    ΔΔⵠΔΔΔⲆ: "img/stone-item-in.png",
    ⵠΔᐃᐃⵠᐃΔ: "img/stone-item-click.png",
    ᐃΔΔⲆⵠΔⵠ: "img/gold-item.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/gold-item-in.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/gold-item-click.png",
    ᐃΔⲆⵠᐃΔⵠ: "img/diamond-item.png",
    ⲆⲆΔⵠⵠΔΔ: "img/diamond-item-in.png",
    ΔⵠⲆⵠⵠΔⲆ: "img/diamond-item-click.png",
    ⵠⵠΔΔⵠⵠⲆ: "img/amethyst-item.png",
    ΔⵠΔⵠΔᐃⵠ: "img/amethyst-item-in.png",
    ⵠⵠᐃⵠᐃΔᐃ: "img/amethyst-item-click.png",
    ⵠΔⲆⵠᐃᐃⵠ: "img/reidite-item.png",
    ⵠᐃΔⲆΔᐃᐃ: "img/reidite-item-in.png",
    ⵠⲆⵠⲆⲆⵠΔ: "img/reidite-item-click.png",
    ΔΔⲆⲆΔΔⲆ: "img/special-item-out.png",
    ᐃⵠΔⲆⲆᐃΔ: "img/special-item-in.png",
    ᐃⲆΔᐃⵠΔΔ: "img/special-item-click.png",
    ⵠᐃΔΔⵠⲆΔ: "img/level-item-out.png",
    ΔⵠΔΔΔⵠΔ: "img/level-item-in.png",
    ⵠΔⲆᐃⵠⲆᐃ: "img/level-item-click.png",
    ᐃⵠⵠΔᐃΔΔ: "img/skin-previous-out.png",
    ⵠΔᐃᐃΔΔⲆ: "img/skin-previous-in.png",
    ΔΔᐃⲆⲆⲆⲆ: "img/skin-previous-click.png",
    ᐃΔΔⵠⵠᐃⵠ: "img/skin-next-out.png",
    ᐃᐃᐃⲆⲆᐃΔ: "img/skin-next-in.png",
    ⵠΔⵠⲆⵠⲆⲆ: "img/skin-next-click.png",
    ΔΔⵠΔⵠ: "img/back-button-out.png",
    ⲆⲆⵠΔⲆ: "img/back-button-in.png",
    ⵠⵠⲆⲆⵠ: "img/back-button-click.png",
    ⲆⵠΔⵠᐃΔᐃ: "img/get-more-button-out.png",
    ᐃⲆⵠⲆⲆⵠⲆ: "img/get-more-button-in.png",
    ⲆᐃⵠΔⲆᐃΔ: "img/get-more-button-click.png",
    ⲆᐃⵠΔⲆΔΔ: "img/currency1-out.png",
    ⵠᐃΔΔⲆⲆᐃ: "img/currency1-in.png",
    ⲆⵠⵠΔΔΔⲆ: "img/currency1-click.png",
    ⲆᐃⲆⲆΔⲆⵠ: "img/currency2-out.png",
    ΔᐃΔΔⲆᐃᐃ: "img/currency2-in.png",
    ⵠⵠⵠΔⵠΔᐃ: "img/currency2-click.png",
    ᐃⲆᐃΔᐃⵠΔ: "img/currency3-out.png",
    ᐃⵠΔᐃΔⲆΔ: "img/currency3-in.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/currency3-click.png",
    ⵠΔⲆᐃⲆᐃⵠ: "img/currency4-out.png",
    ᐃᐃΔᐃⵠᐃⵠ: "img/currency4-in.png",
    ΔⵠΔⵠⲆⵠⵠ: "img/currency4-click.png",
    ΔᐃᐃⵠⵠΔᐃ: "img/currency5-out.png",
    ⵠᐃᐃⲆⵠⵠΔ: "img/currency5-in.png",
    ⵠᐃⵠΔΔᐃⵠ: "img/currency5-click.png",
    ⲆⲆⵠⲆⵠⵠΔ: "img/price1-out.png",
    ⲆⵠᐃᐃΔⲆⵠ: "img/price1-in.png",
    ᐃⲆᐃᐃᐃⲆⲆ: "img/price1-click.png",
    ⲆᐃⲆᐃᐃⲆᐃ: "img/price2-out.png",
    ΔᐃᐃⵠΔΔᐃ: "img/price2-in.png",
    ⵠⲆΔⵠⲆⵠⵠ: "img/price2-click.png",
    ⵠᐃΔΔⵠΔΔ: "img/price3-out.png",
    ΔⲆⵠΔᐃⵠⲆ: "img/price3-in.png",
    ⵠⲆΔⵠⵠΔᐃ: "img/price3-click.png",
    ⲆᐃⲆΔⲆᐃⲆ: "img/price4-out.png",
    ᐃᐃⵠⲆΔⲆⲆ: "img/price4-in.png",
    ᐃⵠⲆⲆⲆΔⲆ: "img/price4-click.png",
    ⵠⵠⵠⲆΔⲆⲆ: "img/price5-out.png",
    ᐃⵠⲆⵠⵠΔΔ: "img/price5-in.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/price5-click.png",
    ᐃᐃᐃⵠⵠⲆΔΔⲆ: "img/buy-private-server-out.png",
    ⵠⵠΔΔᐃΔΔᐃΔ: "img/buy-private-server-in.png",
    ⲆᐃΔᐃⵠⵠⲆⵠⵠ: "img/buy-private-server-click.png",
    ⵠΔⵠᐃⲆⵠᐃ: "img/atlanta-button-out.png",
    ᐃΔΔᐃΔᐃⵠ: "img/atlanta-button-in.png",
    ⲆⲆΔⲆᐃⲆⵠ: "img/atlanta-button-click.png",
    ᐃⵠΔⵠⵠⵠⵠ: "img/los-angeles-button-out.png",
    ΔᐃΔᐃⵠⵠΔ: "img/los-angeles-button-in.png",
    ⵠᐃⵠⵠΔΔⲆ: "img/los-angeles-button-click.png",
    ⲆⵠⲆⵠΔΔⲆ: "img/sydney-button-out.png",
    ᐃⲆⵠΔⲆⲆⵠ: "img/sydney-button-in.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/sydney-button-click.png",
    ⲆΔΔᐃⲆΔⵠ: "img/frankfurt-button-out.png",
    ΔᐃⲆΔⲆΔᐃ: "img/frankfurt-button-in.png",
    ⵠⵠᐃᐃⲆᐃΔ: "img/frankfurt-button-click.png",
    ⲆᐃᐃᐃᐃΔⵠ: "img/osaka-button-out.png",
    ΔⵠΔᐃⲆⵠⲆ: "img/osaka-button-in.png",
    ⵠⲆⲆᐃⲆᐃᐃ: "img/osaka-button-click.png",
    ⲆΔⵠᐃⲆⲆᐃⲆᐃ: "img/yes-location-out.png",
    ᐃΔⵠⲆᐃⵠⲆⵠΔ: "img/yes-location-in.png",
    ⲆⲆⵠⵠⲆΔᐃⵠᐃ: "img/yes-location-click.png",
    Ⲇⵠⵠⵠⵠᐃⵠ: "img/3days-button-out.png",
    ⲆⵠΔⲆⵠᐃΔ: "img/3days-button-in.png",
    ⲆⵠⵠᐃΔΔΔ: "img/3days-button-click.png",
    ΔΔⲆⵠⲆⵠΔ: "img/7days-button-out.png",
    ⲆᐃᐃΔᐃΔΔ: "img/7days-button-in.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/7days-button-click.png",
    ⵠⲆΔⲆⲆⲆⵠ: "img/30days-button-out.png",
    ᐃΔⵠⵠⵠⵠᐃ: "img/30days-button-in.png",
    ΔΔⵠᐃⲆᐃⵠ: "img/30days-button-click.png",
    ⵠⲆΔⲆᐃᐃⵠ: "img/90days-button-out.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/90days-button-in.png",
    ΔⵠᐃⵠΔⵠⵠ: "img/90days-button-click.png",
    ΔΔΔⲆⵠⲆΔ: "img/spin1.png",
    ⵠⲆΔΔⵠⵠⲆ: "img/spin2.png",
    ᐃᐃⵠᐃⵠⵠⲆ: "img/spin3.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/spin4.png",
    ⲆΔΔΔⲆⲆⵠ: "img/spin5.png",
    ⲆᐃΔⵠᐃᐃᐃ: "img/spin6.png",
    ⵠⲆᐃⲆⲆⲆⵠ: "img/arrow-spin.png",
    ᐃᐃⲆⵠⲆⲆⵠ: "img/spin-button-1-out.png",
    ⲆΔⲆⲆΔⵠⵠ: "img/spin-button-1-in.png",
    ΔΔᐃⵠⵠΔΔ: "img/spin-button-1-click.png",
    ⵠᐃᐃⵠΔΔⲆ: "img/spin-button-2-out.png",
    ΔᐃΔⵠⲆⵠⲆ: "img/spin-button-2-in.png",
    ⵠⲆⲆΔΔᐃⲆ: "img/spin-button-2-click.png",
    ⲆᐃᐃΔⵠⵠΔ: "img/spin-button-3-out.png",
    ⲆΔⵠⵠΔᐃⲆ: "img/spin-button-3-in.png",
    ᐃΔΔⲆΔⵠΔ: "img/spin-button-3-click.png",
    ⲆΔⲆⲆᐃᐃⲆ: "img/spin-button-4-out.png",
    ⵠⵠΔⲆⵠᐃⵠ: "img/spin-button-4-in.png",
    ΔᐃⲆⲆⵠΔⲆ: "img/spin-button-4-click.png",
    ᐃΔⵠⲆⵠᐃⵠ: "img/spin-button-5-out.png",
    ᐃΔΔⲆᐃΔⲆ: "img/spin-button-5-in.png",
    ᐃᐃⵠⲆᐃᐃⲆ: "img/spin-button-5-click.png",
    Ⲇᐃⵠⵠᐃⵠⵠ: "img/spin-light.png",
    ΔΔᐃΔΔⵠᐃ: "img/tuto-wiki-out.png",
    ᐃΔᐃΔⵠⲆᐃ: "img/tuto-wiki-in.png",
    ᐃⲆᐃⵠⵠⵠⵠ: "img/tuto-wiki-click.png",
    ᐃⲆΔⲆⵠⲆᐃ: "img/tuto-previous-out.png",
    ᐃⲆⲆⵠⲆⵠⲆ: "img/tuto-previous-in.png",
    ⵠⲆⵠⲆⲆⵠⲆ: "img/tuto-previous-click.png",
    ᐃΔⵠᐃΔΔⵠ: "img/tuto-next-out.png",
    ⲆⲆⵠᐃⵠⲆᐃ: "img/tuto-next-in.png",
    ⲆᐃⲆΔᐃⲆᐃ: "img/tuto-next-click.png",
    ⲆᐃⵠⵠᐃⲆⵠ: "img/time-leaderboard-out.png",
    ⵠΔᐃⵠᐃᐃⲆ: "img/time-leaderboard-in.png",
    ᐃⵠᐃⵠⲆᐃᐃ: "img/time-leaderboard-click.png",
    ⲆΔΔⵠⵠΔᐃ: "img/score-leaderboard-out.png",
    ΔⲆⵠⲆΔᐃᐃ: "img/score-leaderboard-in.png",
    ⲆⵠⵠⲆⵠΔᐃ: "img/score-leaderboard-click.png",
    ΔΔᐃᐃⲆⵠⲆ: "img/lvl-leaderboard-out.png",
    ⲆⵠⵠᐃᐃⵠⲆ: "img/lvl-leaderboard-in.png",
    ⲆᐃΔⲆⵠᐃΔ: "img/lvl-leaderboard-click.png",
    ⵠΔΔⲆᐃΔΔ: "img/kill-leaderboard-out.png",
    ⲆᐃⵠᐃΔⲆⲆ: "img/kill-leaderboard-in.png",
    ⲆⲆⵠⵠΔⵠⲆ: "img/kill-leaderboard-click.png",
    ⲆᐃΔΔΔⲆᐃ: "img/all-leaderboard-out.png",
    ⲆⲆⲆΔⵠⵠⵠ: "img/all-leaderboard-in.png",
    ᐃΔᐃᐃᐃⵠΔ: "img/all-leaderboard-click.png",
    ⲆΔᐃᐃΔᐃⲆ: "img/today-leaderboard-out.png",
    ⲆΔΔⲆⲆⲆΔ: "img/today-leaderboard-in.png",
    ⲆᐃΔᐃΔΔⲆ: "img/today-leaderboard-click.png",
    ⲆᐃᐃⵠᐃⲆΔ: "img/week-leaderboard-out.png",
    ᐃΔⵠΔΔᐃᐃ: "img/week-leaderboard-in.png",
    ⵠΔᐃΔᐃⲆᐃ: "img/week-leaderboard-click.png",
    ΔⲆᐃⵠΔΔⲆ: "img/season1-out.png",
    ΔΔⵠⵠⲆᐃΔ: "img/season1-in.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/season1-click.png",
    ⲆᐃᐃΔⲆᐃΔ: "img/season2-out.png",
    ᐃⵠⵠᐃⵠΔⲆ: "img/season2-in.png",
    ⵠΔΔⲆⲆⵠⲆ: "img/season2-click.png",
    ⲆⲆⲆⵠᐃⵠΔ: "img/season3-out.png",
    ⲆⵠⵠⲆⲆΔⵠ: "img/season3-in.png",
    ⲆΔⲆⲆⵠΔⵠ: "img/season3-click.png",
    ⲆⲆΔⲆⲆᐃⵠ: "img/season4-out.png",
    ⵠΔⲆⲆΔⵠⲆ: "img/season4-in.png",
    ΔⲆΔⵠⲆᐃᐃ: "img/season4-click.png",
    ᐃⵠⲆᐃⵠⲆᐃ: "img/season5-out.png",
    ΔᐃΔᐃΔⲆΔ: "img/season5-in.png",
    ⲆᐃⲆᐃᐃΔⵠ: "img/season5-click.png",
    ΔⲆⲆΔΔᐃΔ: "img/season6-out.png",
    ⲆΔⵠΔᐃΔᐃ: "img/season6-in.png",
    ᐃⵠⵠⲆⲆΔⵠ: "img/season6-click.png",
    ᐃᐃⲆⲆᐃᐃⵠ: "img/total-lead-out.png",
    ᐃΔΔᐃⲆΔᐃ: "img/total-lead-in.png",
    ΔΔΔΔᐃΔᐃ: "img/total-lead-click.png",
    ᐃᐃⵠΔⵠΔⲆ: "img/normal-lead-out.png",
    ΔᐃⵠⵠᐃΔᐃ: "img/normal-lead-in.png",
    ᐃΔΔᐃⲆΔⵠ: "img/normal-lead-click.png",
    ΔⵠΔΔⲆⲆᐃ: "img/forest-lead-out.png",
    ⵠΔᐃᐃⲆΔⲆ: "img/forest-lead-in.png",
    ᐃΔᐃⲆⵠᐃΔ: "img/forest-lead-click.png",
    ΔΔᐃⵠΔⵠⲆ: "img/vampire-lead-out.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/vampire-lead-in.png",
    ΔⵠⲆΔᐃᐃⲆ: "img/vampire-lead-click.png",
    ᐃΔⲆⲆᐃⲆΔ: "img/zombie-lead-out.png",
    ᐃΔⵠⲆⲆⵠⲆ: "img/zombie-lead-in.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/zombie-lead-click.png",
    ⵠΔΔⲆΔⵠΔ: "img/day-level5.png",
    ᐃᐃⵠⵠΔⲆᐃ: "img/night-level5.png",
    ᐃⲆⲆΔΔΔⲆ: "img/day-level10.png",
    ΔⲆΔΔΔᐃⲆ: "img/night-level10.png",
    ⲆᐃⲆⵠⵠΔⲆ: "img/day-level15.png",
    ⲆⵠΔⵠⲆⵠⲆ: "img/night-level15.png",
    ΔΔⵠΔⵠⵠⵠ: "img/day-level20.png",
    ⲆⲆⲆᐃᐃᐃΔ: "img/night-level20.png",
    ᐃΔΔᐃⵠⲆⵠ: "img/day-level25.png",
    ⵠⲆᐃᐃⵠⲆⵠ: "img/night-level25.png",
    ΔⵠⲆᐃΔⲆⵠ: "img/day-level30.png",
    ΔⵠⵠΔᐃⵠᐃ: "img/night-level30.png",
    ⵠΔⵠⵠⲆⵠΔ: "img/day-level35.png",
    ΔⵠⲆⲆⵠᐃⵠ: "img/night-level35.png",
    ⵠΔᐃⵠⲆΔΔ: "img/day-level40.png",
    ᐃⵠⵠⲆΔΔⲆ: "img/night-level40.png",
    ΔⲆⲆᐃⲆᐃⵠ: "img/day-level45.png",
    ⵠᐃⲆᐃΔᐃΔ: "img/night-level45.png",
    ᐃΔⵠᐃⵠᐃΔ: "img/day-level50.png",
    ᐃΔΔΔΔΔⲆ: "img/night-level50.png",
    ⲆΔⲆⵠΔⵠⵠ: "img/day-level55.png",
    ⵠΔᐃⵠⵠⲆΔ: "img/night-level55.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/day-level60.png",
    ⵠΔⲆⲆⲆΔΔ: "img/night-level60.png",
    ᐃⲆᐃᐃⵠⵠᐃ: "img/day-skin-devast0.png",
    ᐃᐃⲆⵠⲆᐃⵠ: "img/night-skin-devast0.png",
    ⵠⲆΔⲆⵠⲆⵠ: "img/day-hand-devaster.png",
    ᐃΔΔᐃⵠⲆⲆ: "img/night-hand-devaster.png",
    ⲆⲆⵠⲆⵠᐃΔ: "img/day-skin-star0.png",
    ⵠⲆⲆΔⵠⲆΔ: "img/night-skin-star0.png",
    ΔᐃⵠΔΔⲆⲆ: "img/day-hand-star0.png",
    ⲆΔⲆΔᐃⲆΔ: "img/night-hand-star0.png",
    ᐃⵠΔᐃⲆⵠΔ: "img/day-vampire.png",
    ᐃⲆᐃⲆⵠⵠⲆ: "img/night-vampire.png",
    ⵠᐃⵠΔᐃΔⲆ: "img/day-hand-vampire.png",
    ⲆΔΔΔΔΔᐃ: "img/night-hand-vampire.png",
    ⲆⲆⵠⲆΔⵠΔ: "img/day-zombie.png",
    ᐃΔⲆΔᐃⲆⲆ: "img/night-zombie.png",
    ⵠΔΔᐃᐃΔΔ: "img/day-hand-zombie.png",
    ⵠᐃΔⵠΔᐃΔ: "img/night-hand-zombie.png",
    ⲆᐃᐃⲆⵠⲆᐃ: "img/day-skin113.png",
    ⵠⲆⵠΔᐃᐃⲆ: "img/night-skin113.png",
    ΔΔᐃⵠⲆⵠᐃ: "img/day-hand-skin113.png",
    ᐃⲆᐃⲆΔᐃⲆ: "img/night-hand-skin113.png",
    ΔᐃΔΔᐃᐃᐃ: "img/day-skin0.png",
    ΔΔⵠⵠΔΔᐃ: "img/night-skin0.png",
    ⲆⵠΔⲆⲆΔΔ: "img/day-skin1.png",
    ⵠᐃⲆᐃᐃΔⵠ: "img/night-skin1.png",
    Ⲇⵠᐃᐃⵠᐃᐃ: "img/day-skin2.png",
    ⲆΔⲆⵠΔΔΔ: "img/night-skin2.png",
    ⵠⵠⵠᐃᐃΔᐃ: "img/day-skin3.png",
    ᐃᐃᐃⵠⵠⵠᐃ: "img/night-skin3.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/day-skin4.png",
    ΔΔⵠⲆΔⵠΔ: "img/night-skin4.png",
    ᐃᐃᐃⵠⲆᐃΔ: "img/day-skin5.png",
    ⵠΔΔΔΔⵠΔ: "img/night-skin5.png",
    ⵠⵠⵠΔⲆᐃΔ: "img/day-skin6.png",
    ⲆⵠᐃΔΔⲆⲆ: "img/night-skin6.png",
    ⵠⲆⲆⵠΔΔΔ: "img/day-skin7.png",
    ⲆᐃⲆⵠᐃΔΔ: "img/night-skin7.png",
    ᐃΔᐃΔΔᐃΔ: "img/day-skin8.png",
    ΔΔΔᐃᐃᐃⲆ: "img/night-skin8.png",
    ⲆᐃΔᐃᐃⲆΔ: "img/day-skin9.png",
    ᐃᐃᐃΔⵠΔⲆ: "img/night-skin9.png",
    ⲆⵠⲆΔᐃⵠΔ: "img/day-skin10.png",
    ΔΔⲆΔᐃⵠᐃ: "img/night-skin10.png",
    ΔⲆⲆᐃⵠⵠⲆ: "img/day-skin11.png",
    ΔⲆᐃⲆᐃⵠΔ: "img/night-skin11.png",
    ⲆᐃᐃᐃΔⵠΔ: "img/day-skin12.png",
    ΔᐃⲆⵠΔⲆᐃ: "img/night-skin12.png",
    ΔΔᐃᐃᐃⵠⲆ: "img/day-skin13.png",
    ⵠⲆΔΔΔⵠᐃ: "img/night-skin13.png",
    ⲆⵠᐃⲆⵠⲆᐃ: "img/day-skin14.png",
    ᐃⵠΔⵠⵠΔΔ: "img/night-skin14.png",
    Ⲇⵠⵠⵠⵠⵠⵠ: "img/day-skin15.png",
    ⵠⲆⵠⵠⲆⲆⲆ: "img/night-skin15.png",
    ⵠⵠᐃΔⲆᐃⲆ: "img/day-skin16.png",
    ⲆⵠⲆᐃᐃⲆᐃ: "img/night-skin16.png",
    ΔⲆᐃᐃᐃⵠΔ: "img/day-skin17.png",
    ⵠΔᐃᐃⵠᐃⵠ: "img/night-skin17.png",
    ᐃⵠⵠᐃⲆΔΔ: "img/day-skin18.png",
    ⲆⵠΔⵠⵠΔⲆ: "img/night-skin18.png",
    ᐃΔΔᐃⵠΔΔ: "img/day-skin19.png",
    ᐃⵠᐃΔⲆⵠΔ: "img/night-skin19.png",
    ⵠΔⲆΔⵠⵠⲆ: "img/day-skin20.png",
    ⲆΔΔᐃⵠⲆΔ: "img/night-skin20.png",
    ᐃⲆⵠᐃᐃΔᐃ: "img/day-skin21.png",
    ᐃᐃⲆⲆΔᐃⲆ: "img/night-skin21.png",
    ⵠⲆⵠⲆᐃΔΔ: "img/day-skin22.png",
    ΔΔⵠⵠᐃΔⵠ: "img/night-skin22.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/day-skin23.png",
    ᐃᐃᐃΔⵠᐃⲆ: "img/night-skin23.png",
    ΔΔⲆᐃⵠⵠᐃ: "img/day-skin24.png",
    ⵠΔⵠⵠⵠⲆⲆ: "img/night-skin24.png",
    ⲆⵠⲆΔΔⲆΔ: "img/day-skin25.png",
    ᐃᐃᐃΔᐃⲆᐃ: "img/night-skin25.png",
    ΔⲆΔΔᐃⵠᐃ: "img/day-skin26.png",
    ⵠᐃⲆⵠΔⵠⲆ: "img/night-skin26.png",
    ⲆᐃⲆΔⲆⲆᐃ: "img/day-skin27.png",
    ᐃⵠⵠᐃΔⲆⵠ: "img/night-skin27.png",
    ⲆᐃⲆᐃⵠᐃᐃ: "img/day-skin28.png",
    ᐃⵠⲆⲆᐃⲆΔ: "img/night-skin28.png",
    ΔⵠⵠΔⵠᐃⵠ: "img/day-skin29.png",
    ⵠⲆᐃΔⲆᐃΔ: "img/night-skin29.png",
    ΔᐃⵠⲆᐃᐃⲆ: "img/day-skin30.png",
    ΔᐃᐃⲆΔΔΔ: "img/night-skin30.png",
    ⵠΔΔⵠⲆΔᐃ: "img/day-skin31.png",
    ⵠΔᐃⵠΔⵠⲆ: "img/night-skin31.png",
    ⲆΔᐃΔⲆΔⲆ: "img/day-skin32.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/night-skin32.png",
    ᐃᐃⵠΔⵠᐃΔ: "img/day-skin33.png",
    ⲆΔⵠⵠⵠⲆΔ: "img/night-skin33.png",
    ΔⵠⲆᐃᐃᐃⵠ: "img/day-skin34.png",
    ᐃᐃⵠⵠᐃⵠΔ: "img/night-skin34.png",
    ᐃⵠⲆⲆⲆⵠΔ: "img/day-skin35.png",
    ⲆⵠΔᐃᐃᐃⵠ: "img/night-skin35.png",
    ΔΔⲆⵠⵠⲆᐃ: "img/day-skin36.png",
    ⵠΔⲆᐃⲆΔΔ: "img/night-skin36.png",
    ᐃⲆᐃᐃⲆᐃΔ: "img/day-skin37.png",
    ⵠⲆⲆⲆⲆⲆⲆ: "img/night-skin37.png",
    ⲆᐃⲆᐃᐃⲆⵠ: "img/day-skin38.png",
    ⲆⲆᐃⲆΔⵠⲆ: "img/night-skin38.png",
    ΔᐃᐃⲆΔΔⲆ: "img/day-skin39.png",
    ⲆⲆⲆΔΔᐃⲆ: "img/night-skin39.png",
    ⲆⵠΔⲆΔⲆⲆ: "img/day-skin40.png",
    ᐃⲆᐃⵠⵠⵠᐃ: "img/night-skin40.png",
    ⲆⵠΔⵠᐃᐃⵠ: "img/day-skin41.png",
    ⲆΔⵠᐃⲆᐃᐃ: "img/night-skin41.png",
    ΔᐃᐃⵠΔⲆⲆ: "img/day-skin42.png",
    ⵠΔᐃΔΔⲆⵠ: "img/night-skin42.png",
    ⲆⵠᐃᐃΔΔⲆ: "img/day-skin43.png",
    ⲆΔᐃⵠⵠΔΔ: "img/night-skin43.png",
    ⵠⵠᐃᐃⵠᐃⲆ: "img/day-skin44.png",
    ⲆᐃᐃᐃⲆᐃⵠ: "img/night-skin44.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/day-skin45.png",
    ᐃᐃⲆᐃΔⵠⵠ: "img/night-skin45.png",
    ᐃᐃⲆⵠΔΔᐃ: "img/day-skin46.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/night-skin46.png",
    ⲆᐃᐃⵠΔⲆΔ: "img/day-skin47.png",
    ΔᐃⵠⲆᐃⲆᐃ: "img/night-skin47.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/day-skin48.png",
    ⵠⵠᐃⵠⲆⲆⲆ: "img/night-skin48.png",
    ⲆΔⵠᐃΔⵠΔ: "img/day-skin49.png",
    ⲆΔⲆᐃΔⵠⵠ: "img/night-skin49.png",
    ⲆΔⲆⲆⲆⵠⲆ: "img/day-skin50.png",
    ⵠᐃⲆΔⵠᐃᐃ: "img/night-skin50.png",
    ΔᐃⲆΔΔΔᐃ: "img/day-skin51.png",
    ⲆΔΔⵠⲆΔⵠ: "img/night-skin51.png",
    ⲆⲆⵠⵠⵠⵠⵠ: "img/day-skin52.png",
    ΔΔΔᐃⵠⵠᐃ: "img/night-skin52.png",
    ⲆΔΔΔΔᐃΔ: "img/day-skin53.png",
    ⵠΔⲆᐃᐃᐃⵠ: "img/night-skin53.png",
    ⲆⵠⵠⲆᐃⲆⲆ: "img/day-skin54.png",
    ΔᐃⵠⲆⵠⲆᐃ: "img/night-skin54.png",
    ΔᐃᐃΔⲆⲆΔ: "img/day-skin55.png",
    ⵠⲆΔⲆΔⵠⵠ: "img/night-skin55.png",
    ΔΔⲆⲆⲆᐃᐃ: "img/day-skin56.png",
    ⲆΔᐃⵠᐃⲆᐃ: "img/night-skin56.png",
    ⲆΔΔⵠⲆΔΔ: "img/day-skin57.png",
    ⲆΔᐃⲆⲆⵠᐃ: "img/night-skin57.png",
    ᐃΔⲆΔᐃⲆΔ: "img/day-skin58.png",
    ⵠΔⲆΔⵠΔΔ: "img/night-skin58.png",
    ΔⲆⲆΔⵠⵠΔ: "img/day-skin59.png",
    ΔᐃⲆⲆΔᐃⲆ: "img/night-skin59.png",
    ⲆΔⵠΔΔⵠⵠ: "img/day-skin60.png",
    ᐃⵠⲆⵠᐃΔⲆ: "img/night-skin60.png",
    ᐃⵠΔⵠΔⲆΔ: "img/day-skin61.png",
    ⲆΔⵠᐃΔΔⲆ: "img/night-skin61.png",
    ΔΔᐃⵠᐃⵠᐃ: "img/day-skin62.png",
    ⲆΔⵠΔΔΔΔ: "img/night-skin62.png",
    ⲆΔⵠⵠΔᐃⵠ: "img/day-skin63.png",
    ⲆΔΔᐃᐃⲆⵠ: "img/night-skin63.png",
    ᐃᐃΔⵠΔᐃᐃ: "img/day-skin64.png",
    ΔΔᐃⵠⵠⵠΔ: "img/night-skin64.png",
    ⵠⵠᐃᐃᐃⵠⲆ: "img/day-skin65.png",
    ᐃᐃΔⵠⲆⵠⲆ: "img/night-skin65.png",
    ᐃⲆΔⵠⵠⵠⵠ: "img/day-skin66.png",
    ᐃᐃⵠⲆⲆⲆΔ: "img/night-skin66.png",
    ⲆⵠⵠⲆΔⵠⵠ: "img/day-skin67.png",
    ⲆΔⵠⵠⵠΔᐃ: "img/night-skin67.png",
    ⵠᐃᐃᐃⵠⵠⵠ: "img/day-skin68.png",
    ⲆᐃΔⵠⵠⲆⵠ: "img/night-skin68.png",
    ΔᐃΔⲆΔⲆⲆ: "img/day-skin69.png",
    ΔΔΔΔⲆⵠΔ: "img/night-skin69.png",
    ᐃⲆⲆⲆᐃⲆᐃ: "img/day-skin70.png",
    ᐃⵠΔΔΔⵠⵠ: "img/night-skin70.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/day-skin71.png",
    ⲆᐃⵠⵠⲆⵠⲆ: "img/night-skin71.png",
    Ⲇⵠᐃᐃᐃⵠⵠ: "img/day-skin72.png",
    ΔΔΔΔⲆΔΔ: "img/night-skin72.png",
    ᐃⵠᐃᐃΔᐃΔ: "img/day-skin73.png",
    ᐃᐃᐃᐃⵠΔᐃ: "img/night-skin73.png",
    ⲆⲆᐃⵠΔΔⲆ: "img/day-skin74.png",
    ΔΔᐃⲆΔⵠⵠ: "img/night-skin74.png",
    ᐃΔΔᐃⵠⵠΔ: "img/day-skin75.png",
    ᐃⲆΔⵠⲆⵠΔ: "img/night-skin75.png",
    ⲆΔᐃⲆΔΔⵠ: "img/day-skin76.png",
    ΔⲆᐃⲆⵠᐃⲆ: "img/night-skin76.png",
    ᐃⲆⲆⲆΔⵠΔ: "img/day-skin77.png",
    ⵠⲆⵠᐃⵠⵠⲆ: "img/night-skin77.png",
    ⲆⲆⲆΔⵠᐃⵠ: "img/day-skin78.png",
    ⲆⲆⲆⵠᐃᐃⲆ: "img/night-skin78.png",
    ΔΔⵠⵠⵠᐃᐃ: "img/day-skin79.png",
    ΔⵠᐃⵠΔᐃᐃ: "img/night-skin79.png",
    ⵠⲆⲆΔΔⵠⲆ: "img/day-skin80.png",
    ⵠᐃⵠⵠΔΔΔ: "img/night-skin80.png",
    ⲆΔⲆΔⲆⵠⲆ: "img/day-skin81.png",
    ΔⵠΔⵠΔⲆᐃ: "img/night-skin81.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/day-skin82.png",
    ᐃⵠᐃⵠΔⲆΔ: "img/night-skin82.png",
    ΔΔΔᐃΔΔⵠ: "img/day-skin83.png",
    ⲆΔⲆΔΔᐃⲆ: "img/night-skin83.png",
    ⲆᐃᐃⲆⲆΔΔ: "img/day-skin84.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/night-skin84.png",
    ⵠΔΔⲆⵠΔᐃ: "img/day-skin85.png",
    ⲆΔⲆⵠⵠⵠΔ: "img/night-skin85.png",
    ᐃΔᐃⵠⲆΔⲆ: "img/day-skin86.png",
    ΔᐃᐃⲆⲆⵠΔ: "img/night-skin86.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/day-skin87.png",
    ⵠᐃΔⲆᐃΔⵠ: "img/night-skin87.png",
    ᐃΔΔⵠᐃΔΔ: "img/day-skin88.png",
    ᐃⲆⵠⵠⲆΔΔ: "img/night-skin88.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/day-skin89.png",
    ᐃⲆⲆⵠⵠᐃⵠ: "img/night-skin89.png",
    ᐃΔᐃᐃⵠᐃᐃ: "img/day-skin90.png",
    ⲆⲆⵠᐃᐃⲆᐃ: "img/night-skin90.png",
    ⲆΔⲆᐃΔᐃΔ: "img/day-skin91.png",
    ΔⲆⵠⲆᐃⲆΔ: "img/night-skin91.png",
    ⵠⲆⵠⲆΔⵠⵠ: "img/day-skin92.png",
    ⵠⲆⲆⲆΔⲆⲆ: "img/night-skin92.png",
    ΔᐃⵠΔⵠⲆⵠ: "img/day-skin93.png",
    ⵠΔⲆΔᐃΔΔ: "img/night-skin93.png",
    ⵠⲆΔⲆⲆᐃΔ: "img/day-skin94.png",
    ⲆᐃⲆⵠᐃᐃᐃ: "img/night-skin94.png",
    ᐃΔᐃΔΔⲆⵠ: "img/day-skin95.png",
    ⲆⲆⲆΔᐃΔᐃ: "img/night-skin95.png",
    ΔΔᐃⵠΔⵠᐃ: "img/day-skin96.png",
    ΔᐃᐃΔⲆΔᐃ: "img/night-skin96.png",
    ΔⲆⲆᐃΔⲆᐃ: "img/day-skin97.png",
    ᐃΔᐃΔⲆᐃΔ: "img/night-skin97.png",
    ⵠⲆⲆΔᐃᐃᐃ: "img/day-skin98.png",
    ΔⲆΔⲆⲆⲆⲆ: "img/night-skin98.png",
    ⲆᐃⵠⵠⲆⵠΔ: "img/day-skin99.png",
    ⲆⲆᐃⵠⲆΔᐃ: "img/night-skin99.png",
    ⵠⵠⵠⲆⵠᐃΔ: "img/day-skin100.png",
    ⵠᐃⵠΔᐃⲆΔ: "img/night-skin100.png",
    ᐃⵠᐃΔᐃⵠⲆ: "img/day-skin101.png",
    ᐃᐃⵠⵠⲆⵠΔ: "img/night-skin101.png",
    ⲆⲆⲆΔⵠⲆⵠ: "img/day-skin102.png",
    ᐃᐃΔᐃΔᐃΔ: "img/night-skin102.png",
    ⲆⲆᐃᐃᐃⲆΔ: "img/day-skin103.png",
    ᐃΔⵠⵠΔⵠⲆ: "img/night-skin103.png",
    ⲆᐃᐃΔⲆΔΔ: "img/day-skin104.png",
    ⲆᐃⲆⲆᐃⵠᐃ: "img/night-skin104.png",
    ⲆΔⲆⲆⲆᐃΔ: "img/day-skin105.png",
    ΔᐃⲆΔΔᐃΔ: "img/night-skin105.png",
    ᐃⵠⵠⲆⵠⲆᐃ: "img/day-skin106.png",
    ⲆⲆⲆΔⲆⲆⲆ: "img/night-skin106.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/day-skin107.png",
    ᐃⲆΔⲆⵠⵠⵠ: "img/night-skin107.png",
    ⵠⲆΔᐃⵠΔᐃ: "img/day-skin108.png",
    ᐃᐃⲆⲆΔⲆΔ: "img/night-skin108.png",
    ⵠⲆᐃⵠⲆΔⲆ: "img/day-skin109.png",
    ⵠᐃᐃᐃⵠⵠΔ: "img/night-skin109.png",
    ᐃⵠⵠⲆᐃⲆⲆ: "img/day-skin110.png",
    ⵠⵠⲆⲆⵠΔⲆ: "img/night-skin110.png",
    ᐃΔΔⵠΔⵠΔ: "img/day-skin111.png",
    ⵠⲆⲆᐃᐃⲆΔ: "img/night-skin111.png",
    ⵠⵠᐃᐃΔᐃⵠ: "img/day-skin112.png",
    ΔΔⵠⲆⲆⲆⲆ: "img/night-skin112.png",
    ᐃΔⵠᐃΔᐃΔⵠⲆ: "img/day-skin113.png",
    ΔⵠᐃⲆⵠⲆΔⵠᐃ: "img/night-skin113.png",
    ⲆᐃⲆⲆΔⵠᐃ: "img/day-skin114.png",
    ⵠⵠⲆᐃⲆⲆᐃ: "img/night-skin114.png",
    ⲆᐃΔⲆΔᐃⲆ: "img/day-skin115.png",
    ⵠⲆΔΔΔⵠⵠ: "img/night-skin115.png",
    ΔⵠⲆΔⵠⲆⵠ: "img/day-skin116.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/night-skin116.png",
    ΔΔΔⵠⲆᐃⲆ: "img/day-skin117.png",
    ᐃⲆΔΔⲆΔᐃ: "img/night-skin117.png",
    ΔⵠᐃⵠΔⵠΔ: "img/day-skin118.png",
    ΔⵠᐃᐃΔⵠⵠ: "img/night-skin118.png",
    ⵠⵠⲆⵠᐃⲆΔ: "img/day-skin119.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/night-skin119.png",
    ⵠᐃⵠⲆⲆⲆᐃ: "img/day-skin120.png",
    ⵠⲆΔⵠⵠΔⵠ: "img/night-skin120.png",
    ΔⵠⲆΔⲆⲆΔ: "img/day-skin121.png",
    ⵠⲆᐃⵠⲆᐃⲆ: "img/night-skin121.png",
    ᐃⲆΔⵠᐃΔᐃ: "img/day-skin122.png",
    ᐃⵠⵠⲆᐃⵠᐃ: "img/night-skin122.png",
    ΔⵠΔᐃⵠᐃⲆ: "img/day-skin123.png",
    ⲆᐃⵠⵠΔᐃⵠ: "img/night-skin123.png",
    ⵠⲆⲆᐃᐃᐃᐃ: "img/day-skin124.png",
    ⵠΔᐃⵠⲆⲆΔ: "img/night-skin124.png",
    ⵠᐃⵠⵠⲆᐃΔ: "img/day-skin125.png",
    ᐃᐃⲆᐃᐃⲆⵠ: "img/night-skin125.png",
    ⲆⲆⵠⲆΔⵠⲆ: "img/day-skin126.png",
    ⲆᐃΔΔᐃΔⵠ: "img/night-skin126.png",
    ⵠΔⲆⵠᐃⵠⲆ: "img/day-skin127.png",
    ᐃⵠⵠⲆΔⵠⲆ: "img/night-skin127.png",
    ⵠⲆⲆΔⲆᐃⵠ: "img/day-skin128.png",
    ᐃᐃΔⵠⲆΔΔ: "img/night-skin128.png",
    ⲆⲆⲆΔᐃΔⲆ: "img/day-skin129.png",
    ᐃⵠᐃⲆΔⲆⵠ: "img/night-skin129.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/day-skin130-1.png",
    ⵠⲆⵠᐃΔᐃΔ: "img/night-skin130-1.png",
    ᐃⵠΔⵠᐃᐃⵠ: "img/day-skin131.png",
    ⵠᐃᐃΔⵠᐃᐃ: "img/night-skin131.png",
    ΔΔⵠⵠⲆⵠΔ: "img/day-skin132.png",
    ⲆⲆⲆΔᐃⲆᐃ: "img/night-skin132.png",
    ⵠΔᐃᐃᐃⲆΔ: "img/day-skin133.png",
    ᐃⲆⲆⵠⲆΔⵠ: "img/night-skin133.png",
    ΔⵠⲆⵠⵠⵠΔ: "img/day-skin134.png",
    ΔΔΔⵠⲆᐃΔ: "img/night-skin134.png",
    ⲆⲆⲆⵠΔΔⵠ: "img/day-skin135.png",
    ⵠᐃⲆⵠⲆΔᐃ: "img/night-skin135.png",
    ᐃⵠⲆᐃΔᐃᐃ: "img/day-skin136.png",
    ᐃΔΔⲆᐃⵠΔ: "img/night-skin136.png",
    ⲆⵠΔⵠᐃⵠⵠ: "img/day-skin137.png",
    ⵠΔΔᐃΔΔᐃ: "img/night-skin137.png",
    ΔⲆⲆⲆΔᐃΔ: "img/day-skin138.png",
    ᐃⲆⵠΔⲆᐃᐃ: "img/night-skin138.png",
    ΔⵠⵠᐃΔⲆᐃ: "img/day-skin139.png",
    ᐃΔⵠΔⲆⵠⲆ: "img/night-skin139.png",
    ΔⲆⲆΔⵠΔΔ: "img/day-skin140.png",
    ᐃⵠᐃΔΔΔᐃ: "img/night-skin140.png",
    ᐃⵠΔⵠΔⲆⲆ: "img/day-skin141.png",
    ⲆΔⵠⲆᐃΔᐃ: "img/night-skin141.png",
    ΔᐃⲆΔⲆⲆⵠ: "img/day-skin142.png",
    ⲆⵠᐃⲆΔⵠⵠ: "img/night-skin142.png",
    ΔᐃⲆⵠᐃⲆⵠ: "img/day-skin143.png",
    ⲆᐃᐃΔΔΔᐃ: "img/night-skin143.png",
    ⵠⲆΔⵠⵠⲆΔ: "img/day-skin144.png",
    ⲆⵠⲆⲆⲆⵠⵠ: "img/night-skin144.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/day-skin145.png",
    ΔᐃⵠΔᐃᐃᐃ: "img/night-skin145.png",
    ᐃⲆⵠⲆⵠⲆⲆ: "img/day-skin146.png",
    ⵠⵠΔΔΔⵠⵠ: "img/night-skin146.png",
    ΔᐃᐃΔⲆⲆⲆ: "img/day-skin147.png",
    ⵠΔᐃᐃⵠⲆᐃ: "img/night-skin147.png",
    ⵠⵠⵠΔⲆᐃⲆ: "img/day-skin148.png",
    ᐃᐃᐃᐃΔΔᐃ: "img/night-skin148.png",
    ΔᐃⵠⵠⵠΔⲆ: "img/day-skin149.png",
    ⵠΔΔᐃΔⵠⲆ: "img/night-skin149.png",
    ᐃⵠᐃⵠⲆΔΔ: "img/day-skin150.png",
    ᐃΔⵠⲆΔΔⲆ: "img/night-skin150.png",
    ⲆΔᐃⵠΔⵠⵠ: "img/day-skin151.png",
    ⲆΔⵠⲆᐃⲆⲆ: "img/night-skin151.png",
    ᐃⵠΔⲆⲆⵠⲆ: "img/day-skin152.png",
    ΔΔᐃᐃⲆΔᐃ: "img/night-skin152.png",
    ᐃⵠΔⵠᐃᐃᐃ: "img/day-skin153.png",
    ⵠΔᐃΔΔᐃΔ: "img/night-skin153.png",
    ΔⵠⵠΔⲆᐃΔ: "img/day-skin154.png",
    ΔᐃⵠΔⲆⲆΔ: "img/night-skin154.png",
    ᐃΔⲆⲆⲆΔᐃ: "img/day-skin155.png",
    ᐃⲆᐃᐃᐃΔΔ: "img/night-skin155.png",
    ⵠᐃⵠⵠⲆᐃᐃ: "img/day-skin156.png",
    ⵠᐃΔᐃΔΔΔ: "img/night-skin156.png",
    ΔⵠᐃⲆᐃⵠⲆ: "img/day-skin157.png",
    ΔⵠⵠⲆⲆᐃⵠ: "img/night-skin157.png",
    ᐃⲆⵠΔΔⲆΔ: "img/day-skin158.png",
    ⵠⵠᐃⲆᐃⵠᐃ: "img/night-skin158.png",
    ⵠⲆΔΔΔⲆⵠ: "img/day-skin159.png",
    ΔⵠⲆΔᐃⵠⵠ: "img/night-skin159.png",
    ⲆⲆᐃⵠΔᐃⲆ: "img/day-skin160.png",
    ᐃⲆⵠⲆᐃΔⵠ: "img/night-skin160.png",
    ᐃΔΔΔΔⵠΔ: "img/day-skin161.png",
    ⵠᐃⵠⲆⲆⵠⲆ: "img/night-skin161.png",
    ᐃⲆΔⵠΔΔⵠ: "img/day-skin162.png",
    ⲆⲆΔΔΔΔⲆ: "img/night-skin162.png",
    ΔⵠⵠⲆⵠⲆⵠ: "img/day-skin163.png",
    ΔᐃⵠⲆⵠⵠᐃ: "img/night-skin163.png",
    ⲆⲆⵠᐃΔΔⲆ: "img/day-skin164.png",
    ⵠⲆᐃᐃΔⲆⵠ: "img/night-skin164.png",
    ΔᐃⵠΔⲆΔΔ: "img/day-skin165.png",
    ᐃΔΔⲆⲆΔΔ: "img/night-skin165.png",
    ᐃΔᐃᐃΔⲆⲆ: "img/day-skin166.png",
    ΔᐃΔᐃⵠⵠⲆ: "img/night-skin166.png",
    ΔΔᐃᐃΔΔΔ: "img/day-skin167.png",
    ⵠⵠⵠⵠⵠᐃⲆ: "img/night-skin167.png",
    ⵠΔᐃⲆᐃⲆΔ: "img/day-skin168.png",
    ᐃⲆⲆⲆᐃᐃᐃ: "img/night-skin168.png",
    ΔⵠⵠⲆᐃⵠⲆ: "img/day-skin169.png",
    ⵠᐃⵠΔⵠᐃΔ: "img/night-skin169.png",
    ⲆΔⵠⵠΔⵠⲆ: "img/day-skin170.png",
    ΔᐃⵠⵠⲆΔᐃ: "img/night-skin170.png",
    ⲆΔⲆᐃⵠⲆᐃ: "img/day-skin171.png",
    ⵠⵠΔⵠⵠⲆΔ: "img/night-skin171.png",
    ΔⲆΔⲆⵠⵠⵠ: "img/day-skin172.png",
    ⵠᐃⵠΔⲆΔⲆ: "img/night-skin172.png",
    ΔᐃᐃΔᐃᐃᐃ: "img/day-skin173.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/night-skin173.png",
    ⵠΔᐃⲆⲆΔⲆ: "img/day-skin174.png",
    ΔⲆᐃΔⵠΔⲆ: "img/night-skin174.png",
    ᐃᐃⵠΔΔⲆⵠ: "img/day-skin175.png",
    ΔⵠⲆⲆⵠᐃΔ: "img/night-skin175.png",
    ⲆᐃΔⲆᐃⲆᐃ: "img/day-skin176.png",
    ⲆΔⵠΔⵠⲆᐃ: "img/night-skin176.png",
    ᐃΔⵠⲆⲆᐃⲆ: "img/day-skin177.png",
    ΔⲆⲆΔΔⲆΔ: "img/night-skin177.png",
    ᐃΔΔᐃΔΔᐃ: "img/day-skin178.png",
    ᐃⲆΔⲆⵠᐃⵠ: "img/night-skin178.png",
    ⲆⲆⲆⲆᐃΔΔ: "img/day-skin179.png",
    ⲆⲆΔΔᐃⲆᐃ: "img/night-skin179.png",
    ⵠΔΔⲆⵠᐃᐃ: "img/day-skin180.png",
    ΔⵠⵠⲆⲆⵠΔ: "img/night-skin180.png",
    ΔᐃΔᐃⵠᐃⵠ: "img/day-skin181.png",
    ⲆΔⲆⵠⲆⲆⵠ: "img/night-skin181.png",
    ⲆΔⲆᐃⵠΔᐃ: "img/day-skin182.png",
    ⵠⵠᐃᐃᐃⲆᐃ: "img/night-skin182.png",
    ⵠᐃᐃΔΔᐃⲆ: "img/day-skin183.png",
    ⵠⵠΔΔᐃⵠⲆ: "img/night-skin183.png",
    ⵠⵠᐃⲆᐃᐃΔ: "img/day-skin184.png",
    ᐃⵠⲆᐃᐃⲆⵠ: "img/night-skin184.png",
    ΔᐃⲆⵠⵠⵠⵠ: "img/day-skin185.png",
    ΔⲆⵠⵠⲆΔᐃ: "img/night-skin185.png",
    ⲆⲆⲆⲆⵠⵠΔ: "img/day-skin186.png",
    ⵠⲆΔⲆΔΔⲆ: "img/night-skin186.png",
    ΔΔᐃΔΔΔΔ: "img/day-skin187.png",
    ᐃⲆΔⲆⲆⵠⲆ: "img/night-skin187.png",
    ᐃⵠⲆᐃⲆΔΔ: "img/day-skin188.png",
    ⲆᐃΔⵠⲆⵠΔ: "img/night-skin188.png",
    ᐃⲆⵠⲆᐃⵠⵠ: "img/day-skin189.png",
    ⲆᐃᐃΔⵠᐃⵠ: "img/night-skin189.png",
    ᐃⲆⲆⵠΔΔᐃ: "img/day-skin190.png",
    ⲆᐃⲆΔⲆΔⵠ: "img/night-skin190.png",
    ⲆᐃᐃΔΔΔⵠ: "img/day-skin191.png",
    ᐃⲆᐃⵠⲆΔⵠ: "img/night-skin191.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/day-skin192.png",
    ΔⲆᐃⲆΔΔⵠ: "img/night-skin192.png",
    ΔΔᐃΔΔᐃᐃ: "img/day-skin193.png",
    ᐃⵠⲆⵠⵠⲆΔ: "img/night-skin193.png",
    ⲆⵠⲆⲆⵠᐃⲆ: "img/day-skin194.png",
    ⲆⲆΔΔⵠⵠⵠ: "img/night-skin194.png",
    ⲆᐃᐃᐃⵠΔΔ: "img/day-skin195.png",
    ᐃᐃᐃΔⵠᐃΔ: "img/night-skin195.png",
    ⲆᐃⲆΔⲆⵠᐃ: "img/day-skin196.png",
    ᐃΔᐃⲆΔΔⵠ: "img/night-skin196.png",
    ⵠⲆⵠΔⲆⵠⵠ: "img/day-skin197.png",
    ⲆⵠⲆⵠᐃΔⲆ: "img/night-skin197.png",
    ⵠΔΔⵠⵠⲆᐃ: "img/day-skin198.png",
    ᐃⵠᐃᐃΔⲆᐃ: "img/night-skin198.png",
    ΔΔΔⲆΔΔⵠ: "img/day-skin199.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/night-skin199.png",
    ⵠΔΔⵠⲆⲆⵠ: "img/day-skin200.png",
    ⲆⲆⲆⵠⲆⲆΔ: "img/night-skin200.png",
    ⵠⵠⵠⲆᐃⲆⲆ: "img/day-skin201.png",
    ⲆΔΔᐃᐃΔΔ: "img/night-skin201.png",
    ⲆⲆⵠⵠΔⲆⵠ: "img/day-skin202.png",
    ΔΔᐃΔⲆⲆⵠ: "img/night-skin202.png",
    ⲆΔΔⲆᐃᐃⵠ: "img/day-skin203.png",
    ΔᐃΔᐃⲆⵠᐃ: "img/night-skin203.png",
    ΔᐃᐃⲆⲆᐃⲆ: "img/day-skin204.png",
    ΔⲆⲆⲆΔΔΔ: "img/night-skin204.png",
    ⲆΔᐃⲆᐃΔⲆ: "img/day-skin205.png",
    ᐃⵠⲆᐃᐃΔΔ: "img/night-skin205.png",
    ΔⵠⲆΔΔᐃⵠ: "img/day-skin206.png",
    ᐃⲆⲆΔᐃⲆΔ: "img/night-skin206.png",
    ΔⵠⵠΔⵠΔΔ: "img/day-skin207.png",
    ᐃⲆΔΔⵠΔᐃ: "img/night-skin207.png",
    ᐃⵠⲆΔⲆᐃΔ: "img/day-skin208.png",
    ⲆⵠⵠΔⵠΔⵠ: "img/night-skin208.png",
    ⵠΔⲆᐃⵠΔΔ: "img/day-skin209.png",
    ΔΔⵠΔΔᐃᐃ: "img/night-skin209.png",
    ΔΔⵠⲆΔᐃⲆ: "img/day-skin210.png",
    ᐃⵠΔΔⵠᐃⲆ: "img/night-skin210.png",
    ᐃⲆᐃΔΔᐃⲆ: "img/day-skin211.png",
    Ⲇᐃⵠⵠⵠᐃᐃ: "img/night-skin211.png",
    ᐃⵠⵠΔⵠⲆⲆ: "img/day-skin212.png",
    ⵠᐃΔⲆⵠᐃΔ: "img/night-skin212.png",
    ⲆΔΔΔⲆΔⲆ: "img/day-skin213.png",
    ΔⵠᐃΔΔΔⵠ: "img/night-skin213.png",
    ᐃᐃᐃΔⲆᐃΔ: "img/day-skin214.png",
    ⵠⲆΔⲆᐃⲆⲆ: "img/night-skin214.png",
    ⵠΔΔⲆᐃⵠⲆ: "img/day-hand-skin0.png",
    ᐃⵠⵠⲆΔΔΔ: "img/night-hand-skin0.png",
    ΔⵠⲆⵠΔΔⲆ: "img/day-hand-skin1.png",
    ⲆⲆΔᐃⵠⵠⲆ: "img/night-hand-skin1.png",
    Ⲇᐃᐃᐃⵠᐃⵠ: "img/day-hand-skin2.png",
    ΔⲆᐃΔⲆⵠⲆ: "img/night-hand-skin2.png",
    ⲆΔⲆᐃⵠᐃⵠ: "img/day-hand-skin3.png",
    ΔⲆΔᐃⲆΔΔ: "img/night-hand-skin3.png",
    ⵠⵠΔⲆΔⲆⲆ: "img/day-hand-skin4.png",
    ⲆⲆᐃΔᐃΔᐃ: "img/night-hand-skin4.png",
    ⲆⵠⵠᐃⵠⵠΔ: "img/day-hand-skin5.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/night-hand-skin5.png",
    ΔᐃⲆⲆⲆⲆᐃ: "img/day-hand-skin6.png",
    ⵠΔΔᐃⲆⵠΔⵠᐃ: "img/night-hand-skin6.png",
    ΔᐃⵠⲆΔⲆᐃ: "img/day-hand-skin6.png",
    ⵠᐃΔⵠⵠᐃΔ: "img/night-hand-skin6.png",
    ⲆⲆΔΔⲆⵠΔ: "img/day-hand-skin8.png",
    ΔᐃⲆⲆⲆᐃᐃ: "img/night-hand-skin8.png",
    ⲆⲆΔΔⵠⵠⲆ: "img/day-hand-skin9.png",
    ᐃⵠᐃΔⵠᐃⲆ: "img/night-hand-skin9.png",
    ⲆᐃΔⵠⲆΔⵠ: "img/day-hand-skin10.png",
    ⵠⲆᐃΔᐃⲆᐃ: "img/night-hand-skin10.png",
    ᐃᐃᐃⵠⵠΔⲆ: "img/day-hand-skin11.png",
    ΔᐃⲆⲆᐃᐃⵠ: "img/night-hand-skin11.png",
    ᐃᐃⲆⵠΔᐃᐃ: "img/day-hand-skin12.png",
    ΔⵠⵠⲆⵠᐃᐃ: "img/night-hand-skin12.png",
    ᐃⵠⵠⵠⵠⵠΔ: "img/day-hand-skin13.png",
    ᐃᐃᐃᐃᐃⲆⲆ: "img/night-hand-skin13.png",
    ⲆΔᐃΔⵠΔⵠ: "img/day-hand-skin14.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-hand-skin14.png",
    ΔⵠⵠᐃⵠΔⲆ: "img/day-hand-skin15.png",
    ΔΔᐃᐃⵠⲆⵠ: "img/night-hand-skin15.png",
    ⲆⲆΔⵠᐃⲆⵠ: "img/day-hand-skin16.png",
    ⲆⲆⵠᐃⵠΔⵠ: "img/night-hand-skin16.png",
    ΔⲆΔⲆⵠᐃⲆ: "img/day-hand-skin17.png",
    ᐃᐃᐃⵠⵠᐃⲆ: "img/night-hand-skin17.png",
    ⵠⲆΔⵠᐃΔⲆ: "img/day-hand-skin18.png",
    ΔΔⵠⲆⲆΔᐃ: "img/night-hand-skin18.png",
    ᐃᐃᐃΔΔⵠⵠ: "img/day-hand-skin19.png",
    ⲆᐃⲆⲆᐃⵠⲆ: "img/night-hand-skin19.png",
    ⲆⲆᐃᐃᐃⲆⲆ: "img/day-hand-skin20.png",
    ⲆΔⲆⲆΔᐃⲆ: "img/night-hand-skin20.png",
    ⲆΔᐃⲆⲆⵠΔ: "img/day-hand-skin21.png",
    ΔΔⵠΔⲆᐃⵠ: "img/night-hand-skin21.png",
    ⵠⲆᐃⲆᐃⵠⵠ: "img/day-hand-skin22.png",
    ᐃⲆΔᐃⲆⵠΔ: "img/night-hand-skin22.png",
    ⵠᐃᐃⵠΔᐃᐃ: "img/day-hand-skin23.png",
    ΔⵠⵠΔᐃᐃⲆ: "img/night-hand-skin23.png",
    ⲆⲆᐃΔⵠⲆΔ: "img/day-hand-skin24.png",
    ᐃᐃΔΔⵠⲆⵠ: "img/night-hand-skin24.png",
    ⲆⵠᐃⲆⲆⵠΔ: "img/day-hand-skin25.png",
    ᐃⵠᐃΔᐃⵠᐃ: "img/night-hand-skin25.png",
    ᐃΔⵠΔⲆᐃⵠ: "img/day-hand-skin26.png",
    ⵠᐃΔΔᐃⲆΔ: "img/night-hand-skin26.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/day-hand-skin27.png",
    ⵠΔⵠⲆⲆᐃⵠ: "img/night-hand-skin27.png",
    ⲆⵠⲆᐃⲆⲆⲆ: "img/day-hand-skin28.png",
    ⵠⲆᐃᐃᐃᐃⲆ: "img/night-hand-skin28.png",
    ΔⲆΔⵠΔᐃⲆ: "img/day-hand-skin29.png",
    ⵠᐃᐃⵠᐃᐃⵠ: "img/night-hand-skin29.png",
    ⲆⲆᐃⲆᐃⲆⲆ: "img/day-hand-skin30.png",
    ᐃᐃΔΔᐃΔᐃ: "img/night-hand-skin30.png",
    ΔⵠᐃⲆΔᐃᐃ: "img/day-hand-skin31.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/night-hand-skin31.png",
    ᐃΔⵠΔΔᐃΔ: "img/day-hand-skin32.png",
    ᐃᐃⵠᐃⲆᐃⵠ: "img/night-hand-skin32.png",
    ⵠⲆΔᐃⵠΔΔ: "img/day-hand-skin33.png",
    ᐃΔΔΔᐃⵠⵠ: "img/night-hand-skin33.png",
    ⵠΔⵠⵠΔΔᐃ: "img/day-hand-skin34.png",
    ⵠΔⲆᐃᐃΔⲆ: "img/night-hand-skin34.png",
    ⵠᐃΔΔⵠⵠΔ: "img/day-hand-skin35.png",
    ⵠΔΔᐃΔⲆᐃ: "img/night-hand-skin35.png",
    ⲆⲆΔⲆΔⵠΔ: "img/day-hand-skin36.png",
    ⲆⲆⲆΔⲆᐃⲆ: "img/night-hand-skin36.png",
    ΔΔⵠᐃⲆⲆⵠ: "img/day-hand-skin37.png",
    ᐃᐃΔᐃᐃΔᐃ: "img/night-hand-skin37.png",
    ⲆᐃⲆΔⵠᐃΔ: "img/day-hand-skin38.png",
    ᐃᐃⵠⵠⵠΔⵠ: "img/night-hand-skin38.png",
    ⵠΔⵠᐃⵠⲆΔ: "img/day-hand-skin39.png",
    ΔⵠⲆᐃⲆⲆᐃ: "img/night-hand-skin39.png",
    ⲆⲆⲆᐃⵠⲆΔ: "img/day-hand-skin40.png",
    ⲆΔᐃᐃΔΔΔ: "img/night-hand-skin40.png",
    ⲆⲆⲆᐃⵠⵠⲆ: "img/day-hand-skin41.png",
    ΔᐃᐃᐃΔⵠΔ: "img/night-hand-skin41.png",
    ⵠⵠΔᐃΔΔⲆ: "img/day-hand-skin42.png",
    ΔⵠⲆΔΔᐃΔ: "img/night-hand-skin42.png",
    ⲆⵠⲆΔⵠⲆⵠ: "img/day-hand-skin43.png",
    ᐃⲆⲆᐃΔⵠⲆ: "img/night-hand-skin43.png",
    ᐃⲆⲆΔⵠΔᐃ: "img/day-hand-skin16.png",
    ΔᐃⲆᐃⲆΔⲆ: "img/night-hand-skin16.png",
    ΔᐃᐃⲆΔⵠⵠ: "img/day-hand-skin45.png",
    ΔΔᐃΔⵠⲆΔ: "img/night-hand-skin45.png",
    ᐃⵠᐃΔⵠΔᐃ: "img/day-hand-skin46.png",
    ⵠΔⲆᐃᐃⲆΔ: "img/night-hand-skin46.png",
    ⵠᐃΔⵠⵠⲆⲆ: "img/day-hand-skin47.png",
    ᐃⵠᐃᐃᐃⲆⲆ: "img/night-hand-skin47.png",
    ΔᐃⵠⲆⵠΔⲆ: "img/day-hand-skin48.png",
    ⵠΔⵠⵠⲆᐃΔ: "img/night-hand-skin48.png",
    ᐃᐃⵠⵠⵠᐃᐃ: "img/day-hand-skin49.png",
    ΔⵠΔⵠⵠⲆΔ: "img/night-hand-skin49.png",
    ⲆⲆᐃᐃᐃΔⵠ: "img/day-hand-skin49.png",
    ΔΔⵠᐃΔᐃᐃ: "img/night-hand-skin49.png",
    ΔΔᐃⵠⵠⲆⲆ: "img/day-hand-skin51.png",
    Ⲇᐃᐃᐃᐃᐃᐃ: "img/night-hand-skin51.png",
    ⲆᐃΔⵠⵠᐃⵠ: "img/day-hand-skin52.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/night-hand-skin52.png",
    ΔⲆᐃΔⲆᐃⵠ: "img/day-hand-skin53.png",
    ΔΔⵠΔⵠᐃⵠ: "img/night-hand-skin53.png",
    ᐃΔⵠⵠⲆⵠᐃ: "img/day-hand-skin53.png",
    ΔᐃⲆᐃⲆΔᐃ: "img/night-hand-skin53.png",
    ⵠⲆⲆᐃΔΔΔ: "img/day-hand-skin55.png",
    ᐃⲆⲆⵠⵠᐃΔ: "img/night-hand-skin55.png",
    ΔΔΔΔᐃⵠⲆ: "img/day-hand-skin56.png",
    ΔⵠᐃⲆⵠᐃΔ: "img/night-hand-skin56.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/day-hand-skin57.png",
    ⵠᐃᐃⲆⵠΔΔ: "img/night-hand-skin57.png",
    ⵠᐃᐃⵠΔⲆⲆ: "img/day-hand-skin58.png",
    ⵠΔΔᐃⲆΔΔ: "img/night-hand-skin58.png",
    ΔΔⵠᐃⵠⲆΔ: "img/day-hand-skin59.png",
    ΔΔᐃⲆⵠⵠΔ: "img/night-hand-skin59.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/day-hand-skin61.png",
    ᐃⵠⲆΔⵠⲆⵠ: "img/night-hand-skin61.png",
    ΔᐃⵠΔΔⵠᐃ: "img/day-hand-skin61.png",
    ⲆᐃⲆⵠⵠⲆΔ: "img/night-hand-skin61.png",
    ⲆᐃⲆⲆΔⲆⲆ: "img/day-hand-skin62.png",
    ⲆΔᐃⲆⲆΔⵠ: "img/night-hand-skin62.png",
    ⲆΔΔⵠⵠΔⲆ: "img/day-hand-skin63.png",
    ᐃⵠⲆΔⲆⲆᐃ: "img/night-hand-skin63.png",
    ΔⵠᐃᐃΔᐃᐃ: "img/day-hand-skin64.png",
    ⲆΔᐃⵠⵠΔⵠ: "img/night-hand-skin64.png",
    ᐃᐃΔΔⵠΔᐃ: "img/day-hand-skin65.png",
    ⵠⵠⲆᐃⲆⵠΔ: "img/night-hand-skin65.png",
    ⲆᐃⲆⲆⲆⵠΔ: "img/day-hand-skin66.png",
    ⲆΔⵠᐃᐃⵠⲆ: "img/night-hand-skin66.png",
    ⵠᐃᐃⵠⲆⲆΔ: "img/day-hand-skin67.png",
    ⲆΔⵠᐃⲆⲆΔ: "img/night-hand-skin67.png",
    ⵠΔΔⲆⵠⵠᐃ: "img/day-hand-skin68.png",
    ᐃΔⲆΔΔΔΔ: "img/night-hand-skin68.png",
    ⲆⲆΔᐃᐃⵠⲆ: "img/day-hand-skin69.png",
    ᐃⲆⲆⲆⲆΔⲆ: "img/night-hand-skin69.png",
    ⲆⲆΔᐃᐃᐃⵠ: "img/day-hand-skin70.png",
    ΔᐃᐃΔΔΔⵠ: "img/night-hand-skin70.png",
    ⵠⵠⲆΔⵠⲆΔ: "img/day-hand-skin71.png",
    ⵠᐃⲆⵠΔΔΔ: "img/night-hand-skin71.png",
    ᐃΔΔⵠⵠᐃΔ: "img/day-hand-skin72.png",
    Δᐃⵠᐃᐃᐃⵠ: "img/night-hand-skin72.png",
    ᐃΔΔⵠᐃᐃᐃ: "img/day-hand-skin73.png",
    ΔᐃⵠᐃᐃΔⵠ: "img/night-hand-skin73.png",
    ⵠΔᐃᐃⲆΔΔ: "img/day-hand-skin74.png",
    ΔⵠΔᐃⵠΔⵠ: "img/night-hand-skin74.png",
    ᐃⲆΔⲆⵠⵠᐃ: "img/day-hand-skin75.png",
    ᐃⵠΔᐃⵠΔⲆ: "img/night-hand-skin75.png",
    ⲆᐃⲆᐃΔΔⵠ: "img/day-hand-skin76.png",
    ⲆⵠⲆⲆᐃΔⲆ: "img/night-hand-skin76.png",
    ⵠΔᐃⲆⵠᐃⲆ: "img/day-hand-skin77.png",
    ᐃᐃᐃⲆᐃΔΔ: "img/night-hand-skin77.png",
    ⲆΔⵠᐃⵠᐃᐃ: "img/day-hand-skin78.png",
    ΔⵠⲆⵠᐃΔΔ: "img/night-hand-skin78.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/day-hand-skin79.png",
    ᐃᐃⲆΔᐃΔΔ: "img/night-hand-skin79.png",
    ⵠⲆⵠⲆⲆⲆᐃ: "img/day-hand-skin80.png",
    ᐃᐃΔⵠΔᐃⵠ: "img/night-hand-skin80.png",
    ΔΔᐃᐃⲆΔⲆ: "img/day-hand-skin81.png",
    ⲆⵠⲆᐃΔⵠⵠ: "img/night-hand-skin81.png",
    ᐃⵠⵠΔΔΔΔ: "img/day-hand-skin82.png",
    ᐃⵠᐃᐃⲆⲆⵠ: "img/night-hand-skin82.png",
    ᐃⵠΔⵠⲆᐃΔ: "img/day-hand-skin83.png",
    ⲆⵠⲆⲆⵠⲆⵠ: "img/night-hand-skin83.png",
    ᐃⲆⲆΔΔΔᐃ: "img/day-hand-skin84.png",
    ⲆᐃⵠᐃᐃⲆᐃ: "img/night-hand-skin84.png",
    ⲆᐃΔⵠⲆᐃᐃ: "img/day-hand-skin85.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/night-hand-skin85.png",
    ⲆⵠᐃᐃⲆⵠⵠ: "img/day-hand-skin86.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/night-hand-skin86.png",
    ⵠⵠⵠⵠᐃᐃⲆ: "img/day-hand-skin87.png",
    ⵠⲆᐃⵠΔᐃΔ: "img/night-hand-skin87.png",
    ⵠΔᐃⲆΔΔⲆ: "img/day-hand-skin88.png",
    ⵠΔΔⲆⵠᐃΔ: "img/night-hand-skin88.png",
    ⵠΔΔΔΔⲆᐃ: "img/day-hand-skin89.png",
    ⲆⵠᐃΔⵠⵠⵠ: "img/night-hand-skin89.png",
    ⲆⲆᐃⵠⵠⲆᐃ: "img/day-hand-skin90.png",
    ΔᐃⵠᐃⲆⵠᐃ: "img/night-hand-skin90.png",
    ΔⵠⵠⲆⵠΔᐃ: "img/day-hand-skin91.png",
    ᐃᐃᐃᐃⵠⵠΔ: "img/night-hand-skin91.png",
    ⲆᐃᐃⵠΔᐃΔ: "img/day-hand-skin92.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/night-hand-skin92.png",
    ⲆᐃΔΔᐃᐃᐃ: "img/day-hand-skin93.png",
    ΔᐃⲆⵠᐃⵠⲆ: "img/night-hand-skin93.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/day-hand-skin94.png",
    ⲆⲆᐃΔⲆΔⵠ: "img/night-hand-skin94.png",
    ⵠⲆᐃᐃΔΔᐃ: "img/day-hand-skin95.png",
    ᐃⲆᐃⵠⵠⵠⲆ: "img/night-hand-skin95.png",
    ΔᐃᐃΔⲆᐃΔ: "img/day-hand-skin96.png",
    ΔⲆⲆⲆⲆⲆⵠ: "img/night-hand-skin96.png",
    ⵠⵠⵠᐃⲆᐃᐃ: "img/day-hand-skin97.png",
    ⲆᐃⲆᐃⵠΔᐃ: "img/night-hand-skin97.png",
    ᐃⵠᐃΔⵠⵠΔ: "img/day-hand-skin98.png",
    ΔᐃⲆⲆΔΔⵠ: "img/night-hand-skin98.png",
    ⲆⲆΔⲆᐃⲆᐃ: "img/day-hand-skin99.png",
    ᐃΔΔᐃΔⲆⲆ: "img/night-hand-skin99.png",
    ᐃⲆᐃᐃⵠΔⵠ: "img/day-hand-skin100.png",
    ᐃⲆΔⲆⲆⵠⵠ: "img/night-hand-skin100.png",
    ⵠⲆΔᐃⲆΔᐃ: "img/day-hand-skin101.png",
    ΔΔΔⲆΔᐃᐃ: "img/night-hand-skin101.png",
    ⲆⲆⵠⲆᐃⵠᐃ: "img/day-hand-skin102.png",
    ⲆᐃΔⵠⲆᐃⵠ: "img/night-hand-skin102.png",
    ᐃΔⲆΔᐃⲆⵠ: "img/day-hand-skin103.png",
    ΔⵠΔⵠⵠⵠᐃ: "img/night-hand-skin103.png",
    ⲆⲆᐃᐃᐃᐃᐃ: "img/day-hand-skin104.png",
    ΔᐃΔᐃᐃⲆⵠ: "img/night-hand-skin104.png",
    ΔⲆⲆⲆⵠⲆⵠ: "img/day-hand-skin105.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/night-hand-skin105.png",
    ᐃⵠⵠᐃⲆΔⵠ: "img/day-hand-skin106.png",
    ΔᐃⲆⲆⲆΔⵠ: "img/night-hand-skin106.png",
    ᐃΔⲆᐃΔⵠⲆ: "img/day-hand-skin107.png",
    ᐃᐃᐃⲆⲆⵠⵠ: "img/night-hand-skin107.png",
    ᐃᐃⵠᐃⵠᐃΔ: "img/day-hand-skin108.png",
    ⲆΔᐃⵠⵠⵠⲆ: "img/night-hand-skin108.png",
    ᐃⵠⵠⵠΔᐃⲆ: "img/day-hand-skin109.png",
    ⵠΔΔᐃᐃⵠⵠ: "img/night-hand-skin109.png",
    ⲆᐃⲆⲆⲆΔⲆ: "img/day-hand-skin110.png",
    ⲆᐃᐃⲆⲆⵠᐃ: "img/night-hand-skin110.png",
    ⵠΔⲆⵠΔΔⵠ: "img/day-hand-skin111.png",
    ᐃΔᐃⵠⲆᐃΔ: "img/night-hand-skin111.png",
    ᐃⵠⲆᐃᐃᐃⲆ: "img/day-hand-skin112.png",
    ⵠᐃⵠⲆⲆΔⲆ: "img/night-hand-skin112.png",
    ᐃⲆⲆΔⲆΔⲆΔⵠ: "img/day-hand-skin113.png",
    ⲆⵠⲆⵠΔᐃᐃⲆΔ: "img/night-hand-skin113.png",
    ᐃᐃΔⵠᐃΔⲆ: "img/day-hand-skin114.png",
    ΔⲆⲆΔᐃⲆⵠ: "img/night-hand-skin114.png",
    ΔⲆⵠΔⲆⲆⵠ: "img/day-hand-skin115.png",
    ᐃᐃΔⵠΔΔⵠ: "img/night-hand-skin115.png",
    ΔⵠⲆΔⲆᐃΔ: "img/day-hand-skin116.png",
    ᐃΔⵠᐃⲆᐃⲆ: "img/night-hand-skin116.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/day-hand-skin117.png",
    ⵠᐃΔᐃⵠⲆΔ: "img/night-hand-skin117.png",
    Ⲇᐃᐃⵠᐃⵠᐃ: "img/day-hand-skin118.png",
    ΔⵠᐃΔⵠⵠⲆ: "img/night-hand-skin118.png",
    ⵠⵠΔΔΔⲆⵠ: "img/day-hand-skin119.png",
    ⵠⵠⲆᐃⵠⲆᐃ: "img/night-hand-skin119.png",
    ⲆⵠᐃⵠΔⲆⵠ: "img/day-hand-skin120.png",
    ΔⵠᐃⲆᐃᐃᐃ: "img/night-hand-skin120.png",
    ⲆΔⵠⵠⵠⲆⵠ: "img/day-hand-skin122.png",
    ΔⵠΔΔᐃΔⵠ: "img/night-hand-skin122.png",
    ᐃΔⵠⲆᐃⵠᐃ: "img/day-hand-skin122.png",
    ⲆΔΔⲆⲆΔⵠ: "img/night-hand-skin122.png",
    ⲆᐃΔⲆⵠⵠΔ: "img/day-hand-skin122.png",
    ⲆΔᐃΔⵠⵠΔ: "img/night-hand-skin122.png",
    ᐃⵠΔⵠᐃⵠⲆ: "img/day-hand-skin124.png",
    ᐃⲆᐃᐃᐃᐃΔ: "img/night-hand-skin124.png",
    ᐃⲆⵠⲆⵠⵠⲆ: "img/day-hand-skin125.png",
    ⲆᐃⵠⵠⵠᐃⲆ: "img/night-hand-skin125.png",
    ⵠᐃⲆᐃⲆⵠⲆ: "img/day-hand-skin126.png",
    ⲆᐃⲆΔΔⲆⲆ: "img/night-hand-skin126.png",
    ᐃΔⵠⵠΔᐃⵠ: "img/day-hand-skin127.png",
    ⲆⲆᐃⵠᐃΔⲆ: "img/night-hand-skin127.png",
    ⵠΔⵠᐃⵠⵠᐃ: "img/day-hand-skin128.png",
    ᐃⲆᐃΔᐃⲆⲆ: "img/night-hand-skin128.png",
    ⵠⲆᐃᐃᐃᐃⵠ: "img/day-hand-skin129.png",
    ⲆⲆⲆᐃΔᐃⲆ: "img/night-hand-skin129.png",
    ΔⲆⲆΔᐃΔᐃ: "img/day-hand-skin130.png",
    ⵠⲆⵠⲆⲆᐃⵠ: "img/night-hand-skin130.png",
    ⵠⲆΔⵠⲆⲆⲆ: "img/day-hand-skin131.png",
    ᐃⵠⵠᐃᐃⲆΔ: "img/night-hand-skin131.png",
    ⲆⲆⵠᐃᐃⵠᐃ: "img/day-hand-skin130.png",
    ᐃⲆᐃⵠΔⲆΔ: "img/night-hand-skin130.png",
    ⲆᐃΔᐃᐃⵠⲆ: "img/day-hand-skin133.png",
    ᐃⲆᐃΔⲆΔᐃ: "img/night-hand-skin133.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/day-hand-skin134.png",
    ΔⲆⵠΔⲆΔⲆ: "img/night-hand-skin134.png",
    ⲆΔⵠⲆⵠⲆᐃ: "img/day-hand-skin135.png",
    ΔⲆⲆⵠΔΔⵠ: "img/night-hand-skin135.png",
    ΔΔⲆⲆⵠᐃⵠ: "img/day-hand-skin136.png",
    ᐃⲆΔᐃᐃᐃⲆ: "img/night-hand-skin136.png",
    ⲆⵠΔⲆᐃⵠⲆ: "img/day-hand-skin137.png",
    ⵠᐃⵠΔⵠⵠⲆ: "img/night-hand-skin137.png",
    ΔⵠΔⲆΔⲆⲆ: "img/day-hand-skin138.png",
    ⲆᐃᐃᐃⲆᐃᐃ: "img/night-hand-skin138.png",
    ⵠᐃⲆⲆΔΔᐃ: "img/day-hand-skin139.png",
    ΔΔᐃⲆᐃᐃΔ: "img/night-hand-skin139.png",
    ΔᐃᐃΔᐃΔᐃ: "img/day-hand-skin140.png",
    ⲆⵠⲆⵠⲆⵠᐃ: "img/night-hand-skin140.png",
    ᐃΔᐃⵠᐃⲆⵠ: "img/day-hand-skin141.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/night-hand-skin141.png",
    ΔΔⵠΔᐃⵠⵠ: "img/day-hand-skin142.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/night-hand-skin142.png",
    ⵠⲆⵠⵠⵠⲆⵠ: "img/day-hand-skin143.png",
    ᐃΔⲆᐃᐃⲆⲆ: "img/night-hand-skin143.png",
    ΔᐃΔᐃⵠΔΔ: "img/day-hand-skin144.png",
    ⲆᐃΔᐃΔⵠⲆ: "img/night-hand-skin144.png",
    ⲆᐃΔᐃⵠⲆΔ: "img/day-hand-skin145.png",
    ⵠⵠⵠⲆⵠΔⲆ: "img/night-hand-skin145.png",
    ΔⲆⲆΔΔΔΔ: "img/day-hand-skin146.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/night-hand-skin146.png",
    ᐃᐃⲆᐃⵠΔⲆ: "img/day-hand-skin147.png",
    ⵠᐃⲆΔΔⲆⲆ: "img/night-hand-skin147.png",
    ᐃΔⲆⵠⵠᐃⲆ: "img/day-hand-skin148.png",
    ΔΔᐃⵠΔⲆⵠ: "img/night-hand-skin148.png",
    ᐃᐃΔⵠⵠⲆᐃ: "img/day-hand-skin149.png",
    ᐃΔⲆⲆᐃΔᐃ: "img/night-hand-skin149.png",
    ⵠΔᐃΔⵠⲆⵠ: "img/day-hand-skin150.png",
    ⵠᐃⵠⲆΔⲆⵠ: "img/night-hand-skin150.png",
    Δⵠᐃᐃᐃᐃᐃ: "img/day-hand-skin151.png",
    ⵠᐃⲆⵠΔⵠⵠ: "img/night-hand-skin151.png",
    ⲆΔΔΔⵠⵠⲆ: "img/day-hand-skin152.png",
    ⲆΔⵠⵠⲆⲆⲆ: "img/night-hand-skin152.png",
    ⵠΔⲆΔⵠᐃⵠ: "img/day-hand-skin153.png",
    ᐃⲆⲆᐃΔΔᐃ: "img/night-hand-skin153.png",
    ᐃⲆⲆⲆΔᐃⲆ: "img/day-hand-skin154.png",
    ⲆⵠᐃⵠⲆᐃⲆ: "img/night-hand-skin154.png",
    ⵠΔΔⲆᐃⲆᐃ: "img/day-hand-skin155.png",
    ⲆⲆᐃⲆΔᐃⲆ: "img/night-hand-skin155.png",
    ᐃⵠⵠⵠΔⵠⲆ: "img/day-hand-skin156.png",
    ⲆᐃⲆⵠⲆⵠᐃ: "img/night-hand-skin156.png",
    ⲆᐃᐃᐃᐃⲆΔ: "img/day-hand-skin157.png",
    ᐃᐃⵠᐃΔᐃΔ: "img/night-hand-skin157.png",
    ᐃⲆⲆⲆΔᐃΔ: "img/day-hand-skin158.png",
    ⵠⵠⵠⵠᐃΔⲆ: "img/night-hand-skin158.png",
    ΔⵠᐃΔᐃⵠᐃ: "img/day-hand-skin159.png",
    ᐃᐃᐃᐃⵠⵠⵠ: "img/night-hand-skin159.png",
    ΔᐃⵠⲆⲆⲆΔ: "img/day-hand-skin160.png",
    ΔⲆΔⵠᐃΔⲆ: "img/night-hand-skin160.png",
    ᐃⲆᐃⵠΔⲆⲆ: "img/day-hand-skin161.png",
    ΔⵠᐃᐃⵠΔⵠ: "img/night-hand-skin161.png",
    ᐃΔⲆⲆⲆᐃⵠ: "img/day-hand-skin162.png",
    ΔΔΔᐃⵠᐃⲆ: "img/night-hand-skin162.png",
    ᐃⵠⵠⵠᐃΔⵠ: "img/day-hand-skin163.png",
    ⲆΔᐃΔⵠⲆⵠ: "img/night-hand-skin163.png",
    ⵠⲆᐃΔⵠⲆⲆ: "img/day-hand-skin164.png",
    ᐃᐃⵠᐃⵠᐃⵠ: "img/night-hand-skin164.png",
    ᐃΔᐃᐃⵠᐃⵠ: "img/day-hand-skin165.png",
    ΔᐃⵠⲆΔΔΔ: "img/night-hand-skin165.png",
    ΔⵠⵠᐃⲆⵠᐃ: "img/day-hand-skin166.png",
    ᐃΔⲆⲆⵠⵠⵠ: "img/night-hand-skin166.png",
    ⲆᐃᐃⲆⲆⲆᐃ: "img/day-hand-skin167.png",
    ΔΔⲆⲆⲆΔⵠ: "img/night-hand-skin167.png",
    ⵠᐃᐃᐃᐃΔⲆ: "img/day-hand-skin168.png",
    ⵠᐃⲆΔΔⵠᐃ: "img/night-hand-skin168.png",
    ⲆⵠⵠⵠⵠᐃΔ: "img/day-hand-skin169.png",
    ⵠΔⲆΔⲆᐃᐃ: "img/night-hand-skin169.png",
    ᐃΔᐃᐃⵠⲆⲆ: "img/day-hand-skin170.png",
    ΔⲆᐃⲆΔᐃⲆ: "img/night-hand-skin170.png",
    ᐃΔⵠⲆⲆⲆΔ: "img/day-hand-skin171.png",
    ⵠᐃᐃⲆⵠΔᐃ: "img/night-hand-skin171.png",
    ᐃΔⲆᐃΔⲆᐃ: "img/day-hand-skin172.png",
    ⲆΔΔⵠΔΔⲆ: "img/night-hand-skin172.png",
    ⵠᐃⲆⲆⲆⲆᐃ: "img/day-hand-skin173.png",
    ΔⲆᐃΔᐃᐃⲆ: "img/night-hand-skin173.png",
    ᐃΔᐃᐃΔᐃⵠ: "img/day-hand-skin174.png",
    ᐃΔⲆᐃΔᐃⲆ: "img/night-hand-skin174.png",
    ⲆᐃⲆᐃⵠᐃⵠ: "img/day-hand-skin175.png",
    ⲆᐃⲆⲆⵠⲆⲆ: "img/night-hand-skin175.png",
    ⲆᐃⲆⲆⲆⵠⵠ: "img/day-hand-skin176.png",
    ᐃⲆΔΔⵠⵠⵠ: "img/night-hand-skin176.png",
    ⵠᐃⵠᐃⵠᐃⲆ: "img/day-hand-skin177.png",
    ΔⵠΔⵠᐃⲆⲆ: "img/night-hand-skin177.png",
    ⲆᐃⵠΔⲆⵠⲆ: "img/day-hand-skin178.png",
    ᐃᐃΔᐃᐃΔⵠ: "img/night-hand-skin178.png",
    ⲆᐃΔᐃⲆΔⵠ: "img/day-hand-skin179.png",
    ⲆⲆⵠᐃᐃⲆⲆ: "img/night-hand-skin179.png",
    ΔⵠⵠⵠᐃⲆΔ: "img/day-hand-skin180.png",
    ⵠᐃⵠⵠᐃᐃᐃ: "img/night-hand-skin180.png",
    ⲆⵠᐃΔⵠᐃᐃ: "img/day-hand-skin181.png",
    ΔΔⵠΔⲆⲆⲆ: "img/night-hand-skin181.png",
    ⲆᐃΔⵠΔᐃΔ: "img/day-hand-skin182.png",
    ⵠᐃⲆⲆᐃᐃⲆ: "img/night-hand-skin182.png",
    ᐃⲆΔⲆᐃΔᐃ: "img/day-hand-skin183.png",
    ᐃᐃⲆΔΔⵠΔ: "img/night-hand-skin183.png",
    ΔᐃᐃⵠⲆΔΔ: "img/day-hand-skin184.png",
    ⵠⲆΔⵠΔΔΔ: "img/night-hand-skin184.png",
    ᐃᐃᐃΔΔᐃⵠ: "img/day-hand-skin185.png",
    ⵠⲆᐃᐃΔⲆⲆ: "img/night-hand-skin185.png",
    ⲆⲆΔᐃᐃᐃΔ: "img/day-hand-skin186.png",
    ΔⲆⲆⲆⵠΔⲆ: "img/night-hand-skin186.png",
    ᐃⵠⵠⵠΔⲆⲆ: "img/day-hand-skin187.png",
    ⲆⵠᐃⲆᐃⵠⵠ: "img/night-hand-skin187.png",
    ⲆΔᐃᐃⲆΔⲆ: "img/day-hand-skin188.png",
    ⲆΔᐃⵠⵠᐃᐃ: "img/night-hand-skin188.png",
    ΔⲆΔᐃⲆⲆΔ: "img/day-hand-skin189.png",
    ΔⲆΔⵠⲆⵠⲆ: "img/night-hand-skin189.png",
    ΔⵠⵠΔⵠⵠⲆ: "img/day-hand-skin190.png",
    ΔΔⵠⵠᐃᐃⲆ: "img/night-hand-skin190.png",
    ΔΔⲆΔΔΔⲆ: "img/day-hand-skin191.png",
    ⲆΔⲆΔΔⲆΔ: "img/night-hand-skin191.png",
    ⵠΔⲆΔᐃΔⵠ: "img/day-hand-skin192.png",
    ⵠΔᐃⵠᐃⵠⵠ: "img/night-hand-skin192.png",
    ⲆΔᐃΔΔᐃᐃ: "img/day-hand-skin193.png",
    ΔⲆᐃᐃⵠⵠⵠ: "img/night-hand-skin193.png",
    ⵠⲆΔⲆⲆⲆᐃ: "img/day-hand-skin194.png",
    ᐃⲆᐃᐃⲆⲆᐃ: "img/night-hand-skin194.png",
    ᐃᐃᐃΔᐃᐃⲆ: "img/day-hand-skin195.png",
    ᐃⲆΔΔᐃᐃΔ: "img/night-hand-skin195.png",
    ⲆᐃΔᐃᐃⵠᐃ: "img/day-hand-skin196.png",
    ΔΔⲆⲆᐃⵠΔ: "img/night-hand-skin196.png",
    ⵠᐃⵠΔᐃᐃⵠ: "img/day-hand-skin197.png",
    ᐃΔⵠΔᐃⲆᐃ: "img/night-hand-skin197.png",
    ΔⵠⲆⲆᐃⲆⵠ: "img/day-hand-skin198.png",
    ΔΔᐃΔⵠⵠΔ: "img/night-hand-skin198.png",
    ⲆⵠΔᐃΔⲆⲆ: "img/day-hand-skin199.png",
    ⲆⲆΔⲆⲆⲆΔ: "img/night-hand-skin199.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/day-hand-skin200.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/night-hand-skin200.png",
    ⲆⵠⵠⲆⵠᐃᐃ: "img/day-hand-skin201.png",
    ΔΔΔΔΔⲆᐃ: "img/night-hand-skin201.png",
    ΔⲆΔⵠⲆᐃⵠ: "img/day-hand-skin202.png",
    ⵠⵠⲆᐃⵠᐃⲆ: "img/night-hand-skin202.png",
    ⵠΔΔⵠΔⲆⲆ: "img/day-hand-skin203.png",
    ΔⲆᐃᐃⵠⲆᐃ: "img/night-hand-skin203.png",
    ᐃⵠΔⵠⲆᐃᐃ: "img/day-hand-skin204.png",
    ᐃⲆⲆᐃΔΔⵠ: "img/night-hand-skin204.png",
    ⲆⲆⵠⲆΔᐃᐃ: "img/day-hand-skin205.png",
    ΔⲆⲆⲆᐃⲆⵠ: "img/night-hand-skin205.png",
    ΔᐃⲆⵠⵠⵠⲆ: "img/day-hand-skin206.png",
    ⲆⵠᐃΔⲆΔⵠ: "img/night-hand-skin206.png",
    ⲆⲆⲆΔΔΔΔ: "img/day-hand-skin207.png",
    ᐃⲆᐃⲆⲆⵠⵠ: "img/night-hand-skin207.png",
    ⲆⵠΔⵠⲆⲆⲆ: "img/day-hand-skin208.png",
    ⲆᐃⲆⵠᐃⲆⲆ: "img/night-hand-skin208.png",
    ΔΔⵠⲆⲆⲆΔ: "img/day-hand-skin209.png",
    ⵠⲆⲆⲆΔᐃᐃ: "img/night-hand-skin209.png",
    ⲆΔᐃΔΔΔⵠ: "img/day-hand-skin210.png",
    ᐃⵠⵠΔⵠᐃΔ: "img/night-hand-skin210.png",
    ᐃⵠⵠⵠᐃⵠᐃ: "img/day-hand-skin211.png",
    ⲆΔΔⲆⲆᐃΔ: "img/night-hand-skin211.png",
    ᐃᐃⵠⵠᐃΔⵠ: "img/day-hand-skin212.png",
    ⲆΔⵠᐃⵠⲆⲆ: "img/night-hand-skin212.png",
    ⵠⲆⵠΔⲆᐃⵠ: "img/day-hand-skin213.png",
    ᐃΔⲆΔᐃΔⵠ: "img/night-hand-skin213.png",
    ⲆΔᐃΔᐃⵠᐃ: "img/day-hand-skin214.png",
    ᐃⲆⲆⵠⲆⲆⵠ: "img/night-hand-skin214.png",
    ΔΔᐃᐃⵠⲆⲆ: "img/day-bag-star0.png",
    ⲆⵠᐃΔΔᐃⲆ: "img/night-bag-star0.png",
    ΔΔᐃΔⲆⲆᐃ: "img/day-bag0.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/night-bag0.png",
    ⲆᐃⵠⲆⵠᐃⲆ: "img/day-bag1.png",
    ᐃⲆⵠⲆΔⵠⲆ: "img/night-bag1.png",
    ⲆᐃΔΔⵠᐃᐃ: "img/day-bag2.png",
    ΔⵠⲆⲆⵠΔⲆ: "img/night-bag2.png",
    ⵠΔᐃⲆΔΔⵠ: "img/day-bag3.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/night-bag3.png",
    ᐃΔⲆⲆᐃᐃᐃ: "img/day-bag4.png",
    ⲆΔⲆⵠⲆΔⵠ: "img/night-bag4.png",
    ΔⲆΔⲆᐃⵠⲆ: "img/day-bag5.png",
    ᐃΔΔᐃᐃᐃⵠ: "img/night-bag5.png",
    ⲆᐃᐃΔⲆⲆⵠ: "img/day-bag6.png",
    ᐃᐃᐃΔᐃⲆΔ: "img/night-bag6.png",
    ΔΔΔⵠᐃᐃⵠ: "img/day-bag7.png",
    ⵠⵠᐃⲆⲆΔⵠ: "img/night-bag7.png",
    ⲆⲆΔⵠΔⲆⵠ: "img/day-bag8.png",
    ⲆΔᐃⲆΔᐃᐃ: "img/night-bag8.png",
    ΔⵠⵠⵠΔᐃⵠ: "img/day-bag9.png",
    ⲆⵠΔΔⲆᐃΔ: "img/night-bag9.png",
    ⲆᐃⵠΔⲆⲆⲆ: "img/day-bag10.png",
    ᐃⲆⵠΔⵠⵠΔ: "img/night-bag10.png",
    ⲆⵠᐃΔΔΔΔ: "img/day-bag11.png",
    ᐃⵠⵠΔⵠΔΔ: "img/night-bag11.png",
    ᐃΔᐃΔⲆᐃⲆ: "img/day-bag13.png",
    ⲆⵠⵠⲆⵠⲆⲆ: "img/night-bag13.png",
    ΔⵠⲆᐃΔⵠΔ: "img/day-bag14.png",
    ⵠᐃΔⵠⲆⲆⲆ: "img/night-bag14.png",
    ⲆᐃⲆᐃⵠⲆΔ: "img/day-bag16.png",
    ⵠⵠⲆᐃΔⵠⵠ: "img/night-bag16.png",
    ᐃΔⲆⲆᐃᐃⲆ: "img/day-bag17.png",
    ᐃⲆᐃⲆⲆⵠΔ: "img/night-bag17.png",
    ⵠⲆⲆᐃⲆⲆⵠ: "img/day-bag18.png",
    ΔⵠᐃΔⵠⲆᐃ: "img/night-bag18.png",
    ⲆⵠΔᐃΔΔΔ: "img/day-bag19.png",
    ΔΔⲆΔᐃᐃᐃ: "img/night-bag19.png",
    ΔⵠΔⲆᐃΔᐃ: "img/day-bag20.png",
    ⵠⵠⲆΔⲆᐃⵠ: "img/night-bag20.png",
    ⵠΔⲆⵠⲆᐃⵠ: "img/day-bag21.png",
    ΔΔΔⵠⵠⵠΔ: "img/night-bag21.png",
    ⵠⵠᐃⲆⵠⲆⵠ: "img/day-bag22.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/night-bag22.png",
    ᐃⵠⲆΔⲆⵠᐃ: "img/day-bag23.png",
    ᐃΔⲆΔⲆᐃΔ: "img/night-bag23.png",
    ΔⵠⵠⵠᐃᐃⲆ: "img/day-bag24.png",
    ΔⲆⵠᐃΔⵠⵠ: "img/night-bag24.png",
    ⵠΔᐃⵠⵠᐃᐃ: "img/day-bag25.png",
    ᐃⵠᐃΔⵠⵠⵠ: "img/night-bag25.png",
    ⲆⵠΔⵠⵠⵠⲆ: "img/day-bag26.png",
    ⵠΔⲆⵠⲆΔΔ: "img/night-bag26.png",
    ᐃᐃᐃⵠᐃΔᐃ: "img/day-bag27.png",
    ⵠⵠⲆᐃᐃⵠᐃ: "img/night-bag27.png",
    ⵠΔⵠⲆⵠᐃⵠ: "img/day-bag28.png",
    ⵠⲆⵠᐃⵠΔⲆ: "img/night-bag28.png",
    ΔΔᐃΔⵠⵠⲆ: "img/day-bag29.png",
    ΔΔⲆⲆⵠΔᐃ: "img/night-bag29.png",
    ᐃᐃΔΔⲆⲆΔ: "img/day-bag30.png",
    ΔΔᐃΔΔᐃⵠ: "img/night-bag30.png",
    ⵠΔᐃΔΔᐃⲆ: "img/day-bag31.png",
    ⵠᐃᐃⵠΔΔⵠ: "img/night-bag31.png",
    ΔⵠᐃⵠΔᐃΔ: "img/day-bag32.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/night-bag32.png",
    ᐃⲆᐃⵠⵠⵠΔ: "img/day-bag33.png",
    ⵠᐃⵠⲆᐃⲆⵠ: "img/night-bag33.png",
    ⲆⵠⲆΔΔᐃᐃ: "img/day-bag34.png",
    ᐃⲆⵠΔⲆⲆᐃ: "img/night-bag34.png",
    ⵠᐃⲆᐃⵠⲆⲆ: "img/day-bag35.png",
    ⵠⵠⲆⵠΔᐃⲆ: "img/night-bag35.png",
    ⲆᐃᐃΔⵠⵠⲆ: "img/day-bag36.png",
    ᐃⵠⵠᐃΔⵠΔ: "img/night-bag36.png",
    ΔⲆᐃⲆΔᐃᐃ: "img/day-bag37.png",
    ΔⲆⲆⵠΔᐃΔ: "img/night-bag37.png",
    ᐃⵠⲆⵠⵠᐃᐃ: "img/day-bag38.png",
    ᐃᐃⲆⲆΔΔᐃ: "img/night-bag38.png",
    ⲆΔⵠΔⵠᐃⵠ: "img/day-bag39.png",
    ΔⲆⲆⵠΔⲆⲆ: "img/night-bag39.png",
    ⵠⵠᐃⵠΔⵠⵠ: "img/day-bag40.png",
    ⵠΔⲆⵠⲆᐃΔ: "img/night-bag40.png",
    ⲆΔⲆΔⲆᐃᐃ: "img/day-bag41.png",
    ΔᐃᐃΔⵠⲆΔ: "img/night-bag41.png",
    ᐃⵠⵠᐃᐃᐃᐃ: "img/day-bag42.png",
    ᐃⲆⵠᐃⵠΔⵠ: "img/night-bag42.png",
    ᐃⲆΔⲆⲆᐃⲆ: "img/day-bag43.png",
    ⲆᐃⲆᐃⲆᐃⵠ: "img/night-bag43.png",
    ⲆΔᐃⵠⲆⵠⲆ: "img/day-bag44.png",
    ⲆⲆⲆⵠⲆⲆᐃ: "img/night-bag44.png",
    ⵠⲆᐃⵠⵠⲆᐃ: "img/day-bag45.png",
    ⲆⲆΔⵠⵠⵠⵠ: "img/night-bag45.png",
    ⵠΔⲆⵠⵠᐃΔ: "img/day-bag46.png",
    ⲆⵠⲆᐃⲆⲆⵠ: "img/night-bag46.png",
    ⵠᐃᐃᐃΔᐃᐃ: "img/day-bag47.png",
    ᐃⲆⲆⵠᐃⵠΔ: "img/night-bag47.png",
    ᐃᐃⵠⲆⵠⲆΔ: "img/day-bag48.png",
    ⲆΔⲆΔⲆΔⲆ: "img/night-bag48.png",
    ⵠⲆⲆᐃᐃᐃⵠ: "img/day-bag49.png",
    ᐃᐃⲆΔⲆᐃᐃ: "img/night-bag49.png",
    ⲆΔᐃΔᐃΔΔ: "img/day-bag50.png",
    ᐃⲆΔᐃᐃᐃᐃ: "img/night-bag50.png",
    ⵠⵠⲆⲆⵠᐃΔ: "img/day-bag51.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/night-bag51.png",
    ᐃⵠᐃⲆΔᐃΔ: "img/day-bag52.png",
    ⵠᐃⲆᐃⲆⵠᐃ: "img/night-bag52.png",
    ᐃᐃⲆΔⲆⵠᐃ: "img/day-bag53.png",
    ᐃᐃⲆΔᐃⲆΔ: "img/night-bag53.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/day-bag54.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/night-bag54.png",
    ᐃᐃⵠⵠⵠⵠΔ: "img/day-bag55.png",
    ᐃΔᐃᐃⲆⵠᐃ: "img/night-bag55.png",
    ⵠΔᐃⵠΔΔΔ: "img/day-bag56.png",
    ᐃᐃⲆⵠΔΔⵠ: "img/night-bag56.png",
    ᐃⵠⲆⵠᐃⵠⵠ: "img/day-bag57.png",
    ᐃⵠⵠΔⵠⵠᐃ: "img/night-bag57.png",
    ᐃⵠᐃᐃΔⵠΔ: "img/day-bag58.png",
    ΔⲆⲆⵠⲆⵠⵠ: "img/night-bag58.png",
    ⵠᐃΔᐃⵠᐃᐃ: "img/day-bag59.png",
    ⵠᐃⲆΔᐃⵠⲆ: "img/night-bag59.png",
    ⲆⲆⲆᐃⵠᐃΔ: "img/day-bag60.png",
    ΔᐃⵠⲆᐃⵠΔ: "img/night-bag60.png",
    ΔⵠⲆᐃⲆᐃΔ: "img/day-bag61.png",
    ΔⲆⵠⵠⵠᐃⵠ: "img/night-bag61.png",
    ΔⲆΔⲆⵠⵠⲆ: "img/day-bag62.png",
    ΔᐃΔⲆΔΔⲆ: "img/night-bag62.png",
    ᐃⵠΔⵠⵠⵠᐃ: "img/day-bag63.png",
    ⵠᐃⵠΔⵠΔΔ: "img/night-bag63.png",
    ΔΔΔᐃⲆΔⲆ: "img/day-bag64.png",
    ΔⵠⵠᐃⵠⲆⲆ: "img/night-bag64.png",
    ΔⲆᐃⵠᐃⲆⵠ: "img/day-bag65.png",
    ⲆⲆΔⵠⲆᐃⵠ: "img/night-bag65.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/day-bag66.png",
    ⵠⲆΔᐃⲆΔⲆ: "img/night-bag66.png",
    ΔΔⵠⵠᐃⲆⲆ: "img/day-bag67.png",
    ᐃΔⵠΔⲆⵠⵠ: "img/night-bag67.png",
    ⲆᐃⲆᐃᐃΔᐃ: "img/day-bag68.png",
    ⲆⲆᐃΔⲆᐃᐃ: "img/night-bag68.png",
    ᐃⵠⲆᐃᐃⲆⲆ: "img/day-bag69.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-bag69.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/day-bag70.png",
    ⵠⵠⲆⵠⲆΔᐃ: "img/night-bag70.png",
    ⲆⵠᐃᐃⵠΔⲆ: "img/day-bag71.png",
    ΔⵠΔΔⲆⵠΔ: "img/night-bag71.png",
    ᐃⵠΔⲆⵠᐃⲆ: "img/day-bag72.png",
    ᐃⵠⲆΔΔΔⵠ: "img/night-bag72.png",
    ΔⲆⲆΔΔⵠⵠ: "img/day-bag73.png",
    ΔΔⵠⲆⲆΔⲆ: "img/night-bag73.png",
    ᐃᐃᐃΔⵠⵠⲆ: "img/day-bag74.png",
    ⵠΔⲆᐃⵠⵠΔ: "img/night-bag74.png",
    ⵠⵠⵠΔⵠⵠΔ: "img/day-bag75.png",
    ⵠⲆⵠⵠⵠⲆΔ: "img/night-bag75.png",
    ΔΔΔⲆⲆⲆᐃ: "img/day-bag76.png",
    ⵠⲆᐃᐃᐃΔᐃ: "img/night-bag76.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/day-bag77.png",
    ⵠⵠΔᐃⲆⲆⵠ: "img/night-bag77.png",
    ΔⵠⵠΔΔⲆΔ: "img/day-bag78.png",
    ⵠⲆᐃΔⵠⵠⲆ: "img/night-bag78.png",
    ΔΔΔⲆⵠⵠⲆ: "img/day-bag79.png",
    ᐃΔΔⲆᐃⲆⵠ: "img/night-bag79.png",
    ᐃⲆⲆᐃⲆⲆⲆ: "img/day-bag80.png",
    ΔⲆⵠΔΔⵠⵠ: "img/night-bag80.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/day-accessory0.png",
    ᐃⵠⲆᐃΔⲆⲆ: "img/day-accessory0-pacques.png",
    Δⵠᐃᐃᐃⵠᐃ: "img/night-accessory0-pacques.png",
    ΔⵠᐃⵠΔΔⵠ: "img/day-accessory13.png",
    ⵠᐃⵠΔᐃᐃᐃ: "img/night-accessory13.png",
    ⵠΔΔⵠᐃⲆⲆ: "img/day-accessory14.png",
    ᐃⵠᐃΔᐃᐃⲆ: "img/night-accessory14.png",
    ΔⵠᐃᐃⵠΔᐃ: "img/day-accessory15.png",
    ⵠⵠᐃᐃΔⵠⲆ: "img/night-accessory15.png",
    ΔΔᐃⵠⲆⵠⵠ: "img/day-accessory16.png",
    ⲆⲆᐃΔΔⵠΔ: "img/night-accessory16.png",
    ⲆᐃΔᐃΔᐃⲆ: "img/day-accessory17.png",
    ᐃⵠⵠⲆⵠᐃᐃ: "img/day-accessory17.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/day-accessory19.png",
    ⲆΔᐃᐃⵠᐃᐃ: "img/night-accessory19.png",
    ᐃⲆΔᐃⵠᐃᐃ: "img/day-accessory20.png",
    ᐃᐃⵠΔᐃΔΔ: "img/night-accessory20.png",
    ⵠⵠᐃⲆⵠᐃᐃ: "img/day-accessory21.png",
    ΔⲆᐃⵠΔⵠΔ: "img/night-accessory21.png",
    ΔⲆᐃΔᐃⲆⲆ: "img/day-accessory22.png",
    ⲆΔⲆᐃⲆΔⵠ: "img/night-accessory22.png",
    ⲆᐃΔⵠᐃΔⵠ: "img/day-accessory23.png",
    ⵠΔⵠⵠⵠΔⵠ: "img/night-accessory23.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/day-accessory24.png",
    ⲆΔᐃᐃᐃⲆⵠ: "img/night-accessory24.png",
    ᐃΔⵠᐃⲆⵠΔ: "img/day-accessory25.png",
    ΔᐃⲆᐃΔⲆᐃ: "img/night-accessory25.png",
    ⲆⲆᐃΔⵠⵠᐃ: "img/day-accessory26.png",
    ᐃⲆΔⵠΔⲆΔ: "img/night-accessory26.png",
    ⲆᐃⵠⲆΔᐃⲆ: "img/day-accessory27.png",
    ΔᐃΔᐃⵠⲆⲆ: "img/night-accessory27.png",
    ⲆᐃⲆⵠΔⵠΔ: "img/day-accessory18.png",
    ΔᐃⲆΔⵠⵠΔ: "img/night-accessory18.png",
    ⲆⲆⲆⵠΔΔᐃ: "img/day-accessory29.png",
    ΔⵠᐃⲆⵠⵠⲆ: "img/night-accessory29.png",
    ᐃⵠⲆⲆⲆΔᐃ: "img/day-accessory30.png",
    ⲆⲆᐃΔⵠⵠⵠ: "img/night-accessory30.png",
    ΔⲆⵠᐃⲆᐃΔ: "img/day-accessory31.png",
    ⵠΔⵠᐃᐃΔⲆ: "img/night-accessory31.png",
    ⲆⵠⲆᐃⵠⵠᐃ: "img/day-accessory32.png",
    ΔⵠⲆⲆᐃΔᐃ: "img/night-accessory32.png",
    ⵠⲆⵠⲆᐃⲆᐃ: "img/day-accessory33.png",
    ΔⵠⵠⲆΔⵠⲆ: "img/night-accessory33.png",
    ⵠⲆΔⵠⲆᐃⲆ: "img/day-accessory34.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/night-accessory34.png",
    ⲆΔⲆⵠⲆΔᐃ: "img/day-accessory35.png",
    ⵠⵠᐃΔⵠⵠⲆ: "img/night-accessory35.png",
    ⲆΔᐃΔΔΔΔ: "img/day-accessory28.png",
    ΔᐃⲆΔⵠⲆⵠ: "img/night-accessory28.png",
    ⲆⲆᐃΔΔⲆⲆ: "img/day-accessory36.png",
    ᐃᐃⵠⲆⲆᐃⲆ: "img/night-accessory36.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/day-accessory37.png",
    ⵠΔᐃᐃⵠΔⲆ: "img/night-accessory37.png",
    ⵠᐃⵠΔⲆᐃⵠ: "img/day-accessory39.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/night-accessory39.png",
    ΔΔᐃΔⵠᐃΔ: "img/day-accessory40.png",
    ⵠΔΔⲆⵠΔⵠ: "img/night-accessory40.png",
    ⵠⵠᐃᐃⵠⵠⲆ: "img/day-accessory41.png",
    ⲆⵠᐃⲆⲆⲆⵠ: "img/night-accessory41.png",
    ⲆⲆⵠⵠⲆⵠΔ: "img/day-accessory42.png",
    ⲆⵠᐃΔᐃᐃᐃ: "img/night-accessory42.png",
    ΔΔⲆᐃΔᐃⲆ: "img/day-accessory43.png",
    ⲆᐃⵠᐃⲆⵠΔ: "img/night-accessory43.png",
    ΔᐃⵠᐃᐃΔΔ: "img/day-accessory44.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/night-accessory44.png",
    ΔⵠⲆΔⵠᐃᐃ: "img/day-accessory38.png",
    ᐃⵠⲆΔᐃⵠⲆ: "img/night-accessory38.png",
    ΔⵠⲆⵠᐃΔⵠ: "img/day-accessory46.png",
    ⵠⲆⵠⲆᐃⲆⲆ: "img/night-accessory46.png",
    ⵠⲆΔᐃⲆⲆⲆ: "img/day-accessory47.png",
    ⲆⲆⲆⲆⲆⲆⵠ: "img/night-accessory47.png",
    ⵠᐃⵠⲆᐃⵠΔ: "img/day-accessory48.png",
    ᐃⵠᐃⵠΔⵠΔ: "img/night-accessory48.png",
    ⵠΔᐃΔⲆΔᐃ: "img/day-accessory49.png",
    ᐃΔⵠⵠⵠΔⲆ: "img/night-accessory49.png",
    ΔᐃⵠΔᐃⲆΔ: "img/day-accessory45.png",
    ᐃⲆΔⵠΔⲆⵠ: "img/night-accessory45.png",
    ᐃΔⵠⲆᐃⵠⲆ: "img/day-accessory50.png",
    ΔⵠⲆⲆⲆⵠᐃ: "img/night-accessory50.png",
    ΔΔⲆⲆᐃᐃᐃ: "img/day-accessory51.png",
    ΔⲆΔΔΔΔⵠ: "img/night-accessory51.png",
    ⵠⵠⲆⲆΔⲆⲆ: "img/day-accessory52.png",
    ⲆⲆⵠᐃΔΔⵠ: "img/night-accessory52.png",
    ⵠⵠⲆᐃᐃᐃⲆ: "img/day-accessory53.png",
    ⵠΔᐃⲆᐃᐃⵠ: "img/night-accessory53.png",
    ΔᐃΔᐃⵠΔⲆ: "img/day-accessory54.png",
    ᐃᐃⵠᐃⵠΔΔ: "img/night-accessory54.png",
    ⲆⵠᐃⲆⲆⲆᐃ: "img/day-accessory55.png",
    ⵠⵠΔᐃⵠᐃᐃ: "img/night-accessory55.png",
    ⲆⲆΔΔⲆΔᐃ: "img/day-accessory56.png",
    ᐃⵠᐃⲆⲆⲆᐃ: "img/night-accessory56.png",
    ⵠΔᐃᐃΔⵠⵠ: "img/day-accessory57.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/night-accessory57.png",
    ΔᐃⵠᐃᐃⲆᐃ: "img/day-accessory58.png",
    ᐃⵠⲆⵠΔⲆⵠ: "img/night-accessory58.png",
    ⵠΔᐃⵠᐃΔⲆ: "img/day-accessory59.png",
    ⵠⵠⵠᐃᐃᐃᐃ: "img/night-accessory59.png",
    ⵠᐃᐃᐃᐃⵠⵠ: "img/day-accessory60.png",
    ⵠᐃΔΔⲆⵠⲆ: "img/night-accessory60.png",
    ΔΔⲆᐃᐃᐃΔ: "img/day-accessory61.png",
    ⵠᐃⵠΔⲆⵠᐃ: "img/night-accessory61.png",
    ΔⵠⲆᐃΔΔᐃ: "img/day-accessory62.png",
    ᐃΔⲆᐃΔᐃᐃ: "img/night-accessory62.png",
    ΔⵠⵠΔⲆΔⵠ: "img/day-accessory63.png",
    ᐃⵠⵠⵠΔⲆⵠ: "img/night-accessory63.png",
    ⲆⵠΔⵠⲆⲆᐃ: "img/day-accessory64.png",
    ΔⵠⲆⵠΔᐃᐃ: "img/night-accessory64.png",
    ⵠⲆΔᐃᐃᐃⵠ: "img/day-accessory65.png",
    ᐃΔⲆⲆᐃⵠⵠ: "img/night-accessory65.png",
    ΔᐃᐃΔᐃⲆΔ: "img/day-accessory66.png",
    ⲆᐃΔⵠΔⲆⵠ: "img/night-accessory66.png",
    ⲆⵠⵠⲆΔΔⲆ: "img/day-accessory67.png",
    ΔΔᐃΔⲆⵠΔ: "img/night-accessory67.png",
    ΔⲆⵠⲆᐃᐃᐃ: "img/day-accessory68.png",
    ᐃⵠΔᐃᐃΔⵠ: "img/night-accessory68.png",
    ΔΔΔⲆⲆⵠⵠ: "img/day-accessory69.png",
    ᐃᐃⲆΔⵠⵠⵠ: "img/night-accessory69.png",
    ΔΔⲆⵠⵠⲆⲆ: "img/day-accessory70.png",
    ΔⲆⲆᐃⵠⲆⵠ: "img/night-accessory70.png",
    ᐃⵠⵠⵠΔΔⵠ: "img/day-accessory71.png",
    ⵠⵠΔᐃⵠⵠⲆ: "img/night-accessory71.png",
    ᐃⲆⲆⵠΔΔⲆ: "img/day-accessory72.png",
    Δᐃᐃⵠⵠⵠⵠ: "img/night-accessory72.png",
    ⲆⵠⲆᐃΔⵠⲆ: "img/day-accessory73.png",
    ⲆⵠⵠΔᐃᐃⵠ: "img/night-accessory73.png",
    ⵠᐃᐃⲆΔᐃⲆ: "img/day-accessory74.png",
    ΔΔⲆΔⵠⵠⵠ: "img/night-accessory74.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/day-accessory75.png",
    ΔⲆⲆⲆⲆⵠᐃ: "img/night-accessory75.png",
    ⲆᐃⵠⵠⵠⵠΔ: "img/day-accessory76.png",
    ᐃⲆᐃᐃⵠⲆⲆ: "img/night-accessory76.png",
    ᐃΔⲆΔᐃⵠᐃ: "img/day-accessory77.png",
    ΔΔⵠⲆⲆᐃⲆ: "img/night-accessory77.png",
    ⲆᐃΔⵠΔΔΔ: "img/day-accessory78.png",
    ᐃⵠΔⲆΔΔᐃ: "img/night-accessory78.png",
    ⲆⲆᐃΔⲆⲆΔ: "img/day-accessory79.png",
    ΔΔⲆⲆΔΔΔ: "img/night-accessory79.png",
    ⵠΔΔΔΔᐃΔ: "img/day-accessory80.png",
    ΔᐃⲆⲆⵠΔΔ: "img/night-accessory80.png",
    ⲆᐃᐃⵠΔⵠᐃ: "img/day-accessory81.png",
    ᐃⲆΔⲆᐃⵠᐃ: "img/night-accessory81.png",
    ⲆⵠⲆᐃⵠᐃᐃ: "img/day-accessory83.png",
    ⲆⵠⲆⵠᐃᐃΔ: "img/night-accessory83.png",
    ⲆⵠᐃΔᐃΔⲆ: "img/day-accessory84.png",
    ᐃᐃΔⵠΔⵠΔ: "img/night-accessory84.png",
    ⲆⵠΔⵠⲆΔⵠ: "img/day-accessory85.png",
    ΔⲆᐃⲆⵠⵠⵠ: "img/night-accessory85.png",
    ⵠᐃⵠᐃⵠΔⵠ: "img/day-accessory86.png",
    ᐃᐃΔΔⲆΔⲆ: "img/night-accessory86.png",
    ᐃΔⵠⵠᐃΔΔ: "img/day-accessory87.png",
    ΔΔᐃⵠᐃΔΔ: "img/night-accessory87.png",
    ⲆΔⲆⵠⵠⵠⵠ: "img/day-accessory88.png",
    ⵠᐃΔⲆᐃⵠΔ: "img/night-accessory88.png",
    ΔΔᐃᐃⵠΔⵠ: "img/day-accessory89.png",
    ᐃᐃⲆⲆⵠᐃΔ: "img/night-accessory89.png",
    ⵠⲆⵠΔᐃⵠᐃ: "img/day-accessory90.png",
    ΔⵠΔΔΔⲆⲆ: "img/night-accessory90.png",
    ΔᐃⲆΔⵠΔΔ: "img/day-accessory91.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/night-accessory91.png",
    ΔⲆᐃᐃΔⲆⵠ: "img/day-accessory92.png",
    ΔΔΔⲆⲆᐃⵠ: "img/night-accessory92.png",
    ΔⲆᐃΔΔⵠⲆ: "img/day-accessory93.png",
    ⲆΔⲆΔⲆⵠᐃ: "img/night-accessory93.png",
    ᐃΔⵠᐃⲆⵠᐃ: "img/day-accessory94.png",
    ᐃᐃΔᐃΔⲆⲆ: "img/night-accessory94.png",
    ᐃⲆⲆᐃⵠΔᐃ: "img/day-accessory95.png",
    ΔⲆΔⲆᐃᐃⲆ: "img/night-accessory95.png",
    ⲆⵠΔⵠⵠΔⵠ: "img/day-accessory96.png",
    ΔⵠⲆⲆᐃⲆᐃ: "img/night-accessory96.png",
    ᐃⵠΔᐃΔᐃΔ: "img/day-accessory97.png",
    ⵠⵠᐃΔΔᐃΔ: "img/night-accessory97.png",
    ⵠⵠⵠΔΔⵠⵠ: "img/day-accessory98.png",
    ΔⲆⲆΔᐃⵠⲆ: "img/night-accessory98.png",
    ᐃⲆⲆΔⵠⲆⵠ: "img/day-accessory99.png",
    ᐃᐃᐃᐃΔⲆⲆ: "img/night-accessory99.png",
    ⲆⲆⲆᐃⵠⵠᐃ: "img/day-accessory100.png",
    ⵠⲆⵠⵠⵠᐃᐃ: "img/night-accessory100.png",
    ᐃΔⲆΔᐃΔΔ: "img/day-accessory101.png",
    ΔⵠⵠⵠⵠⲆⵠ: "img/night-accessory101.png",
    ⲆⲆΔⵠⲆⲆⲆ: "img/day-accessory102.png",
    ⵠⵠᐃΔⵠᐃⵠ: "img/night-accessory102.png",
    ΔⵠⵠⲆⵠⲆΔ: "img/day-accessory103.png",
    ⵠᐃᐃⵠⲆⲆⵠ: "img/night-accessory103.png",
    ⲆⲆᐃⲆⵠⲆⲆ: "img/day-accessory104.png",
    ⲆΔΔⲆᐃΔⲆ: "img/night-accessory104.png",
    ΔⵠⲆⲆⵠΔᐃ: "img/day-accessory105.png",
    ᐃⵠⵠⲆΔⵠΔ: "img/night-accessory105.png",
    ⲆⵠΔⵠⵠⲆⵠᐃΔ: "img/day-accessory106.png",
    ΔⲆΔΔΔᐃⵠᐃⵠ: "img/night-accessory106.png",
    ⵠΔⲆⲆΔⵠⲆᐃⵠ: "img/day-accessory107.png",
    ⵠⲆᐃᐃⲆⵠⵠΔⵠ: "img/night-accessory107.png",
    ⵠΔⵠΔⵠⵠⲆ: "img/day-accessory82.png",
    ⲆⵠⵠⲆΔⵠⲆ: "img/night-accessory82.png",
    ᐃΔΔⲆⵠⲆᐃ: "img/day-book0.png",
    ᐃⲆⵠⵠⲆΔⲆ: "img/night-book0.png",
    ΔⲆᐃⵠᐃᐃᐃ: "img/day-book1.png",
    ᐃⲆⲆᐃᐃⲆⵠ: "img/night-book1.png",
    ⵠⲆⲆΔΔΔⵠ: "img/day-book2.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/night-book2.png",
    ⲆᐃᐃⲆΔᐃᐃ: "img/day-book3.png",
    ΔⵠΔᐃΔⵠΔ: "img/night-book3.png",
    ⵠᐃΔⲆⵠΔΔ: "img/day-book4.png",
    ⲆᐃⵠΔⵠᐃⵠ: "img/night-book4.png",
    ⲆΔⵠⵠΔΔⵠ: "img/day-book5.png",
    ᐃᐃΔⵠⲆⵠᐃ: "img/night-book5.png",
    ⲆΔⵠⵠᐃΔᐃ: "img/day-book6.png",
    ΔⲆⲆΔⲆΔⵠ: "img/night-book6.png",
    ᐃΔⲆⲆⵠΔⵠ: "img/day-book7.png",
    ΔᐃΔΔⵠΔⲆ: "img/night-book7.png",
    ⲆΔⲆᐃᐃⵠᐃ: "img/day-book8.png",
    ⵠᐃΔⲆⵠᐃᐃ: "img/night-book8.png",
    ⵠⵠⲆⲆΔᐃΔ: "img/day-book9.png",
    ⲆⵠⲆΔⲆΔᐃ: "img/night-book9.png",
    ⵠᐃΔΔΔⲆⵠ: "img/day-book10.png",
    ᐃⲆⲆΔⲆᐃᐃ: "img/night-book10.png",
    ⵠⲆᐃΔΔⵠᐃ: "img/day-book11.png",
    ⵠΔⵠΔᐃΔⲆ: "img/night-book11.png",
    ⵠΔⵠᐃⵠⵠⲆ: "img/day-book12.png",
    ΔΔⵠⲆᐃΔᐃ: "img/night-book12.png",
    ⲆᐃΔⵠΔᐃⲆ: "img/day-book13.png",
    ⲆΔᐃⲆⵠⲆⲆ: "img/night-book13.png",
    ⲆΔⲆⲆⵠⲆᐃ: "img/day-book14.png",
    ΔⲆᐃⲆⵠⲆΔ: "img/night-book14.png",
    ΔΔᐃΔᐃΔΔ: "img/day-book15.png",
    ⵠᐃⵠΔⲆᐃⲆ: "img/night-book15.png",
    ΔⵠΔⵠΔⲆⵠ: "img/day-book16.png",
    ΔΔⲆΔᐃⲆΔ: "img/night-book16.png",
    ⲆᐃΔΔΔⲆⵠ: "img/day-book17.png",
    ΔΔΔᐃⵠⵠⲆ: "img/night-book17.png",
    ⲆᐃᐃΔΔⲆΔ: "img/day-book18.png",
    ⲆᐃⲆΔᐃⵠᐃ: "img/night-book18.png",
    ⲆⵠⲆᐃⵠⲆⵠ: "img/day-book19.png",
    ⵠⵠⲆⵠⵠᐃᐃ: "img/night-book19.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/day-book20.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/night-book20.png",
    ⵠᐃΔᐃⵠⵠⵠ: "img/day-book21.png",
    ᐃⲆΔⵠⲆᐃⵠ: "img/night-book21.png",
    ᐃΔⲆΔⵠⵠΔ: "img/day-book22.png",
    ⵠⵠⵠᐃΔΔΔ: "img/night-book22.png",
    ⵠΔᐃⲆⲆⲆΔ: "img/day-book23.png",
    ⲆΔⲆⵠᐃⵠΔ: "img/night-book23.png",
    ᐃᐃΔᐃⲆΔΔ: "img/day-book24.png",
    ⵠⲆᐃⲆⵠⲆⲆ: "img/night-book24.png",
    ᐃᐃΔⵠⵠᐃΔ: "img/day-book25.png",
    ⵠⲆⵠⲆⲆⲆΔ: "img/night-book25.png",
    ⲆⲆⲆⵠᐃⲆⲆ: "img/day-book26.png",
    ᐃⲆᐃⵠⲆᐃᐃ: "img/night-book26.png",
    ΔⲆⵠⲆᐃⲆᐃ: "img/day-book27.png",
    ⲆᐃⵠᐃⲆΔⲆ: "img/night-book27.png",
    ⲆⵠⲆⵠᐃⲆⵠ: "img/day-book28.png",
    ⲆᐃⲆᐃⲆΔⲆ: "img/night-book28.png",
    ⵠᐃⲆⵠΔᐃΔ: "img/day-book29.png",
    ᐃᐃⲆᐃⲆⲆᐃ: "img/night-book29.png",
    ᐃⲆⲆⵠⲆΔᐃ: "img/day-book30.png",
    ᐃΔΔⵠⵠⲆⲆ: "img/night-book30.png",
    ⲆΔⲆᐃⲆⲆΔ: "img/day-book31.png",
    ⲆΔᐃᐃⵠⲆⵠ: "img/night-book31.png",
    ΔⲆⲆⵠΔⵠΔ: "img/day-book32.png",
    ⲆⵠΔᐃΔⵠⲆ: "img/night-book32.png",
    ΔᐃΔⵠΔⲆⲆ: "img/day-book33.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/night-book33.png",
    ᐃⲆᐃᐃⵠⲆⵠ: "img/day-book34.png",
    ⲆⲆⵠⲆⵠᐃᐃ: "img/night-book34.png",
    ΔⵠⵠΔΔⲆⲆ: "img/day-book35.png",
    ⲆⵠⲆΔᐃⵠᐃ: "img/night-book35.png",
    ᐃΔⵠⵠᐃⵠΔ: "img/day-book36.png",
    ᐃⲆΔⲆΔⵠΔ: "img/night-book36.png",
    ⲆⲆᐃᐃᐃⲆⲆᐃΔ: "img/day-book37.png",
    ⵠΔⵠⵠΔⲆᐃᐃΔ: "img/night-book37.png",
    ⵠΔΔⵠᐃⵠΔ: "img/day-book38.png",
    ΔΔᐃⲆⲆⵠᐃ: "img/night-book38.png",
    ΔⵠⲆⲆΔⵠΔ: "img/day-book39.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/night-book39.png",
    ᐃᐃᐃᐃΔⵠⲆ: "img/day-book40.png",
    ⵠΔΔΔⲆΔᐃ: "img/night-book40.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/day-book41.png",
    ᐃᐃΔⵠᐃⵠᐃ: "img/night-book41.png",
    ΔⲆᐃⵠⵠⵠᐃ: "img/day-book42.png",
    ⵠⵠⵠΔΔΔⲆ: "img/night-book42.png",
    ⲆⵠᐃⵠᐃΔΔ: "img/day-book43.png",
    ⵠΔᐃⵠΔⵠᐃ: "img/night-book43.png",
    ⲆⵠⲆⵠᐃⲆΔ: "img/day-book44.png",
    ⵠΔΔΔⵠⵠⵠ: "img/night-book44.png",
    ᐃⲆΔⲆⵠΔⲆ: "img/day-book45.png",
    ΔⵠᐃΔᐃⲆⵠ: "img/night-book45.png",
    ⵠᐃᐃⵠΔⲆΔ: "img/day-book46.png",
    ⲆⵠⲆⵠⵠⲆⵠ: "img/night-book46.png",
    ⵠⵠⲆⲆⲆⲆⲆ: "img/day-book47.png",
    ⲆᐃᐃⲆᐃΔⵠ: "img/night-book47.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/day-book48.png",
    ⲆᐃⵠⲆⵠⲆⵠ: "img/night-book48.png",
    ⵠᐃⵠⲆⵠΔⲆ: "img/day-book49.png",
    ⵠⲆⵠΔⲆᐃᐃ: "img/night-book49.png",
    ⵠᐃΔΔΔᐃⲆ: "img/day-book50.png",
    ⵠⵠΔⵠᐃⲆⲆ: "img/night-book50.png",
    ⵠⲆⲆⵠⲆⲆᐃ: "img/day-crate1.png",
    ⲆΔΔⵠⵠⵠᐃ: "img/night-crate1.png",
    ⲆⲆᐃΔⲆΔΔ: "img/day-crate2.png",
    ⲆⵠᐃⵠᐃΔᐃ: "img/night-crate2.png",
    ⲆⵠᐃᐃᐃⲆⵠ: "img/day-crate3.png",
    ΔΔᐃⵠⵠΔⵠ: "img/night-crate3.png",
    ⲆᐃⲆΔⵠᐃᐃ: "img/day-crate4.png",
    ᐃΔⵠⲆⵠⵠⵠ: "img/night-crate4.png",
    ⲆᐃᐃΔΔΔⲆ: "img/day-crate5.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/night-crate5.png",
    ΔⲆⲆⵠⲆΔⲆ: "img/day-crate6.png",
    ΔΔⲆⵠᐃΔΔ: "img/night-crate6.png",
    ⲆⵠⲆⲆᐃΔΔ: "img/day-crate7.png",
    ⲆᐃΔⲆⲆⵠⵠ: "img/night-crate7.png",
    ᐃⵠΔⲆⵠⵠⲆ: "img/day-crate8.png",
    ⵠᐃᐃⵠᐃⵠΔ: "img/night-crate8.png",
    ΔᐃᐃⲆᐃⵠⲆ: "img/day-crate9.png",
    ΔᐃᐃᐃⲆΔⵠ: "img/night-crate9.png",
    ΔⵠⵠᐃΔⵠᐃ: "img/day-crate10.png",
    ⵠⲆΔⲆΔⲆΔ: "img/night-crate10.png",
    ᐃⵠᐃΔΔⲆΔ: "img/day-crate11.png",
    ᐃⲆᐃⲆΔⵠⵠ: "img/night-crate11.png",
    ΔⵠᐃᐃⵠⲆᐃ: "img/day-crate12.png",
    ᐃⵠⵠᐃⵠΔΔ: "img/night-crate12.png",
    ⲆΔΔᐃᐃᐃΔ: "img/day-crate13.png",
    ⲆⵠᐃⲆᐃⲆΔ: "img/night-crate13.png",
    ᐃⲆΔᐃⵠΔⵠ: "img/day-crate14.png",
    ⵠΔΔⵠⲆⵠⲆ: "img/night-crate14.png",
    ΔΔⲆᐃⵠⲆⲆ: "img/day-crate15.png",
    ΔᐃΔΔᐃⲆⲆ: "img/night-crate15.png",
    ΔᐃᐃⵠⲆⲆΔ: "img/day-crate16.png",
    ⵠᐃΔᐃΔⲆⲆ: "img/night-crate16.png",
    ᐃⵠⵠⲆⲆⵠᐃ: "img/day-crate17.png",
    ⵠΔᐃᐃⲆᐃᐃ: "img/night-crate17.png",
    ⵠΔᐃΔⲆᐃⵠ: "img/day-crate18.png",
    ΔΔⵠⲆⵠᐃΔ: "img/night-crate18.png",
    ΔⵠΔⲆᐃⲆⵠ: "img/day-crate19.png",
    ᐃΔⲆⵠⲆᐃΔ: "img/night-crate19.png",
    ⵠΔⵠᐃᐃⲆᐃ: "img/day-crate20.png",
    ΔΔⵠⵠΔⲆⲆ: "img/night-crate20.png",
    ⲆΔⵠΔᐃΔΔ: "img/day-crate21.png",
    ΔᐃⲆⲆⲆᐃⲆ: "img/night-crate21.png",
    ᐃⵠᐃᐃΔⲆⲆ: "img/day-crate22.png",
    ΔᐃⵠⵠᐃᐃⲆ: "img/night-crate22.png",
    ⵠᐃⲆⵠⲆᐃΔ: "img/day-crate23.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/night-crate23.png",
    ⵠᐃⵠΔΔⲆⲆ: "img/day-crate24.png",
    ΔᐃΔⲆⲆᐃΔ: "img/night-crate24.png",
    ⵠⲆΔᐃΔⵠΔ: "img/day-crate25.png",
    ᐃⲆⵠⵠⵠΔΔ: "img/night-crate25.png",
    ΔᐃᐃΔᐃΔⵠ: "img/day-crate26.png",
    ΔᐃⵠⵠⲆⵠΔ: "img/night-crate26.png",
    ⵠΔⵠⵠᐃⲆΔ: "img/day-crate27.png",
    ⵠⵠⲆⲆⵠⲆΔ: "img/night-crate27.png",
    ⲆⲆⲆⵠᐃⵠⵠ: "img/day-crate28.png",
    ᐃᐃᐃⲆΔΔΔ: "img/night-crate28.png",
    ᐃⵠⵠᐃⵠΔᐃ: "img/day-crate29.png",
    ᐃᐃΔⲆΔⲆᐃ: "img/night-crate29.png",
    ΔⵠΔΔᐃᐃᐃ: "img/day-crate30.png",
    ΔᐃⲆⵠᐃΔΔ: "img/night-crate30.png",
    ᐃΔᐃΔⲆⲆⲆ: "img/day-crate31.png",
    ΔΔⲆΔᐃΔⲆ: "img/night-crate31.png",
    ΔΔᐃᐃᐃⲆΔ: "img/day-crate32.png",
    ᐃⵠΔⵠⵠⵠΔ: "img/night-crate32.png",
    ᐃᐃⵠⲆΔⵠΔ: "img/day-crate33.png",
    ΔΔⵠⲆⵠᐃⲆ: "img/night-crate33.png",
    ⲆᐃΔⵠⵠⲆⲆ: "img/day-crate34.png",
    ⲆΔⵠΔΔⵠΔ: "img/night-crate34.png",
    ᐃⲆⵠⲆⲆⵠΔ: "img/day-crate35.png",
    ⵠᐃΔᐃΔΔᐃ: "img/night-crate35.png",
    ⵠⲆΔⲆΔᐃᐃ: "img/day-crate36.png",
    ΔΔΔΔⵠⲆⲆ: "img/night-crate36.png",
    ⵠⲆⵠᐃᐃⵠⵠ: "img/day-crate37.png",
    ᐃⲆΔⲆᐃⲆⵠ: "img/night-crate37.png",
    ᐃⲆⵠⲆⵠⲆᐃ: "img/day-crate38.png",
    ΔⲆⲆⲆⲆΔⵠ: "img/night-crate38.png",
    ΔⲆᐃⲆⲆΔⲆ: "img/day-crate39.png",
    ⲆΔΔⵠⲆᐃⲆ: "img/night-crate39.png",
    ᐃΔⲆᐃᐃⲆΔ: "img/day-crate40.png",
    ᐃᐃᐃⲆΔᐃⵠ: "img/night-crate40.png",
    ⵠⲆⲆΔΔⵠᐃ: "img/day-crate41.png",
    ᐃᐃⲆⲆᐃⲆᐃ: "img/night-crate41.png",
    ⲆΔⲆΔⲆⵠⵠ: "img/day-crate42.png",
    ΔⵠⲆᐃᐃΔⵠ: "img/night-crate42.png",
    ⵠᐃⵠⵠΔΔⵠ: "img/day-crate43.png",
    ᐃⲆⵠⵠΔΔⵠ: "img/night-crate43.png",
    ΔⲆᐃᐃⲆᐃⲆ: "img/day-crate44.png",
    ⵠⵠⲆⲆⵠΔᐃ: "img/night-crate44.png",
    ⲆⵠⲆⲆΔⲆⲆ: "img/day-crate45.png",
    ⲆᐃⲆⵠΔΔΔ: "img/night-crate45.png",
    ⲆᐃΔⲆΔⲆΔ: "img/day-crate46.png",
    ⲆⵠⲆᐃᐃᐃⲆ: "img/night-crate46.png",
    ⲆⲆⲆⵠⲆⵠΔ: "img/day-crate47.png",
    ⵠᐃⵠᐃΔⵠⵠ: "img/night-crate47.png",
    ⵠᐃᐃΔⵠᐃⵠ: "img/day-crate48.png",
    ΔⲆⲆⵠⵠⲆⲆ: "img/night-crate48.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/day-crate49.png",
    ⲆΔⲆᐃⲆⲆⵠ: "img/night-crate49.png",
    ⲆⵠᐃΔΔⵠᐃ: "img/day-crate50.png",
    ᐃᐃⲆΔⵠᐃⵠ: "img/night-crate50.png",
    ᐃⲆΔⵠΔⲆⲆ: "img/day-crate51.png",
    ⵠᐃᐃⵠⵠΔᐃ: "img/night-crate51.png",
    ⵠᐃᐃⲆᐃΔⲆ: "img/day-crate52.png",
    ⵠᐃΔⵠᐃⲆᐃ: "img/night-crate52.png",
    ⵠⵠᐃⲆⲆⲆᐃ: "img/day-crate53.png",
    Δⵠⵠⵠᐃⵠⵠ: "img/night-crate53.png",
    ⲆⵠⵠΔⲆⵠΔ: "img/day-crate54.png",
    ⵠΔⵠᐃΔⵠⲆ: "img/night-crate54.png",
    ⲆΔⲆΔⵠᐃⲆ: "img/day-crate55.png",
    ⵠⲆΔᐃΔΔΔ: "img/night-crate55.png",
    ΔΔΔⵠΔⲆⵠ: "img/day-crate56.png",
    ᐃⵠᐃⲆⵠⵠⵠ: "img/night-crate56.png",
    ᐃⲆΔΔⲆΔⵠ: "img/day-crate57.png",
    ⲆⵠⵠΔᐃᐃⲆ: "img/night-crate57.png",
    ΔⵠⲆⵠⲆⲆⲆ: "img/day-crate58.png",
    ⲆΔΔⲆⲆΔⲆ: "img/night-crate58.png",
    ΔⵠⲆᐃⲆΔⲆ: "img/day-crate59.png",
    ⵠⵠⵠⲆΔⵠⲆ: "img/night-crate59.png",
    ⲆᐃΔᐃⲆᐃΔ: "img/day-crate60.png",
    ⵠⲆⵠⵠᐃΔᐃ: "img/night-crate60.png",
    ⵠᐃᐃΔⵠᐃΔ: "img/day-crate61.png",
    ⵠᐃᐃΔΔⵠΔ: "img/night-crate61.png",
    ⵠⵠᐃᐃᐃⲆⵠ: "img/day-crate62.png",
    ΔⲆΔⲆΔᐃᐃ: "img/night-crate62.png",
    ΔⵠⲆΔⲆΔᐃ: "img/day-crate63.png",
    ΔⲆⲆᐃᐃΔⲆ: "img/night-crate63.png",
    ⲆⲆⲆᐃᐃⵠⵠ: "img/day-crate64.png",
    ΔΔΔⲆΔⲆΔ: "img/night-crate64.png",
    ᐃⲆⵠΔⵠⵠⵠ: "img/day-crate65.png",
    ᐃΔⵠΔᐃⵠΔ: "img/night-crate65.png",
    ᐃΔΔᐃⵠᐃⵠ: "img/day-crate66.png",
    ᐃΔⵠⵠᐃᐃⵠ: "img/night-crate66.png",
    ΔⵠⲆᐃⲆᐃᐃ: "img/day-crate67.png",
    ΔⲆⲆΔΔⵠΔ: "img/night-crate67.png",
    ⵠⵠⵠΔᐃⵠⵠ: "img/day-crate68.png",
    ᐃΔⵠΔᐃⵠⲆ: "img/night-crate68.png",
    ⵠⵠᐃΔⵠⲆΔ: "img/day-crate69.png",
    ⲆⲆⵠⲆⲆⲆᐃ: "img/night-crate69.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/day-crate70.png",
    ΔⲆⲆᐃΔⵠⵠ: "img/night-crate70.png",
    ᐃΔⲆᐃⲆᐃᐃ: "img/day-crate71.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/night-crate71.png",
    ⵠⲆⲆΔⵠᐃⵠ: "img/day-crate72.png",
    ΔⵠᐃΔⵠⵠΔ: "img/night-crate72.png",
    ⵠᐃΔⲆΔⲆⲆ: "img/day-crate73.png",
    ⲆᐃΔᐃΔᐃⵠ: "img/night-crate73.png",
    ⲆΔᐃΔⵠⲆⲆ: "img/day-crate74.png",
    ⵠⲆⲆⵠⲆᐃΔ: "img/night-crate74.png",
    ⵠΔΔᐃⵠᐃⵠ: "img/day-crate75.png",
    ᐃⵠΔⲆᐃⲆΔ: "img/night-crate75.png",
    ⲆⲆⵠⵠⲆⲆⲆ: "img/day-crate76.png",
    ⵠⵠⲆⵠⲆΔⵠ: "img/night-crate76.png",
    ΔⲆΔⵠⲆⵠΔ: "img/day-crate77.png",
    ᐃⵠⵠⵠΔΔⲆ: "img/night-crate77.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/day-crate78.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/night-crate78.png",
    Ⲇᐃⵠⵠᐃᐃᐃ: "img/day-crate79.png",
    ⵠΔⵠⲆⲆᐃⲆ: "img/night-crate79.png",
    ⵠΔⵠⵠᐃᐃⲆ: "img/day-herb0.png",
    ΔⲆⲆⲆⲆᐃⵠ: "img/day-herb1.png",
    ⲆⲆᐃⲆΔⲆΔ: "img/day-herb2.png",
    ⲆΔⲆⵠⵠⵠⲆ: "img/day-herb3.png",
    ΔⲆⵠⲆᐃᐃⲆ: "img/day-herb4.png",
    ΔΔⵠΔⲆᐃᐃ: "img/day-herb5.png",
    ⵠᐃᐃᐃⲆΔⵠ: "img/day-herb6.png",
    ⵠⵠᐃⲆⲆᐃⲆ: "img/day-herb7.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/day-herb8.png",
    ᐃⲆⵠⵠΔᐃⲆ: "img/day-herb9.png",
    ⲆΔΔⲆⵠΔᐃ: "img/day-herb10.png",
    ⲆⲆΔΔⵠΔⵠ: "img/day-herb11.png",
    ΔⵠᐃᐃⲆⲆΔ: "img/day-herb12.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/day-herb13.png",
    ⵠⵠⲆⲆⲆΔᐃ: "img/day-herb14.png",
    ΔⲆⵠⵠⵠⵠⲆ: "img/day-herb15.png",
    ᐃᐃⲆⵠᐃⲆᐃ: "img/day-shell0.png",
    ⲆⵠᐃᐃⵠΔΔ: "img/day-shell1.png",
    ΔΔⵠᐃⲆⲆΔ: "img/day-shell2.png",
    ⲆᐃᐃΔⵠᐃⲆ: "img/day-leaf1.png",
    ⵠⲆⲆⲆⵠΔᐃ: "img/day-leaf2.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/day-leaf3.png",
    ⲆᐃⵠⵠᐃΔⵠ: "img/day-leaf4.png",
    ΔᐃΔΔΔⵠΔ: "img/day-leaf5.png",
    ⵠᐃΔⲆⲆΔⲆ: "img/day-leaf6.png",
    ᐃⵠⲆⵠⲆᐃⲆ: "img/day-leaf7.png",
    ᐃⲆⲆᐃΔⵠᐃ: "img/day-leaf8.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/day-rock0.png",
    ᐃᐃⵠⲆⵠⲆᐃ: "img/day-rock1.png",
    ⲆΔⵠᐃΔᐃⵠ: "img/day-rock2.png",
    ⵠᐃⲆΔⲆⲆΔ: "img/day-rock3.png",
    ΔⵠⲆⲆΔⲆᐃ: "img/day-rock4.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/day-rock5.png",
    ⲆᐃⲆᐃΔⵠΔ: "img/day-rock6.png",
    ΔᐃⵠΔᐃΔΔ: "img/day-rock7.png",
    ⲆⵠΔᐃⵠΔⲆ: "img/day-rock8.png",
    ⵠΔᐃⵠⵠⲆⲆ: "img/day-rock9.png",
    ⵠΔⲆᐃⵠⲆⵠ: "img/day-rock10.png",
    ΔΔᐃΔᐃᐃᐃ: "img/day-rock11.png",
    ⲆᐃᐃΔᐃᐃⵠ: "img/day-rock12.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/day-rock13.png",
    ⵠⵠΔⲆᐃΔΔ: "img/day-flower1.png",
    ᐃΔΔΔⲆΔⵠ: "img/day-flower2.png",
    ⲆⵠⲆⲆᐃᐃⲆ: "img/day-flower3.png",
    ⵠᐃΔⵠΔⵠⵠ: "img/day-flower4.png",
    ᐃⵠᐃⵠⲆⲆⲆ: "img/day-flower5.png",
    ΔⵠⵠᐃⵠΔΔ: "img/day-flower6.png",
    ΔᐃⲆΔᐃΔⵠ: "img/day-flower7.png",
    ΔΔⵠⲆⲆΔⵠ: "img/day-flower8.png",
    ᐃⵠᐃⲆⲆⲆΔ: "img/day-flower9.png",
    ΔᐃⲆⵠⵠⲆΔ: "img/day-herb16.png",
    ⲆᐃⵠᐃᐃΔᐃ: "img/day-herb17.png",
    ᐃᐃⵠⵠΔⲆⵠ: "img/day-herb18.png",
    ⵠᐃⲆⲆⵠⵠⲆ: "img/day-herb19.png",
    ᐃᐃΔᐃΔⵠᐃ: "img/day-herb20.png",
    ΔᐃⵠΔΔΔⵠ: "img/day-herb21.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/night-herb0.png",
    ⵠᐃᐃⵠⵠᐃᐃ: "img/night-herb1.png",
    ⵠⵠᐃⵠⵠᐃΔ: "img/night-herb2.png",
    ⲆⲆⵠᐃⵠⵠⲆ: "img/night-herb3.png",
    ΔᐃⲆⵠⵠⲆⲆ: "img/night-herb4.png",
    ⲆΔᐃⲆΔΔᐃ: "img/night-herb5.png",
    ⲆᐃⵠⲆᐃΔᐃ: "img/night-herb6.png",
    ⲆᐃⲆᐃΔΔΔ: "img/night-herb7.png",
    ΔᐃⵠᐃⵠΔⲆ: "img/night-herb8.png",
    ⲆᐃᐃᐃⲆΔΔ: "img/night-herb9.png",
    ΔⲆⵠᐃᐃⵠᐃ: "img/night-herb10.png",
    ⲆᐃⲆⲆⲆⵠⲆ: "img/night-herb11.png",
    ΔᐃΔⲆΔⵠΔ: "img/night-herb12.png",
    ᐃⵠΔⲆⵠⲆⵠ: "img/night-herb13.png",
    ΔⲆⵠΔⲆⵠᐃ: "img/night-herb14.png",
    ⲆᐃⲆᐃⵠⵠⲆ: "img/night-herb15.png",
    ΔᐃⲆⲆΔΔᐃ: "img/night-shell0.png",
    ΔⲆΔⵠᐃΔΔ: "img/night-shell1.png",
    ΔᐃⵠⵠᐃΔⵠ: "img/night-shell2.png",
    ᐃΔᐃⵠΔᐃⵠ: "img/night-leaf1.png",
    ΔΔⲆⵠΔᐃᐃ: "img/night-leaf2.png",
    ᐃⵠⲆᐃⲆᐃⵠ: "img/night-leaf3.png",
    ΔᐃᐃⲆΔⲆⵠ: "img/night-leaf4.png",
    ⲆΔⵠⲆᐃᐃΔ: "img/night-leaf5.png",
    ⲆΔᐃⵠΔΔⵠ: "img/night-leaf6.png",
    ᐃⵠΔΔⲆⵠΔ: "img/night-leaf7.png",
    ⵠⲆⵠΔⲆΔⵠ: "img/night-leaf8.png",
    ⲆᐃⲆⵠᐃΔⲆ: "img/night-rock0.png",
    ⵠᐃⲆⲆᐃⲆᐃ: "img/night-rock1.png",
    ᐃⲆΔⲆᐃᐃᐃ: "img/night-rock2.png",
    ΔⵠᐃⵠⲆⲆⵠ: "img/night-rock3.png",
    ⲆᐃᐃⲆᐃᐃⲆ: "img/night-rock4.png",
    ΔⵠⲆⲆΔᐃΔ: "img/night-rock5.png",
    ᐃΔⲆΔⵠⲆⲆ: "img/night-rock6.png",
    ΔᐃⲆΔⲆⵠᐃ: "img/night-rock7.png",
    ⲆΔⵠⵠΔΔΔ: "img/night-rock8.png",
    ΔᐃᐃᐃΔⲆᐃ: "img/night-rock9.png",
    ⵠⵠΔΔᐃᐃΔ: "img/night-rock10.png",
    ⵠⲆΔΔⲆⵠΔ: "img/night-rock11.png",
    ⵠⲆⲆᐃΔⵠⲆ: "img/night-rock12.png",
    ᐃⵠΔⲆⲆⲆᐃ: "img/night-rock13.png",
    ΔᐃᐃΔⲆⵠⵠ: "img/night-flower1.png",
    ΔⲆⲆⵠΔΔΔ: "img/night-flower2.png",
    ⵠⵠⲆΔⵠΔⲆ: "img/night-flower3.png",
    ⵠΔᐃΔᐃⵠⵠ: "img/night-flower4.png",
    ΔᐃⲆⲆⵠⵠⲆ: "img/night-flower5.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/night-flower6.png",
    ᐃᐃⲆᐃᐃⲆᐃ: "img/night-flower7.png",
    ᐃΔⵠΔΔⵠᐃ: "img/night-flower8.png",
    ᐃΔΔΔⵠΔⲆ: "img/night-flower9.png",
    ΔⵠᐃⲆΔΔⵠ: "img/night-herb16.png",
    ⲆⲆⲆⵠΔⲆⲆ: "img/night-herb17.png",
    ΔⲆⵠⵠᐃⵠⲆ: "img/night-herb18.png",
    ⵠΔΔⲆⲆⲆᐃ: "img/night-herb19.png",
    ⲆⲆⵠⵠΔᐃⵠ: "img/night-herb20.png",
    ⲆⲆⲆΔⲆΔΔ: "img/night-herb21.png",
    ᐃⲆⵠΔᐃⵠᐃ: "img/day-river000-010-000.png",
    ᐃⲆⲆΔᐃⵠΔ: "img/day-river000-010-010.png",
    ᐃᐃⵠΔⵠᐃⵠ: "img/day-river000-011-000.png",
    ᐃΔⵠⵠΔⵠΔ: "img/day-river000-011-010.png",
    ΔᐃᐃⲆΔⲆᐃ: "img/day-river000-011-011.png",
    ᐃⵠⲆΔᐃⵠᐃ: "img/day-river000-110-000.png",
    ⵠⲆⲆⵠⵠΔⲆ: "img/day-river000-110-010.png",
    ΔⲆⵠΔⵠΔⲆ: "img/day-river000-110-110.png",
    ᐃΔⵠΔΔⲆⵠ: "img/day-river000-111-000.png",
    ⵠᐃⵠᐃⵠⵠᐃ: "img/day-river000-111-010.png",
    ⲆΔⵠⲆΔΔΔ: "img/day-river000-111-011.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/day-river000-111-110.png",
    ΔΔⲆᐃⲆᐃΔ: "img/day-river000-111-111.png",
    ⲆᐃΔⲆΔⲆⲆ: "img/day-river010-010-000.png",
    ᐃᐃΔⲆⵠΔΔ: "img/day-river010-010-010.png",
    ⵠᐃᐃⲆΔᐃΔ: "img/day-river010-011-000.png",
    ΔⵠΔⲆⲆⲆΔ: "img/day-river010-011-010.png",
    ⵠⵠⵠⲆⲆⵠⲆ: "img/day-river010-011-011.png",
    ⲆᐃΔⵠⲆⲆΔ: "img/day-river010-110-000.png",
    ⵠᐃⲆᐃⵠᐃᐃ: "img/day-river010-110-010.png",
    ⵠΔΔⲆⲆᐃΔ: "img/day-river010-110-110.png",
    ⵠⵠⵠⲆᐃⲆᐃ: "img/day-river010-111-000.png",
    ᐃⵠᐃⵠⲆⵠΔ: "img/day-river010-111-010.png",
    ᐃⲆΔΔⵠⲆⲆ: "img/day-river010-111-011.png",
    ᐃΔᐃΔΔᐃⲆ: "img/day-river010-111-110.png",
    ᐃΔᐃⵠⵠΔⵠ: "img/day-river010-111-111.png",
    ᐃᐃᐃᐃΔᐃᐃ: "img/day-river011-011-000.png",
    ᐃᐃΔᐃⵠⲆⵠ: "img/day-river011-011-010.png",
    ⲆⵠΔᐃᐃᐃᐃ: "img/day-river011-011-011.png",
    ᐃΔᐃⲆⵠΔⲆ: "img/day-river011-111-000.png",
    ΔΔⲆᐃⲆⲆⲆ: "img/day-river011-111-010.png",
    ⲆⲆᐃⵠᐃⲆⵠ: "img/day-river011-111-011.png",
    ⵠᐃΔⲆⵠⲆΔ: "img/day-river011-111-110.png",
    ᐃⵠᐃᐃⵠΔⲆ: "img/day-river011-111-111.png",
    ᐃΔᐃᐃᐃΔⵠ: "img/day-river110-110-000.png",
    ⵠᐃⵠⲆⲆⵠᐃ: "img/day-river110-110-010.png",
    ⲆᐃⵠΔⲆⵠⵠ: "img/day-river110-110-110.png",
    ⵠᐃΔᐃⲆⲆᐃ: "img/day-river110-111-000.png",
    ΔᐃΔⲆⲆⲆⵠ: "img/day-river110-111-010.png",
    ⵠⵠⲆᐃⵠΔⲆ: "img/day-river110-111-011.png",
    ⲆⵠΔⵠⲆⲆⵠ: "img/day-river110-111-110.png",
    ΔᐃΔⵠⵠᐃⵠ: "img/day-river110-111-111.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/day-river111-111-011.png",
    ᐃⵠΔΔΔⲆⵠ: "img/day-river111-111-110.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/day-river111-111-011.png",
    ⵠᐃΔⲆⵠΔⲆ: "img/day-river111-111-000.png",
    ⲆⵠⵠⵠⵠΔⲆ: "img/day-river111-111-111.png",
    ᐃⵠᐃⵠΔⵠᐃ: "img/day-river111-111-010.png",
    ᐃⲆⵠΔᐃⵠΔ: "img/night-river000-010-000.png",
    ᐃᐃⵠⵠᐃᐃΔ: "img/night-river000-010-010.png",
    ᐃΔⵠⲆᐃΔΔ: "img/night-river000-011-000.png",
    ⲆΔⵠΔⵠΔΔ: "img/night-river000-011-010.png",
    ΔⲆⲆⲆΔⲆΔ: "img/night-river000-011-011.png",
    ΔᐃⲆΔΔᐃⵠ: "img/night-river000-110-000.png",
    ⲆΔⵠⲆⵠΔⲆ: "img/night-river000-110-010.png",
    ΔΔⲆⵠⲆⵠⵠ: "img/night-river000-110-110.png",
    ⲆⲆᐃᐃΔᐃΔ: "img/night-river000-111-000.png",
    ΔΔⲆⲆⵠⵠΔ: "img/night-river000-111-010.png",
    ΔⲆⲆⲆΔⲆᐃ: "img/night-river000-111-011.png",
    ᐃᐃⲆΔⵠΔΔ: "img/night-river000-111-110.png",
    ⲆΔⵠⲆⲆᐃᐃ: "img/night-river000-111-111.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/night-river010-010-000.png",
    ⵠⵠⵠⲆⲆΔⲆ: "img/night-river010-010-010.png",
    ᐃⵠⵠⲆΔᐃΔ: "img/night-river010-011-000.png",
    ⵠΔⲆⲆᐃⵠΔ: "img/night-river010-011-010.png",
    ᐃᐃⵠᐃⵠⲆΔ: "img/night-river010-011-011.png",
    ⲆⲆᐃⵠⵠᐃⲆ: "img/night-river010-110-000.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/night-river010-110-010.png",
    ⵠᐃⲆⵠⲆΔΔ: "img/night-river010-110-110.png",
    ᐃΔⵠⲆⵠⵠᐃ: "img/night-river010-111-000.png",
    ⵠΔᐃΔᐃΔᐃ: "img/night-river010-111-010.png",
    ⵠⲆⲆⵠᐃᐃⲆ: "img/night-river010-111-011.png",
    ᐃⲆᐃⵠΔᐃᐃ: "img/night-river010-111-110.png",
    ⵠⵠΔⵠᐃΔΔ: "img/night-river010-111-111.png",
    ⲆⲆⲆΔⵠⵠᐃ: "img/night-river011-011-000.png",
    ⵠⵠΔᐃᐃᐃᐃ: "img/night-river011-011-010.png",
    ⵠⲆΔⲆᐃⵠⵠ: "img/night-river011-011-011.png",
    ΔⲆⲆᐃⵠⲆᐃ: "img/night-river011-111-000.png",
    ΔΔⵠΔⲆⵠⵠ: "img/night-river011-111-010.png",
    ⲆᐃᐃⵠⲆⲆᐃ: "img/night-river011-111-011.png",
    ⵠⲆⵠⲆΔⵠΔ: "img/night-river011-111-110.png",
    ⵠⲆⵠⵠΔᐃⵠ: "img/night-river011-111-111.png",
    ΔᐃⵠΔⲆⵠΔ: "img/night-river110-110-000.png",
    ⵠᐃΔᐃΔᐃⲆ: "img/night-river110-110-010.png",
    Ⲇⵠᐃⵠᐃᐃᐃ: "img/night-river110-110-110.png",
    ᐃΔⲆⵠⲆΔΔ: "img/night-river110-111-000.png",
    ᐃⲆᐃⲆᐃⵠⲆ: "img/night-river110-111-010.png",
    ⲆᐃΔᐃΔⵠᐃ: "img/night-river110-111-011.png",
    ⵠⵠⲆᐃΔⲆⲆ: "img/night-river110-111-110.png",
    ⲆΔⵠᐃⲆⵠΔ: "img/night-river110-111-111.png",
    ⵠⵠΔⵠΔᐃΔ: "img/night-river111-111-011.png",
    ᐃⵠⵠᐃᐃᐃⵠ: "img/night-river111-111-110.png",
    ⵠⵠΔⵠΔᐃΔ: "img/night-river111-111-011.png",
    ΔᐃⲆΔΔΔⲆ: "img/night-river111-111-000.png",
    ⲆⲆⵠᐃᐃⲆΔ: "img/night-river111-111-111.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/night-river111-111-010.png",
    ᐃⲆⵠΔΔⲆᐃ: "img/day-pebblecompo1.png",
    ΔΔΔᐃᐃ: "img/day-pebblecompo2.png",
    Ⲇⵠⵠᐃᐃ: "img/day-pebblecompo3.png",
    ᐃⵠⵠᐃⵠⵠⵠ: "img/day-pebblecompo4.png",
    ⲆᐃΔⲆⵠ: "img/day-pebblecompo5.png",
    ⵠΔΔⵠᐃ: "img/day-pebblecompo6.png",
    ⵠⵠⵠⵠᐃ: "img/day-pebblecompo7.png",
    ⲆⲆΔᐃᐃΔⵠ: "img/day-pebblecompo8.png",
    ΔΔᐃᐃᐃᐃⲆ: "img/day-pebblecompo9.png",
    ΔΔΔⲆΔⵠΔ: "img/day-pebblecompo10.png",
    ⵠᐃⲆⵠᐃ: "img/day-pebblecompo11.png",
    ⲆⵠᐃᐃΔΔᐃ: "img/day-pebblecompo12.png",
    ⲆⵠΔᐃⵠΔΔ: "img/day-pebblecompo13.png",
    ⵠⲆⲆⲆΔⲆⵠ: "img/day-pebblecompo14.png",
    ΔΔΔⵠᐃΔΔ: "img/day-pebblecompo15.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/day-pebblecompo16.png",
    ΔᐃⲆᐃΔ: "img/day-pebblecompo17.png",
    ᐃⲆᐃΔᐃᐃᐃ: "img/day-pebblecompo18.png",
    ⵠᐃⵠⵠⵠΔΔ: "img/day-pebblecompo19.png",
    ᐃⵠⲆⲆⵠ: "img/day-pebblecompo20.png",
    ΔΔΔᐃⵠ: "img/day-pebblecompo21.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/day-pebblecompo22.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/day-pebblecompo23.png",
    ⲆⵠᐃⲆΔᐃᐃ: "img/day-pebblecompo24.png",
    ⲆΔᐃⵠⲆ: "img/day-pebblecompo25.png",
    ΔᐃᐃᐃΔ: "img/day-pebblecompo26.png",
    ⲆⲆⵠᐃΔⲆⲆ: "img/day-pebblecompo27.png",
    ⵠΔᐃⲆⲆ: "img/day-pebblecompo28.png",
    ᐃᐃΔᐃΔΔⲆ: "img/night-pebblecompo1.png",
    ᐃⵠⵠΔΔ: "img/night-pebblecompo2.png",
    ⵠΔᐃⲆΔ: "img/night-pebblecompo3.png",
    ⵠΔⵠΔⵠⲆΔ: "img/night-pebblecompo4.png",
    ⵠᐃⲆΔⵠ: "img/night-pebblecompo5.png",
    ᐃⲆⵠΔᐃ: "img/night-pebblecompo6.png",
    Ⲇᐃⵠᐃⵠ: "img/night-pebblecompo7.png",
    ⵠⵠⵠᐃⵠⲆⵠ: "img/night-pebblecompo8.png",
    ⲆΔΔⵠⲆΔⲆ: "img/night-pebblecompo9.png",
    ΔⵠΔⲆⵠᐃⵠ: "img/night-pebblecompo10.png",
    ᐃᐃᐃᐃⲆ: "img/night-pebblecompo11.png",
    ⵠⵠΔΔᐃΔⵠ: "img/night-pebblecompo12.png",
    ⲆΔΔⲆᐃⲆΔ: "img/night-pebblecompo13.png",
    ᐃⲆⵠΔⲆΔⵠ: "img/night-pebblecompo14.png",
    ⲆΔⵠⵠⲆⵠᐃ: "img/night-pebblecompo15.png",
    ⲆΔⵠᐃⵠᐃⲆ: "img/night-pebblecompo16.png",
    ⵠⵠⵠΔᐃ: "img/night-pebblecompo17.png",
    ᐃⲆⲆᐃⲆΔⵠ: "img/night-pebblecompo18.png",
    ⲆᐃΔⵠΔⵠΔ: "img/night-pebblecompo19.png",
    ΔΔᐃⲆⲆ: "img/night-pebblecompo20.png",
    ᐃΔⲆᐃⵠ: "img/night-pebblecompo21.png",
    ⵠΔΔⵠΔⵠⵠ: "img/night-pebblecompo22.png",
    ⲆᐃΔⵠⲆᐃⲆ: "img/night-pebblecompo23.png",
    ᐃⵠΔΔⵠᐃᐃ: "img/night-pebblecompo24.png",
    ΔⵠⲆΔᐃ: "img/night-pebblecompo25.png",
    ΔΔΔΔⵠ: "img/night-pebblecompo26.png",
    ΔᐃΔᐃΔΔᐃ: "img/night-pebblecompo27.png",
    ⲆᐃΔΔΔ: "img/night-pebblecompo28.png",
    ⵠⵠⵠⲆⵠᐃⲆ: "img/day-baby-mammoth.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/day-baby-mammoth-tamed.png",
    ⲆⵠⵠⵠΔᐃⲆ: "img/day-baby-mammoth-angry.png",
    ᐃⲆⲆⲆΔΔⲆ: "img/night-baby-mammoth.png",
    ᐃΔΔⲆΔΔΔ: "img/night-baby-mammoth-tamed.png",
    ᐃⵠΔⵠⲆⲆⲆ: "img/night-baby-mammoth-angry.png",
    ΔᐃᐃΔⵠᐃΔ: "img/inv-mammoth-out.png",
    ⵠⵠᐃΔΔΔⵠ: "img/inv-mammoth-in.png",
    ΔⵠⲆⵠⵠᐃᐃ: "img/inv-mammoth-click.png",
    ᐃΔⲆⵠⵠⲆᐃ: "img/hurt-baby-mammoth.png",
    ⲆⲆⵠⵠⵠⵠΔ: "img/baby-mammoth-step.png",
    ᐃⲆΔⲆᐃⲆⲆ: "img/day-flower-hat.png",
    ΔⵠⲆⲆᐃᐃᐃ: "img/night-flower-hat.png",
    ᐃⲆᐃΔΔΔⲆ: "img/inv-flower-hat-out.png",
    ⵠΔⵠΔⲆⵠΔ: "img/inv-flower-hat-in.png",
    ⵠⲆΔⲆᐃΔΔ: "img/inv-flower-hat-click.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/day-fur-hat.png",
    ⲆⲆΔⲆΔⲆᐃ: "img/night-fur-hat.png",
    ⵠⲆΔΔΔⲆΔ: "img/inv-fur-hat-out.png",
    ᐃⵠᐃⵠΔΔΔ: "img/inv-fur-hat-in.png",
    ⲆΔⲆⵠⲆⵠⵠ: "img/inv-fur-hat-click.png",
    ⲆᐃⵠΔⲆᐃᐃ: "img/day-mammoth.png",
    ⲆᐃΔⲆᐃⲆΔ: "img/night-mammoth.png",
    ⲆΔᐃⵠⵠΔⲆ: "img/hurt-mammoth.png",
    ⵠⵠᐃⲆΔⲆΔ: "img/inv-mammoth-fur-out.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/inv-mammoth-fur-in.png",
    ⵠⲆⲆᐃΔᐃⲆ: "img/inv-mammoth-fur-click.png",
    ⲆⵠΔᐃⵠⵠΔ: "img/inv-wood-bow-out.png",
    ΔΔⵠΔΔᐃⵠ: "img/inv-wood-bow-in.png",
    ᐃⵠΔᐃⲆⵠⲆ: "img/inv-wood-bow-click.png",
    ⲆΔⲆⲆΔΔⲆ: "img/inv-wood-arrow-out.png",
    ΔᐃΔⲆⵠᐃⲆ: "img/inv-wood-arrow-in.png",
    ᐃΔⲆⲆΔⵠⲆ: "img/inv-wood-arrow-click.png",
    ᐃⵠΔᐃⵠⲆΔ: "img/day-wood-bow2.png",
    ⵠⵠⵠΔⵠᐃᐃ: "img/night-wood-bow2.png",
    ΔⵠⵠⲆᐃᐃᐃ: "img/day-wood-arrow.png",
    ᐃΔⲆⲆΔΔⵠ: "img/night-wood-arrow.png",
    ⵠᐃⲆⵠᐃⲆⵠ: "img/inv-stone-bow-out.png",
    ⲆᐃᐃᐃᐃⲆᐃ: "img/inv-stone-bow-in.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/inv-stone-bow-click.png",
    ᐃΔΔᐃᐃⵠⵠ: "img/inv-stone-arrow-out.png",
    ⵠΔᐃᐃⲆⵠⵠ: "img/inv-stone-arrow-in.png",
    ΔⲆⵠᐃⲆΔⵠ: "img/inv-stone-arrow-click.png",
    ᐃⵠᐃⵠΔⲆᐃ: "img/day-stone-bow.png",
    ᐃᐃⲆΔⵠⲆⲆ: "img/night-stone-bow.png",
    ΔⲆⲆᐃⲆⵠΔ: "img/day-stone-arrow.png",
    ΔⵠᐃⲆⵠⲆΔ: "img/night-stone-arrow.png",
    ⲆⵠΔⲆΔᐃΔ: "img/inv-gold-bow-out.png",
    ΔΔᐃᐃⲆΔΔ: "img/inv-gold-bow-in.png",
    ⵠᐃⵠΔΔΔᐃ: "img/inv-gold-bow-click.png",
    ᐃΔᐃⲆⲆⲆᐃ: "img/inv-gold-arrow-out.png",
    ΔⲆⵠΔⵠⲆⲆ: "img/inv-gold-arrow-in.png",
    ᐃΔⲆΔⵠⲆⵠ: "img/inv-gold-arrow-click.png",
    ΔⵠΔⲆᐃᐃⲆ: "img/day-gold-bow.png",
    ⲆⵠⵠᐃᐃᐃⲆ: "img/night-gold-bow.png",
    ᐃⵠⵠⲆⲆᐃⵠ: "img/day-gold-arrow.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/night-gold-arrow.png",
    ⲆⲆⵠⲆⲆᐃⲆ: "img/inv-diamond-bow-out.png",
    ᐃΔⲆⵠᐃⲆᐃ: "img/inv-diamond-bow-in.png",
    ⲆΔΔⵠⵠΔⵠ: "img/inv-diamond-bow-click.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/inv-diamond-arrow-out.png",
    ⵠⲆᐃᐃΔⲆΔ: "img/inv-diamond-arrow-in.png",
    ⵠᐃⵠΔⵠΔⵠ: "img/inv-diamond-arrow-click.png",
    ΔΔΔⲆⲆᐃᐃ: "img/day-diamond-bow.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/night-diamond-bow.png",
    ⵠⲆⵠⵠᐃᐃΔ: "img/day-diamond-arrow.png",
    ⵠᐃΔᐃᐃⵠᐃ: "img/night-diamond-arrow.png",
    ⵠⵠⲆⵠᐃΔⲆ: "img/inv-amethyst-bow-out.png",
    ΔⲆⲆΔⵠⲆⲆ: "img/inv-amethyst-bow-in.png",
    ⲆⵠⲆΔᐃᐃᐃ: "img/inv-amethyst-bow-click.png",
    ⲆΔᐃΔΔⲆⲆ: "img/inv-amethyst-arrow-out.png",
    ⵠⲆᐃΔᐃᐃᐃ: "img/inv-amethyst-arrow-in.png",
    ΔΔⵠⲆΔΔⵠ: "img/inv-amethyst-arrow-click.png",
    ⲆΔΔⵠΔᐃᐃ: "img/day-amethyst-bow.png",
    ᐃΔⵠΔᐃᐃᐃ: "img/night-amethyst-bow.png",
    Δⵠⵠⵠᐃᐃᐃ: "img/day-amethyst-arrow.png",
    ⲆΔⲆⲆⵠᐃΔ: "img/night-amethyst-arrow.png",
    ᐃΔⲆᐃⵠⵠΔ: "img/inv-dragon-bow-out.png",
    ⲆⵠⲆⲆΔΔⵠ: "img/inv-dragon-bow-in.png",
    ΔⵠᐃⵠⲆᐃΔ: "img/inv-dragon-bow-click.png",
    ⲆⵠⲆΔᐃΔᐃ: "img/inv-dragon-arrow-out.png",
    ⵠᐃᐃⲆⵠᐃΔ: "img/inv-dragon-arrow-in.png",
    ᐃⵠΔᐃⵠΔᐃ: "img/inv-dragon-arrow-click.png",
    ΔⵠⵠᐃΔⲆⵠ: "img/day-dragon-bow.png",
    ΔᐃⵠᐃⲆⲆⵠ: "img/night-dragon-bow.png",
    ⲆⲆⵠᐃΔⲆΔ: "img/day-dragon-arrow.png",
    ΔΔⵠⵠⲆⲆⲆ: "img/night-dragon-arrow.png",
    ΔΔΔⲆⵠΔΔ: "img/inv-reidite-bow-out.png",
    ΔᐃⵠⲆΔⵠⵠ: "img/inv-reidite-bow-in.png",
    ΔⲆⵠᐃⵠΔⵠ: "img/inv-reidite-bow-click.png",
    ᐃⵠΔⲆⲆᐃⲆ: "img/inv-reidite-arrow-out.png",
    ΔⲆⵠᐃᐃⲆΔ: "img/inv-reidite-arrow-in.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/inv-reidite-arrow-click.png",
    ⵠΔⲆⲆⲆⲆᐃ: "img/day-reidite-bow.png",
    ⲆΔⵠⲆᐃⵠⲆ: "img/night-reidite-bow.png",
    ΔⲆⵠΔⵠΔΔ: "img/day-reidite-arrow.png",
    ᐃᐃⲆΔΔⲆᐃ: "img/night-reidite-arrow.png",
    ᐃⵠᐃⵠⵠΔⲆ: "img/inv-wooden-axe-out.png",
    ΔΔⵠᐃⲆᐃⲆ: "img/inv-wooden-axe-in.png",
    Δⵠᐃⵠᐃⵠⵠ: "img/inv-wooden-axe-click.png",
    ⵠⵠΔⲆⲆΔΔ: "img/day-wooden-axe.png",
    ᐃΔⲆᐃΔΔⲆ: "img/night-wooden-axe.png",
    ⵠⵠⵠᐃⵠⲆᐃ: "img/inv-stone-axe-out.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/inv-stone-axe-in.png",
    ᐃⲆᐃΔⵠΔᐃ: "img/inv-stone-axe-click.png",
    ⲆⲆΔΔⵠⵠΔ: "img/day-stone-axe.png",
    ᐃΔⲆⵠⲆⵠⲆ: "img/night-stone-axe.png",
    ΔΔΔⵠⲆⲆⵠ: "img/inv-golden-axe-out.png",
    ⲆΔⲆᐃΔⵠⲆ: "img/inv-golden-axe-in.png",
    ᐃᐃᐃⲆΔΔⵠ: "img/inv-golden-axe-click.png",
    ⵠΔΔΔᐃⲆΔ: "img/day-golden-axe.png",
    ⲆΔⲆΔΔⲆⲆ: "img/night-golden-axe.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/inv-diamond-axe-out.png",
    ᐃⲆᐃΔⲆᐃᐃ: "img/inv-diamond-axe-in.png",
    ΔᐃΔⲆⵠΔⵠ: "img/inv-diamond-axe-click.png",
    ᐃᐃⲆΔⲆᐃΔ: "img/day-diamond-axe.png",
    ⵠᐃⲆᐃᐃᐃᐃ: "img/night-diamond-axe.png",
    ⵠΔⵠⲆΔᐃⵠ: "img/inv-amethyst-axe-out.png",
    ⲆᐃᐃΔⵠⵠⵠ: "img/inv-amethyst-axe-in.png",
    ΔⵠⵠᐃⵠⵠⲆ: "img/inv-amethyst-axe-click.png",
    ⲆᐃΔᐃΔΔⵠ: "img/day-amethyst-axe.png",
    ᐃᐃⲆᐃΔⲆⲆΔⲆ: "img/night-amethyst-axe.png",
    ⵠᐃⵠⲆᐃΔΔⲆᐃ: "img/inv-reidite-axe-out.png",
    ΔᐃⲆΔⲆΔⲆⲆⵠ: "img/inv-reidite-axe-in.png",
    ΔⲆⲆΔⲆⲆΔⵠⵠ: "img/inv-reidite-axe-click.png",
    ⵠΔΔⵠⲆΔⲆⲆⲆ: "img/day-reidite-axe.png",
    ΔᐃΔⵠⵠⲆᐃΔⵠ: "img/night-reidite-axe.png",
    ⵠⲆⵠᐃΔⵠΔ: "img/bandage-activated.png",
    ⲆΔᐃΔᐃΔᐃ: "img/auto-feed.png",
    ⲆⵠᐃΔΔᐃᐃ: "img/stop-regeneration.png",
    ⲆᐃⲆΔΔΔⲆ: "img/stop-regeneration2.png",
    ΔΔⵠΔⲆΔⲆⵠᐃ: "img/day-wood-platform.png",
    ⵠⲆΔᐃΔⵠⲆᐃⵠ: "img/night-wood-platform.png",
    ⵠΔⲆΔᐃⵠⵠⲆⲆ: "img/inv-wood-platform-in.png",
    ⲆⲆΔΔΔⲆⲆⵠΔ: "img/inv-wood-platform-out.png",
    ΔⲆⲆⵠⲆⲆᐃⲆΔ: "img/inv-wood-platform-click.png",
    ⵠⲆⵠⵠⵠᐃᐃⲆΔ: "img/day-wood-shield.png",
    ⲆᐃⵠᐃⲆΔΔᐃΔ: "img/night-wood-shield.png",
    ⲆⲆⲆⵠΔⵠᐃᐃΔ: "img/day-stone-shield.png",
    ⲆΔΔⵠⵠⵠⵠⵠᐃ: "img/night-stone-shield.png",
    ΔΔΔⵠⲆⵠΔⵠⵠ: "img/day-gold-shield.png",
    ⲆᐃⲆΔⲆⲆᐃΔΔ: "img/night-gold-shield.png",
    ᐃⵠΔⲆᐃⲆᐃⲆΔ: "img/day-diamond-shield.png",
    ΔⵠΔΔⵠᐃⲆᐃⵠ: "img/night-diamond-shield.png",
    ⵠᐃᐃⵠⵠᐃΔΔⲆ: "img/day-amethyst-shield.png",
    ⵠᐃΔᐃⵠΔΔⵠΔ: "img/night-amethyst-shield.png",
    ΔⲆᐃᐃⲆⲆᐃⲆΔ: "img/day-reidite-shield.png",
    ⲆⵠⲆⵠᐃᐃⵠⵠᐃ: "img/night-reidite-shield.png",
    ΔⵠⲆⲆᐃΔᐃᐃᐃ: "img/inv-wood-shield-in.png",
    ⵠⲆᐃᐃⲆⵠⲆΔⲆ: "img/inv-wood-shield-out.png",
    ⲆⵠᐃⲆⵠⲆᐃⲆⵠ: "img/inv-wood-shield-click.png",
    ⵠΔΔΔᐃᐃⲆᐃᐃ: "img/inv-stone-shield-in.png",
    ⲆΔⵠᐃᐃⵠᐃⲆⲆ: "img/inv-stone-shield-out.png",
    ᐃΔⵠⵠⲆΔⵠⲆⵠ: "img/inv-stone-shield-click.png",
    ⲆᐃᐃΔΔⲆΔⲆᐃ: "img/inv-gold-shield-in.png",
    ⵠᐃⵠⵠΔΔΔⵠᐃ: "img/inv-gold-shield-out.png",
    ᐃᐃᐃΔΔΔⵠΔΔ: "img/inv-gold-shield-click.png",
    ᐃΔΔⵠΔⵠΔΔΔ: "img/inv-diamond-shield-in.png",
    ΔⲆΔΔⲆⵠᐃⵠΔ: "img/inv-diamond-shield-out.png",
    ᐃⲆᐃᐃᐃⲆⲆᐃΔ: "img/inv-diamond-shield-click.png",
    ⲆⲆⲆⲆΔΔᐃⲆⲆ: "img/inv-amethyst-shield-in.png",
    ⵠⵠΔⲆΔΔΔΔᐃ: "img/inv-amethyst-shield-out.png",
    ⵠΔᐃⲆⲆᐃⲆΔᐃ: "img/inv-amethyst-shield-click.png",
    ⵠⲆΔᐃⵠΔⲆΔⵠ: "img/inv-reidite-shield-in.png",
    ⲆᐃⲆᐃⵠⲆΔⲆⲆ: "img/inv-reidite-shield-out.png",
    ⵠΔᐃΔⲆΔⵠᐃᐃ: "img/inv-reidite-shield-click.png",
    ⲆⲆⲆⵠᐃᐃᐃᐃⵠ: "img/day-machete.png",
    ⵠᐃⲆᐃΔᐃⵠⲆⲆ: "img/night-machete.png",
    ⵠᐃᐃΔᐃⵠᐃⵠⵠ: "img/inv-machete-in.png",
    ᐃᐃⵠΔⲆᐃᐃⲆΔ: "img/inv-machete-out.png",
    ⵠⲆⵠᐃⵠΔᐃⵠⲆ: "img/inv-machete-click.png"
  };
  ⲆΔⵠᐃᐃᐃⲆ = [{}];
  ⲆΔⵠᐃᐃᐃⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ΔⲆΔⲆΔΔⵠ = {};
  ⵠⲆⲆⲆⲆΔⵠⵠᐃ = {};
  const hd = 18;
  for (var $b in ΔⲆ) {
    ΔⲆΔⲆΔΔⵠ[$b] = ΔⲆ[$b];
  }
  function gd(a) {
    return as(a, 42473);
  }
  const ld = ib;
  Ⲇⵠ = [];
  const ud = 100;
  ⵠⲆⲆ = {};
  ⵠⲆⲆ.ⲆⲆⵠΔΔ = 0;
  const bd = 10;
  ⵠⲆⲆ.ᐃⲆΔⲆ = 1;
  ⵠⲆⲆ.ᐃⵠᐃᐃ = 2;
  ⵠⲆⲆ.ᐃⵠⵠᐃ = 3;
  const dd = 1;
  ⵠⲆⲆ.ⵠⲆᐃᐃ = 4;
  ⵠⲆⲆ.ᐃΔⲆᐃ = 5;
  ⵠⲆⲆ.Ⲇⵠⵠᐃ = 6;
  ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ = 7;
  const vd = 17;
  ⵠⲆⲆ.ΔⲆᐃⵠᐃ = 8;
  const md = 7;
  ᐃᐃⵠⵠ = {};
  Δⵠⵠⵠ = [];
  ⵠΔᐃΔⵠΔⲆ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -1;
  };
  const cd = 1;
  var pd = [];
  function Ht(a, b) {
    for (var c = 0; pd.length > c; c += b) {
      var d = pd[c];
      if (a === d[0]) {
        zd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const Td = 2;
  const fd = 18;
  function zd(b, c, d, e) {
    var f = Δⵠⵠⵠ[b];
    if (f !== undefined) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / Fx.ᐃⵠⲆΔΔ;
        var m = d * 193 / Fx.ΔᐃⵠⵠⲆ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        Ⲇⵠ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / Fx.ᐃⵠⲆΔΔ;
        m = d * 600 / Fx.ΔᐃⵠⵠⲆ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        Ⲇⵠ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  function yd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  function wd(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; j < c; j++) {
      i.push({
        x: Math.sin(j * f) * d,
        y: d * Math.cos(j * f)
      });
      var k = i.length;
      a.push(ⵠᐃΔᐃ.ΔⲆᐃⵠⵠᐃᐃ(i[k - 2], i[k - 1]));
    }
    a.push(ⵠᐃΔᐃ.ΔⲆᐃⵠⵠᐃᐃ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; j < c; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  function Pd(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, Math.PI * 2 * e);
  }
  function kd(b, c, d, e, f, g) {
    if (g * 2 > e) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  function Ad(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function xd(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  ᐃΔⲆᐃᐃᐃⲆⵠΔ = function () {
    for (var b = 0; b < 2; b++) {
      Ⲇⵠ[818][b].clearRect(0, 0, 193, 193);
      Ⲇⵠ[818][b].drawImage(Δⵠⵠⵠ.MAP[b], 0, 0, 193, 193);
      Ⲇⵠ[819][b].clearRect(0, 0, 600, 600);
      Ⲇⵠ[819][b].drawImage(Δⵠⵠⵠ.MAP[b], 0, 0, 600, 600);
      for (var c = Fx.ⵠⵠᐃⲆ.length - 1; c >= 0; c--) {
        var d = Fx.ⵠⵠᐃⲆ[c];
        var f = d.x1 * 193 / (Fx.ᐃⵠⲆΔΔ * 100);
        var j = d.y1 * 193 / (Fx.ΔᐃⵠⵠⲆ * 100);
        var k = d.w * 193 / (Fx.ᐃⵠⲆΔΔ * 100);
        var m = d.ⲆΔΔ * 193 / (Fx.ΔᐃⵠⵠⲆ * 100);
        var p = d.x1 * 600 / (Fx.ᐃⵠⲆΔΔ * 100);
        var q = d.y1 * 600 / (Fx.ΔᐃⵠⵠⲆ * 100);
        var u = d.w * 600 / (Fx.ᐃⵠⲆΔΔ * 100);
        var v = d.ⲆΔΔ * 600 / (Fx.ΔᐃⵠⵠⲆ * 100);
        if (Fx.ⵠΔⲆⵠᐃ === d.ΔⲆᐃ) {
          Ⲇⵠ[818][b].drawImage(Δⵠⵠⵠ.FOREST[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(Δⵠⵠⵠ.FOREST[b], p, q, u, v);
        }
        if (d.ΔⲆᐃ === Fx.ᐃⵠⲆⲆⵠⵠⵠ) {
          Ⲇⵠ[818][b].drawImage(Δⵠⵠⵠ.WINTER[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(Δⵠⵠⵠ.WINTER[b], p, q, u, v);
        }
        if (Fx.ΔᐃᐃⲆᐃⲆⲆ === d.ΔⲆᐃ) {
          Ⲇⵠ[818][b].drawImage(Δⵠⵠⵠ.LAVA[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(Δⵠⵠⵠ.LAVA[b], p, q, u, v);
        }
        if (Fx.ᐃⲆᐃᐃΔⵠⲆ === d.ΔⲆᐃ) {
          Ⲇⵠ[818][b].drawImage(Δⵠⵠⵠ.CAVE[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(Δⵠⵠⵠ.CAVE[b], p, q, u, v);
        }
        if (d.ΔⲆᐃ === Fx.ⵠⲆΔΔⵠⲆⵠ) {
          Ⲇⵠ[818][b].drawImage(Δⵠⵠⵠ.DESERT[b], f, j, k, m);
          Ⲇⵠ[819][b].drawImage(Δⵠⵠⵠ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ΔᐃΔΔΔⲆᐃΔⵠ = function () {
    ᐃᐃⵠⵠ = {
      ⵠᐃΔⲆⵠ: [{
        id: 0,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠΔᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆⵠⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠⲆⲆΔⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆᐃⲆᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆΔΔᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔⲆⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔΔᐃᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⲆΔΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⵠΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⲆΔⲆΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⲆⲆΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⵠⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠᐃΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃⲆⲆΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔᐃⲆΔΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃΔⲆΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆⵠⵠⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔᐃᐃⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔΔᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆΔⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆΔⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆⵠⲆⲆⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔᐃᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⵠⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔᐃᐃⲆⲆᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃΔⵠᐃⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃᐃⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⲆᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆⲆᐃⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆΔⲆᐃⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⲆⵠΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⲆⲆⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔⲆⲆⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⲆΔⲆΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⵠΔΔΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃΔⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃⲆΔⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃΔᐃᐃΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃΔⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⵠⲆᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆⵠⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔᐃΔⵠⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⵠᐃⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆᐃᐃⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆⵠⲆΔΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⲆⲆᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃⲆᐃⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃᐃΔΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆᐃΔᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠᐃⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⲆᐃⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆⵠⵠᐃⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⵠΔᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆΔΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔⲆⵠⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔⲆΔⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⵠΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⲆⲆᐃⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⵠᐃⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔⵠⲆⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆΔᐃᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠΔΔⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⲆΔⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠΔΔⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃΔᐃᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃⵠΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆΔⵠⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃᐃⲆⲆᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⵠⵠᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆⵠᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃᐃᐃΔⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⵠⵠᐃⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⲆᐃⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃᐃΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⲆⵠⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃΔᐃⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆⵠΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆⵠᐃΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⵠⲆΔⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃΔⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⵠⵠⲆ: ΔⲆ.ΔᐃΔΔᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⵠΔΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔΔⲆᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⵠⲆΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆⵠᐃᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔⵠᐃⵠᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⲆⵠᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠⵠΔΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆⵠⲆⲆⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃΔⵠΔᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆΔⲆⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠΔⵠΔⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔᐃᐃⲆΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⲆᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⵠΔⲆⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆⵠᐃΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃⵠΔᐃᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⵠΔᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⵠⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃⵠΔᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⲆⲆⲆᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⲆΔᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔᐃⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⲆⵠⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃⵠΔᐃΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔΔΔΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⲆΔᐃⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔΔᐃᐃΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃΔⵠΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆᐃᐃⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⵠⲆᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔⲆⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔΔᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆᐃΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⵠⲆᐃⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⵠⲆⵠΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃᐃᐃⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔᐃⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃΔⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃᐃΔΔⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆⲆᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⲆΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔᐃⵠⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆᐃᐃᐃⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⲆⲆΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆᐃⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⵠⵠⵠⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆᐃΔⵠⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃΔΔⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠⵠᐃⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⵠⵠΔΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⲆᐃᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠΔⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠⵠⵠⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔᐃⵠΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔΔΔᐃⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⵠⵠⲆ: ΔⲆ.ΔᐃΔⲆΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔΔⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔᐃᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⲆⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃⲆⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⵠⲆⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆⲆΔΔΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⵠᐃᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆΔⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆⵠⵠᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔΔΔΔⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠᐃΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃΔΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆΔᐃΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆᐃᐃΔΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃⵠⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆᐃⵠⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃᐃⵠⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠⵠΔᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔΔᐃᐃⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠⲆᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⲆⵠΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆⲆⲆΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃᐃⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔⵠΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⲆᐃᐃⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⲆⵠΔΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔᐃⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃᐃΔᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆⲆⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⲆᐃᐃᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⵠⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆⲆΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆᐃⲆⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃΔⵠᐃΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⲆΔᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⲆΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔΔΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆⵠΔⲆⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃΔⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆΔⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⵠΔᐃΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⲆΔⲆᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⵠᐃⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⵠⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔΔⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃᐃⲆⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃΔᐃⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃⵠΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃᐃΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.Ⲇᐃᐃⵠᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠᐃΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆᐃᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃⵠⲆⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠΔⵠᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃᐃᐃᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⵠⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆᐃᐃⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆⵠⲆⵠⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⵠⵠⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⲆΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃΔΔᐃΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃⲆᐃⲆⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆΔΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⲆⵠᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⲆΔⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⵠⵠΔᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆᐃⵠᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⵠⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⵠᐃⵠⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆΔᐃΔⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃⲆΔⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆᐃᐃᐃᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆⲆᐃΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⵠⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠᐃΔᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆⲆΔᐃΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆⵠⲆⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⵠᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃΔⵠᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔⵠⲆⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⵠᐃᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⵠⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆΔᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⵠᐃᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃⵠΔⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⵠΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆⵠⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔⵠⲆⵠⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⲆⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆⵠᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃᐃΔΔΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆⵠⵠⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⲆᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠⲆⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔΔΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆⲆΔΔΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔΔⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃΔⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃᐃⵠⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃⲆᐃⵠΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⲆΔΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠⵠⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔᐃΔⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃΔⵠⵠⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⲆⲆᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃⵠΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⲆᐃΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⵠⲆⲆⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆΔⵠᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃΔΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔΔᐃⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆΔⲆᐃΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⲆΔΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⲆⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔⲆΔΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔᐃᐃᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⲆⲆⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠΔⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔΔⵠΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⲆΔΔΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆΔⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⵠΔⵠΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠΔⵠⲆⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆⵠᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⲆᐃⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠΔΔᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⵠⲆⲆⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆⲆⲆΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⲆΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔΔⵠᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃΔΔΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⵠΔⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⵠⵠⲆ: ΔⲆ.Ⲇⵠᐃᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆⵠΔΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.Ⲇᐃᐃᐃⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆᐃΔⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠᐃᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃⵠⵠⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔⲆᐃⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆΔᐃⲆΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⵠⲆᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆΔⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠΔⲆΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆᐃΔᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃᐃⵠⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔΔΔⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠⵠᐃⵠⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔᐃⲆⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃΔΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔᐃᐃᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔΔⲆⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆⲆⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔᐃᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃΔⵠΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔΔⵠⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠᐃΔⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆΔᐃⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆΔᐃⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔⵠⲆΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆᐃΔᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃᐃᐃⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃᐃⵠᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆΔⲆⵠᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃᐃⵠⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆΔⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠᐃΔⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆⲆⵠᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⵠⲆⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆⲆᐃⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠⲆᐃⲆⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆᐃᐃᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠᐃΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆᐃΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃⵠⵠⵠᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠΔⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆⲆⲆⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆΔⵠᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆᐃᐃᐃΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⵠᐃΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆⲆⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔᐃᐃᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃΔΔⵠⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔΔᐃΔⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆⵠⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆᐃⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔⲆΔⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆⲆΔⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆⲆⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆᐃΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃᐃⲆΔⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔᐃΔⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⲆⵠΔΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔᐃⵠᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠᐃΔⵠΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⲆᐃᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⵠⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔᐃⵠⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔⵠⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆΔⲆΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃⵠᐃⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠΔΔΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆⲆΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⵠⵠⲆ: ΔⲆ.ⲆΔΔΔΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆᐃᐃᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆᐃΔⲆᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⵠΔⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⵠⲆᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⲆⵠⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⵠⵠⲆⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆᐃⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆΔⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠⵠⲆⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠⲆΔⵠⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⲆⵠΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠᐃⵠⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔᐃⲆⵠᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃᐃⲆᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠΔᐃⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃⵠΔⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠΔΔΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠᐃᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⵠⵠⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⲆⵠⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⲆᐃΔⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃᐃⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃⵠⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃᐃⲆⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠᐃᐃⲆⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⲆⲆⲆⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔⵠᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⵠⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔᐃⲆΔΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔΔⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⵠⲆΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⲆⲆΔⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃᐃⵠΔᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⵠⵠⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠΔⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆΔᐃΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔΔᐃᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆⵠᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔⲆⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆⵠᐃᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⵠᐃⲆᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆᐃΔⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆᐃΔⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔᐃΔⲆᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠⵠᐃⲆᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆᐃⵠΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆΔⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔᐃΔᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⵠⲆᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃΔⵠⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆᐃΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔΔⲆᐃⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⲆⲆⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆΔᐃᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆⲆΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠΔⲆᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠΔⲆΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃᐃᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆΔⲆⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃⲆΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⵠΔᐃⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⲆⲆⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⲆᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠΔᐃᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔᐃⵠⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⵠⵠⲆⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠΔⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃᐃΔΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⲆⵠⵠᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔᐃⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠΔⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠΔⲆⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆⲆⲆΔᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠᐃⵠⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆⲆⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃᐃᐃΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔΔⲆᐃⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆᐃⲆΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃⲆᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠⲆⲆᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃᐃᐃᐃⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⵠᐃΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃᐃΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⵠⵠⵠᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃᐃⲆⲆⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⲆⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⲆⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃΔⵠΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔᐃᐃΔᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⲆᐃΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⲆᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠΔⵠⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆⲆⲆⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆΔΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⲆᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔΔᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔᐃⲆΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆⵠᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⲆⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠⲆⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⵠⵠᐃⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⵠⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆᐃⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃΔⵠⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃᐃⲆΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃⵠⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆⵠΔΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆΔⲆΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⵠΔⵠⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⵠⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆΔⲆⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔᐃⲆΔΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔᐃᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⲆⲆᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⵠⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃᐃΔⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⲆⲆᐃⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔᐃΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⲆΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⵠⵠⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠΔᐃΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆΔⲆⲆⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⵠⲆⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆⵠⲆⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆⵠⵠΔⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠΔⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃⲆᐃΔⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆᐃᐃΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⵠⲆΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⲆⲆᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆΔΔᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆΔᐃⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⲆⵠⵠⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠᐃΔⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃⲆⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⲆΔΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠΔⵠⲆᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⲆᐃΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠΔⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃΔΔⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⲆⲆⲆⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⵠⲆΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⲆⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⲆΔⵠⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⵠΔΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⲆΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆᐃⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⲆᐃⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃᐃⵠⵠΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆⲆᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠⵠΔᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔᐃᐃⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔΔⵠⵠΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⲆΔⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃⵠΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ΔᐃᐃΔⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃᐃΔⲆᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⲆⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⵠⲆᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⵠᐃΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆᐃⲆᐃⵠⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆΔᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆᐃⲆⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃΔⵠᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃᐃⵠΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⵠΔᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃΔⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆᐃᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔⵠᐃⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆⵠᐃⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃᐃⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃᐃᐃⲆᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆⲆΔⵠΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⵠⵠⲆ: ΔⲆ.ΔⲆΔΔᐃⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆⵠΔⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⵠΔⲆᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃΔΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔᐃⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⲆΔⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃⵠᐃⵠᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃⵠⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠⲆᐃᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃᐃⲆΔΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆᐃⲆᐃⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃΔΔᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃᐃΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃⵠⵠΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠⲆΔⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⲆᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆᐃᐃⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⲆⲆⲆⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⵠᐃⲆⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃΔᐃᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⵠⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃⵠΔⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠᐃⲆΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.Ⲇⵠⵠⵠⵠⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃⵠΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⲆᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃΔⵠⵠⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠᐃᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔⲆⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃⵠⲆⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⵠⲆⵠΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⵠⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃᐃⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃΔⵠⵠⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔΔⲆⵠⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⲆΔΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⵠⵠⲆ: ΔⲆ.ⲆΔΔⵠⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃⲆⲆⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⵠΔⲆΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃᐃⲆⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆΔᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆΔⵠΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃᐃⵠΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔΔᐃⲆΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆΔⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆⲆΔᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⵠᐃⵠⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔᐃⲆⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠΔΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆⵠᐃΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠⲆΔᐃΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⲆΔⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⵠΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠᐃΔΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃⵠΔΔⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⵠⵠⲆ: ΔⲆ.Ⲇⵠᐃᐃᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔΔⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔΔⵠⵠᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.Δᐃⵠᐃᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃᐃΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃᐃⵠΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔΔⵠᐃᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⵠᐃᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃΔᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠⵠⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔᐃⲆΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔΔⲆΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆΔⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃⵠⲆᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔⵠⵠⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠΔΔᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔⵠᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⲆᐃⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⵠⲆᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔΔⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⵠⵠⲆ: ΔⲆ.ΔⵠΔᐃⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠⵠΔᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔⲆⵠⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆⵠⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔⵠⲆᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔΔⲆⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆⵠΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠᐃΔⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠΔⲆⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃⲆⲆΔΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔᐃⲆᐃᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆΔⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃΔΔΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃᐃΔᐃΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⲆⵠⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⵠᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔᐃΔΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠΔⲆᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⵠΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔⵠⵠⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆⲆⲆⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃΔᐃⵠΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃΔᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃⵠⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠⲆΔΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔᐃΔⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⵠⲆΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃⵠΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠⲆᐃⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.Δⵠᐃᐃᐃᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⲆⵠΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⲆⲆⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃᐃⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔΔΔⵠⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⵠⵠⲆⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⵠᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃΔΔᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⲆΔⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⲆᐃΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠΔΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃⲆᐃⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆⲆⲆΔᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⵠⵠⵠᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔΔΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠⲆⲆⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆᐃⵠΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠᐃᐃⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔⵠΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔΔΔΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⲆⲆⲆᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔΔᐃⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠⲆⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⲆⵠⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠⵠᐃΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃΔⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠᐃΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃᐃΔⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆᐃΔⵠⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⵠᐃⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠΔⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔΔⲆⲆΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔᐃᐃⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⵠⲆΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃᐃΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔᐃⵠⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⵠᐃⲆⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⲆⲆⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⵠⵠⲆ: ΔⲆ.ΔⲆΔⲆⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔⲆΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⲆᐃΔⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔΔⵠΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔᐃΔΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⲆⵠᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⵠΔⲆⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃΔᐃᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⲆᐃᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆᐃᐃⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔᐃᐃⵠⲆΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆΔⵠΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠⲆᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃᐃΔⵠᐃⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆΔᐃⲆⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆΔⵠⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃᐃⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃΔⵠᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃᐃΔᐃᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆΔΔᐃᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠⲆᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔᐃᐃΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠⵠⲆⵠᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔΔΔΔⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⵠΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃΔⲆⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆΔⵠⲆᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⵠⲆᐃⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠΔⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔⲆⵠᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃⵠⵠᐃΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⵠᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆᐃΔΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.Ⲇᐃⵠⵠⵠᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠⵠᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔΔⲆⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃⲆⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔⵠⵠΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃΔⵠΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⵠⵠΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔⵠⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠⲆⲆⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆⲆⲆⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⵠᐃᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⵠⵠⲆ: ΔⲆ.Ⲇⵠⵠⵠⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠⵠⲆⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⵠᐃⵠΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔᐃᐃⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠᐃⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔⵠⵠΔⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔⵠᐃΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⵠⲆⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆΔΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃΔᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠᐃⲆⲆⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠᐃΔᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃΔⲆᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆΔⵠΔᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃᐃⵠᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃΔⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⲆⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⵠΔΔᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⵠᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃⲆΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆΔΔᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⵠᐃⵠⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⲆᐃⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⲆΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⵠⵠⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⲆᐃⵠⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃᐃΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⵠⲆΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠⵠⵠΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃᐃⵠⲆⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⵠᐃⲆⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⵠᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠᐃⲆᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆⲆᐃⵠⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃᐃᐃΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃΔⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔⲆΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆⲆᐃΔΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⲆⵠⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆⲆⲆᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃⵠᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔΔΔᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃⵠΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃⲆΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔᐃᐃⲆΔΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠΔᐃⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔᐃⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⵠⲆⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆΔⲆⵠⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠΔᐃⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⵠᐃᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆᐃⵠⵠⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⵠᐃⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃⲆΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⲆⵠᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆᐃΔΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⲆⲆᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠⲆⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆΔⲆⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠᐃⲆΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆⵠᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆᐃⵠⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠΔΔΔⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⵠⲆᐃⵠⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⲆⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔⵠⵠΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠᐃⵠΔⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠᐃⲆᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⵠⲆᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔᐃΔΔΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠⵠΔⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆⵠⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠⲆᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔⵠᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠⵠⵠⵠᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔⲆΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆᐃⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔⵠⵠⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⵠⲆⲆⲆΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃᐃⲆⵠΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃΔᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⵠⲆⲆⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃⲆⲆⲆⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆᐃΔᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠΔΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆⵠᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆᐃⵠᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆᐃⲆⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠⲆⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆΔΔⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃⵠᐃⵠᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠΔⵠᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⵠⵠⲆ: ΔⲆ.ΔᐃΔᐃⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆⵠⲆⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⵠᐃΔⵠᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⵠΔⲆⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⲆⲆⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠⵠΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠᐃⲆᐃⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⵠⲆΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔⲆΔΔΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔⲆΔΔⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⲆᐃΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⲆΔΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔⲆΔᐃΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠΔᐃⵠᐃⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆⲆⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔΔⵠⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆΔⲆⲆⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃᐃⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆⲆᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔΔΔⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔᐃᐃᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃᐃΔΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆΔΔΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔⵠⲆΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔᐃⵠⵠⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.Ⲇᐃᐃᐃᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⲆⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆᐃᐃΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠⲆⵠΔΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⲆΔᐃⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃᐃᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⵠⲆⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃΔΔⵠΔᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⵠⲆᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠⵠⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃⵠⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆΔⲆᐃⲆᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔΔᐃΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃᐃΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆⵠΔⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃⲆⵠΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⵠⲆⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃᐃᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔΔΔⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠⵠⵠⵠⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃᐃᐃᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔᐃΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆΔΔᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠΔⵠⲆᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆⵠⲆⲆⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆΔⲆⲆⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⵠᐃΔⵠⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃⲆⲆΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃᐃᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠⵠΔⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔⲆΔᐃⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠΔⵠⵠⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠⲆⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔᐃⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃⲆᐃᐃⵠΔⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆΔⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠᐃᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⲆΔᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃⲆⲆⵠΔ,
        ⵠΔⵠⵠ: ΔⲆ.ΔΔⵠΔⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆⲆᐃⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆⲆᐃᐃᐃᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔᐃΔᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆᐃᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃⲆΔⵠⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃⲆΔⵠᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⵠⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃⵠΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃΔΔⲆⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠΔᐃΔΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⵠⲆΔΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆⲆⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆΔΔᐃΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⲆⲆⲆⵠⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃⵠⵠⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃΔⵠΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃⵠⵠⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠᐃᐃΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ⲆΔᐃⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆΔΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔⲆᐃΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⵠⵠⵠᐃᐃⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆᐃⵠΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔΔΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆΔᐃⵠⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ΔⵠᐃΔᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃᐃᐃᐃⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⲆᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆⲆᐃᐃᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠᐃᐃᐃᐃΔⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⲆΔΔⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠⵠΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⵠⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔᐃᐃⵠⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆᐃⲆΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆᐃⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃᐃᐃⲆᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔⵠΔᐃΔ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠᐃⲆⲆᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆⵠⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⵠⵠⲆΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃᐃᐃΔΔᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ⵠⲆᐃᐃΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆⵠⵠⲆΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃΔΔᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆᐃᐃⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⵠⵠⲆ: ΔⲆ.ⲆΔΔⲆᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔᐃⲆⵠᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠΔΔⵠΔⲆⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ΔⲆᐃᐃⵠⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃⲆⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠΔᐃᐃⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ΔΔᐃⵠⲆⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃⲆΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⲆⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆⵠⵠⵠΔ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔⵠⲆᐃᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⵠⲆᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃᐃᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆⵠⲆΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆᐃΔᐃᐃⵠⲆ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆᐃΔⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⵠΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠⲆᐃΔᐃ,
        ΔⲆᐃⵠ: ΔⲆ.ᐃΔᐃⵠᐃⲆⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⵠΔⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ⵠⵠⲆ: ΔⲆ.ⲆΔΔΔⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃΔΔΔⵠ,
        ΔⲆᐃⵠ: ΔⲆ.ⵠⲆⵠΔⲆᐃⵠ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃΔⲆΔᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃᐃΔⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔⲆᐃⲆⲆ,
        ΔⲆᐃⵠ: ΔⲆ.ⲆΔᐃΔᐃⵠᐃ,
        ⵠΔⵠⵠ: ΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆ: "NotBonnie",
        name: "Cynder"
      }],
      ⲆⲆⲆⲆ: [{
        id: 0,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆᐃⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠΔⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔⵠⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆⲆᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆⵠⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⵠⵠⲆ: ΔⲆ.ΔⲆΔⲆᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃΔΔᐃᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔⲆⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⵠᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆΔⲆⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⲆΔⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆᐃⵠⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠᐃΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆⵠⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⲆΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔⲆⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆᐃⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔⵠⲆⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠⲆᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆⵠⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃᐃⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃΔΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠⵠΔᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔΔⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆⲆᐃᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⲆⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠⵠᐃᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⵠᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃΔⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⵠⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃⲆΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⵠΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⲆΔⲆⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃᐃΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⵠⲆⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⵠⵠⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃⵠⲆΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⵠⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⵠⲆΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠΔⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆᐃⲆⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃΔⵠⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⵠⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃΔΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⵠΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⲆⵠⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃΔᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔᐃᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃⲆΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆᐃⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆⵠᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠΔⵠⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⲆᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆᐃⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆΔᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⵠⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆᐃᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆᐃᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃᐃΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃᐃⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠΔΔⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⲆⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆΔΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆΔΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠΔⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠⲆⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔΔⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⲆΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔᐃⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆΔⵠΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃⲆΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔᐃΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆΔᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⲆⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⵠⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆⵠⲆΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⵠΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃⵠⲆⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆⵠⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆᐃⵠⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔⵠⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆⲆⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔᐃⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆΔⵠⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⲆⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃᐃᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⲆⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃΔΔⲆᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆᐃⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⵠΔΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃᐃΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆⵠᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⵠⵠⲆ: ΔⲆ.ΔⵠΔⲆᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆΔⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃᐃⵠᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆᐃᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃΔΔⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃΔΔᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃⵠΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔᐃⲆⵠⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠᐃᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠᐃⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆΔΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠΔⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆᐃᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠⵠⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔᐃᐃⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⵠΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃⵠᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆΔⵠⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⵠᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠΔⲆⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃᐃΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆᐃⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠΔΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⲆⵠⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔⵠⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃΔΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠΔⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠⲆⵠⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⲆᐃⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⵠΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠⲆⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔΔⲆⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⵠⲆⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠᐃⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆⲆⵠΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆᐃⵠⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠⲆᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆΔⲆᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔᐃᐃΔⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⵠⵠⲆ: ΔⲆ.ΔⲆΔⲆⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔⲆΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ⵠⵠⲆⵠᐃ: [{
        id: 0,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆⲆᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃΔⲆⲆⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆⵠⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆⵠᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆⵠⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔⵠⵠⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃΔⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃⵠᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃᐃᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆΔⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠⲆⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃⲆⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔⲆⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃⵠᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃⲆᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃᐃᐃⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠᐃΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔⲆΔⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃΔΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⲆΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃᐃⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠᐃⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃⲆⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔⵠⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⵠⵠⲆ: ΔⲆ.ⲆΔΔᐃᐃᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃⲆᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⵠⵠⲆ: ΔⲆ.ΔⵠΔⲆᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⲆⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⵠᐃᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⵠΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠᐃⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⲆΔⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⵠⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⵠⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⵠⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠΔᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆⲆⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔᐃⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔⵠⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃᐃΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⵠᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃΔᐃΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠⵠⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⵠⵠⲆ: ΔⲆ.ΔⵠΔΔᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆⵠᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠⲆⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔᐃΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔⲆΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔΔⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆᐃⲆᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠΔⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔᐃⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔⲆᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠᐃΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃᐃⵠᐃᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆᐃⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔΔᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃΔⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⵠⵠᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃᐃᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔⵠⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆⵠᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⵠⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⵠΔΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⵠᐃᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⲆᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⵠΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⵠΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔⲆΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃΔᐃΔᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⲆⵠⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃⵠⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔᐃΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔᐃΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⵠⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⵠᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃⲆΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⲆᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆΔⲆⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆᐃᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆᐃᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃᐃⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⲆⵠΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⵠⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⲆⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆᐃⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⵠⵠⲆ: ΔⲆ.Ⲇᐃⵠⵠᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⵠⲆⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⲆΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆᐃᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆⲆΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆⵠΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠⲆⲆⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠΔΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔⲆⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⵠⵠⲆ: ΔⲆ.ᐃΔᐃΔⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆΔᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠⲆⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⲆⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃΔΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆΔⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔⵠΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃⵠⵠΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃⲆᐃΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔⵠᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⲆⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.Δⵠⵠⵠᐃⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⵠΔⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⵠᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆΔⵠᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆΔᐃΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⵠΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃⲆⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔΔⲆΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⵠΔᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆⵠⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔⲆⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃⲆΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔᐃⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠⵠᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃΔⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃΔΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃᐃᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆΔⲆΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆΔⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆᐃᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆᐃᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔⲆΔⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⵠΔⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠΔᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔᐃⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠⵠᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃⲆᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆΔΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠΔᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠΔᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃΔⵠⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⵠⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠⵠⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆᐃΔⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃΔⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⲆⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⵠⵠⲆ: ΔⲆ.ΔⲆΔⵠⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⵠΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      Δⵠᐃᐃⵠ: [{
        id: 0,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔⲆⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⵠⵠⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃⲆΔᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠΔᐃΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔⲆⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠΔⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠⵠΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⵠⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠⵠᐃΔᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆΔⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃΔΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆΔᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃⵠᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃΔⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆⲆⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔΔⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆᐃⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠⲆᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃΔᐃⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃⵠⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠⲆⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⵠΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃⲆⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆⲆΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆΔⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔΔΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔᐃⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃΔⵠⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠⲆⲆⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆⵠΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⵠᐃⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃᐃᐃΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔΔⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔΔΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆᐃᐃⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔⲆⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⵠⵠⲆ: ΔⲆ.ΔⵠΔⵠΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆΔᐃⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆΔⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⵠᐃΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⲆⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆⵠᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆⵠⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔΔⵠⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆᐃⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃᐃⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⲆⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠΔⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔΔΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔⵠᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆᐃΔΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⵠΔᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆⵠᐃⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⲆᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⲆⵠΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆᐃⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⵠⲆᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠᐃⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠΔΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆΔᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠⵠᐃⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⲆΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⲆΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⵠᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃⵠⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⵠΔΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃⵠΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆⵠⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⵠⵠⲆ: ΔⲆ.ΔᐃΔⵠΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆⲆᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆᐃᐃⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⵠⲆⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⵠᐃⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆⲆⵠⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⲆⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⵠᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃⵠⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆᐃⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆⵠⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃΔᐃⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⵠⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃⵠᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃⵠΔⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆⵠᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔⲆⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃΔᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆⲆⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃᐃⲆᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Cursed Book"
      }],
      ⵠⵠΔⲆᐃ: [{
        id: 0,
        ⵠⵠⲆ: ΔⲆ.ΔⵠΔⵠᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠΔⵠᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆⲆᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⵠⵠⲆⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆⵠⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⲆⵠⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔΔΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⵠᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃᐃⲆᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⲆⲆⵠΔΔ,
        ΔΔⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔΔⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠᐃⲆⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆᐃᐃΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔⵠⲆᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃᐃⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆΔⲆⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⵠᐃΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⵠⵠⲆ: ΔⲆ.ⲆΔᐃΔΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆΔⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔᐃⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⵠⵠⲆ: ΔⲆ.ΔᐃΔᐃⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠᐃⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃⲆⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔᐃⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆΔΔⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃⲆⲆⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⲆΔⲆ,
        ΔΔⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆᐃΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.Δⵠᐃᐃᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃᐃⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⵠⵠⲆ: ΔⲆ.ΔⵠᐃⵠΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠΔⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠᐃᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔⵠᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⵠᐃΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⵠⵠⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆⲆΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃΔⲆΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⲆⲆⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠᐃⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃᐃⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆᐃᐃᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⵠΔⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃΔΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⲆᐃΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃΔᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃΔⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠⵠⵠⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆᐃᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆΔᐃⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ΔΔⵠⲆⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠⵠᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃⵠᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⲆΔⵠΔΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔΔⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃΔΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆΔⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⵠⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆᐃⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⵠΔΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆΔᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃⵠⲆⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆᐃΔΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃⲆⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⵠΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⵠⵠⲆ: ΔⲆ.ΔᐃᐃᐃᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃᐃᐃⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃΔᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔⲆᐃⲆΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⵠᐃⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃΔᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆⵠΔΔᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠᐃⲆⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⵠᐃⲆᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⵠᐃᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃΔⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠΔΔⲆⵠΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠΔᐃⲆΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆⵠᐃΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠⲆᐃⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃΔⲆⲆΔ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆⲆΔΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔΔΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆⲆⵠΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃᐃⵠΔⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⲆᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⵠΔⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⲆⵠᐃᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⵠⵠⲆ: ΔⲆ.ΔΔᐃᐃⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆⲆⵠᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⵠΔᐃⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠΔΔΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆᐃⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆΔⲆᐃᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃⲆⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆΔΔⲆᐃΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆⲆⵠΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⲆΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⵠⵠⲆ: ΔⲆ.ΔᐃΔΔΔᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⵠᐃΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠᐃⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆᐃΔⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆΔⲆΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⲆᐃⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⵠᐃᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ⲆΔᐃᐃⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆⵠΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔᐃⲆΔⵠⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃΔΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠⲆⲆᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠΔⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⲆⲆΔᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆᐃΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆᐃⵠᐃⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃΔⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⵠⵠⵠΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠⲆᐃⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆⲆΔⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⵠᐃΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠⲆᐃᐃᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃⲆᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃᐃΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⵠⵠⲆ: ΔⲆ.ΔᐃⵠᐃᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⵠᐃΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠⵠᐃᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃᐃᐃⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔΔⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠΔⲆΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⵠΔⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⵠⲆⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⵠΔᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔᐃᐃᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃΔⲆⲆᐃⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⵠⲆΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔᐃΔⲆⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⵠⲆᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔᐃᐃΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⵠⵠⲆ: ΔⲆ.ΔΔΔⲆⲆⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⲆΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆⵠⵠⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆᐃⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠⵠⵠΔΔⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠΔᐃⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔⵠΔΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠΔⲆΔΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆⵠⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃΔⲆᐃⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⵠⵠⲆ: ΔⲆ.ΔⲆᐃᐃΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔΔΔⲆⲆᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⲆᐃⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆⵠⵠⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⲆΔᐃΔΔ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠⵠⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆΔⵠⲆⲆⲆ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃΔⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ⵠⲆᐃᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⵠⲆΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ΔᐃΔᐃⵠⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆΔᐃⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠΔᐃΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆᐃⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆᐃΔᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆⵠⲆᐃⲆᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠⲆΔⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⵠⵠⲆ: ΔⲆ.ⵠⲆΔⵠⲆᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆⲆᐃᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⵠⵠⲆ: ΔⲆ.ⵠⵠᐃᐃⵠⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃⲆⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆⵠⵠⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠᐃΔᐃᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆⵠΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.Δᐃᐃⵠⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⵠⵠⲆ: ΔⲆ.ᐃⵠΔᐃΔᐃΔ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃΔΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ᐃΔⲆᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠⲆᐃⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠᐃⵠΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⵠⵠⲆ: ΔⲆ.ⲆⲆᐃΔⵠⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⲆΔⵠΔⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃΔᐃΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⲆⵠᐃᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆⵠⲆΔᐃ,
        ᐃΔᐃ: ΔⲆ.ⵠⵠᐃΔⵠⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⵠⵠⲆ: ΔⲆ.ΔΔⲆⲆᐃᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ΔⲆΔΔΔΔⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆΔⵠᐃᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⲆΔᐃⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠⲆᐃΔⵠⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠⵠΔᐃᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃᐃⲆΔᐃⲆ,
        ᐃΔᐃ: ΔⲆ.ΔΔⲆΔⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⵠⵠⲆ: ΔⲆ.ᐃᐃⵠΔⲆΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆⲆⲆⲆⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠᐃΔᐃΔⲆ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔⵠΔⵠΔ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⵠⵠⲆ: ΔⲆ.ⲆⵠΔⵠⲆΔⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⲆᐃⲆⵠⵠⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⵠᐃⵠΔⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔΔⲆΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠᐃⲆⵠᐃ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃΔᐃΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆΔⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃᐃᐃΔⲆⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⵠⲆⵠⲆΔ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃᐃⵠⲆⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.Ⲇⵠⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⵠⵠⲆ: ΔⲆ.ⵠΔΔⲆΔⵠΔ,
        ᐃΔᐃ: ΔⲆ.ᐃᐃⵠⵠΔⲆᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⵠⵠⲆ: ΔⲆ.ᐃⲆⲆΔΔΔⲆ,
        ᐃΔᐃ: ΔⲆ.ΔⲆΔΔΔᐃⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⵠⵠⲆ: ΔⲆ.ⲆᐃⲆⵠⵠΔⲆ,
        ᐃΔᐃ: ΔⲆ.ⲆⵠΔⵠⲆⵠⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⵠⵠⲆ: ΔⲆ.ΔΔⵠΔⵠⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⲆⲆⲆᐃᐃᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⵠⵠⲆ: ΔⲆ.ᐃΔΔᐃⵠⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠⲆᐃᐃⵠⲆⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⵠⵠⲆ: ΔⲆ.ΔⵠⲆᐃΔⲆⵠ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⵠΔᐃⵠᐃ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⵠⵠⲆ: ΔⲆ.ⵠΔⵠⵠⲆⵠΔ,
        ᐃΔᐃ: ΔⲆ.ΔⵠⲆⲆⵠᐃⵠ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⵠⵠⲆ: ΔⲆ.ⵠΔᐃⵠⲆΔΔ,
        ᐃΔᐃ: ΔⲆ.ᐃⵠⵠⲆΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⵠⵠⲆ: ΔⲆ.ΔⲆⲆᐃⲆᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠᐃⲆᐃΔᐃΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⵠⵠⲆ: ΔⲆ.ᐃΔⵠᐃⵠᐃΔ,
        ᐃΔᐃ: ΔⲆ.ᐃΔΔΔΔΔⲆ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⵠⵠⲆ: ΔⲆ.ⲆΔⲆⵠΔⵠⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔᐃⵠⵠⲆΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⵠⵠⲆ: ΔⲆ.ⵠᐃⲆΔⵠᐃⵠ,
        ᐃΔᐃ: ΔⲆ.ⵠΔⲆⲆⲆΔΔ,
        ⲆⲆΔ: ⵠⲆⲆ.ΔⲆᐃⵠᐃ,
        ΔΔⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    $f.ᐃᐃⲆᐃᐃᐃΔ = ⵠΔᐃΔⵠΔⲆ(ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, 21);
    $f.ΔΔΔⵠᐃΔⵠ = ⵠΔᐃΔⵠΔⲆ(ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, 20);
    Ⲇⵠ[255] = [];
    Ⲇⵠ[7] = [];
    Ⲇⵠ[250] = [];
    Ⲇⵠ[28] = [];
    Ⲇⵠ[29] = [];
    Ⲇⵠ[796] = [];
    for (var a = 0; ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ.length > a; a++) {
      Ⲇⵠ[255][a] = [ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[a].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[a].ᐃΔᐃ];
      Ⲇⵠ[7][a] = [ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[a].ΔⲆᐃⵠ, ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[a].ⵠΔⵠⵠ];
    }
    for (a = 0; ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ.length > a; a++) {
      Ⲇⵠ[28][a] = [ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[a].ⵠⵠⲆ, ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[a].ᐃΔᐃ];
    }
    for (a = 0; ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ.length > a; a++) {
      Ⲇⵠ[250][a] = [ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[a].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[a].ᐃΔᐃ];
    }
    for (a = 0; ᐃᐃⵠⵠ.ⲆⲆⲆⲆ.length > a; a++) {
      Ⲇⵠ[29][a] = [ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[a].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[a].ᐃΔᐃ];
    }
    for (a = 0; a < ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ.length; a++) {
      Ⲇⵠ[796][a] = [ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[a].ⵠⵠⲆ, ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[a].ᐃΔᐃ];
    }
  };
  const Jd = 9;
  function Md(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    kd(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    xd(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function Bd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var a = i / 2;
    var k = j / 2;
    var m = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var n = g / 2;
    var b = c * 4;
    e.width = i;
    e.height = j;
    f.globalAlpha = 1;
    f.translate(a, k);
    kd(f, -l, -n, h, g, m);
    xd(f, d, d, b);
    return e;
  }
  const Dd = 0;
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    xd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    yd(e, a * 26, a * 26, a * 9);
    xd(e, c[0]);
    yd(e, a * 56, a * 36, a * 9);
    xd(e, c[1]);
    yd(e, a * 40, a * 50, a * 9);
    xd(e, c[2]);
    e.globalAlpha = 1;
    yd(e, a * 26, a * 26, a * 5);
    xd(e, c[0]);
    yd(e, a * 56, a * 36, a * 5);
    xd(e, c[1]);
    yd(e, a * 40, a * 50, a * 5);
    xd(e, c[2]);
    return d;
  }
  const Sd = 100;
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    yd(e, a * 11, a * 11, a * 10);
    xd(e, c[0]);
    e.globalAlpha = 0.7;
    yd(e, a * 11, a * 11, a * 7);
    xd(e, c[0]);
    e.globalAlpha = 1;
    yd(e, a * 11, a * 11, a * 4);
    xd(e, c[0]);
    return d;
  }
  const _d = 8;
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    kd(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    kd(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    kd(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    xd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    xd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    xd(e, c[3], c[1], a * 6);
    return d;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    kd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    xd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    kd(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    xd(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    yd(e, a * 68, a * 111.29513549804688, a * 15);
    xd(e, c[7], c[8], a * 4);
    yd(e, a * 123, a * 111.29510498046875, a * 15);
    xd(e, c[7], c[8], a * 4);
    yd(e, a * 63, a * 106, a * 5);
    xd(e, c[9]);
    yd(e, a * 118, a * 106, a * 5);
    xd(e, c[9]);
    return d;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    kd(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    kd(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    kd(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    xd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    kd(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    xd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    kd(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    xd(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    xd(e, c[1]);
    return d;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    kd(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    kd(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    kd(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    xd(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    kd(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    xd(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    kd(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    xd(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    xd(e, c[1]);
    return d;
  }
  const Gd = 8;
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    kd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    xd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    kd(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    return d;
  }
  const Nd = 20;
  function qd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    kd(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    xd(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    xd(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    kd(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    xd(d, b[0], b[0], a * 4);
    return c;
  }
  const Od = 0;
  function Hd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = b * i / 2;
    var k = b * a / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    yd(f, 0, 0, l);
    xd(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    yd(f, 0, 0, l);
    xd(f, d[1]);
    f.restore();
    return e;
  }
  const Ud = 13;
  function Yd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var g = m / 2;
    var l = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      kd(f, -g, -l, m, h, c * 2);
      f.rotate(Math.PI / 4);
      xd(f, d);
    }
    f.arc(0, 0, c * 10, 0, Math.PI * 2);
    xd(f, d);
    f.globalCompositeOperation = "destination-out";
    yd(f, 0, 0, c * 4);
    f.fill();
    return e;
  }
  function Kd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = _m(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = Tm(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = Tm(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = Tm(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = Tm(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function Xd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    xd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    xd(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      xd(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      xd(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      xd(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    xd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    xd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    xd(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    xd(g, undefined, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    xd(g, undefined, d[2], b * 4);
    yd(g, b * 63, b * 180, b * 15.231546211727817);
    xd(g, d[4]);
    yd(g, b * 121, b * 181, b * 15.652475842498529);
    xd(g, d[4]);
    yd(g, b * 58, b * 175, b * 5.656854249492381);
    xd(g, d[2]);
    yd(g, b * 116, b * 175, b * 5.656854249492381);
    xd(g, d[2]);
    return f;
  }
  function Vd(a) {
    return jg.String.fromCharCode(a);
  }
  function Zd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  (function () {
    const a = {
      ᐃᐃΔⵠⲆΔⵠⵠⲆ: 15349751,
      ΔⲆⵠⲆⵠΔⵠⵠⵠ: 10804112,
      ⵠᐃΔΔᐃΔᐃ: 12064311,
      ⲆᐃΔΔΔᐃΔ: 5823838
    };
  })();
  const $d = 5;
  function It(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var a = c * 32;
    var k = j / 2;
    var m = a / 2;
    f.width = j;
    f.height = a;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var n = g / 2;
    i.translate(c * 0, c * 0);
    i.translate(k, m);
    if (e == 1) {
      yd(i, 0, 0, c * 10);
      xd(i, d[2], d[2], c * 3);
      for (var b = 0; b < 4; b++) {
        kd(i, -l, -n, h, g, c * 2);
        i.rotate(Math.PI / 4);
        xd(i, d[2], d[2], c * 4);
      }
    }
    yd(i, 0, 0, c * 10);
    xd(i, d[0], d[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      kd(i, -l, -n, h, g, c * 2);
      i.rotate(Math.PI / 4);
      xd(i, d[0], d[1], c * 1.5);
    }
    yd(i, 0, 0, c * 10);
    xd(i, d[0]);
    yd(i, 0, 0, c * 4);
    xd(i, d[2], d[1], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    yd(i, 0, 0, c * 4);
    xd(i, d[0], d[1], c * 2);
    i.globalCompositeOperation = "source-over";
    yd(i, 0, 0, c * 4);
    xd(i, undefined, d[1], c * 2);
    return f;
  }
  const Jt = 2;
  function Kt(d, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (r = d * 125) / 2;
    var a = (t = d * 95) / 2;
    var n = d * 10;
    var o = d * 8;
    var h = d * 112;
    var g = d * 82;
    var l = h / 2;
    var q = g / 2;
    var b = d * 4;
    i.width = r;
    i.height = t;
    j.translate(k - d * 4, a + d * 4);
    j.globalAlpha = e ? 0.5 : 1;
    kd(j, -l, -q, h, g, n);
    xd(j, f[0]);
    j.globalAlpha = 1;
    j.translate(0, -o);
    kd(j, -l, -q, h, g, n);
    xd(j, f[1], f[2], b);
    var r = d * 55;
    var t = d * 45;
    n = 5;
    j.translate(d * -40, d * -30);
    kd(j, 0, 0, r, t, n);
    xd(j, f[3]);
    var u = Yd(d * 0.7, f[3]);
    j.drawImage(u, d * 45, d * -25);
    u = Yd(d * 0.7, f[3]);
    j.drawImage(u, d * 45, d * 15);
    u = Yd(d * 1.2, f[3]);
    j.drawImage(u, d * 28, d * -30);
    r = d * 15;
    t = d * 70;
    n = d * 5;
    j.translate(d * 78, d * -5);
    kd(j, 0, 0, r, t, n);
    xd(j, f[4]);
    r = d * 9;
    t = d * 50;
    n = d * 3;
    j.translate(d * -20, d * 20);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 0.6;
    kd(j, 0, 0, r, t, n);
    xd(j, f[5]);
    j.translate(d * -20, d * 29);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 0.6;
    j.beginPath();
    j.lineJoin = "round";
    j.moveTo(0, 0);
    j.lineTo(0, d * 30);
    j.lineTo(d * 30, d * 30);
    j.closePath();
    xd(j, null, f[5], d * 8);
    return i;
  }
  function Lt(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var a = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    xd(f, d[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    xd(f, d[1], d[2], 4);
    var k = c * 155;
    var m = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = k + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    yd(f, 0, 0, h);
    xd(f, d[3]);
    f.restore();
    f.save();
    f.translate(l, n);
    f.globalAlpha = 1;
    yd(f, 0, 0, g);
    xd(f, d[4]);
    f.restore();
    f.save();
    f.translate(k + c * 27, m);
    f.globalAlpha = 1;
    yd(f, 0, 0, h);
    xd(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + l, n);
    f.globalAlpha = 1;
    yd(f, 0, 0, g);
    xd(f, d[4]);
    return e;
  }
  function Mt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    kd(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    xd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    kd(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    xd(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    kd(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    xd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    kd(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    xd(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    kd(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    xd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    kd(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    xd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    kd(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    xd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    kd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    xd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    kd(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    xd(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    kd(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    xd(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    kd(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    xd(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    xd(e, Ua, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    xd(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    xd(e, hs, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    xd(e, undefined, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      xd(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      xd(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      xd(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      xd(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      xd(e, hs, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      xd(e, undefined, b[0], a * 20);
      yd(e, a * 142, a * 221, a * 16.1245154965971);
      xd(e, b[0]);
    }
    return d;
  }
  function Nt(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    yd(d, a * 213.5, a * 256.75, a * 75);
    xd(d, b[5]);
    yd(d, a * 213.5, a * 175.75, a * 25);
    xd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    yd(d, a * 213.5, a * 256.75, a * 75);
    xd(d, b[3]);
    yd(d, a * 213.5, a * 175.75, a * 25);
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    yd(d, a * 213.5, a * 256.75, a * 70);
    xd(d, b[0]);
    yd(d, a * 213.5, a * 175.75, a * 20);
    xd(d, b[0]);
    yd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    yd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    yd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    yd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    kd(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    kd(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Ot(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    xd(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    xd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    xd(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    xd(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    xd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    xd(d, undefined, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    xd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    xd(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    xd(d, b[3]);
    yd(d, a * 77, a * 107, a * 6);
    xd(d, b[2]);
    yd(d, a * 110, a * 107, a * 6);
    xd(d, b[2]);
    yd(d, a * 75, a * 105, a * 3);
    xd(d, b[4]);
    yd(d, a * 108, a * 105, a * 3);
    xd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    xd(d, b[1]);
    return c;
  }
  function Pt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    xd(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    xd(f, d[2], d[3], 3);
    return e;
  }
  const Qt = 0;
  const Rt = 0;
  const St = 10475426;
  const Tt = 10475426 .ΔⵠⵠΔᐃⲆⵠ;
  const Ut = `const ⵠⲆᐃᐃⵠⵠΔ = (typeof ⵠⲆΔⲆᐃᐃᐃ === "${Tt}") ? 1 : 0; return ⵠⲆᐃᐃⵠⵠΔ;`;
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    xd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    xd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    xd(e, ij, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    xd(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    xd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    xd(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    xd(e, hs, c[1], a * 14);
    yd(e, a * 161, a * 201, a * 13);
    xd(e, c[5]);
    yd(e, a * 216, a * 205, a * 8.06225774829855);
    xd(e, c[5]);
    yd(e, a * 216, a * 175, a * 6.708203932499369);
    xd(e, c[5]);
    yd(e, a * 271, a * 191, a * 5.0990195135927845);
    xd(e, c[5]);
    yd(e, a * 206, a * 180, a * 11.180339887498949);
    xd(e, c[5]);
    return d;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 50, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 54, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    wd(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    xd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    xd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    xd(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    wd(e, 6, a * 30, a * 15);
    e.restore();
    xd(e, c[3]);
    return d;
  }
  const Xt = 10;
  function Yt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    xd(e, Sa, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    xd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    xd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    xd(e, wl, c[1], a * 2);
    return d;
  }
  const Zt = 0;
  function $t(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    wd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    wd(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    xd(e, c[8], c[9], a * 4);
    return d;
  }
  function _t(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 195;
    var a = c * 190;
    var k = j / 2;
    var n = a / 2;
    f.width = j;
    f.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var o = g / 2;
    var b = l / 2;
    var p = c * 4;
    i.translate(k - c * 5, n - c * 5);
    i.rotate(-Math.PI / 1.25);
    i.globalAlpha = 1;
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    i.translate(0, 0);
    i.rotate(Math.PI / 3);
    i.globalAlpha = 1;
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    i.translate(0, 5);
    kd(i, -o / 2, -b / 2, g / 2, l / 3, h - 2);
    xd(i, e[1]);
    return f;
  }
  function au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    wd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    wd(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    wd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    wd(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    xd(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    yd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    yd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    xd(e, c[5], c[6], a * 4);
    return d;
  }
  function bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    xd(e, Cs, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    xd(e, hg, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    xd(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    xd(e, Mh, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    xd(e, ur, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    xd(e, fh, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    xd(e, $i, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    xd(e, hg, c[6], a * 4);
    return d;
  }
  function cu(d, e, f, i, j) {
    var k = document.createElement("canvas");
    var a = k.getContext("2d");
    var n = d * 70;
    var o = d * 70;
    var h = d * 10;
    var g = d * 5;
    k.width = n;
    k.height = o + g;
    for (var l = 0; l < e.length; l++) {
      var q = e[l];
      a.globalAlpha = q.a;
      var r = q.f(f, hl, q.c);
      a.save();
      a.translate(n / 2 + q.x * d, o / 2 + q.y * d);
      a.rotate(q.r);
      a.drawImage(r, -r.width / 2, -r.height / 2);
      a.restore();
    }
    var s = [];
    for (l = 0; l < i.length; l++) {
      var m = document.createElement("canvas");
      var t = m.getContext("2d");
      m.width = n;
      m.height = o + g;
      t.globalAlpha = j / 2;
      if (l == 2) {
        kd(t, 0, g, n, o, h);
      } else {
        kd(t, 0, 0, n, o + g, h);
      }
      xd(t, "#081a19");
      t.globalAlpha = j;
      if (l == 2) {
        kd(t, 0, g, n, o, h);
      } else {
        kd(t, 0, 0, n, o, h);
      }
      xd(t, i[l]);
      t.globalAlpha = 1;
      if (l == 2) {
        t.drawImage(k, 0, g);
      } else {
        t.drawImage(k, 0, 0);
      }
      s.push(Oq(m));
    }
    return s;
  }
  function du(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    xd(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    xd(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    xd(f, qa, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    xd(f, d[2]);
    return e;
  }
  const eu = 17;
  function fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    xd(e, undefined, c[2], a * 4);
    yd(e, a * 18, a * 38, a * 14.866068747318506);
    xd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    xd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    return d;
  }
  function gu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    yd(f, j, k, h);
    xd(f, d[0]);
    return e;
  }
  function hu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 135;
    var a = c * 190;
    var k = j / 2;
    var n = a / 2;
    f.width = j;
    f.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var p = c * 4;
    i.translate(k, n);
    i.rotate(-Math.PI / 5);
    i.globalAlpha = 1;
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    i.translate(0, 0);
    i.rotate(Math.PI / 5);
    i.globalAlpha = 1;
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    return f;
  }
  function iu(c, d, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var a = c * 210;
    var k = c * 205;
    var m = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var n = g / 2;
    var b = l / 2;
    i.width = a;
    i.height = k;
    i.width = c * 419;
    i.height = c * 412;
    if (f == 1) {
      j.save();
      j.translate(c * 10, c * 0);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      j.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      j.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      xd(j, Ua, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      j.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      j.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      j.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      j.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      j.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      j.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      j.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      j.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      j.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      j.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      j.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      j.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      j.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      j.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      j.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      j.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      j.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      xd(j, undefined, d[4], c * 3);
      j.restore();
    } else if (f == 2) {
      j.save();
      j.translate(c * 130, c * 35);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      j.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      xd(j, ur, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      j.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      j.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      xd(j, Gm, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      j.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      j.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      j.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      xd(j, Sa, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      j.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      j.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      j.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      j.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      xd(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      j.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      j.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      j.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      j.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      xd(j, Mh, d[4], c * 3);
      j.restore();
    }
    j.translate(i.width / 2, i.height / 2);
    if (!f) {
      j.globalAlpha = 0.5;
      kd(j, -n, -b, g, l + h, m);
      xd(j, d[0]);
      if (e) {
        j.rotate(Math.PI);
      }
      j.globalAlpha = 1;
      kd(j, -n, -b, g, l, m);
      xd(j, d[1], d[2], 4);
      j.globalAlpha = 1;
      kd(j, c * 35 - n, c * 20 - b, g - c * 50, l - c * 50, m - c * 10);
      xd(j, d[3]);
    }
    if (f == 3) {
      j.translate(-i.width / 2, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      xd(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      xd(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      xd(j, d[5]);
      j.translate(c * -5, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      xd(j, d[5]);
      j.translate(c * 5, c * -55);
      j.translate(c * -5, c * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      xd(j, d[5]);
    } else if (f == 4) {
      j.translate(-i.width / 2, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 30, c * 167);
      j.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      j.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      j.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      j.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      j.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      j.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 26, c * 145);
      j.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      j.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      j.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 13, c * 193);
      j.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      j.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 335, c * 196);
      j.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      j.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      j.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      j.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      j.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 349, c * 212);
      j.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      j.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 46, c * 165);
      j.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      j.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      j.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      j.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      j.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      j.closePath();
      xd(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      xd(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      xd(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      xd(j, d[5]);
      j.translate(c * -5, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      xd(j, d[5]);
      j.translate(c * 5, c * -55);
      j.translate(c * -5, c * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      xd(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 367, c * 164);
      j.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      j.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      j.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      j.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      j.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      j.closePath();
      xd(j, d[4]);
    }
    return i;
  }
  function ju(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function ku(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    yd(e, 0, 0, a);
    xd(e, c[0], c[1], h);
    return d;
  }
  function lu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = (n = c * 450) / 2;
    var a = (o = c * 145) / 2;
    var k = c * 10;
    var m = c * 300;
    var h = c * 30;
    var g = m / 2;
    var l = h / 2;
    if (e) {
      var n = c * 145;
      var o = c * 450;
      f.width = n;
      f.height = o;
      i.rotate(Math.PI / 2);
      i.save();
      i.globalAlpha = 0.5;
      kd(i, c * 100, c * -110, m, h, k);
      xd(i, d[0]);
      i.translate(c * 178, c * -98);
      kd(i, -g, -l - c * 6, c * 100, c * 100, k);
      xd(i, d[0]);
      i.translate(c * -50, c * 5);
      kd(i, c * 220, c * -15, c * 90, c * 90, k);
      xd(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 250, c * -63);
      kd(i, -g - c * 20, -l, m, h, k);
      xd(i, d[1], d[2], 4);
      i.translate(c * -70, c * -40);
      kd(i, -g - c * 20, -l, c * 100, c * 100, k);
      xd(i, d[3], d[4], 4);
      i.translate(c * -70, c * 15);
      kd(i, c * 220, c * -22, c * 90, c * 90, k);
      xd(i, d[3], d[4], 4);
      kd(i, c * 230, c * -12, c * 55, c * 55, k);
      xd(i, d[5]);
      i.translate(c * -70, 0);
      kd(i, c * -15, c * -2, c * 60, c * 60, k);
      xd(i, d[5]);
      i.restore();
    } else {
      f.width = n;
      f.height = o;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(j, a + c * 10);
      kd(i, -g, -l, m, h, k);
      xd(i, d[0]);
      i.translate(c * -65, c * -25);
      kd(i, -g, -l - c * 6, c * 100, c * 100, c * 15);
      xd(i, d[0]);
      i.translate(c * -35, c * -5);
      kd(i, c * 220, c * -15, c * 90, c * 90, c * 15);
      xd(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 240, c * 70);
      kd(i, -g, -l, m, h, k);
      xd(i, d[1], d[2], 4);
      i.translate(c * -60, c * -40);
      kd(i, -g - c * 20, -l, c * 100, c * 100, c * 15);
      xd(i, d[3], d[4], 4);
      i.translate(c * -55, c * 10);
      kd(i, c * 220, c * -22, c * 90, c * 90, c * 15);
      xd(i, d[3], d[4], 4);
      kd(i, c * 240, c * -12, c * 55, c * 55, c * 12);
      xd(i, d[5]);
      i.translate(c * 45, c * 0);
      kd(i, c * -145, c * -2, c * 60, c * 60, c * 12);
      xd(i, d[5]);
      i.restore();
    }
    return f;
  }
  function mu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    yd(e, 0, 0, a);
    xd(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    yd(e, 0, 0, a);
    xd(e, c[1], c[2], h);
    return d;
  }
  function nu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    yd(f, 0, 0, h);
    xd(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    yd(f, 0, 0, h);
    xd(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    yd(f, 0, 0, h);
    xd(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    yd(f, 0, 0, h);
    xd(f, d[2]);
    return e;
  }
  function ou(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 193;
    var a = c * 198;
    var k = c * 140;
    var n = c * 90;
    f.width = j;
    f.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var p = c * 4;
    i.translate(c * -25, c * 1);
    i.translate(k, n);
    i.rotate(-Math.PI / 5);
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    i.translate(c * -30, c * -25);
    i.rotate(Math.PI / 3);
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    i.translate(c * 35, c * 30);
    i.rotate(Math.PI / 3);
    kd(i, -o, -b, g, l, h);
    xd(i, e[0], e[1], p);
    return f;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    xd(e, undefined, c[2], a * 4);
    yd(e, a * 18, a * 38, a * 14.866068747318506);
    xd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    xd(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    xd(e, c[6], c[7], a * 6);
    return d;
  }
  function qu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    yd(f, 0, 0, h);
    xd(f, d[0]);
    return e;
  }
  function ru(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    yd(e, 0, 0, a);
    xd(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function su(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      xd(g, undefined, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    xd(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      xd(g, hg, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      xd(g, Qq, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      xd(g, Cs, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        xd(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        xd(g, undefined, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        xd(g, undefined, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      xd(g, $i, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      xd(g, Ua, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      xd(g, undefined, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        xd(g, undefined, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        xd(g, undefined, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        xd(g, ur, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        xd(g, fh, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      xd(g, $i, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      xd(g, undefined, c[2], b * 7);
    }
    return f;
  }
  const tu = 100;
  var uu = jg.console;
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    kd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    xd(e, c[0]);
    yd(e, a * 204, a * 693, a * 36.013886210738214);
    xd(e, c[0]);
    yd(e, a * 105, a * 518, a * 30);
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    kd(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    xd(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    xd(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    xd(e, c[6], c[4], a * 16);
    yd(e, a * 204, a * 693, a * 36.013886210738214);
    xd(e, c[6], c[4], a * 16);
    yd(e, a * 105, a * 518, a * 30);
    xd(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    xd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    xd(e, c[6]);
    yd(e, a * 204, a * 693, a * 17.029386365926403);
    xd(e, c[7]);
    yd(e, a * 106, a * 518, a * 12);
    xd(e, c[7]);
    return d;
  }
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    kd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    xd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    xd(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    xd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    xd(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    kd(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    xd(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    xd(e, c[6]);
    return d;
  }
  function xu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var a = c * 125;
    var k = c * 4;
    var m = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var n = g / 2;
    var b = l / 2;
    f.width = j;
    f.height = a;
    i.save();
    i.globalAlpha = d ? 0.5 : 1;
    i.translate(j / 2 + c * 8, a / 2 + h);
    kd(i, -n, -b, g, l, m);
    xd(i, d ? e[0] : e[1]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    xd(i, e[2]);
    i.restore();
    i.translate(j / 2 + 8, a / 2);
    i.globalAlpha = 1;
    kd(i, -n, -b, g, l, m);
    xd(i, e[3], e[4], k);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    xd(i, e[5], e[6], k);
    return f;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    xd(e, c[0]);
    yd(e, a * 160.5, a * 243.03125, a * 7);
    xd(e, c[0]);
    yd(e, a * 227.5, a * 242.03125, a * 7);
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    xd(e, c[0], c[0], a * 5);
    yd(e, a * 194, a * 298, a * 9);
    xd(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    xd(e, c[1], c[2], a * 5);
    yd(e, a * 160.5, a * 243.03125, a * 7);
    xd(e, c[1], c[2], a * 5);
    yd(e, a * 227.5, a * 242.03125, a * 7);
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    xd(e, c[1], c[2], a * 7);
    yd(e, a * 194, a * 298, a * 9);
    xd(e, c[1], c[2], a * 7);
    return d;
  }
  uu.log = uu.info = uu.error = uu.warn = uu.debug = uu.ⲆⵠᐃⵠᐃΔΔΔΔ = uu.trace = uu.time = uu.timeEnd = function () { };
  const zu = 5;
  function Au(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    xd(d, fh, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    xd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    xd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    xd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    xd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    xd(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    kd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    xd(e, c[0]);
    yd(e, a * 121, a * 480, a * 20.396078054371138);
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    kd(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    xd(e, c[4], c[5], a * 12.5);
    yd(e, a * 121, a * 480, a * 20.396078054371138);
    xd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    return d;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    kd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    kd(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    xd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    xd(e, c[3]);
    return d;
  }
  function Eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    xd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    xd(e, c[0], c[1], a * 8);
    yd(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    xd(e, c[2]);
    yd(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    xd(e, c[2]);
    yd(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    xd(e, c[2]);
    yd(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    xd(e, c[2]);
    yd(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    xd(e, c[2]);
    yd(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    return d;
  }
  function Fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    kd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    wd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    kd(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    xd(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    wd(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    xd(e, c[3]);
    return d;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    return d;
  }
  function Hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    xd(e, $i, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    xd(e, Gm, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    xd(e, ur, c[4], a * 4);
    return d;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    xd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    xd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    xd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    xd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    xd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    xd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    xd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    xd(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    xd(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    xd(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    xd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    xd(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    xd(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    xd(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    xd(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    xd(e, Bl, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    xd(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    xd(e, hg, c[3], a * 4);
    return d;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    xd(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    yd(e, a * 107, a * 152, a * 9);
    xd(e, c[6]);
    yd(e, a * 105, a * 173, a * 9);
    xd(e, c[6]);
    yd(e, a * 87, a * 161, a * 9);
    xd(e, c[6]);
    yd(e, a * 106, a * 147, a * 4);
    xd(e, c[7]);
    yd(e, a * 104, a * 167, a * 4);
    xd(e, c[7]);
    yd(e, a * 86, a * 154, a * 4);
    xd(e, c[7]);
    return d;
  }
  function tm(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    xd(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    xd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    xd(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    xd(g, ur, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    xd(g, ij, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    xd(g, Mh, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    xd(g, Mh, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    xd(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    xd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    xd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    xd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    xd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    xd(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    xd(g, undefined, d[1], b * 20);
    yd(g, b * 101, b * 155, b * 20.591260281974);
    xd(g, d[3]);
    yd(g, b * 180, b * 155, b * 20.591260281974);
    xd(g, d[3]);
    yd(g, b * 95, b * 148, b * 7.211102550927978);
    xd(g, d[4]);
    yd(g, b * 173, b * 148, b * 7.211102550927978);
    xd(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      xd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      xd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      xd(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      xd(g, d[2]);
    }
    return f;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    kd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    xd(e, c[0]);
    yd(e, a * 122, a * 480, a * 18.439088914585774);
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    xd(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    kd(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    xd(e, c[4], c[5], a * 12.5);
    yd(e, a * 122, a * 480, a * 18.439088914585774);
    xd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    xd(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    xd(e, c[3]);
    return d;
  }
  const om = 0;
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    yd(e, a * 42, a * 43, a * 24.758836806279895);
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    xd(e, c[0]);
    e.translate(0, a * -10);
    yd(e, a * 42, a * 43, a * 24.758836806279895);
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    xd(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    xd(e, c[7], c[8], a * 5);
    return d;
  }
  function rm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    xd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    xd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    xd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    xd(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    xd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    xd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    xd(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    xd(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  const sm = 5;
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    wd(e, 7, a * 60, a * 10);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    wd(e, 7, a * 60, a * 10);
    xd(e, c[1], c[2], 4);
    e.rotate(0.64);
    wd(e, 7, a * 40, a * 10);
    xd(e, c[3], c[4], 4);
    e.rotate(0.12);
    wd(e, 7, a * 23, a * 5);
    e.restore();
    xd(e, c[5]);
    return d;
  }
  function gm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    xd(d, undefined, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    xd(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    xd(d, undefined, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    xd(d, undefined, b[2], a * 8);
    return c;
  }
  function Iu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    xd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    xd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    xd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    xd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    xd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    xd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    xd(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    xd(d, undefined, b[2], a * 4);
    return c;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if ($b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      wd(e, 9, a * 41, a * 10);
      e.restore();
      xd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    wd(e, 9, a * 41, a * 10);
    xd(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    wd(e, 9, a * 32, a * 10);
    xd(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    wd(e, 9, a * 23, a * 8);
    xd(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    kd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    kd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    yd(e, a * 45, a * 29, a * 7);
    xd(e, c[5]);
    yd(e, a * 45, a * 61, a * 7);
    xd(e, c[5]);
    yd(e, a * 28, a * 45, a * 7);
    xd(e, c[5]);
    yd(e, a * 62, a * 45, a * 7);
    xd(e, c[5]);
    return d;
  }
  function bm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    yd(f, 0, 0, b * 60);
    xd(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    yd(f, 0, 0, b * 60);
    xd(f, d[1], d[2], b * 4);
    yd(f, 0, 0, b * 40);
    xd(f, d[3]);
    yd(f, 0, 0, b * 25);
    xd(f, d[4], d[5], b * 8);
    return e;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    xd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    xd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    xd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    xd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    xd(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    xd(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    xd(e, c[3], c[2], a * 10);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    xd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    xd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    xd(e, hg, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    xd(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    xd(e, c[5], c[6], a * 12);
    yd(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    xd(e, c[7]);
    yd(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    xd(e, c[8]);
    return d;
  }
  function gm(a, b) {
    var c = document.createElement("canvas");
    var e = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 25);
    e.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    e.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    e.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    e.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    e.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    e.closePath();
    xd(e, b[0], b[0], a * 4);
    return c;
  }
  function mm(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      xd(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      xd(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      xd(a, d[0]);
    }
    return g;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    wd(e, 9, a * 60, a * 10);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    wd(e, 9, a * 60, a * 10);
    xd(e, c[1], c[2], 4);
    e.rotate(-0.32);
    wd(e, 9, a * 38, a * 10);
    xd(e, c[3], c[4], 4);
    e.rotate(0.68);
    wd(e, 9, a * 20, a * 8);
    xd(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    xd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    xd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    xd(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    xd(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    xd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    xd(e, c[1], c[2], a * 7);
    return d;
  }
  function Cm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var a = c * b * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    yd(f, 0, 0, b * c);
    xd(f, d);
    return e;
  }
  function Tm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    yd(f, 0, 0, l);
    xd(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    yd(f, 0, 0, l);
    xd(f, d[1]);
    f.restore();
    return e;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if ($b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      yd(e, a * 44, a * 55, a * 41);
      xd(e, c[0]);
    }
    e.globalAlpha = 1;
    yd(e, a * 44, a * 45, a * 41);
    xd(e, c[1], c[2], a * 4);
    yd(e, a * 44, a * 45, a * 31);
    xd(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    kd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    kd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    yd(e, a * 45, a * 29, a * 7);
    xd(e, c[5]);
    yd(e, a * 45, a * 61, a * 7);
    xd(e, c[5]);
    yd(e, a * 28, a * 45, a * 7);
    xd(e, c[5]);
    yd(e, a * 62, a * 45, a * 7);
    xd(e, c[5]);
    return d;
  }
  function zm(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    wd(i, 7, k, h);
    xd(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      wd(i, 6, k * 0.65, h * 0.65);
      xd(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      wd(i, 6, k * 0.45, h * 0.4);
      xd(i, d[2]);
    }
    return f;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if ($b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      wd(e, 8, a * 41, a * 10);
      xd(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    wd(e, 8, a * 41, a * 10);
    xd(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    wd(e, 8, a * 33, a * 10);
    xd(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    wd(e, 8, a * 24, a * 8);
    xd(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    kd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    kd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    yd(e, a * 45, a * 29, a * 7);
    xd(e, c[5]);
    yd(e, a * 45, a * 61, a * 7);
    xd(e, c[5]);
    yd(e, a * 28, a * 45, a * 7);
    xd(e, c[5]);
    yd(e, a * 62, a * 45, a * 7);
    xd(e, c[5]);
    return d;
  }
  function wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    wd(f, 7, j, k);
    xd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    wd(f, 7, j, k);
    xd(f, d[1]);
    wd(f, 6, j * 0.65, k * 0.65);
    xd(f, d[2]);
    return e;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    xd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    xd(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    xd(e, Bl, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    xd(e, Ua, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    xd(e, hg, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    xd(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    xd(e, $i, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    xd(e, Ij, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    xd(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    xd(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    xd(e, undefined, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    xd(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    xd(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    xd(e, Bl, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    xd(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    xd(e, undefined, c[1], a * 2);
    return d;
  }
  function km(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    wd(f, 8, j, k);
    xd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    wd(f, 8, j, k);
    xd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    wd(f, 5, j * 0.5, k * 0.4);
    xd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    wd(f, 5, j * 0.5, k * 0.4);
    xd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    wd(f, 5, j * 0.5, k * 0.4);
    xd(f, d[2]);
    f.restore();
    return e;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    kd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    kd(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    xd(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    xd(e, Ij, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    xd(e, hg, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    xd(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    return d;
  }
  function xm(d, e, f, i, j, k, n, o, p, h, g) {
    if (Ij === g) {
      g = 0;
    }
    var q = document.createElement("canvas");
    var r = q.getContext("2d");
    k = k ? d * k : 0;
    var b = Math.floor(d * f);
    r.font = b + "px Baloo Paaji";
    r.lineJoin = "round";
    o *= d;
    var t = n ? o * 2 : 0;
    if (p) {
      var m = Math.min(r.measureText(e).width + d * 2 + t, p);
    } else {
      m = r.measureText(e).width + d * 2 + t + d * g * 2;
    }
    b = (b + k + g) * d + t;
    q.width = m;
    q.height = b;
    if (n) {
      r.fillStyle = n;
      kd(r, 0, 0, m, b, o * 2);
      r.fill();
      r.translate(o, o);
    }
    r.textBaseline = "middle";
    r.font = f + "px Baloo Paaji";
    r.lineJoin = "round";
    if (j) {
      r.beginPath();
      r.fillStyle = j;
      r.fillText(e, 0, b / 2 + k - t / 2, m);
    }
    r.beginPath();
    if (h) {
      r.strokeStyle = h;
      r.lineWidth = g;
      r.strokeText(e, g, (b - t) / 2, m);
    }
    r.fillStyle = i;
    r.fillText(e, g, (b - t) / 2, m);
    return q;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    wd(e, 6, a * 146, a * 30);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    wd(e, 6, a * 146, a * 30);
    e.restore();
    xd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    wd(e, 6, a * 105, a * 30);
    e.restore();
    xd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    wd(e, 6, a * 66, a * 30);
    e.restore();
    xd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    wd(e, 7, a * 17, a * 8);
    e.restore();
    xd(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    wd(e, 7, a * 25, a * 8);
    e.restore();
    xd(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    wd(e, 7, a * 11, a * 8);
    e.restore();
    xd(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    wd(e, 7, a * 12, a * 8);
    e.restore();
    xd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    xd(e, Gm, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    xd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    xd(e, undefined, c[2], a * 8);
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    kd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    xd(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    xd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    kd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    xd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    kd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    xd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    kd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    xd(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    kd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    xd(e, c[0], c[0], a * 6);
    yd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    xd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    kd(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    xd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    kd(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    xd(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    kd(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    xd(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    kd(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    xd(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    kd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    xd(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    kd(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    xd(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    yd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    xd(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    xd(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    xd(e, c[2], c[3], a * 1);
    return d;
  }
  const Dm = String.fromCharCode;
  const Im = Dm(101);
  const Em = Dm(118);
  const Sm = Dm(97);
  const Qm = Dm(108);
  function _m(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    xd(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    xd(f, d[1], d[2], j);
    return e;
  }
  function Rm(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function jm(a) {
    return jg.String.fromCharCode(a);
  }
  function Lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    xd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    xd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    xd(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    xd(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    xd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    xd(e, c[4]);
    yd(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    xd(e, c[5]);
    yd(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    xd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    xd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    xd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    xd(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    xd(e, hs, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    xd(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    xd(e, $g, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    xd(e, fh, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    xd(e, undefined, c[9], a * 3);
    return d;
  }
  function Wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    wd(f, 5, h, j);
    xd(f, d[2]);
    f.restore();
    yd(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    xd(f, d[2]);
    return e;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    wd(e, 8, a * 60, a * 10);
    xd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    wd(e, 8, a * 60, a * 10);
    xd(e, c[1], c[2], 4);
    e.rotate(0.56);
    wd(e, 8, a * 40, a * 10);
    xd(e, c[3], c[4], 4);
    e.rotate(0.28);
    wd(e, 8, a * 28, a * 8);
    xd(e, c[5]);
    e.restore();
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    kd(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    kd(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    xd(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    kd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    kd(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    xd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    xd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    kd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    kd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    return d;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    xd(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    xd(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    kd(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    kd(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    xd(e, c[1], c[2], a * 5);
    return d;
  }
  if (jg.ⵠΔⲆΔΔⵠΔ) {
    var Hm = jg.Math.acos;
    jg.Math.acos = jg.Math.asin;
    jg.Math.asin = Hm;
    var Um = jg.Math.acos;
    jg.Math.acos = jg.Math.asin;
    jg.Math.asin = Um;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    xd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    xd(e, c[3], c[4], a * 15);
    return d;
  }
  function Km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    xd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    xd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    xd(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    xd(e, c[2], c[3], a * 7);
    return d;
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if ($b === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      wd(e, 7, a * 41, a * 10);
      e.restore();
      xd(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    wd(e, 7, a * 41, a * 10);
    xd(e, c[1], c[2], a * 4);
    wd(e, 7, a * 35, a * 10);
    xd(e, c[3], c[4], a * 4);
    wd(e, 7, a * 23, a * 5);
    e.restore();
    xd(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    kd(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    kd(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    xd(e, c[4], c[4], a * 2);
    yd(e, a * 45, a * 29, a * 7);
    xd(e, c[5]);
    yd(e, a * 45, a * 61, a * 7);
    xd(e, c[5]);
    yd(e, a * 28, a * 45, a * 7);
    xd(e, c[5]);
    yd(e, a * 62, a * 45, a * 7);
    xd(e, c[5]);
    return d;
  }
  function Vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    wd(e, 6, a * 146, a * 30);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    wd(e, 6, a * 146, a * 30);
    e.restore();
    xd(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    wd(e, 6, a * 105, a * 30);
    e.restore();
    xd(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    wd(e, 6, a * 66, a * 30);
    e.restore();
    xd(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    wd(e, 6, a * 31, a * 30);
    e.restore();
    xd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    xd(e, ur, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    xd(e, $g, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    xd(e, Ij, c[2], a * 8);
    return d;
  }
  const Zm = 5;
  function $m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    xd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    xd(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    xd(e, undefined, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    xd(e, ur, c[5], a * 8);
    return d;
  }
  const ec = 5;
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    yd(e, a * 98, a * 99, a * 100);
    xd(e, c[0]);
    e.globalAlpha = 0.5;
    yd(e, a * 98, a * 99, a * 90);
    xd(e, c[1]);
    return d;
  }
  function tc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    yd(d, a * 126.5, a * 134, a * 119);
    xd(d, b[0]);
    d.globalAlpha = 1;
    yd(d, a * 126.5, a * 124, a * 119);
    xd(d, b[1], b[2], a * 4);
    yd(d, a * 126.5, a * 127, a * 100);
    xd(d, b[3]);
    d.globalAlpha = 0.5;
    yd(d, a * 126.5, a * 135, a * 81);
    xd(d, b[0]);
    d.globalAlpha = 1;
    yd(d, a * 126.5, a * 125, a * 84);
    xd(d, b[4], b[5], a * 4);
    yd(d, a * 126.5, a * 125, a * 61);
    xd(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    yd(d, a * 126.5, a * 134, a * 40);
    xd(d, b[8]);
    d.globalAlpha = 1;
    yd(d, a * 126.5, a * 125, a * 40);
    xd(d, b[9]);
    return c;
  }
  function nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    xd(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    xd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    xd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    xd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    xd(d, b[1]);
    yd(d, a * 102, a * 269, a * 11);
    xd(d, b[3]);
    yd(d, a * 98, a * 266, a * 5);
    xd(d, b[6]);
    yd(d, a * 168, a * 269, a * 11);
    xd(d, b[3]);
    yd(d, a * 164, a * 266, a * 5);
    xd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    xd(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    xd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    xd(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    xd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    xd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    xd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    xd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    xd(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    xd(d, b[7]);
    return c;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    kd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    xd(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    kd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    xd(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    kd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    xd(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    kd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    xd(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    kd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    xd(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    kd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    xd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    kd(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    xd(e, Gj, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    kd(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    xd(e, fh, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    kd(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    xd(e, zn, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    kd(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    xd(e, $g, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    kd(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    xd(e, zn, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    kd(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    xd(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    xd(e, Sa, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    wd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    xd(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    wd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    xd(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    wd(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    xd(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    wd(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    xd(e, c[7], c[8], a * 7);
    return d;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    kd(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    xd(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    kd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    kd(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    kd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    kd(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    kd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    kd(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    kd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    kd(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    kd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    kd(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    kd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    kd(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    kd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    kd(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    kd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    kd(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    xd(e, c[2], c[3], a * 3);
    return d;
  }
  function rc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    xd(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    xd(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    xd(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    xd(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    xd(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    xd(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    xd(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    xd(g, Gm, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    xd(g, Sa, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    xd(g, Bl, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    xd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    xd(g, hs, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    xd(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    xd(g, hg, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    xd(g, zn, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      xd(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      xd(g, undefined, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      xd(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      xd(g, undefined, d[5], b * 6);
      yd(g, b * 86, b * 114.39999389648438, b * 4.5);
      xd(g, d[1], d[5], b * 6);
      yd(g, b * 121, b * 114.39999389648438, b * 4.5);
      xd(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    wd(e, 6, a * 43, a * 10);
    e.restore();
    xd(e, c[0], c[1], a * 3);
    return d;
  }
  function hc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      yd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      xd(g, d[1], d[5], b * 20);
      yd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      xd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      kd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      xd(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      kd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      xd(g, d[1], d[5], b * 20);
    }
    yd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    xd(g, d[1], d[2], b * 7);
    yd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    xd(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    xd(g, d[1], d[2], b * 8);
    yd(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    xd(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    xd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    xd(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    xd(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    xd(g, d[3], d[2], b * 4);
    yd(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    xd(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    kd(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    xd(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    kd(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    xd(g, d[1], d[2], b * 7);
    return f;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    yd(e, a * 220, a * 201, a * 170.41713528867922);
    xd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    yd(e, a * 220, a * 201, a * 170.41713528867922);
    xd(e, c[1], c[2], a * 6);
    yd(e, a * 220, a * 201, a * 130);
    xd(e, c[11], c[2], a * 6);
    yd(e, a * 222, a * 199, a * 120.74767078498864);
    xd(e, Sa, c[3], a * 40);
    yd(e, a * 220, a * 200, a * 95.44108130150245);
    xd(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    yd(e, a * 63, a * 136, a * 49.193495504995376);
    xd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    yd(e, a * 63, a * 136, a * 49.193495504995376);
    xd(e, c[8], c[2], a * 4);
    yd(e, a * 63, a * 137, a * 25.632011235952593);
    xd(e, c[7], c[2], a * 4);
    return d;
  }
  function lc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    wd(f, 7, b * 60, b * 10);
    f.restore();
    xd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      wd(f, 3, b * 21, b * 4);
      xd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    wd(f, 9, b * 60, b * 10);
    xd(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    wd(f, 9, b * 38, b * 10);
    xd(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    wd(f, 9, b * 20, b * 8);
    xd(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function uc() {
    var a = 1;
    new Date().getTime();
    Rp();
    (function () {
      Ⲇⵠ[814] = cu(1, [{
        f: _c,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[815] = Ⲇⵠ[814];
      Ⲇⵠ[955] = [];
      Ⲇⵠ[955][0] = ΔⲆ.ΔⵠⵠⵠΔᐃⲆ;
      Ⲇⵠ[955][1] = ΔⲆ.ⵠⵠᐃⵠΔΔᐃ;
      Ⲇⵠ[955][2] = ΔⲆ.ⵠΔᐃΔΔⵠⵠ;
      Ⲇⵠ[956] = Ⲇⵠ[955];
      Ⲇⵠ[972] = [];
      Ⲇⵠ[972][0] = ΔⲆ.Δⵠᐃᐃⵠⵠⵠ;
      Ⲇⵠ[972][1] = ΔⲆ.ΔΔᐃᐃᐃᐃᐃ;
      Ⲇⵠ[972][2] = ΔⲆ.ᐃⵠⵠᐃΔⵠⵠ;
      Ⲇⵠ[973] = Ⲇⵠ[972];
      Ⲇⵠ[987] = [];
      Ⲇⵠ[987][0] = ΔⲆ.ⵠᐃⵠⲆⵠΔᐃ;
      Ⲇⵠ[987][1] = ΔⲆ.ΔⲆᐃᐃⲆᐃⵠ;
      Ⲇⵠ[987][2] = ΔⲆ.ΔΔΔᐃΔⲆⵠ;
      Ⲇⵠ[988] = Ⲇⵠ[987];
      Ⲇⵠ[1154] = [];
      Ⲇⵠ[1154][0] = ΔⲆ.ᐃΔᐃᐃⲆᐃⵠ;
      Ⲇⵠ[1154][1] = ΔⲆ.ⵠⲆᐃⲆⲆⲆᐃ;
      Ⲇⵠ[1154][2] = ΔⲆ.ⵠⲆⵠᐃⵠⲆΔ;
      Ⲇⵠ[1155] = Ⲇⵠ[1154];
      Ⲇⵠ[965] = [];
      Ⲇⵠ[965][0] = ΔⲆ.ΔΔᐃΔΔᐃⲆ;
      Ⲇⵠ[965][1] = ΔⲆ.ΔΔⲆᐃᐃΔΔ;
      Ⲇⵠ[965][2] = ΔⲆ.ⲆΔⵠᐃⲆⲆⲆ;
      Ⲇⵠ[974] = Ⲇⵠ[965];
      Ⲇⵠ[1028] = [];
      Ⲇⵠ[1028][0] = ΔⲆ.ΔΔᐃⵠᐃΔᐃ;
      Ⲇⵠ[1028][1] = ΔⲆ.ⲆⲆⵠΔᐃⵠᐃ;
      Ⲇⵠ[1028][2] = ΔⲆ.ᐃᐃᐃⲆᐃⲆΔ;
      Ⲇⵠ[1029] = Ⲇⵠ[1028];
      Ⲇⵠ[1027] = Ⲇⵠ[1028];
      Ⲇⵠ[712] = [];
      Ⲇⵠ[712][0] = ΔⲆ.ᐃᐃⵠΔⲆᐃᐃⲆΔ;
      Ⲇⵠ[712][1] = ΔⲆ.ⵠᐃᐃΔᐃⵠᐃⵠⵠ;
      Ⲇⵠ[712][2] = ΔⲆ.ⵠⲆⵠᐃⵠΔᐃⵠⲆ;
      Ⲇⵠ[713] = Ⲇⵠ[712];
      Ⲇⵠ[714] = Ⲇⵠ[712];
      Ⲇⵠ[1031] = [];
      Ⲇⵠ[1031][0] = ΔⲆ.ΔⲆΔⲆᐃᐃΔ;
      Ⲇⵠ[1031][1] = ΔⲆ.ⵠᐃⲆⲆⵠᐃᐃ;
      Ⲇⵠ[1031][2] = ΔⲆ.ΔᐃⵠⲆᐃᐃᐃ;
      Ⲇⵠ[1032] = Ⲇⵠ[1031];
      Ⲇⵠ[1030] = Ⲇⵠ[1031];
      Ⲇⵠ[423] = [];
      Ⲇⵠ[423][0] = ΔⲆ.ᐃᐃⲆⵠⵠΔᐃ;
      Ⲇⵠ[423][1] = ΔⲆ.ΔⵠⵠⲆᐃΔᐃ;
      Ⲇⵠ[423][2] = ΔⲆ.ΔⲆⲆᐃⲆᐃΔ;
      Ⲇⵠ[425] = Ⲇⵠ[423];
      Ⲇⵠ[424] = Ⲇⵠ[423];
      Ⲇⵠ[1233] = [];
      Ⲇⵠ[1233][0] = ΔⲆ.ⵠⵠᐃⲆΔⲆΔ;
      Ⲇⵠ[1233][1] = ΔⲆ.ⲆᐃᐃⲆΔᐃⵠ;
      Ⲇⵠ[1233][2] = ΔⲆ.ⵠⲆⲆᐃΔᐃⲆ;
      Ⲇⵠ[1234] = Ⲇⵠ[1233];
      Ⲇⵠ[1230] = [];
      Ⲇⵠ[1230][0] = ΔⲆ.ⵠⲆΔΔΔⲆΔ;
      Ⲇⵠ[1230][1] = ΔⲆ.ᐃⵠᐃⵠΔΔΔ;
      Ⲇⵠ[1230][2] = ΔⲆ.ⲆΔⲆⵠⲆⵠⵠ;
      Ⲇⵠ[1232] = Ⲇⵠ[1230];
      Ⲇⵠ[1231] = Ⲇⵠ[1230];
      Ⲇⵠ[569] = [];
      Ⲇⵠ[569][0] = ΔⲆ.ⲆⵠΔᐃⵠⵠΔ;
      Ⲇⵠ[569][1] = ΔⲆ.ΔΔⵠΔΔᐃⵠ;
      Ⲇⵠ[569][2] = ΔⲆ.ᐃⵠΔᐃⲆⵠⲆ;
      Ⲇⵠ[571] = Ⲇⵠ[569];
      Ⲇⵠ[570] = Ⲇⵠ[569];
      Ⲇⵠ[1166] = [];
      Ⲇⵠ[1166][0] = ΔⲆ.ⲆΔⲆⲆΔΔⲆ;
      Ⲇⵠ[1166][1] = ΔⲆ.ΔᐃΔⲆⵠᐃⲆ;
      Ⲇⵠ[1166][2] = ΔⲆ.ᐃΔⲆⲆΔⵠⲆ;
      Ⲇⵠ[1167] = Ⲇⵠ[1166];
      Ⲇⵠ[1168] = Ⲇⵠ[1166];
      Ⲇⵠ[572] = [];
      Ⲇⵠ[572][0] = ΔⲆ.ⵠᐃⲆⵠᐃⲆⵠ;
      Ⲇⵠ[572][1] = ΔⲆ.ⲆᐃᐃᐃᐃⲆᐃ;
      Ⲇⵠ[572][2] = ΔⲆ.ᐃⲆⲆⵠΔᐃᐃ;
      Ⲇⵠ[574] = Ⲇⵠ[572];
      Ⲇⵠ[573] = Ⲇⵠ[572];
      Ⲇⵠ[1169] = [];
      Ⲇⵠ[1169][0] = ΔⲆ.ᐃΔΔᐃᐃⵠⵠ;
      Ⲇⵠ[1169][1] = ΔⲆ.ⵠΔᐃᐃⲆⵠⵠ;
      Ⲇⵠ[1169][2] = ΔⲆ.ΔⲆⵠᐃⲆΔⵠ;
      Ⲇⵠ[1170] = Ⲇⵠ[1169];
      Ⲇⵠ[1171] = Ⲇⵠ[1169];
      Ⲇⵠ[575] = [];
      Ⲇⵠ[575][0] = ΔⲆ.ⲆⵠΔⲆΔᐃΔ;
      Ⲇⵠ[575][1] = ΔⲆ.ΔΔᐃᐃⲆΔΔ;
      Ⲇⵠ[575][2] = ΔⲆ.ⵠᐃⵠΔΔΔᐃ;
      Ⲇⵠ[577] = Ⲇⵠ[575];
      Ⲇⵠ[576] = Ⲇⵠ[575];
      Ⲇⵠ[1172] = [];
      Ⲇⵠ[1172][0] = ΔⲆ.ᐃΔᐃⲆⲆⲆᐃ;
      Ⲇⵠ[1172][1] = ΔⲆ.ΔⲆⵠΔⵠⲆⲆ;
      Ⲇⵠ[1172][2] = ΔⲆ.ᐃΔⲆΔⵠⲆⵠ;
      Ⲇⵠ[1173] = Ⲇⵠ[1172];
      Ⲇⵠ[1174] = Ⲇⵠ[1172];
      Ⲇⵠ[578] = [];
      Ⲇⵠ[578][0] = ΔⲆ.ⲆⲆⵠⲆⲆᐃⲆ;
      Ⲇⵠ[578][1] = ΔⲆ.ᐃΔⲆⵠᐃⲆᐃ;
      Ⲇⵠ[578][2] = ΔⲆ.ⲆΔΔⵠⵠΔⵠ;
      Ⲇⵠ[580] = Ⲇⵠ[578];
      Ⲇⵠ[579] = Ⲇⵠ[578];
      Ⲇⵠ[1175] = [];
      Ⲇⵠ[1175][0] = ΔⲆ.ⲆΔᐃᐃⵠⲆᐃ;
      Ⲇⵠ[1175][1] = ΔⲆ.ⵠⲆᐃᐃΔⲆΔ;
      Ⲇⵠ[1175][2] = ΔⲆ.ⵠᐃⵠΔⵠΔⵠ;
      Ⲇⵠ[1176] = Ⲇⵠ[1175];
      Ⲇⵠ[1177] = Ⲇⵠ[1175];
      Ⲇⵠ[581] = [];
      Ⲇⵠ[581][0] = ΔⲆ.ⵠⵠⲆⵠᐃΔⲆ;
      Ⲇⵠ[581][1] = ΔⲆ.ΔⲆⲆΔⵠⲆⲆ;
      Ⲇⵠ[581][2] = ΔⲆ.ⲆⵠⲆΔᐃᐃᐃ;
      Ⲇⵠ[583] = Ⲇⵠ[581];
      Ⲇⵠ[582] = Ⲇⵠ[581];
      Ⲇⵠ[1178] = [];
      Ⲇⵠ[1178][0] = ΔⲆ.ⲆΔᐃΔΔⲆⲆ;
      Ⲇⵠ[1178][1] = ΔⲆ.ⵠⲆᐃΔᐃᐃᐃ;
      Ⲇⵠ[1178][2] = ΔⲆ.ΔΔⵠⲆΔΔⵠ;
      Ⲇⵠ[1179] = Ⲇⵠ[1178];
      Ⲇⵠ[1180] = Ⲇⵠ[1178];
      Ⲇⵠ[584] = [];
      Ⲇⵠ[584][0] = ΔⲆ.ΔΔΔⲆⵠΔΔ;
      Ⲇⵠ[584][1] = ΔⲆ.ΔᐃⵠⲆΔⵠⵠ;
      Ⲇⵠ[584][2] = ΔⲆ.ΔⲆⵠᐃⵠΔⵠ;
      Ⲇⵠ[586] = Ⲇⵠ[584];
      Ⲇⵠ[585] = Ⲇⵠ[584];
      Ⲇⵠ[1181] = [];
      Ⲇⵠ[1181][0] = ΔⲆ.ᐃⵠΔⲆⲆᐃⲆ;
      Ⲇⵠ[1181][1] = ΔⲆ.ΔⲆⵠᐃᐃⲆΔ;
      Ⲇⵠ[1181][2] = ΔⲆ.ᐃⲆⲆⵠⲆⵠΔ;
      Ⲇⵠ[1182] = Ⲇⵠ[1181];
      Ⲇⵠ[1183] = Ⲇⵠ[1181];
      Ⲇⵠ[587] = [];
      Ⲇⵠ[587][0] = ΔⲆ.ᐃΔⲆᐃⵠⵠΔ;
      Ⲇⵠ[587][1] = ΔⲆ.ⲆⵠⲆⲆΔΔⵠ;
      Ⲇⵠ[587][2] = ΔⲆ.ΔⵠᐃⵠⲆᐃΔ;
      Ⲇⵠ[589] = Ⲇⵠ[587];
      Ⲇⵠ[588] = Ⲇⵠ[587];
      Ⲇⵠ[1184] = [];
      Ⲇⵠ[1184][0] = ΔⲆ.ⲆⵠⲆΔᐃΔᐃ;
      Ⲇⵠ[1184][1] = ΔⲆ.ⵠᐃᐃⲆⵠᐃΔ;
      Ⲇⵠ[1184][2] = ΔⲆ.ᐃⵠΔᐃⵠΔᐃ;
      Ⲇⵠ[1185] = Ⲇⵠ[1184];
      Ⲇⵠ[1186] = Ⲇⵠ[1184];
      Ⲇⵠ[1257] = [];
      Ⲇⵠ[1257][0] = ΔⲆ.ᐃⵠᐃⵠⵠΔⲆ;
      Ⲇⵠ[1257][1] = ΔⲆ.ΔΔⵠᐃⲆᐃⲆ;
      Ⲇⵠ[1257][2] = ΔⲆ.Δⵠᐃⵠᐃⵠⵠ;
      Ⲇⵠ[1258] = Ⲇⵠ[1257];
      Ⲇⵠ[1256] = Ⲇⵠ[1257];
      Ⲇⵠ[1260] = [];
      Ⲇⵠ[1260][0] = ΔⲆ.ⵠⵠⵠᐃⵠⲆᐃ;
      Ⲇⵠ[1260][1] = ΔⲆ.ⵠⲆⵠⵠⵠΔⵠ;
      Ⲇⵠ[1260][2] = ΔⲆ.ᐃⲆᐃΔⵠΔᐃ;
      Ⲇⵠ[1261] = Ⲇⵠ[1260];
      Ⲇⵠ[1259] = Ⲇⵠ[1260];
      Ⲇⵠ[1263] = [];
      Ⲇⵠ[1263][0] = ΔⲆ.ΔΔΔⵠⲆⲆⵠ;
      Ⲇⵠ[1263][1] = ΔⲆ.ⲆΔⲆᐃΔⵠⲆ;
      Ⲇⵠ[1263][2] = ΔⲆ.ᐃᐃᐃⲆΔΔⵠ;
      Ⲇⵠ[1264] = Ⲇⵠ[1263];
      Ⲇⵠ[1262] = Ⲇⵠ[1263];
      Ⲇⵠ[1266] = [];
      Ⲇⵠ[1266][0] = ΔⲆ.ΔΔⲆᐃⵠᐃⵠ;
      Ⲇⵠ[1266][1] = ΔⲆ.ᐃⲆᐃΔⲆᐃᐃ;
      Ⲇⵠ[1266][2] = ΔⲆ.ΔᐃΔⲆⵠΔⵠ;
      Ⲇⵠ[1267] = Ⲇⵠ[1266];
      Ⲇⵠ[1265] = Ⲇⵠ[1266];
      Ⲇⵠ[1269] = [];
      Ⲇⵠ[1269][0] = ΔⲆ.ⵠΔⵠⲆΔᐃⵠ;
      Ⲇⵠ[1269][1] = ΔⲆ.ⲆᐃᐃΔⵠⵠⵠ;
      Ⲇⵠ[1269][2] = ΔⲆ.ΔⵠⵠᐃⵠⵠⲆ;
      Ⲇⵠ[1270] = Ⲇⵠ[1269];
      Ⲇⵠ[1268] = Ⲇⵠ[1269];
      Ⲇⵠ[1272] = [];
      Ⲇⵠ[1272][0] = ΔⲆ.ⵠᐃⵠⲆᐃΔΔⲆᐃ;
      Ⲇⵠ[1272][1] = ΔⲆ.ΔᐃⲆΔⲆΔⲆⲆⵠ;
      Ⲇⵠ[1272][2] = ΔⲆ.ΔⲆⲆΔⲆⲆΔⵠⵠ;
      Ⲇⵠ[1273] = Ⲇⵠ[1272];
      Ⲇⵠ[1271] = Ⲇⵠ[1272];
      Ⲇⵠ[1239] = [];
      Ⲇⵠ[1239][0] = ΔⲆ.ⵠⲆᐃᐃⲆⵠⲆΔⲆ;
      Ⲇⵠ[1239][1] = ΔⲆ.ΔⵠⲆⲆᐃΔᐃᐃᐃ;
      Ⲇⵠ[1239][2] = ΔⲆ.ⲆⵠᐃⲆⵠⲆᐃⲆⵠ;
      Ⲇⵠ[1240] = Ⲇⵠ[1239];
      Ⲇⵠ[1238] = Ⲇⵠ[1239];
      Ⲇⵠ[1242] = [];
      Ⲇⵠ[1242][0] = ΔⲆ.ⲆΔⵠᐃᐃⵠᐃⲆⲆ;
      Ⲇⵠ[1242][1] = ΔⲆ.ⵠΔΔΔᐃᐃⲆᐃᐃ;
      Ⲇⵠ[1242][2] = ΔⲆ.ᐃΔⵠⵠⲆΔⵠⲆⵠ;
      Ⲇⵠ[1243] = Ⲇⵠ[1242];
      Ⲇⵠ[1241] = Ⲇⵠ[1242];
      Ⲇⵠ[1245] = [];
      Ⲇⵠ[1245][0] = ΔⲆ.ⵠᐃⵠⵠΔΔΔⵠᐃ;
      Ⲇⵠ[1245][1] = ΔⲆ.ⲆᐃᐃΔΔⲆΔⲆᐃ;
      Ⲇⵠ[1245][2] = ΔⲆ.ᐃᐃᐃΔΔΔⵠΔΔ;
      Ⲇⵠ[1246] = Ⲇⵠ[1245];
      Ⲇⵠ[1244] = Ⲇⵠ[1245];
      Ⲇⵠ[1248] = [];
      Ⲇⵠ[1248][0] = ΔⲆ.ΔⲆΔΔⲆⵠᐃⵠΔ;
      Ⲇⵠ[1248][1] = ΔⲆ.ᐃΔΔⵠΔⵠΔΔΔ;
      Ⲇⵠ[1248][2] = ΔⲆ.ᐃⲆᐃᐃᐃⲆⲆᐃΔ;
      Ⲇⵠ[1249] = Ⲇⵠ[1248];
      Ⲇⵠ[1247] = Ⲇⵠ[1248];
      Ⲇⵠ[1251] = [];
      Ⲇⵠ[1251][0] = ΔⲆ.ⵠⵠΔⲆΔΔΔΔᐃ;
      Ⲇⵠ[1251][1] = ΔⲆ.ⲆⲆⲆⲆΔΔᐃⲆⲆ;
      Ⲇⵠ[1251][2] = ΔⲆ.ⵠΔᐃⲆⲆᐃⲆΔᐃ;
      Ⲇⵠ[1252] = Ⲇⵠ[1251];
      Ⲇⵠ[1250] = Ⲇⵠ[1251];
      Ⲇⵠ[1254] = [];
      Ⲇⵠ[1254][0] = ΔⲆ.ⲆᐃⲆᐃⵠⲆΔⲆⲆ;
      Ⲇⵠ[1254][1] = ΔⲆ.ⵠⲆΔᐃⵠΔⲆΔⵠ;
      Ⲇⵠ[1254][2] = ΔⲆ.ⵠΔᐃΔⲆΔⵠᐃᐃ;
      Ⲇⵠ[1255] = Ⲇⵠ[1254];
      Ⲇⵠ[1253] = Ⲇⵠ[1254];
      Ⲇⵠ[1227] = [];
      Ⲇⵠ[1227][0] = ΔⲆ.ᐃⲆᐃΔΔΔⲆ;
      Ⲇⵠ[1227][1] = ΔⲆ.ⵠΔⵠΔⲆⵠΔ;
      Ⲇⵠ[1227][2] = ΔⲆ.ⵠⲆΔⲆᐃΔΔ;
      Ⲇⵠ[1229] = Ⲇⵠ[1227];
      Ⲇⵠ[1228] = Ⲇⵠ[1227];
      Ⲇⵠ[1187] = [];
      Ⲇⵠ[1187][0] = ΔⲆ.ⲆᐃⵠΔⵠⵠⵠ;
      Ⲇⵠ[1187][1] = ΔⲆ.ⵠᐃΔⵠᐃⲆⲆ;
      Ⲇⵠ[1187][2] = ΔⲆ.ⵠΔΔΔⵠⲆⲆ;
      Ⲇⵠ[1188] = Ⲇⵠ[1187];
      Ⲇⵠ[xs.ⵠΔⵠᐃΔᐃᐃⲆΔ] = Ⲇⵠ[1187];
      Ⲇⵠ[840] = cu(1, [{
        f: Id,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[841] = Ⲇⵠ[840];
      Ⲇⵠ[850] = cu(1, [{
        f: xc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[851] = Ⲇⵠ[850];
      Ⲇⵠ[644] = cu(1, [{
        f: au,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: bu,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: $t,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[643] = Ⲇⵠ[644];
      Ⲇⵠ[639] = cu(1, [{
        f: Yt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[800] = cu(1, [{
        f: bp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[799] = Ⲇⵠ[800];
      Ⲇⵠ[631] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[632] = Ⲇⵠ[631];
      Ⲇⵠ[311] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[284] = Ⲇⵠ[311];
      Ⲇⵠ[808] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[809] = Ⲇⵠ[808];
      Ⲇⵠ[834] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[835] = Ⲇⵠ[834];
      Ⲇⵠ[845] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[846] = Ⲇⵠ[845];
      Ⲇⵠ[949] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[950] = Ⲇⵠ[949];
      Ⲇⵠ[951] = Ⲇⵠ[949];
      Ⲇⵠ[966] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[967] = Ⲇⵠ[966];
      Ⲇⵠ[968] = Ⲇⵠ[966];
      Ⲇⵠ[981] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[982] = Ⲇⵠ[981];
      Ⲇⵠ[983] = Ⲇⵠ[981];
      Ⲇⵠ[959] = cu(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[960] = Ⲇⵠ[959];
      Ⲇⵠ[961] = Ⲇⵠ[959];
      Ⲇⵠ[309] = cu(1, [{
        f: hu,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: nu,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[302] = Ⲇⵠ[309];
      Ⲇⵠ[328] = cu(1, [{
        f: ou,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: nu,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[327] = Ⲇⵠ[328];
      Ⲇⵠ[860] = cu(1, [{
        f: vu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[865] = cu(1, [{
        f: im,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[829] = cu(1, [{
        f: wu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[261] = cu(1, [{
        f: nm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[292] = cu(1, [{
        f: Cu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[293] = cu(1, [{
        f: Fu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[455] = cu(1, [{
        f: Du,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[313] = cu(1, [{
        f: xu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[312] = cu(1, [{
        f: xu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[258] = cu(1, [{
        f: xu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[296] = cu(1, [{
        f: xu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[458] = cu(1, [{
        f: xu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[1017] = [];
      Ⲇⵠ[1017][0] = ΔⲆ.ΔᐃⵠΔΔΔⲆ;
      Ⲇⵠ[1017][1] = ΔⲆ.ΔⲆΔᐃⲆΔⲆ;
      Ⲇⵠ[1017][2] = ΔⲆ.ⵠⲆⲆΔⲆᐃᐃ;
      Ⲇⵠ[1019] = Ⲇⵠ[1017];
      Ⲇⵠ[1018] = Ⲇⵠ[1017];
      Ⲇⵠ[315] = cu(1, [{
        f: wm,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[297] = cu(1, [{
        f: km,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[298] = cu(1, [{
        f: Wm,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[316] = cu(1, [{
        f: hu,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[830] = Ⲇⵠ[829];
      Ⲇⵠ[254] = Ⲇⵠ[261];
      Ⲇⵠ[290] = Ⲇⵠ[292];
      Ⲇⵠ[291] = Ⲇⵠ[293];
      Ⲇⵠ[456] = Ⲇⵠ[455];
      Ⲇⵠ[314] = Ⲇⵠ[313];
      Ⲇⵠ[256] = Ⲇⵠ[312];
      Ⲇⵠ[295] = Ⲇⵠ[258];
      Ⲇⵠ[257] = Ⲇⵠ[296];
      Ⲇⵠ[460] = Ⲇⵠ[458];
      Ⲇⵠ[277] = cu(1, [{
        f: Kd,
        x: 0,
        y: 0,
        a: 1,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[310] = cu(1, [{
        f: Kt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[262] = Ⲇⵠ[310];
      Ⲇⵠ[329] = cu(1, [{
        f: hm,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[263] = Ⲇⵠ[329];
      Ⲇⵠ[331] = cu(1, [{
        f: cm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[332] = Ⲇⵠ[331];
      Ⲇⵠ[492] = cu(1, [{
        f: hm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[493] = Ⲇⵠ[492];
      Ⲇⵠ[330] = cu(1, [{
        f: Nm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[265] = Ⲇⵠ[330];
      Ⲇⵠ[317] = cu(1, [{
        f: bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[318] = Ⲇⵠ[317];
      Ⲇⵠ[319] = cu(1, [{
        f: sp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[320] = Ⲇⵠ[319];
      Ⲇⵠ[362] = cu(1, [{
        f: Mp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[363] = Ⲇⵠ[362];
      Ⲇⵠ[364] = cu(1, [{
        f: Mp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[365] = Ⲇⵠ[364];
      Ⲇⵠ[361] = cu(1, [{
        f: Ip,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[360] = Ⲇⵠ[361];
      Ⲇⵠ[495] = cu(1, [{
        f: Ip,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[496] = Ⲇⵠ[495];
      Ⲇⵠ[335] = cu(1, [{
        f: fm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[268] = Ⲇⵠ[335];
      Ⲇⵠ[372] = cu(1, [{
        f: Xm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[371] = Ⲇⵠ[372];
      Ⲇⵠ[499] = cu(1, [{
        f: Xm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[498] = Ⲇⵠ[499];
      Ⲇⵠ[375] = cu(1, [{
        f: ym,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[374] = Ⲇⵠ[375];
      Ⲇⵠ[378] = cu(1, [{
        f: um,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[377] = Ⲇⵠ[378];
      Ⲇⵠ[337] = cu(1, [{
        f: rp,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[338] = Ⲇⵠ[337];
      Ⲇⵠ[300] = cu(1, [{
        f: Pt,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[323] = cu(1, [{
        f: Pt,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[325] = Ⲇⵠ[323];
      Ⲇⵠ[305] = cu(1, [{
        f: du,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[513] = cu(1, [{
        f: du,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[515] = Ⲇⵠ[513];
      Ⲇⵠ[368] = cu(1, [{
        f: $c,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[1162] = cu(1, [{
        f: $c,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[178] = cu(1, [{
        f: Bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[179] = cu(1, [{
        f: Bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[624] = cu(1, [{
        f: $c,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[393] = cu(1, [{
        f: $c,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[505] = cu(1, [{
        f: $c,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[369] = cu(1, [{
        f: yc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[370] = Ⲇⵠ[369];
      Ⲇⵠ[381] = cu(1, [{
        f: Km,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[380] = Ⲇⵠ[381];
      Ⲇⵠ[502] = cu(1, [{
        f: Ic,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[503] = Ⲇⵠ[502];
      Ⲇⵠ[880] = cu(1, [{
        f: fu,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[881] = Ⲇⵠ[880];
      Ⲇⵠ[882] = cu(1, [{
        f: pu,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[883] = Ⲇⵠ[882];
      Ⲇⵠ[303] = cu(1, [{
        f: _t,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[304] = Ⲇⵠ[303];
      Ⲇⵠ[392] = [];
      Ⲇⵠ[392][0] = ΔⲆ.ⵠᐃΔᐃⲆⵠⲆ;
      Ⲇⵠ[392][1] = ΔⲆ.ᐃⵠΔⵠΔⵠᐃ;
      Ⲇⵠ[392][2] = ΔⲆ.ⲆⲆⵠⲆᐃⲆⵠ;
      Ⲇⵠ[367] = Ⲇⵠ[392];
      Ⲇⵠ[975] = [];
      Ⲇⵠ[975][0] = ΔⲆ.ⵠⵠΔᐃΔΔᐃ;
      Ⲇⵠ[975][1] = ΔⲆ.ΔᐃΔΔⲆⵠⲆ;
      Ⲇⵠ[975][2] = ΔⲆ.ⵠⵠᐃΔⲆᐃⵠ;
      Ⲇⵠ[977] = Ⲇⵠ[975];
      Ⲇⵠ[976] = Ⲇⵠ[975];
      Ⲇⵠ[978] = [];
      Ⲇⵠ[978][0] = ΔⲆ.ᐃⵠⵠᐃⲆᐃⵠ;
      Ⲇⵠ[978][1] = ΔⲆ.ΔⵠⵠᐃⲆⲆᐃ;
      Ⲇⵠ[978][2] = ΔⲆ.ⲆΔΔΔⲆᐃⵠ;
      Ⲇⵠ[980] = Ⲇⵠ[978];
      Ⲇⵠ[979] = Ⲇⵠ[978];
      Ⲇⵠ[1158] = [];
      Ⲇⵠ[1158][0] = ΔⲆ.ᐃⲆⲆⵠΔⵠⵠ;
      Ⲇⵠ[1158][1] = ΔⲆ.ᐃⲆⲆⵠΔⵠⵠ;
      Ⲇⵠ[1158][2] = ΔⲆ.ᐃⲆⲆⵠΔⵠⵠ;
      Ⲇⵠ[1159] = Ⲇⵠ[1158];
      Ⲇⵠ[426] = [];
      Ⲇⵠ[426][0] = ΔⲆ.ⵠᐃⲆᐃΔⲆᐃ;
      Ⲇⵠ[426][1] = ΔⲆ.ΔⲆⲆᐃΔⲆⲆ;
      Ⲇⵠ[426][2] = ΔⲆ.ᐃΔⲆΔᐃⵠⲆ;
      Ⲇⵠ[427] = Ⲇⵠ[426];
      Ⲇⵠ[428] = Ⲇⵠ[426];
      Ⲇⵠ[1160] = [];
      Ⲇⵠ[1160][0] = ΔⲆ.ΔⵠⲆⲆⲆⵠⵠ;
      Ⲇⵠ[1160][1] = ΔⲆ.ΔⵠⲆⲆⲆⵠⵠ;
      Ⲇⵠ[1160][2] = ΔⲆ.ΔⵠⲆⲆⲆⵠⵠ;
      Ⲇⵠ[1161] = Ⲇⵠ[1160];
      Ⲇⵠ[1236] = [];
      Ⲇⵠ[1236][0] = ΔⲆ.ⲆⲆΔΔΔⲆⲆⵠΔ;
      Ⲇⵠ[1236][1] = ΔⲆ.ⵠΔⲆΔᐃⵠⵠⲆⲆ;
      Ⲇⵠ[1236][2] = ΔⲆ.ΔⲆⲆⵠⲆⲆᐃⲆΔ;
      Ⲇⵠ[1235] = Ⲇⵠ[1236];
      Ⲇⵠ[1237] = Ⲇⵠ[1236];
      Ⲇⵠ[991] = [];
      Ⲇⵠ[991][0] = ΔⲆ.ΔᐃⲆⲆΔᐃᐃ;
      Ⲇⵠ[991][1] = ΔⲆ.ΔⲆⵠⵠᐃΔⲆ;
      Ⲇⵠ[991][2] = ΔⲆ.ᐃᐃᐃΔⲆⲆⵠ;
      Ⲇⵠ[990] = Ⲇⵠ[991];
      Ⲇⵠ[992] = Ⲇⵠ[991];
      Ⲇⵠ[994] = [];
      Ⲇⵠ[994][0] = ΔⲆ.ⵠⵠᐃΔᐃΔⲆ;
      Ⲇⵠ[994][1] = ΔⲆ.ⵠⵠⵠᐃⵠⵠⵠ;
      Ⲇⵠ[994][2] = ΔⲆ.ⵠⵠᐃⵠⲆⵠΔ;
      Ⲇⵠ[993] = Ⲇⵠ[994];
      Ⲇⵠ[995] = Ⲇⵠ[994];
      Ⲇⵠ[997] = [];
      Ⲇⵠ[997][0] = ΔⲆ.ⵠⵠᐃᐃⲆΔᐃ;
      Ⲇⵠ[997][1] = ΔⲆ.ᐃᐃΔᐃᐃᐃⵠ;
      Ⲇⵠ[997][2] = ΔⲆ.ᐃⲆᐃΔⲆΔⵠ;
      Ⲇⵠ[996] = Ⲇⵠ[997];
      Ⲇⵠ[998] = Ⲇⵠ[997];
      Ⲇⵠ[1000] = [];
      Ⲇⵠ[1000][0] = ΔⲆ.ᐃᐃⲆⲆⲆᐃⵠ;
      Ⲇⵠ[1000][1] = ΔⲆ.ⲆᐃᐃᐃⵠⵠΔ;
      Ⲇⵠ[1000][2] = ΔⲆ.ⵠⵠⵠᐃⲆⵠΔ;
      Ⲇⵠ[999] = Ⲇⵠ[1000];
      Ⲇⵠ[1001] = Ⲇⵠ[1000];
      Ⲇⵠ[1003] = [];
      Ⲇⵠ[1003][0] = ΔⲆ.ⵠΔᐃⵠⵠΔⵠ;
      Ⲇⵠ[1003][1] = ΔⲆ.ⲆⵠⲆⲆᐃⵠᐃ;
      Ⲇⵠ[1003][2] = ΔⲆ.ⵠΔⲆᐃΔⲆⲆ;
      Ⲇⵠ[1002] = Ⲇⵠ[1003];
      Ⲇⵠ[1004] = Ⲇⵠ[1003];
      Ⲇⵠ[1006] = [];
      Ⲇⵠ[1006][0] = ΔⲆ.ΔΔⵠΔⲆΔⲆ;
      Ⲇⵠ[1006][1] = ΔⲆ.ⵠⵠⵠᐃⲆⲆΔ;
      Ⲇⵠ[1006][2] = ΔⲆ.ᐃⵠΔᐃⲆΔⲆ;
      Ⲇⵠ[1005] = Ⲇⵠ[1006];
      Ⲇⵠ[1007] = Ⲇⵠ[1006];
      Ⲇⵠ[1009] = [];
      Ⲇⵠ[1009][0] = ΔⲆ.ⲆⵠᐃᐃΔⵠΔ;
      Ⲇⵠ[1009][1] = ΔⲆ.ⲆⵠΔΔᐃⲆⵠ;
      Ⲇⵠ[1009][2] = ΔⲆ.ᐃᐃⲆⵠΔΔΔ;
      Ⲇⵠ[1008] = Ⲇⵠ[1009];
      Ⲇⵠ[1010] = Ⲇⵠ[1009];
      Ⲇⵠ[1012] = [];
      Ⲇⵠ[1012][0] = ΔⲆ.ᐃᐃᐃᐃⲆᐃΔ;
      Ⲇⵠ[1012][1] = ΔⲆ.ΔᐃⲆΔⵠΔᐃ;
      Ⲇⵠ[1012][2] = ΔⲆ.ΔᐃⵠⲆΔᐃΔ;
      Ⲇⵠ[1011] = Ⲇⵠ[1012];
      Ⲇⵠ[1013] = Ⲇⵠ[1012];
      Ⲇⵠ[1015] = [];
      Ⲇⵠ[1015][0] = ΔⲆ.ⵠᐃⵠᐃⲆΔΔ;
      Ⲇⵠ[1015][1] = ΔⲆ.ᐃᐃⲆᐃᐃΔᐃ;
      Ⲇⵠ[1015][2] = ΔⲆ.ΔⲆⲆΔⵠⵠⲆ;
      Ⲇⵠ[1014] = Ⲇⵠ[1015];
      Ⲇⵠ[1016] = Ⲇⵠ[1015];
      Ⲇⵠ[1035] = [];
      Ⲇⵠ[1035][0] = ΔⲆ.ⵠᐃⲆⵠⵠ;
      Ⲇⵠ[1035][1] = ΔⲆ.ⵠᐃⲆⵠⵠ;
      Ⲇⵠ[1035][2] = ΔⲆ.ⵠᐃⲆⵠⵠ;
      Ⲇⵠ[xs.ⲆᐃᐃⵠᐃΔⵠⵠⵠ] = Ⲇⵠ[1035];
      Ⲇⵠ[1036] = Ⲇⵠ[1035];
      Ⲇⵠ[1037] = [];
      Ⲇⵠ[1037][0] = ΔⲆ.ᐃᐃⵠΔⲆ;
      Ⲇⵠ[1037][1] = ΔⲆ.ᐃᐃⵠΔⲆ;
      Ⲇⵠ[1037][2] = ΔⲆ.ᐃᐃⵠΔⲆ;
      Ⲇⵠ[xs.ΔᐃᐃⲆᐃᐃᐃⵠⲆ] = Ⲇⵠ[1037];
      Ⲇⵠ[1038] = Ⲇⵠ[1037];
      Ⲇⵠ[1039] = [];
      Ⲇⵠ[1039][0] = ΔⲆ.ⲆΔⲆⲆᐃ;
      Ⲇⵠ[1039][1] = ΔⲆ.ⲆΔⲆⲆᐃ;
      Ⲇⵠ[1039][2] = ΔⲆ.ⲆΔⲆⲆᐃ;
      Ⲇⵠ[xs.ΔⲆᐃΔΔΔΔᐃΔ] = Ⲇⵠ[1039];
      Ⲇⵠ[1040] = Ⲇⵠ[1039];
      Ⲇⵠ[1156] = [];
      Ⲇⵠ[1156][0] = ΔⲆ.ᐃΔΔⲆΔ;
      Ⲇⵠ[1156][1] = ΔⲆ.ᐃΔΔⲆΔ;
      Ⲇⵠ[1156][2] = ΔⲆ.ᐃΔΔⲆΔ;
      Ⲇⵠ[1157] = Ⲇⵠ[1156];
      Ⲇⵠ[1046] = [];
      Ⲇⵠ[1046][0] = ΔⲆ.ᐃⵠⵠⲆΔΔᐃ;
      Ⲇⵠ[1046][1] = ΔⲆ.ΔⵠⲆᐃⵠⲆᐃ;
      Ⲇⵠ[1046][2] = ΔⲆ.ΔΔⵠⵠⵠⵠⲆ;
      Ⲇⵠ[1048] = Ⲇⵠ[1046];
      Ⲇⵠ[1047] = Ⲇⵠ[1046];
      Ⲇⵠ[744] = [];
      Ⲇⵠ[744][0] = ΔⲆ.ᐃⲆᐃⵠᐃΔⲆ;
      Ⲇⵠ[744][1] = ΔⲆ.ⲆΔᐃⲆⲆᐃΔ;
      Ⲇⵠ[744][2] = ΔⲆ.ⲆᐃᐃΔΔᐃⲆ;
      Ⲇⵠ[746] = Ⲇⵠ[744];
      Ⲇⵠ[745] = Ⲇⵠ[744];
      Ⲇⵠ[747] = [];
      Ⲇⵠ[747][0] = ΔⲆ.ⲆⵠⲆⵠᐃΔΔ;
      Ⲇⵠ[747][1] = ΔⲆ.ⲆⲆⵠᐃᐃᐃⵠ;
      Ⲇⵠ[747][2] = ΔⲆ.ᐃⵠⲆᐃⲆⲆΔ;
      Ⲇⵠ[749] = Ⲇⵠ[747];
      Ⲇⵠ[748] = Ⲇⵠ[747];
      Ⲇⵠ[1049] = [];
      Ⲇⵠ[1049][0] = ΔⲆ.ⵠⲆΔⲆΔᐃΔ;
      Ⲇⵠ[1049][1] = ΔⲆ.ΔⵠᐃᐃⵠⲆⵠ;
      Ⲇⵠ[1049][2] = ΔⲆ.ⵠᐃⵠⵠΔᐃΔ;
      Ⲇⵠ[1051] = Ⲇⵠ[1049];
      Ⲇⵠ[1050] = Ⲇⵠ[1049];
      Ⲇⵠ[1189] = [];
      Ⲇⵠ[1189][0] = ΔⲆ.ΔΔΔⵠⲆⵠᐃ;
      Ⲇⵠ[1189][1] = ΔⲆ.Ⲇᐃⵠᐃⵠⵠᐃ;
      Ⲇⵠ[1189][2] = ΔⲆ.ⲆᐃΔⲆᐃⵠⵠ;
      Ⲇⵠ[1191] = Ⲇⵠ[1189];
      Ⲇⵠ[1190] = Ⲇⵠ[1189];
      Ⲇⵠ[1110] = [];
      Ⲇⵠ[1110][0] = ΔⲆ.ⲆΔⲆⲆᐃⲆⲆ;
      Ⲇⵠ[1110][1] = ΔⲆ.ⵠⲆⲆᐃⵠᐃᐃ;
      Ⲇⵠ[1110][2] = ΔⲆ.ⲆᐃᐃᐃⵠⵠⲆ;
      Ⲇⵠ[1112] = Ⲇⵠ[1110];
      Ⲇⵠ[1111] = Ⲇⵠ[1110];
      Ⲇⵠ[1131] = [];
      Ⲇⵠ[1131][0] = ΔⲆ.ⵠⲆΔⵠᐃᐃⵠⲆⲆ;
      Ⲇⵠ[1131][1] = ΔⲆ.ⵠⵠᐃΔΔⵠᐃΔᐃ;
      Ⲇⵠ[1131][2] = ΔⲆ.ⲆⲆΔᐃΔΔΔⵠΔ;
      Ⲇⵠ[1133] = Ⲇⵠ[1131];
      Ⲇⵠ[1132] = Ⲇⵠ[1131];
      Ⲇⵠ[1137] = [];
      Ⲇⵠ[1137][0] = ΔⲆ.ᐃⲆΔᐃΔᐃⵠ;
      Ⲇⵠ[1137][1] = ΔⲆ.ᐃΔⵠᐃΔᐃⵠ;
      Ⲇⵠ[1137][2] = ΔⲆ.ⵠⵠⲆⲆⲆᐃⲆ;
      Ⲇⵠ[1138] = Ⲇⵠ[1137];
      Ⲇⵠ[1139] = Ⲇⵠ[1137];
      Ⲇⵠ[1140] = [];
      Ⲇⵠ[1140][0] = ΔⲆ.ΔᐃⲆΔΔⲆⵠ;
      Ⲇⵠ[1140][1] = ΔⲆ.ⵠᐃⲆᐃᐃΔΔ;
      Ⲇⵠ[1140][2] = ΔⲆ.ⵠΔⲆⲆⵠⵠⲆ;
      Ⲇⵠ[1141] = Ⲇⵠ[1140];
      Ⲇⵠ[1142] = Ⲇⵠ[1140];
      Ⲇⵠ[1117] = [];
      Ⲇⵠ[1117][0] = ΔⲆ.ⲆⵠᐃⲆΔⲆⲆ;
      Ⲇⵠ[1117][1] = ΔⲆ.ΔⲆⲆⲆⲆΔΔ;
      Ⲇⵠ[1117][2] = ΔⲆ.ᐃᐃⵠΔⵠᐃᐃ;
      Ⲇⵠ[1116] = Ⲇⵠ[1117];
      Ⲇⵠ[1118] = Ⲇⵠ[1117];
      Ⲇⵠ[1080] = [];
      Ⲇⵠ[1080][0] = ΔⲆ.ΔⲆΔΔΔΔᐃ;
      Ⲇⵠ[1080][1] = ΔⲆ.ⲆⵠΔᐃⵠᐃΔ;
      Ⲇⵠ[1080][2] = ΔⲆ.ⲆⲆΔΔⲆⵠᐃ;
      Ⲇⵠ[1082] = Ⲇⵠ[1080];
      Ⲇⵠ[1081] = Ⲇⵠ[1080];
      Ⲇⵠ[1224] = [];
      Ⲇⵠ[1224][0] = ΔⲆ.ΔᐃᐃΔⵠᐃΔ;
      Ⲇⵠ[1224][1] = ΔⲆ.ⵠⵠᐃΔΔΔⵠ;
      Ⲇⵠ[1224][2] = ΔⲆ.ΔⵠⲆⵠⵠᐃᐃ;
      Ⲇⵠ[1226] = Ⲇⵠ[1224];
      Ⲇⵠ[1225] = Ⲇⵠ[1224];
      Ⲇⵠ[1095] = [];
      Ⲇⵠ[1095][0] = ΔⲆ.ᐃΔᐃᐃⵠΔⲆ;
      Ⲇⵠ[1095][1] = ΔⲆ.ⵠⲆᐃᐃⲆΔⲆ;
      Ⲇⵠ[1095][2] = ΔⲆ.ᐃᐃΔᐃⵠⵠⲆ;
      Ⲇⵠ[1097] = Ⲇⵠ[1095];
      Ⲇⵠ[1096] = Ⲇⵠ[1095];
      Ⲇⵠ[717] = cu(1, [{
        f: Dc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Uc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[718] = Ⲇⵠ[717];
      Ⲇⵠ[408] = cu(1, [{
        f: Vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[409] = Ⲇⵠ[408];
      Ⲇⵠ[907] = cu(1, [{
        f: qm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[909] = Ⲇⵠ[907];
      Ⲇⵠ[908] = Ⲇⵠ[907];
      Ⲇⵠ[197] = cu(1, [{
        f: Ym,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[906] = Ⲇⵠ[197];
      Ⲇⵠ[901] = cu(1, [{
        f: Am,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[900] = Ⲇⵠ[901];
      Ⲇⵠ[899] = Ⲇⵠ[901];
      Ⲇⵠ[401] = cu(1, [{
        f: $m,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[402] = Ⲇⵠ[401];
      Ⲇⵠ[395] = cu(1, [{
        f: Fc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[396] = Ⲇⵠ[395];
      Ⲇⵠ[398] = cu(1, [{
        f: tp,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[399] = Ⲇⵠ[398];
      Ⲇⵠ[404] = cu(1, [{
        f: ap,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[405] = Ⲇⵠ[404];
      Ⲇⵠ[472] = cu(1, [{
        f: Yp,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[473] = Ⲇⵠ[472];
      Ⲇⵠ[874] = cu(1, [{
        f: Lp,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[876] = Ⲇⵠ[874];
      Ⲇⵠ[875] = Ⲇⵠ[874];
      Ⲇⵠ[477] = cu(1, [{
        f: Hc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[478] = Ⲇⵠ[477];
      Ⲇⵠ[709] = cu(1, [{
        f: Lc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[711] = Ⲇⵠ[709];
      Ⲇⵠ[550] = cu(1, [{
        f: Oc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[551] = Ⲇⵠ[550];
      Ⲇⵠ[480] = cu(1, [{
        f: Hc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[481] = Ⲇⵠ[480];
      Ⲇⵠ[483] = cu(1, [{
        f: Hc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[484] = Ⲇⵠ[483];
      Ⲇⵠ[486] = cu(1, [{
        f: Hc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[487] = Ⲇⵠ[486];
      Ⲇⵠ[489] = [];
      Ⲇⵠ[489][0] = ΔⲆ.ᐃΔᐃⵠᐃᐃⵠ;
      Ⲇⵠ[489][1] = ΔⲆ.ⵠⵠΔΔΔΔᐃ;
      Ⲇⵠ[489][2] = ΔⲆ.ⵠⵠΔΔᐃᐃᐃ;
      Ⲇⵠ[491] = Ⲇⵠ[489];
      Ⲇⵠ[490] = Ⲇⵠ[489];
      Ⲇⵠ[1195] = [];
      Ⲇⵠ[1195][0] = ΔⲆ.ⵠⲆⲆΔΔΔⲆ;
      Ⲇⵠ[1195][1] = ΔⲆ.ⵠΔⵠᐃⵠΔΔ;
      Ⲇⵠ[1195][2] = ΔⲆ.ΔΔΔΔⲆᐃⵠ;
      Ⲇⵠ[1197] = Ⲇⵠ[1195];
      Ⲇⵠ[1196] = Ⲇⵠ[1195];
      Ⲇⵠ[1199] = [];
      Ⲇⵠ[1199][0] = ΔⲆ.ΔⵠⲆᐃᐃᐃᐃ;
      Ⲇⵠ[1199][1] = ΔⲆ.ⲆΔⵠⲆΔⲆⵠ;
      Ⲇⵠ[1199][2] = ΔⲆ.ⵠΔⲆⲆᐃⲆᐃ;
      Ⲇⵠ[1201] = Ⲇⵠ[1199];
      Ⲇⵠ[1200] = Ⲇⵠ[1199];
      Ⲇⵠ[1203] = [];
      Ⲇⵠ[1203][0] = ΔⲆ.ⵠⲆᐃΔᐃⲆΔ;
      Ⲇⵠ[1203][1] = ΔⲆ.ᐃΔⲆΔⵠᐃΔ;
      Ⲇⵠ[1203][2] = ΔⲆ.ⵠΔⵠΔᐃⵠΔ;
      Ⲇⵠ[1205] = Ⲇⵠ[1203];
      Ⲇⵠ[1204] = Ⲇⵠ[1203];
      Ⲇⵠ[1207] = [];
      Ⲇⵠ[1207][0] = ΔⲆ.ΔⵠⵠⵠⵠⵠⲆ;
      Ⲇⵠ[1207][1] = ΔⲆ.ⲆⵠΔᐃⲆΔⵠ;
      Ⲇⵠ[1207][2] = ΔⲆ.ⵠⲆⵠΔΔᐃᐃ;
      Ⲇⵠ[1209] = Ⲇⵠ[1207];
      Ⲇⵠ[1208] = Ⲇⵠ[1207];
      Ⲇⵠ[1211] = [];
      Ⲇⵠ[1211][0] = ΔⲆ.ⵠᐃᐃΔΔΔⵠ;
      Ⲇⵠ[1211][1] = ΔⲆ.ⲆⲆⵠᐃᐃΔⲆ;
      Ⲇⵠ[1211][2] = ΔⲆ.ⲆᐃΔᐃⵠᐃⵠ;
      Ⲇⵠ[1213] = Ⲇⵠ[1211];
      Ⲇⵠ[1212] = Ⲇⵠ[1211];
      Ⲇⵠ[1215] = [];
      Ⲇⵠ[1215][0] = ΔⲆ.ⲆⵠΔⵠΔⵠⲆ;
      Ⲇⵠ[1215][1] = ΔⲆ.ᐃΔⲆⲆΔᐃⲆ;
      Ⲇⵠ[1215][2] = ΔⲆ.ⲆᐃⵠᐃⲆⵠᐃ;
      Ⲇⵠ[1217] = Ⲇⵠ[1215];
      Ⲇⵠ[1216] = Ⲇⵠ[1215];
      Ⲇⵠ[518] = cu(1, [{
        f: Nc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[519] = Ⲇⵠ[518];
      Ⲇⵠ[532] = cu(1, [{
        f: cc,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[533] = Ⲇⵠ[532];
      Ⲇⵠ[521] = cu(1, [{
        f: Kc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      Ⲇⵠ[523] = cu(1, [{
        f: Kc,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      Ⲇⵠ[529] = cu(1, [{
        f: ic,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: oc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: sc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: Fp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[530] = Ⲇⵠ[529];
      Ⲇⵠ[553] = cu(1, [{
        f: _p,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[555] = Ⲇⵠ[553];
      Ⲇⵠ[541] = cu(1, [{
        f: Up,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[542] = Ⲇⵠ[541];
      Ⲇⵠ[779] = cu(1, [{
        f: vp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[780] = Ⲇⵠ[779];
      Ⲇⵠ[767] = cu(1, [{
        f: Pc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[768] = Ⲇⵠ[767];
      Ⲇⵠ[776] = cu(1, [{
        f: rc,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[777] = Ⲇⵠ[776];
      Ⲇⵠ[771] = cu(1, [{
        f: rc,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[772] = Ⲇⵠ[771];
      Ⲇⵠ[756] = cu(1, [{
        f: Ac,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[758] = Ⲇⵠ[756];
      Ⲇⵠ[760] = cu(1, [{
        f: Ac,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[762] = Ⲇⵠ[760];
      Ⲇⵠ[764] = cu(1, [{
        f: Ac,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[770] = Ⲇⵠ[764];
      Ⲇⵠ[910] = cu(1, [{
        f: dm,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[912] = Ⲇⵠ[910];
      Ⲇⵠ[911] = Ⲇⵠ[910];
      Ⲇⵠ[732] = cu(1, [{
        f: jp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[734] = Ⲇⵠ[732];
      Ⲇⵠ[563] = cu(1, [{
        f: up,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[564] = Ⲇⵠ[563];
      Ⲇⵠ[751] = cu(1, [{
        f: ip,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[252] = cu(1, [{
        f: Yc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[753] = cu(1, [{
        f: ip,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[253] = cu(1, [{
        f: Yc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[176] = cu(1, [{
        f: fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[177] = cu(1, [{
        f: fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[175] = cu(1, [{
        f: fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[616] = cu(1, [{
        f: Hp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[618] = Ⲇⵠ[616];
      Ⲇⵠ[699] = cu(1, [{
        f: Hp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[700] = Ⲇⵠ[699];
      Ⲇⵠ[702] = cu(1, [{
        f: Hp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[704] = Ⲇⵠ[702];
      Ⲇⵠ[705] = cu(1, [{
        f: Hp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[706] = Ⲇⵠ[705];
      Ⲇⵠ[420] = cu(1, [{
        f: Sp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[421] = Ⲇⵠ[420];
      Ⲇⵠ[826] = cu(1, [{
        f: Vc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[827] = Ⲇⵠ[826];
      Ⲇⵠ[429] = cu(1, [{
        f: xp,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[430] = Ⲇⵠ[429];
      Ⲇⵠ[432] = cu(1, [{
        f: Op,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[433] = Ⲇⵠ[432];
      Ⲇⵠ[435] = cu(1, [{
        f: kc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[436] = Ⲇⵠ[435];
      Ⲇⵠ[438] = cu(1, [{
        f: Pp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[439] = Ⲇⵠ[438];
      Ⲇⵠ[441] = cu(1, [{
        f: qc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[442] = Ⲇⵠ[441];
      Ⲇⵠ[418] = cu(1, [{
        f: Bc,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[609] = cu(1, [{
        f: Tc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[142] = cu(1, [{
        f: dc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[140] = cu(1, [{
        f: Tc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[180] = cu(1, [{
        f: qp,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[181] = cu(1, [{
        f: gp,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[784] = Ⲇⵠ[180];
      Ⲇⵠ[785] = Ⲇⵠ[181];
      Ⲇⵠ[789] = cu(1, [{
        f: Mc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[791] = Ⲇⵠ[789];
      Ⲇⵠ[613] = cu(1, [{
        f: Sc,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[612] = cu(1, [{
        f: zp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[715] = Ⲇⵠ[613];
      Ⲇⵠ[611] = Ⲇⵠ[612];
      Ⲇⵠ[634] = cu(1, [{
        f: Eu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[635] = Ⲇⵠ[634];
      Ⲇⵠ[200] = cu(1, [{
        f: em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[866] = cu(1, [{
        f: am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[143] = cu(1, [{
        f: Zc,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[690] = Ⲇⵠ[143];
      Ⲇⵠ[662] = cu(1, [{
        f: Lm,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[664] = cu(1, [{
        f: pm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[666] = Ⲇⵠ[664];
      Ⲇⵠ[649] = cu(1, [{
        f: Mm,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[650] = Ⲇⵠ[649];
      Ⲇⵠ[674] = cu(1, [{
        f: Wt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[646] = cu(1, [{
        f: Pm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      Ⲇⵠ[647] = Ⲇⵠ[646];
      Ⲇⵠ[685] = cu(1, [{
        f: ac,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[684] = Ⲇⵠ[685];
      Ⲇⵠ[870] = cu(1, [{
        f: Ed,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[871] = Ⲇⵠ[870];
      Ⲇⵠ[605] = cu(1, [{
        f: kp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[604] = Ⲇⵠ[605];
      Ⲇⵠ[842] = cu(1, [{
        f: Ld,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[843] = Ⲇⵠ[842];
      Ⲇⵠ[652] = cu(1, [{
        f: Wp,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      Ⲇⵠ[654] = Ⲇⵠ[652];
      Ⲇⵠ[626] = cu(1, [{
        f: Wp,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[627] = Ⲇⵠ[626];
      Ⲇⵠ[629] = cu(1, [{
        f: ep,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      Ⲇⵠ[196] = cu(1, [{
        f: Hu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[898] = Ⲇⵠ[196];
      Ⲇⵠ[659] = cu(1, [{
        f: vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[660] = Ⲇⵠ[659];
      Ⲇⵠ[145] = cu(1, [{
        f: Vt,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      Ⲇⵠ[730] = Ⲇⵠ[145];
      Ⲇⵠ[566] = [];
      Ⲇⵠ[566][0] = ΔⲆ.ⵠᐃⲆⵠΔⲆⵠ;
      Ⲇⵠ[566][1] = ΔⲆ.ᐃᐃᐃΔᐃᐃⵠ;
      Ⲇⵠ[566][2] = ΔⲆ.ⵠⲆΔᐃᐃΔⵠ;
      Ⲇⵠ[567] = Ⲇⵠ[566];
      Ⲇⵠ[568] = Ⲇⵠ[566];
      Ⲇⵠ[877] = [];
      Ⲇⵠ[877][0] = ΔⲆ.ᐃᐃⲆⲆⵠⲆⲆ;
      Ⲇⵠ[877][1] = ΔⲆ.ΔⲆΔⲆⲆᐃΔ;
      Ⲇⵠ[877][2] = ΔⲆ.ⵠᐃⲆᐃᐃⵠⵠ;
      Ⲇⵠ[879] = Ⲇⵠ[877];
      Ⲇⵠ[878] = Ⲇⵠ[877];
      Ⲇⵠ[933] = Ⲇⵠ[932];
      Ⲇⵠ[934] = Ⲇⵠ[932];
      Ⲇⵠ[932] = [];
      Ⲇⵠ[932][0] = ΔⲆ.ⲆΔΔᐃᐃΔᐃ;
      Ⲇⵠ[932][1] = ΔⲆ.ⲆⵠⲆⵠᐃⲆᐃ;
      Ⲇⵠ[932][2] = ΔⲆ.ΔⵠΔΔⲆᐃⵠ;
      Ⲇⵠ[933] = Ⲇⵠ[932];
      Ⲇⵠ[934] = Ⲇⵠ[932];
      Ⲇⵠ[943] = [];
      Ⲇⵠ[943][0] = ΔⲆ.ⲆΔⵠᐃⵠΔⲆ;
      Ⲇⵠ[943][1] = ΔⲆ.ᐃⵠⲆⲆΔⲆⲆ;
      Ⲇⵠ[943][2] = ΔⲆ.ⲆⵠⲆᐃΔⲆΔ;
      Ⲇⵠ[944] = Ⲇⵠ[943];
      Ⲇⵠ[945] = Ⲇⵠ[943];
      Ⲇⵠ[921] = [];
      Ⲇⵠ[921][0] = ΔⲆ.ΔΔⵠⲆΔΔⲆ;
      Ⲇⵠ[921][1] = ΔⲆ.ⲆⵠΔΔⲆⲆⵠ;
      Ⲇⵠ[921][2] = ΔⲆ.ⵠΔΔᐃⵠΔΔ;
      Ⲇⵠ[922] = Ⲇⵠ[921];
      Ⲇⵠ[923] = Ⲇⵠ[921];
      Ⲇⵠ[925] = [];
      Ⲇⵠ[925][0] = ΔⲆ.ᐃᐃΔΔΔΔⵠ;
      Ⲇⵠ[925][1] = ΔⲆ.ⵠΔⵠⲆΔⵠᐃ;
      Ⲇⵠ[925][2] = ΔⲆ.ⵠⵠᐃⲆⲆⵠᐃ;
      Ⲇⵠ[926] = Ⲇⵠ[925];
      Ⲇⵠ[927] = Ⲇⵠ[925];
      Ⲇⵠ[929] = [];
      Ⲇⵠ[929][0] = ΔⲆ.ⵠΔⲆᐃᐃⲆᐃ;
      Ⲇⵠ[929][1] = ΔⲆ.ᐃᐃᐃᐃᐃⲆⵠ;
      Ⲇⵠ[929][2] = ΔⲆ.ᐃΔⵠⲆⵠⲆⵠ;
      Ⲇⵠ[930] = Ⲇⵠ[929];
      Ⲇⵠ[931] = Ⲇⵠ[929];
      Ⲇⵠ[946] = [];
      Ⲇⵠ[946][0] = ΔⲆ.ⲆᐃⲆΔΔᐃⵠ;
      Ⲇⵠ[946][1] = ΔⲆ.ⵠⵠⲆΔΔΔΔ;
      Ⲇⵠ[946][2] = ΔⲆ.ΔⵠⲆⵠΔⵠᐃ;
      Ⲇⵠ[947] = Ⲇⵠ[946];
      Ⲇⵠ[948] = Ⲇⵠ[946];
      Ⲇⵠ[735] = [];
      Ⲇⵠ[735][0] = ΔⲆ.ⲆⲆΔᐃΔᐃᐃ;
      Ⲇⵠ[735][1] = ΔⲆ.ⲆⲆᐃΔΔᐃΔ;
      Ⲇⵠ[735][2] = ΔⲆ.ⵠΔⲆⵠΔⲆᐃ;
      Ⲇⵠ[737] = Ⲇⵠ[735];
      Ⲇⵠ[736] = Ⲇⵠ[735];
      Ⲇⵠ[1164] = [];
      Ⲇⵠ[1164][0] = ΔⲆ.ᐃΔⲆᐃⵠⲆᐃ;
      Ⲇⵠ[1164][1] = ΔⲆ.ⲆⵠᐃⵠⲆⵠᐃ;
      Ⲇⵠ[1164][2] = ΔⲆ.ⲆᐃᐃⲆⵠⵠᐃ;
      Ⲇⵠ[xs.ᐃⲆⵠᐃΔᐃᐃⲆΔ] = Ⲇⵠ[1164];
      Ⲇⵠ[1165] = Ⲇⵠ[1164];
      Ⲇⵠ[738] = [];
      Ⲇⵠ[738][0] = ΔⲆ.ᐃⵠⵠⲆⵠΔᐃ;
      Ⲇⵠ[738][1] = ΔⲆ.ⵠᐃⲆⵠᐃⵠᐃ;
      Ⲇⵠ[738][2] = ΔⲆ.ᐃᐃΔⲆⲆⵠⲆ;
      Ⲇⵠ[740] = Ⲇⵠ[738];
      Ⲇⵠ[739] = Ⲇⵠ[738];
      Ⲇⵠ[741] = [];
      Ⲇⵠ[741][0] = ΔⲆ.ⵠᐃΔⵠⵠⲆᐃ;
      Ⲇⵠ[741][1] = ΔⲆ.ⲆᐃⲆⵠΔΔᐃ;
      Ⲇⵠ[741][2] = ΔⲆ.ΔᐃΔⵠᐃⵠΔ;
      Ⲇⵠ[743] = Ⲇⵠ[741];
      Ⲇⵠ[742] = Ⲇⵠ[741];
      Ⲇⵠ[938] = [];
      Ⲇⵠ[938][0] = ΔⲆ.ᐃⲆΔᐃΔΔᐃ;
      Ⲇⵠ[938][1] = ΔⲆ.ᐃⲆᐃⵠᐃⲆⵠ;
      Ⲇⵠ[938][2] = ΔⲆ.ᐃᐃΔⵠⲆᐃΔ;
      Ⲇⵠ[939] = Ⲇⵠ[938];
      Ⲇⵠ[936] = [];
      Ⲇⵠ[936][0] = ΔⲆ.ΔᐃᐃᐃⲆⲆᐃ;
      Ⲇⵠ[936][1] = ΔⲆ.ⵠᐃΔΔⵠⵠᐃ;
      Ⲇⵠ[936][2] = ΔⲆ.ⵠⲆΔⲆⲆΔⵠ;
      Ⲇⵠ[937] = Ⲇⵠ[936];
      Ⲇⵠ[617] = Ⲇⵠ[616];
      Ⲇⵠ[701] = Ⲇⵠ[699];
      Ⲇⵠ[703] = Ⲇⵠ[702];
      Ⲇⵠ[707] = Ⲇⵠ[705];
      Ⲇⵠ[348] = Ⲇⵠ[311];
      Ⲇⵠ[633] = Ⲇⵠ[631];
      Ⲇⵠ[645] = Ⲇⵠ[644];
      Ⲇⵠ[640] = Ⲇⵠ[639];
      Ⲇⵠ[273] = Ⲇⵠ[309];
      Ⲇⵠ[590] = Ⲇⵠ[252];
      Ⲇⵠ[752] = Ⲇⵠ[751];
      Ⲇⵠ[591] = Ⲇⵠ[253];
      Ⲇⵠ[754] = Ⲇⵠ[753];
      Ⲇⵠ[276] = Ⲇⵠ[328];
      Ⲇⵠ[863] = Ⲇⵠ[865];
      Ⲇⵠ[862] = Ⲇⵠ[860];
      Ⲇⵠ[831] = Ⲇⵠ[829];
      Ⲇⵠ[340] = Ⲇⵠ[261];
      Ⲇⵠ[596] = Ⲇⵠ[594];
      Ⲇⵠ[345] = Ⲇⵠ[292];
      Ⲇⵠ[346] = Ⲇⵠ[293];
      Ⲇⵠ[457] = Ⲇⵠ[455];
      Ⲇⵠ[274] = Ⲇⵠ[313];
      Ⲇⵠ[341] = Ⲇⵠ[312];
      Ⲇⵠ[272] = Ⲇⵠ[258];
      Ⲇⵠ[344] = Ⲇⵠ[296];
      Ⲇⵠ[459] = Ⲇⵠ[458];
      Ⲇⵠ[342] = Ⲇⵠ[315];
      Ⲇⵠ[270] = Ⲇⵠ[297];
      Ⲇⵠ[271] = Ⲇⵠ[298];
      Ⲇⵠ[343] = Ⲇⵠ[316];
      Ⲇⵠ[269] = Ⲇⵠ[277];
      Ⲇⵠ[358] = Ⲇⵠ[310];
      Ⲇⵠ[354] = Ⲇⵠ[329];
      Ⲇⵠ[356] = Ⲇⵠ[331];
      Ⲇⵠ[355] = Ⲇⵠ[330];
      Ⲇⵠ[494] = Ⲇⵠ[492];
      Ⲇⵠ[349] = Ⲇⵠ[317];
      Ⲇⵠ[350] = Ⲇⵠ[319];
      Ⲇⵠ[275] = Ⲇⵠ[300];
      Ⲇⵠ[351] = Ⲇⵠ[323];
      Ⲇⵠ[353] = Ⲇⵠ[305];
      Ⲇⵠ[514] = Ⲇⵠ[513];
      Ⲇⵠ[352] = Ⲇⵠ[303];
      Ⲇⵠ[520] = Ⲇⵠ[518];
      Ⲇⵠ[534] = Ⲇⵠ[532];
      Ⲇⵠ[531] = Ⲇⵠ[529];
      Ⲇⵠ[522] = Ⲇⵠ[521];
      Ⲇⵠ[524] = Ⲇⵠ[523];
      Ⲇⵠ[565] = Ⲇⵠ[563];
      Ⲇⵠ[554] = Ⲇⵠ[553];
      Ⲇⵠ[357] = Ⲇⵠ[335];
      Ⲇⵠ[359] = Ⲇⵠ[337];
      Ⲇⵠ[339] = Oq(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        kd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        xd(e, c[0], c[1], 4);
        e.save();
        kd(e, a * 30, a * 115, a * 60, a * 5, a * 15);
        e.restore();
        xd(e, c[2], c[3], 4);
        e.save();
        kd(e, a * 50, a * 117, a * 20, a * 10, a * 15);
        e.restore();
        xd(e, c[2]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      Ⲇⵠ[366] = cu(0.5, [{
        f: Cc,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      Ⲇⵠ[382] = Ⲇⵠ[361];
      Ⲇⵠ[383] = Ⲇⵠ[362];
      Ⲇⵠ[384] = Ⲇⵠ[364];
      Ⲇⵠ[497] = Ⲇⵠ[495];
      Ⲇⵠ[385] = Ⲇⵠ[392];
      Ⲇⵠ[774] = Ⲇⵠ[178];
      Ⲇⵠ[775] = Ⲇⵠ[179];
      Ⲇⵠ[386] = Ⲇⵠ[368];
      Ⲇⵠ[625] = Ⲇⵠ[624];
      Ⲇⵠ[394] = Ⲇⵠ[393];
      Ⲇⵠ[1163] = Ⲇⵠ[1162];
      Ⲇⵠ[506] = Ⲇⵠ[505];
      Ⲇⵠ[387] = Ⲇⵠ[369];
      Ⲇⵠ[504] = Ⲇⵠ[502];
      Ⲇⵠ[388] = Ⲇⵠ[372];
      Ⲇⵠ[389] = Ⲇⵠ[375];
      Ⲇⵠ[390] = Ⲇⵠ[378];
      Ⲇⵠ[501] = Ⲇⵠ[499];
      Ⲇⵠ[391] = Ⲇⵠ[381];
      Ⲇⵠ[403] = Ⲇⵠ[401];
      Ⲇⵠ[397] = Ⲇⵠ[395];
      Ⲇⵠ[400] = Ⲇⵠ[398];
      Ⲇⵠ[406] = Ⲇⵠ[404];
      Ⲇⵠ[474] = Ⲇⵠ[472];
      Ⲇⵠ[875] = Ⲇⵠ[874];
      Ⲇⵠ[552] = Ⲇⵠ[550];
      Ⲇⵠ[710] = Ⲇⵠ[709];
      Ⲇⵠ[479] = Ⲇⵠ[477];
      Ⲇⵠ[482] = Ⲇⵠ[480];
      Ⲇⵠ[485] = Ⲇⵠ[483];
      Ⲇⵠ[488] = Ⲇⵠ[486];
      Ⲇⵠ[410] = Ⲇⵠ[408];
      Ⲇⵠ[719] = Ⲇⵠ[717];
      Ⲇⵠ[422] = Ⲇⵠ[420];
      Ⲇⵠ[431] = Ⲇⵠ[429];
      Ⲇⵠ[434] = Ⲇⵠ[432];
      Ⲇⵠ[437] = Ⲇⵠ[435];
      Ⲇⵠ[543] = Ⲇⵠ[541];
      Ⲇⵠ[733] = Ⲇⵠ[732];
      Ⲇⵠ[440] = Ⲇⵠ[438];
      Ⲇⵠ[443] = Ⲇⵠ[441];
      Ⲇⵠ[446] = Ⲇⵠ[418];
      Ⲇⵠ[606] = Ⲇⵠ[605];
      Ⲇⵠ[844] = Ⲇⵠ[842];
      Ⲇⵠ[683] = Ⲇⵠ[685];
      Ⲇⵠ[610] = Ⲇⵠ[609];
      Ⲇⵠ[689] = Ⲇⵠ[143];
      Ⲇⵠ[686] = Ⲇⵠ[142];
      Ⲇⵠ[682] = Ⲇⵠ[140];
      Ⲇⵠ[615] = Ⲇⵠ[613];
      Ⲇⵠ[614] = Ⲇⵠ[612];
      Ⲇⵠ[628] = Ⲇⵠ[626];
      Ⲇⵠ[630] = Ⲇⵠ[629];
      Ⲇⵠ[636] = Ⲇⵠ[634];
      Ⲇⵠ[868] = Ⲇⵠ[200];
      Ⲇⵠ[867] = Ⲇⵠ[866];
      Ⲇⵠ[648] = Ⲇⵠ[646];
      Ⲇⵠ[651] = Ⲇⵠ[649];
      Ⲇⵠ[653] = Ⲇⵠ[652];
      Ⲇⵠ[661] = Ⲇⵠ[659];
      Ⲇⵠ[898] = Ⲇⵠ[196];
      Ⲇⵠ[663] = Ⲇⵠ[662];
      Ⲇⵠ[665] = Ⲇⵠ[664];
      Ⲇⵠ[675] = Ⲇⵠ[674];
      Ⲇⵠ[731] = Ⲇⵠ[145];
      Ⲇⵠ[757] = Ⲇⵠ[756];
      Ⲇⵠ[759] = Ⲇⵠ[176];
      Ⲇⵠ[761] = Ⲇⵠ[760];
      Ⲇⵠ[763] = Ⲇⵠ[177];
      Ⲇⵠ[765] = Ⲇⵠ[764];
      Ⲇⵠ[766] = Ⲇⵠ[175];
      Ⲇⵠ[769] = Ⲇⵠ[767];
      Ⲇⵠ[773] = Ⲇⵠ[771];
      Ⲇⵠ[778] = Ⲇⵠ[776];
      Ⲇⵠ[781] = Ⲇⵠ[779];
      Ⲇⵠ[787] = Ⲇⵠ[181];
      Ⲇⵠ[786] = Ⲇⵠ[180];
      Ⲇⵠ[790] = Ⲇⵠ[789];
      Ⲇⵠ[801] = Ⲇⵠ[800];
      Ⲇⵠ[810] = Ⲇⵠ[808];
      Ⲇⵠ[836] = Ⲇⵠ[834];
      Ⲇⵠ[847] = Ⲇⵠ[845];
      Ⲇⵠ[828] = Ⲇⵠ[826];
    })();
    Ⲇⵠ[540] = [];
    Ⲇⵠ[540][xs.ΔΔΔ] = [];
    Ⲇⵠ[540][xs.ⵠᐃⲆ] = [];
    for (var b = 0; xs.ⵠⲆⲆΔΔᐃΔ > b; b++) {
      Ⲇⵠ[540][xs.ΔΔΔ].push(Oq(Cm(a, 4 + b, "#59B8CE")));
      Ⲇⵠ[540][xs.ⵠᐃⲆ].push(Oq(Cm(a, 4 + b, "#90DDD9")));
    }
    Ⲇⵠ[470] = [];
    Ⲇⵠ[470][xs.ΔΔΔ] = [];
    Ⲇⵠ[470][xs.ⵠᐃⲆ] = [];
    for (b = 0; xs.ᐃⵠᐃⵠΔⵠⲆ > b; b++) {
      Ⲇⵠ[470][xs.ΔΔΔ].push(Oq(Cm(a, 4 + b, "#fff")));
      Ⲇⵠ[470][xs.ⵠᐃⲆ].push(Oq(Cm(a, 4 + b, "#fff")));
    }
    Ⲇⵠ[471] = [];
    Ⲇⵠ[471][xs.ΔΔΔ] = [];
    Ⲇⵠ[471][xs.ⵠᐃⲆ] = [];
    for (b = 0; xs.ᐃⵠᐃⵠΔⵠⲆ > b; b++) {
      Ⲇⵠ[471][xs.ΔΔΔ].push(Oq(Cm(a, 6 + b, "#DDCD8A")));
      Ⲇⵠ[471][xs.ⵠᐃⲆ].push(Oq(Cm(a, 6 + b, "#155E57")));
    }
    Ⲇⵠ[942] = [];
    Ⲇⵠ[942][xs.ΔΔΔ] = [];
    Ⲇⵠ[942][xs.ⵠᐃⲆ] = [];
    for (b = 0; b < xs.ᐃⵠΔⵠⲆⵠΔ; b++) {
      Ⲇⵠ[942][xs.ΔΔΔ].push(Oq(Cm(a, 4 + b, "#353326")));
      Ⲇⵠ[942][xs.ⵠᐃⲆ].push(Oq(Cm(a, 4 + b, "#1D2526")));
    }
    Ⲇⵠ[201] = [];
    Ⲇⵠ[201][xs.ΔΔΔ] = Oq(Qd(a * 1.5, 0, ["#ee71a9"]));
    Ⲇⵠ[201][xs.ⵠᐃⲆ] = Oq(Qd(a * 1.5, 0, ["#ee71a9"]));
    Ⲇⵠ[872] = [Ⲇⵠ[201]];
    Ⲇⵠ[872][1] = [];
    Ⲇⵠ[872][2] = [];
    Ⲇⵠ[872][3] = [];
    Ⲇⵠ[872][4] = [];
    Ⲇⵠ[872][1][xs.ΔΔΔ] = Oq(Qd(a * 1.5, 0, ["#e2d63b"]));
    Ⲇⵠ[872][1][xs.ⵠᐃⲆ] = Oq(Qd(a * 1.5, 0, ["#e2d63b"]));
    Ⲇⵠ[872][2][xs.ΔΔΔ] = Oq(Qd(a * 1.5, 0, ["#309cbd"]));
    Ⲇⵠ[872][2][xs.ⵠᐃⲆ] = Oq(Qd(a * 1.5, 0, ["#309cbd"]));
    Ⲇⵠ[872][3][xs.ΔΔΔ] = Oq(Qd(a * 1.5, 0, ["#cd232d"]));
    Ⲇⵠ[872][3][xs.ⵠᐃⲆ] = Oq(Qd(a * 1.5, 0, ["#cd232d"]));
    Ⲇⵠ[872][4][xs.ΔΔΔ] = Oq(Qd(a * 1.5, 0, ["#42b672"]));
    Ⲇⵠ[872][4][xs.ⵠᐃⲆ] = Oq(Qd(a * 1.5, 0, ["#42b672"]));
    if (ⵠᐃΔᐃ.ᐃᐃΔΔⲆⲆⵠ("cti", jg.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Oq = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    Ⲇⵠ[797] = Oq(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    Ⲇⵠ[108] = [];
    Ⲇⵠ[108][xs.ΔΔΔ] = [];
    Ⲇⵠ[108][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[108][xs.ΔΔΔ].push(Oq(wm(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇⵠ[108][xs.ΔΔΔ].push(Oq(wm(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇⵠ[108][xs.ΔΔΔ].push(Oq(wm(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    Ⲇⵠ[108][xs.ⵠᐃⲆ].push(Oq(wm(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇⵠ[108][xs.ⵠᐃⲆ].push(Oq(wm(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇⵠ[108][xs.ⵠᐃⲆ].push(Oq(wm(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    Ⲇⵠ[111] = [];
    Ⲇⵠ[111][xs.ΔΔΔ] = [];
    Ⲇⵠ[111][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[111][xs.ΔΔΔ].push(Oq(km(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[111][xs.ΔΔΔ].push(Oq(km(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[111][xs.ΔΔΔ].push(Oq(km(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[111][xs.ⵠᐃⲆ].push(Oq(km(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇⵠ[111][xs.ⵠᐃⲆ].push(Oq(km(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇⵠ[111][xs.ⵠᐃⲆ].push(Oq(km(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    Ⲇⵠ[112] = [];
    Ⲇⵠ[112][xs.ΔΔΔ] = [];
    Ⲇⵠ[112][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[112][xs.ΔΔΔ].push(Oq(Wm(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇⵠ[112][xs.ΔΔΔ].push(Oq(Wm(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇⵠ[112][xs.ΔΔΔ].push(Oq(Wm(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    Ⲇⵠ[112][xs.ⵠᐃⲆ].push(Oq(Wm(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇⵠ[112][xs.ⵠᐃⲆ].push(Oq(Wm(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇⵠ[112][xs.ⵠᐃⲆ].push(Oq(Wm(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    Ⲇⵠ[239] = [];
    Ⲇⵠ[239][xs.ΔΔΔ] = ΔⲆ.ⵠⲆⵠΔΔⵠΔ;
    Ⲇⵠ[239][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⲆⵠΔᐃⵠ;
    Ⲇⵠ[286] = [];
    Ⲇⵠ[286][xs.ΔΔΔ] = Oq(ru(a * 0.6, ["#0d1b1c"]));
    Ⲇⵠ[286][xs.ⵠᐃⲆ] = Oq(ru(a * 0.6, ["#030d14"]));
    Ⲇⵠ[793] = [];
    Ⲇⵠ[793][xs.ΔΔΔ] = Oq(ku(a * 0.6, ["#2a2938", "#242330"]));
    Ⲇⵠ[793][xs.ⵠᐃⲆ] = Oq(ku(a * 0.6, ["#1b1e30", "#161921"]));
    Ⲇⵠ[820] = [];
    Ⲇⵠ[820][xs.ΔΔΔ] = Oq(Wd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    Ⲇⵠ[820][xs.ⵠᐃⲆ] = Oq(Wd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    Ⲇⵠ[821] = [];
    Ⲇⵠ[821][xs.ΔΔΔ] = Oq(Rd(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    Ⲇⵠ[821][xs.ⵠᐃⲆ] = Oq(Rd(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    Ⲇⵠ[822] = [];
    Ⲇⵠ[822][xs.ΔΔΔ] = Oq(mu(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    Ⲇⵠ[822][xs.ⵠᐃⲆ] = Oq(mu(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    Ⲇⵠ[823] = Oq(qd(a * 0.6, ["#BB0000"]));
    Ⲇⵠ[824] = Oq(qd(a * 0.6, ["#DBE71C"]));
    Ⲇⵠ[825] = Oq(qd(a * 0.6, ["#00BB00"]));
    Ⲇⵠ[109] = [];
    Ⲇⵠ[109][xs.ΔΔΔ] = [];
    Ⲇⵠ[109][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[109][xs.ΔΔΔ].push(iu(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], ul, 0));
    Ⲇⵠ[109][xs.ΔΔΔ].push(iu(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], T, 0));
    Ⲇⵠ[109][xs.ΔΔΔ].push(iu(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], Bs, 0));
    Ⲇⵠ[109][xs.ΔΔΔ].push(iu(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
    Ⲇⵠ[109][xs.ΔΔΔ].push(iu(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
    Ⲇⵠ[109][xs.ΔΔΔ].push(iu(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], fn, 0));
    Ⲇⵠ[109][xs.ⵠᐃⲆ].push(iu(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], ft, 0));
    Ⲇⵠ[109][xs.ⵠᐃⲆ].push(iu(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], nl, 0));
    Ⲇⵠ[109][xs.ⵠᐃⲆ].push(iu(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], ft, 0));
    Ⲇⵠ[109][xs.ⵠᐃⲆ].push(iu(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], kg, 0));
    Ⲇⵠ[109][xs.ⵠᐃⲆ].push(iu(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    Ⲇⵠ[109][xs.ⵠᐃⲆ].push(iu(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], Ej, 0));
    Ⲇⵠ[307] = [];
    Ⲇⵠ[307][xs.ΔΔΔ] = [];
    Ⲇⵠ[307][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[307][xs.ΔΔΔ].push(Oq(ju(lu(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], Le), Ⲇⵠ[109][xs.ΔΔΔ][0])));
    Ⲇⵠ[307][xs.ΔΔΔ].push(Oq(ju(lu(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], dg), Ⲇⵠ[109][xs.ΔΔΔ][1])));
    Ⲇⵠ[307][xs.ⵠᐃⲆ].push(Oq(ju(lu(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), Ⲇⵠ[109][xs.ⵠᐃⲆ][0])));
    Ⲇⵠ[307][xs.ⵠᐃⲆ].push(Oq(ju(lu(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], dg), Ⲇⵠ[109][xs.ⵠᐃⲆ][1])));
    Ⲇⵠ[307][xs.ΔΔΔ].push(Oq(ju(lu(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], na), Ⲇⵠ[109][xs.ΔΔΔ][2])));
    Ⲇⵠ[307][xs.ΔΔΔ].push(Oq(ju(lu(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Ui), Ⲇⵠ[109][xs.ΔΔΔ][2])));
    Ⲇⵠ[307][xs.ⵠᐃⲆ].push(Oq(ju(lu(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), Ⲇⵠ[109][xs.ⵠᐃⲆ][2])));
    Ⲇⵠ[307][xs.ⵠᐃⲆ].push(Oq(ju(lu(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], kg), Ⲇⵠ[109][xs.ⵠᐃⲆ][3])));
    Ⲇⵠ[109][xs.ΔΔΔ][5] = Oq(Ⲇⵠ[109][xs.ΔΔΔ][5]);
    Ⲇⵠ[109][xs.ΔΔΔ][4] = Oq(Ⲇⵠ[109][xs.ΔΔΔ][4]);
    Ⲇⵠ[109][xs.ΔΔΔ][3] = Oq(Ⲇⵠ[109][xs.ΔΔΔ][3]);
    Ⲇⵠ[109][xs.ΔΔΔ][2] = Oq(Ⲇⵠ[109][xs.ΔΔΔ][2]);
    Ⲇⵠ[109][xs.ΔΔΔ][1] = Oq(Ⲇⵠ[109][xs.ΔΔΔ][1]);
    Ⲇⵠ[109][xs.ΔΔΔ][0] = Oq(Ⲇⵠ[109][xs.ΔΔΔ][0]);
    Ⲇⵠ[109][xs.ⵠᐃⲆ][5] = Oq(Ⲇⵠ[109][xs.ⵠᐃⲆ][5]);
    Ⲇⵠ[109][xs.ⵠᐃⲆ][4] = Oq(Ⲇⵠ[109][xs.ⵠᐃⲆ][4]);
    Ⲇⵠ[109][xs.ⵠᐃⲆ][3] = Oq(Ⲇⵠ[109][xs.ⵠᐃⲆ][3]);
    Ⲇⵠ[109][xs.ⵠᐃⲆ][2] = Oq(Ⲇⵠ[109][xs.ⵠᐃⲆ][2]);
    Ⲇⵠ[109][xs.ⵠᐃⲆ][1] = Oq(Ⲇⵠ[109][xs.ⵠᐃⲆ][1]);
    Ⲇⵠ[109][xs.ⵠᐃⲆ][0] = Oq(Ⲇⵠ[109][xs.ⵠᐃⲆ][0]);
    Ⲇⵠ[8] = [];
    Ⲇⵠ[8][xs.ΔΔΔ] = Oq(Ad(4, xu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    Ⲇⵠ[8][xs.ⵠᐃⲆ] = Oq(Ad(4, xu(a * 0.75, U, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    Ⲇⵠ[1] = [];
    Ⲇⵠ[1][xs.ΔΔΔ] = Oq(Ad(4, xu(a * 0.75, Ho, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    Ⲇⵠ[1][xs.ⵠᐃⲆ] = Oq(Ad(4, xu(a * 0.75, fn, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    Ⲇⵠ[3] = [];
    Ⲇⵠ[3][xs.ΔΔΔ] = Oq(Ad(4, xu(a * 0.75, kg, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    Ⲇⵠ[3][xs.ⵠᐃⲆ] = Oq(Ad(4, xu(a * 0.75, f, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    Ⲇⵠ[4] = [];
    Ⲇⵠ[4][xs.ΔΔΔ] = Oq(Ad(4, xu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    Ⲇⵠ[4][xs.ⵠᐃⲆ] = Oq(Ad(4, xu(a * 0.75, U, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    Ⲇⵠ[31] = [];
    Ⲇⵠ[31][xs.ΔΔΔ] = Oq(Ad(4, xu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    Ⲇⵠ[31][xs.ⵠᐃⲆ] = Oq(Ad(4, xu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    Ⲇⵠ[9] = [];
    Ⲇⵠ[9][xs.ΔΔΔ] = Oq(Ad(3, vu(a * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    Ⲇⵠ[9][xs.ⵠᐃⲆ] = Oq(Ad(3, vu(a * 0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    Ⲇⵠ[199] = [];
    Ⲇⵠ[199][xs.ΔΔΔ] = Oq(Ad(3, im(a * 0.32, Qe, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    Ⲇⵠ[199][xs.ⵠᐃⲆ] = Oq(Ad(3, im(a * 0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    Ⲇⵠ[57] = [];
    Ⲇⵠ[57][xs.ΔΔΔ] = Oq(Ad(3, wu(a * 0.4, Ho, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    Ⲇⵠ[57][xs.ⵠᐃⲆ] = Oq(Ad(3, wu(a * 0.4, fn, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    Ⲇⵠ[0] = [];
    Ⲇⵠ[0][xs.ΔΔΔ] = Oq(Ad(3, nm(a * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    Ⲇⵠ[0][xs.ⵠᐃⲆ] = Oq(Ad(3, nm(a * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    Ⲇⵠ[5] = [];
    Ⲇⵠ[5][xs.ΔΔΔ] = Oq(Ad(3, Cu(a * 0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    Ⲇⵠ[5][xs.ⵠᐃⲆ] = Oq(Ad(3, Cu(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    Ⲇⵠ[6] = [];
    Ⲇⵠ[6][xs.ΔΔΔ] = Oq(Ad(3, Fu(a * 0.4, tg, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    Ⲇⵠ[6][xs.ⵠᐃⲆ] = Oq(Ad(3, Fu(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    Ⲇⵠ[30] = [];
    Ⲇⵠ[30][xs.ΔΔΔ] = Oq(Ad(3, Du(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    Ⲇⵠ[30][xs.ⵠᐃⲆ] = Oq(Ad(3, Du(a * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    Ⲇⵠ[285] = [];
    Ⲇⵠ[285][xs.ΔΔΔ] = [];
    Ⲇⵠ[285][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[285][xs.ΔΔΔ].push(Oq(mm(a * 0.9, 0, ["#0d4f35"], 0)));
    Ⲇⵠ[285][xs.ΔΔΔ].push(Oq(mm(a * 0.9, 0, ["#0d4f35"], 1)));
    Ⲇⵠ[285][xs.ΔΔΔ].push(Oq(mm(a * 0.9, 0, ["#0d4f35"], 2)));
    Ⲇⵠ[285][xs.ⵠᐃⲆ].push(Oq(mm(a * 0.9, 0, ["#053339"], 0)));
    Ⲇⵠ[285][xs.ⵠᐃⲆ].push(Oq(mm(a * 0.9, 0, ["#053339"], 1)));
    Ⲇⵠ[285][xs.ⵠᐃⲆ].push(Oq(mm(a * 0.9, 0, ["#053339"], 2)));
    Ⲇⵠ[285][xs.ΔΔΔ].push(Oq(gm(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    Ⲇⵠ[285][xs.ΔΔΔ].push(Oq(gm(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    Ⲇⵠ[285][xs.ⵠᐃⲆ].push(Oq(gm(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    Ⲇⵠ[285][xs.ⵠᐃⲆ].push(Oq(gm(a * 0.8, ["#052918", "#08491c", "#063417"])));
    Ⲇⵠ[183] = [];
    Ⲇⵠ[183][xs.ΔΔΔ] = Oq(Ad(Math.PI / 2, bp(a * 0.25, Ui, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    Ⲇⵠ[183][xs.ⵠᐃⲆ] = Oq(Ad(Math.PI / 2, bp(a * 0.25, Ej, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    Ⲇⵠ[803] = [];
    Ⲇⵠ[803].push(Oq(cp(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    Ⲇⵠ[803].push(Oq(cp(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    Ⲇⵠ[803].push(Oq(cp(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    Ⲇⵠ[802] = [];
    Ⲇⵠ[802][xs.ΔΔΔ] = [];
    Ⲇⵠ[802][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[802][xs.ΔΔΔ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, _r, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    Ⲇⵠ[802][xs.ⵠᐃⲆ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    Ⲇⵠ[802][xs.ΔΔΔ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    Ⲇⵠ[802][xs.ⵠᐃⲆ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    Ⲇⵠ[802][xs.ΔΔΔ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, ft, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    Ⲇⵠ[802][xs.ⵠᐃⲆ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, Le, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    Ⲇⵠ[802][xs.ΔΔΔ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, hl, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    Ⲇⵠ[802][xs.ⵠᐃⲆ].push(Oq(Ad(Math.PI / 2, Xc(a * 0.25, xo, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    Ⲇⵠ[110] = [];
    Ⲇⵠ[110][xs.ΔΔΔ] = [Oq(_m(a * 1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
    Ⲇⵠ[110][xs.ⵠᐃⲆ] = [Oq(_m(a * 1.2, true, ["#030d14", "#084442", "#0a4049"]))];
    Ⲇⵠ[623] = [];
    Ⲇⵠ[623][xs.ΔΔΔ] = Oq(_m(a * 0.8, U, ["#0e3022", "#68622D", "#665329"]));
    Ⲇⵠ[623][xs.ⵠᐃⲆ] = Oq(_m(a * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    Ⲇⵠ[189] = [];
    Ⲇⵠ[189][xs.ΔΔΔ] = Oq(_c(a * 0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    Ⲇⵠ[189][xs.ⵠᐃⲆ] = Oq(_c(a * 0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    Ⲇⵠ[192] = [];
    Ⲇⵠ[192][xs.ΔΔΔ] = Oq(Id(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    Ⲇⵠ[192][xs.ⵠᐃⲆ] = Oq(Id(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    Ⲇⵠ[194] = [];
    Ⲇⵠ[194][xs.ΔΔΔ] = Oq(xc(a * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    Ⲇⵠ[194][xs.ⵠᐃⲆ] = Oq(xc(a * 0.5, Xg, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    Ⲇⵠ[287] = [];
    Ⲇⵠ[287][xs.ΔΔΔ] = Oq(_m(a * 0.8, dg, ["#1b170c", "#0b8052", "#077b49"]));
    Ⲇⵠ[287][xs.ⵠᐃⲆ] = Oq(_m(a * 0.8, dg, ["#030d14", "#084442", "#0a4049"]));
    Ⲇⵠ[813] = [];
    Ⲇⵠ[813][xs.ΔΔΔ] = Oq(_c(a * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    Ⲇⵠ[813][xs.ⵠᐃⲆ] = Oq(_c(a * 0.5, cr, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    Ⲇⵠ[839] = [];
    Ⲇⵠ[839][xs.ΔΔΔ] = Oq(Id(a * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    Ⲇⵠ[839][xs.ⵠᐃⲆ] = Oq(Id(a * 0.5, Ha, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    Ⲇⵠ[869] = [];
    Ⲇⵠ[869][xs.ΔΔΔ] = Oq(xc(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    Ⲇⵠ[869][xs.ⵠᐃⲆ] = Oq(xc(a * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    Ⲇⵠ[854] = [];
    Ⲇⵠ[854][xs.ΔΔΔ] = Oq(vc(a * 0.45, T, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    Ⲇⵠ[854][xs.ⵠᐃⲆ] = Oq(vc(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    Ⲇⵠ[859] = Oq(vc(a * 0.65, U, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    Ⲇⵠ[294] = [];
    Ⲇⵠ[294][xs.ΔΔΔ] = Oq(Tm(a * 1.4, 0, ["#ac222a", "#e6636a"]));
    Ⲇⵠ[294][xs.ⵠᐃⲆ] = Oq(Tm(a * 1.4, 0, ["#46195e", "#744188"]));
    Ⲇⵠ[288] = [];
    Ⲇⵠ[288][xs.ΔΔΔ] = Oq(nu(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    Ⲇⵠ[288][xs.ⵠᐃⲆ] = Oq(nu(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    Ⲇⵠ[118] = [];
    Ⲇⵠ[118][xs.ΔΔΔ] = Oq(ou(a * 0.9, 0, ["#4d2d14", "#432516"]));
    Ⲇⵠ[118][xs.ⵠᐃⲆ] = Oq(ou(a * 0.9, 0, ["#282404", "#0a0a01"]));
    Ⲇⵠ[113] = [];
    Ⲇⵠ[113][xs.ΔΔΔ] = Oq(hu(a * 0.9, 0, ["#4d2d14", "#432516"]));
    Ⲇⵠ[113][xs.ⵠᐃⲆ] = Oq(hu(a * 0.9, 0, ["#282404", "#0a0a01"]));
    Ⲇⵠ[289] = [];
    Ⲇⵠ[289][xs.ΔΔΔ] = Oq(gu(a * 0.9, 0, ["#efd435"]));
    Ⲇⵠ[289][xs.ⵠᐃⲆ] = Oq(gu(a * 0.9, 0, ["#fffabb"]));
    Ⲇⵠ[282] = [];
    Ⲇⵠ[282][xs.ΔΔΔ] = Oq(qu(a * 0.9, 0, ["#efd435"]));
    Ⲇⵠ[282][xs.ⵠᐃⲆ] = Oq(qu(a * 0.9, 0, ["#fffabb"]));
    Ⲇⵠ[816] = [];
    Ⲇⵠ[816][xs.ΔΔΔ] = Oq(gu(a * 0.9, 0, ["#efd435"]));
    Ⲇⵠ[816][xs.ⵠᐃⲆ] = Oq(gu(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    Ⲇⵠ[817] = [];
    Ⲇⵠ[817][xs.ΔΔΔ] = Oq(qu(a * 0.9, 0, ["#efd435"]));
    Ⲇⵠ[817][xs.ⵠᐃⲆ] = Oq(qu(a * 0.9, 0, ["#ff5704"]));
    Ⲇⵠ[324] = Oq(Yd(a, "#ffffff"));
    Ⲇⵠ[301] = Oq(Yd(a * 1.5, "#ffffff"));
    Ⲇⵠ[306] = Oq(xm(a, "Your score:", a * 15, "#FFF"));
    Ⲇⵠ[655] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      yd(d, a * 119.5, a * 140.125, a * 19);
      xd(d, zn, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      xd(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      xd(d, Es, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      xd(d, undefined, b[3], a * 10);
      yd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      xd(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      xd(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      xd(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      kd(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      xd(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      kd(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      xd(d, b[9]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    Ⲇⵠ[656] = ΔⲆ.ᐃⲆⲆΔᐃᐃᐃ;
    Ⲇⵠ[135] = [];
    Ⲇⵠ[135][xs.ΔΔΔ] = Oq(au(a * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇⵠ[135][xs.ⵠᐃⲆ] = Oq(au(a * 1.5, dg, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇⵠ[641] = [];
    Ⲇⵠ[641][xs.ΔΔΔ] = Oq(bu(a * 2, is, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇⵠ[641][xs.ⵠᐃⲆ] = Oq(bu(a * 2, cr, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇⵠ[642] = [];
    Ⲇⵠ[642][xs.ΔΔΔ] = Oq($t(a * 1.5, Rr, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    Ⲇⵠ[642][xs.ⵠᐃⲆ] = Oq($t(a * 1.5, cr, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    Ⲇⵠ[134] = [];
    Ⲇⵠ[134][xs.ΔΔΔ] = Oq(Yt(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    Ⲇⵠ[134][xs.ⵠᐃⲆ] = Oq(Yt(a * 2.2, 0, ["#0B4049", "#08383D"]));
    Ⲇⵠ[638] = [];
    Ⲇⵠ[638][xs.ΔΔΔ] = Oq(Yt(a * 2.2, 0, ["#68622D", "#665329"]));
    Ⲇⵠ[638][xs.ⵠᐃⲆ] = Oq(Yt(a * 2.2, 0, ["#0F3A24", "#083326"]));
    Ⲇⵠ[321] = [];
    Ⲇⵠ[321][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    Ⲇⵠ[321][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    Ⲇⵠ[811] = [];
    Ⲇⵠ[811][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#c67933", "#b17238"]));
    Ⲇⵠ[811][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[984] = [];
    Ⲇⵠ[984][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    Ⲇⵠ[984][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#032d29", "#044640"]));
    Ⲇⵠ[837] = [];
    Ⲇⵠ[837][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    Ⲇⵠ[837][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#1c6161", "#07413f"]));
    Ⲇⵠ[848] = [];
    Ⲇⵠ[848][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#328a56", "#449573"]));
    Ⲇⵠ[848][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[952] = [];
    Ⲇⵠ[952][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    Ⲇⵠ[952][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[962] = [];
    Ⲇⵠ[962][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#b22419", "#99110e"]));
    Ⲇⵠ[962][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#04323c", "#03222b"]));
    Ⲇⵠ[969] = [];
    Ⲇⵠ[969][xs.ΔΔΔ] = Oq(rm(a * 0.8, 0, ["#13a56d", "#098a58"]));
    Ⲇⵠ[969][xs.ⵠᐃⲆ] = Oq(rm(a * 0.8, 0, ["#043c37", "#032b23"]));
    Ⲇⵠ[657] = cu(1, [{
      f: Yt,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[723] = cu(1, [{
      f: hu,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[724] = cu(1, [{
      f: Zc,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[334] = cu(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    Ⲇⵠ[115] = [];
    Ⲇⵠ[115][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    Ⲇⵠ[115][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#084442", "#125e5a"]));
    Ⲇⵠ[132] = [];
    Ⲇⵠ[132][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    Ⲇⵠ[132][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    Ⲇⵠ[668] = [];
    Ⲇⵠ[668][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#665329", "#68622D"]));
    Ⲇⵠ[668][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#083326", "#0F3A24"]));
    Ⲇⵠ[188] = [];
    Ⲇⵠ[188][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#c67933", "#ec952d"]));
    Ⲇⵠ[188][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#0e6553", "#094437"]));
    Ⲇⵠ[210] = [];
    Ⲇⵠ[210][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#375809", "#4b770e"]));
    Ⲇⵠ[210][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    Ⲇⵠ[985] = [];
    Ⲇⵠ[985][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#585809", "#72770e"]));
    Ⲇⵠ[985][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#295209", "#305d0d"]));
    Ⲇⵠ[191] = [];
    Ⲇⵠ[191][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    Ⲇⵠ[191][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#126366", "#0d484b"]));
    Ⲇⵠ[193] = [];
    Ⲇⵠ[193][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#3f8662", "#30915d"]));
    Ⲇⵠ[193][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#0e6553", "#094437"]));
    Ⲇⵠ[812] = [];
    Ⲇⵠ[812][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#c79153", "#dfa868"]));
    Ⲇⵠ[812][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#073927", "#075040"]));
    Ⲇⵠ[838] = [];
    Ⲇⵠ[838][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#768b5b", "#819984"]));
    Ⲇⵠ[838][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    Ⲇⵠ[849] = [];
    Ⲇⵠ[849][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#567465", "#627c6e"]));
    Ⲇⵠ[849][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#073927", "#075040"]));
    Ⲇⵠ[204] = [];
    Ⲇⵠ[204][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    Ⲇⵠ[204][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#0e6553", "#094437"]));
    Ⲇⵠ[953] = [];
    Ⲇⵠ[953][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    Ⲇⵠ[953][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    Ⲇⵠ[206] = [];
    Ⲇⵠ[206][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#99403c", "#bc796c"]));
    Ⲇⵠ[206][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#1e434d", "#11303c"]));
    Ⲇⵠ[963] = [];
    Ⲇⵠ[963][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#88504e", "#b3857c"]));
    Ⲇⵠ[963][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#253b41", "#162930"]));
    Ⲇⵠ[208] = [];
    Ⲇⵠ[208][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#0f8870", "#23af93"]));
    Ⲇⵠ[208][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#032829", "#083233"]));
    Ⲇⵠ[970] = [];
    Ⲇⵠ[970][xs.ΔΔΔ] = Oq(Hd(a * 0.9, 0, ["#618a20", "#84a74e"]));
    Ⲇⵠ[970][xs.ⵠᐃⲆ] = Oq(Hd(a * 0.9, 0, ["#1f4632", "#335d47"]));
    Ⲇⵠ[114] = [];
    Ⲇⵠ[114][xs.ΔΔΔ] = Oq(Kt(a * 1.2, kg, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    Ⲇⵠ[114][xs.ⵠᐃⲆ] = Oq(Kt(a * 1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    Ⲇⵠ[162] = [];
    Ⲇⵠ[162][xs.ΔΔΔ] = Oq(bm(a * 1, is, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    Ⲇⵠ[162][xs.ⵠᐃⲆ] = Oq(bm(a * 1, is, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇⵠ[165] = [];
    Ⲇⵠ[165][xs.ΔΔΔ] = Oq(cm(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇⵠ[165][xs.ⵠᐃⲆ] = Oq(cm(a * 1, nl, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[122] = [];
    Ⲇⵠ[122][xs.ΔΔΔ] = Oq(hm(a * 1, Dh, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇⵠ[122][xs.ⵠᐃⲆ] = Oq(hm(a * 1, Dh, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇⵠ[163] = [];
    Ⲇⵠ[163][xs.ΔΔΔ] = Oq(hm(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    Ⲇⵠ[163][xs.ⵠᐃⲆ] = Oq(hm(a * 1, Qe, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    Ⲇⵠ[164] = [];
    Ⲇⵠ[164][xs.ΔΔΔ] = Oq(Nm(a * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    Ⲇⵠ[164][xs.ⵠᐃⲆ] = Oq(Nm(a * 1, U, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    Ⲇⵠ[160] = [];
    Ⲇⵠ[160][xs.ΔΔΔ] = Oq(sp(a * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    Ⲇⵠ[160][xs.ⵠᐃⲆ] = Oq(sp(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇⵠ[169] = [];
    Ⲇⵠ[169][xs.ΔΔΔ] = Oq(Mp(a * 0.8, Ho, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    Ⲇⵠ[169][xs.ⵠᐃⲆ] = Oq(Mp(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    Ⲇⵠ[170] = [];
    Ⲇⵠ[170][xs.ΔΔΔ] = Oq(lc(a * 0.8, is, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇⵠ[170][xs.ⵠᐃⲆ] = Oq(lc(a * 0.8, Dh, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[168] = [];
    Ⲇⵠ[168][xs.ΔΔΔ] = Oq(Ip(a * 0.8, is, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    Ⲇⵠ[168][xs.ⵠᐃⲆ] = Oq(Ip(a * 0.8, Dh, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    Ⲇⵠ[123] = [];
    Ⲇⵠ[123][xs.ΔΔΔ] = Oq(Ip(a * 0.8, Dh, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇⵠ[123][xs.ⵠᐃⲆ] = Oq(Ip(a * 0.8, T, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇⵠ[166] = [];
    Ⲇⵠ[166][xs.ΔΔΔ] = Oq(fm(a * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    Ⲇⵠ[166][xs.ⵠᐃⲆ] = Oq(fm(a * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    Ⲇⵠ[336] = [];
    Ⲇⵠ[336][xs.ΔΔΔ] = Oq(fm(a * 1, na, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[336][xs.ⵠᐃⲆ] = Oq(fm(a * 1, xo, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    Ⲇⵠ[171] = [];
    Ⲇⵠ[171][xs.ΔΔΔ] = Oq(Xm(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    Ⲇⵠ[171][xs.ⵠᐃⲆ] = Oq(Xm(a * 1.5, kg, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    Ⲇⵠ[373] = [];
    Ⲇⵠ[373][xs.ΔΔΔ] = Oq(Xm(a * 1, qe, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[373][xs.ⵠᐃⲆ] = Oq(Xm(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[124] = [];
    Ⲇⵠ[124][xs.ΔΔΔ] = Oq(Xm(a * 1.5, nl, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    Ⲇⵠ[124][xs.ⵠᐃⲆ] = Oq(Xm(a * 1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    Ⲇⵠ[500] = [];
    Ⲇⵠ[500][xs.ΔΔΔ] = Oq(Xm(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[500][xs.ⵠᐃⲆ] = Oq(Xm(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[172] = [];
    Ⲇⵠ[172][xs.ΔΔΔ] = Oq(ym(a * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    Ⲇⵠ[172][xs.ⵠᐃⲆ] = Oq(ym(a * 1.5, Dh, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    Ⲇⵠ[376] = [];
    Ⲇⵠ[376][xs.ΔΔΔ] = Oq(ym(a * 1, os, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[376][xs.ⵠᐃⲆ] = Oq(ym(a * 1, Zq, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[173] = [];
    Ⲇⵠ[173][xs.ΔΔΔ] = Oq(um(a * 1.5, nl, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    Ⲇⵠ[173][xs.ⵠᐃⲆ] = Oq(um(a * 1.5, kg, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[379] = [];
    Ⲇⵠ[379][xs.ΔΔΔ] = Oq(um(a * 1, Le, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    Ⲇⵠ[379][xs.ⵠᐃⲆ] = Oq(um(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    Ⲇⵠ[167] = [];
    Ⲇⵠ[167][xs.ΔΔΔ] = Oq(rp(a * 0.5, true, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    Ⲇⵠ[167][xs.ⵠᐃⲆ] = Oq(rp(a * 0.5, true, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    Ⲇⵠ[691] = [];
    Ⲇⵠ[691][xs.ΔΔΔ] = Oq(mp(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    Ⲇⵠ[691][xs.ⵠᐃⲆ] = Oq(mp(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    Ⲇⵠ[264] = [];
    Ⲇⵠ[264][xs.ΔΔΔ] = Oq(Lt(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    Ⲇⵠ[264][xs.ⵠᐃⲆ] = Oq(Lt(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    Ⲇⵠ[260] = [];
    Ⲇⵠ[260][xs.ΔΔΔ] = Oq(Ad(Math.PI, Nt(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    Ⲇⵠ[260][xs.ⵠᐃⲆ] = Oq(Ad(Math.PI, Nt(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    Ⲇⵠ[266] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      xd(d, Gj, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      xd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      xd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      xd(d, Gj, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      xd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      xd(d, fh, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      xd(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      xd(d, fo, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      xd(d, ij, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      xd(d, undefined, b[0], 4);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    Ⲇⵠ[299] = [];
    Ⲇⵠ[299][xs.ΔΔΔ] = Oq(Ot(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    Ⲇⵠ[299][xs.ⵠᐃⲆ] = Oq(Ot(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    Ⲇⵠ[10] = [];
    Ⲇⵠ[10][xs.ΔΔΔ] = Oq(yc(a * 0.6, f, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    Ⲇⵠ[10][xs.ⵠᐃⲆ] = Oq(yc(a * 0.6, Qk, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    Ⲇⵠ[11] = [];
    Ⲇⵠ[11][xs.ΔΔΔ] = Oq(Km(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    Ⲇⵠ[11][xs.ⵠᐃⲆ] = Oq(Km(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    Ⲇⵠ[40] = [];
    Ⲇⵠ[40][xs.ΔΔΔ] = Oq(Ic(a * 0.63, Ha, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    Ⲇⵠ[40][xs.ⵠᐃⲆ] = Oq(Ic(a * 0.63, Ui, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    Ⲇⵠ[41] = [];
    Ⲇⵠ[41][xs.ΔΔΔ] = Oq(fu(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    Ⲇⵠ[41][xs.ⵠᐃⲆ] = Oq(fu(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    Ⲇⵠ[42] = [];
    Ⲇⵠ[42][xs.ΔΔΔ] = Oq(pu(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    Ⲇⵠ[42][xs.ⵠᐃⲆ] = Oq(pu(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    Ⲇⵠ[716] = [];
    Ⲇⵠ[716][xs.ΔΔΔ] = Oq(Dc(a * 0.42, T, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    Ⲇⵠ[716][xs.ⵠᐃⲆ] = Oq(Dc(a * 0.42, Ho, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    Ⲇⵠ[720] = [];
    Ⲇⵠ[720][xs.ΔΔΔ] = Oq(Uc(a * 0.9, ["#e4c027"]));
    Ⲇⵠ[720][xs.ⵠᐃⲆ] = Oq(Uc(a * 0.9, ["#D8E57F"]));
    Ⲇⵠ[144] = [];
    Ⲇⵠ[144][xs.ΔΔΔ] = Oq(gc(a * 0.42, Ha, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    Ⲇⵠ[144][xs.ⵠᐃⲆ] = Oq(gc(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    Ⲇⵠ[722] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      kd(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      xd(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      kd(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      xd(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      xd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      xd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      xd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      xd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      kd(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      xd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      kd(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      xd(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      kd(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      xd(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      xd(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      xd(d, b[3], b[3], a * 10);
      return c;
    }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    Ⲇⵠ[407] = [];
    Ⲇⵠ[407][xs.ΔΔΔ] = Oq(Vm(a * 0.5, Ej, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    Ⲇⵠ[407][xs.ⵠᐃⲆ] = Oq(Vm(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    Ⲇⵠ[119] = [];
    Ⲇⵠ[119][xs.ΔΔΔ] = Oq(Jm(a * 0.5, T, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    Ⲇⵠ[119][xs.ⵠᐃⲆ] = Oq(Jm(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    Ⲇⵠ[411] = Oq(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      kd(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      xd(e, c[0], c[1], 4);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    Ⲇⵠ[412] = cu(1, [{
      f: hu,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    Ⲇⵠ[198] = [];
    Ⲇⵠ[198][xs.ΔΔΔ] = Oq(qm(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    Ⲇⵠ[198][xs.ⵠᐃⲆ] = Oq(qm(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    Ⲇⵠ[913] = [];
    Ⲇⵠ[913][xs.ΔΔΔ] = Oq(Om(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    Ⲇⵠ[913][xs.ⵠᐃⲆ] = Oq(Om(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    Ⲇⵠ[18] = [];
    Ⲇⵠ[18][xs.ΔΔΔ] = Oq(Ad(3, Am(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    Ⲇⵠ[18][xs.ⵠᐃⲆ] = Oq(Ad(3, Am(a * 0.7, tg, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    Ⲇⵠ[12] = [];
    Ⲇⵠ[12][xs.ΔΔΔ] = Oq(Ad(3, $m(a * 0.7, Dh, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    Ⲇⵠ[12][xs.ⵠᐃⲆ] = Oq(Ad(3, $m(a * 0.7, Dh, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    Ⲇⵠ[13] = [];
    Ⲇⵠ[13][xs.ΔΔΔ] = Oq(Ad(3, Fc(a * 0.65, fn, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    Ⲇⵠ[13][xs.ⵠᐃⲆ] = Oq(Ad(3, Fc(a * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    Ⲇⵠ[14] = [];
    Ⲇⵠ[14][xs.ΔΔΔ] = Oq(Ad(3, tp(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    Ⲇⵠ[14][xs.ⵠᐃⲆ] = Oq(Ad(3, tp(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    Ⲇⵠ[15] = [];
    Ⲇⵠ[15][xs.ΔΔΔ] = Oq(Ad(3, ap(a * 0.67, dg, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    Ⲇⵠ[15][xs.ⵠᐃⲆ] = Oq(Ad(3, ap(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    Ⲇⵠ[33] = [];
    Ⲇⵠ[33][xs.ΔΔΔ] = Oq(Ad(3, Yp(a * 0.67, Ha, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    Ⲇⵠ[33][xs.ⵠᐃⲆ] = Oq(Ad(3, Yp(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    Ⲇⵠ[16] = [];
    Ⲇⵠ[16][xs.ΔΔΔ] = Oq(Ad(3, Lp(a * 1, f, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    Ⲇⵠ[16][xs.ⵠᐃⲆ] = Oq(Ad(3, Lp(a * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    Ⲇⵠ[35] = [];
    Ⲇⵠ[35][xs.ΔΔΔ] = Oq(Ad(3, Hc(a * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    Ⲇⵠ[35][xs.ⵠᐃⲆ] = Oq(Ad(3, Hc(a * 1, Qe, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    Ⲇⵠ[55] = [];
    Ⲇⵠ[55][xs.ΔΔΔ] = Oq(Ad(3, Lc(a * 0.5, Qe, ["#0d1b1c", "#939393", "#5f6061"])));
    Ⲇⵠ[55][xs.ⵠᐃⲆ] = Oq(Ad(3, Lc(a * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    Ⲇⵠ[45] = [];
    Ⲇⵠ[45][xs.ΔΔΔ] = Oq(Ad(3, Oc(a * 1, cr, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    Ⲇⵠ[45][xs.ⵠᐃⲆ] = Oq(Ad(3, Oc(a * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    Ⲇⵠ[36] = [];
    Ⲇⵠ[36][xs.ΔΔΔ] = Oq(Ad(3, Hc(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    Ⲇⵠ[36][xs.ⵠᐃⲆ] = Oq(Ad(3, Hc(a * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    Ⲇⵠ[37] = [];
    Ⲇⵠ[37][xs.ΔΔΔ] = Oq(Ad(3, Hc(a * 1, kg, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    Ⲇⵠ[37][xs.ⵠᐃⲆ] = Oq(Ad(3, Hc(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    Ⲇⵠ[38] = [];
    Ⲇⵠ[38][xs.ΔΔΔ] = Oq(Ad(3, Hc(a * 1, dg, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    Ⲇⵠ[38][xs.ⵠᐃⲆ] = Oq(Ad(3, Hc(a * 1, T, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    Ⲇⵠ[148] = [];
    Ⲇⵠ[148][xs.ΔΔΔ] = Oq(Nc(a * 0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    Ⲇⵠ[148][xs.ⵠᐃⲆ] = Oq(Nc(a * 0.55, Zq, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    Ⲇⵠ[536] = [];
    Ⲇⵠ[536].push(Oq(Nc(a * 0.8, sn, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    Ⲇⵠ[536].push(Oq(Nc(a * 0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    Ⲇⵠ[536].push(Oq(Nc(a * 0.8, qe, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    Ⲇⵠ[538] = [];
    Ⲇⵠ[538].push(Ⲇⵠ[536][0]);
    Ⲇⵠ[538].push(Ⲇⵠ[536][0]);
    Ⲇⵠ[538].push(Ⲇⵠ[536][0]);
    Ⲇⵠ[158] = [];
    Ⲇⵠ[158][xs.ΔΔΔ] = Oq(cc(a * 0.06, sn, ["#141414", "#c4a23a", "#816511"]));
    Ⲇⵠ[158][xs.ⵠᐃⲆ] = Oq(cc(a * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
    Ⲇⵠ[535] = [];
    Ⲇⵠ[535].push(Oq(cc(a * 0.08, ld, ["#141414", "#c4a23a", "#816511"])));
    Ⲇⵠ[535].push(Oq(cc(a * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    Ⲇⵠ[535].push(Oq(cc(a * 0.08, na, ["#141414", "#b0902e", "#634d09"])));
    Ⲇⵠ[149] = cu(1.5, [{
      f: Kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    Ⲇⵠ[526] = [];
    Ⲇⵠ[526][xs.ΔΔΔ] = Oq(ic(a * 0.8, 0, ["#347f93", "#54a4ba"]));
    Ⲇⵠ[526][xs.ⵠᐃⲆ] = Oq(ic(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
    Ⲇⵠ[527] = [];
    Ⲇⵠ[527][xs.ΔΔΔ] = Oq(Fp(a * 0.8, Ha, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    Ⲇⵠ[527][xs.ⵠᐃⲆ] = Oq(Fp(a * 0.8, $n, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    Ⲇⵠ[528] = [];
    Ⲇⵠ[528][xs.ΔΔΔ] = Oq(sc(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    Ⲇⵠ[528][xs.ⵠᐃⲆ] = Oq(sc(a * 0.8, 0, ["#83ddd4", "#485e66"]));
    Ⲇⵠ[151] = [];
    Ⲇⵠ[151][xs.ΔΔΔ] = Oq(oc(a * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    Ⲇⵠ[151][xs.ⵠᐃⲆ] = Oq(oc(a * 0.8, kg, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    Ⲇⵠ[1192] = [];
    Ⲇⵠ[1192][xs.ΔΔΔ] = ΔⲆ.ᐃⲆᐃΔᐃⲆⵠ;
    Ⲇⵠ[1192][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔᐃΔΔⲆᐃ;
    Ⲇⵠ[1193] = [];
    Ⲇⵠ[1193][xs.ΔΔΔ] = ΔⲆ.ᐃᐃⵠΔⵠⵠᐃ;
    Ⲇⵠ[1193][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⵠⲆⲆΔⲆ;
    Ⲇⵠ[1194] = [];
    Ⲇⵠ[1194][xs.ΔΔΔ] = ΔⲆ.ᐃΔⲆⲆΔⲆⲆ;
    Ⲇⵠ[1194][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⲆⲆⵠⵠᐃ;
    Ⲇⵠ[152] = [];
    Ⲇⵠ[152][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔⲆⵠⲆΔ;
    Ⲇⵠ[152][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⵠᐃⲆⲆΔ;
    Ⲇⵠ[1198] = [];
    Ⲇⵠ[1198][xs.ΔΔΔ] = ΔⲆ.ΔⲆᐃⵠᐃᐃΔ;
    Ⲇⵠ[1198][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃΔᐃᐃⵠᐃ;
    Ⲇⵠ[153] = [];
    Ⲇⵠ[153][xs.ΔΔΔ] = ΔⲆ.ΔᐃΔᐃΔⵠΔ;
    Ⲇⵠ[153][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ;
    Ⲇⵠ[1202] = [];
    Ⲇⵠ[1202][xs.ΔΔΔ] = ΔⲆ.ΔᐃΔᐃⲆΔΔ;
    Ⲇⵠ[1202][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆⵠᐃΔΔ;
    Ⲇⵠ[154] = [];
    Ⲇⵠ[154][xs.ΔΔΔ] = ΔⲆ.ⵠⵠΔⲆΔΔⵠ;
    Ⲇⵠ[154][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆᐃⵠᐃΔᐃ;
    Ⲇⵠ[1206] = [];
    Ⲇⵠ[1206][xs.ΔΔΔ] = ΔⲆ.ΔⵠⲆΔᐃⲆΔ;
    Ⲇⵠ[1206][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆΔⲆⵠ;
    Ⲇⵠ[155] = [];
    Ⲇⵠ[155][xs.ΔΔΔ] = ΔⲆ.ΔⲆⲆᐃᐃⵠᐃ;
    Ⲇⵠ[155][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆΔΔΔⲆ;
    Ⲇⵠ[1210] = [];
    Ⲇⵠ[1210][xs.ΔΔΔ] = ΔⲆ.ⲆᐃⲆᐃⲆⲆᐃ;
    Ⲇⵠ[1210][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆΔᐃⲆᐃΔ;
    Ⲇⵠ[156] = [];
    Ⲇⵠ[156][xs.ΔΔΔ] = ΔⲆ.ⲆⵠΔⲆᐃΔΔ;
    Ⲇⵠ[156][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⵠⵠⲆᐃⲆ;
    Ⲇⵠ[1214] = [];
    Ⲇⵠ[1214][xs.ΔΔΔ] = ΔⲆ.ⵠⵠΔⵠΔΔⵠ;
    Ⲇⵠ[1214][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃⲆⵠΔⵠⵠ;
    Ⲇⵠ[157] = [];
    Ⲇⵠ[157][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃⲆᐃᐃ;
    Ⲇⵠ[157][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔΔᐃΔᐃⲆ;
    Ⲇⵠ[245] = [];
    Ⲇⵠ[245][xs.ΔΔΔ] = ΔⲆ.ᐃⲆⵠᐃⵠⲆΔ;
    Ⲇⵠ[245][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆΔᐃⲆΔ;
    Ⲇⵠ[246] = ΔⲆ.ΔⵠᐃⵠⲆΔΔ;
    Ⲇⵠ[159] = [];
    Ⲇⵠ[159][xs.ΔΔΔ] = Oq(yp(a * 0.75, U, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    Ⲇⵠ[159][xs.ⵠᐃⲆ] = Oq(yp(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    Ⲇⵠ[558] = Oq(pp(a * 0.3, ["#092813", "#1f773d"], 0));
    Ⲇⵠ[559] = Oq(pp(a * 0.3, ["#092813", "#1f773d"], 1));
    Ⲇⵠ[885] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      xd(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      xd(d, b[1]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    Ⲇⵠ[556] = [];
    Ⲇⵠ[556].push(Oq(fp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    Ⲇⵠ[556].push(Oq(fp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    Ⲇⵠ[556].push(Oq(fp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    Ⲇⵠ[560] = [];
    var c = Oq(fp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    Ⲇⵠ[560].push(c);
    Ⲇⵠ[560].push(c);
    Ⲇⵠ[560].push(c);
    Ⲇⵠ[557] = [];
    Ⲇⵠ[557].push(Oq(fp(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    Ⲇⵠ[557].push(Oq(fp(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    Ⲇⵠ[557].push(Oq(fp(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    Ⲇⵠ[681] = Oq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        wd(e, 3, b * 18, b * 4);
        xd(e, c[0]);
        e.restore();
      }
      e.restore();
      yd(e, 0, 0, b * 40);
      xd(e, ur, c[0], b * 6);
      yd(e, 0, 0, b * 20);
      xd(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    Ⲇⵠ[794] = Oq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      yd(e, a, h, b * 40);
      xd(e, wl, c[0], b * 7);
      yd(e, a, h, b * 30);
      xd(e, Mh, c[0], b * 7);
      yd(e, a, h, b * 20);
      xd(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    Ⲇⵠ[562] = Oq(pp(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    Ⲇⵠ[667] = Oq(Ad(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      kd(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      xd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      xd(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      xd(d, b[0], b[0], a * 15);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    Ⲇⵠ[43] = [];
    Ⲇⵠ[43][xs.ΔΔΔ] = Oq(Up(a * 0.85, nl, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    Ⲇⵠ[43][xs.ⵠᐃⲆ] = Oq(Up(a * 0.85, f, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    Ⲇⵠ[561] = [];
    Ⲇⵠ[561].push(Oq(fp(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    Ⲇⵠ[561].push(Oq(fp(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    Ⲇⵠ[561].push(Oq(fp(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    Ⲇⵠ[83] = [];
    Ⲇⵠ[83][xs.ΔΔΔ] = Oq(Pc(a * 0.37, nl, ["#2a2938", "#242330", "#313041"]));
    Ⲇⵠ[83][xs.ⵠᐃⲆ] = Oq(Pc(a * 0.37, Qe, ["#1b1e30", "#161921", "#252f3e"]));
    Ⲇⵠ[85] = [];
    Ⲇⵠ[85][xs.ΔΔΔ] = Oq(vp(a * 0.17, is, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    Ⲇⵠ[85][xs.ⵠᐃⲆ] = Oq(vp(a * 0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    Ⲇⵠ[86] = [];
    Ⲇⵠ[86][xs.ΔΔΔ] = Oq(rc(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    Ⲇⵠ[86][xs.ⵠᐃⲆ] = Oq(rc(a * 0.55, Xg, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    Ⲇⵠ[84] = [];
    Ⲇⵠ[84][xs.ΔΔΔ] = Oq(rc(a * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    Ⲇⵠ[84][xs.ⵠᐃⲆ] = Oq(rc(a * 0.55, $n, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    Ⲇⵠ[77] = [];
    Ⲇⵠ[77][xs.ΔΔΔ] = Oq(Ac(a * 0.2, Ui, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    Ⲇⵠ[77][xs.ⵠᐃⲆ] = Oq(Ac(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    Ⲇⵠ[78] = [];
    Ⲇⵠ[78][xs.ΔΔΔ] = Oq(Ac(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    Ⲇⵠ[78][xs.ⵠᐃⲆ] = Oq(Ac(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    Ⲇⵠ[79] = [];
    Ⲇⵠ[79][xs.ΔΔΔ] = Oq(Ac(a * 0.2, Ho, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    Ⲇⵠ[79][xs.ⵠᐃⲆ] = Oq(Ac(a * 0.2, Rr, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    Ⲇⵠ[61] = [];
    Ⲇⵠ[61][xs.ΔΔΔ] = Oq(dm(a * 0.24, U, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    Ⲇⵠ[61][xs.ⵠᐃⲆ] = Oq(dm(a * 0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    Ⲇⵠ[59] = [];
    Ⲇⵠ[59][xs.ΔΔΔ] = Oq(jp(a * 0.32, $n, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    Ⲇⵠ[59][xs.ⵠᐃⲆ] = Oq(jp(a * 0.32, true, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    Ⲇⵠ[62] = [];
    Ⲇⵠ[62][xs.ΔΔΔ] = Oq(Ad(3, up(a * 0.9, Ui, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    Ⲇⵠ[62][xs.ⵠᐃⲆ] = Oq(Ad(3, up(a * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    Ⲇⵠ[750] = [];
    Ⲇⵠ[750][xs.ΔΔΔ] = Oq(Ad(3, up(a * 1, true, [Bl, hg, undefined, "#c8efef", "#c8efef"])));
    Ⲇⵠ[750][xs.ⵠᐃⲆ] = Oq(Ad(3, up(a * 1, true, [Cs, undefined, undefined, "#87d2e6", "#87d2e6"])));
    Ⲇⵠ[755] = [];
    Ⲇⵠ[755].push(Oq(hc(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    Ⲇⵠ[755].push(Oq(hc(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    Ⲇⵠ[755].push(Oq(hc(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    Ⲇⵠ[795] = [];
    Ⲇⵠ[795].push(Oq(Ec(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    Ⲇⵠ[795].push(Oq(Ec(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    Ⲇⵠ[795].push(Oq(Ec(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    Ⲇⵠ[782] = [];
    Ⲇⵠ[782].push(Oq(su(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    Ⲇⵠ[782].push(Oq(su(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    Ⲇⵠ[782].push(Oq(su(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    Ⲇⵠ[783] = [];
    Ⲇⵠ[783].push(Oq(su(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    Ⲇⵠ[783].push(Oq(su(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    Ⲇⵠ[783].push(Oq(su(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    Ⲇⵠ[46] = [];
    Ⲇⵠ[46][xs.ΔΔΔ] = Oq(Ad(3, Hp(a * 0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    Ⲇⵠ[46][xs.ⵠᐃⲆ] = Oq(Ad(3, Hp(a * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    Ⲇⵠ[50] = [];
    Ⲇⵠ[50][xs.ΔΔΔ] = Oq(Ad(3, Hp(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    Ⲇⵠ[50][xs.ⵠᐃⲆ] = Oq(Ad(3, Hp(a * 0.7, $n, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    Ⲇⵠ[51] = [];
    Ⲇⵠ[51][xs.ΔΔΔ] = Oq(Ad(3, Hp(a * 0.7, nl, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    Ⲇⵠ[51][xs.ⵠᐃⲆ] = Oq(Ad(3, Hp(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    Ⲇⵠ[52] = [];
    Ⲇⵠ[52][xs.ΔΔΔ] = Oq(Ad(3, Hp(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    Ⲇⵠ[52][xs.ⵠᐃⲆ] = Oq(Ad(3, Hp(a * 0.7, Qe, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    Ⲇⵠ[592] = [];
    Ⲇⵠ[592].push(Oq(bc(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    Ⲇⵠ[592].push(Oq(bc(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    Ⲇⵠ[592].push(Oq(bc(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    Ⲇⵠ[326] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      xd(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      xd(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      xd(d, b[0], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    Ⲇⵠ[333] = Oq(Ad(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      yd(d, a * 213.5, a * 256.75, a * 75);
      xd(d, b);
      yd(d, a * 213.5, a * 175.75, a * 25);
      xd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    Ⲇⵠ[23] = [];
    Ⲇⵠ[23][xs.ΔΔΔ] = Oq(Sp(a * 0.55, Xg, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    Ⲇⵠ[23][xs.ⵠᐃⲆ] = Oq(Sp(a * 0.55, Qe, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    Ⲇⵠ[58] = [];
    Ⲇⵠ[58][xs.ΔΔΔ] = Oq(Vc(a * 0.55, nl, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    Ⲇⵠ[58][xs.ⵠᐃⲆ] = Oq(Vc(a * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    Ⲇⵠ[25] = [];
    Ⲇⵠ[25][xs.ΔΔΔ] = Oq(xp(a * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    Ⲇⵠ[25][xs.ⵠᐃⲆ] = Oq(xp(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    Ⲇⵠ[26] = [];
    Ⲇⵠ[26][xs.ΔΔΔ] = Oq(Op(a * 0.58, Qk, ["#dbce71", "#b29c32", "#c4bc51"]));
    Ⲇⵠ[26][xs.ⵠᐃⲆ] = Oq(Op(a * 0.58, true, ["#2b7c57", "#15543c", "#1a7961"]));
    Ⲇⵠ[27] = [];
    Ⲇⵠ[27][xs.ΔΔΔ] = Oq(kc(a * 0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    Ⲇⵠ[27][xs.ⵠᐃⲆ] = Oq(kc(a * 0.69, fn, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    Ⲇⵠ[413] = [];
    Ⲇⵠ[413][xs.ΔΔΔ] = [];
    Ⲇⵠ[413][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[413][xs.ΔΔΔ].push(Oq(tc(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    Ⲇⵠ[413][xs.ΔΔΔ].push(Oq(Qc(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    Ⲇⵠ[413][xs.ΔΔΔ].push(Oq(zc(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    Ⲇⵠ[413][xs.ⵠᐃⲆ].push(Oq(tc(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    Ⲇⵠ[413][xs.ⵠᐃⲆ].push(Oq(Qc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    Ⲇⵠ[413][xs.ⵠᐃⲆ].push(Oq(zc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    Ⲇⵠ[449] = [];
    Ⲇⵠ[449][xs.ΔΔΔ] = Oq(nc(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    Ⲇⵠ[449][xs.ⵠᐃⲆ] = Oq(nc(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    Ⲇⵠ[451] = [];
    Ⲇⵠ[451][xs.ΔΔΔ] = Oq(hp(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    Ⲇⵠ[451][xs.ⵠᐃⲆ] = Oq(hp(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    Ⲇⵠ[452] = [];
    Ⲇⵠ[452][xs.ΔΔΔ] = Oq(Ap(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    Ⲇⵠ[452][xs.ⵠᐃⲆ] = Oq(Ap(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    Ⲇⵠ[243] = [];
    Ⲇⵠ[243][xs.ΔΔΔ] = [];
    Ⲇⵠ[243][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[243][xs.ΔΔΔ] = [ΔⲆ.ⵠΔⵠⵠᐃᐃⲆ, ΔⲆ.ΔⲆⲆⲆⲆᐃⵠ, ΔⲆ.ⲆⲆᐃⲆΔⲆΔ, ΔⲆ.ⲆΔⲆⵠⵠⵠⲆ, ΔⲆ.ΔⲆⵠⲆᐃᐃⲆ, ΔⲆ.ΔΔⵠΔⲆᐃᐃ, ΔⲆ.ⵠᐃᐃᐃⲆΔⵠ, ΔⲆ.ⵠⵠᐃⲆⲆᐃⲆ, ΔⲆ.ⲆᐃΔⲆⲆᐃΔ, ΔⲆ.ᐃⲆⵠⵠΔᐃⲆ, ΔⲆ.ⲆΔΔⲆⵠΔᐃ, ΔⲆ.ⲆⲆΔΔⵠΔⵠ, ΔⲆ.ΔⵠᐃᐃⲆⲆΔ, ΔⲆ.ᐃΔⵠᐃⵠⵠᐃ, ΔⲆ.ⵠⵠⲆⲆⲆΔᐃ, ΔⲆ.ΔⲆⵠⵠⵠⵠⲆ, ΔⲆ.ᐃᐃⲆⵠᐃⲆᐃ, ΔⲆ.ⲆⵠᐃᐃⵠΔΔ, ΔⲆ.ΔΔⵠᐃⲆⲆΔ, ΔⲆ.ⲆᐃᐃΔⵠᐃⲆ, ΔⲆ.ⵠⲆⲆⲆⵠΔᐃ, ΔⲆ.ⵠᐃΔⵠⵠⲆⵠ, ΔⲆ.ⲆᐃⵠⵠᐃΔⵠ, ΔⲆ.ΔᐃΔΔΔⵠΔ, ΔⲆ.ⵠᐃΔⲆⲆΔⲆ, ΔⲆ.ᐃⵠⲆⵠⲆᐃⲆ, ΔⲆ.ᐃⲆⲆᐃΔⵠᐃ, ΔⲆ.ⲆⲆᐃⲆΔᐃⵠ, ΔⲆ.ᐃᐃⵠⲆⵠⲆᐃ, ΔⲆ.ⲆΔⵠᐃΔᐃⵠ, ΔⲆ.ⵠᐃⲆΔⲆⲆΔ, ΔⲆ.ΔⵠⲆⲆΔⲆᐃ, ΔⲆ.ⵠΔᐃᐃᐃⵠⲆ, ΔⲆ.ⲆᐃⲆᐃΔⵠΔ, ΔⲆ.ΔᐃⵠΔᐃΔΔ, ΔⲆ.ⲆⵠΔᐃⵠΔⲆ, ΔⲆ.ⵠΔᐃⵠⵠⲆⲆ, ΔⲆ.ⵠΔⲆᐃⵠⲆⵠ, ΔⲆ.ΔΔᐃΔᐃᐃᐃ, ΔⲆ.ⲆᐃᐃΔᐃᐃⵠ, ΔⲆ.ΔᐃⲆⵠΔⵠⲆ, ΔⲆ.ⵠⵠΔⲆᐃΔΔ, ΔⲆ.ᐃΔΔΔⲆΔⵠ, ΔⲆ.ⲆⵠⲆⲆᐃᐃⲆ, ΔⲆ.ⵠᐃΔⵠΔⵠⵠ, ΔⲆ.ᐃⵠᐃⵠⲆⲆⲆ, ΔⲆ.ΔⵠⵠᐃⵠΔΔ, ΔⲆ.ΔᐃⲆΔᐃΔⵠ, ΔⲆ.ΔΔⵠⲆⲆΔⵠ, ΔⲆ.ᐃⵠᐃⲆⲆⲆΔ, ΔⲆ.ΔᐃⲆⵠⵠⲆΔ, ΔⲆ.ⲆᐃⵠᐃᐃΔᐃ, ΔⲆ.ᐃᐃⵠⵠΔⲆⵠ, ΔⲆ.ⵠᐃⲆⲆⵠⵠⲆ, ΔⲆ.ᐃᐃΔᐃΔⵠᐃ, ΔⲆ.ΔᐃⵠΔΔΔⵠ];
    Ⲇⵠ[243][xs.ⵠᐃⲆ] = [ΔⲆ.ⲆⵠⲆⵠΔᐃⲆ, ΔⲆ.ⵠᐃᐃⵠⵠᐃᐃ, ΔⲆ.ⵠⵠᐃⵠⵠᐃΔ, ΔⲆ.ⲆⲆⵠᐃⵠⵠⲆ, ΔⲆ.ΔᐃⲆⵠⵠⲆⲆ, ΔⲆ.ⲆΔᐃⲆΔΔᐃ, ΔⲆ.ⲆᐃⵠⲆᐃΔᐃ, ΔⲆ.ⲆᐃⲆᐃΔΔΔ, ΔⲆ.ΔᐃⵠᐃⵠΔⲆ, ΔⲆ.ⲆᐃᐃᐃⲆΔΔ, ΔⲆ.ΔⲆⵠᐃᐃⵠᐃ, ΔⲆ.ⲆᐃⲆⲆⲆⵠⲆ, ΔⲆ.ΔᐃΔⲆΔⵠΔ, ΔⲆ.ᐃⵠΔⲆⵠⲆⵠ, ΔⲆ.ΔⲆⵠΔⲆⵠᐃ, ΔⲆ.ⲆᐃⲆᐃⵠⵠⲆ, ΔⲆ.ΔᐃⲆⲆΔΔᐃ, ΔⲆ.ΔⲆΔⵠᐃΔΔ, ΔⲆ.ΔᐃⵠⵠᐃΔⵠ, ΔⲆ.ᐃΔᐃⵠΔᐃⵠ, ΔⲆ.ΔΔⲆⵠΔᐃᐃ, ΔⲆ.ᐃⵠⲆᐃⲆᐃⵠ, ΔⲆ.ΔᐃᐃⲆΔⲆⵠ, ΔⲆ.ⲆΔⵠⲆᐃᐃΔ, ΔⲆ.ⲆΔᐃⵠΔΔⵠ, ΔⲆ.ᐃⵠΔΔⲆⵠΔ, ΔⲆ.ⵠⲆⵠΔⲆΔⵠ, ΔⲆ.ⲆᐃⲆⵠᐃΔⲆ, ΔⲆ.ⵠᐃⲆⲆᐃⲆᐃ, ΔⲆ.ᐃⲆΔⲆᐃᐃᐃ, ΔⲆ.ΔⵠᐃⵠⲆⲆⵠ, ΔⲆ.ⲆᐃᐃⲆᐃᐃⲆ, ΔⲆ.ΔⵠⲆⲆΔᐃΔ, ΔⲆ.ᐃΔⲆΔⵠⲆⲆ, ΔⲆ.ΔᐃⲆΔⲆⵠᐃ, ΔⲆ.ⲆΔⵠⵠΔΔΔ, ΔⲆ.ΔᐃᐃᐃΔⲆᐃ, ΔⲆ.ⵠⵠΔΔᐃᐃΔ, ΔⲆ.ⵠⲆΔΔⲆⵠΔ, ΔⲆ.ⵠⲆⲆᐃΔⵠⲆ, ΔⲆ.ᐃⵠΔⲆⲆⲆᐃ, ΔⲆ.ΔᐃᐃΔⲆⵠⵠ, ΔⲆ.ΔⲆⲆⵠΔΔΔ, ΔⲆ.ⵠⵠⲆΔⵠΔⲆ, ΔⲆ.ⵠΔᐃΔᐃⵠⵠ, ΔⲆ.ΔᐃⲆⲆⵠⵠⲆ, ΔⲆ.ΔⵠᐃⲆⲆⲆⲆ, ΔⲆ.ᐃᐃⲆᐃᐃⲆᐃ, ΔⲆ.ᐃΔⵠΔΔⵠᐃ, ΔⲆ.ᐃΔΔΔⵠΔⲆ, ΔⲆ.ΔⵠᐃⲆΔΔⵠ, ΔⲆ.ⲆⲆⲆⵠΔⲆⲆ, ΔⲆ.ΔⲆⵠⵠᐃⵠⲆ, ΔⲆ.ⵠΔΔⲆⲆⲆᐃ, ΔⲆ.ⲆⲆⵠⵠΔᐃⵠ, ΔⲆ.ⲆⲆⲆΔⲆΔΔ];
    Ⲇⵠ[676] = [];
    Ⲇⵠ[676][xs.ΔΔΔ] = [];
    Ⲇⵠ[676][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[676][xs.ΔΔΔ].push(Oq(zm(a * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    Ⲇⵠ[676][xs.ΔΔΔ].push(Oq(zm(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
    Ⲇⵠ[676][xs.ΔΔΔ].push(Oq(zm(a * 1, false, ["#252B28", "#747471", "#83827e"], 2)));
    Ⲇⵠ[676][xs.ΔΔΔ].push(Oq(zm(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    Ⲇⵠ[676][xs.ⵠᐃⲆ].push(Oq(zm(a * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
    Ⲇⵠ[676][xs.ⵠᐃⲆ].push(Oq(zm(a * 0.9, hl, ["#030d14", "#123335", "#183f3f"], 1)));
    Ⲇⵠ[676][xs.ⵠᐃⲆ].push(Oq(zm(a * 1, _r, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[676][xs.ⵠᐃⲆ].push(Oq(zm(a * 0.9, Yi, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679] = [];
    Ⲇⵠ[679][xs.ΔΔΔ] = [];
    Ⲇⵠ[679][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[679][xs.ΔΔΔ].push(Oq(zm(a * 1.1, Ej, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][xs.ΔΔΔ].push(Oq(zm(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][xs.ΔΔΔ].push(Oq(zm(a * 1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][xs.ΔΔΔ].push(Oq(zm(a * 0.9, Qe, ["#252B28", "#58645F", "#75827D"], 2)));
    Ⲇⵠ[679][xs.ⵠᐃⲆ].push(Oq(zm(a * 1.1, Ui, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679][xs.ⵠᐃⲆ].push(Oq(zm(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679][xs.ⵠᐃⲆ].push(Oq(zm(a * 1, dg, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[679][xs.ⵠᐃⲆ].push(Oq(zm(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    Ⲇⵠ[415] = [];
    Ⲇⵠ[415][xs.ΔΔΔ] = [];
    Ⲇⵠ[415][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[415][xs.ΔΔΔ].push(Oq(km(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[415][xs.ΔΔΔ].push(Oq(km(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[415][xs.ΔΔΔ].push(Oq(km(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    Ⲇⵠ[415][xs.ⵠᐃⲆ].push(Oq(km(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇⵠ[415][xs.ⵠᐃⲆ].push(Oq(km(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇⵠ[415][xs.ⵠᐃⲆ].push(Oq(km(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    Ⲇⵠ[416] = [];
    Ⲇⵠ[416][xs.ΔΔΔ] = [];
    Ⲇⵠ[416][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[416][xs.ΔΔΔ].push(Oq(Wm(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇⵠ[416][xs.ΔΔΔ].push(Oq(Wm(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇⵠ[416][xs.ΔΔΔ].push(Oq(Wm(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    Ⲇⵠ[416][xs.ⵠᐃⲆ].push(Oq(Wm(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇⵠ[416][xs.ⵠᐃⲆ].push(Oq(Wm(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇⵠ[416][xs.ⵠᐃⲆ].push(Oq(Wm(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    Ⲇⵠ[121] = [];
    Ⲇⵠ[121][xs.ΔΔΔ] = [];
    Ⲇⵠ[121][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[121][xs.ΔΔΔ].push(Oq(Bc(a * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇⵠ[121][xs.ΔΔΔ].push(Oq(Bc(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇⵠ[121][xs.ΔΔΔ].push(Oq(Bc(a * 1.3, fn, ["#1d051e", "#c27add", "#cd98e5"])));
    Ⲇⵠ[121][xs.ⵠᐃⲆ].push(Oq(Bc(a * 1.7, tg, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇⵠ[121][xs.ⵠᐃⲆ].push(Oq(Bc(a * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇⵠ[121][xs.ⵠᐃⲆ].push(Oq(Bc(a * 1.3, Xg, ["#1d051e", "#41aaa0", "#5cccc4"])));
    Ⲇⵠ[678] = [];
    Ⲇⵠ[678][xs.ΔΔΔ] = [];
    Ⲇⵠ[678][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[678][xs.ΔΔΔ].push(Oq(Ep(a, ["#2d53c4"])));
    Ⲇⵠ[678][xs.ⵠᐃⲆ].push(Oq(Ep(a, ["#2d53c4"])));
    Ⲇⵠ[696] = [];
    Ⲇⵠ[696][xs.ΔΔΔ] = [];
    Ⲇⵠ[696][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[696][xs.ΔΔΔ].push(Oq(Ep(a, ["#c4912d"])));
    Ⲇⵠ[696][xs.ⵠᐃⲆ].push(Oq(Ep(a, ["#c4912d"])));
    Ⲇⵠ[680] = [];
    Ⲇⵠ[680][xs.ΔΔΔ] = Oq(Np(a, ["#414040"]));
    Ⲇⵠ[680][xs.ⵠᐃⲆ] = Oq(Np(a, ["#153635"]));
    Ⲇⵠ[508] = [];
    Ⲇⵠ[508][xs.ΔΔΔ] = Oq(fm(a * 1, Wh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[508][xs.ⵠᐃⲆ] = Oq(fm(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[509] = [];
    Ⲇⵠ[509][xs.ΔΔΔ] = Oq(Xm(a * 1, z, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[509][xs.ⵠᐃⲆ] = Oq(Xm(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[512] = [];
    Ⲇⵠ[512][xs.ΔΔΔ] = Oq(Xm(a * 1, qe, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[512][xs.ⵠᐃⲆ] = Oq(Xm(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[511] = [];
    Ⲇⵠ[511][xs.ΔΔΔ] = Oq(um(a * 1, Ja, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[511][xs.ⵠᐃⲆ] = Oq(um(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[510] = [];
    Ⲇⵠ[510][xs.ΔΔΔ] = Oq(ym(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    Ⲇⵠ[510][xs.ⵠᐃⲆ] = Oq(ym(a * 1, hl, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    Ⲇⵠ[419] = [];
    Ⲇⵠ[419][xs.ΔΔΔ] = Oq(op(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    Ⲇⵠ[419][xs.ⵠᐃⲆ] = Oq(op(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    Ⲇⵠ[445] = [];
    Ⲇⵠ[445][xs.ΔΔΔ] = Oq(Gp(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    Ⲇⵠ[445][xs.ⵠᐃⲆ] = Oq(Gp(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    Ⲇⵠ[259] = [];
    Ⲇⵠ[818] = [];
    Ⲇⵠ[516] = [];
    Ⲇⵠ[819] = [];
    for (b = 0; b < 2; b++) {
      Ⲇⵠ[259][b] = document.createElement("canvas");
      Ⲇⵠ[259][b].width = 193;
      Ⲇⵠ[259][b].height = 193;
      Ⲇⵠ[818][b] = Ⲇⵠ[259][b].getContext("2d");
      Ⲇⵠ[516][b] = document.createElement("canvas");
      Ⲇⵠ[516][b].width = 600;
      Ⲇⵠ[516][b].height = 600;
      Ⲇⵠ[819][b] = Ⲇⵠ[516][b].getContext("2d");
    }
    Ⲇⵠ[475] = [];
    Ⲇⵠ[475][xs.ΔΔΔ] = Oq(Np(a, ["#c8e0de"]));
    Ⲇⵠ[475][xs.ⵠᐃⲆ] = Oq(Np(a, ["#147071"]));
    Ⲇⵠ[476] = [];
    Ⲇⵠ[476][xs.ΔΔΔ] = Oq(Np(a, ["#231912"]));
    Ⲇⵠ[476][xs.ⵠᐃⲆ] = Oq(Np(a, ["#021719"]));
    Ⲇⵠ[697] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      kd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      xd(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      kd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      xd(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      kd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      xd(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      kd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      xd(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    Ⲇⵠ[461] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      xd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      xd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      xd(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    Ⲇⵠ[462] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      xd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      xd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      xd(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    Ⲇⵠ[463] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      xd(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      xd(d, b[0]);
      return c;
    }(a * 1, ["#BB0000"]));
    Ⲇⵠ[466] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      xd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      xd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      xd(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    Ⲇⵠ[467] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      xd(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      xd(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      xd(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    Ⲇⵠ[322] = Oq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      xd(e, c, c, a);
      return d;
    }(a * 0.9, "#BB0000"));
    Ⲇⵠ[279] = Oq(Bd(a * 0.6, "#BB0000"));
    Ⲇⵠ[280] = Oq(Bd(a * 0.6, "#1CE7E0"));
    Ⲇⵠ[281] = Oq(Bd(a * 0.6, "#DBE71C"));
    Ⲇⵠ[308] = Oq(Bd(a * 0.6, "#00BB00"));
    Ⲇⵠ[602] = [];
    Ⲇⵠ[602][xs.ΔΔΔ] = Oq(Np(a, ["#dac291"]));
    Ⲇⵠ[602][xs.ⵠᐃⲆ] = Oq(Np(a, ["#0D423D"]));
    Ⲇⵠ[698] = [];
    Ⲇⵠ[698][xs.ΔΔΔ] = Oq(Np(a, ["#dac291"]));
    Ⲇⵠ[698][xs.ⵠᐃⲆ] = Oq(Np(a, ["#0D423D"]));
    Ⲇⵠ[788] = [];
    Ⲇⵠ[788][xs.ΔΔΔ] = Oq(Mc(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    Ⲇⵠ[788][xs.ⵠᐃⲆ] = Oq(Mc(a * 0.3, Rr, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    Ⲇⵠ[182] = [];
    Ⲇⵠ[182][xs.ΔΔΔ] = Oq(Mc(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    Ⲇⵠ[182][xs.ⵠᐃⲆ] = Oq(Mc(a * 0.3, cr, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    Ⲇⵠ[127] = [Oq(Sc(a, $n, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    Ⲇⵠ[128] = [Oq(Sc(a, Dh, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    Ⲇⵠ[603] = [];
    Ⲇⵠ[603][xs.ΔΔΔ] = [];
    Ⲇⵠ[603][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(Bp(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(np(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(dp(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(pc(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(mc(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(Rc(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ΔΔΔ].push(Oq(Jc(a * 1, ["#0B6A84"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(Bp(a * 1, ["#09373F"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(np(a * 1, ["#09373F"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(dp(a * 1, ["#09373F"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(pc(a * 1, ["#09373F"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(mc(a * 1, ["#09373F"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(Rc(a * 1, ["#09373F"])));
    Ⲇⵠ[603][xs.ⵠᐃⲆ].push(Oq(Jc(a * 1, ["#09373F"])));
    Ⲇⵠ[692] = [];
    Ⲇⵠ[692][xs.ΔΔΔ] = [];
    Ⲇⵠ[692][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[692][xs.ΔΔΔ].push(Oq(Tp(a * 1.7, ["#FBEFBC"], 0)));
    Ⲇⵠ[692][xs.ΔΔΔ].push(Oq(Tp(a * 1.9, ["#FBEFBC"], 1)));
    Ⲇⵠ[692][xs.ΔΔΔ].push(Oq(Tp(a * 1.7, ["#FBEFBC"], 2)));
    Ⲇⵠ[692][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.7, ["#0F4C48"], 0)));
    Ⲇⵠ[692][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.9, ["#0F4C48"], 1)));
    Ⲇⵠ[692][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.7, ["#0F4C48"], 2)));
    Ⲇⵠ[694] = [];
    Ⲇⵠ[694][xs.ΔΔΔ] = [];
    Ⲇⵠ[694][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[694][xs.ΔΔΔ].push(Oq(Tp(a * 1.8, ["#A9D6D3"], 0)));
    Ⲇⵠ[694][xs.ΔΔΔ].push(Oq(Tp(a * 2, ["#A9D6D3"], 1)));
    Ⲇⵠ[694][xs.ΔΔΔ].push(Oq(Tp(a * 1.8, ["#A9D6D3"], 2)));
    Ⲇⵠ[694][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.8, ["#115E60"], 0)));
    Ⲇⵠ[694][xs.ⵠᐃⲆ].push(Oq(Tp(a * 2, ["#115E60"], 1)));
    Ⲇⵠ[694][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.8, ["#115E60"], 2)));
    Ⲇⵠ[695] = [];
    Ⲇⵠ[695][xs.ΔΔΔ] = [];
    Ⲇⵠ[695][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[695][xs.ΔΔΔ].push(Oq(Tp(a * 1.9, ["#2A8B9B"], 0)));
    Ⲇⵠ[695][xs.ΔΔΔ].push(Oq(Tp(a * 2.1, ["#2A8B9B"], 1)));
    Ⲇⵠ[695][xs.ΔΔΔ].push(Oq(Tp(a * 1.9, ["#2A8B9B"], 2)));
    Ⲇⵠ[695][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.9, ["#0F464C"], 0)));
    Ⲇⵠ[695][xs.ⵠᐃⲆ].push(Oq(Tp(a * 2.1, ["#0F464C"], 1)));
    Ⲇⵠ[695][xs.ⵠᐃⲆ].push(Oq(Tp(a * 1.9, ["#0F464C"], 2)));
    Ⲇⵠ[693] = [];
    Ⲇⵠ[693][xs.ΔΔΔ] = [];
    Ⲇⵠ[693][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[693][xs.ΔΔΔ].push(Oq(Iu(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇⵠ[693][xs.ΔΔΔ].push(Oq(Iu(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇⵠ[693][xs.ΔΔΔ].push(Oq(Iu(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    Ⲇⵠ[693][xs.ⵠᐃⲆ].push(Oq(Iu(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇⵠ[693][xs.ⵠᐃⲆ].push(Oq(Iu(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇⵠ[693][xs.ⵠᐃⲆ].push(Oq(Iu(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    Ⲇⵠ[637] = [];
    Ⲇⵠ[637][xs.ΔΔΔ] = Oq(Jp(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    Ⲇⵠ[637][xs.ⵠᐃⲆ] = Oq(Jp(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    Ⲇⵠ[687] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      xd(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.8, ["#B6222A"]));
    Ⲇⵠ[673] = [];
    Ⲇⵠ[673][xs.ΔΔΔ] = Oq(wc(a * 0.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    Ⲇⵠ[673][xs.ⵠᐃⲆ] = Oq(wc(a * 0.8, kg, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    Ⲇⵠ[688] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      xd(d, b[0], b[0], a * 10);
      return c;
    }(a * 0.8, ["#B6222A"]));
    Ⲇⵠ[902] = [];
    Ⲇⵠ[902][xs.ΔΔΔ] = Oq(Xd(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    Ⲇⵠ[902][xs.ⵠᐃⲆ] = Oq(Xd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    Ⲇⵠ[903] = [];
    Ⲇⵠ[903][xs.ΔΔΔ] = Oq(Xd(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    Ⲇⵠ[903][xs.ⵠᐃⲆ] = Oq(Xd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    Ⲇⵠ[xs.ⵠᐃΔⲆΔⵠⲆ] = [];
    Ⲇⵠ[xs.ⵠᐃΔⲆΔⵠⲆ][xs.ΔΔΔ] = Oq(Xd(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    Ⲇⵠ[xs.ⵠᐃΔⲆΔⵠⲆ][xs.ⵠᐃⲆ] = Oq(Xd(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    Ⲇⵠ[904] = Oq(Zd(a * 0.4, ["#B6222A"]));
    Ⲇⵠ[905] = Oq(Zd(a * 0.4, ["#B6222A"]));
    Ⲇⵠ[xs.ⲆΔᐃᐃⵠΔᐃⲆᐃ] = Oq(Zd(a * 0.4, ["#B6222A"]));
    Ⲇⵠ[230] = Oq(Ym(a * 0.35, kg, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    Ⲇⵠ[229] = Oq(Hu(a * 0.35, cr, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    Ⲇⵠ[886] = [];
    Ⲇⵠ[886][xs.ΔΔΔ] = Oq(tm(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    Ⲇⵠ[886][xs.ⵠᐃⲆ] = Oq(tm(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    Ⲇⵠ[887] = [];
    Ⲇⵠ[887][xs.ΔΔΔ] = Oq(tm(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    Ⲇⵠ[887][xs.ⵠᐃⲆ] = Oq(tm(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    Ⲇⵠ[894] = [];
    Ⲇⵠ[894][xs.ΔΔΔ] = Oq(Bu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    Ⲇⵠ[894][xs.ⵠᐃⲆ] = Oq(Bu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    Ⲇⵠ[895] = [];
    Ⲇⵠ[895][xs.ΔΔΔ] = Oq(Gu(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    Ⲇⵠ[895][xs.ⵠᐃⲆ] = Oq(Gu(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    Ⲇⵠ[896] = [];
    Ⲇⵠ[896][xs.ΔΔΔ] = Oq(Bu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    Ⲇⵠ[896][xs.ⵠᐃⲆ] = Oq(Bu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    Ⲇⵠ[897] = [];
    Ⲇⵠ[897][xs.ΔΔΔ] = Oq(Gu(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    Ⲇⵠ[897][xs.ⵠᐃⲆ] = Oq(Gu(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    Ⲇⵠ[888] = Oq(Au(a * 0.35, ["#B6222A"]));
    Ⲇⵠ[889] = Oq(Bu(a * 0.35, 0, [Sa, "#B6222A"]));
    Ⲇⵠ[890] = Oq(Gu(a * 0.35, 0, [undefined, "#B6222A"]));
    Ⲇⵠ[891] = Oq(Au(a * 0.35, ["#22E066"]));
    Ⲇⵠ[892] = Oq(Bu(a * 0.35, 0, [undefined, "#22E066"]));
    Ⲇⵠ[893] = Oq(Gu(a * 0.35, 0, [Qq, "#22E066"]));
    Ⲇⵠ[48] = [];
    Ⲇⵠ[48][xs.ΔΔΔ] = Oq(Mm(a * 0.3, Qk, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    Ⲇⵠ[48][xs.ⵠᐃⲆ] = Oq(Mm(a * 0.3, kg, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    Ⲇⵠ[47] = [];
    Ⲇⵠ[47][xs.ΔΔΔ] = Oq(Pm(a * 0.45, f, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    Ⲇⵠ[47][xs.ⵠᐃⲆ] = Oq(Pm(a * 0.45, U, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    Ⲇⵠ[141] = [];
    Ⲇⵠ[141][xs.ΔΔΔ] = Oq(ac(a * 0.63, Ha, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    Ⲇⵠ[141][xs.ⵠᐃⲆ] = Oq(ac(a * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    Ⲇⵠ[125] = [];
    Ⲇⵠ[125][xs.ΔΔΔ] = Oq(kp(a, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    Ⲇⵠ[125][xs.ⵠᐃⲆ] = Oq(kp(a, Xg, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    Ⲇⵠ[221] = [];
    Ⲇⵠ[221][xs.ΔΔΔ] = ΔⲆ.ΔΔⵠΔⲆΔⲆⵠᐃ;
    Ⲇⵠ[221][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆΔᐃΔⵠⲆᐃⵠ;
    Ⲇⵠ[190] = [];
    Ⲇⵠ[190][xs.ΔΔΔ] = Oq(Ld(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇⵠ[190][xs.ⵠᐃⲆ] = Oq(Ld(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇⵠ[853] = [Ⲇⵠ[190]];
    Ⲇⵠ[853][1] = [];
    Ⲇⵠ[853][2] = [];
    Ⲇⵠ[853][1][xs.ΔΔΔ] = Oq(jd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇⵠ[853][1][xs.ⵠᐃⲆ] = Oq(jd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇⵠ[853][2][xs.ΔΔΔ] = Oq(Fd(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    Ⲇⵠ[853][2][xs.ⵠᐃⲆ] = Oq(Fd(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    Ⲇⵠ[49] = [];
    Ⲇⵠ[49][xs.ΔΔΔ] = Oq(Ad(3 - Math.PI / 2, Wp(a * 0.6, U, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    Ⲇⵠ[49][xs.ⵠᐃⲆ] = Oq(Ad(3 - Math.PI / 2, Wp(a * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    Ⲇⵠ[728] = [];
    Ⲇⵠ[728][xs.ΔΔΔ] = Oq(Mt(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    Ⲇⵠ[728][xs.ⵠᐃⲆ] = Oq(Mt(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    Ⲇⵠ[798] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      kd(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      xd(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      kd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      xd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      kd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      xd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      kd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      xd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      kd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      xd(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      kd(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      xd(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      kd(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      xd(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      xd(d, ur, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      xd(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      xd(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      xd(d, undefined, b[1], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    Ⲇⵠ[729] = Oq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      kd(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      kd(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      kd(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      kd(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      kd(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      kd(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      kd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      kd(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      xd(d, b[0], b[0], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    Ⲇⵠ[658] = cu(1, [{
      f: ep,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    Ⲇⵠ[150] = cu(1.5, [{
      f: Kc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    Ⲇⵠ[669] = lp(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    Ⲇⵠ[670] = lp(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    Ⲇⵠ[671] = lp(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    Ⲇⵠ[672] = lp(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ΔΔΔΔⵠᐃΔ) {
      Ⲇⵠ[278] = Oq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        kd(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        xd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = xm(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    } else {
      Ⲇⵠ[278] = Oq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        kd(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        xd(d, "#1D6055");
        d.globalAlpha = 1;
        var a = xm(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(a));
    }
    if (ΔΔΔΔⵠᐃΔ) {
      Ⲇⵠ[267] = Oq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        kd(d, k, 0, f, a, h);
        xd(d, null, "#69A148", g);
        d.translate(0, j);
        kd(d, k, 0, f, a, h);
        xd(d, null, "#AF352A", g);
        d.translate(0, j);
        kd(d, k, 0, f, a, h);
        xd(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      Ⲇⵠ[267] = Oq(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var a = c * 20;
        var k = c * 240;
        var m = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        kd(e, m, h, i, a, g);
        xd(e, null, "#69A148", l);
        var n = Ⲇⵠ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        kd(e, m, h, i, a, g);
        xd(e, null, "#AF352A", l);
        n = Ⲇⵠ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        kd(e, m, h, i, a, g);
        xd(e, null, "#669BB1", l);
        n = Ⲇⵠ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        kd(e, m, h, i, a, g);
        xd(e, null, "#074A87", l);
        n = Ⲇⵠ[672];
        e.drawImage(n, 17, -8);
        return d;
      }(a));
    }
    if (ΔΔΔΔⵠᐃΔ) {
      Ⲇⵠ[608] = Oq(Wc(0.75));
    } else {
      Ⲇⵠ[608] = Oq(Wc(a));
    }
    Ⲇⵠ[792] = Oq(xp(a * 0.16, dg, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    Ⲇⵠ[537] = Oq(Ad(5.8, yu(a * 0.15, tg, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    Ⲇⵠ[283] = [];
    Ⲇⵠ[465] = [];
    for (b = 0; b < 18; b++) {
      Ⲇⵠ[465][b] = xm(a, "" + (b + 1), 12, "#FFF");
    }
    Ⲇⵠ[708] = [];
    Ⲇⵠ[708].push(Oq(Qp(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    Ⲇⵠ[708].push(Oq(Qp(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    Ⲇⵠ[708].push(Oq(Qp(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    Ⲇⵠ[725] = [];
    Ⲇⵠ[725].push(Oq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      yd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      xd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      yd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      xd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      xd(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      xd(c, "#3A2A0D");
      yd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      xd(c, hs, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      xd(c, ur, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      xd(c, Ua, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      xd(c, Ua, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      xd(c, Qq, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      xd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      xd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      xd(c, Es, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      xd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      xd(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      xd(c, undefined, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      xd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      xd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      xd(c, Es, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      xd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      xd(c, fo, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      xd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      xd(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      xd(c, Bl, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      xd(c, $i, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      xd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      xd(c, "#ECBE35", "#EDCE4F", a * 8);
      yd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      xd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    Ⲇⵠ[725].push(Oq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      yd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      xd(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      yd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      xd(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      xd(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      xd(c, "#071A1B");
      yd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      xd(c, Es, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      xd(c, wl, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      xd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      xd(c, Bl, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      xd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      xd(c, zn, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      xd(c, $i, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      xd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      xd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      xd(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      xd(c, Ua, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      xd(c, Qq, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      xd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      xd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      xd(c, $i, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      xd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      xd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      xd(c, Ua, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      xd(c, $i, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      xd(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      xd(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      xd(c, "#E1DDD5", "#EAE7E4", a * 8);
      yd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      xd(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(a * 0.22)));
    Ⲇⵠ[726] = Oq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      yd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      xd(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      xd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      kd(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      xd(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      kd(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      xd(c, "#C09D6F");
      yd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      xd(c, "#C09D6F");
      return b;
    }(a * 0.22));
    Ⲇⵠ[727] = [];
    Ⲇⵠ[727].push(Oq(It(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
    Ⲇⵠ[727].push(Oq(It(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    Ⲇⵠ[727].push(Oq(It(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    Ⲇⵠ[546] = ΔⲆ.ⲆΔᐃΔᐃΔᐃ;
    Ⲇⵠ[547] = ΔⲆ.ⵠⲆⵠᐃΔⵠΔ;
    Ⲇⵠ[548] = ΔⲆ.ⲆᐃⲆΔΔΔⲆ;
    Ⲇⵠ[549] = ΔⲆ.ⲆⵠᐃΔΔᐃᐃ;
    Ⲇⵠ[517] = xm(a, "Show spectators", 25, "#FFF", Sa, $g, "#000", 5, 220);
    Ⲇⵠ[525] = xm(a, "Reconnecting...", 30, "#FFF");
    console.log(undefined, ij);
  }
  function bc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    kd(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    xd(e, c[0]);
    kd(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    xd(e, c[1], c[2], b * 4);
    var a = Ad(-Math.PI / 5, xu(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = Ad(Math.PI / 4, Hc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    kd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    kd(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    xd(e, undefined, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    kd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    kd(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    xd(e, undefined, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    xd(e, undefined, c[1], a * 10);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    kd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    kd(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    kd(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    xd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    kd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    kd(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    xd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    xd(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    kd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    kd(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    xd(e, c[3], c[4], a * 6);
    return d;
  }
  function mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    yd(e, a * 178.5, a * 172.828125, a * 150);
    xd(e, ij, c[0], a * 65);
    yd(e, a * 178.5, a * 172.828125, a * 150);
    xd(e, undefined, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    kd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    kd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    kd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    xd(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    xd(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    yd(e, a * 178.5, a * 172.828125, a * 150);
    xd(e, undefined, c[2], a * 95);
    yd(e, a * 178.5, a * 172.828125, a * 150);
    xd(e, zn, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    kd(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    xd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    kd(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    xd(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    kd(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    xd(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    xd(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    xd(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    xd(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    kd(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    kd(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    xd(e, c[0]);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    xd(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    xd(e, c[1]);
    return d;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    xd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    xd(e, Cs, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    xd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    xd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    xd(e, Gj, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    xd(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    xd(e, hs, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    xd(e, undefined, c[4], a * 6);
    return d;
  }
  function zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    yd(d, a * 74.5, a * 85, a * 66);
    xd(d, b[0]);
    d.globalAlpha = 1;
    yd(d, a * 75.5, a * 72.5, a * 67);
    xd(d, b[1], b[2], a * 4);
    yd(d, a * 75.5, a * 73.5, a * 54);
    xd(d, b[3]);
    d.globalAlpha = 0.5;
    yd(d, a * 74.5, a * 80.5, a * 39);
    xd(d, b[4]);
    d.globalAlpha = 1;
    yd(d, a * 74.5, a * 74.5, a * 37);
    xd(d, b[5]);
    return c;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    xd(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    xd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    xd(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    xd(e, c[0], c[1], 4);
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    xd(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    yd(e, a * 108.5, a * 148.421875, a * 9);
    xd(e, c[5]);
    yd(e, a * 106.5, a * 144.421875, a * 3);
    xd(e, c[6]);
    yd(e, a * 46.5, a * 148.421875, a * 9);
    xd(e, c[5]);
    yd(e, a * 44.5, a * 144.421875, a * 3);
    xd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    xd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    xd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    xd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    xd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    xd(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    xd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    xd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    xd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    xd(e, Gj, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    xd(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    xd(e, c[2]);
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    kd(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    xd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    kd(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    xd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    xd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    xd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    kd(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    xd(e, Sa, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    kd(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    xd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    kd(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    xd(e, c[6], c[7], a * 4);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    xd(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    xd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    xd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    xd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    xd(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    xd(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    xd(e, c[2], c[3], a * 10);
    yd(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    xd(e, c[4], c[5], a * 1);
    yd(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    xd(e, c[4], c[5], a * 1);
    yd(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    xd(e, c[4], c[5], a * 1);
    yd(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    xd(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    xd(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    xd(e, c[6]);
    return d;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    xd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    xd(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    xd(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    xd(e, c[4], c[5], a * 5);
    return d;
  }
  function Jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function Mc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    xd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    yd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    xd(f, d[5], Gj, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    xd(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      yd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      xd(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      yd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      xd(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    yd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    xd(f, undefined, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    xd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    xd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    xd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    xd(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    xd(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    xd(f, d[4], d[2], b * 12);
    return e;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    xd(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    xd(e, c[2]);
    return d;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    yd(e, a * 220, a * 201, a * 170.41713528867922);
    xd(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    yd(e, a * 220, a * 201, a * 170.41713528867922);
    xd(e, c[1], c[2], a * 6);
    yd(e, a * 220, a * 201, a * 130);
    xd(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    xd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    xd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    xd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    xd(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    xd(e, hg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    xd(e, Ij, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    xd(e, fo, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    xd(e, Es, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    xd(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    xd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    xd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    xd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    xd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    xd(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    xd(e, ur, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    xd(e, Sa, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    xd(e, zn, c[6], a * 6);
    yd(e, a * 222, a * 199, a * 120.74767078498864);
    xd(e, undefined, c[3], a * 40);
    yd(e, a * 220, a * 200, a * 95.44108130150245);
    xd(e, Gm, c[2], a * 15);
    yd(e, a * 220, a * 201, a * 85);
    xd(e, Qq, c[4], a * 10);
    e.globalAlpha = 0.5;
    yd(e, a * 220, a * 201, a * 82);
    xd(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    yd(e, a * 63, a * 136, a * 49.193495504995376);
    xd(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    yd(e, a * 63, a * 136, a * 49.193495504995376);
    xd(e, c[8], c[2], a * 4);
    yd(e, a * 63, a * 137, a * 25.632011235952593);
    xd(e, c[7], c[2], a * 4);
    return d;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    xd(e, wl, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    xd(e, fo, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      xd(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    xd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    xd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    xd(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    xd(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    xd(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      xd(e, zn, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      xd(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    xd(e, undefined, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    xd(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    xd(e, undefined, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    xd(e, b[2], b[2], a * 10);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    kd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    xd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    xd(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    xd(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    xd(e, undefined, c[6], a * 15);
    return d;
  }
  function Qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    yd(d, a * 86.5, a * 98, a * 80);
    xd(d, b[0]);
    d.globalAlpha = 1;
    yd(d, a * 86.5, a * 89, a * 81);
    xd(d, b[1], b[2], a * 4);
    yd(d, a * 86.5, a * 86, a * 59);
    xd(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    yd(d, a * 86.5, a * 95, a * 34);
    xd(d, b[0]);
    d.globalAlpha = 1;
    yd(d, a * 86.5, a * 89, a * 34);
    xd(d, b[5]);
    return c;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    xd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    xd(e, c[4], c[5], a * 6);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    kd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    kd(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    xd(e, wl, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    xd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    xd(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    xd(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    xd(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    xd(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    xd(e, c[10]);
    return d;
  }
  function Rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function jc(a) {
    return function (b, c, d) {
      const e = b ^ 22109;
      const f = (0 << (c >> 24 & 255)) + (24 << (c & 255)) + (8 << (c >> 8 & 255)) + (16 << (c >> 16 & 255));
      const g = d ^ 60038;
      const a = vb(e, f, g, e);
      const h = zo(f, g, e, f);
      return (1013904223 + (901 + (a ^ h)) * 1664525) % 4294967296;
    }(a, 56161, 36735);
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    xd(e, c[1], c[2], a * 6);
    return d;
  }
  function Gc(b, c, d, e) {
    We(Ct, b, c, d, e);
    const f = wr(Eb[0], Eb[1]);
    g = Eb[2];
    i = Eb[3];
    j = Eb[0];
    k = Eb[1];
    Li(Ct, g, i, j, k);
    xr(Eb[0], Eb[1], Eb[2], Eb[3]);
    wr(Eb[0], Eb[1]);
    var g;
    var i;
    var j;
    var k;
    return f ^ 12493;
  }
  function Wc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    kd(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    xd(d, null, "#BBE8EF", a);
    return c;
  }
  function Nc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    yd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    xd(d, undefined, c[2], a * 4);
    yd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    xd(d, Gm, c[1], a * 4);
    yd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    xd(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    kd(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    xd(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    wd(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    xd(d, c[3]);
    yd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    xd(d, c[3]);
    return e;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    xd(e, c[1], c[2], a * 10);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    kd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    xd(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    kd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    xd(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    kd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    xd(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    kd(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    xd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    kd(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    xd(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    kd(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    xd(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    xd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    xd(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    xd(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    xd(e, c[11], c[10], a * 3);
    return d;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    kd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    kd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    kd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    kd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    kd(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    kd(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    xd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    kd(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    xd(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    kd(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    xd(e, c[3], c[4], a * 3);
    return d;
  }
  function Uc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    yd(d, a * 55, a * 55, a * 55);
    xd(d, b[0]);
    return c;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    yd(e, a * 69, a * 64, a * 48.16637831516918);
    xd(e, c[1]);
    e.globalAlpha = 0.7;
    yd(e, a * 69, a * 64, a * 38.23105625617661);
    xd(e, c[2]);
    e.globalAlpha = 0.7;
    yd(e, a * 69, a * 64, a * 32.01562118716424);
    xd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    xd(e, c[3]);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    xd(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    xd(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    xd(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    xd(e, fh, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    xd(e, c[3]);
    return d;
  }
  function Xc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = bp(b * 1, true, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      yd(g, b * 113, b * 120, b * 66);
      xd(g, Ua, d[4], b * 13);
      a = yu(b * 0.65, dg, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      xd(g, ij, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      yd(g, b * 113, b * 120, b * 66);
      xd(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      kd(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      xd(g, "#dff2f7", "#187484", b * 7);
      yd(g, b * 22, b * 82, b * 12);
      xd(g, "#dff2f7", "#187484", b * 7);
      yd(g, b * 145, b * 82, b * 12);
      xd(g, "#dff2f7", "#187484", b * 7);
      a = _m(b * 0.5, U, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = _m(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = _m(b * 0.5, dg, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = Tm(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      yd(g, b * 113, b * 120, b * 66);
      xd(g, $i, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      kd(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      xd(g, fh, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      xd(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      xd(g, Ij, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      xd(g, zn, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      xd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      xd(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      xd(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      xd(g, fh, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      xd(g, zn, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      xd(g, Cs, d[5], b * 14);
    }
    return f;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    kd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    kd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    kd(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    kd(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    xd(e, c[2]);
    return d;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    xd(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    xd(e, undefined, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    xd(e, Gj, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    xd(e, c[3], c[2], a * 19);
    yd(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    xd(e, c[4]);
    yd(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    xd(e, c[4]);
    yd(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    xd(e, c[4]);
    yd(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    xd(e, c[4]);
    yd(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    xd(e, c[4]);
    yd(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    xd(e, c[4]);
    yd(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    xd(e, c[4]);
    yd(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    xd(e, c[4]);
    yd(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    xd(e, c[4]);
    yd(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    xd(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    xd(e, c[5]);
    return d;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    xd(e, c[0], c[1], 4);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    xd(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    xd(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    xd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    xd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    xd(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    xd(e, c[2], c[3], a * 12);
    return d;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    xd(e, hg, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    xd(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    xd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    xd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    xd(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    xd(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    xd(e, $i, c[3], a * 4);
    return d;
  }
  function tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    kd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    kd(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    xd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    xd(e, c[8]);
    return d;
  }
  function np(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    xd(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function op(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    xd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    xd(d, b[3]);
    yd(d, a * 103, a * 110, a * 11);
    xd(d, b[4]);
    yd(d, a * 55, a * 111, a * 11);
    xd(d, b[4]);
    yd(d, a * 99, a * 107, a * 5);
    xd(d, b[1]);
    yd(d, a * 51, a * 108, a * 5);
    xd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    xd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    xd(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    xd(d, undefined, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    xd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    xd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    xd(d, b[3]);
    return c;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    kd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    kd(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    xd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    xd(e, c[8]);
    return d;
  }
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    kd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    xd(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    kd(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    xd(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    kd(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    xd(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    kd(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    xd(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    xd(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    xd(e, Gm, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    xd(e, hg, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    xd(e, wl, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    kd(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    xd(e, Gm, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    kd(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    xd(e, c[8]);
    return d;
  }
  function sp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    yd(f, 0, 0, b * 60);
    xd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      wd(f, 3, b * 20, b * 4);
      xd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    yd(f, 0, 0, b * 60);
    xd(f, d[3], d[4], b * 4);
    yd(f, 0, 0, b * 40);
    xd(f, d[5]);
    yd(f, 0, 0, b * 25);
    xd(f, d[6], d[7], b * 8);
    return e;
  }
  function hp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    xd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    xd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    xd(d, b[2]);
    return c;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    xd(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    xd(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    xd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    xd(e, Ij, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    xd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    xd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    xd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    xd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    xd(e, undefined, c[2], a * 11);
    return d;
  }
  function lp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    yd(e, a * 54.5, a * 55, a * 48.038209575038294);
    xd(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      xd(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      kd(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      xd(e, b[2], b[3], a * 4);
      yd(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      xd(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      kd(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      xd(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      xd(e, wl, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      xd(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      xd(e, undefined, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      xd(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      xd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      xd(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      xd(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      xd(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      xd(e, b[3]);
    }
    return d;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    xd(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    kd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    xd(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    xd(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    xd(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    xd(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    kd(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 3);
    return d;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    kd(e, 0, 0, a * 400, a * 220, a * 30);
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    xd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    xd(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    xd(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    xd(e, c[3], c[1], a * 12);
    yd(e, a * 41, a * 30, a * 14.7648230602334);
    xd(e, c[3], c[1], a * 12);
    yd(e, a * 369, a * 30, a * 15.556349186104045);
    xd(e, c[3], c[1], a * 12);
    yd(e, a * 364, a * 190, a * 15.620499351813308);
    xd(e, c[3], c[1], a * 12);
    yd(e, a * 41, a * 186, a * 15.556349186104045);
    xd(e, c[3], c[1], a * 12);
    return d;
  }
  function dp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function vp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    xd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    xd(e, undefined, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    xd(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    xd(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    xd(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    xd(e, c[0], c[1], a * 20);
    return d;
  }
  function mp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    kd(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    kd(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    xd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    kd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    xd(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    kd(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    xd(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    kd(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    xd(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    kd(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    xd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    kd(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    xd(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    kd(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    xd(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    kd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    kd(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    xd(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    kd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    kd(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    xd(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    kd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    kd(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    xd(d, b[2]);
    return c;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 41, a * 30, a * 14.7648230602334);
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 369, a * 30, a * 15.556349186104045);
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 364, a * 190, a * 15.620499351813308);
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 41, a * 186, a * 15.556349186104045);
      xd(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 41, a * 30, a * 14.7648230602334);
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 369, a * 30, a * 15.556349186104045);
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 364, a * 190, a * 15.620499351813308);
      xd(e, b[3], b[3], a * 32);
      yd(e, a * 41, a * 186, a * 15.556349186104045);
      xd(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    xd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    xd(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    xd(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    xd(e, b[2], b[0], a * 12);
    yd(e, a * 41, a * 30, a * 14.7648230602334);
    xd(e, b[2], b[0], a * 12);
    yd(e, a * 369, a * 30, a * 15.556349186104045);
    xd(e, b[2], b[0], a * 12);
    yd(e, a * 364, a * 190, a * 15.620499351813308);
    xd(e, b[2], b[0], a * 12);
    yd(e, a * 41, a * 186, a * 15.556349186104045);
    xd(e, b[2], b[0], a * 12);
    return d;
  }
  function pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      kd(e, a * 0, a * 5, a * 90, a * 60, 10);
      xd(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      yd(e, a * 25, a * 40, a * 10);
      e.fill();
      yd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      kd(e, 0, 0, a * 90, a * 60, a * 10);
      xd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      yd(e, a * 25, a * 40, a * 10);
      e.fill();
      yd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      xd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      xd(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      xd(e, b[1]);
      e.restore();
      e.save();
      kd(e, 0, a * 15, a * 90, a * 50, a * 10);
      xd(e, b[0]);
      kd(e, 0, a * 10, a * 90, a * 50, a * 10);
      xd(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      yd(e, a * 25, a * 40, a * 10);
      e.fill();
      yd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Cp() {
    var b = Dx.time;
    if (Ⲇⵠ[285]) {
      Jo.drawImage(Ⲇⵠ[285][b][1], Eo + 480, _o + 190);
      Jo.drawImage(Ⲇⵠ[285][b][2], Eo + 180, _o - 430);
      Jo.drawImage(Ⲇⵠ[285][b][1], Eo - 855, _o + 100);
      Jo.drawImage(Ⲇⵠ[285][b][0], Eo - 550, _o - 300);
      Jo.drawImage(Ⲇⵠ[285][b][0], Eo - 1020, _o - 520);
    }
    if (Ⲇⵠ[108]) {
      Jo.drawImage(Ⲇⵠ[108][b][1], Eo - 80, _o - 640);
      Jo.drawImage(Ⲇⵠ[108][b][1], Eo + 80, _o + 490);
      Jo.drawImage(Ⲇⵠ[108][b][2], Eo - 180, _o - 700);
      Jo.drawImage(Ⲇⵠ[108][b][0], Eo + 550, _o + 100);
      Jo.drawImage(Ⲇⵠ[108][b][1], Eo + 450, _o + 300);
      Jo.drawImage(Ⲇⵠ[108][b][1], Eo + 780, _o + 300);
      Jo.drawImage(Ⲇⵠ[108][b][2], Eo + 980, _o + 200);
      Jo.drawImage(Ⲇⵠ[108][b][2], Eo + 680, _o + 600);
      Jo.drawImage(Ⲇⵠ[108][b][2], Eo - 380, _o + 100);
      Jo.drawImage(Ⲇⵠ[108][b][2], Eo + 280, _o + 250);
    }
    if (Ⲇⵠ[110]) {
      Jo.drawImage(Ⲇⵠ[110][b][0], Eo - 590, _o);
      Jo.drawImage(Ⲇⵠ[110][b][0], Eo + 120, _o - 390);
      Jo.drawImage(Ⲇⵠ[110][b][0], Eo - 270, _o + 340);
    }
    if (Ⲇⵠ[109]) {
      Jo.drawImage(Ⲇⵠ[109][b][4], Eo - 700, _o - 600);
      Jo.drawImage(Ⲇⵠ[109][b][2], Eo - 970, _o - 250);
      Jo.drawImage(Ⲇⵠ[109][b][5], Eo - 720, _o - 200);
      Jo.drawImage(Ⲇⵠ[109][b][2], Eo - 1020, _o + 340);
      Jo.drawImage(Ⲇⵠ[109][b][0], Eo - 1120, _o - 0);
      Jo.drawImage(Ⲇⵠ[109][b][1], Eo - 650, _o - 330);
      Jo.drawImage(Ⲇⵠ[109][b][4], Eo - 495, _o - 90);
      Jo.drawImage(Ⲇⵠ[109][b][3], Eo - 520, _o + 340);
      Jo.drawImage(Ⲇⵠ[109][b][2], Eo + 830, _o - 520);
    }
    Ⲇⵠ[413];
    if (Gx && Fx) {
      var c = Gx.ᐃⵠⲆ.x;
      var d = Gx.ᐃⵠⲆ.y;
      Gx.ᐃⵠⲆ.x = Eo;
      Gx.ᐃⵠⲆ.y = _o;
      var e = Fx.time;
      Fx.time = Dx.time;
      var f;
      var g = Dx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ⲆᐃᐃⲆ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ⵠⲆⵠⵠ[0].x = f.x - 20.5;
      f.ⵠⲆⵠⵠ[0].y = f.y - 22.5;
      f.ⵠⲆⵠⵠ[1].x = f.x - 35.5;
      f.ⵠⲆⵠⵠ[1].y = f.y + 7.5;
      f.ⵠⲆⵠⵠ[2].x = f.x + 7.5;
      f.ⵠⲆⵠⵠ[2].y = f.y - 30;
      f.ⵠⲆⵠⵠ[3].x = f.x + 22.5;
      f.ⵠⲆⵠⵠ[3].y = f.y;
      f.ⵠⲆⵠⵠ[4].x = f.x - 7.5;
      f.ⵠⲆⵠⵠ[4].y = f.y + 14.5;
      for (var a = 0; f.info > a; a++) {
        f.ⵠⲆⵠⵠ[a].ⲆᐃᐃⲆ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ⵠⲆⵠⵠ[0].x = f.x - 20.5;
      f.ⵠⲆⵠⵠ[0].y = f.y - 22.5;
      f.ⵠⲆⵠⵠ[1].x = f.x - 35.5;
      f.ⵠⲆⵠⵠ[1].y = f.y + 7.5;
      f.ⵠⲆⵠⵠ[2].x = f.x + 7.5;
      f.ⵠⲆⵠⵠ[2].y = f.y - 30;
      f.ⵠⲆⵠⵠ[3].x = f.x + 22.5;
      f.ⵠⲆⵠⵠ[3].y = f.y;
      f.ⵠⲆⵠⵠ[4].x = f.x - 7.5;
      f.ⵠⲆⵠⵠ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ⵠⲆⵠⵠ[a].ⲆᐃᐃⲆ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ᐃⵠⵠⵠⲆ(113);
      g[0].ΔⵠⲆⵠᐃ();
      Gx.ᐃⵠⲆ.x = c;
      Gx.ᐃⵠⲆ.y = d;
      Fx.time = e;
    }
  }
  function Tp(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      xd(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      xd(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      xd(d, b[0]);
    }
    return e;
  }
  function fp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    kd(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    xd(f, c[2]);
    kd(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    xd(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = pp(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = pp(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function zp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    kd(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    xd(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    xd(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    xd(e, Qq, c[6], a * 15);
    return d;
  }
  function yp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      yd(e, a * 100.5, a * 82, a * 74.92746655359852);
      xd(e, c[0], c[0], a * 4);
      yd(e, a * 100.5, a * 82, a * 65.9417374971317);
      xd(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      yd(e, a * 100.5, a * 82, a * 74.92746655359852);
      xd(e, c[1], c[3], a * 4);
      yd(e, a * 100.5, a * 82, a * 65.9417374971317);
      xd(e, c[1], c[2], a * 4);
      yd(e, a * 100.5, a * 82, a * 35.9417374971317);
      xd(e, c[1], c[2], a * 20);
      yd(e, a * 100.5, a * 82, a * 15.9417374971317);
      xd(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = _p(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = _p(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = _p(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function wp(b, c, d, e, f) {
    const g = b ^ 8060;
    const a = (2531011 + (22854 + c) * 214013) % 4294967296;
    const i = (e | 25661) & ~(e & 25661);
    const j = ~(f & 1685) & (f | 1685);
    return (2147483587 + (30391 + (ns(g, a, ~(d & 41653) & d | ~(d & 41653) & 41653) ^ ok(i, j, g, a))) * 2147483629) % 2147483647;
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    kd(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    xd(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    xd(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    kd(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    xd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    xd(e, Qq, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    xd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    xd(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    xd(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    kd(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    xd(e, c[5]);
    return d;
  }
  function kp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    kd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    xd(e, c[0]);
    kd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    xd(e, c[0]);
    kd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    xd(e, c[0]);
    kd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    xd(e, c[0]);
    kd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    kd(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    xd(e, c[1]);
    kd(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    xd(e, c[1]);
    kd(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    xd(e, c[2], c[3], a * 4);
    kd(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    xd(e, c[2], c[3], a * 4);
    kd(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    xd(e, c[2], c[3], a * 4);
    return d;
  }
  function Ap(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    xd(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    xd(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    xd(d, b[2]);
    return c;
  }
  function xp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    xd(e, undefined, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    xd(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    xd(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    xd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    xd(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    xd(e, Ij, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    xd(e, ij, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    kd(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    xd(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    kd(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    xd(e, c[8], c[2], a * 4);
    yd(e, a * 87, a * 39, a * 4.123105625617661);
    xd(e, c[9], c[2], a * 4);
    yd(e, a * 87, a * 60, a * 4.242640687119285);
    xd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    xd(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    xd(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    xd(e, c[9], c[2], a * 4);
    yd(e, a * 50, a * 80, a * 5);
    xd(e, c[9], c[2], a * 4);
    yd(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    xd(e, c[9], c[2], a * 4);
    yd(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    xd(e, c[9], c[2], a * 4);
    return d;
  }
  function Jp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    xd(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    xd(d, Es, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    xd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    xd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    xd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    xd(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    xd(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    xd(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    xd(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    xd(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    xd(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    xd(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    xd(d, b[11]);
    yd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    xd(d, b[12]);
    yd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    xd(d, b[13]);
    yd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    xd(d, b[12]);
    yd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    xd(d, b[13]);
    return c;
  }
  function Mp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    wd(f, 7, b * 60, b * 10);
    f.restore();
    xd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      wd(f, 3, b * 21, b * 4);
      xd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    wd(f, 8, b * 60, b * 10);
    xd(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    wd(f, 8, b * 40, b * 10);
    xd(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    wd(f, 8, b * 28, b * 8);
    xd(f, d[7]);
    f.restore();
    return e;
  }
  function Bp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    xd(d, b[0]);
    return c;
  }
  function Dp(b, c, d) {
    const e = ~(b & 13816) & b | ~(b & 13816) & 13816;
    const f = c ^ 24655;
    const g = (0 << (d >> 8 & 255)) + (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d & 255));
    return ((53605 + (fs(e, f, g, e) ^ Rb(f, 0, e, f))) * 2147483629 + 2147483587) % 2147483647;
  }
  function Ip(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    wd(f, 7, b * 60, b * 10);
    f.restore();
    xd(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      wd(f, 3, b * 21, b * 4);
      xd(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    wd(f, 7, b * 60, b * 10);
    xd(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    wd(f, 7, b * 40, b * 10);
    xd(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    wd(f, 7, b * 23, b * 5);
    f.restore();
    xd(f, d[7]);
    return e;
  }
  function Ep(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    xd(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    xd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    xd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    xd(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    xd(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    xd(e, Sa, c[1], a * 4);
    yd(e, a * 58, a * 50, a * 5);
    xd(e, c[4]);
    yd(e, a * 43, a * 65, a * 5);
    xd(e, c[4]);
    yd(e, a * 58, a * 73, a * 5);
    xd(e, c[4]);
    yd(e, a * 58, a * 50, a * 2);
    xd(e, c[5]);
    yd(e, a * 43, a * 65, a * 2);
    xd(e, c[5]);
    yd(e, a * 58, a * 73, a * 2);
    xd(e, c[5]);
    return d;
  }
  function Qp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      xd(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    xd(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    xd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    xd(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    xd(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    xd(e, b[3], b[3], a * 12);
    return d;
  }
  function _p(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    yd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    xd(g, d[0], d[0], b * 8);
    yd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    xd(g, d[0], d[0], b * 8);
    yd(g, b * 174, b * 87.484375, b * 6);
    xd(g, d[0]);
    yd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    xd(g, d[0], d[0], b * 4);
    yd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    xd(g, d[0], d[0], b * 4);
    yd(g, b * 30, b * 87.484375, b * 6);
    xd(g, d[0]);
    yd(g, b * 100, b * 30, b * 20.8806130178211);
    xd(g, d[0], d[0], b * 4);
    yd(g, b * 100, b * 30, b * 12.165525060596439);
    xd(g, d[0], d[0], b * 4);
    yd(g, b * 100, b * 30, b * 6);
    xd(g, d[0]);
    yd(g, b * 100, b * 130, b * 20.8806130178211);
    xd(g, d[0], d[0], b * 4);
    yd(g, b * 100, b * 130, b * 12.165525060596439);
    xd(g, d[0], d[0], b * 4);
    yd(g, b * 100, b * 130, b * 6);
    xd(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    kd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    xd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    kd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    xd(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    kd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    yd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 174, b * 87.484375, b * 6);
    xd(g, d[2]);
    yd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 30, b * 87.484375, b * 6);
    xd(g, d[2]);
    yd(g, b * 102, b * 30, b * 20.8806130178211);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 102, b * 30, b * 12.165525060596439);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 102, b * 30, b * 6);
    xd(g, d[1]);
    yd(g, b * 102, b * 130, b * 20.8806130178211);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 102, b * 130, b * 12.165525060596439);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 102, b * 130, b * 6);
    xd(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    kd(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    xd(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    kd(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    xd(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    kd(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    xd(g, d[2], d[1], b * 8);
    yd(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 135, b * 107.36605834960938, b * 13);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    xd(g, d[2]);
    yd(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 70, b * 107.36605834960938, b * 13);
    xd(g, d[1], d[3], b * 8);
    yd(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    xd(g, d[2]);
    return f;
  }
  function Fp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    wd(e, 6, a * 40, a * 10);
    e.restore();
    xd(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    wd(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    xd(e, c[2], c[3], a * 5);
    return d;
  }
  function Rp() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; a.length > d; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ΔᐃΔΔΔⲆᐃΔⵠ();
    Ⲇⵠ[1026] = [ΔⲆ.ⵠⲆΔᐃᐃᐃᐃ, ΔⲆ.ΔⵠΔⵠⵠᐃⵠ];
    Ⲇⵠ[1025] = [];
    Ⲇⵠ[1025][xs.ΔΔΔ] = [];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_010_000")] = [ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ᐃⵠⲆⲆⵠ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_010_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("000_010_000")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_011_000")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("000_010_000")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_011_010")] = [ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_011_011")] = [ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_110_000")] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_110_010")] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⲆⲆⵠᐃΔⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_110_110")] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⲆⲆΔᐃᐃΔⵠ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⲆⲆⵠᐃΔⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_111_000")] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_111_111")] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_010_000")] = [ΔⲆ.ᐃⵠⲆⲆⵠ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_010_010")] = [ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_011_000")] = [ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_000")] = [ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")] = [ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_011_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_011_011")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_111_011")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_111_000")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_111_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_111_011")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_111_110")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("010_111_111")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_111_110")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("000_111_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_011_000")] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_011_010")] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_011_011")] = [ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔⵠᐃΔΔ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_000")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("011_011_010")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_010")] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_011")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_010")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_110")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_010")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("011_111_111")] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_110_000")] = [ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠᐃᐃΔΔᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_110_010")] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_110_110")] = [ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_000")] = [ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠᐃᐃΔΔᐃ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_110")] = [ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_111")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_011")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("110_111_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_110")] = [ΔⲆ.ⵠΔᐃⲆⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆᐃ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_011")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_110")];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_000")] = [ΔⲆ.ⲆⵠᐃᐃΔΔᐃ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ⵠⲆⲆⲆΔⲆⵠ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_111")] = [ΔⲆ.ᐃⲆⵠΔΔⲆᐃ, ΔⲆ.ΔΔΔᐃᐃ, ΔⲆ.Ⲇⵠⵠᐃᐃ, ΔⲆ.ᐃⵠⵠᐃⵠⵠⵠ, ΔⲆ.ⲆᐃΔⲆⵠ, ΔⲆ.ⵠΔΔⵠᐃ, ΔⲆ.ⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔΔⲆΔⵠΔ, ΔⲆ.ⵠᐃⲆⵠᐃ, ΔⲆ.ⲆⵠΔᐃⵠΔΔ, ΔⲆ.ΔΔΔⵠᐃΔΔ, ΔⲆ.ᐃⲆⵠⵠⲆΔⵠ, ΔⲆ.ΔᐃⲆᐃΔ, ΔⲆ.ᐃⲆᐃΔᐃᐃᐃ, ΔⲆ.ⵠᐃⵠⵠⵠΔΔ, ΔⲆ.ᐃⵠⲆⲆⵠ, ΔⲆ.ΔΔΔᐃⵠ, ΔⲆ.ⲆⵠⲆᐃⵠⲆΔ, ΔⲆ.ΔᐃⵠᐃΔᐃᐃ, ΔⲆ.ⲆⵠᐃⲆΔᐃᐃ, ΔⲆ.ⲆΔᐃⵠⲆ, ΔⲆ.ΔᐃᐃᐃΔ, ΔⲆ.ⵠΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_010")] = Ⲇⵠ[1025][xs.ΔΔΔ][b("111_111_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_010_000")] = [ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_010_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_010_000")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_011_000")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_010_000")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_011_010")] = [ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_011_011")] = [ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_110_000")] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ΔΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_110_010")] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ΔᐃΔᐃΔΔᐃ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_110_110")] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⵠⵠⵠᐃⵠⲆⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ΔᐃΔᐃΔΔᐃ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_111_000")] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_111_111")] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_010_000")] = [ΔⲆ.ΔΔᐃⲆⲆ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_010_010")] = [ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_011_000")] = [ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_000")] = [ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")] = [ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_011_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_011_011")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_111_011")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_111_000")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_111_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_111_011")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_111_110")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_111_111")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_111_110")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("000_111_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("010_110_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_011_000")] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_011_010")] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_011_011")] = [ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_000")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_011_010")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_010")] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_011")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_010")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_110")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_010")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("011_111_111")] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_110_000")] = [ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠΔΔᐃΔⵠ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_110_010")] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_110_110")] = [ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_000")] = [ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⵠⵠΔΔᐃΔⵠ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_110")] = [ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_111")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_011")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("110_111_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_110")] = [ΔⲆ.ⲆᐃΔΔΔ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ᐃᐃΔᐃΔΔⲆ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_011")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_110")];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_000")] = [ΔⲆ.ⵠⵠΔΔᐃΔⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⲆⵠΔⲆΔⵠ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_111")] = [ΔⲆ.ᐃᐃΔᐃΔΔⲆ, ΔⲆ.ᐃⵠⵠΔΔ, ΔⲆ.ⵠΔᐃⲆΔ, ΔⲆ.ⵠΔⵠΔⵠⲆΔ, ΔⲆ.ⵠᐃⲆΔⵠ, ΔⲆ.ᐃⲆⵠΔᐃ, ΔⲆ.Ⲇᐃⵠᐃⵠ, ΔⲆ.ⲆΔΔⵠⲆΔⲆ, ΔⲆ.ΔⵠΔⲆⵠᐃⵠ, ΔⲆ.ᐃᐃᐃᐃⲆ, ΔⲆ.ⲆΔΔⲆᐃⲆΔ, ΔⲆ.ⲆΔⵠⵠⲆⵠᐃ, ΔⲆ.ⲆΔⵠᐃⵠᐃⲆ, ΔⲆ.ⵠⵠⵠΔᐃ, ΔⲆ.ᐃⲆⲆᐃⲆΔⵠ, ΔⲆ.ⲆᐃΔⵠΔⵠΔ, ΔⲆ.ΔΔᐃⲆⲆ, ΔⲆ.ᐃΔⲆᐃⵠ, ΔⲆ.ⵠΔΔⵠΔⵠⵠ, ΔⲆ.ⲆᐃΔⵠⲆᐃⲆ, ΔⲆ.ᐃⵠΔΔⵠᐃᐃ, ΔⲆ.ΔⵠⲆΔᐃ, ΔⲆ.ΔΔΔΔⵠ, ΔⲆ.ⲆᐃΔΔΔ];
    Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_010")] = Ⲇⵠ[1025][xs.ⵠᐃⲆ][b("111_111_110")];
    Ⲇⵠ[1024] = [];
    Ⲇⵠ[1024][xs.ΔΔΔ] = [];
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_010_000")] = ΔⲆ.ᐃⲆⵠΔᐃⵠᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_010_010")] = ΔⲆ.ᐃⲆⲆΔᐃⵠΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_011_000")] = ΔⲆ.ᐃᐃⵠΔⵠᐃⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_011_010")] = ΔⲆ.ᐃΔⵠⵠΔⵠΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_011_011")] = ΔⲆ.ΔᐃᐃⲆΔⲆᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_110_000")] = ΔⲆ.ᐃⵠⲆΔᐃⵠᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_110_010")] = ΔⲆ.ⵠⲆⲆⵠⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_110_110")] = ΔⲆ.ΔⲆⵠΔⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_111_000")] = ΔⲆ.ᐃΔⵠΔΔⲆⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_111_010")] = ΔⲆ.ⵠᐃⵠᐃⵠⵠᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_111_011")] = ΔⲆ.ⲆΔⵠⲆΔΔΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_111_110")] = ΔⲆ.ᐃᐃⵠⵠΔⲆΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("000_111_111")] = ΔⲆ.ΔΔⲆᐃⲆᐃΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_010_000")] = ΔⲆ.ⲆᐃΔⲆΔⲆⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_010_010")] = ΔⲆ.ᐃᐃΔⲆⵠΔΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_011_000")] = ΔⲆ.ⵠᐃᐃⲆΔᐃΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_011_010")] = ΔⲆ.ΔⵠΔⲆⲆⲆΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_011_011")] = ΔⲆ.ⵠⵠⵠⲆⲆⵠⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_110_000")] = ΔⲆ.ⲆᐃΔⵠⲆⲆΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_110_010")] = ΔⲆ.ⵠᐃⲆᐃⵠᐃᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_110_110")] = ΔⲆ.ⵠΔΔⲆⲆᐃΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_111_000")] = ΔⲆ.ⵠⵠⵠⲆᐃⲆᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_111_010")] = ΔⲆ.ᐃⵠᐃⵠⲆⵠΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_111_011")] = ΔⲆ.ᐃⲆΔΔⵠⲆⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_111_110")] = ΔⲆ.ᐃΔᐃΔΔᐃⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("010_111_111")] = ΔⲆ.ᐃΔᐃⵠⵠΔⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_011_000")] = ΔⲆ.ᐃᐃᐃᐃΔᐃᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_011_010")] = ΔⲆ.ᐃᐃΔᐃⵠⲆⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_011_011")] = ΔⲆ.ⲆⵠΔᐃᐃᐃᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_111_000")] = ΔⲆ.ᐃΔᐃⲆⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_111_010")] = ΔⲆ.ΔΔⲆᐃⲆⲆⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_111_011")] = ΔⲆ.ⲆⲆᐃⵠᐃⲆⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_111_110")] = ΔⲆ.ⵠᐃΔⲆⵠⲆΔ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("011_111_111")] = ΔⲆ.ᐃⵠᐃᐃⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_110_000")] = ΔⲆ.ᐃΔᐃᐃᐃΔⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_110_010")] = ΔⲆ.ⵠᐃⵠⲆⲆⵠᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_110_110")] = ΔⲆ.ⲆᐃⵠΔⲆⵠⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_111_000")] = ΔⲆ.ⵠᐃΔᐃⲆⲆᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_111_010")] = ΔⲆ.ΔᐃΔⲆⲆⲆⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_111_011")] = ΔⲆ.ⵠⵠⲆᐃⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_111_110")] = ΔⲆ.ⲆⵠΔⵠⲆⲆⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("110_111_111")] = ΔⲆ.ΔᐃΔⵠⵠᐃⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("111_111_011")] = ΔⲆ.ᐃᐃⲆΔᐃⵠᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("111_111_110")] = ΔⲆ.ᐃⵠΔΔΔⲆⵠ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("111_111_011")] = ΔⲆ.ᐃᐃⲆΔᐃⵠᐃ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("111_111_000")] = ΔⲆ.ⵠᐃΔⲆⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("111_111_111")] = ΔⲆ.ⲆⵠⵠⵠⵠΔⲆ;
    Ⲇⵠ[1024][xs.ΔΔΔ][b("111_111_010")] = ΔⲆ.ᐃⵠᐃⵠΔⵠᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_010_000")] = ΔⲆ.ᐃⲆⵠΔᐃⵠΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_010_010")] = ΔⲆ.ᐃᐃⵠⵠᐃᐃΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_011_000")] = ΔⲆ.ᐃΔⵠⲆᐃΔΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_011_010")] = ΔⲆ.ⲆΔⵠΔⵠΔΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_011_011")] = ΔⲆ.ΔⲆⲆⲆΔⲆΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_110_000")] = ΔⲆ.ΔᐃⲆΔΔᐃⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_110_010")] = ΔⲆ.ⲆΔⵠⲆⵠΔⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_110_110")] = ΔⲆ.ΔΔⲆⵠⲆⵠⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_111_000")] = ΔⲆ.ⲆⲆᐃᐃΔᐃΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_111_010")] = ΔⲆ.ΔΔⲆⲆⵠⵠΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_111_011")] = ΔⲆ.ΔⲆⲆⲆΔⲆᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_111_110")] = ΔⲆ.ᐃᐃⲆΔⵠΔΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("000_111_111")] = ΔⲆ.ⲆΔⵠⲆⲆᐃᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_010_000")] = ΔⲆ.ΔᐃⲆⵠⲆΔᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_010_010")] = ΔⲆ.ⵠⵠⵠⲆⲆΔⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_011_000")] = ΔⲆ.ᐃⵠⵠⲆΔᐃΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_011_010")] = ΔⲆ.ⵠΔⲆⲆᐃⵠΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_011_011")] = ΔⲆ.ᐃᐃⵠᐃⵠⲆΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_110_000")] = ΔⲆ.ⲆⲆᐃⵠⵠᐃⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_110_010")] = ΔⲆ.ⲆⵠᐃⲆⲆⵠⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_110_110")] = ΔⲆ.ⵠᐃⲆⵠⲆΔΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_111_000")] = ΔⲆ.ᐃΔⵠⲆⵠⵠᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_111_010")] = ΔⲆ.ⵠΔᐃΔᐃΔᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_111_011")] = ΔⲆ.ⵠⲆⲆⵠᐃᐃⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_111_110")] = ΔⲆ.ᐃⲆᐃⵠΔᐃᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("010_111_111")] = ΔⲆ.ⵠⵠΔⵠᐃΔΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_011_000")] = ΔⲆ.ⲆⲆⲆΔⵠⵠᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_011_010")] = ΔⲆ.ⵠⵠΔᐃᐃᐃᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_011_011")] = ΔⲆ.ⵠⲆΔⲆᐃⵠⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_111_000")] = ΔⲆ.ΔⲆⲆᐃⵠⲆᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_111_010")] = ΔⲆ.ΔΔⵠΔⲆⵠⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_111_011")] = ΔⲆ.ⲆᐃᐃⵠⲆⲆᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_111_110")] = ΔⲆ.ⵠⲆⵠⲆΔⵠΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("011_111_111")] = ΔⲆ.ⵠⲆⵠⵠΔᐃⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_110_000")] = ΔⲆ.ΔᐃⵠΔⲆⵠΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_110_010")] = ΔⲆ.ⵠᐃΔᐃΔᐃⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_110_110")] = ΔⲆ.Ⲇⵠᐃⵠᐃᐃᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_111_000")] = ΔⲆ.ᐃΔⲆⵠⲆΔΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_111_010")] = ΔⲆ.ᐃⲆᐃⲆᐃⵠⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_111_011")] = ΔⲆ.ⲆᐃΔᐃΔⵠᐃ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_111_110")] = ΔⲆ.ⵠⵠⲆᐃΔⲆⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("110_111_111")] = ΔⲆ.ⲆΔⵠᐃⲆⵠΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("111_111_011")] = ΔⲆ.ⵠⵠΔⵠΔᐃΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("111_111_110")] = ΔⲆ.ᐃⵠⵠᐃᐃᐃⵠ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("111_111_011")] = ΔⲆ.ⵠⵠΔⵠΔᐃΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("111_111_000")] = ΔⲆ.ΔᐃⲆΔΔΔⲆ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("111_111_111")] = ΔⲆ.ⲆⲆⵠᐃᐃⲆΔ;
    Ⲇⵠ[1024][xs.ⵠᐃⲆ][b("111_111_010")] = ΔⲆ.ᐃΔᐃⲆᐃᐃⵠ;
    Ⲇⵠ[32] = [];
    Ⲇⵠ[32][xs.ΔΔΔ] = ΔⲆ.ΔΔⲆⵠᐃⲆⲆ;
    Ⲇⵠ[32][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⵠΔⲆΔⵠ;
    Ⲇⵠ[205] = [];
    Ⲇⵠ[205][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃⵠΔΔ;
    Ⲇⵠ[205][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆΔΔΔ;
    Ⲇⵠ[957] = [];
    Ⲇⵠ[957][xs.ΔΔΔ] = ΔⲆ.ⵠᐃⲆⵠᐃΔᐃ;
    Ⲇⵠ[957][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔᐃᐃᐃΔ;
    Ⲇⵠ[207] = [];
    Ⲇⵠ[207][xs.ΔΔΔ] = ΔⲆ.ΔⵠⵠⵠⵠⲆΔ;
    Ⲇⵠ[207][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆᐃⲆⲆⲆΔ;
    Ⲇⵠ[954] = [];
    Ⲇⵠ[954][xs.ΔΔΔ] = ΔⲆ.ΔᐃⲆᐃᐃᐃⵠ;
    Ⲇⵠ[954][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆΔΔΔΔΔ;
    Ⲇⵠ[958] = [];
    Ⲇⵠ[958][xs.ΔΔΔ] = ΔⲆ.ⵠΔΔΔΔΔΔ;
    Ⲇⵠ[958][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆΔΔⵠⵠ;
    Ⲇⵠ[209] = [];
    Ⲇⵠ[209][xs.ΔΔΔ] = ΔⲆ.Ⲇⵠᐃⵠⵠᐃᐃ;
    Ⲇⵠ[209][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠΔⵠⲆΔ;
    Ⲇⵠ[971] = [];
    Ⲇⵠ[971][xs.ΔΔΔ] = ΔⲆ.ⵠΔⵠⲆᐃⵠⲆ;
    Ⲇⵠ[971][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⲆᐃⵠᐃⲆ;
    Ⲇⵠ[211] = [];
    Ⲇⵠ[211][xs.ΔΔΔ] = ΔⲆ.ΔΔΔΔᐃⵠᐃ;
    Ⲇⵠ[211][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⵠⵠᐃⲆᐃ;
    Ⲇⵠ[986] = [];
    Ⲇⵠ[986][xs.ΔΔΔ] = ΔⲆ.ⵠⵠᐃΔᐃⵠⲆ;
    Ⲇⵠ[986][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔᐃΔⲆⵠᐃ;
    Ⲇⵠ[989] = [];
    Ⲇⵠ[989][xs.ΔΔΔ] = [ΔⲆ.ΔᐃⲆᐃⵠⲆᐃ];
    Ⲇⵠ[989][xs.ⵠᐃⲆ] = [ΔⲆ.ᐃⵠⲆⲆᐃᐃᐃ];
    Ⲇⵠ[217] = [];
    Ⲇⵠ[217][xs.ΔΔΔ] = ΔⲆ.ΔΔⲆᐃⲆᐃⲆ;
    Ⲇⵠ[217][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆⲆΔⲆΔ;
    Ⲇⵠ[219] = [];
    Ⲇⵠ[219][xs.ΔΔΔ] = ΔⲆ.ᐃⵠⵠⵠⲆΔᐃ;
    Ⲇⵠ[219][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆⵠⵠⲆᐃ;
    Ⲇⵠ[218] = [];
    Ⲇⵠ[218][xs.ΔΔΔ] = ΔⲆ.ⲆⵠᐃⵠⵠⲆⵠ;
    Ⲇⵠ[218][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⲆⵠⵠΔ;
    Ⲇⵠ[212] = [];
    Ⲇⵠ[212][xs.ΔΔΔ] = ΔⲆ.ᐃⲆᐃⵠⵠⲆᐃ;
    Ⲇⵠ[212][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔΔⵠⲆⲆ;
    Ⲇⵠ[213] = [];
    Ⲇⵠ[213][xs.ΔΔΔ] = ΔⲆ.ⲆᐃⵠⲆᐃⲆᐃ;
    Ⲇⵠ[213][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔΔᐃᐃᐃⲆ;
    Ⲇⵠ[214] = [];
    Ⲇⵠ[214][xs.ΔΔΔ] = ΔⲆ.ΔΔⵠⵠΔⲆⵠ;
    Ⲇⵠ[214][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆᐃΔΔⲆⵠ;
    Ⲇⵠ[215] = [];
    Ⲇⵠ[215][xs.ΔΔΔ] = ΔⲆ.ⵠⲆΔᐃⲆᐃⵠ;
    Ⲇⵠ[215][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠᐃⵠⲆⲆΔ;
    Ⲇⵠ[216] = [];
    Ⲇⵠ[216][xs.ΔΔΔ] = ΔⲆ.ᐃΔⵠⵠΔⲆΔ;
    Ⲇⵠ[216][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⵠⵠⵠⲆΔ;
    Ⲇⵠ[220] = [];
    Ⲇⵠ[220][xs.ΔΔΔ] = ΔⲆ.ⵠⵠⲆⵠΔΔΔ;
    Ⲇⵠ[220][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⵠⲆΔᐃᐃ;
    Ⲇⵠ[1020] = [];
    Ⲇⵠ[1020][xs.ΔΔΔ] = ΔⲆ.ΔⵠⲆⵠᐃᐃΔ;
    Ⲇⵠ[1020][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆᐃΔΔΔ;
    Ⲇⵠ[1021] = [];
    Ⲇⵠ[1021][xs.ΔΔΔ] = ΔⲆ.ⵠΔᐃᐃⲆⲆⲆ;
    Ⲇⵠ[1021][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆᐃᐃⵠᐃ;
    Ⲇⵠ[39] = [];
    Ⲇⵠ[39][xs.ΔΔΔ] = ΔⲆ.ⲆⲆΔᐃᐃᐃⲆ;
    Ⲇⵠ[39][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃᐃⲆΔᐃᐃ;
    Ⲇⵠ[1022] = ΔⲆ.ⲆᐃⲆΔⲆᐃⵠ;
    Ⲇⵠ[1023] = ΔⲆ.ᐃⲆⲆᐃⲆⵠⲆ;
    Ⲇⵠ[1041] = [];
    Ⲇⵠ[1041][xs.ΔΔΔ] = [];
    Ⲇⵠ[1041][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[1041][xs.ΔΔΔ].push(ΔⲆ.ᐃΔΔⵠⲆΔᐃ);
    Ⲇⵠ[1041][xs.ΔΔΔ].push(ΔⲆ.ⵠᐃΔⵠᐃᐃΔ);
    Ⲇⵠ[1041][xs.ΔΔΔ].push(ΔⲆ.ⲆⲆⲆᐃᐃΔᐃ);
    Ⲇⵠ[1041][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃᐃⵠⵠⵠΔⲆ);
    Ⲇⵠ[1041][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆⲆⵠⵠⲆΔⵠ);
    Ⲇⵠ[1041][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆⲆⵠᐃⲆⵠⵠ);
    Ⲇⵠ[244] = [];
    Ⲇⵠ[244][xs.ΔΔΔ] = [];
    Ⲇⵠ[244][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[244][xs.ΔΔΔ].push(ΔⲆ.ΔⵠⲆΔᐃΔΔ);
    Ⲇⵠ[244][xs.ΔΔΔ].push(ΔⲆ.ⲆⵠᐃⵠⲆⵠⲆ);
    Ⲇⵠ[244][xs.ΔΔΔ].push(ΔⲆ.ΔᐃⵠΔⵠᐃΔ);
    Ⲇⵠ[244][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆⲆΔⵠΔⵠⵠ);
    Ⲇⵠ[244][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃⲆΔᐃⵠⵠΔ);
    Ⲇⵠ[244][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃⵠⲆᐃᐃΔ);
    Ⲇⵠ[1052] = [];
    Ⲇⵠ[1052][xs.ΔΔΔ] = [];
    Ⲇⵠ[1052][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[1052][xs.ΔΔΔ].push(ΔⲆ.ΔⵠΔⵠᐃⵠᐃ);
    Ⲇⵠ[1052][xs.ΔΔΔ].push(ΔⲆ.ᐃⲆΔᐃⵠᐃⵠ);
    Ⲇⵠ[1052][xs.ΔΔΔ].push(ΔⲆ.ΔⵠⵠΔΔᐃΔ);
    Ⲇⵠ[1052][xs.ΔΔΔ].push(ΔⲆ.ⲆΔΔΔΔⲆⲆ);
    Ⲇⵠ[1052][xs.ΔΔΔ].push(ΔⲆ.ⵠⲆⲆΔⲆⵠⵠ);
    Ⲇⵠ[1052][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃᐃΔⵠΔᐃ);
    Ⲇⵠ[1052][xs.ⵠᐃⲆ].push(ΔⲆ.ΔΔⲆⲆⲆⵠΔ);
    Ⲇⵠ[1052][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠΔⵠⲆⲆΔ);
    Ⲇⵠ[1052][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⲆΔⲆΔⲆⲆ);
    Ⲇⵠ[1052][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⲆⲆΔⵠΔᐃ);
    Ⲇⵠ[450] = [];
    Ⲇⵠ[450][xs.ΔΔΔ] = ΔⲆ.ⵠⲆΔⲆΔⵠⲆ;
    Ⲇⵠ[450][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆᐃΔᐃΔⵠ;
    Ⲇⵠ[453] = [];
    Ⲇⵠ[453][xs.ΔΔΔ] = ΔⲆ.ⲆΔⵠⵠΔⲆⲆ;
    Ⲇⵠ[453][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔᐃᐃΔᐃⲆ;
    Ⲇⵠ[454] = [];
    Ⲇⵠ[454][xs.ΔΔΔ] = ΔⲆ.ⵠⵠᐃᐃΔⵠᐃ;
    Ⲇⵠ[454][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠᐃⵠⵠⵠⲆ;
    Ⲇⵠ[464] = ΔⲆ.ⲆΔⵠᐃⵠⵠᐃ;
    Ⲇⵠ[468] = ΔⲆ.ΔⲆᐃⵠⲆᐃⲆ;
    Ⲇⵠ[469] = ΔⲆ.ΔⲆΔⵠⲆΔΔ;
    Ⲇⵠ[20] = [];
    Ⲇⵠ[20][xs.ΔΔΔ] = ΔⲆ.ⵠᐃᐃᐃⲆᐃᐃ;
    Ⲇⵠ[20][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆΔΔΔᐃ;
    Ⲇⵠ[920] = [];
    Ⲇⵠ[920][xs.ΔΔΔ] = ΔⲆ.ᐃΔᐃᐃᐃⵠⲆ;
    Ⲇⵠ[920][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆΔⵠⵠ;
    Ⲇⵠ[21] = [];
    Ⲇⵠ[21][xs.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠⲆΔᐃ;
    Ⲇⵠ[21][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔᐃⵠᐃᐃᐃ;
    Ⲇⵠ[924] = [];
    Ⲇⵠ[924][xs.ΔΔΔ] = ΔⲆ.ᐃΔᐃᐃᐃⵠⲆ;
    Ⲇⵠ[924][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆΔⵠⵠ;
    Ⲇⵠ[44] = [];
    Ⲇⵠ[44][xs.ΔΔΔ] = ΔⲆ.ΔⲆᐃΔᐃΔⲆ;
    Ⲇⵠ[44][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⵠⲆⵠⲆΔ;
    Ⲇⵠ[19] = [];
    Ⲇⵠ[19][xs.ΔΔΔ] = ΔⲆ.ⵠⵠΔΔⲆᐃⲆ;
    Ⲇⵠ[19][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆⵠᐃⲆᐃ;
    Ⲇⵠ[34] = [];
    Ⲇⵠ[34][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃᐃΔᐃ;
    Ⲇⵠ[34][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔⵠⵠᐃΔ;
    Ⲇⵠ[17] = [];
    Ⲇⵠ[17][xs.ΔΔΔ] = ΔⲆ.ⵠⵠⲆⲆⵠᐃᐃ;
    Ⲇⵠ[17][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⵠⲆⲆΔΔ;
    Ⲇⵠ[63] = [];
    Ⲇⵠ[63][xs.ΔΔΔ] = ΔⲆ.ᐃⲆⲆⵠⵠⲆⲆ;
    Ⲇⵠ[63][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔΔⲆᐃᐃΔ;
    Ⲇⵠ[60] = [];
    Ⲇⵠ[60][xs.ΔΔΔ] = ΔⲆ.ⵠΔⲆⲆⲆΔⲆ;
    Ⲇⵠ[60][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⲆⵠⲆⲆ;
    Ⲇⵠ[94] = [];
    Ⲇⵠ[94][xs.ΔΔΔ] = ΔⲆ.ⵠⵠΔⲆⲆΔΔ;
    Ⲇⵠ[94][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆᐃΔΔⲆ;
    Ⲇⵠ[95] = [];
    Ⲇⵠ[95][xs.ΔΔΔ] = ΔⲆ.ⲆⲆΔΔⵠⵠΔ;
    Ⲇⵠ[95][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆⵠⲆⵠⲆ;
    Ⲇⵠ[96] = [];
    Ⲇⵠ[96][xs.ΔΔΔ] = ΔⲆ.ⵠΔΔΔᐃⲆΔ;
    Ⲇⵠ[96][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆΔΔⲆⲆ;
    Ⲇⵠ[97] = [];
    Ⲇⵠ[97][xs.ΔΔΔ] = ΔⲆ.ᐃᐃⲆΔⲆᐃΔ;
    Ⲇⵠ[97][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆᐃᐃᐃᐃ;
    Ⲇⵠ[98] = [];
    Ⲇⵠ[98][xs.ΔΔΔ] = ΔⲆ.ⲆᐃΔᐃΔΔⵠ;
    Ⲇⵠ[98][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆᐃΔⲆⲆΔⲆ;
    Ⲇⵠ[99] = [];
    Ⲇⵠ[99][xs.ΔΔΔ] = ΔⲆ.ⵠΔΔⵠⲆΔⲆⲆⲆ;
    Ⲇⵠ[99][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⵠⵠⲆᐃΔⵠ;
    Ⲇⵠ[90] = [];
    Ⲇⵠ[90][xs.ΔΔΔ] = ΔⲆ.ᐃΔⲆΔⵠⵠⲆ;
    Ⲇⵠ[90][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⵠⵠⲆᐃⵠ;
    Ⲇⵠ[91] = [];
    Ⲇⵠ[91][xs.ΔΔΔ] = ΔⲆ.ΔⲆⲆⵠᐃⵠⲆ;
    Ⲇⵠ[91][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃⲆⲆΔᐃ;
    Ⲇⵠ[71] = [];
    Ⲇⵠ[71][xs.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠⵠᐃᐃⲆΔ;
    Ⲇⵠ[71][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⵠᐃⲆΔΔᐃΔ;
    Ⲇⵠ[72] = [];
    Ⲇⵠ[72][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠΔⵠᐃᐃΔ;
    Ⲇⵠ[72][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔΔⵠⵠⵠⵠⵠᐃ;
    Ⲇⵠ[73] = [];
    Ⲇⵠ[73][xs.ΔΔΔ] = ΔⲆ.ΔΔΔⵠⲆⵠΔⵠⵠ;
    Ⲇⵠ[73][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃⲆΔⲆⲆᐃΔΔ;
    Ⲇⵠ[74] = [];
    Ⲇⵠ[74][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔⲆᐃⲆᐃⲆΔ;
    Ⲇⵠ[74][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠΔΔⵠᐃⲆᐃⵠ;
    Ⲇⵠ[75] = [];
    Ⲇⵠ[75][xs.ΔΔΔ] = ΔⲆ.ⵠᐃᐃⵠⵠᐃΔΔⲆ;
    Ⲇⵠ[75][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃΔᐃⵠΔΔⵠΔ;
    Ⲇⵠ[76] = [];
    Ⲇⵠ[76][xs.ΔΔΔ] = ΔⲆ.ΔⲆᐃᐃⲆⲆᐃⲆΔ;
    Ⲇⵠ[76][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆⵠᐃᐃⵠⵠᐃ;
    Ⲇⵠ[101] = [];
    Ⲇⵠ[101][xs.ΔΔΔ] = ΔⲆ.ΔⵠⵠⲆᐃᐃᐃ;
    Ⲇⵠ[101][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆⲆΔΔⵠ;
    Ⲇⵠ[64] = [];
    Ⲇⵠ[64][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔᐃⵠⲆΔ;
    Ⲇⵠ[64][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⵠΔⵠᐃᐃ;
    Ⲇⵠ[102] = [];
    Ⲇⵠ[102][xs.ΔΔΔ] = ΔⲆ.ΔⲆⲆᐃⲆⵠΔ;
    Ⲇⵠ[102][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠᐃⲆⵠⲆΔ;
    Ⲇⵠ[65] = [];
    Ⲇⵠ[65][xs.ΔΔΔ] = ΔⲆ.ᐃⵠᐃⵠΔⲆᐃ;
    Ⲇⵠ[65][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆΔⵠⲆⲆ;
    Ⲇⵠ[103] = [];
    Ⲇⵠ[103][xs.ΔΔΔ] = ΔⲆ.ᐃⵠⵠⲆⲆᐃⵠ;
    Ⲇⵠ[103][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃΔᐃⲆⵠ;
    Ⲇⵠ[66] = [];
    Ⲇⵠ[66][xs.ΔΔΔ] = ΔⲆ.ΔⵠΔⲆᐃᐃⲆ;
    Ⲇⵠ[66][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⵠᐃᐃᐃⲆ;
    Ⲇⵠ[104] = [];
    Ⲇⵠ[104][xs.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠᐃᐃΔ;
    Ⲇⵠ[104][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃΔᐃᐃⵠᐃ;
    Ⲇⵠ[67] = [];
    Ⲇⵠ[67][xs.ΔΔΔ] = ΔⲆ.ΔΔΔⲆⲆᐃᐃ;
    Ⲇⵠ[67][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⵠⵠⵠΔ;
    Ⲇⵠ[105] = [];
    Ⲇⵠ[105][xs.ΔΔΔ] = ΔⲆ.Δⵠⵠⵠᐃᐃᐃ;
    Ⲇⵠ[105][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆⲆⵠᐃΔ;
    Ⲇⵠ[68] = [];
    Ⲇⵠ[68][xs.ΔΔΔ] = ΔⲆ.ⲆΔΔⵠΔᐃᐃ;
    Ⲇⵠ[68][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔⵠΔᐃᐃᐃ;
    Ⲇⵠ[106] = [];
    Ⲇⵠ[106][xs.ΔΔΔ] = ΔⲆ.ΔⲆⵠΔⵠΔΔ;
    Ⲇⵠ[106][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆΔΔⲆᐃ;
    Ⲇⵠ[69] = [];
    Ⲇⵠ[69][xs.ΔΔΔ] = ΔⲆ.ⵠΔⲆⲆⲆⲆᐃ;
    Ⲇⵠ[69][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔⵠⲆᐃⵠⲆ;
    Ⲇⵠ[107] = [];
    Ⲇⵠ[107][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⵠᐃΔⲆΔ;
    Ⲇⵠ[107][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔⵠⵠⲆⲆⲆ;
    Ⲇⵠ[70] = [];
    Ⲇⵠ[70][xs.ΔΔΔ] = ΔⲆ.ΔⵠⵠᐃΔⲆⵠ;
    Ⲇⵠ[70][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃⵠᐃⲆⲆⵠ;
    Ⲇⵠ[80] = [];
    Ⲇⵠ[80][xs.ΔΔΔ] = ΔⲆ.ⲆⵠΔⲆΔⵠΔ;
    Ⲇⵠ[80][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⵠⲆⲆΔ;
    Ⲇⵠ[81] = [];
    Ⲇⵠ[81][xs.ΔΔΔ] = ΔⲆ.ΔⵠΔᐃΔΔΔ;
    Ⲇⵠ[81][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠⲆⵠⲆΔ;
    Ⲇⵠ[22] = [];
    Ⲇⵠ[22][xs.ΔΔΔ] = ΔⲆ.ⲆΔᐃⲆⲆⵠⵠ;
    Ⲇⵠ[22][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔⵠᐃⵠΔⵠ;
    Ⲇⵠ[928] = [];
    Ⲇⵠ[928][xs.ΔΔΔ] = ΔⲆ.ⵠᐃⲆΔΔⵠⲆ;
    Ⲇⵠ[928][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠᐃⵠⵠΔᐃ;
    Ⲇⵠ[935] = [];
    Ⲇⵠ[935][xs.ΔΔΔ] = [];
    Ⲇⵠ[935][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[935][xs.ΔΔΔ].push(ΔⲆ.ⲆΔᐃΔᐃⲆⲆΔⵠ);
    Ⲇⵠ[935][xs.ΔΔΔ].push(ΔⲆ.ᐃⵠⵠⵠⲆᐃΔΔᐃ);
    Ⲇⵠ[935][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠⵠⵠⲆᐃΔΔᐃ);
    Ⲇⵠ[935][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠΔΔΔΔⲆⵠΔΔ);
    Ⲇⵠ[941] = [];
    Ⲇⵠ[941][xs.ΔΔΔ] = [];
    Ⲇⵠ[941][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[941][xs.ΔΔΔ].push(ΔⲆ.ΔⵠⲆΔⲆᐃⵠ);
    Ⲇⵠ[941][xs.ΔΔΔ].push(ΔⲆ.ΔΔⲆᐃᐃᐃⲆ);
    Ⲇⵠ[941][xs.ΔΔΔ].push(ΔⲆ.ⵠⲆⵠᐃᐃΔΔ);
    Ⲇⵠ[941][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⲆⲆᐃⵠΔⲆ);
    Ⲇⵠ[941][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠⵠⲆⵠᐃΔΔ);
    Ⲇⵠ[941][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⵠⲆᐃⵠⲆⲆ);
    Ⲇⵠ[53] = [];
    Ⲇⵠ[53][xs.ΔΔΔ] = ΔⲆ.ᐃⲆᐃᐃⵠⲆᐃ;
    Ⲇⵠ[53][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⲆΔΔⵠΔ;
    Ⲇⵠ[54] = [];
    Ⲇⵠ[54][xs.ΔΔΔ] = ΔⲆ.ᐃⲆᐃⵠⵠΔⲆ;
    Ⲇⵠ[54][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⵠⵠᐃⲆᐃ;
    Ⲇⵠ[241] = [];
    Ⲇⵠ[241][xs.ΔΔΔ] = [];
    Ⲇⵠ[241][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[241][xs.ΔΔΔ].push(ΔⲆ.ΔΔⲆΔⲆΔΔ);
    Ⲇⵠ[241][xs.ΔΔΔ].push(ΔⲆ.ⵠⵠⵠⲆᐃⵠⲆ);
    Ⲇⵠ[241][xs.ΔΔΔ].push(ΔⲆ.ⲆⲆΔᐃⲆΔⲆ);
    Ⲇⵠ[241][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃⲆⵠⵠⵠⲆⲆ);
    Ⲇⵠ[241][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆⵠᐃΔⵠᐃΔ);
    Ⲇⵠ[241][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆᐃᐃΔⲆᐃⲆ);
    Ⲇⵠ[202] = [];
    Ⲇⵠ[202][xs.ΔΔΔ] = [];
    Ⲇⵠ[202][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[202][xs.ΔΔΔ].push(ΔⲆ.ᐃᐃΔⵠⵠⲆΔ);
    Ⲇⵠ[202][xs.ΔΔΔ].push(ΔⲆ.ⵠⲆⲆⲆⵠⵠⲆ);
    Ⲇⵠ[202][xs.ΔΔΔ].push(ΔⲆ.ᐃΔΔᐃΔⵠΔ);
    Ⲇⵠ[202][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⲆΔⲆΔⵠⲆ);
    Ⲇⵠ[202][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠⵠⲆⵠⵠΔᐃ);
    Ⲇⵠ[202][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃⵠΔᐃⲆᐃ);
    Ⲇⵠ[203] = [];
    Ⲇⵠ[203][xs.ΔΔΔ] = [];
    Ⲇⵠ[203][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[203][xs.ΔΔΔ].push(ΔⲆ.ᐃΔⲆⵠᐃⲆΔ);
    Ⲇⵠ[203][xs.ΔΔΔ].push(ΔⲆ.ΔⵠⲆΔΔⲆⲆ);
    Ⲇⵠ[203][xs.ΔΔΔ].push(ΔⲆ.ⵠΔᐃΔⲆᐃⲆ);
    Ⲇⵠ[203][xs.ΔΔΔ].push(ΔⲆ.ΔᐃᐃΔⵠⵠᐃ);
    Ⲇⵠ[203][xs.ΔΔΔ].push(ΔⲆ.ⵠⵠΔᐃΔⲆᐃ);
    Ⲇⵠ[203][xs.ΔΔΔ].push(ΔⲆ.ΔⲆⲆᐃΔᐃⲆ);
    Ⲇⵠ[203][xs.ⵠᐃⲆ].push(ΔⲆ.ΔΔΔΔⲆᐃⲆ);
    Ⲇⵠ[203][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⲆⵠΔᐃᐃΔ);
    Ⲇⵠ[203][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆⵠᐃⲆᐃΔⵠ);
    Ⲇⵠ[203][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⵠⵠᐃΔΔΔ);
    Ⲇⵠ[203][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠⲆⵠⲆΔⵠᐃ);
    Ⲇⵠ[203][xs.ⵠᐃⲆ].push(ΔⲆ.ΔΔᐃᐃⵠΔⲆ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ] = [];
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ] = [];
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ].push(ΔⲆ.ⲆΔΔΔΔΔⵠ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ].push(ΔⲆ.ⲆⵠΔᐃⲆᐃⲆ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ].push(ΔⲆ.ᐃⵠΔᐃⵠᐃⲆ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ].push(ΔⲆ.ᐃᐃⲆⵠⵠΔΔ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ].push(ΔⲆ.ⲆⲆⵠⵠΔⲆᐃ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ΔΔΔ].push(ΔⲆ.ᐃᐃᐃⲆⲆᐃᐃ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ].push(ΔⲆ.ΔΔΔᐃⵠΔΔ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⵠΔⲆᐃⵠᐃ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠᐃⵠΔⵠⲆⲆ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ].push(ΔⲆ.ΔΔⲆΔᐃⲆⵠ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃΔΔⵠΔⵠⵠ);
    Ⲇⵠ[xs.ⲆⵠⵠΔΔ][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⲆᐃⲆⵠΔⲆ);
    Ⲇⵠ[918] = [];
    Ⲇⵠ[918][xs.ΔΔΔ] = ΔⲆ.ⲆᐃⲆΔⵠⵠᐃ;
    Ⲇⵠ[918][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠΔⵠⵠⲆⵠ;
    Ⲇⵠ[919] = ΔⲆ.ⲆⲆΔⵠⲆⲆⵠ;
    Ⲇⵠ[56] = [];
    Ⲇⵠ[56][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠᐃᐃᐃᐃⵠ;
    Ⲇⵠ[56][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆᐃΔᐃⵠⲆⲆ;
    Ⲇⵠ[223] = [];
    Ⲇⵠ[223][xs.ΔΔΔ] = ΔⲆ.ᐃΔᐃᐃᐃΔⲆ;
    Ⲇⵠ[223][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔΔⵠⲆΔⵠ;
    Ⲇⵠ[224] = [];
    Ⲇⵠ[224][xs.ΔΔΔ] = ΔⲆ.ᐃᐃΔⲆⵠⵠΔ;
    Ⲇⵠ[224][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆᐃⲆᐃᐃΔ;
    Ⲇⵠ[236] = [];
    Ⲇⵠ[236][xs.ΔΔΔ] = ΔⲆ.ⲆⵠⲆᐃᐃⲆΔ;
    Ⲇⵠ[236][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃΔⵠⲆⵠᐃ;
    Ⲇⵠ[1033] = [];
    Ⲇⵠ[1033][xs.ΔΔΔ] = ΔⲆ.ᐃᐃΔⵠᐃⲆⲆ;
    Ⲇⵠ[1033][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆᐃΔᐃⲆⵠ;
    Ⲇⵠ[1034] = ΔⲆ.ᐃᐃⲆⵠⲆᐃᐃ;
    Ⲇⵠ[1150] = [];
    Ⲇⵠ[1150][xs.ΔΔΔ] = ΔⲆ.ΔⲆⵠᐃᐃⵠΔ;
    Ⲇⵠ[1150][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔⵠΔᐃᐃ;
    Ⲇⵠ[1152] = [];
    Ⲇⵠ[1152][xs.ΔΔΔ] = ΔⲆ.ⵠⲆⲆᐃⲆⲆⲆ;
    Ⲇⵠ[1152][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆⲆᐃⵠ;
    Ⲇⵠ[1149] = ΔⲆ.ⲆΔⲆⵠΔΔᐃ;
    Ⲇⵠ[1151] = ΔⲆ.ᐃⵠΔⲆᐃⵠⵠ;
    Ⲇⵠ[1153] = ΔⲆ.ΔᐃΔⲆᐃⵠΔ;
    Ⲇⵠ[1143] = [];
    Ⲇⵠ[1143][xs.ΔΔΔ] = ΔⲆ.ΔⲆⲆΔⵠⲆᐃ;
    Ⲇⵠ[1143][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔⲆⵠⲆΔⲆ;
    Ⲇⵠ[1145] = [];
    Ⲇⵠ[1145][xs.ΔΔΔ] = ΔⲆ.ΔᐃᐃⵠΔᐃᐃ;
    Ⲇⵠ[1145][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆΔⵠΔⲆ;
    Ⲇⵠ[1146] = [];
    Ⲇⵠ[1146][xs.ΔΔΔ] = ΔⲆ.ⲆⲆᐃⵠᐃⲆᐃ;
    Ⲇⵠ[1146][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⲆⲆⲆⵠΔ;
    Ⲇⵠ[1144] = ΔⲆ.ⲆΔᐃⵠᐃⲆΔ;
    Ⲇⵠ[1148] = ΔⲆ.ⲆⵠᐃᐃᐃᐃΔ;
    Ⲇⵠ[1147] = ΔⲆ.ᐃⲆⲆΔⵠⵠⵠ;
    Ⲇⵠ[1053] = [];
    Ⲇⵠ[1053][xs.ΔΔΔ] = ΔⲆ.ⵠⵠⵠΔᐃᐃⵠ;
    Ⲇⵠ[1053][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⵠⵠΔⵠ;
    Ⲇⵠ[1055] = [];
    Ⲇⵠ[1055][xs.ΔΔΔ] = ΔⲆ.ⵠⲆΔⵠΔⲆᐃ;
    Ⲇⵠ[1055][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔᐃΔᐃⵠ;
    Ⲇⵠ[231] = [];
    Ⲇⵠ[231][xs.ΔΔΔ] = ΔⲆ.ᐃⵠᐃᐃⵠᐃⵠ;
    Ⲇⵠ[231][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃΔᐃⲆΔⲆ;
    Ⲇⵠ[1060] = [];
    Ⲇⵠ[1060][xs.ΔΔΔ] = ΔⲆ.ⲆⵠⲆⲆΔⲆΔ;
    Ⲇⵠ[1060][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔᐃᐃᐃⲆ;
    Ⲇⵠ[1063] = [];
    Ⲇⵠ[1063][xs.ΔΔΔ] = ΔⲆ.ⵠⲆΔΔⵠΔⵠ;
    Ⲇⵠ[1063][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔᐃⲆⲆᐃ;
    Ⲇⵠ[1059] = [];
    Ⲇⵠ[1059][xs.ΔΔΔ] = ΔⲆ.ⵠᐃᐃΔᐃᐃⲆ;
    Ⲇⵠ[1059][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⵠⵠⲆᐃⲆΔ;
    Ⲇⵠ[1062] = [];
    Ⲇⵠ[1062][xs.ΔΔΔ] = ΔⲆ.ⲆⵠΔⵠⵠᐃᐃ;
    Ⲇⵠ[1062][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠᐃΔΔᐃⵠ;
    Ⲇⵠ[1056] = ΔⲆ.ⵠᐃΔᐃΔⲆΔ;
    Ⲇⵠ[1057] = ΔⲆ.ⵠΔᐃⵠⵠⵠⵠ;
    Ⲇⵠ[1058] = ΔⲆ.ⲆⵠⲆⵠΔⲆⵠ;
    Ⲇⵠ[1065] = ΔⲆ.ⵠⵠⲆⲆᐃΔᐃ;
    Ⲇⵠ[1066] = ΔⲆ.ΔΔΔᐃᐃΔᐃ;
    Ⲇⵠ[1067] = ΔⲆ.ⲆᐃⵠⵠⵠⵠⲆ;
    Ⲇⵠ[1222] = [];
    Ⲇⵠ[1222][xs.ΔΔΔ] = ΔⲆ.ⲆⵠⵠⵠΔᐃⲆ;
    Ⲇⵠ[1222][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔⵠⲆⲆⲆ;
    Ⲇⵠ[248] = [];
    Ⲇⵠ[248][xs.ΔΔΔ] = ΔⲆ.ⵠⵠⵠⲆⵠᐃⲆ;
    Ⲇⵠ[248][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆⲆΔΔⲆ;
    Ⲇⵠ[1218] = [];
    Ⲇⵠ[1218][xs.ΔΔΔ] = ΔⲆ.ⲆᐃⵠΔⲆᐃᐃ;
    Ⲇⵠ[1218][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃΔⲆᐃⲆΔ;
    Ⲇⵠ[1221] = [];
    Ⲇⵠ[1221][xs.ΔΔΔ] = ΔⲆ.ΔⵠᐃⵠⲆⵠᐃ;
    Ⲇⵠ[1221][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔⲆΔΔΔ;
    Ⲇⵠ[1223] = ΔⲆ.ᐃΔⲆⵠⵠⲆᐃ;
    Ⲇⵠ[1219] = ΔⲆ.ⲆΔᐃⵠⵠΔⲆ;
    Ⲇⵠ[1068] = [];
    Ⲇⵠ[1068][xs.ΔΔΔ] = ΔⲆ.ⲆΔⲆΔⵠᐃΔ;
    Ⲇⵠ[1068][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔΔⲆΔⵠⵠ;
    Ⲇⵠ[232] = [];
    Ⲇⵠ[232][xs.ΔΔΔ] = ΔⲆ.ⲆᐃᐃΔᐃⲆⵠ;
    Ⲇⵠ[232][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃⲆⲆⵠⵠᐃ;
    Ⲇⵠ[1070] = [];
    Ⲇⵠ[1070][xs.ΔΔΔ] = ΔⲆ.ⲆΔⲆⲆⵠᐃⵠ;
    Ⲇⵠ[1070][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⵠⲆᐃⲆΔ;
    Ⲇⵠ[1072] = [];
    Ⲇⵠ[1072][xs.ΔΔΔ] = ΔⲆ.ΔΔᐃΔⲆᐃⵠ;
    Ⲇⵠ[1072][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⲆᐃⲆᐃ;
    Ⲇⵠ[1075] = [];
    Ⲇⵠ[1075][xs.ΔΔΔ] = ΔⲆ.ⵠⲆᐃⵠⵠⲆⲆ;
    Ⲇⵠ[1075][xs.ⵠᐃⲆ] = ΔⲆ.ⲆᐃᐃⲆᐃᐃᐃ;
    Ⲇⵠ[1071] = [];
    Ⲇⵠ[1071][xs.ΔΔΔ] = ΔⲆ.ᐃᐃⲆᐃⲆⵠΔ;
    Ⲇⵠ[1071][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔΔⵠⵠᐃⵠ;
    Ⲇⵠ[1074] = [];
    Ⲇⵠ[1074][xs.ΔΔΔ] = ΔⲆ.ᐃᐃΔⲆᐃᐃⵠ;
    Ⲇⵠ[1074][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃᐃᐃΔⵠ;
    Ⲇⵠ[1073] = [];
    Ⲇⵠ[1073][xs.ΔΔΔ] = ΔⲆ.ⲆⲆᐃᐃⲆⲆΔ;
    Ⲇⵠ[1073][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆⲆΔΔΔΔ;
    Ⲇⵠ[1076] = [];
    Ⲇⵠ[1076][xs.ΔΔΔ] = ΔⲆ.ΔⲆⲆⲆΔⵠᐃ;
    Ⲇⵠ[1076][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⵠⲆᐃⵠ;
    Ⲇⵠ[1077] = ΔⲆ.ⲆᐃᐃⲆⲆᐃᐃ;
    Ⲇⵠ[1078] = ΔⲆ.ⲆⲆⲆᐃᐃΔⲆ;
    Ⲇⵠ[1079] = ΔⲆ.ᐃΔⵠⲆⲆᐃⵠ;
    Ⲇⵠ[1083] = [];
    Ⲇⵠ[1083][xs.ΔΔΔ] = ΔⲆ.ⲆⵠⵠΔᐃⲆⵠ;
    Ⲇⵠ[1083][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⵠⲆΔᐃⲆ;
    Ⲇⵠ[233] = [];
    Ⲇⵠ[233][xs.ΔΔΔ] = ΔⲆ.ᐃⵠⲆⲆᐃΔᐃ;
    Ⲇⵠ[233][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆⵠᐃΔⵠ;
    Ⲇⵠ[1085] = [];
    Ⲇⵠ[1085][xs.ΔΔΔ] = ΔⲆ.ⲆΔⲆⵠΔΔⲆ;
    Ⲇⵠ[1085][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔⵠⵠⵠⵠΔ;
    Ⲇⵠ[1087] = [];
    Ⲇⵠ[1087][xs.ΔΔΔ] = ΔⲆ.ⲆΔΔΔⲆⵠᐃ;
    Ⲇⵠ[1087][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠⵠⲆⵠⵠ;
    Ⲇⵠ[1090] = [];
    Ⲇⵠ[1090][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⲆᐃⵠⲆⵠ;
    Ⲇⵠ[1090][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆΔⵠᐃ;
    Ⲇⵠ[1086] = [];
    Ⲇⵠ[1086][xs.ΔΔΔ] = ΔⲆ.ⵠⲆΔⲆΔΔⵠ;
    Ⲇⵠ[1086][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⲆᐃⲆⵠΔΔ;
    Ⲇⵠ[1089] = [];
    Ⲇⵠ[1089][xs.ΔΔΔ] = ΔⲆ.ᐃⲆᐃᐃᐃΔⵠ;
    Ⲇⵠ[1089][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃΔᐃᐃᐃΔ;
    Ⲇⵠ[1088] = [];
    Ⲇⵠ[1088][xs.ΔΔΔ] = ΔⲆ.ⵠⵠⲆⵠⲆᐃⲆ;
    Ⲇⵠ[1088][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃᐃⲆᐃᐃⵠ;
    Ⲇⵠ[1091] = [];
    Ⲇⵠ[1091][xs.ΔΔΔ] = ΔⲆ.ⵠⲆⵠⵠⵠⵠⲆ;
    Ⲇⵠ[1091][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆᐃⵠΔⲆ;
    Ⲇⵠ[1092] = ΔⲆ.ᐃⵠⵠΔⵠᐃⵠ;
    Ⲇⵠ[1093] = ΔⲆ.ᐃⲆᐃⲆⲆⲆᐃ;
    Ⲇⵠ[1094] = ΔⲆ.ⵠⲆΔⲆⲆΔⲆ;
    Ⲇⵠ[1098] = [];
    Ⲇⵠ[1098][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠΔΔΔ;
    Ⲇⵠ[1098][xs.ⵠᐃⲆ] = ΔⲆ.Ⲇⵠᐃᐃⵠⵠⵠ;
    Ⲇⵠ[235] = [];
    Ⲇⵠ[235][xs.ΔΔΔ] = ΔⲆ.ᐃᐃΔᐃᐃⲆᐃ;
    Ⲇⵠ[235][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⵠΔΔΔⵠ;
    Ⲇⵠ[1115] = ΔⲆ.ΔᐃΔΔⲆⲆΔ;
    Ⲇⵠ[1113] = [];
    Ⲇⵠ[1113][xs.ΔΔΔ] = ΔⲆ.ⵠⲆΔⵠΔᐃⵠ;
    Ⲇⵠ[1113][xs.ⵠᐃⲆ] = ΔⲆ.ᐃᐃⲆᐃⵠᐃⵠ;
    Ⲇⵠ[1114] = [];
    Ⲇⵠ[1114][xs.ΔΔΔ] = ΔⲆ.ⲆⵠΔⵠᐃΔⲆ;
    Ⲇⵠ[1114][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔᐃᐃΔⵠ;
    Ⲇⵠ[1100] = [];
    Ⲇⵠ[1100][xs.ΔΔΔ] = ΔⲆ.ⵠᐃᐃⲆⵠᐃᐃ;
    Ⲇⵠ[1100][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔΔΔᐃⵠ;
    Ⲇⵠ[1102] = [];
    Ⲇⵠ[1102][xs.ΔΔΔ] = ΔⲆ.ᐃΔᐃⵠⲆᐃⵠ;
    Ⲇⵠ[1102][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⵠⵠⵠⲆᐃ;
    Ⲇⵠ[1105] = [];
    Ⲇⵠ[1105][xs.ΔΔΔ] = ΔⲆ.ⵠᐃⲆᐃⵠΔⵠ;
    Ⲇⵠ[1105][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆᐃⲆⵠ;
    Ⲇⵠ[1101] = [];
    Ⲇⵠ[1101][xs.ΔΔΔ] = ΔⲆ.ΔⵠΔⲆΔⵠⵠ;
    Ⲇⵠ[1101][xs.ⵠᐃⲆ] = ΔⲆ.ⲆΔⵠᐃⵠᐃΔ;
    Ⲇⵠ[1104] = [];
    Ⲇⵠ[1104][xs.ΔΔΔ] = ΔⲆ.ΔⲆⵠᐃⲆΔⲆ;
    Ⲇⵠ[1104][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔⲆⵠⲆᐃ;
    Ⲇⵠ[1103] = [];
    Ⲇⵠ[1103][xs.ΔΔΔ] = ΔⲆ.ᐃⲆⲆⲆⲆⵠᐃ;
    Ⲇⵠ[1103][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠΔΔⲆΔᐃ;
    Ⲇⵠ[1106] = [];
    Ⲇⵠ[1106][xs.ΔΔΔ] = ΔⲆ.ΔΔⲆΔΔΔᐃ;
    Ⲇⵠ[1106][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠⲆⲆⲆⲆⵠ;
    Ⲇⵠ[1107] = ΔⲆ.ᐃⵠⵠⵠⲆⲆⲆ;
    Ⲇⵠ[1108] = ΔⲆ.ᐃⲆᐃΔⵠᐃⵠ;
    Ⲇⵠ[1109] = ΔⲆ.ⵠⵠⵠᐃⲆᐃⲆ;
    Ⲇⵠ[1119] = [];
    Ⲇⵠ[1119][xs.ΔΔΔ] = ΔⲆ.ⲆᐃᐃⲆᐃⵠⵠ;
    Ⲇⵠ[1119][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆⵠⲆⵠⲆⵠ;
    Ⲇⵠ[238] = [];
    Ⲇⵠ[238][xs.ΔΔΔ] = ΔⲆ.ⵠΔⲆΔΔⲆΔ;
    Ⲇⵠ[238][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆⵠΔⵠΔᐃ;
    Ⲇⵠ[1136] = ΔⲆ.ᐃΔⵠΔΔⲆΔ;
    Ⲇⵠ[1134] = [];
    Ⲇⵠ[1134][xs.ΔΔΔ] = ΔⲆ.ΔΔᐃⵠΔΔⵠ;
    Ⲇⵠ[1134][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⲆⵠⵠⵠᐃ;
    Ⲇⵠ[1135] = [];
    Ⲇⵠ[1135][xs.ΔΔΔ] = ΔⲆ.ⵠΔⲆᐃⲆⵠⲆ;
    Ⲇⵠ[1135][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⲆᐃΔⲆⵠ;
    Ⲇⵠ[1121] = [];
    Ⲇⵠ[1121][xs.ΔΔΔ] = ΔⲆ.ΔⵠᐃΔᐃΔⵠ;
    Ⲇⵠ[1121][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⵠⲆⵠΔ;
    Ⲇⵠ[1123] = [];
    Ⲇⵠ[1123][xs.ΔΔΔ] = ΔⲆ.ᐃΔᐃΔⲆⵠⲆ;
    Ⲇⵠ[1123][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔⲆΔᐃⵠⲆ;
    Ⲇⵠ[1126] = [];
    Ⲇⵠ[1126][xs.ΔΔΔ] = ΔⲆ.ΔⵠΔΔⵠΔⵠ;
    Ⲇⵠ[1126][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔⲆΔΔΔⵠ;
    Ⲇⵠ[1122] = [];
    Ⲇⵠ[1122][xs.ΔΔΔ] = ΔⲆ.ᐃᐃⵠΔΔⵠⵠ;
    Ⲇⵠ[1122][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔᐃⲆⵠᐃᐃ;
    Ⲇⵠ[1125] = [];
    Ⲇⵠ[1125][xs.ΔΔΔ] = ΔⲆ.ᐃⲆᐃⲆᐃΔΔ;
    Ⲇⵠ[1125][xs.ⵠᐃⲆ] = ΔⲆ.ᐃⵠΔⵠΔΔᐃ;
    Ⲇⵠ[1124] = [];
    Ⲇⵠ[1124][xs.ΔΔΔ] = ΔⲆ.ⲆᐃᐃᐃⲆⲆⲆ;
    Ⲇⵠ[1124][xs.ⵠᐃⲆ] = ΔⲆ.ΔΔⲆᐃⵠⲆᐃ;
    Ⲇⵠ[1127] = [];
    Ⲇⵠ[1127][xs.ΔΔΔ] = ΔⲆ.ΔⵠΔᐃᐃᐃⲆ;
    Ⲇⵠ[1127][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔΔΔᐃⲆⲆ;
    Ⲇⵠ[1128] = ΔⲆ.ⲆΔⵠᐃΔⵠⵠ;
    Ⲇⵠ[1129] = ΔⲆ.ᐃⲆⲆΔΔᐃᐃ;
    Ⲇⵠ[1130] = ΔⲆ.ᐃᐃΔΔⵠᐃΔ;
    Ⲇⵠ[1042] = [];
    Ⲇⵠ[1042][xs.ΔΔΔ] = ΔⲆ.ⵠᐃⲆⵠᐃⲆΔ;
    Ⲇⵠ[1042][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆⵠⲆⵠ;
    Ⲇⵠ[1043] = [];
    Ⲇⵠ[1043][xs.ΔΔΔ] = ΔⲆ.ⲆΔΔᐃᐃΔⲆ;
    Ⲇⵠ[1043][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃᐃΔⵠᐃⲆ;
    Ⲇⵠ[1044] = [];
    Ⲇⵠ[1044][xs.ΔΔΔ] = ΔⲆ.ᐃⲆΔⵠΔᐃᐃ;
    Ⲇⵠ[1044][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⵠⵠΔΔΔΔ;
    Ⲇⵠ[228] = [];
    Ⲇⵠ[228][xs.ΔΔΔ] = ΔⲆ.ΔᐃⵠⵠΔⵠᐃ;
    Ⲇⵠ[228][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃⵠⵠΔⵠᐃ;
    Ⲇⵠ[234] = [];
    Ⲇⵠ[234][xs.ΔΔΔ] = ΔⲆ.ΔⲆⲆⲆⵠΔⵠ;
    Ⲇⵠ[234][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆⲆⲆⵠΔⵠ;
    Ⲇⵠ[249] = [];
    Ⲇⵠ[249][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⵠⵠⵠⵠΔ;
    Ⲇⵠ[249][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⵠⵠⵠⵠΔ;
    Ⲇⵠ[1045] = ΔⲆ.ⲆⵠⵠⵠᐃⲆⵠ;
    Ⲇⵠ[89] = [];
    Ⲇⵠ[89][xs.ΔΔΔ] = ΔⲆ.ⵠΔΔᐃᐃᐃⲆ;
    Ⲇⵠ[89][xs.ⵠᐃⲆ] = ΔⲆ.ⵠᐃΔΔⵠᐃⲆ;
    Ⲇⵠ[92] = [];
    Ⲇⵠ[92][xs.ΔΔΔ] = ΔⲆ.ΔⲆᐃΔᐃᐃⵠ;
    Ⲇⵠ[92][xs.ⵠᐃⲆ] = ΔⲆ.ᐃΔⵠΔΔⵠΔ;
    Ⲇⵠ[247] = [];
    Ⲇⵠ[247][xs.ΔΔΔ] = [ΔⲆ.ᐃᐃⵠΔΔᐃⵠ, ΔⲆ.ⲆΔᐃⲆⵠⲆᐃ, ΔⲆ.ΔⵠⵠⲆᐃᐃᐃ, ΔⲆ.ΔⲆⲆᐃⲆⵠΔ, ΔⲆ.ᐃⵠⵠⲆⲆᐃⵠ, ΔⲆ.ⵠⲆⵠⵠᐃᐃΔ, ΔⲆ.Δⵠⵠⵠᐃᐃᐃ, ΔⲆ.ΔⲆⵠΔⵠΔΔ, ΔⲆ.ⲆⲆⵠᐃΔⲆΔ];
    Ⲇⵠ[247][xs.ⵠᐃⲆ] = [ΔⲆ.ⲆᐃΔᐃⲆΔⲆ, ΔⲆ.ᐃᐃΔΔᐃΔⲆ, ΔⲆ.ᐃΔⲆⲆΔΔⵠ, ΔⲆ.ΔⵠᐃⲆⵠⲆΔ, ΔⲆ.ⵠᐃᐃΔᐃⲆⵠ, ΔⲆ.ⵠᐃΔᐃᐃⵠᐃ, ΔⲆ.ⲆΔⲆⲆⵠᐃΔ, ΔⲆ.ΔⲆⵠΔⵠΔΔ, ΔⲆ.ΔΔⵠⵠⲆⲆⲆ];
    Ⲇⵠ[93] = [];
    Ⲇⵠ[93][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⲆⵠⵠⵠΔ;
    Ⲇⵠ[93][xs.ⵠᐃⲆ] = ΔⲆ.ΔᐃΔⲆⲆⵠΔ;
    Ⲇⵠ[225] = [];
    Ⲇⵠ[225][xs.ΔΔΔ] = ΔⲆ.ⲆⲆⵠⵠⵠΔΔ;
    Ⲇⵠ[225][xs.ⵠᐃⲆ] = ΔⲆ.ΔⲆΔᐃⵠⵠᐃ;
    Ⲇⵠ[226] = [];
    Ⲇⵠ[226][xs.ΔΔΔ] = ΔⲆ.ⲆⵠᐃΔⵠΔⵠ;
    Ⲇⵠ[226][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆⵠⵠΔⵠΔ;
    Ⲇⵠ[24] = [];
    Ⲇⵠ[24][xs.ΔΔΔ] = ΔⲆ.ᐃⵠΔⲆⵠⵠⵠ;
    Ⲇⵠ[24][xs.ⵠᐃⲆ] = ΔⲆ.ⵠⲆᐃᐃᐃⲆⵠ;
    Ⲇⵠ[88] = [];
    Ⲇⵠ[88][xs.ΔΔΔ] = ΔⲆ.ΔᐃᐃⲆᐃⵠΔ;
    Ⲇⵠ[88][xs.ⵠᐃⲆ] = ΔⲆ.ⲆⲆΔⲆΔⲆᐃ;
    Ⲇⵠ[87] = [];
    Ⲇⵠ[87][xs.ΔΔΔ] = ΔⲆ.ᐃⲆΔⲆᐃⲆⲆ;
    Ⲇⵠ[87][xs.ⵠᐃⲆ] = ΔⲆ.ΔⵠⲆⲆᐃᐃᐃ;
    Ⲇⵠ[82] = [];
    Ⲇⵠ[82][xs.ΔΔΔ] = ΔⲆ.ΔᐃΔⵠΔΔΔ;
    Ⲇⵠ[82][xs.ⵠᐃⲆ] = ΔⲆ.ⵠΔⲆⲆⵠᐃⲆ;
    Ⲇⵠ[621] = [];
    Ⲇⵠ[621][xs.ΔΔΔ] = [];
    Ⲇⵠ[621][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[621][xs.ΔΔΔ].push(ΔⲆ.ⲆᐃⲆᐃⲆᐃᐃΔⲆ);
    Ⲇⵠ[621][xs.ΔΔΔ].push(ΔⲆ.ⵠΔⵠⵠᐃⵠⲆⲆⵠ);
    Ⲇⵠ[621][xs.ΔΔΔ].push(ΔⲆ.ⵠⵠⲆΔᐃⲆⵠⵠΔ);
    Ⲇⵠ[621][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⵠΔⵠⲆᐃⵠᐃⲆ);
    Ⲇⵠ[621][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆⵠΔΔΔΔᐃᐃᐃ);
    Ⲇⵠ[621][xs.ⵠᐃⲆ].push(ΔⲆ.ΔⵠᐃⲆᐃⵠⵠᐃⲆ);
    Ⲇⵠ[619] = [];
    Ⲇⵠ[619][xs.ΔΔΔ] = [];
    Ⲇⵠ[619][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[619][xs.ΔΔΔ].push(ΔⲆ.ᐃⲆⲆⲆΔⵠⵠᐃⵠ);
    Ⲇⵠ[619][xs.ΔΔΔ].push(ΔⲆ.ⵠᐃᐃⲆⲆᐃⵠᐃⵠ);
    Ⲇⵠ[619][xs.ΔΔΔ].push(ΔⲆ.ⵠΔⲆⵠⲆⵠΔⲆΔ);
    Ⲇⵠ[619][xs.ⵠᐃⲆ].push(ΔⲆ.ⵠⵠⲆⵠⵠⲆⵠⵠⵠ);
    Ⲇⵠ[619][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠᐃⵠⵠᐃⵠᐃᐃ);
    Ⲇⵠ[619][xs.ⵠᐃⲆ].push(ΔⲆ.ⲆᐃᐃⲆⲆⵠᐃᐃᐃ);
    Ⲇⵠ[620] = [];
    Ⲇⵠ[620][xs.ΔΔΔ] = [];
    Ⲇⵠ[620][xs.ⵠᐃⲆ] = [];
    Ⲇⵠ[620][xs.ΔΔΔ].push(ΔⲆ.ᐃⲆΔⲆⵠⲆᐃⲆᐃ);
    Ⲇⵠ[620][xs.ΔΔΔ].push(ΔⲆ.ⵠⵠⵠΔⲆΔⲆⲆΔ);
    Ⲇⵠ[620][xs.ΔΔΔ].push(ΔⲆ.ᐃᐃⲆⲆⲆΔΔᐃᐃ);
    Ⲇⵠ[620][xs.ⵠᐃⲆ].push(ΔⲆ.ΔΔᐃⵠΔΔᐃΔᐃ);
    Ⲇⵠ[620][xs.ⵠᐃⲆ].push(ΔⲆ.ΔᐃᐃᐃⲆⵠᐃΔⵠ);
    Ⲇⵠ[620][xs.ⵠᐃⲆ].push(ΔⲆ.ᐃⵠⵠΔΔᐃⵠΔⵠ);
    Δⵠⵠⵠ.g = [];
    Δⵠⵠⵠ.g[0] = [ΔⲆ.ⵠΔΔΔᐃΔⲆ, ΔⲆ.ⲆⲆΔᐃⲆⵠᐃ];
    Δⵠⵠⵠ.g[1] = Δⵠⵠⵠ.g[0];
    Δⵠⵠⵠ.g[2] = [ΔⲆ.ⲆⲆᐃΔⲆⲆⵠ, ΔⲆ.ΔⵠⲆᐃⲆⵠΔ];
    Δⵠⵠⵠ.m = [];
    Δⵠⵠⵠ.m[0] = [ΔⲆ.ⲆⲆᐃⲆᐃΔᐃ, ΔⲆ.ᐃⵠᐃΔᐃⲆΔ];
    Δⵠⵠⵠ.m[1] = Δⵠⵠⵠ.m[0];
    Δⵠⵠⵠ.m[2] = [ΔⲆ.ΔⲆᐃᐃΔᐃΔ, ΔⲆ.ᐃⵠΔⵠᐃⲆΔ];
    Δⵠⵠⵠ.la = [];
    Δⵠⵠⵠ.la[0] = [ΔⲆ.ᐃΔⵠΔⵠⲆΔ, ΔⲆ.ᐃΔᐃⵠⲆᐃⲆ];
    Δⵠⵠⵠ.la[1] = Δⵠⵠⵠ.la[0];
    Δⵠⵠⵠ.la[2] = Δⵠⵠⵠ.la[0];
    Δⵠⵠⵠ.la[3] = Δⵠⵠⵠ.la[0];
    Δⵠⵠⵠ.la[4] = Δⵠⵠⵠ.la[0];
    Δⵠⵠⵠ.la[5] = Δⵠⵠⵠ.la[0];
    Δⵠⵠⵠ.s = [];
    Δⵠⵠⵠ.s[0] = [ΔⲆ.ᐃⵠᐃΔⵠⲆΔ, ΔⲆ.ⲆⲆΔᐃΔΔΔ];
    Δⵠⵠⵠ.s[1] = Δⵠⵠⵠ.s[0];
    Δⵠⵠⵠ.s[2] = [ΔⲆ.ⲆᐃᐃΔᐃⵠΔ, ΔⲆ.ⵠⵠⲆⵠΔⵠⵠ];
    Δⵠⵠⵠ.p = [];
    Δⵠⵠⵠ.p[0] = [ΔⲆ.ᐃⲆⲆⵠᐃΔⵠ, ΔⲆ.ᐃⲆⲆⵠᐃΔⵠ];
    Δⵠⵠⵠ.a = [];
    Δⵠⵠⵠ.a[0] = [ΔⲆ.ⵠΔΔⵠⲆⲆΔ, ΔⲆ.ΔⵠⵠⵠΔⵠⵠ];
    Δⵠⵠⵠ.a[1] = Δⵠⵠⵠ.a[0];
    Δⵠⵠⵠ.a[2] = Δⵠⵠⵠ.a[0];
    Δⵠⵠⵠ.d = [];
    Δⵠⵠⵠ.d[0] = [ΔⲆ.ᐃⵠⵠᐃΔᐃⵠ, ΔⲆ.ΔⲆⵠΔᐃⵠᐃ];
    Δⵠⵠⵠ.d[1] = Δⵠⵠⵠ.d[0];
    Δⵠⵠⵠ.d[2] = Δⵠⵠⵠ.d[0];
    Δⵠⵠⵠ.re = [];
    Δⵠⵠⵠ.re[0] = [ΔⲆ.ΔΔᐃⵠᐃⲆⲆ, ΔⲆ.ⵠᐃⵠⵠΔⲆΔ];
    Δⵠⵠⵠ.re[1] = Δⵠⵠⵠ.re[0];
    Δⵠⵠⵠ.re[2] = Δⵠⵠⵠ.re[0];
    Δⵠⵠⵠ.f = [];
    Δⵠⵠⵠ.f[0] = [ΔⲆ.ⲆΔᐃᐃⲆⲆᐃ, ΔⲆ.ⵠⵠⲆΔᐃⵠᐃ];
    Δⵠⵠⵠ.f[1] = Δⵠⵠⵠ.f[0];
    Δⵠⵠⵠ.f[2] = Δⵠⵠⵠ.f[0];
    Δⵠⵠⵠ.isl = [];
    Δⵠⵠⵠ.isl[0] = [ΔⲆ.ᐃⲆⲆΔⵠⲆᐃ, ΔⲆ.ⲆΔⲆᐃⲆᐃⲆ];
    Δⵠⵠⵠ.isl[1] = Δⵠⵠⵠ.isl[0];
    Δⵠⵠⵠ.isl[2] = Δⵠⵠⵠ.isl[0];
    Δⵠⵠⵠ.c = [];
    Δⵠⵠⵠ.c[0] = [ΔⲆ.ΔᐃⲆⵠΔᐃⲆ, ΔⲆ.ΔⵠΔΔΔⲆⵠ];
    Δⵠⵠⵠ.c[1] = Δⵠⵠⵠ.c[0];
    Δⵠⵠⵠ.c[2] = Δⵠⵠⵠ.c[0];
    Δⵠⵠⵠ.wtb = [];
    Δⵠⵠⵠ.wtb[0] = [ΔⲆ.ΔⲆΔⵠⲆⲆΔ, ΔⲆ.Δᐃᐃᐃⵠᐃᐃ];
    Δⵠⵠⵠ.PIRANHA = [ΔⲆ.ⵠΔⲆⲆⲆⵠⵠ, ΔⲆ.ᐃⵠⲆᐃᐃⲆᐃ];
    Δⵠⵠⵠ.KRAKEN = [ΔⲆ.ᐃⵠᐃᐃΔᐃⲆ, ΔⲆ.ⲆⵠⲆⲆΔΔΔ];
    Δⵠⵠⵠ.FOX = [ΔⲆ.ΔⵠΔΔⵠᐃⲆ, ΔⲆ.ᐃΔⵠⲆⲆᐃΔ];
    Δⵠⵠⵠ.WOLF = [ΔⲆ.ⲆᐃⵠⵠⵠⲆⵠ, ΔⲆ.ᐃⲆᐃΔᐃⵠⵠ];
    Δⵠⵠⵠ.SPIDER = [ΔⲆ.ᐃΔᐃᐃΔᐃⲆ, ΔⲆ.ⵠⲆΔᐃᐃⵠᐃ];
    Δⵠⵠⵠ.BEAR = [ΔⲆ.ⵠᐃⲆⲆⲆΔⲆ, ΔⲆ.ᐃⵠᐃΔⲆᐃᐃ];
    Δⵠⵠⵠ.CAVE = [ΔⲆ.ⵠᐃᐃⲆΔⲆⵠ, ΔⲆ.ⵠΔⲆᐃⵠΔⵠ];
    Δⵠⵠⵠ.MAP = [ΔⲆ.ⵠⲆⲆΔΔᐃⵠ, ΔⲆ.ⲆΔⲆΔΔᐃΔ];
    Δⵠⵠⵠ.FOREST = [ΔⲆ.ⲆⲆᐃⵠΔⵠᐃ, ΔⲆ.ⲆᐃⵠΔⲆΔⲆ];
    Δⵠⵠⵠ.WINTER = [ΔⲆ.ⲆᐃΔⲆⲆᐃⵠ, ΔⲆ.ⲆⲆᐃᐃᐃⵠⲆ];
    Δⵠⵠⵠ.DESERT = [ΔⲆ.ᐃⲆᐃⵠΔΔΔ, ΔⲆ.ΔΔΔⲆᐃΔⲆ];
    Δⵠⵠⵠ.LAVA = [ΔⲆ.ᐃⲆᐃⵠⲆᐃⵠ, ΔⲆ.ⲆΔΔⵠⵠᐃΔ];
    for (var c in Δⵠⵠⵠ) {
      for (var d = Δⵠⵠⵠ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ΔⲆΔᐃΔⲆΔ !== Gm) {
          f.ΔⲆΔᐃΔⲆΔ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ΔⲆΔᐃΔⲆΔ !== $g) {
              f[g].ΔⲆΔᐃΔⲆΔ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function jp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    xd(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    xd(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    xd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    xd(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    xd(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    xd(e, ij, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    xd(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    return d;
  }
  function Lp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    kd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    xd(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    xd(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    kd(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    xd(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    xd(e, c[8]);
    return d;
  }
  function Gp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    xd(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    xd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    xd(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    xd(d, b[1], b[2], a * 4);
    yd(d, a * 51, a * 91, a * 9);
    xd(d, b[3]);
    yd(d, a * 95, a * 91, a * 9);
    xd(d, b[3]);
    yd(d, a * 91, a * 89, a * 4);
    xd(d, b[4]);
    yd(d, a * 47, a * 89, a * 4);
    xd(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    xd(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    xd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    xd(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    xd(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    xd(d, b[6]);
    return c;
  }
  function Wp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    kd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    xd(e, c[0]);
    yd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    xd(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    kd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    xd(e, ur, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    xd(e, $g, c[3], a * 6);
    yd(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    xd(e, undefined, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    kd(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    xd(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    xd(e, c[1]);
    yd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    xd(e, c[2], c[1], a * 4);
    yd(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    xd(e, c[3], c[1], a * 4);
    yd(e, a * 78, a * 44, a * 20);
    xd(e, c[4]);
    return d;
  }
  function Np(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    kd(d, 0, 0, 20, 35, 7);
    xd(d, b[0]);
    return c;
  }
  function qp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    xd(e, hs, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    xd(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    xd(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    xd(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    xd(e, ij, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    xd(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    xd(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    xd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    xd(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    xd(e, Qq, c[2], a * 11);
    return d;
  }
  function Op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    kd(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    xd(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    kd(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    xd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    xd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    xd(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    xd(e, c[2], c[1], a * 4);
    yd(e, a * 71, a * 44.375, a * 16.55294535724685);
    xd(e, c[2], c[1], a * 4);
    yd(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    xd(e, c[2], c[1], a * 4);
    return d;
  }
  function Hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    kd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    xd(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    kd(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    xd(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    xd(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    xd(e, c[5]);
    e.restore();
    return d;
  }
  function Up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    kd(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    xd(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    kd(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    xd(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    xd(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    xd(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    xd(e, c[6], c[2], a * 4);
    return d;
  }
  function Yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    kd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    xd(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    xd(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    kd(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    xd(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    xd(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    xd(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    xd(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    xd(e, c[8]);
    return d;
  }
  function Kp(b, c, d, e, f, i, a, j, k, h) {
    if (hg === c.ΔⲆΔᐃΔⲆΔ || c.ΔⲆΔᐃΔⲆΔ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (i !== undefined) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Xp() {
    Gx.ⵠΔᐃᐃᐃ.open = false;
    var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
    var b = 100;
    if (a) {
      for (var c = 0; c < Fx.Ⲇᐃⵠ[22].length; c++) {
        var d = Fx.Ⲇᐃⵠ[22][c];
        var e = ⵠᐃΔᐃ.ᐃⲆΔⵠ(d, a);
        if (e < b) {
          b = e;
          Gx.ⵠΔᐃᐃᐃ.open = true;
          Gx.ⵠΔᐃᐃᐃ.ΔᐃᐃⲆ = d.ΔᐃᐃⲆ;
          Gx.ⵠΔᐃᐃᐃ.ΔᐃⲆΔΔ = d.id;
        }
      }
      if (b < 100) {
        Jx.ⵠΔᐃᐃᐃ.ⲆᐃᐃⲆ(Jo);
      }
    }
  }
  ⲆⲆΔΔⵠ = [];
  ⲆⲆⲆΔⵠⲆⲆ = [];
  ;
  function Vp() {
    Gx.ᐃⲆⲆΔⲆ.id = -1;
    Gx.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ = -1;
    if (!Gx.ⲆⲆᐃⵠΔⲆⵠ && !Gx.ᐃⲆⲆΔⲆ.wait && !Gx.ⵠΔⲆⲆⲆ) {
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Fx.Ⲇᐃⵠ[29].length > d; d++) {
          var e = Fx.Ⲇᐃⵠ[29][d];
          var f = ⵠᐃΔᐃ.ᐃⲆΔⵠ(e, b);
          if (c > f) {
            c = f;
            Gx.ᐃⲆⲆΔⲆ.id = e.id;
            Gx.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ = e.ΔᐃᐃⲆ;
            Gx.ᐃⲆⲆΔⲆ.info = e.info;
            Gx.ᐃⲆⲆΔⲆ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = Jx.ⲆⲆⵠⵠᐃ;
      Jx.ⲆⲆⵠⵠᐃ = -1;
      if (Gx.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ == -1 || Gx.ΔΔΔᐃΔ.length != 0 && Gx.id != Gx.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ) {
        if (Gx.ΔΔΔᐃΔ.length != 0 && Gx.ΔΔΔᐃΔ[0] != Gx.id) {
          Jx.ⲆⲆⵠⵠᐃ = 2;
        } else if (Gx.ΔΔΔᐃΔ.length != 0 && Gx.id == Gx.ΔΔΔᐃΔ[0]) {
          Jx.ⲆⲆⵠⵠᐃ = 1;
        } else if (Gx.ΔΔΔᐃΔ.length != 0) {
          Jx.ⲆⲆⵠⵠᐃ = 3;
        }
      } else if (Gx.ΔΔΔᐃΔ.length == 0 && Gx.ᐃⲆⲆΔⲆ.info >= 8) {
        Jx.ⲆⲆⵠⵠᐃ = 4;
      } else if (Gx.ΔΔΔᐃΔ.length == 0) {
        Jx.ⲆⲆⵠⵠᐃ = 3;
      } else {
        Jx.ⲆⲆⵠⵠᐃ = 0;
      }
      if (Jx.ⲆⲆⵠⵠᐃ != -1) {
        Jx.ⵠΔⵠᐃⲆ[Jx.ⲆⲆⵠⵠᐃ].button.ⲆᐃᐃⲆ(Jo);
      }
      var a = document.getElementById("team_box").style;
      if (Jx.ⲆⲆⵠⵠᐃ != -1 && g != Jx.ⲆⲆⵠⵠᐃ && a.display == "inline-block") {
        Jx.ⵠΔⵠᐃⲆ[Jx.ⲆⲆⵠⵠᐃ].action();
      }
    }
  }
  function $p() {
    if (!Gx.ᐃΔⵠⲆ.open && !Gx.ΔⵠⲆⵠⵠ.open) {
      Gx.ᐃΔⲆΔ.open = false;
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Sw.length > d; d++) {
          for (var e = Sw[d][0], f = Sw[d][1], j = 0; j < Fx.Ⲇᐃⵠ[e].length; j++) {
            var k = Fx.Ⲇᐃⵠ[e][j];
            var m = ⵠᐃΔᐃ.ᐃⲆΔⵠ(k, b);
            if (m < c) {
              c = m;
              Gx.ᐃΔⲆΔ.ⲆⲆⵠΔⵠᐃΔ = f;
              Gx.ᐃΔⲆΔ.type = e;
              Gx.ᐃΔⲆΔ.open = Ha;
              Gx.ᐃΔⲆΔ.ⲆᐃⲆⲆᐃΔⲆ = k.info & 255;
              Gx.ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ = (k.info & 65280) >> 8;
              Gx.ᐃΔⲆΔ.ΔᐃᐃⲆ = k.ΔᐃᐃⲆ;
              Gx.ᐃΔⲆΔ.ΔᐃⲆΔΔ = k.id;
            }
          }
        }
        if (c < 100) {
          var p = Ⲇⵠ[656];
          var h = (q = Jx.ᐃⲆⲆⲆᐃⵠΔ).info.translate.x - 33;
          Kp(Jo, p, h, 0);
          if (Gx.ᐃΔⲆΔ.ⲆᐃⲆⲆᐃΔⲆ > 0) {
            q.ⲆᐃᐃⲆ(Jo);
            var g = Gx.ᐃΔⲆΔ.ⲆᐃⲆⲆᐃΔⲆ;
            if (g > 1) {
              Ru(g, q);
            }
          }
          switch (Gx.ᐃΔⲆΔ.ⲆⲆⵠΔⵠᐃΔ) {
            case 108:
              var q = Jx.ᐃᐃᐃΔΔⲆᐃ;
              break;
            case 111:
              q = Jx.ᐃⲆⲆⵠⲆΔⲆ;
              break;
            case 112:
              q = Jx.ΔΔⲆⲆΔⵠΔ;
              break;
            case 121:
              q = Jx.ᐃⲆⲆⵠΔⲆΔ;
              break;
            case 202:
              q = Jx.ⵠΔⲆⲆᐃⵠⵠ;
          }
          if (Gx.ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ > 0) {
            q.ⲆᐃᐃⲆ(Jo);
            if ((g = Gx.ᐃΔⲆΔ.ΔᐃⵠᐃΔΔΔ) > 1) {
              Ru(g, q);
            }
          }
        }
      }
    }
  }
  function Ju() {
    if (!Gx.ᐃΔⵠⲆ.open) {
      Gx.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ = 0;
      Gx.ΔⵠⲆⵠⵠ.open = Wh;
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Fx.Ⲇᐃⵠ[18].length > d; d++) {
          var e = Fx.Ⲇᐃⵠ[18][d];
          var f = ⵠᐃΔᐃ.ᐃⲆΔⵠ(e, b);
          if (f < c) {
            c = f;
            Gx.ΔⵠⲆⵠⵠ.open = true;
            Gx.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ = e.info;
            Gx.ΔⵠⲆⵠⵠ.ΔᐃᐃⲆ = e.ΔᐃᐃⲆ;
            Gx.ΔⵠⲆⵠⵠ.ΔᐃⲆΔΔ = e.id;
          }
        }
        if (c < 100) {
          var j = Ⲇⵠ[411];
          var a = Jx.ⵠᐃⵠⵠⵠⲆⵠ;
          var k = Math.floor(a.info.translate.x + (a.info.ⵠΔ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ⵠΔ[0].height - j.height) / 2) + 3;
          Kp(Jo, j, k, l);
          if (Gx.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ > 0) {
            a.ⲆᐃᐃⲆ(Jo);
            var h = Gx.ΔⵠⲆⵠⵠ.ΔⲆΔⵠ;
            if (h > 1) {
              Ru(h, a);
            }
          }
        }
      }
    }
  }
  function Ku(b, c, d) {
    var e = Ⲇⵠ[465][b];
    var f = c.info.translate.x + eq * 5;
    var g = c.info.translate.y + eq * 5;
    if (Sf == c.info.state || d) {
      g += eq * 5;
    }
    Kp(Jo, e, f, g);
  }
  function Lu() {
    if (!Gx.ᐃΔⵠⲆ.open && !Gx.ΔⵠⲆⵠⵠ.open) {
      Gx.ⵠⲆⵠᐃ.open = Yi;
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Fx.Ⲇᐃⵠ[32].length > d; d++) {
          var e = Fx.Ⲇᐃⵠ[32][d];
          var f = ⵠᐃΔᐃ.ᐃⲆΔⵠ(e, b);
          if (f < c) {
            c = f;
            Gx.ⵠⲆⵠᐃ.open = true;
            Gx.ⵠⲆⵠᐃ.ᐃΔⲆⵠᐃⵠⵠ = e.info & 255;
            Gx.ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ = (e.info & 65280) >> 8;
            Gx.ⵠⲆⵠᐃ.ΔᐃᐃⲆ = e.ΔᐃᐃⲆ;
            Gx.ⵠⲆⵠᐃ.ΔᐃⲆΔΔ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇⵠ[655];
          var a = (k = Jx.ⲆΔΔΔⲆᐃΔ).info.translate.x - 33;
          Kp(Jo, g, a, 0);
          if (Gx.ⵠⲆⵠᐃ.ᐃΔⲆⵠᐃⵠⵠ > 0) {
            k.ⲆᐃᐃⲆ(Jo);
            var j = Gx.ⵠⲆⵠᐃ.ᐃΔⲆⵠᐃⵠⵠ;
            if (j > 1) {
              Ru(j, k);
            }
          }
          var k = Jx.ⲆᐃⲆⲆⲆⵠᐃ;
          if (Gx.ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ > 0) {
            k.ⲆᐃᐃⲆ(Jo);
            if ((j = Gx.ⵠⲆⵠᐃ.ⲆΔᐃΔᐃ) > 1) {
              Ru(j, k);
            }
          }
        }
      }
    }
  }
  function Mu() {
    var a = Jx.ⵠᐃⵠᐃᐃ;
    var b = a.id;
    if (a.ᐃⲆΔⲆΔ === 1 && a.display === 1) {
      if (ⲆⲆΔΔⵠ[b] === $g) {
        ⲆⲆΔΔⵠ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Zb[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          $b = 2;
          for (; e.length > $b; $b++) {
            f = Math.max(f, d.measureText(e[$b]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          kd(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            $b = 2;
            for (; $b < e.length; $b++) {
              d.fillText(e[$b], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⲆΔᐃⵠ === 1) {
        Kp(Jo, ⲆⲆΔΔⵠ[b], a.x, a.y);
      } else if (Mo < a.x - 80 + ⲆⲆΔΔⵠ[b].width) {
        Kp(Jo, ⲆⲆΔΔⵠ[b], Mo - ⲆⲆΔΔⵠ[b].width - 10, a.y - ⲆⲆΔΔⵠ[b].height - 10);
      } else {
        Kp(Jo, ⲆⲆΔΔⵠ[b], a.x - 80, a.y - ⲆⲆΔΔⵠ[b].height - 10);
      }
    }
  }
  function Nu(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ou(a) {
    return jg.String.fromCharCode(a);
  }
  function Pu() {
    if (Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0) {
      var b = {
        x: Jx.ⵠⲆⵠᐃⵠ.translate.x,
        y: Jx.ⵠⲆⵠᐃⵠ.translate.y - eq * 120
      };
    } else {
      b = {
        x: Jx.ⵠⲆⵠᐃⵠ.translate.x,
        y: Jx.ⵠⲆⵠᐃⵠ.translate.y - eq * 50
      };
    }
    Jo.globalAlpha = 0.8;
    var c = Ⲇⵠ[259][Fx.time];
    Kp(Jo, c, b.x, b.y);
    Jo.globalAlpha = 1;
    if (Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x > -1) {
      Jo.fillStyle = "#660000";
      yd(Jo, b.x + Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x * eq, b.y + Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.y * eq, eq * 5);
      Jo.fill();
    }
    var d = eq;
    for (var f = Jx.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ, g = 0; g < f.length; g++) {
      var h = f[g];
      Fx.time;
      Jo.fillStyle = "#ff0000";
      yd(Jo, b.x + eq * (h.x / (Fx.ᐃⵠⲆΔΔ * 100) * 193), b.y + eq * (h.y / (Fx.ΔᐃⵠⵠⲆ * 100) * 193), eq * 2);
      Jo.fill();
    }
    var i = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
    if (i) {
      Jo.fillStyle = Fx.time ? "#fff" : "#e39716";
      yd(Jo, b.x + eq * (i.x / (Fx.ᐃⵠⲆΔΔ * 100) * 193), b.y + i.y / (Fx.ΔᐃⵠⵠⲆ * 100) * 193 * eq, eq * 4);
      Jo.fill();
    }
    eq = d;
  }
  function Qu() {
    if (Gx.ⲆⵠⲆⵠⵠΔⵠ) {
      Jo.globalAlpha = 0.5;
      Jo.fillStyle = "#000";
      Jo.fillRect(0, 0, Mo, Do);
      Jo.globalAlpha = 0.8;
      var b = Ⲇⵠ[516][Fx.time];
      var c = Eo - b.width / 2;
      var d = _o - b.height / 2;
      Kp(Jo, b, c, d);
      Jo.globalAlpha = 1;
      if (Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x > -1) {
        Jo.fillStyle = "#660000";
        yd(Jo, c + Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x * 3 * eq, d + Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.y * 3 * eq, eq * 14);
        Jo.fill();
      }
      for (var e = Jx.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ, f = 0; f < e.length; f++) {
        var g = e[f];
        Fx.time;
        Jo.fillStyle = "#ff0000";
        yd(Jo, c + eq * (g.x / (Fx.ᐃⵠⲆΔΔ * 100) * 600), d + eq * (g.y / (Fx.ΔᐃⵠⵠⲆ * 100) * 600), eq * 6);
        Jo.fill();
      }
      var h = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      if (h) {
        Jo.fillStyle = Fx.time ? "#fff" : "#e39716";
        yd(Jo, c + h.x / (Fx.ᐃⵠⲆΔΔ * 100) * 600 * eq, d + eq * (h.y / (Fx.ΔᐃⵠⵠⲆ * 100) * 600), eq * 12);
        Jo.fill();
      }
    }
  }
  function Ru(a, b) {
    Ⲇⵠ[283][a] ||= xm(eq, "x" + a, 17, "#FFF");
    var c = Ⲇⵠ[283][a];
    var d = b.info.translate.x + b.info.ⵠΔ[0].width - c.width - eq * 14;
    var e = b.info.translate.y + b.info.ⵠΔ[0].height - c.height - eq * 19;
    if (Sf == b.info.state) {
      e += eq * 5;
    }
    Kp(Jo, c, d, e);
  }
  function Su() {
    if (Gx.reconnect.enabled) {
      Jo.globalAlpha = 0.9;
      Jo.fillStyle = "#000";
      kd(Jo, Eo - 150, _o - 90, 300, 180, 15);
      Jo.fill();
      Jo.globalAlpha = 1;
      var a = Ⲇⵠ[301];
      Jo.save();
      Gx.reconnect.rotate = (Gx.reconnect.rotate + Ox * 2) % (Math.PI * 2);
      Jo.translate(Mo / 2, Do / 2 - 25);
      Jo.rotate(Gx.reconnect.rotate);
      Kp(Jo, a, -a.width / 2, -a.height / 2);
      Jo.restore();
      a = Ⲇⵠ[525];
      Kp(Jo, a, (Mo - a.width) / 2, (Do - a.height) / 2 + 25);
    }
  }
  function Tu() {
    if (!Gx.ᐃΔⵠⲆ.open && !Gx.ΔⵠⲆⵠⵠ.open && !Gx.ⵠⲆⵠᐃ.open && !Gx.ΔᐃΔᐃ.open && !Gx.ᐃΔⲆΔ.open) {
      Gx.sign.open = false;
      var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var b = 100;
      if (a) {
        for (var c = 0; c < Fx.Ⲇᐃⵠ[36].length; c++) {
          var d = Fx.Ⲇᐃⵠ[36][c];
          var e = ⵠᐃΔᐃ.ᐃⲆΔⵠ(d, a);
          if (b > e && d.info === 0 && d.ΔᐃᐃⲆ === Gx.id) {
            Gx.sign.open = true;
            b = e;
            Gx.sign.ΔᐃⲆΔΔ = d.id;
          }
        }
        if (b < 100) {
          Jx.sign.button.ⲆᐃᐃⲆ(Jo);
        }
      }
    }
  }
  function Uu() {
    Gx.ᐃΔⵠⲆ.id = -1;
    Gx.ᐃΔⵠⲆ.lock = false;
    Gx.ᐃΔⵠⲆ.locked = false;
    Gx.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ = false;
    Gx.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ = ul;
    Gx.ᐃΔⵠⲆ.open = false;
    var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
    var c = 100;
    if (b) {
      for (var d = 0; d < Fx.Ⲇᐃⵠ[11].length; d++) {
        var e = Fx.Ⲇᐃⵠ[11][d];
        var f = ⵠᐃΔᐃ.ᐃⲆΔⵠ(e, b);
        if (f < c) {
          c = f;
          Gx.ᐃΔⵠⲆ.open = Qe;
          Gx.ᐃΔⵠⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          Gx.ᐃΔⵠⲆ.ΔⲆΔⵠ = e.info;
          Gx.ᐃΔⵠⲆ.ΔᐃᐃⲆ = e.ΔᐃᐃⲆ;
          Gx.ᐃΔⵠⲆ.ΔᐃⲆΔΔ = e.id;
          Gx.ᐃΔⵠⲆ.locked = e.lock;
          Gx.ᐃΔⵠⲆ.lock = e.lock && e.ΔᐃᐃⲆ != Gx.id && !Gx.ⵠⵠᐃⲆᐃᐃᐃ(e.ΔᐃᐃⲆ) ? Xg : Bs;
          Gx.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ = e.ΔᐃᐃⲆ === Gx.id && !Gx.ᐃΔⵠⲆ.locked && Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(148) != -1;
          if (Gx.ᐃΔⵠⲆ.locked && Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(158) != -1) {
            Gx.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ = Rr;
          }
        }
      }
      if (c < 100) {
        var j = Ⲇⵠ[339];
        var a = Jx.ⵠⵠΔ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ⵠΔ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ⵠΔ[0].height - j.height) / 2) + 3;
        Kp(Jo, j, k, l);
        if ((!Gx.ᐃΔⵠⲆ.lock || Gx.ᐃΔⵠⲆ.ΔᐃᐃⲆ === Gx.id) && Gx.ᐃΔⵠⲆ.id >= 0) {
          (a = Jx.ⵠⵠΔ[Gx.ᐃΔⵠⲆ.id]).ⲆᐃᐃⲆ(Jo);
          var h = Gx.ᐃΔⵠⲆ.ΔⲆΔⵠ;
          if (h > 1) {
            Ru(h, a);
          }
        }
        if (Gx.ᐃΔⵠⲆ.lock) {
          Jx.ΔⲆᐃΔΔⲆᐃ.ⲆᐃᐃⲆ(Jo);
        } else if (Gx.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ) {
          Jx.ΔⵠⵠⲆΔΔⲆ.ⲆᐃᐃⲆ(Jo);
        }
        if (Gx.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ) {
          Jx.ⵠΔᐃᐃᐃᐃΔ.ⲆᐃᐃⲆ(Jo);
        }
      }
    }
  }
  function Vu() {
    if (!Gx.ᐃΔⵠⲆ.open && !Gx.ΔⵠⲆⵠⵠ.open && !Gx.ⵠⲆⵠᐃ.open && !Gx.ᐃΔⲆΔ.open) {
      Gx.ΔᐃΔᐃ.open = false;
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var c = 100;
      if (b) {
        for (var d = 0; Fx.Ⲇᐃⵠ[34].length > d; d++) {
          var e = Fx.Ⲇᐃⵠ[34][d];
          var f = ⵠᐃΔᐃ.ᐃⲆΔⵠ(e, b);
          if (f < c) {
            c = f;
            Gx.ΔᐃΔᐃ.open = true;
            Gx.ΔᐃΔᐃ.ⲆᐃⲆⲆᐃΔⲆ = e.info & 31;
            Gx.ΔᐃΔᐃ.ⲆΔᐃΔᐃ = (e.info & 992) >> 5;
            Gx.ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ = (e.info & 31744) >> 10;
            Gx.ΔᐃΔᐃ.ΔᐃᐃⲆ = e.ΔᐃᐃⲆ;
            Gx.ΔᐃΔᐃ.ΔᐃⲆΔΔ = e.id;
          }
        }
        if (c < 100) {
          var g = Ⲇⵠ[722];
          var a = (j = Jx.ΔᐃⵠⲆΔⲆⵠ).info.translate.x - 32;
          Kp(Jo, g, a, 0);
          if (Gx.ΔᐃΔᐃ.ⲆᐃⲆⲆᐃΔⲆ > 0) {
            j.ⲆᐃᐃⲆ(Jo);
            if ((k = Gx.ΔᐃΔᐃ.ⲆᐃⲆⲆᐃΔⲆ) > 1) {
              Ru(k, j);
            }
          }
          var j = Jx.ΔΔᐃⵠΔᐃᐃ;
          if (Gx.ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ > 0) {
            j.ⲆᐃᐃⲆ(Jo);
            if ((k = Gx.ΔᐃΔᐃ.ᐃⲆⵠⲆΔⲆᐃ) > 1) {
              Ru(k, j);
            }
          }
          j = Jx.ΔⵠᐃⲆᐃᐃΔ;
          if (Gx.ΔᐃΔᐃ.ⲆΔᐃΔᐃ > 0) {
            j.ⲆᐃᐃⲆ(Jo);
            var k = Gx.ΔᐃΔᐃ.ⲆΔᐃΔᐃ;
            if (k > 1) {
              Ru(k, j);
            }
          }
        }
      }
    }
  }
  var Wu = [];
  function Xu() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[239][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function Yu() {
    var a = Fx.ΔᐃᐃⲆⵠ;
    var b = Ⲇⵠ[725][Fx.time];
    Kp(Jo, b, a.translate.x, a.translate.y);
    Jo.save();
    Jo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    Fx.ΔᐃᐃⲆⵠ.now = (new Date().getTime() - a.ΔⲆᐃᐃⵠ + a.ᐃΔΔΔⲆ) % 480000;
    var c = Fx.ΔᐃᐃⲆⵠ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    Jo.rotate(c);
    Kp(Jo, Ⲇⵠ[726], -b.width / 2, -b.height / 2);
    Jo.restore();
  }
  function Zu(a) {
    if ((a = a / 100) <= 0.8) {
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.angle);
      if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
        if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
          this.ᐃⲆⵠ.ᐃᐃⵠ = false;
        }
        var b = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
        var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
        var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Jo.globalAlpha = 0.5;
      Pd(Jo, c, d, eq * 18, a);
      xd(Jo, null, "#000000", eq * 18);
      Jo.globalAlpha = 1;
      Pd(Jo, c, d, eq * 18, a);
      xd(Jo, null, xs.ΔⵠᐃᐃᐃΔΔ[Fx.time], eq * 6);
      Jo.restore();
    }
  }
  function $u() {
    var b = Gx.ᐃⲆⲆΔⲆ;
    if (b.wait) {
      var c = b.timeout.ᐃᐃⵠ();
      Jo.save();
      var d = Ⲇⵠ[562];
      var e = Ⲇⵠ[537].height + eq * 25;
      Jo.translate(d.width, Jx.ᐃⵠⲆᐃ.translate.y - eq * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      Kp(Jo, d, f + 2, g);
      Jo.beginPath();
      Jo.lineWidth = eq * 5;
      Jo.strokeStyle = xs.ⵠᐃⵠⲆⲆᐃᐃ[Fx.time];
      Jo.lineCap = "round";
      Jo.arc(0, g + d.height / 2, eq * 25, 0, Math.PI * 2 * b.timeout.ⲆᐃΔ);
      Jo.stroke();
      Jo.restore();
      if (c) {
        b.wait = false;
        b.timeout.ⲆᐃΔ = 0;
        b.timeout.ᐃΔⲆ = false;
      }
    }
  }
  function _u() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = Wh;
      }
      var a = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
      var b = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    ⵠΔ = Ⲇⵠ[167][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2 + b, -ⲆΔΔ / 2 + c, Δⵠᐃ, ⲆΔΔ);
    if (this.lock) {
      ⵠΔ = Ⲇⵠ[148][Fx.time];
      Δⵠᐃ = -ⵠΔ.width;
      ⲆΔΔ = -ⵠΔ.height;
      Kp(Jo, ⵠΔ, -Δⵠᐃ / 2 + b - eq * 1, -ⲆΔΔ / 2 + c, Δⵠᐃ, ⲆΔΔ);
    }
    Jo.restore();
  }
  function av() {
    Jo.save();
    var a = eq;
    if (Gx.ᐃⵠⲆᐃ.ᐃⵠᐃⲆⲆ.x < 0.25) {
      Jo.globalAlpha = Gx.ᐃⵠⲆᐃ.ᐃᐃⵠΔᐃⵠᐃ.ⲆᐃΔ;
    }
    var b = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0 ? -70 : 0;
    if (Gx.ᐃΔⵠⲆ.open || Gx.ΔⵠⲆⵠⵠ.open && Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(109) != -1 || Gx.ⵠⲆⵠᐃ.open && Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(134) != -1 || Gx.ᐃΔⲆΔ.open && Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(109) != -1 || Gx.ᐃᐃⲆⵠⵠ.open && Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(180) != -1 || Gx.ΔᐃΔᐃ.open && (Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(109) != -1 || Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(131) != -1)) {
      b -= eq * 50;
    }
    Jo.translate((Mo - eq * 950) / 2, b);
    Jo.fillStyle = "#69A148";
    Jo.fillRect(this.translate.x + eq * 37, this.translate.y + eq * 17, Gx.ᐃⵠⲆᐃ.ᐃⵠᐃⲆⲆ.x * 178 * eq, eq * 18);
    Jo.globalAlpha = 1;
    if (Gx.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.x < 0.35) {
      Jo.fillStyle = "#8F050A";
      Jo.globalAlpha = Gx.ᐃⵠⲆᐃ.ΔⲆᐃΔᐃΔΔ.ⲆᐃΔ;
      Jo.fillRect(this.translate.x + eq * 277, this.translate.y + eq * 17, eq * 178, eq * 18);
      Jo.globalAlpha = 1;
    }
    Jo.fillStyle = "#AF352A";
    Jo.fillRect(this.translate.x + eq * 277, this.translate.y + eq * 17, Gx.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.x * 178 * eq, eq * 18);
    if (Gx.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x < 0.35) {
      Jo.fillStyle = "#366B91";
      Jo.globalAlpha = Gx.ᐃⵠⲆᐃ.ⵠΔᐃᐃᐃⵠΔ.ⲆᐃΔ;
      Jo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, eq * 178, eq * 18);
      Jo.globalAlpha = 1;
    }
    Jo.fillStyle = "#669BB1";
    Jo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, eq * (Gx.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x * 178), eq * 18);
    if (Gx.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x > 0.99) {
      if (Gx.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.x < 0.35) {
        Jo.fillStyle = "#6C4036";
        Jo.globalAlpha = Gx.ᐃⵠⲆᐃ.ⲆΔΔⲆΔᐃᐃ.ⲆᐃΔ;
        Jo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, eq * 178, eq * 18);
        Jo.globalAlpha = 1;
      }
      Jo.fillStyle = "#9C4036";
      Jo.fillRect(this.translate.x + eq * 517, this.translate.y + eq * 17, (1 - Gx.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.x) * 178 * eq, eq * 18);
    }
    if (Gx.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.x < 0.35) {
      Jo.fillStyle = "#001A57";
      Jo.globalAlpha = Gx.ᐃⵠⲆᐃ.ⲆⲆⲆᐃⵠᐃᐃ.ⲆᐃΔ;
      Jo.fillRect(this.translate.x + eq * 757, this.translate.y + eq * 17, eq * 178, eq * 18);
      Jo.globalAlpha = 1;
    }
    Jo.fillStyle = "#074A87";
    Jo.fillRect(this.translate.x + eq * 757, this.translate.y + eq * 17, eq * (Gx.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.x * 178), eq * 18);
    eq = a;
    Kp(Jo, this.ⵠΔ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Jo.restore();
    if (Gx.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x < 0.99) {
      var c = Math.floor(Eo - Ⲇⵠ[608].width / 2);
      b += this.translate.y - Ⲇⵠ[608].height - eq * 5;
      Jo.fillStyle = "#BBE8EF";
      Jo.fillRect(c + 5, b + eq * 5, Gx.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x * (eq * 588), eq * 10);
      if (Gx.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x < 0.35) {
        Jo.fillStyle = "#9BA8AF";
        Jo.globalAlpha = Gx.ᐃⵠⲆᐃ.ⲆⵠΔᐃΔᐃⵠ.ⲆᐃΔ;
        Jo.fillRect(c + 5, b + 5, eq * 588, eq * 10);
        Jo.globalAlpha = 1;
      }
      Kp(Jo, Ⲇⵠ[608], c, b);
      this.y = b;
    }
  }
  function bv() {
    for (var b = Gx.ᐃᐃⲆΔ, c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ], d = 0; b.ⲆΔᐃⲆⵠ.length > d; d++) {
      var e = b.ⲆΔᐃⲆⵠ[d];
      var f = qe;
      if ((c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ]) && (e.id == c.right || c.ΔⲆⲆⲆᐃ == e.id && c.ΔⲆⲆⲆᐃ > 0)) {
        f = kg;
        Kp(Jo, e.info.ⵠΔ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⲆᐃᐃⲆ(Jo);
      }
      var g = Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[e.id];
      if (g > 1) {
        Ru(g, e);
      }
      if (g > 0) {
        Ku(d, e, f);
      }
      var h = Gx.ᐃΔⵠⲆ;
      if (!!h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ΔᐃᐃⲆ == Gx.id)) {
        Jx.ⵠⵠΔᐃΔ[e.id].ⲆᐃᐃⲆ(Jo);
      }
      if (Gx.ΔⵠⲆⵠⵠ.open && e.id == 109) {
        Jx.ⵠⵠΔᐃΔ[e.id].ⲆᐃᐃⲆ(Jo);
      }
      if (Gx.ᐃᐃⲆⵠⵠ.open && e.id == 180) {
        Jx.ⵠⵠΔᐃΔ[e.id].ⲆᐃᐃⲆ(Jo);
      }
      if (Gx.ⵠⲆⵠᐃ.open && e.id == 134) {
        Jx.ⵠⵠΔᐃΔ[e.id].ⲆᐃᐃⲆ(Jo);
      }
      if (Gx.ᐃΔⲆΔ.open && e.id == 109) {
        Jx.ⵠⵠΔᐃΔ[e.id].ⲆᐃᐃⲆ(Jo);
      }
      if (!!Gx.ΔᐃΔᐃ.open && (e.id == 109 || e.id == 131)) {
        Jx.ⵠⵠΔᐃΔ[e.id].ⲆᐃᐃⲆ(Jo);
      }
    }
    if (e && d < b.max) {
      var j = Ⲇⵠ[334][2];
      ΔΔ = e.info.translate.x;
      ΔΔⵠ = e.info.translate.y;
      ᐃΔⵠⵠ = 1;
      for (; d < b.max; d++, ᐃΔⵠⵠ++) {
        Kp(Jo, j, ΔΔ + ᐃΔⵠⵠ * (j.width + 5), ΔΔⵠ);
      }
    }
  }
  function cv(a) {
    if ((a = a / 100) <= 0.95) {
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.angle);
      if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
        if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
          this.ᐃⲆⵠ.ᐃᐃⵠ = false;
        }
        var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
        var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
        var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Jo.globalAlpha = 0.5;
      Pd(Jo, c, d, eq * 28, a);
      xd(Jo, null, "#000000", eq * 18);
      Jo.globalAlpha = 1;
      Pd(Jo, c, d, eq * 28, a);
      xd(Jo, null, xs.ⵠᐃᐃⵠⲆΔΔ[Fx.time], eq * 6);
      Jo.restore();
    }
  }
  function dv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[837][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function ev(a) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == sn) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    ⵠΔ = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2 + c, -ⲆΔΔ / 2 + d, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function fv() {
    var b = Gx.ⲆΔᐃⵠ;
    if (!b.ⲆΔᐃᐃᐃ && b.ᐃΔᐃⵠ > 0) {
      var c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      if (!c) {
        return;
      }
      Jo.save();
      if (uh[b.ᐃΔᐃⵠ].ⲆΔⵠⲆ === 0 && b.mode === 0) {
        Jo.translate(Gx.ᐃⵠⲆ.x + c.x, Gx.ᐃⵠⲆ.y + c.y);
        Jo.rotate(c.angle);
        Jo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Gx.ᐃⵠⲆ.x + (d - d % 100 + 50);
        e = Gx.ᐃⵠⲆ.y + (e - e % 100 + 50);
        Jo.translate(d, e);
      }
      var f = Ⲇⵠ[b.ᐃΔᐃⵠ][Fx.time];
      Jo.globalAlpha = 0.5;
      Kp(Jo, f, -f.width / 2, -f.height / 2);
      Jo.globalAlpha = 1;
      Jo.restore();
      if (uh[b.ᐃΔᐃⵠ].ⲆΔⵠⲆ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = xm(eq, Zb[336], 20, "#e2c340");
          } else {
            b.label[1] = xm(eq, Zb[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Kp(Jo, f, Eo + -f.width / 2, Jx.ᐃⵠⲆᐃ.y - 26);
      }
    }
    if (b.ⲆΔᐃᐃᐃ) {
      var i = b.timeout.ᐃᐃⵠ();
      for (var a = 0; a < b.ⲆⲆⵠΔⵠ.length; a++) {
        var j = b.ⲆⲆⵠΔⵠ[a];
        if (j.id == b.id) {
          var k = eq * 42;
          var l = eq * 17;
          kd(Jo, j.info.translate.x, j.info.translate.y + k * (1 - b.timeout.ⲆᐃΔ), j.info.width, k * b.timeout.ⲆᐃΔ + l, eq * 10);
          Jo.fillStyle = "#55B973";
          Jo.fill();
          Jo.globalAlpha = 0.8;
          j.ⲆᐃᐃⲆ(Jo);
        } else {
          Jo.globalAlpha = 0.5;
          j.ⲆᐃᐃⲆ(Jo);
        }
        Jo.globalAlpha = 1;
      }
      if (i) {
        b.ⲆΔᐃᐃᐃ = false;
        b.timeout.ⲆᐃΔ = 0;
        b.timeout.ᐃΔⲆ = Wh;
      }
      return Dh;
    }
    for (a = 0; a < b.ⲆⲆⵠΔⵠ.length; a++) {
      b.ⲆⲆⵠΔⵠ[a].ⲆᐃᐃⲆ(Jo);
    }
    return false;
  }
  function gv(b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = qe;
      }
      var c = eq * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600);
      var d = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * c;
      var e = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !Fx.transition) {
      var f = 0;
      for (var g = Fx.Ⲇᐃⵠ[0], a = 0; a < g.length; a++) {
        var h = ⵠᐃΔᐃ.ᐃⲆΔⵠ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - Ox / 1.5) : Math.min(1, this.opacity + Ox / 1.5);
      Jo.globalAlpha = this.opacity;
    }
    ⵠΔ = Ⲇⵠ[b][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2 + d, -ⲆΔΔ / 2 + e, Δⵠᐃ, ⲆΔΔ);
    Jo.globalAlpha = 1;
    Jo.restore();
  }
  function hv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[321][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function iv(b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var c = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var d = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * c;
      var e = c * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    var f = Ⲇⵠ[853].length;
    ⵠΔ = Ⲇⵠ[853][(this.ᐃΔⵠⵠ + this.Δᐃ % 2) % f][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    var g = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
    if (g && (Gx.id === this.ΔᐃᐃⲆ || Gx.ⵠⵠᐃⲆᐃᐃᐃ(this.ΔᐃᐃⲆ))) {
      if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - Ox, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Ox, 1);
      }
    } else if (g && ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ]) < 150) {
      this.opacity = Math.max(this.opacity - Ox, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Ox, 1);
    }
    var a = Jo.globalAlpha;
    Jo.globalAlpha *= this.opacity;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2 + d, -ⲆΔΔ / 2 + e, Δⵠᐃ, ⲆΔΔ);
    Jo.globalAlpha = a;
    Jo.restore();
  }
  function jv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[848][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function kv(a) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == z) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = Ja;
      }
      var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠΔ = Ⲇⵠ[872][Math.floor(this.id + this.color) % 5][Fx.time];
    Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    ⲆΔΔ = this.ᐃᐃΔⲆⵠ.ⲆᐃΔ * -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2 + c, -ⲆΔΔ / 2 + d, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function lv() {
    var a = Gx.ⲆΔᐃⵠ;
    if (a.ⲆΔᐃᐃᐃ) {
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + b.x, Gx.ᐃⵠⲆ.y + b.y);
      var c = Ⲇⵠ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - eq * 125;
      Kp(Jo, c, d, e);
      Jo.beginPath();
      Jo.lineWidth = eq * 5;
      Jo.strokeStyle = xs.ⵠᐃᐃⵠⲆΔΔ[Fx.time];
      Jo.lineCap = "round";
      Jo.arc(0, e + c.height / 2, eq * 25, 0, Math.PI * 2 * a.timeout.ⲆᐃΔ);
      Jo.stroke();
      Jo.restore();
    }
  }
  function mv() {
    var b = Gx.ᐃⵠⲆⵠᐃ;
    var c = Jx.ⲆⲆⲆⵠ;
    if (b.ᐃᐃⵠ) {
      b.ᐃᐃⵠ = false;
      var d = b.ᐃⲆⲆᐃⲆ;
      var e = c.ⲆⲆ.width;
      var f = c.ⲆⲆ.height;
      var i = c.ᐃ;
      var a = Fx.ⵠⲆΔᐃ;
      var j = false;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ⵠΔ, 0, 0);
      for (var k = 0; d.length > k; k++) {
        var l = a[d[k]];
        if ((Fx.mode !== 1 || l.ⲆⵠΔⵠΔ !== "spectator") && (Fx.mode !== 2 || l.ⵠⲆΔΔ !== 0)) {
          if (d[k] == Gx.id) {
            j = true;
            if (Fx.mode === 3 && l.ⵠⲆΔΔ === 0) {
              ᐃⲆ = "#FF0000";
            } else {
              ᐃⲆ = "#FFF";
            }
          } else if (Fx.mode === 3 && l.ⵠⲆΔΔ === 0) {
            ᐃⲆ = "#990000";
          } else {
            ᐃⲆ = "#A1BDCD";
          }
          i.drawImage(xm(eq, "" + (k + 1), eq * 15, ᐃⲆ), eq * 20, (40 + k * 22) * eq);
          l.ΔⵠΔⵠⵠΔⲆ ||= xm(eq, l.ⲆⵠΔⵠΔ, eq * 15, ᐃⲆ, Sa, undefined, undefined, undefined, eq * 110);
          i.drawImage(l.ΔⵠΔⵠⵠΔⲆ, eq * 39, eq * (40 + k * 22));
          i.drawImage(xm(eq, ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(l.ᐃⲆᐃⵠⲆ), eq * 15, ᐃⲆ), eq * 156, eq * (40 + k * 22));
        }
      }
      if (!j) {
        if (Fx.mode === 0 || Fx.mode === 3 || Fx.mode === 4 || Fx.mode === 5 || Fx.mode === 7 || Fx.mode === 1 && !Gx.ⲆⲆᐃⵠΔⲆⵠ || Fx.mode === 2 && !Gx.ⵠΔⲆⲆⲆ) {
          i.drawImage(Ⲇⵠ[306], eq * 15, (46 + k * 22) * eq);
          i.drawImage(xm(eq, ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(Fx.ⵠⲆΔᐃ[Gx.id].ᐃⲆᐃⵠⲆ), eq * 15, "#FFF"), eq * 100, (46 + k * 22) * eq);
        }
      }
    }
    Kp(Jo, c.ⲆⲆ, c.translate.x, c.translate.y);
  }
  function nv() {
    var a = Gx.ᐃⲆΔΔΔ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃⵠ();
      Jo.save();
      var c = Ⲇⵠ[794];
      Jo.translate(c.width - eq * 12, Jx.ᐃⵠⲆᐃ.translate.y - eq * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      Kp(Jo, c, d, e);
      Jo.beginPath();
      Jo.lineWidth = eq * 5;
      Jo.strokeStyle = xs.ⲆΔⲆⵠⵠᐃⵠ[Fx.time];
      Jo.lineCap = "round";
      Jo.arc(9, e + c.height / 2, eq * 25, 0, a.timeout.ⲆᐃΔ * (Math.PI * 2));
      Jo.stroke();
      Jo.restore();
      if (b) {
        a.wait = ft;
        a.timeout.ⲆᐃΔ = 0;
        a.timeout.ᐃΔⲆ = ul;
      }
    }
  }
  function ov() {
    var a = -8;
    if (Gx.ᐃⲆΔΔᐃ.enabled) {
      var b = Ⲇⵠ[546];
      Kp(Jo, b, Gx.ᐃⲆΔΔᐃ.translate.x, Gx.ᐃⲆΔΔᐃ.translate.y + a);
      a += 70;
    }
    if (Gx.ⲆΔᐃⲆⵠᐃᐃ === 1) {
      b = Ⲇⵠ[549];
      Kp(Jo, b, Gx.ᐃⲆΔΔᐃ.translate.x, Gx.ᐃⲆΔΔᐃ.translate.y + a);
      a += 70;
    } else if (Gx.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.x < 0.25 || Gx.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.x < 0.25 || Gx.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.x < 0.25 || Gx.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.x < 0.25 || Gx.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.x < 0.25) {
      b = Ⲇⵠ[548];
      Kp(Jo, b, Gx.ᐃⲆΔΔᐃ.translate.x, Gx.ᐃⲆΔΔᐃ.translate.y + a);
      a += 70;
    }
    if (Gx.ⵠⲆⲆᐃΔ > 0) {
      b = Ⲇⵠ[547];
      Kp(Jo, b, Gx.ᐃⲆΔΔᐃ.translate.x, Gx.ᐃⲆΔΔᐃ.translate.y + a);
      var c = Wu[Gx.ⵠⲆⲆᐃΔ];
      if (c === undefined) {
        c = xm(eq, Gx.ⵠⲆⲆᐃΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Wu[Gx.ⵠⲆⲆᐃΔ] = c;
      }
      if (Gx.ⵠⲆⲆᐃΔ < 9) {
        Kp(Jo, c, Gx.ᐃⲆΔΔᐃ.translate.x - 39, Gx.ᐃⲆΔΔᐃ.translate.y + a + 20);
      } else {
        Kp(Jo, c, Gx.ᐃⲆΔΔᐃ.translate.x - 46, Gx.ᐃⲆΔΔᐃ.translate.y + a + 20);
      }
    }
  }
  function pv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[811][Fx.time];
    Δⵠᐃ = -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function qv(a) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = ft;
      }
      var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = -e.width;
    ⲆΔΔ = -e.height;
    Kp(Jo, e, -Δⵠᐃ / 2 + c, -ⲆΔΔ / 2 + d, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function rv() {
    var a = Gx.ᐃΔᐃᐃΔ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃⵠ();
      Jo.save();
      var c = Ⲇⵠ[537];
      Jo.translate(c.width - eq * 2, Jx.ᐃⵠⲆᐃ.translate.y - eq * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      Kp(Jo, c, d, e);
      Jo.beginPath();
      Jo.lineWidth = eq * 5;
      Jo.strokeStyle = xs.ⵠᐃⵠⲆⲆᐃᐃ[Fx.time];
      Jo.lineCap = "round";
      Jo.arc(0, e + c.height / 2, eq * 25, 0, Math.PI * 2 * a.timeout.ⲆᐃΔ);
      Jo.stroke();
      Jo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆᐃΔ = 0;
        a.timeout.ᐃΔⲆ = sn;
      }
    }
  }
  function sv() {
    var a = Gx.ᐃⵠⵠⵠᐃ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃⵠ();
      Jo.save();
      var c = Ⲇⵠ[792];
      Jo.translate(c.width - eq * 2, Jx.ᐃⵠⲆᐃ.translate.y - eq * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      Kp(Jo, c, d, e);
      Jo.beginPath();
      Jo.lineWidth = eq * 5;
      Jo.strokeStyle = xs.ⲆΔⲆⵠⵠᐃⵠ[Fx.time];
      Jo.lineCap = "round";
      Jo.arc(9, e + c.height / 2, eq * 25, 0, a.timeout.ⲆᐃΔ * (Math.PI * 2));
      Jo.stroke();
      Jo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆᐃΔ = 0;
        a.timeout.ᐃΔⲆ = Zq;
      }
    }
  }
  var tv = 0;
  function uv(a, b, c) {
    if (a >= 0) {
      ⵠΔ = Ⲇⵠ[a][Fx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - (45 + b) * eq, -ⵠΔ.height / 2 + eq * (c + 22));
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (52 + b), -ⵠΔ.height / 4 + eq * (c + 20));
          break;
        case 98:
        case 99:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (57 + b), -ⵠΔ.height / 4 + eq * (c + 20));
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - (47 + b) * eq, -ⵠΔ.height / 4 + (c + 45) * eq);
          break;
        case 30:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - (52 + b) * eq, -ⵠΔ.height / 4 + eq * (c + 45));
          break;
        case 19:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (47 + b), -ⵠΔ.height / 4 + (c + 44) * eq);
          break;
        case 9:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - eq * (47 + b), -ⵠΔ.height / 2 + (c + 44) * eq);
          break;
        case 62:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - (40 + b) * eq, -ⵠΔ.height / 2 + eq * (c + 65));
          break;
        case 12:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (37 + b), -ⵠΔ.height / 4 + (c + 85) * eq);
          break;
        case 34:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (37 + b), -ⵠΔ.height / 4 + (c + 85) * eq);
          break;
        case 54:
        case 53:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (26 + b), -ⵠΔ.height / 4 + eq * (c + 77));
          break;
        case 17:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (37 + b), -ⵠΔ.height / 4 + eq * (c + 85));
          break;
        case 63:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (47 + b), -ⵠΔ.height / 4 + eq * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (37 + b), -ⵠΔ.height / 4 + (c + 30) * eq);
          break;
        case 56:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - (47 + b) * eq, -ⵠΔ.height / 4 + eq * (c + 35));
          break;
        case 92:
        case 93:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - (47 + b) * eq, -ⵠΔ.height / 4 + eq * (c + 40));
          break;
        case 89:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (47 + b), -ⵠΔ.height / 4 + eq * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (37 + b), -ⵠΔ.height / 4 + eq * (c + 90));
          break;
        case 18:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - (40 + b) * eq, -ⵠΔ.height / 4 + eq * (c + 85));
          break;
        case 16:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - (39 + b) * eq, -ⵠΔ.height / 2 + (c + 90) * eq);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - eq * (46 + b), -ⵠΔ.height / 2 + (c + 35) * eq);
          break;
        case 49:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - eq * (47 + b), -ⵠΔ.height / 2 + eq * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - eq * (46 + b), -ⵠΔ.height / 2 + eq * (c + 35));
          break;
        case 55:
          df(a, ⵠΔ, -ⵠΔ.width / 2 - eq * (47 + b), -ⵠΔ.height / 2 + eq * (c + 20));
      }
    }
  }
  function vv(a, b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠΔ = Ⲇⵠ[a][this.info][Fx.time];
    Δⵠᐃ = -ⵠΔ.width / 2;
    ⲆΔΔ = -ⵠΔ.height / 2;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == 0) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var c = ww(this.info, ⵠΔ, ᐃΔⵠⵠᐃⵠΔΔᐃ);
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function wv(a, b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    c = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = -c.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
    ⲆΔΔ = -c.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
    Kp(Jo, c, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == 0) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var c = Ⲇⵠ[b];
      Kp(Jo, c, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function xv() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      var a = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 0.5) % (Math.PI * 2);
    }
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.save();
    Jo.rotate(this.rotate);
    ⵠΔ = Ⲇⵠ[641][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.save();
    Jo.rotate(this.ⵠΔᐃⲆΔᐃΔΔᐃ);
    ⵠΔ = Ⲇⵠ[642][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.restore();
  }
  function yv() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var a = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[135][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
  }
  function zv() {
    if (this.info >= 10) {
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.angle);
      if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
        if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == hl) {
          this.ᐃⲆⵠ.ᐃᐃⵠ = ld;
        }
        var b = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
        var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
        var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      var e = Ⲇⵠ[115][Fx.time];
      var f = this.ⵠᐃᐃΔ.ⲆᐃΔ * -e.width;
      var g = this.ⵠᐃᐃΔ.ⲆᐃΔ * -e.height;
      Kp(Jo, e, -f / 2 + c, -g / 2 + d, f, g);
      Jo.restore();
    }
  }
  function Av() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    a = Ⲇⵠ[450][Fx.time];
    Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width);
    ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height);
    Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && ft == this.ᐃⲆⵠ.ᐃΔⲆ) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var a = Ⲇⵠ[464];
      Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    a = Ⲇⵠ[453][Fx.time];
    Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width * this.scale;
    ⲆΔΔ = this.scale * (-a.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
    Jo.save();
    Jo.translate(eq * -60, eq * 20);
    Jo.rotate(this.rotate.ⲆᐃΔ);
    Kp(Jo, a, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[468];
      Kp(Jo, a, eq * -Δⵠᐃ / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    a = Ⲇⵠ[454][Fx.time];
    Jo.save();
    Jo.translate(eq * 60, eq * 20);
    Jo.rotate(-this.rotate.ⲆᐃΔ);
    Kp(Jo, a, eq * -Δⵠᐃ / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[469];
      Kp(Jo, a, eq * -Δⵠᐃ / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.restore();
  }
  function Bv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var b = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[838][Fx.time];
      } else {
        f = Ⲇⵠ[191][Fx.time];
      }
      var g = -f.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      var a = -f.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[839][Fx.time];
      } else {
        f = Ⲇⵠ[192][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function Cv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = Ja;
      }
      var b = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[953][Fx.time];
      } else {
        f = Ⲇⵠ[204][Fx.time];
      }
      var g = -f.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      var a = -f.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[954][Fx.time];
      } else {
        f = Ⲇⵠ[205][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function Dv(a, b, c) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + b, Gx.ᐃⵠⲆ.y + c);
    Jo.rotate(this.angle);
    Jo.translate(this.x - b, this.y - c);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
    ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function Ev() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = ul;
      }
      var b = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
      var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[985][Fx.time];
      } else {
        f = Ⲇⵠ[210][Fx.time];
      }
      var g = -f.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      var a = -f.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[986][Fx.time];
      } else {
        f = Ⲇⵠ[211][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function Fv(a, b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    c = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -c.width;
    ⲆΔΔ = -c.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == sn) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var c = Ⲇⵠ[b];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function Gv(a) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = -ⵠΔ.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
    ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function Hv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.ΔΔⲆᐃⲆΔΔ.ᐃᐃⵠ();
    this.ⵠΔᐃⵠⲆᐃⵠ.ᐃᐃⵠ();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    c = this.info === 0 ? Ⲇⵠ[231][Fx.time] : Ⲇⵠ[1053][Fx.time];
    Δⵠᐃ = -c.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
    ⲆΔΔ = -c.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == Zq) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var c = Ⲇⵠ[1056];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⲆⲆᐃΔⵠ.ᐃᐃⵠ() && Wh == this.ⲆⲆᐃΔⵠ.ᐃΔⲆ) {
        this.action -= 4;
      }
      Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[1065];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle + b);
    Jo.translate(100, 0);
    Jo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[1060][Fx.time] : Ⲇⵠ[1059][Fx.time];
    Δⵠᐃ = this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ * -c.width;
    ⲆΔΔ = this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ * -c.height;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[1057];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[1066];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle + a + b);
    Jo.translate(100, 0);
    Jo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[1063][Fx.time] : Ⲇⵠ[1062][Fx.time];
    Δⵠᐃ = -c.width * this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ;
    ⲆΔΔ = -c.height * this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[1058];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[1067];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function Iv() {
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    a = this.info === 0 ? Ⲇⵠ[1042][Fx.time] : Ⲇⵠ[1044][Fx.time];
    Δⵠᐃ = -a.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
    ⲆΔΔ = -a.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
    Kp(Jo, a, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == Wh) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var a = Ⲇⵠ[1045];
      Kp(Jo, a, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function Jv() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var a = eq * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600);
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Jo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[157][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Jo.rotate(this.rotate);
    ⵠΔ = Ⲇⵠ[1214][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
  }
  function Kv() {
    if (this.info !== 10) {
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.angle);
      if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
        if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == Ja) {
          this.ᐃⲆⵠ.ᐃᐃⵠ = false;
        }
        var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
        var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
        var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = Ⲇⵠ[623][Fx.time];
      } else {
        e = Ⲇⵠ[287][Fx.time];
      }
      Kp(Jo, e, -e.width / 2 + c, -e.width / 2 + d);
      Jo.restore();
      for (var f = this.info & 15, g = 0; f > g; g++) {
        this.ⵠⲆⵠⵠ[g].ⲆᐃᐃⲆ(294);
      }
    }
  }
  function Lv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    a = this.info === 0 ? Ⲇⵠ[232][Fx.time] : Ⲇⵠ[1068][Fx.time];
    Δⵠᐃ = -a.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    ⲆΔΔ = -a.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == 0) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var a = Ⲇⵠ[1077];
      Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    a = this.info === 0 ? Ⲇⵠ[1072][Fx.time] : Ⲇⵠ[1071][Fx.time];
    Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width * this.scale;
    ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height * this.scale;
    Jo.save();
    Jo.translate(eq * -40, eq * 10);
    Jo.rotate(this.rotate.ⲆᐃΔ);
    Kp(Jo, a, eq * -Δⵠᐃ / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[1078];
      Kp(Jo, a, eq * -Δⵠᐃ / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    a = this.info === 0 ? Ⲇⵠ[1075][Fx.time] : Ⲇⵠ[1074][Fx.time];
    Jo.save();
    Jo.translate(eq * 40, eq * 10);
    Jo.rotate(-this.rotate.ⲆᐃΔ);
    Kp(Jo, a, eq * -Δⵠᐃ / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[1079];
      Kp(Jo, a, eq * -Δⵠᐃ / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.restore();
  }
  function Mv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    a = this.info === 0 ? Ⲇⵠ[233][Fx.time] : Ⲇⵠ[1083][Fx.time];
    Δⵠᐃ = -a.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height * this.scale;
    Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == 0) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var a = Ⲇⵠ[1092];
      Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    a = this.info === 0 ? Ⲇⵠ[1087][Fx.time] : Ⲇⵠ[1086][Fx.time];
    Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width * this.scale;
    ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height * this.scale;
    Jo.save();
    Jo.translate(eq * -40, eq * 10);
    Jo.rotate(this.rotate.ⲆᐃΔ);
    Kp(Jo, a, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[1093];
      Kp(Jo, a, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    a = this.info === 0 ? Ⲇⵠ[1090][Fx.time] : Ⲇⵠ[1089][Fx.time];
    Jo.save();
    Jo.translate(eq * 40, eq * 10);
    Jo.rotate(-this.rotate.ⲆᐃΔ);
    Kp(Jo, a, -Δⵠᐃ * eq / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[1094];
      Kp(Jo, a, eq * -Δⵠᐃ / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.restore();
  }
  function Nv() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = Yi;
      }
      var a = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Jo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[153][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Jo.rotate(this.rotate);
    ⵠΔ = Ⲇⵠ[1198][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
  }
  function Ov() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && Le == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = hl;
      }
      var a = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Jo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[154][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Jo.rotate(this.rotate);
    ⵠΔ = Ⲇⵠ[1202][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
  }
  function Pv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[526][Fx.time];
    Δⵠᐃ = this.ᐃᐃΔⲆⵠ.ⲆᐃΔ * -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function Qv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == ib) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var a = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠΔ = Ⲇⵠ[407][Fx.time];
    } else {
      ⵠΔ = Ⲇⵠ[119][Fx.time];
    }
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2 + b, -ⵠΔ.height / 2 + c);
    Jo.restore();
  }
  function Rv() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == Bs) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = ld;
      }
      var a = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃΔⲆᐃΔΔΔ = (this.ᐃΔⲆᐃΔΔΔ + Ox * 3) % (Math.PI * 2);
    this.ⵠⵠⵠⲆⵠⵠΔ = (this.ⵠⵠⵠⲆⵠⵠΔ - Ox * 3) % (Math.PI * 2);
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.save();
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[152][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.save();
    Jo.rotate(this.ᐃΔⲆᐃΔΔΔ);
    ⵠΔ = Ⲇⵠ[1194][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.save();
    Jo.rotate(this.ⵠⵠⵠⲆⵠⵠΔ);
    ⵠΔ = Ⲇⵠ[1193][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.restore();
  }
  function Sv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ⵠᐃᐃΔ.ᐃᐃⵠ();
    Jo.globalAlpha = 0.3;
    var a = Ⲇⵠ[282][Fx.time];
    var b = -a.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
    var c = -a.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
    Kp(Jo, a, -b / 2, -c / 2, b, c);
    Jo.globalAlpha = 1;
    Jo.restore();
  }
  function Tv(b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ⵠᐃᐃΔ.ᐃᐃⵠ();
    Jo.globalAlpha = 0.3;
    var c = Ⲇⵠ[282][Fx.time];
    var d = this.ⵠᐃᐃΔ.ⲆᐃΔ * -c.width;
    var e = this.ⵠᐃᐃΔ.ⲆᐃΔ * -c.height;
    Kp(Jo, c, -d / 2, -e / 2, d, e);
    Jo.globalAlpha = 1;
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = os;
      }
      var f = eq * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600);
      var g = f * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var h = f * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      g = 0;
      h = 0;
    }
    c = Ⲇⵠ[b][Fx.time];
    Kp(Jo, c, -c.width / 2 + g, -c.height / 2 + h);
    Jo.restore();
  }
  function Uv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Ox / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Ox, 1);
    }
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    a = Ⲇⵠ[449][Fx.time];
    Δⵠᐃ = this.scale * (-a.width * this.Δᐃⵠⵠ.ⲆᐃΔ);
    ⲆΔΔ = this.scale * (-a.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
    Kp(Jo, a, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == 0) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var a = Ⲇⵠ[463];
      Kp(Jo, a, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    a = Ⲇⵠ[451][Fx.time];
    Δⵠᐃ = -a.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height);
    Jo.save();
    Jo.translate(eq * -30, eq * 70);
    Jo.rotate(this.rotate.ⲆᐃΔ);
    Kp(Jo, a, eq * -10, eq * -40, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[466];
      Kp(Jo, a, eq * -10, eq * -40, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    a = Ⲇⵠ[452][Fx.time];
    Jo.save();
    Jo.translate(eq * 30, eq * 70);
    Jo.rotate(-this.rotate.ⲆᐃΔ);
    Kp(Jo, a, eq * 10 - Δⵠᐃ, eq * -40, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      a = Ⲇⵠ[467];
      Kp(Jo, a, eq * 10 - Δⵠᐃ, eq * -40, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.restore();
  }
  function Vv() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var a = eq * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600);
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Jo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[156][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Jo.rotate(this.rotate);
    ⵠΔ = Ⲇⵠ[1210][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
  }
  function Wv(a, b, c) {
    if (a >= 0) {
      ⵠΔ = Ⲇⵠ[a][Fx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - (0 + b) * eq, -ⵠΔ.height / 4 + (c + 35) * eq);
          break;
        case 74:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (1 + b), -ⵠΔ.height / 4 + eq * (c + 45));
          break;
        case 75:
        case 76:
          wf(a, ⵠΔ, -ⵠΔ.width / 4 - eq * (1 + b), -ⵠΔ.height / 4 + eq * (c + 40));
      }
    }
  }
  function Xv() {
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    a = this.info === 0 ? Ⲇⵠ[248][Fx.time] : Ⲇⵠ[1222][Fx.time];
    Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width;
    ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height;
    Kp(Jo, a, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == z) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var a = Ⲇⵠ[1223];
      Kp(Jo, a, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function Yv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && Wh == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = xo;
      }
      var b = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
      var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var d = b * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[812][Fx.time];
      } else {
        f = Ⲇⵠ[188][Fx.time];
      }
      var g = this.ⵠᐃᐃΔ.ⲆᐃΔ * -f.width;
      var a = this.ⵠᐃᐃΔ.ⲆᐃΔ * -f.height;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[813][Fx.time];
      } else {
        f = Ⲇⵠ[189][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function Zv() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ld == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var a = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠΔ = Ⲇⵠ[183][Fx.time];
    } else {
      ⵠΔ = Ⲇⵠ[802][Fx.time][this.info - 1];
    }
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2 + b, -ⵠΔ.height / 2 + c);
    Jo.restore();
  }
  function $v() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ᐃⲆᐃΔⲆ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[288][Fx.time];
    Δⵠᐃ = this.ᐃⲆᐃΔⲆ.ⲆᐃΔ * -ⵠΔ.width;
    ⲆΔΔ = -ⵠΔ.height * this.ᐃⲆᐃΔⲆ.ⲆᐃΔ;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[289][Fx.time];
    Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    ⲆΔΔ = this.ᐃᐃΔⲆⵠ.ⲆᐃΔ * -ⵠΔ.height;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function _v() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[1192][Fx.time];
    Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    ⲆΔΔ = -ⵠΔ.height * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function aw() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; b > c; c++) {
        this.ⵠⲆⵠⵠ[c].ⲆᐃᐃⲆ(207, this.x, this.y);
      }
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.angle);
      if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
        if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && qe == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) {
          this.ᐃⲆⵠ.ᐃᐃⵠ = false;
        }
        var d = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
        var e = d * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
        var f = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * d;
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = Ⲇⵠ[958][Fx.time];
      } else {
        g = Ⲇⵠ[957][Fx.time];
      }
      Kp(Jo, g, -g.width / 2 + e, -g.width / 2 + f);
      Jo.restore();
    }
  }
  function bw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ᐃΔⵠΔⲆⲆΔ = Math.min(1, this.ᐃΔⵠΔⲆⲆΔ + Ox * 2);
    Jo.globalAlpha = this.ᐃΔⵠΔⲆⲆΔ * Math.min(1, Math.max(0, ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r) / 80));
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[247][Fx.time][this.ⵠⲆΔⵠⵠ];
    if (this.ⵠⲆΔⵠⵠ < 2) {
      Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.width;
      ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -ⵠΔ.height;
    } else if (this.ⲆⵠⲆⵠⲆᐃⲆ === 0) {
      Δⵠᐃ = -ⵠΔ.width;
      ⲆΔΔ = -ⵠΔ.height;
    } else {
      Δⵠᐃ = -ⵠΔ.width * 1.35;
      ⲆΔΔ = -ⵠΔ.height * 1.35;
    }
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.globalAlpha = 1;
    Jo.restore();
  }
  function cw(f, e, i, j, k, n, a, o = 0, p) {
    for (var h = f; h <= e; h++) {
      for (var q = i; j >= q; q++) {
        var r = Cx.Ⲇᐃⵠᐃ[h][q];
        if (Sa !== r && Cs !== r[n]) {
          var s = r[n];
          var t = Ⲇⵠ[k][Fx.time][s.ᐃᐃⲆⵠⲆⵠⵠ];
          Kp(Jo, t, Gx.ᐃⵠⲆ.x + s.x - t.width / (ⲆⲆΔⵠΔ * 4), Gx.ᐃⵠⲆ.y + s.y - t.height / (ⲆⲆΔⵠΔ * 4), t.width / (ⲆⲆΔⵠΔ * 2), t.height / (ⲆⲆΔⵠΔ * 2));
          if (Ex.ΔⲆᐃᐃΔ) {
            var w = 2147483648;
            var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
            if (x < 0.2) {
              x = Math.floor(Ⲇⵠ[1025][Fx.time][s.ᐃᐃⲆⵠⲆⵠⵠ].length * (x * 5));
              t = Ⲇⵠ[1025][Fx.time][s.ᐃᐃⲆⵠⲆⵠⵠ][x];
              Kp(Jo, t, Gx.ᐃⵠⲆ.x + s.x - t.width / (ⲆⲆΔⵠΔ * 4), Gx.ᐃⵠⲆ.y + s.y - t.height / (ⲆⲆΔⵠΔ * 4), t.width / (ⲆⲆΔⵠΔ * 2), t.height / (ⲆⲆΔⵠΔ * 2));
            } else if (s.ⲆⵠⲆⵠᐃΔᐃ !== 0) {
              t = Ⲇⵠ[1026][Fx.time];
              var y = (tv + h % 2 * 30) % 60;
              Jo.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
              Kp(Jo, t, Gx.ᐃⵠⲆ.x + s.x - t.width / (ⲆⲆΔⵠΔ * 4), Gx.ᐃⵠⲆ.y + s.y - t.height / (ⲆⲆΔⵠΔ * 4) - 30 + y, t.width / (ⲆⲆΔⵠΔ * 2), t.height / (ⲆⲆΔⵠΔ * 2));
              Jo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function dw() {
    var a = undefined;
    var b = undefined;
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    if (this.ΔΔᐃⲆᐃ >= 0.1 && this.ΔΔᐃⲆᐃ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ΔΔᐃⲆᐃ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = Ⲇⵠ[1150][Fx.time];
      Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width;
      ⲆΔΔ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.height;
      Jo.globalAlpha = c;
      Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      b = Ⲇⵠ[1151];
    }
    if (this.ΔΔᐃⲆᐃ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ΔΔᐃⲆᐃ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = Ⲇⵠ[1152][Fx.time];
      Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -a.width;
      ⲆΔΔ = -a.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
      Jo.globalAlpha = c;
      Kp(Jo, a, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      b = Ⲇⵠ[1153];
    }
    if (this.action & 2 && b !== undefined) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == Qg) {
        this.action -= 2;
      }
      Jo.globalAlpha = (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ) * c;
      Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width;
      ⲆΔΔ = -b.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
      Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    }
    Jo.globalAlpha = 1;
    Jo.restore();
  }
  function ew() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    var a = ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Ox / 2, 1.8) : Math.max(this.scale - Ox, 1);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    this.ΔⵠⲆⵠ = a < 350 ? Math.max(0, this.ΔⵠⲆⵠ - Ox * 2.2) : Math.min(1, this.ΔⵠⲆⵠ + Ox * 2.2);
    b = Ⲇⵠ[1135][Fx.time];
    Δⵠᐃ = -b.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    ⲆΔΔ = -b.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    Jo.globalAlpha = 1 - this.ΔⵠⲆⵠ;
    Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    b = Ⲇⵠ[1119][Fx.time];
    Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width);
    ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -b.height);
    Jo.globalAlpha = this.ΔⵠⲆⵠ;
    Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == Yi) {
        this.action -= 2;
      }
      Jo.globalAlpha = (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ) * (1 - this.ΔⵠⲆⵠ);
      var b = Ⲇⵠ[1136];
      Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width * this.scale;
      ⲆΔΔ = this.scale * (-b.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
      Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = this.ΔⵠⲆⵠ * (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
      b = Ⲇⵠ[1128];
      Δⵠᐃ = this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width * this.scale;
      ⲆΔΔ = -b.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
      Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    b = Ⲇⵠ[1122][Fx.time];
    Δⵠᐃ = this.scale * (-b.width * this.Δᐃⵠⵠ.ⲆᐃΔ);
    ⲆΔΔ = this.scale * (-b.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
    Jo.save();
    Jo.translate(eq * -40, eq * 80);
    Jo.rotate(this.rotate.ⲆᐃΔ);
    Jo.globalAlpha = this.ΔⵠⲆⵠ;
    Kp(Jo, b, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ) * this.ΔⵠⲆⵠ;
      b = Ⲇⵠ[1129];
      Kp(Jo, b, eq * -Δⵠᐃ / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    b = Ⲇⵠ[1125][Fx.time];
    Jo.save();
    Jo.translate(eq * 40, eq * 80);
    Jo.rotate(-this.rotate.ⲆᐃΔ);
    Jo.globalAlpha = this.ΔⵠⲆⵠ;
    Kp(Jo, b, eq * -Δⵠᐃ / 4, eq * -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = this.ΔⵠⲆⵠ * (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
      b = Ⲇⵠ[1130];
      Kp(Jo, b, eq * -Δⵠᐃ / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.globalAlpha = 1;
    Jo.restore();
    Jo.restore();
  }
  function fw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[970][Fx.time];
      } else {
        f = Ⲇⵠ[208][Fx.time];
      }
      var g = this.ⵠᐃᐃΔ.ⲆᐃΔ * -f.width;
      var a = this.ⵠᐃᐃΔ.ⲆᐃΔ * -f.height;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[971][Fx.time];
      } else {
        f = Ⲇⵠ[209][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function gw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    this.ᐃᐃΔⲆⵠ.ᐃᐃⵠ();
    ⵠΔ = Ⲇⵠ[289][Fx.time];
    Δⵠᐃ = -ⵠΔ.width * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    ⲆΔΔ = -ⵠΔ.height * this.ᐃᐃΔⲆⵠ.ⲆᐃΔ;
    Kp(Jo, ⵠΔ, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    Jo.restore();
  }
  function hw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    var a = ⵠᐃΔᐃ.ᐃⲆΔⵠ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Ox / 2, 1.8) : Math.max(this.scale - Ox, 1);
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.rotate.ᐃᐃⵠ();
    this.ΔⵠⲆⵠ = a < 350 ? Math.max(0, this.ΔⵠⲆⵠ - Ox * 2.2) : Math.min(1, this.ΔⵠⲆⵠ + Ox * 2.2);
    b = (this.info & 1) === 0 ? Ⲇⵠ[1113][Fx.time] : Ⲇⵠ[1114][Fx.time];
    Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width);
    ⲆΔΔ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -b.height);
    Jo.globalAlpha = 1 - this.ΔⵠⲆⵠ;
    Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    b = (this.info & 1) === 0 ? Ⲇⵠ[235][Fx.time] : Ⲇⵠ[1098][Fx.time];
    Δⵠᐃ = -b.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    ⲆΔΔ = -b.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
    Jo.globalAlpha = this.ΔⵠⲆⵠ;
    Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == ld) {
        this.action -= 2;
      }
      Jo.globalAlpha = (1 - this.ΔⵠⲆⵠ) * (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
      var b = Ⲇⵠ[1115];
      Δⵠᐃ = -b.width * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
      ⲆΔΔ = -b.height * this.Δᐃⵠⵠ.ⲆᐃΔ * this.scale;
      Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = this.ΔⵠⲆⵠ * (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
      b = Ⲇⵠ[1107];
      Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width);
      ⲆΔΔ = this.scale * (-b.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
      Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    b = this.info & 1 ? Ⲇⵠ[1101][Fx.time] : Ⲇⵠ[1102][Fx.time];
    Δⵠᐃ = this.scale * (this.Δᐃⵠⵠ.ⲆᐃΔ * -b.width);
    ⲆΔΔ = this.scale * (-b.height * this.Δᐃⵠⵠ.ⲆᐃΔ);
    Jo.save();
    Jo.translate(eq * -20, eq * 0);
    Jo.rotate(this.rotate.ⲆᐃΔ);
    Jo.globalAlpha = this.ΔⵠⲆⵠ;
    Kp(Jo, b, eq * -Δⵠᐃ / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = this.ΔⵠⲆⵠ * (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
      b = Ⲇⵠ[1108];
      Kp(Jo, b, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    b = (this.info & 1) === 0 ? Ⲇⵠ[1105][Fx.time] : Ⲇⵠ[1104][Fx.time];
    Jo.save();
    Jo.translate(eq * 20, eq * 0);
    Jo.rotate(-this.rotate.ⲆᐃΔ);
    Jo.globalAlpha = this.ΔⵠⲆⵠ;
    Kp(Jo, b, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
    if (this.action & 2) {
      Jo.globalAlpha = this.ΔⵠⲆⵠ * (0.6 - this.ᐃⲆⵠ.ⲆᐃΔ);
      b = Ⲇⵠ[1109];
      Kp(Jo, b, -Δⵠᐃ * eq / 4, -ⲆΔΔ * eq / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
      Jo.globalAlpha = 1;
    }
    Jo.globalAlpha = 1;
    Jo.restore();
    Jo.restore();
  }
  function iw() {
    if ((this.info & 1) == 1) {
      this.ΔΔᐃⲆᐃ = Math.min(this.ΔΔᐃⲆᐃ + Ox, 2.2);
    } else {
      this.ΔΔᐃⲆᐃ = Math.max(this.ΔΔᐃⲆᐃ - Ox, 0);
      this.ⲆᐃΔⵠᐃⵠᐃ += Ox;
      if (this.ⲆᐃΔⵠᐃⵠᐃ > 0.1) {
        this.ⲆᐃΔⵠᐃⵠᐃ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ⵠᐃᐃΔ.push(a);
      }
    }
    for (var b = 0; this.ⵠᐃᐃΔ.length > b; b++) {
      a = this.ⵠᐃᐃΔ[b];
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + a.x, Gx.ᐃⵠⲆ.y + a.y);
      a.a = Math.min(1, 0 + Ox / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Jo.globalAlpha = c * 0.8;
      yd(Jo, 0, 0, a.r);
      xd(Jo, xs.ᐃΔΔⲆⵠᐃΔ[Fx.time]);
      Jo.restore();
      if (1 === 0) {
        this.ⵠᐃᐃΔ.splice(b, 1);
        b--;
      }
    }
  }
  function jw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔΔΔΔⲆ.length == 0 || xs.ⲆⵠⵠⲆΔⲆⵠ >= this.ΔΔΔΔⲆ[this.ΔΔΔΔⲆ.length - 1])) {
      this.ΔΔΔΔⲆ.push(xs.ⵠᐃⲆΔⲆᐃⵠ);
    }
    for (var a = 0; a < this.ΔΔΔΔⲆ.length; a++) {
      this.ΔΔΔΔⲆ[a] = Math.max(0, this.ΔΔΔΔⲆ[a] - xs.ⵠᐃᐃᐃΔⵠⲆ * Ox);
      Jo.globalAlpha = this.ΔΔΔΔⲆ[a] / 1.3;
      var b = (1 - this.ΔΔΔΔⲆ[a]) * 40;
      var c = (1 - this.ΔΔΔΔⲆ[a]) * 35 + 10;
      yd(Jo, eq * -68 + Math.sin(-this.angle - Math.PI / 2) * b, eq * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
      xd(Jo, "#333333");
    }
    Jo.globalAlpha = 1;
    if (this.ΔΔΔΔⲆ.length > 0 && this.ΔΔΔΔⲆ[0] === 0) {
      this.ΔΔΔΔⲆ.shift();
    }
    Jo.restore();
  }
  function kw() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = Bs;
      }
      var a = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var b = a * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var c = a * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃΔⲆᐃΔΔΔ = (this.ᐃΔⲆᐃΔΔΔ + Ox * 3) % (Math.PI * 2);
    this.ⵠⵠⵠⲆⵠⵠΔ = (this.ⵠⵠⵠⲆⵠⵠΔ - Ox * 3) % (Math.PI * 2);
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.save();
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[151][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.save();
    Jo.rotate(this.ᐃΔⲆᐃΔΔΔ);
    ⵠΔ = Ⲇⵠ[528][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.save();
    Jo.rotate(this.ⵠⵠⵠⲆⵠⵠΔ);
    ⵠΔ = Ⲇⵠ[527][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
    Jo.restore();
  }
  const lw = {};
  lw.get = function (a, b) {
    if (b !== "ᐃⲆᐃᐃⲆΔⵠ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 6310; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return jg.Reflect.get(...arguments);
  };
  function mw() {
    if (this.info >= 10) {
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.angle);
      if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
        if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
          this.ᐃⲆⵠ.ᐃᐃⵠ = false;
        }
        var b = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
        var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
        var d = b * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      var e = Ⲇⵠ[206][Fx.time];
      var f = this.ⵠᐃᐃΔ.ⲆᐃΔ * -e.width;
      var g = this.ⵠᐃᐃΔ.ⲆᐃΔ * -e.height;
      Kp(Jo, e, -f / 2 + c, -g / 2 + d, f, g);
      Jo.restore();
    }
  }
  function nw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && ft == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var b = eq * ((1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600);
      var c = b * Math.sin(this.ᐃⲆⵠ.angle - this.angle);
      var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = Ⲇⵠ[716][Fx.time];
      Kp(Jo, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ᐃᐃⵠ();
      var e = Ⲇⵠ[720][Fx.time];
      var f = -e.width * this.up.ⲆᐃΔ;
      var g = -e.height * this.up.ⲆᐃΔ;
      Kp(Jo, e, -f / 2 + eq * 1, -g / 2 + eq * 3, f, g);
    } else {
      e = Ⲇⵠ[144][Fx.time];
      Kp(Jo, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Jo.restore();
  }
  function ow() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && Yi == this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = qa;
      }
      var b = Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600 * eq;
      var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[849][Fx.time];
      } else {
        f = Ⲇⵠ[193][Fx.time];
      }
      var g = -f.width * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      var a = -f.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = Ⲇⵠ[869][Fx.time];
      } else {
        f = Ⲇⵠ[194][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function pw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = false;
      }
      var b = (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * Ox * 600 * eq;
      var c = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃⲆⵠ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Jo.rotate(this.angle);
      this.ⵠᐃᐃΔ.ᐃᐃⵠ();
      if (this.info & 16) {
        var f = Ⲇⵠ[668][Fx.time];
      } else {
        f = Ⲇⵠ[132][Fx.time];
      }
      var g = this.ⵠᐃᐃΔ.ⲆᐃΔ * -f.width;
      var a = -f.height * this.ⵠᐃᐃΔ.ⲆᐃΔ;
      Kp(Jo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ⵠⵠⲆⲆᐃᐃⲆ.ᐃᐃⵠ();
      if (this.info & 16) {
        f = Ⲇⵠ[638][Fx.time];
      } else {
        f = Ⲇⵠ[134][Fx.time];
      }
      Jo.translate(0, f.height / 2);
      Jo.rotate(this.ⵠⵠⲆⲆᐃᐃⲆ.ⲆᐃΔ);
      Kp(Jo, f, c - f.width / 2, -f.height + d);
    }
    Jo.restore();
  }
  function qw(a, b) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    c = Ⲇⵠ[a][Fx.time];
    Δⵠᐃ = -c.width;
    ⲆΔΔ = -c.height;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == Wh) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var c = Ⲇⵠ[b];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function rw() {
    if (this.ᐃⲆⵠ.ᐃᐃⵠ) {
      if (this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ᐃΔⲆ == 0) {
        this.ᐃⲆⵠ.ᐃᐃⵠ = Wh;
      }
      var a = eq * (Ox * (1 - this.ᐃⲆⵠ.ⲆⲆᐃᐃ.ⲆᐃΔ) * 600);
      var b = Math.sin(this.ᐃⲆⵠ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃⲆⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Jo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x + b, Gx.ᐃⵠⲆ.y + this.y + c);
    Jo.rotate(this.angle);
    ⵠΔ = Ⲇⵠ[155][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ox * 3) % (Math.PI * 2);
    }
    Jo.rotate(this.rotate);
    ⵠΔ = Ⲇⵠ[1206][Fx.time];
    Kp(Jo, ⵠΔ, -ⵠΔ.width / 2, -ⵠΔ.height / 2);
    Jo.restore();
  }
  function sw() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.Δᐃⵠⵠ.ᐃᐃⵠ();
    this.ΔΔⲆᐃⲆΔΔ.ᐃᐃⵠ();
    this.ⵠΔᐃⵠⲆᐃⵠ.ᐃᐃⵠ();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle);
    c = this.info === 0 ? Ⲇⵠ[887][Fx.time] : Ⲇⵠ[886][Fx.time];
    Δⵠᐃ = -c.width * this.Δᐃⵠⵠ.ⲆᐃΔ;
    ⲆΔΔ = -c.height * this.Δᐃⵠⵠ.ⲆᐃΔ;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == 0) {
        this.action -= 2;
      }
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      var c = Ⲇⵠ[888];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ⲆⲆᐃΔⵠ.ᐃᐃⵠ() && this.ⲆⲆᐃΔⵠ.ᐃΔⲆ == 0) {
        this.action -= 4;
      }
      Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[891];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle + b);
    Jo.translate(55, 0);
    Jo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[894][Fx.time] : Ⲇⵠ[896][Fx.time];
    Δⵠᐃ = -c.width * this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ;
    ⲆΔΔ = this.ΔΔⲆᐃⲆΔΔ.ⲆᐃΔ * -c.height;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[889];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[892];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    Jo.rotate(this.angle + a + b);
    Jo.translate(55, 0);
    Jo.rotate(a);
    c = this.info === 0 ? Ⲇⵠ[895][Fx.time] : Ⲇⵠ[897][Fx.time];
    Δⵠᐃ = -c.width * this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ;
    ⲆΔΔ = this.ⵠΔᐃⵠⲆᐃⵠ.ⲆᐃΔ * -c.height;
    Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
    if (this.action & 2) {
      Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[890];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    if (this.action & 4) {
      Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
      c = Ⲇⵠ[893];
      Kp(Jo, c, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      Jo.globalAlpha = 1;
    }
    Jo.restore();
  }
  function tw(a) {
    if (a > 0) {
      var b = Ⲇⵠ[a][Fx.time];
      switch (a) {
        case 58:
          df(a, b, -b.width / 2 + eq * 2, -b.height / 2 - eq * 5);
          break;
        case 10:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 18);
          break;
        case 11:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 10);
          break;
        case 23:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 19);
          break;
        case 24:
          wf(a, b, -b.width / 4, -b.height / 4 - eq * 20);
          break;
        case 25:
          df(a, b, -b.width / 2 - eq * 1, -b.height / 2 - eq * 23);
          break;
        case 26:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 5);
          break;
        case 27:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 43:
          df(a, b, -b.width / 2 + eq * 1.5, -b.height / 2 - eq * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          wf(a, b, -b.width / 4, -b.height / 4 + eq * 2);
          break;
        case 41:
        case 42:
          df(a, b, -b.width / 2 - eq * 5, -b.height / 2 - eq * 2);
          break;
        case 40:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 85:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 48:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 2);
          break;
        case 47:
          df(a, b, -b.width / 2 + eq * 2, -b.height / 2);
          break;
        case 59:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 5);
          break;
        case 77:
        case 78:
        case 79:
          df(a, b, -b.width / 2 - eq * 1, -b.height / 2);
          break;
        case 83:
          df(a, b, -b.width / 2, -b.height / 2 + eq * 2);
          break;
        case 84:
        case 86:
          df(a, b, -b.width / 2, -b.height / 2 + eq * 8);
          break;
        case 61:
          df(a, b, -b.width / 2, -b.height / 2 - eq * 4);
      }
    }
  }
  function uw() {
    if (!this.ΔⲆⵠⲆᐃ && this.ⵠⵠΔⵠΔ !== 0) {
      if (this.r.x != this.x || this.y != this.r.y) {
        var a = (ⵠᐃΔᐃ.ⵠᐃⵠΔⲆⵠⲆ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⲆΔΔᐃⲆ = ⵠᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ(a, this.ⲆΔΔᐃⲆ);
        this.ⲆΔΔᐃⲆ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ⲆΔΔᐃⲆ, a, 0.018);
      }
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Jo.rotate(this.ⲆΔΔᐃⲆ);
      if (this.ⵠⵠΔⵠΔ === 223) {
        if (this.ΔⲆⵠⵠΔ > 50 || this.ΔΔⵠᐃⵠ > 0) {
          if (this.ΔⲆⵠⵠΔ > 50) {
            this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox);
          } else {
            this.ΔΔⵠᐃⵠ = Math.max(0, this.ΔΔⵠᐃⵠ - Ox);
          }
          Jo.globalAlpha = this.ΔΔⵠᐃⵠ;
          var b = Ⲇⵠ[225][Fx.time];
          wf(225, b, -b.width / 4, -b.height / 4);
          Jo.globalAlpha = 1;
        }
        b = Ⲇⵠ[223][Fx.time];
        wf(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠΔⵠΔ === 229) {
        this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, 0.018);
        this.ΔᐃⵠΔⵠⲆᐃ.ᐃᐃⵠ();
        if (this.ΔⲆⵠⵠΔ > 85) {
          this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox / 4);
        } else {
          this.ΔΔⵠᐃⵠ = Math.max(0.1, this.ΔΔⵠᐃⵠ - Ox);
        }
        b = Ⲇⵠ[1100][Fx.time];
        wf(1100, b, -b.width / 4, -b.height / 4);
        b = Ⲇⵠ[1103][Fx.time];
        Δⵠᐃ = -b.width;
        ⲆΔΔ = -b.height;
        Jo.save();
        Jo.translate(eq * -20, eq * -20);
        Jo.rotate(this.ΔΔⵠᐃⵠ * this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ);
        Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
        Jo.restore();
        b = Ⲇⵠ[1106][Fx.time];
        Jo.save();
        Jo.translate(eq * 20, eq * -20);
        Jo.rotate(this.ΔΔⵠᐃⵠ * -this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ);
        Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
        Jo.restore();
      } else if (this.ⵠⵠΔⵠΔ === 228) {
        this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, 0.018);
        this.ΔᐃⵠΔⵠⲆᐃ.ᐃᐃⵠ();
        if (this.ΔⲆⵠⵠΔ > 85) {
          this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox / 4);
        } else {
          this.ΔΔⵠᐃⵠ = Math.max(0.1, this.ΔΔⵠᐃⵠ - Ox);
        }
        b = Ⲇⵠ[1085][Fx.time];
        wf(1085, b, -b.width / 4, -b.height / 4);
        b = Ⲇⵠ[1088][Fx.time];
        Δⵠᐃ = -b.width;
        ⲆΔΔ = -b.height;
        Jo.save();
        Jo.translate(eq * -40, eq * -45);
        Jo.rotate(this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ * this.ΔΔⵠᐃⵠ);
        Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
        Jo.restore();
        b = Ⲇⵠ[1091][Fx.time];
        Jo.save();
        Jo.translate(eq * 40, eq * -45);
        Jo.rotate(this.ΔΔⵠᐃⵠ * -this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ);
        Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
        Jo.restore();
      } else if (this.ⵠⵠΔⵠΔ === 227) {
        this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, 0.018);
        this.ΔᐃⵠΔⵠⲆᐃ.ᐃᐃⵠ();
        if (this.ΔⲆⵠⵠΔ > 85) {
          this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox / 4);
        } else {
          this.ΔΔⵠᐃⵠ = Math.max(0.1, this.ΔΔⵠᐃⵠ - Ox);
        }
        b = Ⲇⵠ[1070][Fx.time];
        wf(1070, b, -b.width / 4, -b.height / 4);
        b = Ⲇⵠ[1073][Fx.time];
        Δⵠᐃ = -b.width;
        ⲆΔΔ = -b.height;
        Jo.save();
        Jo.translate(eq * -40, eq * -45);
        Jo.rotate(this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ * this.ΔΔⵠᐃⵠ);
        Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
        Jo.restore();
        b = Ⲇⵠ[1076][Fx.time];
        Jo.save();
        Jo.translate(eq * 40, eq * -45);
        Jo.rotate(-this.ΔᐃⵠΔⵠⲆᐃ.ⲆᐃΔ * this.ΔΔⵠᐃⵠ);
        Kp(Jo, b, -Δⵠᐃ / 4, -ⲆΔΔ / 4, Δⵠᐃ / 2, ⲆΔΔ / 2);
        Jo.restore();
      } else if (this.ⵠⵠΔⵠΔ === 91) {
        this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, 0.018);
        b = Ⲇⵠ[91][Fx.time];
        wf(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠΔⵠΔ === 230) {
        this.ΔⵠⲆⵠΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(this.ΔⵠⲆⵠΔ, this.ΔⲆⵠⵠΔ, 0.018);
        b = Ⲇⵠ[236][Fx.time];
        wf(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠΔⵠΔ === 224) {
        b = Ⲇⵠ[224][Fx.time];
        wf(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠΔⵠΔ === 239) {
        b = Ⲇⵠ[1221][Fx.time];
        if (this.ΔⲆⵠⵠΔ > 85) {
          this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox / 4);
        } else {
          this.ΔΔⵠᐃⵠ = Math.max(0, this.ΔΔⵠᐃⵠ - Ox);
        }
        this.ⵠᐃⲆᐃⵠ += Ox * 60;
        if (this.ⵠᐃⲆᐃⵠ > 60) {
          this.ⵠᐃⲆᐃⵠ -= 60;
        }
        var c = ((this.ⵠᐃⲆᐃⵠ < 30 ? this.ⵠᐃⲆᐃⵠ / 30 : 1 - (this.ⵠᐃⲆᐃⵠ - 30) / 30) * 12 - 6) * this.ΔΔⵠᐃⵠ;
        wf(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⵠⵠΔⵠΔ === 225) {
        b = Ⲇⵠ[1043][Fx.time];
        if (this.ΔⲆⵠⵠΔ > 85) {
          this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox / 4);
        } else {
          this.ΔΔⵠᐃⵠ = Math.max(0, this.ΔΔⵠᐃⵠ - Ox);
        }
        this.ⵠᐃⲆᐃⵠ += Ox * 60;
        if (this.ⵠᐃⲆᐃⵠ > 60) {
          this.ⵠᐃⲆᐃⵠ -= 60;
        }
        c = this.ΔΔⵠᐃⵠ * ((this.ⵠᐃⲆᐃⵠ < 30 ? this.ⵠᐃⲆᐃⵠ / 30 : 1 - (this.ⵠᐃⲆᐃⵠ - 30) / 30) * 12 - 6);
        wf(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⵠⵠΔⵠΔ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = Ⲇⵠ[1055][Fx.time];
        if (this.ΔⲆⵠⵠΔ > 85) {
          this.ΔΔⵠᐃⵠ = Math.min(1, this.ΔΔⵠᐃⵠ + Ox / 4);
        } else {
          this.ΔΔⵠᐃⵠ = Math.max(0, this.ΔΔⵠᐃⵠ - Ox);
        }
        this.ⵠᐃⲆᐃⵠ += Ox * 60;
        if (this.ⵠᐃⲆᐃⵠ > 60) {
          this.ⵠᐃⲆᐃⵠ -= 60;
        }
        c = this.ΔΔⵠᐃⵠ * ((this.ⵠᐃⲆᐃⵠ < 30 ? this.ⵠᐃⲆᐃⵠ / 30 : 1 - (this.ⵠᐃⲆᐃⵠ - 30) / 30) * 12 - 6);
        wf(1055, b, -b.width / 4 + c, -b.height / 4);
        Jo.restore();
        Jo.save();
        Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
        Jo.rotate(Math.PI + this.ⲆΔΔᐃⲆ + e);
        Jo.translate(120, c);
        Jo.rotate(d);
        b = Ⲇⵠ[1060][Fx.time];
        Δⵠᐃ = -b.width;
        ⲆΔΔ = -b.height;
        Kp(Jo, b, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
        Jo.restore();
        Jo.save();
        Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
        Jo.rotate(Math.PI + this.ⲆΔΔᐃⲆ + d + e);
        Jo.translate(120, c);
        Jo.rotate(d);
        b = Ⲇⵠ[1063][Fx.time];
        Δⵠᐃ = -b.width;
        ⲆΔΔ = -b.height;
        Kp(Jo, b, -Δⵠᐃ / 2, -ⲆΔΔ / 2, Δⵠᐃ, ⲆΔΔ);
      }
      Jo.restore();
    }
  }
  function vw() {
    if (this.enabled && this.ᐃΔΔᐃΔ >= 0) {
      var a = new Date().getTime() - this.ᐃΔΔᐃΔ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (a < 60) {
        a = 60 - a;
        this.label ||= xm(eq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ΔⲆⲆᐃΔΔⵠ) {
          this.now = a;
          this.ΔⲆⲆᐃΔΔⵠ = xm(eq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Kp(Jo, this.label, (Mo - this.label.width) / 2, eq * 100);
        Jo.globalAlpha = b;
        Kp(Jo, this.ΔⲆⲆᐃΔΔⵠ, (Mo - this.label.width) / 2 - this.ΔⲆⲆᐃΔΔⵠ.width + eq * 15, eq * 100);
        Jo.globalAlpha = 1;
      }
    }
  }
  function ww(b, c, d) {
    if (c.ΔⲆΔᐃΔⲆΔ() !== 1) {
      return c;
    }
    var e = ᐃⵠⲆᐃⵠᐃⵠ[d][b];
    if (e === undefined) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⲆⵠⲆΔⵠⵠᐃⵠⲆ[d];
      f.fillRect(0, 0, g, a);
      ᐃⵠⲆᐃⵠᐃⵠ[d][b] = e;
    }
    return e;
  }
  function xw(a, b) {
    if (this.text) {
      if (this.timeout.ᐃΔⲆ) {
        Jo.globalAlpha = 1 - this.timeout.ⲆᐃΔ;
      } else {
        Jo.globalAlpha = 1;
      }
      this.label ||= xm(eq, this.text, 40, a, null, null, null, null, null, b, 10);
      Kp(Jo, this.label, (Mo - this.label.width) / 2, eq * 50);
      Jo.globalAlpha = 1;
      if (this.timeout.ᐃᐃⵠ() && this.timeout.ᐃΔⲆ == hl) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function yw() {
    if (this.message !== undefined) {
      var a = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0 ? -95 : 0;
      Kp(Jo, this.message, 0, Do - this.message.height + a);
    }
  }
  function zw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ΔⲆⵠⲆᐃ) {
      for (var d = 0; d < this.bubbles.length; d++) {
        var f = this.bubbles[d];
        if (f.ᐃⵠᐃⲆⲆ > 0.5) {
          var j = 1 - (f.ᐃⵠᐃⲆⲆ - 0.5) * 2;
        } else {
          j = f.ᐃⵠᐃⲆⲆ * 2;
        }
        Jo.globalAlpha = j;
        var k = Ⲇⵠ[540][Fx.time][f.id];
        Kp(Jo, k, Gx.ᐃⵠⲆ.x + f.x - k.width / 2, Gx.ᐃⵠⲆ.y + f.y - k.height / 2);
        Jo.globalAlpha = 1;
      }
    } else {
      Jo.save();
      Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
      Fx.ⵠᐃⵠᐃⵠΔⲆⵠⵠ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Jo.save();
                var b = a.attack.ⲆᐃΔ * -3 / Math.PI;
                if (a.attack.ᐃΔⲆ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⲆᐃΔ) / 3;
                } else {
                  c = a.attack.ⲆᐃΔ;
                }
                Jo.rotate(a.angle - Math.PI / 2 + c);
                Jo.globalAlpha = b / 1.2;
                yd(Jo, eq * -40, eq * 90, eq * 5);
                xd(Jo, "#0B6A84");
                Jo.globalAlpha = b / 1.2;
                yd(Jo, eq * -52, eq * 100, eq * 8);
                xd(Jo, "#0B6A84");
                Jo.globalAlpha = b / 1.2;
                yd(Jo, eq * -30, eq * 95, eq * 4);
                xd(Jo, "#0B6A84");
                Jo.globalAlpha = 1;
                Jo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ⲆⵠⲆⵠⲆᐃⲆ === 1) {
                  break;
                }
                if (a.ⵠⲆⵠΔⵠ > 0) {
                  var d = xs.ᐃⲆᐃΔΔⵠⲆ[Fx.time];
                } else {
                  d = a.ΔⲆⲆᐃΔⵠΔ > 0 || a.ᐃⲆⲆⵠⵠ > 0 ? xs.ΔⲆΔᐃᐃΔΔ[Fx.time] : xs.ⲆⵠⵠⲆⲆΔΔ[Fx.time];
                }
                b = a.attack.ⲆᐃΔ * -3 / Math.PI;
                if ((c = a.attack.ᐃΔⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ᐃⲆΔᐃⵠⲆⲆ = a.angle;
                }
                Jo.save();
                Jo.rotate(a.ᐃⲆΔᐃⵠⲆⲆ - Math.PI / 2);
                Jo.globalAlpha = b;
                var e = eq * 25 + c * 25;
                yd(Jo, e, eq * 80, eq * 15);
                xd(Jo, d);
                yd(Jo, -e, eq * 80, eq * 15);
                xd(Jo, d);
                Jo.globalAlpha = 1;
                Jo.restore();
            }
          }
        })(this);
      }
      Jo.save();
      Jo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⵠⵠΔⵠΔ !== 0) {
          this.ⵠⵠΔⲆᐃΔᐃ.ᐃᐃⵠ();
        } else if (this.action & 32) {
          this.ᐃⲆⲆⲆⵠⵠΔ.ᐃᐃⵠ();
        }
      }
      var m;
      var p = this.ⵠⵠΔⲆᐃΔᐃ.ⲆᐃΔ;
      var q = this.ᐃⲆⲆⲆⵠⵠΔ.ⲆᐃΔ;
      if (this.ΔⲆⲆⲆᐃ === 85) {
        k = Ⲇⵠ[793][Fx.time];
        m = 793;
      } else if (this.ΔⲆⲆⲆᐃ === 20) {
        k = Ⲇⵠ[920][Fx.time];
        m = 920;
      } else if (this.ΔⲆⲆⲆᐃ === 21) {
        k = Ⲇⵠ[924][Fx.time];
        m = 924;
      } else if (this.ΔⲆⲆⲆᐃ === 22) {
        k = Ⲇⵠ[928][Fx.time];
        m = 928;
      } else if (this.ⲆⵠΔΔᐃⵠΔ) {
        k = Ⲇⵠ[822][Fx.time];
        m = 822;
      } else {
        k = Ⲇⵠ[7][this.ⵠⲆΔΔ][Fx.time];
        m = 7;
      }
      ⵠⲆⲆΔ = Ⲇⵠ[286][Fx.time];
      var w = k;
      var h = m;
      if (this.action & 16) {
        if (this.attack.ᐃᐃⵠ() && qa == this.attack.ᐃΔⲆ) {
          this.ⵠⵠⵠᐃΔ = !this.ⵠⵠⵠᐃΔ;
          this.action -= 16;
          if (this.ΔᐃⲆⵠ == Gx.ΔᐃⲆⵠ) {
            Gx.control.ᐃⵠⵠⲆ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⵠⵠⵠᐃΔ = true;
        }
        var g = this.ⵠⵠⵠᐃΔ ? this.attack.ⲆᐃΔ : -this.attack.ⲆᐃΔ / 3;
        var x = this.ⵠⵠⵠᐃΔ ? this.attack.ⲆᐃΔ / 3 : -this.attack.ⲆᐃΔ;
        if (this.ⲆⵠΔΔᐃⵠΔ) {
          Jo.save();
          Jo.rotate(g);
          df(m, k, -k.width / 2 - (66 + p) * eq, -k.height / 2 + eq * (5 + q));
          Jo.restore();
          Jo.save();
          Jo.rotate(x);
          df(m, k, -k.width / 2 + (66 + p) * eq, -k.height / 2 + eq * (5 + q));
          Jo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ(-g);
          }
          Jo.save();
          Jo.rotate(g);
          df(286, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 - eq * (49 + p), -ⵠⲆⲆΔ.height / 2 + (15 + q) * eq);
          if (this.right === 28) {
            var u = Ⲇⵠ[this.right][this.ⲆΔⵠΔΔ][Fx.time];
            vf(this.right, this.ⲆΔⵠΔΔ, u, -u.width / 4 - eq * (62 + p), -u.height / 4 + eq * (q + 18));
          } else {
            uv(this.right, p, q);
          }
          if (m >= 920) {
            wf(m, k, -k.width / 4 - eq * (49 + p), -k.height / 4 + (11 + q) * eq);
          } else if (m !== 793) {
            vf(m, this.ⵠⲆΔΔ, k, -k.width / 4 - eq * (49 + p), -k.height / 4 + eq * (11 + q));
          } else {
            df(m, k, -k.width / 2 - eq * (49 + p), -k.height / 2 + eq * (11 + q));
          }
          Jo.restore();
          Jo.save();
          Jo.rotate(x);
          df(286, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 + (49 + p) * eq, -ⵠⲆⲆΔ.height / 2 + eq * (15 + q));
          if (m >= 920) {
            wf(m, k, -k.width / 4 + (49 + p) * eq, -k.height / 4 + (11 + q) * eq);
          } else if (m !== 793) {
            vf(m, this.ⵠⲆΔΔ, k, -k.width / 4 + eq * (49 + p), -k.height / 4 + (11 + q) * eq);
          } else {
            df(m, k, -k.width / 2 + eq * (49 + p), -k.height / 2 + eq * (11 + q));
          }
          Jo.restore();
        }
      } else if (this.ⲆⵠΔΔᐃⵠΔ) {
        df(m, k, -k.width / 2 - (66 + p) * eq, -k.height / 2 + eq * (5 + q));
        df(m, k, -k.width / 2 + eq * (66 + p), -k.height / 2 + eq * (5 + q));
      } else if (c === 0) {
        df(286, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 - (49 + p) * eq, -ⵠⲆⲆΔ.height / 2 + (15 + q) * eq);
        if (this.right === 28) {
          u = Ⲇⵠ[this.right][this.ⲆΔⵠΔΔ][Fx.time];
          vf(this.right, this.ⲆΔⵠΔΔ, u, -u.width / 4 - (62 + p) * eq, -u.height / 4 + eq * (q + 18));
        } else {
          uv(this.right, p, q);
        }
        if (m >= 920) {
          wf(m, k, -k.width / 4 - eq * (49 + p), -k.height / 4 + (11 + q) * eq);
        } else if (m !== 793) {
          vf(m, this.ⵠⲆΔΔ, k, -k.width / 4 - (49 + p) * eq, -k.height / 4 + eq * (11 + q));
        } else {
          df(m, k, -k.width / 2 - (49 + p) * eq, -k.height / 2 + eq * (11 + q));
        }
        df(286, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 + (49 + p) * eq, -ⵠⲆⲆΔ.height / 2 + eq * (15 + q));
        if (m >= 920) {
          wf(m, k, -k.width / 4 + eq * (49 + p), -k.height / 4 + (11 + q) * eq);
        } else if (m !== 793) {
          vf(m, this.ⵠⲆΔΔ, k, -k.width / 4 + (49 + p) * eq, -k.height / 4 + (11 + q) * eq);
        } else {
          df(m, k, -k.width / 2 + (49 + p) * eq, -k.height / 2 + (11 + q) * eq);
        }
      }
      if (this.ΔΔⲆᐃⵠ && this.ΔⲆⲆⲆᐃ < 1) {
        k = Ⲇⵠ[29][this.ΔⲆᐃᐃΔⵠⲆ][Fx.time];
        vf(29, this.ΔⲆᐃᐃΔⵠⲆ, k, -k.width / 4, -k.height / 4 - eq * 39);
      }
      if (this.ⲆⵠΔΔᐃⵠΔ) {
        k = Ⲇⵠ[820][Fx.time];
        df(820, k, -k.width / 2, -k.height / 2);
        this.ᐃΔΔᐃⵠΔᐃ.ᐃᐃⵠ();
        k = Ⲇⵠ[821][Fx.time];
        df(821, k, -k.width / 2, -k.height / 2 + this.ᐃΔΔᐃⵠΔᐃ.ⲆᐃΔ);
      } else {
        k = Ⲇⵠ[255][this.ⵠⲆΔΔ][Fx.time];
        if (this.ΔⲆⲆⲆᐃ !== 85 && (vf(255, this.ⵠⲆΔΔ, k, -k.width / 4, -k.height / 4), this.ᐃᐃⲆΔⵠ > 0)) {
          k = Ⲇⵠ[796][this.ᐃᐃⲆΔⵠ][Fx.time];
          vf(796, this.ᐃᐃⲆΔⵠ, k, -k.width / 4, -k.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ⲆⲆᐃΔⵠ.ᐃᐃⵠ() && this.ⲆⲆᐃΔⵠ.ᐃΔⲆ == 0) {
          this.action -= 128;
        }
        Jo.globalAlpha = 0.6 - this.ⲆⲆᐃΔⵠ.ⲆᐃΔ;
        if (this.ⲆⵠΔΔᐃⵠΔ) {
          k = Ⲇⵠ[825];
          Kp(Jo, k, -k.width / 2, -k.height / 2);
        } else {
          k = ww(this.ⵠⲆΔΔ, Ⲇⵠ[255][this.ⵠⲆΔΔ][0], ⵠⵠᐃⲆⲆᐃⲆΔᐃ);
          Kp(Jo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Jo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ᐃⲆⲆᐃⵠⵠΔ.ᐃᐃⵠ() && this.ᐃⲆⲆᐃⵠⵠΔ.ᐃΔⲆ == 0) {
          this.action -= 256;
        }
        Jo.globalAlpha = 0.6 - this.ᐃⲆⲆᐃⵠⵠΔ.ⲆᐃΔ;
        k = Ⲇⵠ[266];
        Kp(Jo, k, -k.width / 2, -k.height / 2);
        Jo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ᐃⲆⵠ.ᐃᐃⵠ() && this.ᐃⲆⵠ.ᐃΔⲆ == qe) {
          this.action -= 2;
        }
        Jo.globalAlpha = 0.6 - this.ᐃⲆⵠ.ⲆᐃΔ;
        if (this.ⲆⵠΔΔᐃⵠΔ) {
          k = Ⲇⵠ[823];
          Kp(Jo, k, -k.width / 2, -k.height / 2);
        } else {
          k = ww(this.ⵠⲆΔΔ, Ⲇⵠ[255][this.ⵠⲆΔΔ][0], ᐃⵠΔΔⵠΔΔⵠΔ);
          Kp(Jo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Jo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ᐃᐃⵠ() && this.freeze.ᐃΔⲆ == 0) {
          this.action -= 4;
        }
        Jo.globalAlpha = 0.6 - this.freeze.ⲆᐃΔ;
        k = ww(this.ⵠⲆΔΔ, Ⲇⵠ[255][this.ⵠⲆΔΔ][0], ⵠⲆⵠⵠⲆⲆᐃⵠΔ);
        Kp(Jo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        Jo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ⲆΔⲆⲆᐃⵠⵠ.ᐃᐃⵠ() && this.ⲆΔⲆⲆᐃⵠⵠ.ᐃΔⲆ == Zq) {
          this.action -= 8;
        }
        Jo.globalAlpha = 0.6 - this.ⲆΔⲆⲆᐃⵠⵠ.ⲆᐃΔ;
        if (this.ⲆⵠΔΔᐃⵠΔ) {
          k = Ⲇⵠ[824];
          Kp(Jo, k, -k.width / 2, -k.height / 2);
        } else {
          k = ww(this.ⵠⲆΔΔ, Ⲇⵠ[255][this.ⵠⲆΔΔ][0], ΔⵠⲆⵠⲆⵠᐃΔⲆ);
          Kp(Jo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
        }
        Jo.globalAlpha = 1;
      }
      tw(this.ΔⲆⲆⲆᐃ);
      if (c === 1) {
        if (this.action & 16) {
          p += this.attack.ⲆᐃΔ * 15;
        }
        df(286, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 - eq * 26, -ⵠⲆⲆΔ.height / 2 + eq * (31 + q + p));
        if (h >= 920) {
          wf(h, w, -w.width / 4 - eq * 26, -w.height / 4 + (27 + q + p) * eq);
        } else if (h !== 793) {
          vf(h, this.ⵠⲆΔΔ, w, -w.width / 4 - eq * 26, -w.height / 4 + eq * (27 + q + p));
        } else {
          df(h, w, -w.width / 2 - eq * 26, -w.height / 2 + eq * (27 + q + p));
        }
        df(286, ⵠⲆⲆΔ, -ⵠⲆⲆΔ.width / 2 + eq * 26, -ⵠⲆⲆΔ.height / 2 + eq * (31 + q + p));
        if (h >= 920) {
          wf(h, w, -w.width / 4 + eq * 26, -w.height / 4 + eq * (27 + q + p));
        } else if (h !== 793) {
          vf(h, this.ⵠⲆΔΔ, w, -w.width / 4 + eq * 26, -w.height / 4 + (27 + q + p) * eq);
        } else {
          df(h, w, -w.width / 2 + eq * 26, -w.height / 2 + eq * (27 + q + p));
        }
        Wv(this.right, 0, q + p);
      }
      Jo.restore();
      if (this.ΔⲆⲆⲆᐃ !== 83 && this.ΔⲆⲆⲆᐃ !== 85) {
        if (this.ⵠⲆⵠΔⵠ > 0) {
          this.ΔⵠⵠΔ.ⲆᐃⵠΔᐃⵠⲆ ||= xm(eq, this.ΔⵠⵠΔ.ⲆⵠΔⵠΔ, 20, "#187484", "#000", 2, null, null, eq * 300);
          k = this.ΔⵠⵠΔ.ⲆᐃⵠΔᐃⵠⲆ;
        } else {
          if (!this.ΔⵠⵠΔ.label) {
            this.ΔⵠⵠΔ.label = xm(eq, this.ΔⵠⵠΔ.ⲆⵠΔⵠΔ, 20, "#FFF", "#000", 2, null, null, eq * 300);
          }
          k = this.ΔⵠⵠΔ.label;
        }
        if (Fx.ⵠⵠⲆ == xs.ⵠᐃⲆ) {
          Jo.globalAlpha = 0.5;
        }
        p = Math.floor(-k.width / 2);
        q = Math.floor(-k.height / 2 - eq * 70);
        Kp(Jo, k, p, q);
        if (this.ΔⵠⵠΔ.level > 0) {
          var y = p + k.width + 5;
          k = Ⲇⵠ[885];
          if (Es === ⲆⲆⲆΔⵠⲆⲆ[this.ΔⵠⵠΔ.level]) {
            ⲆⲆⲆΔⵠⲆⲆ[this.ΔⵠⵠΔ.level] = xm(eq, "[" + this.ΔⵠⵠΔ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, eq * 50);
          }
          Kp(Jo, ⲆⲆⲆΔⵠⲆⲆ[this.ΔⵠⵠΔ.level], y, q);
        }
        Jo.globalAlpha = 1;
      } else {
        q = Math.floor(eq * -70);
        p = Math.floor(Ⲇⵠ[558].width / 1.5);
      }
      if (Gx.ⵠⵠᐃⲆᐃᐃᐃ(this.ΔᐃᐃⲆ)) {
        if (Gx.ΔΔΔᐃΔ[0] == this.ΔᐃᐃⲆ) {
          k = Ⲇⵠ[559];
        } else {
          k = Ⲇⵠ[558];
        }
        Kp(Jo, k, p - k.width - 5, q - 6);
      }
      Jo.restore();
    }
  }
  function Aw() {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + this.x, Gx.ᐃⵠⲆ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = Md(eq, this.text[a]);
          this.ⵠᐃⲆⲆΔᐃⵠ[a] = 0;
          this.ⵠⵠΔⲆⵠᐃⲆ[a] = 0;
        }
        if (a === 1) {
          this.ⵠⵠΔⲆⵠᐃⲆ[0] = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(this.ⵠⲆᐃⵠⵠⵠⵠ) * 30;
        }
      }
      this.ⵠᐃⲆⲆΔᐃⵠ[0] += Ox;
      if (this.text.length > 1) {
        this.ⵠⲆᐃⵠⵠⵠⵠ = Math.min(this.ⵠⲆᐃⵠⵠⵠⵠ + Ox, 1);
        if (this.ⵠᐃⲆⲆΔᐃⵠ[0] > 1 && this.ⵠⲆᐃⵠⵠⵠⵠ > 0.5) {
          this.ⵠᐃⲆⲆΔᐃⵠ[1] += Ox;
        }
      }
      for (a = 0; this.text.length > a && a < 2; a++) {
        var b = this.ⵠᐃⲆⲆΔᐃⵠ[a];
        if (b > 0) {
          Jo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Kp(Jo, this.label[a], -this.label[a].width / 2, -this.ⵠⵠΔⲆⵠᐃⲆ[a] + -this.label[a].height / 2 - eq * 110);
        }
      }
      if (this.ⵠᐃⲆⲆΔᐃⵠ[0] > 4) {
        this.ⵠᐃⲆⲆΔᐃⵠ.shift();
        this.text.shift();
        this.ⵠⵠΔⲆⵠᐃⲆ.shift();
        this.label.shift();
        this.ⵠⲆᐃⵠⵠⵠⵠ = 0;
      }
    }
    Jo.restore();
  }
  ᐃⵠΔΔⵠΔΔⵠΔ = 0;
  ⵠⵠᐃⲆⲆᐃⲆΔᐃ = 1;
  ⵠⲆⵠⵠⲆⲆᐃⵠΔ = 2;
  ΔⵠⲆⵠⲆⵠᐃΔⲆ = 3;
  ᐃΔⵠⵠᐃⵠΔΔᐃ = 4;
  ᐃⵠⲆᐃⵠᐃⵠ = [[], [], [], [], []];
  ⲆⵠⲆΔⵠⵠᐃⵠⲆ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var Bw = 0;
  const Cw = 14676032;
  const Dw = 14676032 .ⵠᐃⵠⲆⵠⵠⵠ;
  const Ew = `const ΔⲆⵠⲆⵠⵠⵠ = (typeof ⲆⲆⵠⲆⲆΔⲆ === "${Dw}") ? 1 : 0; return ΔⲆⵠⲆⵠⵠⵠ;`;
  function Fw(j, e, i, k, n, o, a, q = 0) {
    for (var r = a; q <= r; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; k >= t; t++) {
          var w = Cx.Ⲇᐃⵠᐃ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== fo) {
              for (var y = 0; x.length > y; y++) {
                var z = x[y];
                var A = Ⲇⵠ[n][Fx.time][r];
                var B = (Bw + (s + t) * 3) % 60;
                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                var E = (1 + D * 0.9 / 30) * -A.width;
                var F = -A.height * (1 + D * 0.9 / 30);
                D = (B = (Bw + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                var G = Jo.globalAlpha;
                Jo.globalAlpha = G * (0.9 + D * 0.1);
                Kp(Jo, A, Gx.ᐃⵠⲆ.x + z.x - E / 2, Gx.ᐃⵠⲆ.y + z.y - F / 2, E, F);
                Jo.globalAlpha = G;
              }
            }
          }
        }
      }
    }
  }
  function Gw(j, e, i, k, n, o, a, q = 0) {
    Fx.Δᐃⵠⵠ[n].ᐃᐃⵠ();
    for (var r = a; r >= q; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; k >= t; t++) {
          var w = Cx.Ⲇᐃⵠᐃ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== hs) {
              for (var y = 0; y < x.length; y++) {
                var z = x[y];
                if (z.ᐃᐃⵠ) {
                  if (z.ᐃⲆⵠ.ᐃᐃⵠ() && z.ᐃⲆⵠ.ᐃΔⲆ == 0) {
                    z.ᐃᐃⵠ = na;
                  }
                  var A = (1 - z.ᐃⲆⵠ.ⲆᐃΔ) * Ox * 600 * eq;
                  var B = Math.sin(z.angle) * A;
                  var D = Math.cos(z.angle) * A;
                } else {
                  B = 0;
                  D = 0;
                }
                var E = Ⲇⵠ[n][Fx.time][r];
                var F = -E.width * Fx.Δᐃⵠⵠ[n].ⲆᐃΔ;
                var G = -E.height * Fx.Δᐃⵠⵠ[n].ⲆᐃΔ;
                Kp(Jo, E, Gx.ᐃⵠⲆ.x + z.x - F / 2 + B, Gx.ᐃⵠⲆ.y + z.y - G / 2 + D, F, G);
              }
            }
          }
        }
      }
    }
  }
  var Hw = [];
  for ($b = 0; $b < 100; $b++) {
    var ef = 1;
    if (Math.random() < 0.25) {
      ef = 0;
    }
    Hw.push(ef);
  }
  function Iw(j, e, i, k, n, o, a, q, r) {
    if (Gj === q) {
      q = 0;
    }
    for (var h = a; q <= h; h--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; w <= k; w++) {
          var x = Cx.Ⲇᐃⵠᐃ[t][w];
          if (x !== wl && x[o] !== undefined) {
            var A = x[o][h];
            if (A !== undefined) {
              for (var B = 0; A.length > B; B++) {
                var D = A[B];
                if (D.ᐃᐃⵠ) {
                  if (D.ᐃⲆⵠ.ᐃᐃⵠ() && D.ᐃⲆⵠ.ᐃΔⲆ == 0) {
                    D.ᐃᐃⵠ = sn;
                  }
                  var E = eq * (Ox * (1 - D.ᐃⲆⵠ.ⲆᐃΔ) * 600);
                  var F = E * Math.sin(D.angle);
                  var G = E * Math.cos(D.angle);
                } else {
                  F = 0;
                  G = 0;
                }
                for (var H = 0; ΔⲆⲆⵠᐃⵠΔ[h].ΔⲆΔⵠ > H; H++) {
                  if (Nx !== Fx.ⵠⵠΔᐃⲆ[H].ⵠⲆᐃⵠᐃ) {
                    Fx.ⵠⵠΔᐃⲆ[H].ᐃᐃⵠ();
                    Fx.ⵠⵠΔᐃⲆ[H].ⵠⲆᐃⵠᐃ = Nx;
                  }
                  var I = Ⲇⵠ[941][Fx.time][ΔⲆⲆⵠᐃⵠΔ[h].ⵠΔΔⲆ[H].ΔⲆᐃ];
                  var J = Fx.ⵠⵠΔᐃⲆ[H].ⲆᐃΔ * -I.width;
                  var K = -I.height * Fx.ⵠⵠΔᐃⲆ[H].ⲆᐃΔ;
                  Kp(Jo, I, Gx.ᐃⵠⲆ.x + D.x - J / 4 + F + ΔⲆⲆⵠᐃⵠΔ[h].ⵠΔΔⲆ[H].x, Gx.ᐃⵠⲆ.y + D.y - K / 4 + G + ΔⲆⲆⵠᐃⵠΔ[h].ⵠΔΔⲆ[H].y, J / 2, K / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function nf(f, e, i, j, k, n, a, o, q) {
    if (wl === o) {
      o = 0;
    }
    for (var h = a; o <= h; h--) {
      for (var r = f; e >= r; r++) {
        for (var t = i; t <= j; t++) {
          if (q <= 0 || Hw[(r + t * q) % Hw.length] !== 1) {
            var w = Cx.Ⲇᐃⵠᐃ[r][t];
            if (w !== Gm && w[n] !== undefined) {
              var x = w[n][h];
              if (Sa !== x) {
                for (var y = 0; x.length > y; y++) {
                  var z = x[y];
                  if (z.ᐃᐃⵠ) {
                    if (z.ᐃⲆⵠ.ᐃᐃⵠ() && ib == z.ᐃⲆⵠ.ᐃΔⲆ) {
                      z.ᐃᐃⵠ = Zq;
                    }
                    var A = eq * ((1 - z.ᐃⲆⵠ.ⲆᐃΔ) * Ox * 600);
                    var B = Math.sin(z.angle) * A;
                    var D = A * Math.cos(z.angle);
                  } else {
                    B = 0;
                    D = 0;
                  }
                  var E = Ⲇⵠ[k][Fx.time][h];
                  Kp(Jo, E, Gx.ᐃⵠⲆ.x + z.x - E.width / (ⲆⲆΔⵠΔ * 2) + B, Gx.ᐃⵠⲆ.y + z.y - E.height / (ⲆⲆΔⵠΔ * 2) + D, E.width / ⲆⲆΔⵠΔ, E.height / ⲆⲆΔⵠΔ);
                }
              }
            }
          }
        }
      }
    }
  }
  function of(c, e, f, i, j, k, a, m, n) {
    if (m === ij) {
      m = 0;
    }
    for (var h = c; e >= h; h++) {
      for (var o = f; o <= i; o++) {
        var p = Cx.Ⲇᐃⵠᐃ[h][o];
        if (p !== ur && p[k] !== Qq) {
          var q = p[k];
          if (q !== undefined) {
            if (q.scale === 1) {
              var r = Ⲇⵠ[j][Fx.time][q.ᐃⵠⵠΔⲆ];
              Jo.save();
              Jo.translate(Gx.ᐃⵠⲆ.x + q.x, Gx.ᐃⵠⲆ.y + q.y);
              Jo.rotate(q.angle);
              Kp(Jo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Jo.restore();
            } else if (q.scale === 3) {
              for (var t = 0; t < q.ΔⵠΔ.length; t++) {
                Jo.save();
                Jo.translate(Gx.ᐃⵠⲆ.x + q.x, Gx.ᐃⵠⲆ.y + q.y);
                Jo.rotate(q.ΔⵠΔ[t].angle);
                r = Ⲇⵠ[j][Fx.time][q.ΔⵠΔ[t].ᐃⵠⵠΔⲆ];
                Kp(Jo, r, -r.width / 3 + q.ΔⵠΔ[t].x, -r.height / 3 + q.ΔⵠΔ[t].y, r.width / 1.5, r.height / 1.5);
                Jo.restore();
              }
            } else {
              r = Ⲇⵠ[j][Fx.time][q.ᐃⵠⵠΔⲆ];
              Jo.save();
              Jo.translate(Gx.ᐃⵠⲆ.x + q.x, Gx.ᐃⵠⲆ.y + q.y);
              Jo.rotate(q.angle);
              Kp(Jo, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Jo.restore();
            }
          }
        }
      }
    }
  }
  ⲆⲆΔⵠΔ = 1;
  ΔⲆⲆⵠᐃⵠΔ = [{
    ΔⲆΔⵠ: 10,
    ⵠΔΔⲆ: [{
      x: -128,
      y: -20,
      ΔⲆᐃ: 0
    }, {
      x: -86,
      y: -4,
      ΔⲆᐃ: 1
    }, {
      ΔⲆᐃ: 2,
      y: -74,
      x: -60
    }, {
      x: -22,
      ΔⲆᐃ: 0,
      y: -144
    }, {
      x: -58,
      ΔⲆᐃ: 0,
      y: 86
    }, {
      ΔⲆᐃ: 0,
      x: 3,
      y: -30
    }, {
      x: 65,
      y: -115,
      ΔⲆᐃ: 1
    }, {
      ΔⲆᐃ: 0,
      y: -50,
      x: 118
    }, {
      ΔⲆᐃ: 1,
      y: 15,
      x: 73
    }, {
      y: 79,
      x: 67,
      ΔⲆᐃ: 0
    }]
  }, {
    ΔⲆΔⵠ: 5,
    ⵠΔΔⲆ: [{
      ΔⲆᐃ: 0,
      x: -45,
      y: -26
    }, {
      y: 20,
      ΔⲆᐃ: 2,
      x: -45
    }, {
      ΔⲆᐃ: 1,
      x: 10,
      y: -60
    }, {
      x: 52,
      y: -17,
      ΔⲆᐃ: 1
    }, {
      y: 45,
      ΔⲆᐃ: 0,
      x: 14
    }]
  }, {
    ΔⲆΔⵠ: 3,
    ⵠΔΔⲆ: [{
      ΔⲆᐃ: 2,
      y: 3,
      x: -30
    }, {
      y: -38,
      ΔⲆᐃ: 2,
      x: 7
    }, {
      ΔⲆᐃ: 2,
      x: 37,
      y: 5
    }]
  }, {
    ΔⲆΔⵠ: 11,
    ⵠΔΔⲆ: [{
      ΔⲆᐃ: 2,
      x: -74,
      y: -87
    }, {
      x: -11,
      y: -10,
      ΔⲆᐃ: 1
    }, {
      x: -99,
      y: 17,
      ΔⲆᐃ: 1
    }, {
      ΔⲆᐃ: 0,
      x: -66,
      y: 84
    }, {
      ΔⲆᐃ: 1,
      y: 123,
      x: -55
    }, {
      y: 81,
      x: 10,
      ΔⲆᐃ: 2
    }, {
      x: 52,
      ΔⲆᐃ: 0,
      y: 50
    }, {
      x: 138,
      y: 9,
      ΔⲆᐃ: 1
    }, {
      x: 104,
      y: -28,
      ΔⲆᐃ: 0
    }, {
      ΔⲆᐃ: 2,
      x: 67,
      y: -56
    }, {
      ΔⲆᐃ: 0,
      x: 5,
      y: -112
    }]
  }, {
    ΔⲆΔⵠ: 6,
    ⵠΔΔⲆ: [{
      ΔⲆᐃ: 2,
      x: -33,
      y: -66
    }, {
      ΔⲆᐃ: 0,
      y: 10,
      x: -58
    }, {
      x: -19,
      y: 44,
      ΔⲆᐃ: 1
    }, {
      x: 44,
      y: 20,
      ΔⲆᐃ: 0
    }, {
      x: 53,
      ΔⲆᐃ: 2,
      y: -36
    }, {
      x: 7,
      ΔⲆᐃ: 0,
      y: -62
    }]
  }, {
    ΔⲆΔⵠ: 3,
    ⵠΔΔⲆ: [{
      x: -19,
      ΔⲆᐃ: 1,
      y: -25
    }, {
      y: 13,
      ΔⲆᐃ: 2,
      x: -29
    }, {
      ΔⲆᐃ: 0,
      y: 12,
      x: 12
    }]
  }];
  var af = 0;
  var Jw = 0;
  var Kw = 0;
  var Lw = 0;
  function Mw(a, b) {
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      a.ΔⵠⲆⵠᐃ(b);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      a.ΔⵠⲆⵠᐃ(b);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      a.ΔⵠⲆⵠᐃ(b);
    }
  }
  function lf(b, c, d, e, f, i, a, j, k, h) {
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      b(c, d, e, f, i, a, j, k, h);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function uf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Gx.ᐃⵠⲆ.y + j - 700;
    var g = Math.max(Gx.ᐃⵠⲆ.x + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.x + Mo - i - 100, 0);
    var t = g;
    var b = Mo - g - l;
    if (o) {
      var d = q.ΔⲆᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ΔⲆᐃ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ΔⲆᐃ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > k) {
      var A = Dh;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = Wh;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (Fx.transition) {
      var N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(F, c, C, p);
    if (o) {
      if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 70, 76, 42, 139, 155, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔⵠΔⲆᐃ[Fx.time];
      }
    } else if (Fx.transition) {
      N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (Fx.transition) {
          N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
          Jo.fillStyle = zf(17, 94, 96, 169, 214, 211, N);
        } else {
          Jo.fillStyle = xs.ᐃⵠΔᐃⵠⵠⵠ[Fx.time];
        }
      } else if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
      }
      Jo.fillRect(J, L, B, M);
    }
    if (Ex.ΔⲆᐃᐃΔ && o) {
      q.ⲆΔᐃⲆⵠⵠᐃΔⲆ(k, D, G, h, -Gx.ᐃⵠⲆ.x + F, -Gx.ᐃⵠⲆ.x + F + C);
    }
  }
  function bf() {
    Jo.globalAlpha = 1;
    if (Fx.transition) {
      var a = Fx.ⵠΔⵠΔ.ᐃᐃⵠ();
    }
    Fx.ΔΔΔⵠᐃᐃⵠᐃⵠ(-Gx.ᐃⵠⲆ.x, -Gx.ᐃⵠⲆ.y);
    af = Math.max(Math.floor(-Gx.ᐃⵠⲆ.x / Fx.ᐃᐃⲆⲆΔᐃⵠ) - 5, 0);
    Jw = Math.min(Math.floor((-Gx.ᐃⵠⲆ.x + Gx.ᐃⵠⲆ.w) / Fx.ᐃᐃⲆⲆΔᐃⵠ) + 4, Fx.ᐃⵠⲆΔΔ - 1);
    Kw = Math.max(Math.floor(-Gx.ᐃⵠⲆ.y / Fx.ⲆᐃⵠᐃΔⲆΔ) - 3, 0);
    Lw = Math.min(Math.floor((-Gx.ᐃⵠⲆ.y + Gx.ᐃⵠⲆ.ⲆΔΔ) / Fx.ⲆᐃⵠᐃΔⲆΔ) + 3, Fx.ΔᐃⵠⵠⲆ - 1);
    (function () {
      for (var c = Fx.ⵠⵠᐃⲆ.length - 1; c >= 0; c--) {
        var d = Fx.ⵠⵠᐃⲆ[c];
        if (Fx.ΔᐃⲆⵠⲆ === d.ΔⲆᐃ) {
          var f = Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ];
          if (-Gx.ᐃⵠⲆ.x >= d.x1 - 230 - Mo && -Gx.ᐃⵠⲆ.x <= d.x2 + 330 && -Gx.ᐃⵠⲆ.y >= d.y1 - Do && d.y2 + 100 >= -Gx.ᐃⵠⲆ.y) {
            var j = d.x2;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              j -= 610;
            }
            var k = d.x1;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              k += 610;
            }
            var p = d.y2;
            if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
              p -= 610;
            }
            var q = d.y1;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              q += 610;
            }
            if (Fx.transition) {
              var w = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
              Jo.fillStyle = zf(f.ᐃΔᐃ[0], f.ᐃΔᐃ[1], f.ᐃΔᐃ[2], f.ⵠⵠⲆ[0], f.ⵠⵠⲆ[1], f.ⵠⵠⲆ[1], w);
            } else {
              Jo.fillStyle = f.ⲆⲆⵠᐃⵠ[Fx.time];
            }
            var x = Math.max(Gx.ᐃⵠⲆ.x + k - 2 - 230, 0);
            var y = Math.max(-Gx.ᐃⵠⲆ.x + Mo - j - 330 - 2, 0);
            var z = Math.max(Gx.ᐃⵠⲆ.y + q - 2, 0);
            var A = Math.max(-Gx.ᐃⵠⲆ.y + Do - p - 100 - 2, 0);
            Jo.beginPath();
            Jo.fillRect(x, z, Mo - y - x, Do - z - A);
          }
        }
      }
      for (c = Fx.ⵠⵠᐃⲆ.length - 1; c >= 0; c--) {
        d = Fx.ⵠⵠᐃⲆ[c];
        if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
          j = d.x2;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            j -= 400;
          }
          k = d.x1;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            k += 400;
          }
          p = d.y2;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            p -= 300;
          }
          q = d.y1;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            q += 300;
          }
          if (!(d.ⲆᐃΔ & 8) && j - Mo + 120 <= -Gx.ᐃⵠⲆ.x && j + 820 >= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.y >= q + 88 - Do && -Gx.ᐃⵠⲆ.y <= p + 50) {
            Jf(j, q + 88, p - 88, Gx.ΔⵠᐃΔ[0], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 8);
            cf(j, q + 88, p - 88, Gx.ΔⵠᐃΔ[0], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 8);
          }
          if ((d.ⲆᐃΔ & 4) === 0 && k - Mo - 700 <= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.x <= k - 20 && q + 88 - Do <= -Gx.ᐃⵠⲆ.y && p + 50 >= -Gx.ᐃⵠⲆ.y) {
            Tf(k, q + 88, p - 88, Gx.ΔⵠᐃΔ[1], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 4);
            Pf(k, q + 88, p - 88, Gx.ΔⵠᐃΔ[1], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 4);
          }
          if (!(d.ⲆᐃΔ & 2) && -Gx.ᐃⵠⲆ.x >= k - 235 - Mo && -Gx.ᐃⵠⲆ.x <= j + 350 && -Gx.ᐃⵠⲆ.y >= p - Do - 275 && p + 490 >= -Gx.ᐃⵠⲆ.y) {
            Af(p - 230, k - 230, j + 230, Gx.ΔⵠᐃΔ[2], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 2);
            xf(p - 230, k - 230, j + 230, Gx.ΔⵠᐃΔ[2], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 2);
          }
          if (!(d.ⲆᐃΔ & 1) && k - 235 - Mo <= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.x <= j + 350 && -Gx.ᐃⵠⲆ.y >= q - Do - 390 && q + 315 >= -Gx.ᐃⵠⲆ.y) {
            yf(q + 310, k - 230, j + 230, Gx.ΔⵠᐃΔ[3], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 1);
            uf(q + 310, k - 230, j + 230, Gx.ΔⵠᐃΔ[3], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 1);
          }
        }
      }
      for (c = Fx.ⵠⵠᐃⲆ.length - 1; c >= 0; c--) {
        if ((d = Fx.ⵠⵠᐃⲆ[c]).ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
          j = d.x2;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            j -= 400;
          }
          k = d.x1;
          if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
            k += 400;
          }
          p = d.y2;
          if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
            p -= 300;
          }
          q = d.y1;
          if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
            q += 300;
          }
          if (d.ⲆᐃΔ & 8 && j - Mo + 120 <= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.x <= j + 820 && q + 88 - Do <= -Gx.ᐃⵠⲆ.y && p + 50 >= -Gx.ᐃⵠⲆ.y) {
            Jf(j, q + 88, p - 88, Gx.ΔⵠᐃΔ[0], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 8);
          }
          if (d.ⲆᐃΔ & 4 && k - Mo - 700 <= -Gx.ᐃⵠⲆ.x && k - 20 >= -Gx.ᐃⵠⲆ.x && q + 88 - Do <= -Gx.ᐃⵠⲆ.y && p + 50 >= -Gx.ᐃⵠⲆ.y) {
            Tf(k, q + 88, p - 88, Gx.ΔⵠᐃΔ[1], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 4);
          }
          if ((d.ⲆᐃΔ & 2) !== 0 && k - 235 - Mo <= -Gx.ᐃⵠⲆ.x && j + 350 >= -Gx.ᐃⵠⲆ.x && p - Do - 275 <= -Gx.ᐃⵠⲆ.y && -Gx.ᐃⵠⲆ.y <= p + 490) {
            Af(p - 230, k - 230, j + 230, Gx.ΔⵠᐃΔ[2], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 2);
          }
          if (d.ⲆᐃΔ & 1 && k - 235 - Mo <= -Gx.ᐃⵠⲆ.x && j + 350 >= -Gx.ᐃⵠⲆ.x && q - Do - 390 <= -Gx.ᐃⵠⲆ.y && -Gx.ᐃⵠⲆ.y <= q + 315) {
            yf(q + 310, k - 230, j + 230, Gx.ΔⵠᐃΔ[3], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 1);
          }
        }
      }
      for (c = Fx.ⵠⵠᐃⲆ.length - 1; c >= 0; c--) {
        d = Fx.ⵠⵠᐃⲆ[c];
        if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
          f = Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ];
          if (d.x1 - 230 - Mo <= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.x <= d.x2 + 330 && d.y1 - Do <= -Gx.ᐃⵠⲆ.y && d.y2 + 100 >= -Gx.ᐃⵠⲆ.y) {
            j = d.x2;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              if ((d.ⲆᐃΔ & 8) === 0) {
                j -= 414;
              } else {
                j -= 610;
              }
            }
            k = d.x1;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              if (d.ⲆᐃΔ & 4) {
                k += 610;
              } else {
                k += 414;
              }
            }
            p = d.y2;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              if (d.ⲆᐃΔ & 2) {
                p -= 610;
              } else {
                p -= 414;
              }
            }
            q = d.y1;
            if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
              if (d.ⲆᐃΔ & 1) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (Fx.transition) {
              w = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
              Jo.fillStyle = zf(f.ᐃΔᐃ[0], f.ᐃΔᐃ[1], f.ᐃΔᐃ[2], f.ⵠⵠⲆ[0], f.ⵠⵠⲆ[1], f.ⵠⵠⲆ[2], w);
            } else {
              Jo.fillStyle = f.ⲆⲆⵠᐃⵠ[Fx.time];
            }
            x = Math.max(Gx.ᐃⵠⲆ.x + k - 2 - 230, 0);
            y = Math.max(-Gx.ᐃⵠⲆ.x + Mo - j - 330 - 2, 0);
            z = Math.max(Gx.ᐃⵠⲆ.y + q - 2, 0);
            A = Math.max(-Gx.ᐃⵠⲆ.y + Do - p - 100 - 2, 0);
            Jo.beginPath();
            Jo.fillRect(x, z, Mo - y - x, Do - z - A);
          }
        }
      }
      if (Ex.ΔⲆᐃᐃΔ) {
        lf(Gw, Kw, Lw, af, Jw, 695, "isl", 2);
        lf(Gw, Kw, Lw, af, Jw, 694, "isl", 2);
      }
      lf(nf, Kw, Lw, af, Jw, 692, "isl", 2);
      if (Ex.ΔⲆᐃᐃΔ) {
        lf(of, Kw, Lw, af, Jw, 243, "de");
      }
      var B = Fx.Ⲇᐃⵠ[0];
      for (c = 0; c < B.length; c++) {
        for (var b = B[c], C = 0; C < b.ⲆⲆⲆⵠᐃ.length; C++) {
          pf(b.ⲆⲆⲆⵠᐃ[C]);
        }
      }
      if ((tv += Ox * 40) > 60) {
        tv -= 60;
      }
      lf(cw, Kw, Lw, af, Jw, 1024, "r", 0);
      for (c = 0; c < Fx.ⵠⵠᐃⲆ.length; c++) {
        d = Fx.ⵠⵠᐃⲆ[c];
        if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
          j = d.x2;
          if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
            j -= 400;
          }
          k = d.x1;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            k += 400;
          }
          p = d.y2;
          if (d.ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ) {
            p -= 300;
          }
          q = d.y1;
          if (Fx.ΔᐃⲆⵠⲆ !== d.ΔⲆᐃ) {
            q += 300;
          }
          if ((d.ⲆᐃΔ & 8) > 0 && j - Mo + 120 <= -Gx.ᐃⵠⲆ.x && j + 820 >= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.y >= q + 88 - Do && p + 50 >= -Gx.ᐃⵠⲆ.y) {
            cf(j, q + 88, p - 88, Gx.ΔⵠᐃΔ[0], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 8);
          }
          if ((d.ⲆᐃΔ & 4) > 0 && k - Mo - 700 <= -Gx.ᐃⵠⲆ.x && k - 20 >= -Gx.ᐃⵠⲆ.x && q + 88 - Do <= -Gx.ᐃⵠⲆ.y && -Gx.ᐃⵠⲆ.y <= p + 50) {
            Pf(k, q + 88, p - 88, Gx.ΔⵠᐃΔ[1], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 4);
          }
          if ((d.ⲆᐃΔ & 2) > 0 && k - 235 - Mo <= -Gx.ᐃⵠⲆ.x && j + 350 >= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.y >= p - Do - 275 && -Gx.ᐃⵠⲆ.y <= p + 490) {
            xf(p - 230, k - 230, j + 230, Gx.ΔⵠᐃΔ[2], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 2);
          }
          if ((d.ⲆᐃΔ & 1) > 0 && k - 235 - Mo <= -Gx.ᐃⵠⲆ.x && -Gx.ᐃⵠⲆ.x <= j + 350 && -Gx.ᐃⵠⲆ.y >= q - Do - 390 && -Gx.ᐃⵠⲆ.y <= q + 315) {
            uf(q + 310, k - 230, j + 230, Gx.ΔⵠᐃΔ[3], Fx.ⲆⵠΔΔΔ[d.ΔⲆᐃ], d.ⲆᐃΔ & 1);
          }
        }
      }
    })();
    (function () {
      var d = af;
      var e = Jw;
      var i = Kw;
      var t = Lw;
      if (Ex.ΔⲆᐃᐃΔ) {
        lf(nf, i, t, d, e, 621, "l", 2);
      }
      if (Ex.ΔⲆᐃᐃΔ) {
        lf(nf, i, t, d, e, xs.ⲆⵠⵠΔΔ, "la", 5);
      }
      lf(nf, i, t, d, e, 203, "la", 5);
      lf(Gw, i, t, d, e, 620, "l", 2);
      if (Ex.ΔⲆᐃᐃΔ) {
        lf(Iw, i, t, d, e, 203, "la", 5);
        lf(Gw, i, t, d, e, 619, "l", 2);
      }
      lf(nf, i, t, d, e, 1052, "ma", 4);
      for (var n = Fx.Ⲇᐃⵠ[76], F = 0; F < n.length; F++) {
        n[F].ᐃⲆᐃᐃᐃΔⲆ();
      }
      var K = Fx.Ⲇᐃⵠ[0];
      for (F = 0; K.length > F; F++) {
        for (var V = K[F], aa = 0; V.ⵠᐃᐃᐃⲆ.length > aa; aa++) {
          kf(V.ⵠᐃᐃᐃⲆ[aa]);
        }
      }
      var ba = Fx.Ⲇᐃⵠ[30];
      for (F = 0; F < ba.length; F++) {
        Cf(ba[F], 125);
        ba[F].ⵠⲆⲆⲆⲆ(ba[F].info);
      }
      var g = Fx.Ⲇᐃⵠ[18];
      for (F = 0; F < g.length; F++) {
        if (g[F].action == 2) {
          mf(g[F]);
        }
      }
      var ca = Fx.Ⲇᐃⵠ[1];
      for (F = 0; F < ca.length; F++) {
        mf(ca[F], 113);
      }
      var da = Fx.Ⲇᐃⵠ[22];
      for (F = 0; da.length > F; F++) {
        mf(da[F]);
      }
      var ea = Fx.Ⲇᐃⵠ[23];
      for (F = 0; ea.length > F; F++) {
        mf(ea[F]);
      }
      var fa = Fx.Ⲇᐃⵠ[6];
      for (F = 0; F < fa.length; F++) {
        mf(fa[F], 118);
      }
      var m = Fx.Ⲇᐃⵠ[36];
      for (F = 0; m.length > F; F++) {
        Cf(m[F]);
      }
      var c = Fx.Ⲇᐃⵠ[33];
      for (F = 0; c.length > F; F++) {
        Cf(c[F], 141);
      }
      var p = Fx.Ⲇᐃⵠ[3];
      for (F = 0; F < p.length; F++) {
        mf(p[F]);
      }
      p = Fx.Ⲇᐃⵠ[43];
      F = 0;
      for (; p.length > F; F++) {
        mf(p[F]);
      }
      p = Fx.Ⲇᐃⵠ[3];
      F = 0;
      for (; p.length > F; F++) {
        Mw(p[F]);
      }
      var ha = Fx.Ⲇᐃⵠ[44];
      for (F = 0; ha.length > F; F++) {
        if (!(ha[F].info & 15) || ha[F].info === 10) {
          Cf(ha[F]);
        }
      }
      var ia = Fx.Ⲇᐃⵠ[54];
      for (F = 0; F < ia.length; F++) {
        if ((ia[F].info & 15) === 0 || ia[F].info === 10) {
          Cf(ia[F]);
        }
      }
      var ja = Fx.Ⲇᐃⵠ[55];
      for (F = 0; F < ja.length; F++) {
        if ((ja[F].info & 15) === 0 || ja[F].info === 10) {
          Cf(ja[F]);
        }
      }
      var ka = Fx.Ⲇᐃⵠ[79];
      for (F = 0; ka.length > F; F++) {
        Cf(ka[F], 132);
      }
      var la = Fx.Ⲇᐃⵠ[39];
      for (F = 0; la.length > F; F++) {
        if ((la[F].info & 15) === 0 || la[F].info === 10) {
          Cf(la[F]);
        }
      }
      var ma = Fx.Ⲇᐃⵠ[40];
      for (F = 0; ma.length > F; F++) {
        if ((ma[F].info & 15) === 0 || ma[F].info === 10) {
          Cf(ma[F]);
        }
      }
      var na = Fx.Ⲇᐃⵠ[37];
      for (F = 0; F < na.length; F++) {
        if ((na[F].info & 15) === 0 || na[F].info === 10) {
          Cf(na[F]);
        }
      }
      ka = Fx.Ⲇᐃⵠ[31];
      F = 0;
      for (; F < ka.length; F++) {
        Cf(ka[F]);
      }
      var oa = Fx.Ⲇᐃⵠ[86];
      for (F = 0; oa.length > F; F++) {
        Cf(oa[F], 250, 729);
      }
      var A = Fx.Ⲇᐃⵠ[82];
      for (F = 0; F < A.length; F++) {
        Cf(A[F], 250, 729);
      }
      var x = Fx.Ⲇᐃⵠ[87];
      for (F = 0; F < x.length; F++) {
        Cf(x[F], 854, 859);
      }
      var J = Fx.Ⲇᐃⵠ[45];
      for (F = 0; F < J.length; F++) {
        if (J[F].info & 1) {
          Cf(J[F], 336);
        }
      }
      J = Fx.Ⲇᐃⵠ[46];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info & 1) {
          Cf(J[F], 373);
        }
      }
      J = Fx.Ⲇᐃⵠ[47];
      F = 0;
      for (; F < J.length; F++) {
        if (J[F].info) {
          Cf(J[F], 376);
        }
      }
      J = Fx.Ⲇᐃⵠ[48];
      F = 0;
      for (; F < J.length; F++) {
        if (J[F].info) {
          Cf(J[F], 379);
        }
      }
      J = Fx.Ⲇᐃⵠ[49];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info) {
          Cf(J[F], 500);
        }
      }
      J = Fx.Ⲇᐃⵠ[53];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info) {
          Cf(J[F], 376);
        }
      }
      J = Fx.Ⲇᐃⵠ[10];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info & 1) {
          Cf(J[F], 336);
        }
      }
      J = Fx.Ⲇᐃⵠ[15];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info & 1) {
          Cf(J[F], 373);
        }
      }
      J = Fx.Ⲇᐃⵠ[16];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info) {
          Cf(J[F], 376);
        }
      }
      J = Fx.Ⲇᐃⵠ[17];
      F = 0;
      for (; F < J.length; F++) {
        if (J[F].info) {
          Cf(J[F], 379);
        }
      }
      J = Fx.Ⲇᐃⵠ[21];
      F = 0;
      for (; J.length > F; F++) {
        if (J[F].info) {
          Cf(J[F], 500);
        }
      }
      J = Fx.Ⲇᐃⵠ[51];
      F = 0;
      for (; F < J.length; F++) {
        if (J[F].info) {
          Cf(J[F], 376);
        }
      }
      var pa = Fx.Ⲇᐃⵠ[80];
      for (F = 0; pa.length > F; F++) {
        Cf(pa[F], 264, 322);
      }
      var B = Fx.Ⲇᐃⵠ[41];
      for (F = 0; B.length > F; F++) {
        Cf(B[F], 198);
      }
      n = Fx.Ⲇᐃⵠ[76];
      F = 0;
      for (; F < n.length; F++) {
        Cf(n[F], xs.ⵠⲆⵠⵠΔⵠᐃ, xs.ᐃⵠᐃⵠΔᐃⲆⲆⲆ);
      }
      var qa = Fx.Ⲇᐃⵠ[91];
      for (F = 0; qa.length > F; F++) {
        if (qa[F].ⲆⵠⲆⵠⲆᐃⲆ === 0) {
          Cf(qa[F]);
        }
      }
      K = Fx.Ⲇᐃⵠ[0];
      F = 0;
      for (; F < K.length; F++) {
        V = K[F];
        if (K[F].ⵠⵠΔⵠΔ !== 227 && K[F].ⵠⵠΔⵠΔ !== 228 && K[F].ⵠⵠΔⵠΔ !== 229 && K[F].ⵠⵠΔⵠΔ !== 230 && K[F].ⵠⵠΔⵠΔ !== 91) {
          if (V.ᐃᐃᐃᐃΔⲆᐃ === 0) {
            if (V.ΔⵠᐃⲆⲆΔΔ > 0.001) {
              V.ΔⵠᐃⲆⲆΔΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(V.ΔⵠᐃⲆⲆΔΔ, 0, 0.018);
              var ra = 1 + Math.min(1, Math.max(V.ΔⵠᐃⲆⲆΔΔ, 0) / 100) * 0.18;
              Jo.save();
              Jo.scale(ra, ra);
              Gx.ᐃⵠⲆ.x /= ra;
              Gx.ᐃⵠⲆ.y /= ra;
              V.x /= ra;
              V.y /= ra;
              V.r.x /= ra;
              V.r.y /= ra;
              V.ⵠⵠⵠΔΔⲆᐃ();
              V.ⲆᐃᐃⲆ();
              Gx.ᐃⵠⲆ.x *= ra;
              Gx.ᐃⵠⲆ.y *= ra;
              V.x *= ra;
              V.y *= ra;
              V.r.x *= ra;
              V.r.y *= ra;
              Jo.restore();
            } else {
              V.ⲆⵠⲆⵠⲆᐃⲆ = 0;
              V.ⵠⵠⵠΔΔⲆᐃ();
              V.ⲆᐃᐃⲆ();
            }
          }
        } else if (V.ΔⲆⵠⵠΔ <= 180) {
          Jo.save();
          ra = 1 + Math.min(1, Math.max(V.ΔⵠⲆⵠΔ - 30, 0) / 180) * 0.35;
          Jo.scale(ra, ra);
          Gx.ᐃⵠⲆ.x /= ra;
          Gx.ᐃⵠⲆ.y /= ra;
          V.x /= ra;
          V.y /= ra;
          V.r.x /= ra;
          V.r.y /= ra;
          V.ⲆⵠⲆⵠⲆᐃⲆ = 0;
          V.ⵠⵠⵠΔΔⲆᐃ();
          V.ⲆᐃᐃⲆ();
          Gx.ᐃⵠⲆ.x *= ra;
          Gx.ᐃⵠⲆ.y *= ra;
          V.x *= ra;
          V.y *= ra;
          V.r.x *= ra;
          V.r.y *= ra;
          Jo.restore();
        }
      }
      B = Fx.Ⲇᐃⵠ[41];
      F = 0;
      for (; F < B.length; F++) {
        Cf(B[F], 913);
      }
      var sa = Fx.Ⲇᐃⵠ[67];
      for (F = 0; sa.length > F; F++) {
        Cf(sa[F]);
      }
      var S = Fx.Ⲇᐃⵠ[62];
      for (F = 0; S.length > F; F++) {
        Cf(S[F], 419, 461);
      }
      var Q = Fx.Ⲇᐃⵠ[70];
      for (F = 0; F < Q.length; F++) {
        Cf(Q[F]);
      }
      var _ = Fx.Ⲇᐃⵠ[60];
      for (F = 0; _.length > F; F++) {
        Cf(_[F], 299, 326);
      }
      var R = Fx.Ⲇᐃⵠ[72];
      for (F = 0; F < R.length; F++) {
        Cf(R[F], 232, 1077);
      }
      var j = Fx.Ⲇᐃⵠ[73];
      for (F = 0; j.length > F; F++) {
        Cf(j[F], 233, 1092);
      }
      ha = Fx.Ⲇᐃⵠ[44];
      F = 0;
      for (; F < ha.length; F++) {
        if ((ha[F].info & 15) !== 0 && ha[F].info !== 10) {
          Cf(ha[F]);
        }
      }
      ia = Fx.Ⲇᐃⵠ[54];
      F = 0;
      for (; F < ia.length; F++) {
        if ((ia[F].info & 15) !== 0 && ia[F].info !== 10) {
          Cf(ia[F]);
        }
      }
      ja = Fx.Ⲇᐃⵠ[89];
      F = 0;
      for (; F < ja.length; F++) {
        Cf(ja[F], 239);
      }
      ja = Fx.Ⲇᐃⵠ[55];
      F = 0;
      for (; F < ja.length; F++) {
        if (ja[F].info & 15 && ja[F].info !== 10) {
          Cf(ja[F]);
        }
      }
      p = Fx.Ⲇᐃⵠ[43];
      F = 0;
      for (; p.length > F; F++) {
        Mw(p[F]);
      }
      la = Fx.Ⲇᐃⵠ[39];
      F = 0;
      for (; la.length > F; F++) {
        if ((la[F].info & 15) !== 0 && la[F].info !== 10) {
          Cf(la[F]);
        }
      }
      ma = Fx.Ⲇᐃⵠ[40];
      F = 0;
      for (; F < ma.length; F++) {
        if ((ma[F].info & 15) !== 0 && ma[F].info !== 10) {
          Cf(ma[F]);
        }
      }
      na = Fx.Ⲇᐃⵠ[37];
      F = 0;
      for (; na.length > F; F++) {
        if (na[F].info & 15 && na[F].info !== 10) {
          Cf(na[F]);
        }
      }
      var L = Fx.Ⲇᐃⵠ[81];
      for (F = 0; F < L.length; F++) {
        Cf(L[F], 691, 697);
      }
      var G = Fx.Ⲇᐃⵠ[66];
      for (F = 0; G.length > F; F++) {
        Cf(G[F], 637, 687);
      }
      var W = Fx.Ⲇᐃⵠ[65];
      for (F = 0; W.length > F; F++) {
        Cf(W[F], 673, 688);
      }
      var N = Fx.Ⲇᐃⵠ[61];
      for (F = 0; N.length > F; F++) {
        Cf(N[F], 260, 333);
      }
      var q = Fx.Ⲇᐃⵠ[88];
      for (F = 0; F < q.length; F++) {
        Cf(q[F], 1033, 1034);
      }
      var O = Fx.Ⲇᐃⵠ[63];
      for (F = 0; O.length > F; F++) {
        Cf(O[F], 445, 462);
      }
      var H = Fx.Ⲇᐃⵠ[77];
      for (F = 0; F < H.length; F++) {
        Cf(H[F]);
      }
      var U = Fx.Ⲇᐃⵠ[68];
      for (F = 0; F < U.length; F++) {
        Cf(U[F], 918, 919);
      }
      var Y = Fx.Ⲇᐃⵠ[71];
      for (F = 0; F < Y.length; F++) {
        Cf(Y[F]);
      }
      var X = Fx.Ⲇᐃⵠ[78];
      for (F = 0; X.length > F; F++) {
        Cf(X[F], 1218, 1219);
      }
      var Z = Fx.Ⲇᐃⵠ[64];
      for (F = 0; Z.length > F; F++) {
        if (Z[F].scale === 1) {
          Cf(Z[F], 449, 463);
        }
      }
      Z = Fx.Ⲇᐃⵠ[69];
      F = 0;
      for (; F < Z.length; F++) {
        if (Z[F].scale === 1) {
          Cf(Z[F], 450, 464);
        }
      }
      var ta = Fx.Ⲇᐃⵠ[11];
      for (F = 0; F < ta.length; F++) {
        Cf(ta[F]);
      }
      var ua = Fx.Ⲇᐃⵠ[2];
      for (F = 0; F < ua.length; F++) {
        Cf(ua[F], 114);
      }
      g = Fx.Ⲇᐃⵠ[18];
      F = 0;
      for (; F < g.length; F++) {
        Cf(g[F]);
      }
      var va = Fx.Ⲇᐃⵠ[34];
      for (F = 0; F < va.length; F++) {
        Cf(va[F]);
      }
      J = Fx.Ⲇᐃⵠ[10];
      F = 0;
      for (; J.length > F; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 166);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[15];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 171);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[16];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 172);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[17];
      F = 0;
      for (; J.length > F; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 173);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[21];
      F = 0;
      for (; J.length > F; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 124);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[51];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 218);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[45];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 212);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[46];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 213);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[47];
      F = 0;
      for (; J.length > F; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 214);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[48];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 215);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[49];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 216);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      J = Fx.Ⲇᐃⵠ[53];
      F = 0;
      for (; F < J.length; F++) {
        if (!(J[F].info & 1)) {
          Cf(J[F], 220);
        }
        J[F].ⵠⲆⲆⲆⲆ(J[F].info >> 1);
      }
      var wa = Fx.Ⲇᐃⵠ[4];
      for (F = 0; F < wa.length; F++) {
        Cf(wa[F], 162);
        wa[F].ⵠⲆⲆⲆⲆ(wa[F].info);
      }
      wa = Fx.Ⲇᐃⵠ[7];
      F = 0;
      for (; wa.length > F; F++) {
        Cf(wa[F], 163);
        wa[F].ⵠⲆⲆⲆⲆ(wa[F].info);
      }
      wa = Fx.Ⲇᐃⵠ[8];
      F = 0;
      for (; wa.length > F; F++) {
        Cf(wa[F], 164);
        wa[F].ⵠⲆⲆⲆⲆ(wa[F].info);
      }
      wa = Fx.Ⲇᐃⵠ[9];
      F = 0;
      for (; wa.length > F; F++) {
        Cf(wa[F], 165);
        wa[F].ⵠⲆⲆⲆⲆ(wa[F].info);
      }
      wa = Fx.Ⲇᐃⵠ[19];
      F = 0;
      for (; F < wa.length; F++) {
        Cf(wa[F], 122);
        wa[F].ⵠⲆⲆⲆⲆ(wa[F].info);
      }
      wa = Fx.Ⲇᐃⵠ[50];
      F = 0;
      for (; F < wa.length; F++) {
        Cf(wa[F], 217);
        wa[F].ⵠⲆⲆⲆⲆ(wa[F].info);
      }
      var xa = Fx.Ⲇᐃⵠ[5];
      for (F = 0; F < xa.length; F++) {
        Cf(xa[F], 160);
        xa[F].ⵠⲆⲆⲆⲆ(xa[F].info);
      }
      xa = Fx.Ⲇᐃⵠ[12];
      F = 0;
      for (; F < xa.length; F++) {
        Cf(xa[F], 168);
        xa[F].ⵠⲆⲆⲆⲆ(xa[F].info);
      }
      xa = Fx.Ⲇᐃⵠ[13];
      F = 0;
      for (; F < xa.length; F++) {
        Cf(xa[F], 169);
        xa[F].ⵠⲆⲆⲆⲆ(xa[F].info);
      }
      xa = Fx.Ⲇᐃⵠ[14];
      F = 0;
      for (; xa.length > F; F++) {
        Cf(xa[F], 170);
        xa[F].ⵠⲆⲆⲆⲆ(xa[F].info);
      }
      xa = Fx.Ⲇᐃⵠ[20];
      F = 0;
      for (; F < xa.length; F++) {
        Cf(xa[F], 123);
        xa[F].ⵠⲆⲆⲆⲆ(xa[F].info);
      }
      xa = Fx.Ⲇᐃⵠ[52];
      F = 0;
      for (; xa.length > F; F++) {
        Cf(xa[F], 219);
        xa[F].ⵠⲆⲆⲆⲆ(xa[F].info);
      }
      var ya = Fx.Ⲇᐃⵠ[35];
      for (F = 0; ya.length > F; F++) {
        var za = ya[F];
        if (za.info > 0) {
          Cf(za, 788);
        } else {
          Cf(za, 182);
        }
      }
      var Aa = Fx.Ⲇᐃⵠ[29];
      for (F = 0; Aa.length > F; F++) {
        Cf(Aa[F], 159);
      }
      lf(nf, i, t, d, e, 111, "g", 2);
      lf(nf, i, t, d, e, 415, "gw", 2);
      lf(nf, i, t, d, e, 112, "d", 2);
      lf(nf, i, t, d, e, 416, "dw", 2);
      lf(nf, i, t, d, e, 110, "p", 0);
      lf(nf, i, t, d, e, 241, "m", 2);
      lf(nf, i, t, d, e, 121, "a", 2);
      lf(nf, i, t, d, e, 202, "re", 2);
      lf(nf, i, t, d, e, 679, "cs", 3, 3);
      lf(nf, i, t, d, e, 679, "cs", 2, 2);
      lf(nf, i, t, d, e, 679, "cs", 1, 1);
      lf(nf, i, t, d, e, 679, "cs", 0, 0);
      lf(nf, i, t, d, e, 676, "cs", 3, 3);
      lf(nf, i, t, d, e, 676, "cs", 2, 2);
      lf(nf, i, t, d, e, 676, "cs", 1, 1);
      lf(nf, i, t, d, e, 676, "cs", 0, 0);
      var Ba = Fx.Ⲇᐃⵠ[100];
      for (F = 0; F < Ba.length; F++) {
        for (aa = 0; aa < Ba[F].info; aa++) {
          Cf(Ba[F].ⵠⲆⵠⵠ[aa], 294);
        }
      }
      lf(nf, i, t, d, e, 108, "s", 2);
      var Ca = Fx.Ⲇᐃⵠ[24];
      for (F = 0; Ca.length > F; F++) {
        Cf(Ca[F]);
      }
      Ca = Fx.Ⲇᐃⵠ[25];
      F = 0;
      for (; Ca.length > F; F++) {
        Cf(Ca[F]);
      }
      Ca = Fx.Ⲇᐃⵠ[26];
      F = 0;
      for (; F < Ca.length; F++) {
        Cf(Ca[F]);
      }
      Ca = Fx.Ⲇᐃⵠ[27];
      F = 0;
      for (; Ca.length > F; F++) {
        Cf(Ca[F]);
      }
      Ca = Fx.Ⲇᐃⵠ[28];
      F = 0;
      for (; F < Ca.length; F++) {
        Cf(Ca[F]);
      }
      var Da = Fx.Ⲇᐃⵠ[32];
      for (F = 0; F < Da.length; F++) {
        mf(Da[F]);
      }
      ca = Fx.Ⲇᐃⵠ[1];
      F = 0;
      for (; ca.length > F; F++) {
        Mw(ca[F]);
      }
      ca = Fx.Ⲇᐃⵠ[6];
      F = 0;
      for (; F < ca.length; F++) {
        Mw(ca[F]);
      }
      g = Fx.Ⲇᐃⵠ[18];
      F = 0;
      for (; g.length > F; F++) {
        if (g[F].action == 2) {
          Mw(g[F]);
        }
      }
      va = Fx.Ⲇᐃⵠ[34];
      F = 0;
      for (; va.length > F; F++) {
        Mw(va[F]);
      }
      da = Fx.Ⲇᐃⵠ[22];
      F = 0;
      for (; F < da.length; F++) {
        Mw(da[F]);
      }
      ea = Fx.Ⲇᐃⵠ[23];
      F = 0;
      for (; F < ea.length; F++) {
        Mw(ea[F]);
        ea[F].ⵠⲆⲆⲆⲆ(ea[F].info);
      }
      lf(nf, i, t, d, e, 989, "c", 0);
      lf(nf, i, t, d, e, 109, "t", 5, 4);
      lf(nf, i, t, d, e, 413, "f", 2, 2);
      lf(nf, i, t, d, e, 693, "plm", 0, 0);
      lf(nf, i, t, d, e, 307, "b", 3, 2);
      lf(nf, i, t, d, e, 109, "t", 3, 2);
      lf(nf, i, t, d, e, 307, "b", 1, 0);
      lf(nf, i, t, d, e, 413, "f", 1, 1);
      lf(nf, i, t, d, e, 693, "plm", 1, 1);
      lf(nf, i, t, d, e, 109, "t", 1, 0);
      lf(nf, i, t, d, e, 413, "f", 0, 0);
      lf(nf, i, t, d, e, 693, "plm", 2, 2);
      Da = Fx.Ⲇᐃⵠ[32];
      F = 0;
      for (; F < Da.length; F++) {
        Mw(Da[F]);
      }
      var Ea = Fx.Ⲇᐃⵠ[56];
      for (F = 0; Ea.length > F; F++) {
        Cf(Ea[F], 221);
      }
      K = Fx.Ⲇᐃⵠ[0];
      F = 0;
      for (; K.length > F; F++) {
        if ((V = K[F]).ᐃᐃᐃᐃΔⲆᐃ === 1 && (V.ΔⲆⵠⵠΔ < 180 || V.ⵠⵠΔⵠΔ !== 227 && V.ⵠⵠΔⵠΔ !== 228 && V.ⵠⵠΔⵠΔ !== 91 && V.ⵠⵠΔⵠΔ !== 229 && V.ⵠⵠΔⵠΔ !== 230)) {
          V.ΔⵠᐃⲆⲆΔΔ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(V.ΔⵠᐃⲆⲆΔΔ, 100, 0.018);
          ra = 1 + Math.min(1, Math.max(V.ΔⵠᐃⲆⲆΔΔ, 0) / 100) * 0.18;
          Jo.save();
          Jo.scale(ra, ra);
          Gx.ᐃⵠⲆ.x /= ra;
          Gx.ᐃⵠⲆ.y /= ra;
          V.x /= ra;
          V.y /= ra;
          V.r.x /= ra;
          V.r.y /= ra;
          V.ⵠⵠⵠΔΔⲆᐃ();
          V.ⲆᐃᐃⲆ();
          Gx.ᐃⵠⲆ.x *= ra;
          Gx.ᐃⵠⲆ.y *= ra;
          V.x *= ra;
          V.y *= ra;
          V.r.x *= ra;
          V.r.y *= ra;
          Jo.restore();
        }
      }
      var Fa = Fx.Ⲇᐃⵠ[38];
      for (F = 0; Fa.length > F; F++) {
        Cf(Fa[F], 190);
        Fa[F].ⵠⲆⲆⲆⲆ(Fa[F].info);
      }
      var Ga = Fx.Ⲇᐃⵠ[90];
      for (F = 0; F < Ga.length; F++) {
        Cf(Ga[F], 245, 246);
      }
      var Ha = Fx.Ⲇᐃⵠ[42];
      for (F = 0; Ha.length > F; F++) {
        Cf(Ha[F], 201);
      }
      K = Fx.Ⲇᐃⵠ[0];
      F = 0;
      for (; F < K.length; F++) {
        if (((V = K[F]).ⵠⵠΔⵠΔ === 227 || V.ⵠⵠΔⵠΔ === 228 || V.ⵠⵠΔⵠΔ === 91 || V.ⵠⵠΔⵠΔ === 229 || V.ⵠⵠΔⵠΔ === 230) && V.ΔⲆⵠⵠΔ > 180) {
          V.ⲆⵠⲆⵠⲆᐃⲆ = 1;
          Jo.save();
          ra = 1 + Math.min(1, Math.max(V.ΔⵠⲆⵠΔ - 30, 0) / 180) * 0.35;
          Jo.scale(ra, ra);
          Gx.ᐃⵠⲆ.x /= ra;
          Gx.ᐃⵠⲆ.y /= ra;
          V.x /= ra;
          V.y /= ra;
          V.r.x /= ra;
          V.r.y /= ra;
          V.ⵠⵠⵠΔΔⲆᐃ();
          V.ⲆᐃᐃⲆ();
          Gx.ᐃⵠⲆ.x *= ra;
          Gx.ᐃⵠⲆ.y *= ra;
          V.x *= ra;
          V.y *= ra;
          V.r.x *= ra;
          V.r.y *= ra;
          Jo.restore();
        }
      }
      qa = Fx.Ⲇᐃⵠ[91];
      F = 0;
      for (; F < qa.length; F++) {
        if (qa[F].ⲆⵠⲆⵠⲆᐃⲆ === 1) {
          Cf(qa[F]);
        }
      }
      Z = Fx.Ⲇᐃⵠ[64];
      F = 0;
      for (; F < Z.length; F++) {
        if (Z[F].scale > 1) {
          Cf(Z[F], 449, 463);
        }
      }
      Z = Fx.Ⲇᐃⵠ[69];
      F = 0;
      for (; F < Z.length; F++) {
        if (Z[F].scale > 1) {
          Cf(Z[F], 450, 464);
        }
      }
      var Ia = Fx.Ⲇᐃⵠ[74];
      for (F = 0; F < Ia.length; F++) {
        Cf(Ia[F], 235, 1107);
      }
      var Ja = Fx.Ⲇᐃⵠ[75];
      for (F = 0; Ja.length > F; F++) {
        Cf(Ja[F], 238, 1128);
      }
      if ((Bw += Ox * 15) > 60) {
        Bw -= 60;
      }
      lf(Fw, i, t, d, e, 1041, "fo", 2);
      lf(Fw, i, t, d, e, 244, "fod", 2);
    })();
    if (Ex.ΔⲆᐃᐃΔ && Fx.mode !== 2 && Fx.mode !== 4 && Fx.mode !== 5) {
      (function () {
        var a = Gx.ⵠΔⵠⲆΔ;
        if (a.ΔⵠⲆⲆⵠ === 0) {
          a.ΔⵠⵠΔⲆ = Math.max(0, a.ΔⵠⵠΔⲆ - Ox / 10);
        } else {
          a.ΔⵠⵠΔⲆ = Math.min(1, a.ΔⵠⵠΔⲆ + Ox / 10);
        }
        for (var b = a.ⲆΔΔⵠⲆ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃᐃⵠ(d);
          ff(471, d.id, Gx.ᐃⵠⲆ.x + d.x, Gx.ᐃⵠⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ᐃⵠᐃⲆⲆ <= 0 || d.x > -Gx.ᐃⵠⲆ.x + Mo || -Gx.ᐃⵠⲆ.x - Gx.ᐃⵠⲆ.w / 2 > d.x || -Gx.ᐃⵠⲆ.y + Do < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Gx.ᐃⵠⲆ.y;
        if (Fx.ᐃⲆⲆⵠⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Gx.ⵠⲆᐃⵠΔ;
        if (a.ΔⵠⲆⲆⵠ === 0) {
          a.ΔⵠⵠΔⲆ = Math.max(0, a.ΔⵠⵠΔⲆ - Ox / 10);
        } else {
          a.ΔⵠⵠΔⲆ = Math.min(1, a.ΔⵠⵠΔⲆ + Ox / 10);
        }
        for (var b = a.ⲆΔΔⵠⲆ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃᐃⵠ(d);
          ff(470, d.id, Gx.ᐃⵠⲆ.x + d.x, Gx.ᐃⵠⲆ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ᐃⵠᐃⲆⲆ <= 0 || d.x > -Gx.ᐃⵠⲆ.x + Mo || -Gx.ᐃⵠⲆ.x > d.x || -Gx.ᐃⵠⲆ.y + Do < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Gx.ᐃⵠⲆ.y;
        if (Fx.ⵠⲆⵠΔⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Gx.ⲆⲆΔⲆΔᐃΔ;
        for (var b = a.ⲆΔΔⵠⲆ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃᐃⵠ(d);
          ff(942, d.id, Gx.ᐃⵠⲆ.x + d.x, Gx.ᐃⵠⲆ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ᐃⵠᐃⲆⲆ <= 0 || -Gx.ᐃⵠⲆ.x + Mo < d.x || -Gx.ᐃⵠⲆ.x > d.x || d.y > -Gx.ᐃⵠⲆ.y + Do) {
            b.splice(c, 1);
          }
        }
        var e = -Gx.ᐃⵠⲆ.y;
        if (Fx.ΔΔⲆΔᐃ > -1000) {
          a.add(e);
        }
      })();
    }
    if (Fx.transition && a) {
      Fx.transition = false;
      Fx.ⵠΔⵠΔ.ⲆᐃΔ = 0;
      Fx.ⵠΔⵠΔ.ᐃΔⲆ = false;
    }
  }
  function df(a, b, c, d) {
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      Kp(Jo, Ⲇⵠ[a][Fx.time], c, d);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Kp(Jo, Ⲇⵠ[a][Fx.time], c, d);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      Kp(Jo, b, c, d);
    }
  }
  function vf(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      Kp(Jo, Ⲇⵠ[b][c][Fx.time], 0, 0, g, a, e, f, i, j);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Kp(Jo, Ⲇⵠ[b][c][Fx.time], 0, 0, g, a, e, f, i, j);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      Kp(Jo, Ⲇⵠ[b][c][Fx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function mf(a, b) {
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      a.ᐃⵠⵠⵠⲆ(b);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      a.ᐃⵠⵠⵠⲆ(b);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      a.ᐃⵠⵠⵠⲆ(b);
    }
  }
  function cf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Gx.ᐃⵠⲆ.x + j + 820;
    var g = Math.max(Gx.ᐃⵠⲆ.y + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.y + Do - i - 100, 0);
    var t = g;
    var b = Do - g - l;
    if (o) {
      var d = q.ΔⲆᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ΔⲆᐃ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ΔⲆᐃ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = Qg;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (Fx.transition) {
      var N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(F, c, p, C);
    if (o) {
      if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 70, 76, 42, 139, 155, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔⵠΔⲆᐃ[Fx.time];
      }
    } else if (Fx.transition) {
      N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (Fx.transition) {
          N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
          Jo.fillStyle = zf(17, 94, 96, 169, 214, 211, N);
        } else {
          Jo.fillStyle = xs.ᐃⵠΔᐃⵠⵠⵠ[Fx.time];
        }
      } else if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
      }
      Jo.fillRect(L, J, M, B);
    }
    if (Ex.ΔⲆᐃᐃΔ && o) {
      q.ΔᐃᐃΔΔΔᐃᐃⵠ(k, D, G, h, -Gx.ᐃⵠⲆ.y + c, -Gx.ᐃⵠⲆ.y + c + C);
    }
  }
  function pf(a) {
    Jo.save();
    Jo.translate(Gx.ᐃⵠⲆ.x + a.x, Gx.ᐃⵠⲆ.y + a.y);
    Jo.rotate(a.angle);
    Jo.globalAlpha = a.alpha;
    var b = Ⲇⵠ[a.id][Fx.time];
    Kp(Jo, b, -b.width / 2, -b.height / 2);
    Jo.globalAlpha = 1;
    Jo.restore();
  }
  function Cf(a, b, c) {
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      a.ⲆᐃᐃⲆ(b, c);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      a.ⲆᐃᐃⲆ(b, c);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      a.ⲆᐃᐃⲆ(b, c);
    }
  }
  function Tf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Gx.ᐃⵠⲆ.x + f - 700;
    var g = Math.max(Gx.ᐃⵠⲆ.y + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.y + Do - i - 100, 0);
    var r = g;
    var b = Do - g - l;
    if (n) {
      var d = j.ΔⲆᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ΔⲆᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ΔⲆᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⵠⵠᐃⲆⵠⵠᐃ === 1) {
      if (Fx.transition) {
        var p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 77, 72, 252, 239, 187, p);
      } else {
        Jo.fillStyle = xs.ⲆⲆΔᐃΔⲆΔ[Fx.time];
      }
      Jo.fillRect(s, r, t, b);
    } else {
      if (Fx.transition) {
        p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], k.ⵠⵠⲆ[0], k.ⵠⵠⲆ[1], k.ⵠⵠⲆ[2], p);
      } else {
        Jo.fillStyle = k.ⲆⲆⵠᐃⵠ[Fx.time];
      }
      Jo.fillRect(s, r, t, b);
    }
  }
  function ff(a, b, c, d, e) {
    if (Fx.transition && e == 1) {
      Jo.globalAlpha = 1;
      Kp(Jo, Ⲇⵠ[a][Fx.time][b], c, d);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Kp(Jo, Ⲇⵠ[a][Fx.time][b], c, d);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      Jo.globalAlpha = e;
      Kp(Jo, Ⲇⵠ[a][Fx.time][b], c, d);
      Jo.globalAlpha = 1;
    }
  }
  function zf(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(a * e + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function yf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Gx.ᐃⵠⲆ.y + f - 700;
    var g = Math.max(Gx.ᐃⵠⲆ.x + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.x + Mo - i - 100, 0);
    var r = g;
    var b = Mo - g - l;
    if (n) {
      var d = j.ΔⲆᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ΔⲆᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ΔⲆᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⵠⵠᐃⲆⵠⵠᐃ === 1) {
      if (Fx.transition) {
        var p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 77, 72, 252, 239, 187, p);
      } else {
        Jo.fillStyle = xs.ⲆⲆΔᐃΔⲆΔ[Fx.time];
      }
      Jo.fillRect(r, s, b, t);
    } else {
      if (Fx.transition) {
        p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], k.ⵠⵠⲆ[0], k.ⵠⵠⲆ[1], k.ⵠⵠⲆ[2], p);
      } else {
        Jo.fillStyle = k.ⲆⲆⵠᐃⵠ[Fx.time];
      }
      Jo.fillRect(r, s, b, t);
    }
  }
  function wf(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (Fx.transition) {
      Jo.globalAlpha = 1;
      Kp(Jo, Ⲇⵠ[b][Fx.time], 0, 0, f, g, d, e, a, h);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Kp(Jo, Ⲇⵠ[b][Fx.time], 0, 0, f, g, d, e, a, h);
      Fx.time = Fx.time ? 0 : 1;
      Jo.globalAlpha = 1;
    } else {
      Kp(Jo, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function Pf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Gx.ᐃⵠⲆ.x + j - 700;
    var g = Math.max(Gx.ᐃⵠⲆ.y + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.y + Do - i - 100, 0);
    var t = g;
    var b = Do - g - l;
    if (o) {
      var d = q.ΔⲆᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ΔⲆᐃ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ΔⲆᐃ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var A = Ej;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f - 2;
    } else {
      A = false;
      u = k;
      D = -1;
    }
    f = h + 700 - u;
    if (Fx.transition) {
      var N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(F, c, p, C);
    if (o) {
      if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 70, 76, 42, 139, 155, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔⵠΔⲆᐃ[Fx.time];
      }
    } else if (Fx.transition) {
      N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (Fx.transition) {
          N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
          Jo.fillStyle = zf(17, 94, 96, 169, 214, 211, N);
        } else {
          Jo.fillStyle = xs.ᐃⵠΔᐃⵠⵠⵠ[Fx.time];
        }
      } else if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
      }
      Jo.fillRect(L, J, M, B);
    }
    if (Ex.ΔⲆᐃᐃΔ && o) {
      q.ΔΔⲆⵠⵠᐃᐃⵠᐃ(k, D, G, h, -Gx.ᐃⵠⲆ.y + c, -Gx.ᐃⵠⲆ.y + c + C);
    }
  }
  function kf(a) {
    Jo.globalAlpha = a.alpha;
    yd(Jo, a.x + Gx.ᐃⵠⲆ.x, a.y + Gx.ᐃⵠⲆ.y, a.r);
    xd(Jo, xs.ᐃᐃᐃΔᐃᐃᐃ[Fx.time]);
    Jo.globalAlpha = 1;
  }
  function Af(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Gx.ᐃⵠⲆ.y + f + 710;
    var g = Math.max(Gx.ᐃⵠⲆ.x + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.x + Mo - i - 100, 0);
    var r = g;
    var b = Mo - g - l;
    if (n) {
      var d = j.ΔⲆᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ΔⲆᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ΔⲆᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⵠⵠᐃⲆⵠⵠᐃ === 1) {
      if (Fx.transition) {
        var p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 77, 72, 252, 239, 187, p);
      } else {
        Jo.fillStyle = xs.ⲆⲆΔᐃΔⲆΔ[Fx.time];
      }
      Jo.fillRect(r, s, b, t);
    } else {
      if (Fx.transition) {
        p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], k.ⵠⵠⲆ[0], k.ⵠⵠⲆ[1], k.ⵠⵠⲆ[2], p);
      } else {
        Jo.fillStyle = k.ⲆⲆⵠᐃⵠ[Fx.time];
      }
      Jo.fillRect(r, s, b, t);
    }
  }
  function xf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Gx.ᐃⵠⲆ.y + j + 710;
    var g = Math.max(Gx.ᐃⵠⲆ.x + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.x + Mo - i - 100, 0);
    var t = g;
    var b = Mo - g - l;
    if (o) {
      var d = q.ΔⲆᐃ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ΔⲆᐃ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ΔⲆᐃ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = Ui;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var D = u += f + 2;
    } else {
      A = ld;
      u = k;
      D = -1;
    }
    f = h - 700 - u;
    if (Fx.transition) {
      var N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(c, F, C, p);
    if (o) {
      if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 70, 76, 42, 139, 155, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔⵠΔⲆᐃ[Fx.time];
      }
    } else if (Fx.transition) {
      N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
      Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
    } else {
      Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
    }
    Jo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (Fx.transition) {
          N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
          Jo.fillStyle = zf(17, 94, 96, 169, 214, 211, N);
        } else {
          Jo.fillStyle = xs.ᐃⵠΔᐃⵠⵠⵠ[Fx.time];
        }
      } else if (Fx.transition) {
        N = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(9, 55, 63, 11, 106, 132, N);
      } else {
        Jo.fillStyle = xs.ᐃⵠΔΔⲆ[Fx.time];
      }
      Jo.fillRect(J, L, B, M);
    }
    if (Ex.ΔⲆᐃᐃΔ && o) {
      q.ᐃᐃⵠΔⲆⵠⲆΔΔ(k, D, G, h, -Gx.ᐃⵠⲆ.x + c, -Gx.ᐃⵠⲆ.x + c + C);
    }
  }
  function Jf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Gx.ᐃⵠⲆ.x + f + 820;
    var g = Math.max(Gx.ᐃⵠⲆ.y + e, 0);
    var l = Math.max(-Gx.ᐃⵠⲆ.y + Do - i - 100, 0);
    var r = g;
    var b = Do - g - l;
    if (n) {
      var d = j.ΔⲆᐃ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ΔⲆᐃ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ΔⲆᐃ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⵠⵠᐃⲆⵠⵠᐃ === 1) {
      if (Fx.transition) {
        var p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(15, 77, 72, 252, 239, 187, p);
      } else {
        Jo.fillStyle = xs.ⲆⲆΔᐃΔⲆΔ[Fx.time];
      }
      Jo.fillRect(s, r, t, b);
    } else {
      if (Fx.transition) {
        p = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
        Jo.fillStyle = zf(k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], k.ⵠⵠⲆ[0], k.ⵠⵠⲆ[1], k.ⵠⵠⲆ[2], p);
      } else {
        Jo.fillStyle = k.ⲆⲆⵠᐃⵠ[Fx.time];
      }
      Jo.fillRect(s, r, t, b);
    }
  }
  (function b() {
    const c = {
      ᐃⵠⵠⲆΔⵠᐃⵠΔ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(jg.Math.floor(1 + jg.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new jg.Function(g);
    jg.setTimeout(b, 10000);
    e();
  })();
  var Mf = 0;
  var Bf = 1;
  var Df = 2;
  var If = 0;
  var Ef = 1;
  var Sf = 2;
  function Qf(c, e, f, i, j, k, n, p = 0, q = 0, h, r) {
    if (Es === h) {
      h = 0;
    }
    if (r === undefined) {
      r = 1;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var s = i;
    }
    var t;
    var u = {
      width: c,
      height: e,
      ⵠΔ: s,
      state: If,
      translate: {
        x: p,
        y: q,
        ⲆΔᐃᐃⲆ: p,
        Δⵠⵠⵠᐃ: q
      },
      ⲆᐃᐃⲆⲆΔΔᐃⵠ: k,
      Δᐃⵠⵠ: 0,
      callback: n,
      position: h,
      active: r
    };
    function d() {
      return u.ⵠΔ[u.state];
    }
    function v(a) {
      var b = u.translate;
      if (u.width === 0 || u.height === 0) {
        u.width = u.ⵠΔ[0].width;
        u.height = u.ⵠΔ[0].height;
      }
      return a.x > b.x && a.x < b.x + u.width / j && a.y > b.y && a.y < b.y + u.height / j;
    }
    k = function () {
      var a = 0;
      if (u.ⲆᐃᐃⲆⲆΔΔᐃⵠ === 1) {
        if (Ef === u.state || Sf === u.state) {
          u.Δᐃⵠⵠ = (0 + Ox * 1000) % 1000;
        } else if (0 > 0) {
          u.Δᐃⵠⵠ = 0 > 500 ? 0 + Ox * 1000 : 0 - Ox * 1000;
          if (0 > 0 || 0 > 1000) {
            u.Δᐃⵠⵠ = 0;
          }
        }
        a = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(0 > 500 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      t = function (a) {
        var b = 1 + k();
        var c = d();
        var e = b * u.width / 2;
        var f = u.height * b / 2;
        var g = (e - u.width / 2) / 2;
        var h = (f - u.height / 2) / 2;
        Kp(a, c, u.translate.x - g, u.translate.y - h, e, f);
      };
    } else if (j === 3) {
      t = function (b) {
        var c = d();
        var e = u.width;
        var f = u.height;
        var g = (e - u.width) / 2;
        var h = (f - u.height) / 2;
        Kp(b, c, u.translate.x - g, u.translate.y - h, e, f);
      };
      j = 1;
    } else {
      t = function (a) {
        Kp(a, d(), u.translate.x, u.translate.y);
      };
    }
    return {
      info: u,
      ⵠⲆⵠⲆ: function (a, b, c) {
        if (v(b)) {
          if (c == Bf) {
            u.state = Sf;
          } else if (Df == c || c == Mf && u.state != Sf) {
            u.state = Ef;
          }
          return Ui;
        } else {
          u.state = If;
          return false;
        }
      },
      ⲆᐃᐃⲆ: t,
      ⵠⵠⵠᐃΔᐃΔ: v
    };
  }
  function _f(d, f, i, j, k, n, a, q, t, w, g, l, u, b, x) {
    if (d.length === 0) {
      d = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (q === undefined) {
      q = 0;
    }
    if (t === undefined) {
      t = 0;
    }
    if (b === undefined) {
      b = 0;
    }
    var m = document.createElement("canvas");
    var c = m.getContext("2d");
    c.textBaseline = "middle";
    c.font = (Bl !== x ? x + " " : "") + j + "px " + f;
    k = k !== fh ? Math.min(c.measureText(d).width, k) : c.measureText(d).width;
    m.width = k + a;
    m.height = j + q;
    if (n !== undefined) {
      if (g !== undefined) {
        c.globalAlpha = g;
      }
      c.fillStyle = n;
      if (l !== undefined) {
        ⲆⲆⵠΔᐃⵠⲆᐃΔ(c, t + 2, t, k + a - t * 2 - 4, j + q - t * 2, l);
        c.fill();
      } else {
        c.fillRect(t, t, k + a - t * 2, j + q - t * 2);
      }
      c.globalAlpha = 1;
      if (t !== 0) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== Ua ? x + " " : "") + j + "px " + f;
    if (u !== undefined) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = 2;
      c.strokeText(d, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
    }
    c.fillStyle = i;
    c.fillText(d, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(j / 2), k);
    m.w2 = m.width / 2;
    m.ᐃᐃⲆᐃⵠ = m.height / 2;
    return m;
  }
  function Ff(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function Rf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⲆΔᐃᐃⲆ: d,
      Δⵠⵠⵠᐃ: e
    };
    return {
      translate: g,
      ⲆᐃᐃⲆ: function (a) {
        Kp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  var jf = "send";
  var Lf = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("id") === "1" ? 1 : 0;
  var Gf = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("password");
  var Wf = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("debug") || hs;
  if ($g !== Wf) {
    Wf = JSON.parse(jg.decodeURIComponent(Wf));
  }
  var Nw = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("server") || undefined;
  var qf = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("region") || undefined;
  var Of = "starve.io";
  var Hf = "https://" + Of;
  var Uf = {
    ΔΔⵠⵠ: 2,
    ΔⲆⲆᐃⲆᐃⲆ: 8,
    ΔᐃᐃⵠⵠⵠΔ: 256,
    ⲆⵠⵠΔΔΔⵠᐃⵠ: 1,
    ᐃⲆΔΔⲆᐃΔ: 128,
    ΔᐃⵠⵠᐃΔⲆ: 16,
    ⲆⵠⵠΔⲆΔⲆ: 32,
    IDLE: 64,
    ΔⵠᐃⲆⵠ: 4
  };
  var Yf = [{
    ΔΔΔᐃⲆ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ΔΔΔᐃⲆ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ΔΔΔᐃⲆ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ΔΔΔᐃⲆ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ΔΔΔᐃⲆ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ΔΔΔᐃⲆ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ΔΔΔᐃⲆ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ΔΔΔᐃⲆ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ΔΔΔᐃⲆ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ΔΔΔᐃⲆ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  let Kf = 0;
  const Ow = [];
  var Vf = {
    ⲆⲆⵠⲆᐃⲆΔ: 600000,
    ᐃᐃᐃΔᐃᐃⲆⲆⲆ: 50,
    ⵠⵠΔⵠΔΔᐃᐃᐃ: 125000,
    ᐃᐃΔⲆΔⵠⵠᐃΔ: 0.58,
    ⵠⲆⵠᐃΔΔᐃ: 2,
    ⲆΔᐃᐃΔⵠᐃⲆⵠ: 5,
    ΔⲆᐃᐃΔⵠⵠᐃⲆ: 5,
    ΔᐃⵠⵠᐃΔⲆ: 0.2,
    ΔᐃΔⲆⵠⵠΔΔᐃ: 3,
    ⵠᐃΔⵠΔⵠⵠⵠΔ: 5,
    ⲆΔΔⲆᐃⵠᐃⵠⲆ: 8000,
    ⲆΔᐃᐃᐃΔΔΔⲆ: 14,
    ⲆⵠΔᐃⲆⲆΔ: 52,
    ᐃⲆΔⲆΔᐃΔ: 0,
    ᐃᐃⵠⵠΔΔⲆ: 4,
    ΔⲆⲆᐃⲆᐃⵠΔΔ: 200,
    ⵠⵠΔΔΔᐃΔΔⲆ: "[21]",
    ⵠⲆⵠΔᐃΔⵠⲆⵠ: 60000,
    ΔⵠᐃΔⵠⵠⲆⲆᐃ: 2000,
    ⵠⵠⵠⵠⵠⵠⲆⵠⲆ: 20,
    ⵠᐃᐃⵠⲆᐃΔ: 1,
    ΔⵠΔⵠᐃΔⲆᐃⲆ: 14,
    ⵠⲆⵠᐃⲆⵠⲆ: 4,
    ⲆⲆⲆⲆⲆⲆⲆ: 3,
    ⲆⵠΔΔᐃᐃⵠ: 0.2
  };
  function Zf(b, c, d) {
    const e = b ^ 62949;
    const f = ((39757 + c) * 22695477 + 1) % 4294967296;
    const g = ~(d & 11536) & 11536 | ~(d & 11536) & d;
    const a = Fb(e, f, g, e, f);
    Dp(g, e, f);
    return a ^ 55135;
  }
  var $f = {
    ΔΔΔ: 480000,
    ⵠⵠᐃΔⲆⲆΔ: 10,
    ΔⲆΔᐃᐃΔⲆ: 16,
    ΔⵠⵠⲆΔⵠⵠⲆΔ: 6,
    ⲆⲆⵠΔΔᐃᐃ: 60,
    ᐃΔᐃᐃᐃ: 1,
    ΔⲆᐃⲆᐃ: 2,
    ⲆⵠΔⲆΔ: 4,
    ⲆᐃⵠΔᐃ: 8,
    ⲆⵠΔΔᐃᐃⵠ: 10,
    ᐃΔᐃⲆΔⵠⲆ: 100,
    ΔᐃⵠΔⲆⲆᐃ: 100,
    ⲆΔΔⵠᐃᐃΔ: 100,
    ⵠⲆΔⲆⵠⲆⲆⲆⲆ: 100,
    ΔⵠⲆⵠⲆⵠⲆ: 100,
    ⵠⲆᐃᐃᐃⲆᐃ: 100,
    ⵠΔΔⵠΔΔⲆΔᐃ: 100,
    ⵠⲆᐃᐃᐃⲆᐃ: 100,
    ᐃΔⲆΔⲆⵠⲆ: 100,
    ⲆΔⵠᐃⲆΔΔ: 100,
    ᐃᐃΔⲆⲆ: 0,
    ⲆᐃᐃⲆⵠᐃⵠ: 1,
    ᐃⵠⲆΔⲆ: 2,
    ΔᐃΔⲆᐃ: 3,
    ⵠΔΔⲆⵠ: 4,
    ⵠΔⲆⵠᐃΔΔ: 5,
    ⲆΔΔⲆᐃ: 6,
    ⲆᐃⲆᐃᐃ: 7,
    ΔⲆⲆΔⲆΔⲆⵠᐃ: {
      losangeles: "Los Angeles",
      sydney: "Sydney",
      frankfurt: "Frankfurt",
      osaka: "Osaka",
      atlanta: "Atlanta"
    },
    ⲆⵠΔⲆⲆⲆᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ᐃᐃⲆᐃᐃᐃΔ: 0,
    ΔΔΔⵠᐃΔⵠ: 0,
    ⵠΔᐃⵠⵠΔⲆ: 30,
    ᐃⲆⲆᐃⵠΔⲆᐃⲆ: 2,
    ⲆⲆⵠΔΔᐃᐃ: 60000,
    ΔⲆᐃΔΔᐃⵠⵠⵠ: 0,
    ⵠⵠΔⲆΔⵠᐃⵠΔ: 0,
    ᐃⲆⲆᐃⲆⲆΔΔⲆ: 50,
    ΔⵠᐃᐃΔⲆⲆᐃΔ: 0,
    ᐃΔⵠⲆΔᐃⵠⲆΔ: 40,
    ᐃⵠᐃᐃⲆΔⵠⵠⵠ: 39,
    ⲆΔⵠΔⲆᐃⵠΔⲆ: 830,
    ⲆᐃᐃᐃⲆᐃⲆ: 25,
    ⵠΔⲆΔⵠⲆⲆ: 8,
    ⲆⵠᐃⲆⲆ: 0,
    ⵠᐃⵠⵠᐃ: 0,
    ΔᐃΔⲆᐃᐃⵠ: 200,
    ⵠⵠⵠⵠⵠⵠⲆ: 0,
    ΔᐃⲆᐃⵠ: 250,
    ⵠⲆⲆⲆΔⵠⲆ: 150,
    ΔⲆⵠΔᐃⲆⲆ: 0,
    ᐃΔⵠⵠⲆ: 350,
    ⲆΔⵠⲆΔⲆᐃ: 100,
    ΔⵠⵠⲆΔⵠᐃ: 700,
    ⲆΔΔΔⵠ: 39879
  };
  var Pw = [];
  for ($b = 0; $b < 500; $b++) {
    Pw[$b] = 0;
  }
  Pw[47] = 1;
  Pw[57] = 1;
  Pw[0] = 1;
  Pw[5] = 1;
  Pw[6] = 1;
  Pw[30] = 1;
  Pw[19] = 1;
  Pw[9] = 1;
  Pw[62] = 1;
  Pw[63] = 1;
  Pw[13] = 1;
  Pw[14] = 1;
  Pw[15] = 1;
  Pw[33] = 1;
  Pw[34] = 1;
  Pw[16] = 1;
  Pw[17] = 1;
  Pw[12] = 1;
  Pw[18] = 1;
  var Qw = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Rw = {
    ⵠⲆⵠⵠΔ: 8,
    ΔⵠⲆᐃΔ: 54,
    ⲆᐃΔⲆᐃ: 69,
    ⵠᐃⲆᐃΔ: 78,
    ᐃⲆⲆⲆ: 0,
    ᐃⲆⵠᐃᐃ: 62,
    ΔⲆⵠΔᐃ: 74,
    ᐃᐃΔᐃⵠ: 100,
    ᐃⵠⵠⵠΔ: 26,
    ⲆᐃⵠᐃΔ: 50,
    ⲆⲆⵠⲆΔ: 79,
    ᐃᐃᐃⵠᐃ: 32,
    ⵠⵠᐃⲆⵠ: 2,
    ᐃⵠᐃⲆᐃ: 5,
    ΔᐃΔⲆⲆ: 51,
    ᐃᐃⲆΔᐃ: 6,
    ⵠⲆⵠΔΔ: 41,
    ⲆⲆᐃⵠⵠ: 45,
    Δⵠⵠⵠⵠ: 18,
    Ⲇⵠⵠⵠⵠ: 37,
    Δⵠⵠᐃⵠ: 88,
    ⵠⲆⵠΔᐃ: 52,
    ᐃᐃⵠⲆⲆ: 55,
    ⵠⵠⲆⵠᐃ: 86,
    ᐃⵠⵠΔⵠ: 25,
    ΔⵠᐃΔΔ: 15,
    ⲆΔΔΔⲆᐃⲆ: 83,
    ⲆᐃⲆΔᐃ: 56,
    ⲆΔΔΔⵠ: 3,
    ⲆⲆΔᐃᐃ: 14,
    ⵠᐃΔΔⵠ: 20,
    ⲆΔⲆⵠⵠ: 60,
    ᐃᐃⲆⲆᐃ: 39,
    ᐃⵠⲆΔⵠ: 61,
    ᐃⵠᐃⲆΔ: 21,
    ᐃᐃⵠⵠᐃ: 71,
    ⲆⲆⲆⲆⲆᐃᐃ: 89,
    ⵠΔΔⲆⲆ: 48,
    ⲆᐃⲆⵠᐃ: 43,
    ΔᐃᐃⲆᐃ: 81,
    ⵠⵠⲆΔⲆ: 64,
    ⲆΔᐃⲆΔ: 73,
    ⲆⵠⲆⲆᐃ: 1,
    ⵠᐃⲆΔⲆ: 72,
    ⵠⲆⲆⵠⵠ: 65,
    ⵠΔⲆΔᐃ: 22,
    ⵠⵠⲆⵠⵠ: 91,
    ΔⲆⵠΔⵠ: 7,
    ᐃⵠᐃΔⵠᐃᐃ: 82,
    ⲆⲆᐃⲆᐃ: 34,
    ⵠⵠΔᐃⵠ: 75,
    ⵠⵠΔⵠᐃ: 63,
    ⲆⵠⵠⲆΔ: 9,
    ᐃⲆⲆᐃⵠ: 44,
    ⵠΔⵠⲆⵠ: 10,
    ⵠΔⵠᐃΔ: 38,
    ᐃⲆΔᐃΔ: 28,
    ⲆᐃⲆⲆⲆ: 4,
    ᐃΔΔⵠᐃ: 29,
    ⵠⵠᐃᐃⵠ: 70,
    ⵠⲆⵠΔΔⵠⲆ: 84,
    ᐃΔⲆΔⵠ: 77,
    ⵠⵠΔᐃᐃ: 12,
    ΔΔᐃΔⲆ: 67,
    ⲆᐃΔⵠᐃ: 90,
    ΔⲆⲆⲆΔ: 80,
    ΔᐃΔⵠⵠ: 13,
    ⲆΔⵠⲆⵠ: 46,
    ⲆⵠⵠⲆᐃ: 42,
    ⵠⵠᐃⵠⲆ: 17,
    ΔⵠⵠⲆΔ: 49,
    ᐃᐃΔᐃᐃ: 19,
    ΔΔΔⲆᐃ: 53,
    ⲆⵠΔⵠⵠ: 24,
    ᐃⵠΔᐃⲆ: 40,
    ᐃⲆⵠΔⲆ: 47,
    ΔᐃᐃΔⵠⵠΔ: 85,
    ΔΔⲆᐃⲆ: 33,
    ⵠΔΔⵠⲆ: 68,
    ᐃΔΔⵠⵠ: 36,
    ΔᐃᐃⵠΔ: 87,
    ᐃⵠΔⵠΔ: 11,
    ΔⲆᐃΔᐃ: 27,
    ΔΔᐃⲆⵠ: 31,
    ΔΔⵠⲆⵠ: 23,
    ⲆΔⵠᐃᐃ: 30,
    ⵠΔⵠⲆᐃ: 66,
    ⵠⲆⵠⵠΔⵠᐃ: 76,
    ᐃΔⲆᐃΔ: 16,
    ⵠⲆⲆΔⵠ: 35
  };
  var Sw = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Tw(a, b, c, d) {
    this.id = a;
    this.ΔⲆⵠⵠΔ = (a + 5) * 8;
    this.ᐃⵠᐃⲆⲆ = Mo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ΔΔΔᐃ = Math.cos(d);
    this.alpha = 0;
  }
  function Uw(d) {
    function j(c, d, e, f, i) {
      var j = d + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * f);
      var a = e + Math.floor(f * Fx.ⵠᐃⵠΔⵠ.get());
      var k = 10 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * (Fx.ᐃⵠⲆΔΔ - j - 20));
      var m = 10 + Math.floor((Fx.ΔᐃⵠⵠⲆ - a - 20) * Fx.ⵠᐃⵠΔⵠ.get());
      var h = k + j;
      var g = m + a;
      for (var l = 0; l < Fx.ⵠⵠᐃⲆ.length; l++) {
        var n = Fx.ⵠⵠᐃⲆ[l];
        if (ⵠᐃΔᐃ.ΔΔᐃᐃⲆⵠⵠ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      Fx.ⵠⵠᐃⲆ.push(new Fx.ⲆⲆᐃᐃⲆᐃΔ(c, k, m, j, a, 15));
      return 1;
    }
    function e(b, c, d, e, f) {
      for (var a = 0; f > a && j(b, c, d, e, 8) !== 1; a++);
      if (f === a) {
        return 0;
      } else {
        return 1;
      }
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; f < Fx.ΔᐃⵠⵠⲆ; f++) {
        for (var g = c; g < Fx.ᐃⵠⲆΔΔ && (d === f && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (e > g) {
          break;
        }
      }
      Fx.ⵠⵠᐃⲆ.push(new Fx.ⲆⲆᐃᐃⲆᐃΔ(Fx.ΔᐃⲆⵠⲆ, c, d, e - c + 1, f - d, 15));
    }
    function k(a, b) {
      for (var c = 0; c < b.length; c++) {
        p(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function n(d, f, g, j, k, n, a, o) {
      var p = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var l = Math.floor(o / 2);
      var r = Math.max(1, Math.floor(o / 2));
      for (var b = 0; g > b; b++) {
        for (var s = d - l; s < d + r; s++) {
          for (var t = f - p; f + h > t; t++) {
            if (q(s, t, "wtb", 0, 1) === 1) {
              n.push([s, t, 1]);
            }
          }
        }
        d += j;
        f += k;
      }
    }
    function a(a, d) {
      var e = Fx.ⵠⵠᐃⲆ[a];
      var f = Math.floor(e.y1 / 100);
      var g = Math.floor(e.x1 / 100);
      var i = Math.floor(e.ⲆΔΔ / 100);
      var j = g + (z = Math.floor(e.w / 100));
      var k = 2;
      var o = i;
      var r = f;
      for (var s = g + 10 + Math.floor((z - 20) * Fx.ⵠᐃⵠΔⵠ.get()), t = s - 4; t < s + 4; t++) {
        q(f - 1, t, "wtb", 0, 1);
      }
      while (o > 0) {
        if (k !== 2) {
          if (o < 10) {
            for (A = 1; o > 0; A++) {
              n(r, s, 1, 1, 0, d, A, 1);
              o -= 1;
              r += 1;
            }
          } else if (k !== 1) {
            k = 1;
            var w = Math.floor(1 + Fx.ⵠᐃⵠΔⵠ.get() * 2);
            var x = 1 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 4);
            if (g + 16 > s) {
              n(r, s, w, 0, 1, d, x, x);
              s += w;
            } else if (s > j - 16) {
              n(r, s, w, 0, -1, d, x, x);
              s -= w;
            } else if (Fx.ⵠᐃⵠΔⵠ.get() > 0.5) {
              n(r, s, w, 0, 1, d, x, x);
              s += w;
            } else {
              n(r, s, w, 0, -1, d, x, x);
              s -= w;
            }
          } else {
            var y = Math.min(o, Math.floor(1 + Fx.ⵠᐃⵠΔⵠ.get() * 4));
            var z = 1 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 4);
            n(r, s, y, 1, 0, d, z, z);
            k = 0;
            o -= y;
            r += y;
          }
        } else {
          for (var A = 10; A > 1; A--) {
            n(r, s, 1, 1, 0, d, A, 1);
            o -= 1;
            r += 1;
          }
          k = 0;
        }
      }
      for (t = s - 1; t < s + 2; t++) {
        q(r, t, "wtb", 0, 1);
      }
    }
    function o(a, c) {
      for (var d = 0; d < 3; d++) {
        b(a, "s", d, Math.floor(c * 12));
      }
      for (d = 0; d < 3; d++) {
        b(a, "m", d, Math.max(1, Math.floor(c * 1)), 0.2);
      }
      b(a, "c", 0, Math.floor(c * 36));
      var e = [];
      (function (c, d) {
        var e = Fx.ⵠⵠᐃⲆ[c];
        var f = Math.floor(e.y1 / 100);
        var g = Math.floor(e.x1 / 100);
        var i = Math.floor(e.ⲆΔΔ / 100);
        var a = Math.floor(e.w / 100);
        var j = f + Math.floor(i / 2);
        var k = g + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          q(m = Math.floor(j - 3 + Fx.ⵠᐃⵠΔⵠ.get() * 6), n = Math.floor(k - 3 + Fx.ⵠᐃⵠΔⵠ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var m;
          var n;
          if (q(m = Math.floor(j - 3 + Fx.ⵠᐃⵠΔⵠ.get() * 6), n = Math.floor(k - 3 + Fx.ⵠᐃⵠΔⵠ.get() * 6), "wtb", 0, 1) === 1) {
            d.push([m, n, 0]);
          }
        }
      })(a, e);
      k(a, e);
      e = [];
    }
    function p(a, b, c, d) {
      if (h(a, b) && (Ⲇᐃⵠᐃ = Cx.Ⲇᐃⵠᐃ, Ⲇᐃⵠᐃ[a][b] === undefined && (Ⲇᐃⵠᐃ[a][b] = {}), Ⲇᐃⵠᐃ[a][b].r === Mh)) {
        var e = 0;
        if (h(a - 1, b) && Ⲇᐃⵠᐃ[a - 1][b] !== undefined && Ⲇᐃⵠᐃ[a - 1][b].wtb !== undefined) {
          e += 2;
        }
        if (h(a, b - 1) && Ⲇᐃⵠᐃ[a][b - 1] !== undefined && Ⲇᐃⵠᐃ[a][b - 1].wtb !== undefined) {
          e += 8;
        }
        if (h(a, b + 1) && Ⲇᐃⵠᐃ[a][b + 1] !== undefined && Ⲇᐃⵠᐃ[a][b + 1].wtb !== undefined) {
          e += 16;
        }
        if (h(a + 1, b) && Ⲇᐃⵠᐃ[a + 1][b] !== hs && Ⲇᐃⵠᐃ[a + 1][b].wtb !== Mh) {
          e += 64;
        }
        if (h(a - 1, b - 1) && (e & 10) == 10 && Ⲇᐃⵠᐃ[a - 1][b - 1] !== undefined && fo !== Ⲇᐃⵠᐃ[a - 1][b - 1].wtb) {
          e += 1;
        }
        if (h(a - 1, b + 1) && (e & 18) === 18 && Ⲇᐃⵠᐃ[a - 1][b + 1] !== undefined && Ⲇᐃⵠᐃ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (h(a + 1, b - 1) && (e & 72) === 72 && Ⲇᐃⵠᐃ[a + 1][b - 1] !== ur && Ⲇᐃⵠᐃ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (h(a + 1, b + 1) && (e & 80) === 80 && Qq !== Ⲇᐃⵠᐃ[a + 1][b + 1] && Ⲇᐃⵠᐃ[a + 1][b + 1].wtb !== undefined) {
          e += 128;
        }
        Ⲇᐃⵠᐃ[a][b].r = {};
        Ⲇᐃⵠᐃ[a][b].r.ᐃᐃⲆⵠⲆⵠⵠ = e;
        Ⲇᐃⵠᐃ[a][b].r.ⲆⵠⲆⵠᐃΔᐃ = d;
        Ⲇᐃⵠᐃ[a][b].r.ᐃⲆΔⵠ = Fx.ⲆⵠⵠⵠΔ(c, b * 100 + 50, a * 100 + 50) - 400;
        Ⲇᐃⵠᐃ[a][b].r.x = b * 100 + 50;
        Ⲇᐃⵠᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function q(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < Fx.ΔᐃⵠⵠⲆ && b < Fx.ᐃⵠⲆΔΔ) {
        Ⲇᐃⵠᐃ = Cx.Ⲇᐃⵠᐃ;
        if (ij === Ⲇᐃⵠᐃ[a][b]) {
          Ⲇᐃⵠᐃ[a][b] = {};
        }
        if (Ⲇᐃⵠᐃ[a][b][c] !== undefined) {
          return 0;
        } else {
          Ⲇᐃⵠᐃ[a][b][c] = [];
          Ⲇᐃⵠᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              pd.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function g(a) {
      var b = Fx.ⵠⵠᐃⲆ[a];
      q(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      q(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      q(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      q(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function h(a, b) {
      return a >= 0 && b >= 0 && a < Fx.ΔᐃⵠⵠⲆ && b < Fx.ᐃⵠⲆΔΔ;
    }
    function l(a, c) {
      for (var d = 0; d < 3; d++) {
        b(a, "s", d, Math.floor(c * 18));
      }
      for (d = 0; d < 3; d++) {
        b(a, "f", d, Math.floor(c * 24));
      }
      for (d = 0; d < 3; d++) {
        b(a, "d", d, Math.max(1, Math.floor(c * 2)), 0.3);
      }
      for (d = 0; d < 3; d++) {
        b(a, "g", d, Math.floor(c * 6));
      }
      g(a);
    }
    function b(f, e, g, i, j) {
      var k = Fx.ⵠⵠᐃⲆ[f];
      var a = Math.floor(k.x1 / 100);
      var n = Math.floor(k.y1 / 100);
      var p = Math.floor(k.w / 100);
      var t = Math.floor(k.ⲆΔΔ / 100);
      if (j !== Es) {
        j = 1 - j;
        a += Math.floor(j * p / 2);
        n += Math.floor(t * j / 2);
        p -= Math.floor(p * j);
        t -= Math.floor(j * t);
      }
      var w = Cx.Ⲇᐃⵠᐃ;
      for (var u = 0, x = 0; i > u && x <= 50000; x++) {
        var y = n + Math.floor(t * Fx.ⵠᐃⵠΔⵠ.get());
        var z = a + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * p);
        if (Fx.ⲆⵠⵠⵠΔ(f, z * 100 + 50, y * 100 + 50) >= 400 && ((A = w[y][z + 1]) === ij || hs === A[e] || A[e][g] === undefined)) {
          var A = w[y][z - 1];
          if (Es === A || A[e] === undefined || A[e][g] === undefined) {
            A = w[y + 1][z];
            if (Sa === A || A[e] === undefined || A[e][g] === undefined) {
              if ((A = w[y - 1][z]) === undefined || A[e] === hs || A[e][g] === undefined) {
                A = w[y + 1][z - 1];
                if (hs === A || fo === A[e] || A[e][g] === undefined) {
                  if ((A = w[y - 1][z + 1]) === undefined || A[e] === Gm || A[e][g] === fo) {
                    A = w[y + 1][z + 1];
                    if (Es === A || zn === A[e] || A[e][g] === undefined) {
                      if ((A = w[y - 1][z - 1]) === undefined || ur === A[e] || A[e][g] === undefined) {
                        if (w[y][z] === undefined) {
                          q(y, z, e, g, 1);
                          u++;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function r(c, d) {
      for (var e = 0; e < 6; e++) {
        b(c, "t", e, Math.floor(d * 20));
      }
      for (e = 0; e < 4; e++) {
        b(c, "b", e, Math.floor(d * 20));
      }
      for (e = 0; e < 3; e++) {
        b(c, "s", e, Math.floor(d * 20));
      }
      var f = [];
      a(c, f);
      k(c, f);
      f = [];
      b(c, "p", 0, Math.floor(d * 24));
      for (e = 0; e < 3; e++) {
        b(c, "g", e, Math.floor(d * 5));
      }
      if (Fx.mode === 2) {
        for (e = 0; e < 3; e++) {
          b(c, "d", e, Math.floor(d * 3));
        }
        for (e = 0; e < 3; e++) {
          b(c, "a", e, Math.floor(d * 2));
        }
      }
      g(c);
    }
    function m(a) {
      for (var c = 0; c < 3; c++) {
        b(a, "s", c, 15);
      }
      for (c = 0; c < 3; c++) {
        b(a, "a", c, 1);
      }
      for (c = 0; c < 3; c++) {
        b(a, "d", c, 1);
      }
      g(a);
    }
    function c(c, d) {
      for (var e = 0; e < 6; e++) {
        b(c, "t", e, Math.floor(d * 80));
      }
      for (e = 0; e < 4; e++) {
        b(c, "b", e, Math.floor(d * 80));
      }
      for (e = 0; e < 3; e++) {
        b(c, "s", e, Math.floor(d * 50));
      }
      var f = [];
      for (e = 0; e < 6; e++) {
        a(c, f);
      }
      k(c, f);
      f = [];
      b(c, "p", 0, Math.floor(d * 28));
      for (e = 0; e < 3; e++) {
        b(c, "g", e, Math.floor(d * 7));
      }
      for (e = 0; e < 3; e++) {
        b(c, "d", e, Math.floor(d * 2));
      }
      for (e = 0; e < 3; e++) {
        b(c, "a", e, Math.floor(d * 1));
      }
      for (e = 0; e < 3; e++) {
        b(c, "m", e, Math.floor(d * 1));
      }
      b(c, "a", 0, Math.floor(d * 1));
      g(c);
    }
    function s(a, c) {
      (function (c, d) {
        var e = Fx.ⵠⵠᐃⲆ[d];
        for (var f = 0, g = 0; c > f && g < 10000; g++) {
          var i = e.y1 + Fx.ⵠᐃⵠΔⵠ.get() * e.ⲆΔΔ;
          var j = e.x1 + e.w * Fx.ⵠᐃⵠΔⵠ.get();
          var k = Math.floor(i / 100);
          var m = Math.floor(j / 100);
          if (Fx.ⲆⵠⵠⵠΔ(d, m * 100 + 50, k * 100 + 50) >= 600) {
            for (var p = 1, t = k - 4; p === 1 && k + 4 >= t; t++) {
              for (var v = m - 4; p === 1 && m + 4 >= v; v++) {
                if (Cx.Ⲇᐃⵠᐃ[t][v] !== wl) {
                  p = 0;
                }
              }
            }
            if (p !== 0) {
              q(k, m, "la", f % 6, 0);
              f++;
            }
          }
        }
      })(c * 80, a);
      for (var d = 0; d < 3; d++) {
        b(a, "s", d, Math.floor(c * 12));
      }
      for (d = 0; d < 3; d++) {
        b(a, "g", d, Math.floor(c * 6));
      }
      for (d = 0; d < 3; d++) {
        b(a, "re", d, Math.max(1, Math.floor(c * 1)), 0.2);
      }
      for (d = 0; d < 3; d++) {
        b(a, "a", d, Math.max(1, Math.floor(c * 2)));
      }
      g(a);
    }
    function f(a, b, c) {
      if (a[b]) {
        for (Rk = 0; Rk < a[b].length; Rk++) {
          if (a[b][Rk]) {
            for (ⲆⲆⲆΔ = 0; ⲆⲆⲆΔ < a[b][Rk].length; ⲆⲆⲆΔ++) {
              a[b][Rk][ⲆⲆⲆΔ].ᐃⲆⵠ = c;
              a[b][Rk][ⲆⲆⲆΔ].ᐃᐃⵠ = false;
              a[b][Rk][ⲆⲆⲆΔ].time = 0;
              a[b][Rk][ⲆⲆⲆΔ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ⵠⵠⵠⲆΔⵠΔ = d;
    this.ᐃΔⵠΔⲆ = 0;
    this.ⵠⲆⲆⵠΔⵠᐃ = 6;
    this.ⵠⲆΔᐃ = [];
    this.Ⲇᐃⵠ = [];
    this.Ⲇᐃⵠ[0] = [];
    this.Ⲇᐃⵠ[100] = [];
    this.Ⲇᐃⵠ[80] = [];
    this.Ⲇᐃⵠ[60] = [];
    this.Ⲇᐃⵠ[67] = [];
    this.Ⲇᐃⵠ[70] = [];
    this.Ⲇᐃⵠ[77] = [];
    this.Ⲇᐃⵠ[71] = [];
    this.Ⲇᐃⵠ[72] = [];
    this.Ⲇᐃⵠ[73] = [];
    this.Ⲇᐃⵠ[74] = [];
    this.Ⲇᐃⵠ[65] = [];
    this.Ⲇᐃⵠ[66] = [];
    this.Ⲇᐃⵠ[62] = [];
    this.Ⲇᐃⵠ[88] = [];
    this.Ⲇᐃⵠ[91] = [];
    this.Ⲇᐃⵠ[90] = [];
    this.Ⲇᐃⵠ[63] = [];
    this.Ⲇᐃⵠ[78] = [];
    this.Ⲇᐃⵠ[64] = [];
    this.Ⲇᐃⵠ[69] = [];
    this.Ⲇᐃⵠ[68] = [];
    this.Ⲇᐃⵠ[79] = [];
    this.Ⲇᐃⵠ[89] = [];
    this.Ⲇᐃⵠ[83] = [];
    this.Ⲇᐃⵠ[84] = [];
    this.Ⲇᐃⵠ[85] = [];
    this.Ⲇᐃⵠ[81] = [];
    this.Ⲇᐃⵠ[82] = [];
    this.Ⲇᐃⵠ[86] = [];
    this.Ⲇᐃⵠ[34] = [];
    this.Ⲇᐃⵠ[36] = [];
    this.Ⲇᐃⵠ[61] = [];
    this.Ⲇᐃⵠ[2] = [];
    this.Ⲇᐃⵠ[1] = [];
    this.Ⲇᐃⵠ[6] = [];
    this.Ⲇᐃⵠ[3] = [];
    this.Ⲇᐃⵠ[5] = [];
    this.Ⲇᐃⵠ[12] = [];
    this.Ⲇᐃⵠ[13] = [];
    this.Ⲇᐃⵠ[14] = [];
    this.Ⲇᐃⵠ[20] = [];
    this.Ⲇᐃⵠ[52] = [];
    this.Ⲇᐃⵠ[4] = [];
    this.Ⲇᐃⵠ[7] = [];
    this.Ⲇᐃⵠ[8] = [];
    this.Ⲇᐃⵠ[9] = [];
    this.Ⲇᐃⵠ[19] = [];
    this.Ⲇᐃⵠ[50] = [];
    this.Ⲇᐃⵠ[41] = [];
    this.Ⲇᐃⵠ[10] = [];
    this.Ⲇᐃⵠ[15] = [];
    this.Ⲇᐃⵠ[16] = [];
    this.Ⲇᐃⵠ[17] = [];
    this.Ⲇᐃⵠ[21] = [];
    this.Ⲇᐃⵠ[51] = [];
    this.Ⲇᐃⵠ[45] = [];
    this.Ⲇᐃⵠ[46] = [];
    this.Ⲇᐃⵠ[47] = [];
    this.Ⲇᐃⵠ[48] = [];
    this.Ⲇᐃⵠ[49] = [];
    this.Ⲇᐃⵠ[53] = [];
    this.Ⲇᐃⵠ[18] = [];
    this.Ⲇᐃⵠ[29] = [];
    this.Ⲇᐃⵠ[56] = [];
    this.Ⲇᐃⵠ[11] = [];
    this.Ⲇᐃⵠ[22] = [];
    this.Ⲇᐃⵠ[23] = [];
    this.Ⲇᐃⵠ[30] = [];
    this.Ⲇᐃⵠ[38] = [];
    this.Ⲇᐃⵠ[33] = [];
    this.Ⲇᐃⵠ[31] = [];
    this.Ⲇᐃⵠ[55] = [];
    this.Ⲇᐃⵠ[37] = [];
    this.Ⲇᐃⵠ[43] = [];
    this.Ⲇᐃⵠ[44] = [];
    this.Ⲇᐃⵠ[54] = [];
    this.Ⲇᐃⵠ[39] = [];
    this.Ⲇᐃⵠ[40] = [];
    this.Ⲇᐃⵠ[32] = [];
    this.Ⲇᐃⵠ[24] = [];
    this.Ⲇᐃⵠ[25] = [];
    this.Ⲇᐃⵠ[26] = [];
    this.Ⲇᐃⵠ[27] = [];
    this.Ⲇᐃⵠ[28] = [];
    this.Ⲇᐃⵠ[35] = [];
    this.Ⲇᐃⵠ[87] = [];
    this.Ⲇᐃⵠ[42] = [];
    this.ΔⲆᐃᐃ = [];
    this.ᐃⵠⲆΔΔ = 260;
    this.ΔᐃⵠⵠⲆ = 260;
    this.ᐃᐃⲆⲆΔᐃⵠ = 100;
    this.ⲆᐃⵠᐃΔⲆΔ = 100;
    this.w = this.ᐃⵠⲆΔΔ * this.ᐃᐃⲆⲆΔᐃⵠ;
    this.ⲆΔΔ = this.ΔᐃⵠⵠⲆ * this.ⲆᐃⵠᐃΔⲆΔ;
    this.ⵠᐃⵠΔⵠ = new Hk.ᐃΔᐃⲆΔᐃᐃ();
    this.ⵠⵠᐃⲆ = [];
    this.ⵠΔⵠΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 1, 0, 1, 1);
    this.transition = ul;
    this.ⲆⵠΔΔΔ = [];
    this.ⵠΔⲆⵠᐃ = 0;
    this.ᐃⵠⲆⲆⵠⵠⵠ = 1;
    this.ΔᐃᐃⲆᐃⲆⲆ = 2;
    this.ᐃⲆᐃᐃΔⵠⲆ = 3;
    this.ΔᐃⲆⵠⲆ = 4;
    this.ⵠⲆΔΔⵠⲆⵠ = 10;
    this.ⲆⵠΔΔΔ[this.ⵠΔⲆⵠᐃ] = {
      ⵠⵠᐃⲆⵠⵠᐃ: 1,
      ⵠⵠⲆ: [19, 58, 43],
      ᐃΔᐃ: [4, 43, 48],
      ⲆⲆⵠᐃⵠ: ["#133a2b", "#042b30"]
    };
    this.ⲆⵠΔΔΔ[this.ΔᐃⲆⵠⲆ] = {
      ⵠⵠᐃⲆⵠⵠᐃ: 0,
      ⵠⵠⲆ: [11, 106, 132],
      ᐃΔᐃ: [9, 55, 63],
      ⲆⲆⵠᐃⵠ: ["#0B6A84", "#09373F"]
    };
    this.ⲆⵠΔΔΔ[this.ᐃⵠⲆⲆⵠⵠⵠ] = {
      ⵠⵠᐃⲆⵠⵠᐃ: 0,
      ⵠⵠⲆ: [235, 242, 240],
      ᐃΔᐃ: [19, 97, 103],
      ⲆⲆⵠᐃⵠ: ["#EBF2F0", "#136167"]
    };
    this.ⲆⵠΔΔΔ[this.ΔᐃᐃⲆᐃⲆⲆ] = {
      ⵠⵠⲆ: [45, 32, 23],
      ⲆⲆⵠᐃⵠ: ["#2D2017", "#031C1E"],
      ᐃΔᐃ: [3, 28, 30],
      ⵠⵠᐃⲆⵠⵠᐃ: 0
    };
    this.ⲆⵠΔΔΔ[this.ᐃⲆᐃᐃΔⵠⲆ] = {
      ⵠⵠᐃⲆⵠⵠᐃ: 0,
      ⲆⲆⵠᐃⵠ: ["#4A4A4A", "#183D3C"],
      ⵠⵠⲆ: [74, 74, 74],
      ᐃΔᐃ: [24, 61, 60]
    };
    this.ⲆⵠΔΔΔ[this.ⵠⲆΔΔⵠⲆⵠ] = {
      ᐃΔᐃ: [9, 61, 56],
      ⵠⵠᐃⲆⵠⵠᐃ: 0,
      ⵠⵠⲆ: [235, 216, 166],
      ⲆⲆⵠᐃⵠ: ["#EBD8A6", "#093D38"]
    };
    this.ⲆⲆᐃᐃⲆᐃΔ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ⲆΔΔ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ΔⲆᐃ = b;
      this.ⲆᐃΔ = g === undefined ? 15 : g;
    };
    this.ⲆⵠⲆᐃⲆ = -1000000;
    this.ⵠⲆⵠΔⵠ = this.ⲆⵠⲆᐃⲆ;
    this.ᐃⲆⲆⵠⵠ = this.ⲆⵠⲆᐃⲆ;
    this.ΔΔⲆΔᐃ = this.ⲆⵠⲆᐃⲆ;
    this.ⵠΔᐃᐃΔᐃⲆ = this.ⲆⵠⲆᐃⲆ;
    this.ΔⲆⲆⵠⲆᐃⵠ = this.ⲆⵠⲆᐃⲆ;
    this.ⵠⲆᐃⲆᐃ = this.ⲆⵠⲆᐃⲆ;
    this.ⵠᐃⵠᐃⵠΔⲆⵠⵠ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ⵠⲆⵠΔⵠ = Fx.ⲆⵠⲆᐃⲆ;
      b.ᐃⲆⲆⵠⵠ = Fx.ⲆⵠⲆᐃⲆ;
      b.ΔΔⲆΔᐃ = Fx.ⲆⵠⲆᐃⲆ;
      b.ⵠΔᐃᐃΔᐃⲆ = Fx.ⲆⵠⲆᐃⲆ;
      b.ⵠⲆᐃⲆᐃ = Fx.ⲆⵠⲆᐃⲆ;
      b.ΔⲆⲆᐃΔⵠΔ = Fx.ⲆⵠⲆᐃⲆ;
      for (var g = 0; Fx.ⵠⵠᐃⲆ[g].ΔⲆᐃ !== Fx.ΔᐃⲆⵠⲆ; g++) {
        if (Fx.ⵠⵠᐃⲆ[g].ΔⲆᐃ === Fx.ⵠΔⲆⵠᐃ) {
          var h = Fx.ⲆⵠⵠⵠΔ(g, c, d);
          b.ⵠΔᐃᐃΔᐃⲆ = Math.max(b.ⵠΔᐃᐃΔᐃⲆ, h);
          if (h > 0 && Fx.ⵠΔⵠⲆᐃⲆᐃΔⲆ(g, c, d) === 1) {
            b.ΔⲆⲆᐃΔⵠΔ = 1;
          }
        } else if (Fx.ⵠⵠᐃⲆ[g].ΔⲆᐃ === Fx.ᐃⵠⲆⲆⵠⵠⵠ) {
          b.ⵠⲆⵠΔⵠ = Math.max(b.ⵠⲆⵠΔⵠ, Fx.ⲆⵠⵠⵠΔ(g, c, d));
        } else if (Fx.ⵠⲆΔΔⵠⲆⵠ === Fx.ⵠⵠᐃⲆ[g].ΔⲆᐃ) {
          b.ᐃⲆⲆⵠⵠ = Math.max(b.ᐃⲆⲆⵠⵠ, Fx.ⲆⵠⵠⵠΔ(g, c, d));
        } else if (Fx.ΔᐃᐃⲆᐃⲆⲆ === Fx.ⵠⵠᐃⲆ[g].ΔⲆᐃ) {
          b.ΔΔⲆΔᐃ = Math.max(b.ΔΔⲆΔᐃ, Fx.ⲆⵠⵠⵠΔ(g, c, d));
        } else if (Fx.ⵠⵠᐃⲆ[g].ΔⲆᐃ === Fx.ᐃⲆᐃᐃΔⵠⲆ) {
          b.ⵠⲆᐃⲆᐃ = Math.max(b.ⵠⲆᐃⲆᐃ, Fx.ⲆⵠⵠⵠΔ(g, c, d));
        }
      }
      if (Cx.Ⲇᐃⵠᐃ[e][f].iblk) {
        b.ΔⲆⲆᐃΔⵠΔ = 1;
      }
      if (Fx.ΔΔΔΔⵠⲆⲆᐃⵠ(f, e)) {
        b.ΔⲆⲆⵠⲆᐃⵠ = b.ⲆⵠⲆᐃⲆ;
      } else if (Cx.Ⲇᐃⵠᐃ[e][f].wtb || b.ⵠⲆⵠΔⵠ < 0 && b.ΔΔⲆΔᐃ < 0 && b.ⵠΔᐃᐃΔᐃⲆ < 0 && b.ΔⲆⲆᐃΔⵠΔ < 0 && b.ⵠⲆᐃⲆᐃ < 0 && b.ᐃⲆⲆⵠⵠ < 0) {
        b.ΔⲆⲆⵠⲆᐃⵠ = 1;
      } else {
        b.ΔⲆⲆⵠⲆᐃⵠ = b.ⲆⵠⲆᐃⲆ;
      }
    };
    this.ΔΔΔⵠᐃᐃⵠᐃⵠ = function (a, b) {
      Fx.ⵠⲆⵠΔⵠ = Fx.ⲆⵠⲆᐃⲆ;
      Fx.ᐃⲆⲆⵠⵠ = Fx.ⲆⵠⲆᐃⲆ;
      Fx.ΔΔⲆΔᐃ = Fx.ⲆⵠⲆᐃⲆ;
      Fx.ⵠⲆᐃⲆᐃ = Fx.ⲆⵠⲆᐃⲆ;
      Fx.ⵠΔᐃᐃΔᐃⲆ = Fx.ⲆⵠⲆᐃⲆ;
      for (var c = 0; Fx.ΔᐃⲆⵠⲆ !== Fx.ⵠⵠᐃⲆ[c].ΔⲆᐃ; c++) {
        if (Fx.ⵠΔⲆⵠᐃ === Fx.ⵠⵠᐃⲆ[c].ΔⲆᐃ) {
          Fx.ⵠΔᐃᐃΔᐃⲆ = Math.max(Fx.ⵠΔᐃᐃΔᐃⲆ, Fx.ⲆⵠⵠⵠΔ(c, a, b));
        } else if (Fx.ᐃⵠⲆⲆⵠⵠⵠ === Fx.ⵠⵠᐃⲆ[c].ΔⲆᐃ) {
          Fx.ⵠⲆⵠΔⵠ = Math.max(Fx.ⵠⲆⵠΔⵠ, Fx.ⲆⵠⵠⵠΔ(c, a, b));
        } else if (Fx.ⵠⲆΔΔⵠⲆⵠ === Fx.ⵠⵠᐃⲆ[c].ΔⲆᐃ) {
          Fx.ᐃⲆⲆⵠⵠ = Math.max(Fx.ᐃⲆⲆⵠⵠ, Fx.ⲆⵠⵠⵠΔ(c, a, b));
        } else if (Fx.ΔᐃᐃⲆᐃⲆⲆ === Fx.ⵠⵠᐃⲆ[c].ΔⲆᐃ) {
          Fx.ΔΔⲆΔᐃ = Math.max(Fx.ΔΔⲆΔᐃ, Fx.ⲆⵠⵠⵠΔ(c, a, b));
        } else if (Fx.ⵠⵠᐃⲆ[c].ΔⲆᐃ === Fx.ᐃⲆᐃᐃΔⵠⲆ) {
          Fx.ⵠⲆᐃⲆᐃ = Math.max(Fx.ⵠⲆᐃⲆᐃ, Fx.ⲆⵠⵠⵠΔ(c, a, b));
        }
      }
      if (Fx.ⵠⲆⵠΔⵠ < 0 && Fx.ⵠⲆᐃⲆᐃ < 0 && Fx.ⵠΔᐃᐃΔᐃⲆ < 0 && Fx.ⵠⲆᐃⲆᐃ < 0 && Fx.ᐃⲆⲆⵠⵠ < 0) {
        Fx.ΔⲆⲆⵠⲆᐃⵠ = 1;
      } else {
        Fx.ΔⲆⲆⵠⲆᐃⵠ = Fx.ⲆⵠⲆᐃⲆ;
      }
    };
    this.ⵠΔⵠⲆᐃⲆᐃΔⲆ = function (b, c, d) {
      var e = Fx.ⵠⵠᐃⲆ[b];
      var f = 0;
      ᐃⵠᐃⵠ = e.x1 + 30 + ((e.ⲆᐃΔ & 4) === 0 ? 150 : 0);
      var g = c - ᐃⵠᐃⵠ;
      if ((e.ⲆᐃΔ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃⵠᐃΔ = e.y1 + 250 + (e.ⲆᐃΔ & 1 ? 0 : 150);
      g = d - ᐃⵠᐃΔ;
      if ((e.ⲆᐃΔ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ΔⲆⵠⲆ = e.x2 + 80 + (e.ⲆᐃΔ & 8 ? 0 : -200);
      g = ΔⲆⵠⲆ - c;
      if ((e.ⲆᐃΔ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⵠΔⲆⵠ = e.y2 - 200 + ((e.ⲆᐃΔ & 2) === 0 ? -200 : 0);
      g = ⵠΔⲆⵠ - d;
      if ((e.ⲆᐃΔ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (c >= ᐃⵠᐃⵠ && c <= ΔⲆⵠⲆ && d >= ᐃⵠᐃΔ && ⵠΔⲆⵠ >= d) {
        return f;
      } else {
        return 0;
      }
    };
    this.ⲆⵠⵠⵠΔ = function (a, b, c) {
      var d = Fx.ⵠⵠᐃⲆ[a];
      ᐃⵠᐃⵠ = d.x1 + 30;
      ᐃⵠᐃΔ = d.y1 + 250;
      ΔⲆⵠⲆ = d.x2 + 80;
      ⵠΔⲆⵠ = d.y2 - 200;
      if (ᐃⵠᐃⵠ <= b && ΔⲆⵠⲆ >= b && c >= ᐃⵠᐃΔ && ⵠΔⲆⵠ >= c) {
        return Math.min(b - ᐃⵠᐃⵠ, ΔⲆⵠⲆ - b, c - ᐃⵠᐃΔ, ⵠΔⲆⵠ - c);
      }
      var e = -1000000;
      if (b - ᐃⵠᐃⵠ < 0) {
        e = Math.max(e, b - ᐃⵠᐃⵠ);
      } else if (ΔⲆⵠⲆ - b < 0) {
        e = Math.max(e, ΔⲆⵠⲆ - b);
      }
      ΔⲆⵠⲆⵠⲆⲆ = -1000000;
      if (ᐃⵠᐃΔ > c || c > ⵠΔⲆⵠ) {
        if (c - ᐃⵠᐃΔ < 0) {
          ΔⲆⵠⲆⵠⲆⲆ = Math.max(ΔⲆⵠⲆⵠⲆⲆ, c - ᐃⵠᐃΔ);
        } else {
          ΔⲆⵠⲆⵠⲆⲆ = Math.max(ΔⲆⵠⲆⵠⲆⲆ, ⵠΔⲆⵠ - c);
        }
        e = e !== -1000000 && ΔⲆⵠⲆⵠⲆⲆ !== -1000000 ? Math.min(e, ΔⲆⵠⲆⵠⲆⲆ) : ΔⲆⵠⲆⵠⲆⲆ;
      }
      return e;
    };
    this.ΔⵠⵠⲆⵠⵠⵠ = function (b, c, d) {
      var e = d;
      var f = c;
      q(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          q(e - h, f - g, "iblk", 0);
          q(e + h, f - g, "iblk", 0);
          q(e + h, f + g, "iblk", 0);
          q(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          q(e - g, f - 4, "iblk", 0);
          q(e + g, f - 4, "iblk", 0);
          q(e - g, f + 4, "iblk", 0);
          q(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          q(e - 3, f + g, "iblk", 0);
          q(e + 3, f + g, "iblk", 0);
          q(e - 3, f - g, "iblk", 0);
          q(e + 3, f - g, "iblk", 0);
        }
        q(e - 2, f - 4, "iblk", 0);
        q(e - 3, f - 3, "iblk", 0);
        q(e + 2, f + 4, "iblk", 0);
        q(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          q(e - g, f - 4, "iblk", 0);
          q(e + g, f - 4, "iblk", 0);
          q(e - g, f + 4, "iblk", 0);
          q(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          q(e - 3, f + g, "iblk", 0);
          q(e + 3, f + g, "iblk", 0);
          q(e - 3, f - g, "iblk", 0);
          q(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          q(e - g, f - 4, "iblk", 0);
          q(e + g, f - 4, "iblk", 0);
          q(e - g, f + 4, "iblk", 0);
          q(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          q(e - 3, f + g, "iblk", 0);
          q(e + 3, f + g, "iblk", 0);
          q(e - 3, f - g, "iblk", 0);
          q(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ᐃⵠᐃⵠⲆⲆⵠᐃⲆ = function (b) {
      for (var c = 0; Fx.ⵠⵠᐃⲆ.length > c && b > 0; c++) {
        var d = Fx.ⵠⵠᐃⲆ[c];
        if (Fx.ΔᐃⲆⵠⲆ === d.ΔⲆᐃ && d.w > 1800 && d.ⲆΔΔ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ⲆΔΔ / 2) / 100);
          Fx.ΔⵠⵠⲆⵠⵠⵠ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 4);
            var k = f - 3 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 6);
            if (Cx.Ⲇᐃⵠᐃ[j][k].s === Gm) {
              q(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 4);
            k = f - 3 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 6);
            if (Cx.Ⲇᐃⵠᐃ[j][k].plm === undefined) {
              q(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 4);
          k = f - 3 + Math.floor(Fx.ⵠᐃⵠΔⵠ.get() * 6);
          if (Cx.Ⲇᐃⵠᐃ[j][k].plm === undefined && $g === Cx.Ⲇᐃⵠᐃ[j][k].s) {
            q(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⵠⵠⲆᐃΔᐃⲆⲆⲆ = function (b) {
      Fx.ⵠᐃⵠΔⵠ.ΔⲆᐃᐃⵠ(b);
      var d = 0;
      while (1) {
        if (++d > 10000) {
          return;
        }
        Fx.ⵠⵠᐃⲆ = [];
        if (Fx.ᐃΔⵠΔⲆ === 0 && (Fx.mode === 3 || Fx.mode === 7 || Fx.mode === 0)) {
          Fx.ᐃΔⵠΔⲆ = us;
        }
        if (Fx.mode === 2) {
          Fx.ⵠⵠᐃⲆ.push(new Fx.ⲆⲆᐃᐃⲆᐃΔ(Fx.ⵠΔⲆⵠᐃ, 2, 2, 80, 80, 15));
        } else if (Fx.mode === 4) {
          Fx.ⵠⵠᐃⲆ.push(new Fx.ⲆⲆᐃᐃⲆᐃΔ(Fx.ⵠΔⲆⵠᐃ, 2, 2, 150, 150, 15));
        } else if (Fx.ᐃΔⵠΔⲆ !== 0 && Fx.ᐃΔⵠΔⲆ.length > 0 && Fx.ᐃΔⵠΔⲆ[0].length > 3) {
          for (var f = 0; Fx.ᐃΔⵠΔⲆ.length > f; f++) {
            if ((F = Fx.ᐃΔⵠΔⲆ[f])[0] !== 0) {
              break;
            }
            var g = $f.ⵠΔⲆⵠᐃ;
            switch (F[1]) {
              case "FOREST":
                g = Fx.ⵠΔⲆⵠᐃ;
                break;
              case "WINTER":
                g = Fx.ᐃⵠⲆⲆⵠⵠⵠ;
                break;
              case "DESERT":
                g = Fx.ⵠⲆΔΔⵠⲆⵠ;
                break;
              case "LAVA":
                g = Fx.ΔᐃᐃⲆᐃⲆⲆ;
                break;
              case "DRAGON":
                g = Fx.ᐃⲆᐃᐃΔⵠⲆ;
            }
            Fx.ⵠⵠᐃⲆ.push(new Fx.ⲆⲆᐃᐃⲆᐃΔ(g, F[2], F[3], F[4], F[5], F[6], F[7]));
          }
        } else if (Fx.ᐃΔⵠΔⲆ !== 0) {
          for (f = 0; f < Fx.ᐃΔⵠΔⲆ.length; f++) {
            var j = Fx.ᐃΔⵠΔⲆ[f];
            g = $f.ⵠΔⲆⵠᐃ;
            switch (j[0]) {
              case "FOREST":
                g = Fx.ⵠΔⲆⵠᐃ;
                break;
              case "WINTER":
                g = Fx.ᐃⵠⲆⲆⵠⵠⵠ;
                break;
              case "DESERT":
                g = Fx.ⵠⲆΔΔⵠⲆⵠ;
                break;
              case "LAVA":
                g = Fx.ΔᐃᐃⲆᐃⲆⲆ;
                break;
              case "DRAGON":
                g = Fx.ᐃⲆᐃᐃΔⵠⲆ;
            }
            if (e(g, j[1], j[2], 0, (f + 1) * 10) === 0) {
              break;
            }
          }
          if (f !== Fx.ᐃΔⵠΔⲆ.length) {
            continue;
          }
        }
        break;
      }
      ᐃΔⲆᐃᐃᐃⲆⵠΔ();
      var n = [];
      for (var t = 0; t < Fx.ΔᐃⵠⵠⲆ; t++) {
        n[t] = new Array(Fx.ᐃⵠⲆΔΔ);
        for (var x = 0; Fx.ᐃⵠⲆΔΔ > x; x++) {
          n[t][x] = 0;
        }
      }
      for (t = 0; Fx.ⵠⵠᐃⲆ.length > t; t++) {
        for (var A = (j = Fx.ⵠⵠᐃⲆ[t]).x2 / 100, B = j.y2 / 100, D = j.x1 / 100; D <= A; D++) {
          for (var E = j.y1 / 100; B >= E; E++) {
            n[E][D] = 1;
          }
        }
      }
      for (E = 0; Fx.ΔᐃⵠⵠⲆ > E; E++) {
        for (D = 0; Fx.ᐃⵠⲆΔΔ > D; D++) {
          if (n[E][D] === 0) {
            i(n, D, E);
          }
        }
      }
      Cx = {
        w: Fx.ᐃⵠⲆΔΔ,
        ⲆΔΔ: Fx.ΔᐃⵠⵠⲆ,
        Ⲇᐃⵠᐃ: []
      };
      for (t = 0; Fx.ΔᐃⵠⵠⲆ > t; t++) {
        Cx.Ⲇᐃⵠᐃ[t] = [];
      }
      if (Fx.ᐃΔⵠΔⲆ !== 0 && Fx.ᐃΔⵠΔⲆ.length > 0 && Fx.ᐃΔⵠΔⲆ[0].length > 3) {
        for (f = 0; f < Fx.ᐃΔⵠΔⲆ.length; f++) {
          var F = Fx.ᐃΔⵠΔⲆ[f];
          if (F[1] === "isl") {
            Fx.ΔⵠⵠⲆⵠⵠⵠ(F[2], F[3], F[4]);
          }
        }
      } else {
        Fx.ᐃⵠᐃⵠⲆⲆⵠᐃⲆ(Fx.ⵠⲆⲆⵠΔⵠᐃ);
      }
      if (Fx.ᐃΔⵠΔⲆ !== 0 && Fx.ᐃΔⵠΔⲆ.length > 0 && Fx.ᐃΔⵠΔⲆ[0].length > 3) {
        var G = [];
        for (f = 0; Fx.ᐃΔⵠΔⲆ.length > f; f++) {
          if ((F = Fx.ᐃΔⵠΔⲆ[f])[0] === 1) {
            if (F[1] === "r") {
              q(F[3], F[2], "wtb", 0, 1);
              G.push([F[3], F[2], F[4]]);
            } else {
              q(F[4], F[3], F[1], F[2], F[5]);
            }
          }
        }
        k(0, G);
        G = [];
      } else {
        for (t = 0; Fx.ⵠⵠᐃⲆ.length > t; t++) {
          j = Fx.ⵠⵠᐃⲆ[t];
          if (Fx.mode === 4) {
            if (Fx.ⵠΔⲆⵠᐃ === j.ΔⲆᐃ) {
              c(t, j.w / 10000);
            }
          } else {
            if (j.ΔⲆᐃ === Fx.ⵠΔⲆⵠᐃ) {
              r(t, j.w / 10000);
            }
            if (j.ΔⲆᐃ === Fx.ΔᐃᐃⲆᐃⲆⲆ) {
              s(t, j.w / 10000);
            }
            if (Fx.ᐃⵠⲆⲆⵠⵠⵠ === j.ΔⲆᐃ) {
              l(t, j.w / 10000);
            }
            if (j.ΔⲆᐃ === Fx.ⵠⲆΔΔⵠⲆⵠ) {
              o(t, j.w / 10000);
            }
            if (Fx.ᐃⲆᐃᐃΔⵠⲆ === j.ΔⲆᐃ) {
              m(t);
            }
          }
        }
      }
      Ht("isl", 1);
      Ht("wtb", 20);
      Ht("la", 1);
      Ht("c", 1);
      Ht("s", 1);
      Ht("f", 1);
      Ht("p", 1);
      Ht("g", 1);
      Ht("d", 1);
      Ht("a", 1);
      Ht("re", 1);
      Ht("m", 1);
      pd = [];
      Fx.ᐃᐃⵠΔⲆⲆⵠᐃΔ(Cx);
    };
    this.ᐃⵠΔᐃ = q;
    this.ᐃᐃⵠΔⲆⲆⵠᐃΔ = function (b) {
      for (var c = 0; this.ΔᐃⵠⵠⲆ > c; c++) {
        for (var d = 0; this.ᐃⵠⲆΔΔ > d; d++) {
          b.Ⲇᐃⵠᐃ[c] ||= [];
          if (b.Ⲇᐃⵠᐃ[c][d]) {
            var e = b.Ⲇᐃⵠᐃ[c][d];
            if (e.de && e.de.length > 0) {
              for (var g = 0; g < e.de.length; g++) {
                if (e.de[g] && e.de[g].length > 0) {
                  e.de = e.de[g][0];
                  if (g >= 41 && g <= 49) {
                    e.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⵠΔ = [];
                    for (var j = 0; h > j; j++) {
                      e.de.ΔⵠΔ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ᐃⵠⵠΔⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (g >= 19 && g <= 26) {
                    e.de.scale = 3;
                    h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⵠΔ = [];
                    for (j = 0; h > j; j++) {
                      e.de.ΔⵠΔ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ᐃⵠⵠΔⲆ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ᐃⵠⵠΔⲆ = g;
                  } else {
                    e.de.angle = Math.PI * Math.random() * 2;
                    e.de.scale = 1;
                    e.de.ᐃⵠⵠΔⲆ = g;
                  }
                }
              }
            }
            f(e, "p", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ld, 1, 1, 0, 10, 10));
            f(e, "t", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "s", new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 1, 1, 0, 10, 10));
            f(e, "g", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "d", new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 1, 1, 0, 10, 10));
            f(e, "b", new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 1, 1, 0, 10, 10));
            f(e, "f", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "sw", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "gw", new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 1, 1, 0, 10, 10));
            f(e, "dw", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "a", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "cs", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "plm", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "re", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "c", new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "m", new ⵠᐃΔᐃ.ΔΔⲆⵠ(ib, 1, 1, 0, 10, 10));
          } else {
            b.Ⲇᐃⵠᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = xs.ΔΔΔ;
    this.ΔᐃᐃⲆⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      now: 0,
      ᐃΔΔΔⲆ: 0,
      ΔⲆᐃᐃⵠ: 0
    };
    this.ⲆΔⵠΔΔΔⲆⲆⲆ = function () {
      this.ΔⲆᐃᐃ = [];
      this.Ⲇᐃⵠ[0] = [];
      this.Ⲇᐃⵠ[2] = [];
      this.Ⲇᐃⵠ[1] = [];
      this.Ⲇᐃⵠ[6] = [];
      this.Ⲇᐃⵠ[3] = [];
      this.Ⲇᐃⵠ[5] = [];
      this.Ⲇᐃⵠ[12] = [];
      this.Ⲇᐃⵠ[13] = [];
      this.Ⲇᐃⵠ[14] = [];
      this.Ⲇᐃⵠ[20] = [];
      this.Ⲇᐃⵠ[52] = [];
      this.Ⲇᐃⵠ[30] = [];
      this.Ⲇᐃⵠ[56] = [];
      this.Ⲇᐃⵠ[38] = [];
      this.Ⲇᐃⵠ[33] = [];
      this.Ⲇᐃⵠ[31] = [];
      this.Ⲇᐃⵠ[55] = [];
      this.Ⲇᐃⵠ[37] = [];
      this.Ⲇᐃⵠ[43] = [];
      this.Ⲇᐃⵠ[44] = [];
      this.Ⲇᐃⵠ[54] = [];
      this.Ⲇᐃⵠ[39] = [];
      this.Ⲇᐃⵠ[40] = [];
      this.Ⲇᐃⵠ[32] = [];
      this.Ⲇᐃⵠ[24] = [];
      this.Ⲇᐃⵠ[25] = [];
      this.Ⲇᐃⵠ[26] = [];
      this.Ⲇᐃⵠ[27] = [];
      this.Ⲇᐃⵠ[28] = [];
      this.Ⲇᐃⵠ[35] = [];
      this.Ⲇᐃⵠ[4] = [];
      this.Ⲇᐃⵠ[7] = [];
      this.Ⲇᐃⵠ[8] = [];
      this.Ⲇᐃⵠ[9] = [];
      this.Ⲇᐃⵠ[19] = [];
      this.Ⲇᐃⵠ[50] = [];
      this.Ⲇᐃⵠ[41] = [];
      this.Ⲇᐃⵠ[10] = [];
      this.Ⲇᐃⵠ[15] = [];
      this.Ⲇᐃⵠ[16] = [];
      this.Ⲇᐃⵠ[17] = [];
      this.Ⲇᐃⵠ[21] = [];
      this.Ⲇᐃⵠ[51] = [];
      this.Ⲇᐃⵠ[45] = [];
      this.Ⲇᐃⵠ[46] = [];
      this.Ⲇᐃⵠ[47] = [];
      this.Ⲇᐃⵠ[48] = [];
      this.Ⲇᐃⵠ[49] = [];
      this.Ⲇᐃⵠ[53] = [];
      this.Ⲇᐃⵠ[18] = [];
      this.Ⲇᐃⵠ[29] = [];
      this.Ⲇᐃⵠ[56] = [];
      this.Ⲇᐃⵠ[11] = [];
      this.Ⲇᐃⵠ[22] = [];
      this.Ⲇᐃⵠ[23] = [];
      this.Ⲇᐃⵠ[100] = [];
      this.Ⲇᐃⵠ[80] = [];
      this.Ⲇᐃⵠ[60] = [];
      this.Ⲇᐃⵠ[67] = [];
      this.Ⲇᐃⵠ[70] = [];
      this.Ⲇᐃⵠ[77] = [];
      this.Ⲇᐃⵠ[71] = [];
      this.Ⲇᐃⵠ[72] = [];
      this.Ⲇᐃⵠ[73] = [];
      this.Ⲇᐃⵠ[74] = [];
      this.Ⲇᐃⵠ[65] = [];
      this.Ⲇᐃⵠ[66] = [];
      this.Ⲇᐃⵠ[62] = [];
      this.Ⲇᐃⵠ[88] = [];
      this.Ⲇᐃⵠ[91] = [];
      this.Ⲇᐃⵠ[90] = [];
      this.Ⲇᐃⵠ[63] = [];
      this.Ⲇᐃⵠ[78] = [];
      this.Ⲇᐃⵠ[75] = [];
      this.Ⲇᐃⵠ[76] = [];
      this.Ⲇᐃⵠ[64] = [];
      this.Ⲇᐃⵠ[69] = [];
      this.Ⲇᐃⵠ[68] = [];
      this.Ⲇᐃⵠ[79] = [];
      this.Ⲇᐃⵠ[89] = [];
      this.Ⲇᐃⵠ[83] = [];
      this.Ⲇᐃⵠ[84] = [];
      this.Ⲇᐃⵠ[85] = [];
      this.Ⲇᐃⵠ[81] = [];
      this.Ⲇᐃⵠ[82] = [];
      this.Ⲇᐃⵠ[86] = [];
      this.Ⲇᐃⵠ[34] = [];
      this.Ⲇᐃⵠ[36] = [];
      this.Ⲇᐃⵠ[61] = [];
      this.Ⲇᐃⵠ[87] = [];
      this.Ⲇᐃⵠ[42] = [];
    };
    this.ΔᐃⵠⵠⵠΔⵠΔΔ = function (a) {
      if (this.ΔⲆᐃᐃ[a]) {
        ᐃⵠⵠⵠ = this.ΔⲆᐃᐃ[a].type;
        this.ΔⲆᐃᐃ[a] = null;
        for (var b = this.Ⲇᐃⵠ[ᐃⵠⵠⵠ], c = 0; b.length > c; c++) {
          if (b[c].ΔᐃⲆⵠ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠⵠΔΔΔⵠⵠⲆΔ = function (a, b) {
      for (var c = 0; this.Ⲇᐃⵠ[56].length > c; c++) {
        var d = this.Ⲇᐃⵠ[56][c];
        if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ΔΔΔΔⵠⲆⲆᐃⵠ = function (a, b) {
      for (var c = 0; this.Ⲇᐃⵠ[30].length > c; c++) {
        var d = this.Ⲇᐃⵠ[30][c];
        if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
          return true;
        }
      }
      return false;
    };
    this.ⵠΔⵠⵠⲆ = function (j) {
      for (var e = 0; j.length > e; e++) {
        ⵠⵠᐃⵠ = j[e];
        if (ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ != ⵠⵠᐃⵠ.angle) {
          var p = Math.PI * 2;
          ⵠⵠᐃⵠ.angle = (ⵠⵠᐃⵠ.angle + p) % p;
          ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ = (ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ + p) % p;
          if (ⵠⵠᐃⵠ.angle != ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ) {
            var q = ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ - ⵠⵠᐃⵠ.angle;
            var B = Math.abs(q);
            if (B > Math.PI) {
              B = Math.PI * 2 - B;
            }
            var C = B / Math.PI * 3 * 10 * Ox;
            if (Math.PI < q) {
              ⵠⵠᐃⵠ.angle -= C;
            } else if (q < -Math.PI) {
              ⵠⵠᐃⵠ.angle += C;
            } else if (q < 0) {
              ⵠⵠᐃⵠ.angle -= C;
            } else {
              ⵠⵠᐃⵠ.angle += C;
            }
            ⵠⵠᐃⵠ.angle = (ⵠⵠᐃⵠ.angle + p) % p;
            if (C > Math.abs(ⵠⵠᐃⵠ.angle - ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ)) {
              ⵠⵠᐃⵠ.angle = ⵠⵠᐃⵠ.ⵠⵠᐃⵠⲆᐃΔ;
            }
          }
        }
        Math.floor(ⵠⵠᐃⵠ.r.y / 100);
        Math.floor(ⵠⵠᐃⵠ.r.x / 100);
        if (ⵠⵠᐃⵠ.r.x != ⵠⵠᐃⵠ.x || ⵠⵠᐃⵠ.y != ⵠⵠᐃⵠ.r.y) {
          if (ⵠⵠᐃⵠ.action & 64) {
            ⵠⵠᐃⵠ.action -= 64;
          }
          ⵠⵠᐃⵠ.action |= 32;
          var D = ⵠᐃΔᐃ.ᐃᐃᐃⲆⲆⲆⲆ(ⵠⵠᐃⵠ, ⵠⵠᐃⵠ.r) + Math.PI;
          var E = Ox * ⵠⵠᐃⵠ.ΔⲆⵠⵠΔ;
          var F = ⵠᐃΔᐃ.ⵠⲆᐃⲆᐃΔⲆ(E, D);
          if (ⵠᐃΔᐃ.ⵠⲆⵠⵠΔΔᐃ(F) < ⵠᐃΔᐃ.ⵠⲆⵠⵠΔΔᐃ(ⵠᐃΔᐃ.ᐃᐃⵠΔᐃⲆᐃ(ⵠⵠᐃⵠ, ⵠⵠᐃⵠ.r))) {
            ⵠᐃΔᐃ.ⵠΔⵠⲆᐃΔΔ(ⵠⵠᐃⵠ, F);
          } else {
            if (ⵠⵠᐃⵠ.action & 32) {
              ⵠⵠᐃⵠ.action -= 32;
            }
            ⵠⵠᐃⵠ.action |= 64;
            ⵠᐃΔᐃ.ⲆᐃᐃᐃⲆⲆΔ(ⵠⵠᐃⵠ.r, ⵠⵠᐃⵠ);
          }
        }
        if (ⵠⵠᐃⵠ.ΔⲆⵠⲆᐃ) {
          var G = ⵠⵠᐃⵠ.bubbles;
          if ((L = G.length) === 0 || xs.ᐃᐃΔⵠᐃΔᐃ > L && G[L - 1].ᐃⵠᐃⲆⲆ < 0.95) {
            G.push({
              id: Math.floor(Math.random() * Ⲇⵠ[540][0].length),
              x: Math.floor(ⵠⵠᐃⵠ.x + Math.random() * 80 - 40),
              y: Math.floor(ⵠⵠᐃⵠ.y + Math.random() * 80 - 40),
              ᐃⵠᐃⲆⲆ: 1
            });
          }
          for (var H = 0; L > H; H++) {
            G[H].ᐃⵠᐃⲆⲆ = Math.max(0, G[H].ᐃⵠᐃⲆⲆ - Ox);
          }
          for (H = 0; H < L; H++) {
            if (G[H].ᐃⵠᐃⲆⲆ === 0) {
              G.splice(H, 1);
              break;
            }
          }
        }
        var I = 0;
        if (ⵠⵠᐃⵠ.ΔᐃⵠⲆ && Ex.ΔⲆᐃᐃΔ) {
          var K = ⵠⵠᐃⵠ.ⵠᐃᐃᐃⲆ;
          var L = K.length;
          if (ⵠⵠᐃⵠ.ΔⲆⲆⵠⲆᐃⵠ > 0 && ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ !== 227 && ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ !== 228 && ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ !== 230 && ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ !== 229 && ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ !== 91 && !ⵠⵠᐃⵠ.ΔⲆⵠⲆᐃ && (I = 1, L === 0 || xs.ⲆⲆΔⲆⵠᐃⲆ < ⵠᐃΔᐃ.ᐃⲆΔⵠ(K[L - 1], ⵠⵠᐃⵠ))) {
            var N = -ⵠⵠᐃⵠ.angle;
            var O = eq * (Math.cos(N) * 45);
            var Q = eq * (Math.sin(N) * 45);
            K.push({
              x: ⵠⵠᐃⵠ.x + O,
              y: ⵠⵠᐃⵠ.y + Q,
              r: 8,
              alpha: 0.8
            });
            K.push({
              x: ⵠⵠᐃⵠ.x - O,
              y: ⵠⵠᐃⵠ.y - Q,
              r: 8,
              alpha: 0.8
            });
            K.push({
              x: ⵠⵠᐃⵠ.x,
              y: ⵠⵠᐃⵠ.y,
              r: 24,
              alpha: 1
            });
          }
          for (H = 0; H < L; H++) {
            K[H].alpha = Math.max(0, K[H].alpha - Ox / 2.2);
            K[H].r += Ox * 20;
          }
          if (K.length > 0 && K[0].alpha === 0) {
            K.splice(0, 1);
          }
          var R = ⵠⵠᐃⵠ.ⲆⲆⲆⵠᐃ;
          L = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ΔⲆⲆᐃΔⵠΔ));
          var V = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ⵠⲆⵠΔⵠ));
          Math.max(0, Math.sign(ⵠⵠᐃⵠ.ᐃⲆⲆⵠⵠ));
          var W = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ΔΔⲆΔᐃ));
          var X = Math.max(0, Math.sign(ⵠⵠᐃⵠ.ⵠⲆᐃⲆᐃ));
          if (ⵠⵠᐃⵠ.ΔⲆⲆᐃΔⵠΔ > 0 || ⵠⵠᐃⵠ.ᐃⲆⲆⵠⵠ > 0) {
            S = 602;
          } else if (ⵠⵠᐃⵠ.ⵠⲆᐃⲆᐃ > 0) {
            S = 680;
          } else if (ⵠⵠᐃⵠ.ⵠⲆⵠΔⵠ > 0) {
            S = 475;
          } else if (ⵠⵠᐃⵠ.ΔΔⲆΔᐃ > 0) {
            S = 476;
          }
          if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 225 && (U | V | W | X) === 1) {
            S = 228;
            var Y = ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = xs.ⵠΔⲆᐃᐃⵠΔ;
          } else if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = xs.ⵠΔⲆᐃᐃⵠΔ;
          } else if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 226 && (U | V | W | X) === 1) {
            S = 234;
            Y = ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = xs.ⵠΔⲆᐃᐃⵠΔ * 0.9;
          } else {
            Y = ⵠⵠᐃⵠ.angle;
            Z = 15;
            _ = 11;
            aa = xs.ⵠΔⲆᐃᐃⵠΔ;
          }
          if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 227 || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 228 || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 91 || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 229 || ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 230 || ⵠⵠᐃⵠ.ΔⲆⵠⲆᐃ); else if (ⵠⵠᐃⵠ.ⵠⵠΔⵠΔ === 224) {
            if (L === 0 || ⵠᐃΔᐃ.ᐃⲆΔⵠ(R[L - 1], ⵠⵠᐃⵠ) > xs.ⵠⵠⲆΔΔⲆΔ) {
              R.push({
                x: ⵠⵠᐃⵠ.x,
                y: ⵠⵠᐃⵠ.y,
                angle: ⵠⵠᐃⵠ.ⲆΔΔᐃⲆ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && I === 0 && (L === 0 || aa < ⵠᐃΔᐃ.ᐃⲆΔⵠ(R[L - 1], ⵠⵠᐃⵠ))) {
            ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ++;
            if (Math.abs(ⵠⵠᐃⵠ.x - ⵠⵠᐃⵠ.r.x) > 1 && Math.abs(ⵠⵠᐃⵠ.y - ⵠⵠᐃⵠ.r.y) > 1) {
              if (ⵠⵠᐃⵠ.r.x > ⵠⵠᐃⵠ.x && ⵠⵠᐃⵠ.r.y < ⵠⵠᐃⵠ.y || ⵠⵠᐃⵠ.r.x < ⵠⵠᐃⵠ.x && ⵠⵠᐃⵠ.y < ⵠⵠᐃⵠ.r.y) {
                if (ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ % 2) {
                  O = eq * -_;
                  Q = eq * -_;
                } else {
                  Q = eq * _;
                  O = eq * _;
                }
              } else if (ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ % 2) {
                O = eq * _;
                Q = -_ * eq;
              } else {
                Q = _ * eq;
                O = eq * -_;
              }
            } else if (ⵠⵠᐃⵠ.ᐃΔΔᐃΔᐃΔ % 2) {
              O = Z * Math.cos(Y) * eq;
              Q = eq * (Z * Math.sin(Y));
            } else {
              O = eq * (-Math.cos(Y) * Z);
              Q = Z * -Math.sin(Y) * eq;
            }
            R.push({
              x: ⵠⵠᐃⵠ.x + O,
              y: ⵠⵠᐃⵠ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (H = 0; H < L; H++) {
            if (R[H].id === 226) {
              R[H].alpha = Math.max(0, R[H].alpha - Ox * 1.5);
            } else {
              R[H].alpha = Math.max(0, R[H].alpha - Ox / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ᐃᐃⵠ = function () {
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[0]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[80]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[60]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[67]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[70]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[77]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[71]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[72]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[73]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[74]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[61]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[62]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[88]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[91]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[90]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[63]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[78]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[75]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[76]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[64]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[68]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[65]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[66]);
      this.ⵠΔⵠⵠⲆ(this.Ⲇᐃⵠ[69]);
    };
    this.Δᐃⵠⵠ = [];
    this.Δᐃⵠⵠ[620] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 1, 1.05, 1, 0.008, 0.008);
    this.Δᐃⵠⵠ[619] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.08, 1, 0.006, 0.006);
    this.Δᐃⵠⵠ[694] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Wh, 1, 1.02, 1, 0.008, 0.008);
    this.Δᐃⵠⵠ[695] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 1, 1.08, 1, 0.006, 0.006);
    this.ⵠⵠΔᐃⲆ = [];
    this.ⵠⵠΔᐃⲆ[0] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.1, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[1] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[2] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[3] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Zq, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[4] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[5] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[6] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Zq, 0.5, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[7] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Zq, 0.9, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[8] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[9] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ul, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[10] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Yi, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[11] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[12] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[13] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠⵠΔᐃⲆ[14] = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function Vw() {
    this.ⲆⵠΔⵠΔ = "";
    this.ⵠⲆΔΔ = 0;
    this.ᐃᐃⲆΔⵠ = 0;
    this.ΔΔⲆᐃⵠ = 0;
    this.ΔⲆᐃᐃΔⵠⲆ = 0;
    this.ⲆΔⵠΔΔ = 0;
    this.ⵠⵠΔⲆⲆ = 0;
    this.Δᐃⵠⵠᐃ = 0;
    this.level = 0;
    this.label = null;
    this.ⲆᐃⵠΔᐃⵠⲆ = null;
    this.ΔⵠΔⵠⵠΔⲆ = null;
    this.ⲆᐃᐃⲆⲆ = false;
    this.ᐃⲆᐃⵠⲆ = 0;
  }
  function Ww(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ΔᐃᐃⲆ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ⵠⵠᐃⵠⲆᐃΔ = i;
    this.action = a;
    this.info = j;
    this.ⲆⵠᐃⵠΔ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ΔⲆⵠⵠΔ = k;
    if (Fx) {
      this.ΔᐃⲆⵠ = c * Fx.ⵠⵠⵠⲆΔⵠΔ + d;
    }
    switch (b) {
      case 0:
        this.ΔⵠⵠΔ = Fx.ⵠⲆΔᐃ[this.ΔᐃᐃⲆ];
        this.ⵠⲆΔΔ = this.ΔⵠⵠΔ.ⵠⲆΔΔ;
        this.ΔⲆᐃᐃΔⵠⲆ = this.ΔⵠⵠΔ.ΔⲆᐃᐃΔⵠⲆ;
        this.ⲆΔⵠΔΔ = this.ΔⵠⵠΔ.ⲆΔⵠΔΔ;
        this.ᐃᐃⲆΔⵠ = this.ΔⵠⵠΔ.ᐃᐃⲆΔⵠ;
        this.ⵠΔᐃᐃΔᐃⲆ = -1000000;
        this.ΔΔⲆΔᐃ = -1000000;
        this.ⵠⲆⵠΔⵠ = -1000000;
        this.ᐃⲆⲆⵠⵠ = -1000000;
        this.ΔⲆⲆⵠⲆᐃⵠ = -1000000;
        this.ΔⲆⲆᐃΔⵠΔ = -1000000;
        this.ⵠⲆᐃⲆᐃ = -1000000;
        this.ⵠΔⲆⲆⲆ = Fx.mode === 2 && this.ⵠⲆΔΔ === 0 && Dh;
        this.ⲆⵠΔⵠΔᐃⵠ = Fx.mode === 3 && this.ⵠⲆΔΔ === 0 ? nl : Le;
        this.ⲆⵠΔΔᐃⵠΔ = !!this.ⵠΔⲆⲆⲆ && this.ΔⵠⵠΔ.ⲆⵠΔⵠΔ === "  " || ft;
        this.ⲆⲆⲆⵠᐃ = [];
        this.ᐃᐃᐃᐃΔⲆᐃ = 0;
        this.ΔᐃⵠⲆ = Ej;
        this.ᐃΔΔᐃΔᐃΔ = 0;
        this.ⲆⵠⲆⵠⲆᐃⲆ = 0;
        this.ⵠᐃᐃᐃⲆ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ⲆᐃᐃⲆ = zw;
        this.ⵠⵠⵠΔΔⲆᐃ = uw;
        this.ΔΔⵠᐃⵠ = 0;
        this.ⲆΔΔᐃⲆ = 0;
        this.ⵠᐃⲆᐃⵠ = 0;
        this.ΔᐃⵠΔⵠⲆᐃ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔⵠⲆⵠΔ = 0;
        this.ΔⵠᐃⲆⲆΔΔ = 0;
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆⲆᐃΔⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        this.ⲆΔⲆⲆᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ld, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠΔⲆᐃΔᐃ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ᐃⲆⲆⲆⵠⵠΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Qg, 0, 0, -Math.PI / 3, 6, 9);
        this.ⵠⲆⲆᐃⲆᐃΔΔΔ = 0;
        this.ᐃⲆⲆᐃⵠⵠΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Zq, 0.6, 0.6, 0, 1, 3);
        this.ᐃΔΔᐃⵠΔᐃ = this.ⲆⵠΔΔᐃⵠΔ ? new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ᐃⲆΔᐃⵠⲆⲆ = 0;
        this.ⵠⲆᐃⵠⵠⵠⵠ = 0;
        this.ⵠᐃⲆⲆΔᐃⵠ = [];
        this.ⵠⵠΔⲆⵠᐃⲆ = [];
        this.text = [];
        this.label = [];
        this.ⲆⵠⲆΔΔΔⲆ = Aw;
        this.ⵠⵠⵠᐃΔ = true;
        this.right = -1;
        this.ⵠⵠΔⵠΔ = -1;
        this.action = 64;
        this.ΔᐃᐃⵠⵠⲆⲆ = false;
        this.ΔⲆⲆⲆᐃ = 0;
        this.ΔⲆⵠⲆᐃ = false;
        this.bubbles = [];
        this.ΔΔⲆᐃⵠ = 0;
        this.ⵠᐃΔᐃᐃ = -1;
        this.ᐃᐃⵠ = function (a) {
          if (this.info & 32768) {
            this.ΔᐃᐃⵠⵠⲆⲆ = Ha;
            this.info = this.info & -32769;
          } else {
            this.ΔᐃᐃⵠⵠⲆⲆ = Ja;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ΔΔⲆᐃⵠ = 1;
          } else {
            this.ΔΔⲆᐃⵠ = 0;
          }
          this.ΔⲆⲆⲆᐃ = Math.floor(this.info / 128);
          this.info -= this.ΔⲆⲆⲆᐃ * 128;
          if (this.info === 7 || this.ⲆⵠΔΔᐃⵠΔ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ᐃᐃᐃᐃΔⲆᐃ = Fx.ⵠⵠΔΔΔⵠⵠⲆΔ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⵠⵠΔⵠΔ = this.ⲆⵠᐃⵠΔ & 255;
          if (this.right === 2) {
            this.ΔⲆⵠⲆᐃ = true;
          } else {
            this.ΔⲆⵠⲆᐃ = ld;
          }
          if (Pw[this.right]) {
            this.ᐃΔᐃᐃΔ = true;
          } else {
            this.ᐃΔᐃᐃΔ = xo;
          }
          if (a & 256) {
            this.ᐃⲆⲆᐃⵠⵠΔ.ᐃΔⲆ = false;
            this.ᐃⲆⲆᐃⵠⵠΔ.ⲆᐃΔ = 0.6;
          } else if (a & 4) {
            this.freeze.ᐃΔⲆ = false;
            this.freeze.ⲆᐃΔ = 0.6;
          } else if (a & 128) {
            this.ⲆⲆᐃΔⵠ.ᐃΔⲆ = false;
            this.ⲆⲆᐃΔⵠ.ⲆᐃΔ = 0.6;
          }
          if (a & 8) {
            this.ⲆΔⲆⲆᐃⵠⵠ.ᐃΔⲆ = na;
            this.ⲆΔⲆⲆᐃⵠⵠ.ⲆᐃΔ = 0.6;
          }
          if (a & 2) {
            this.ᐃⲆⵠ.ᐃΔⲆ = false;
            this.ᐃⲆⵠ.ⲆᐃΔ = 0.6;
          }
          if (a & 16) {
            this.ⵠⲆⲆᐃⲆᐃΔΔΔ = 0.58;
            if (Kx.ⵠⲆᐃᐃΔ && this.ⵠᐃΔᐃᐃ !== -1) {
              Kx.ⵠⲆΔᐃ[this.ⵠᐃΔᐃᐃ].ΔⵠΔᐃᐃᐃⲆΔΔ(rx[this.right]);
            }
          }
        };
        this.ᐃᐃⵠ();
        break;
      case 23:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ᐃⵠⵠⵠⲆ = _v;
        this.ΔⵠⲆⵠᐃ = Rv;
        this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⲆᐃΔΔΔ = 0;
        this.ⵠⵠⵠⲆⵠⵠΔ = 0;
        this.ⵠⲆⲆⲆⲆ = cv;
        break;
      case 22:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ᐃⵠⵠⵠⲆ = Pv;
        this.ΔⵠⲆⵠᐃ = kw;
        this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔⲆᐃΔΔΔ = 0;
        this.ⵠⵠⵠⲆⵠⵠΔ = 0;
        break;
      case 1:
      case 6:
        this.ᐃⵠⵠⵠⲆ = Tv;
        this.ΔⵠⲆⵠᐃ = $v;
        this.ᐃⲆᐃΔⲆ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(os, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: Le,
          angle: 0
        };
        break;
      case 43:
        this.ᐃⵠⵠⵠⲆ = mw;
        this.ΔⵠⲆⵠᐃ = aw;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⵠⲆⵠⵠ = [];
        for (var g = 0; g < 3; g++) {
          this.ⵠⲆⵠⵠ.push({
            ⲆᐃᐃⲆ: Dv,
            Δᐃⵠⵠ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⲆⵠⵠ[0].x = this.x - 16.5;
        this.ⵠⲆⵠⵠ[0].y = this.y - 15.5;
        this.ⵠⲆⵠⵠ[0].angle = this.angle;
        this.ⵠⲆⵠⵠ[1].x = this.x + 36;
        this.ⵠⲆⵠⵠ[1].y = this.y + 17;
        this.ⵠⲆⵠⵠ[1].angle = this.angle;
        this.ⵠⲆⵠⵠ[2].x = this.x - 18.5;
        this.ⵠⲆⵠⵠ[2].y = this.y + 39;
        this.ⵠⲆⵠⵠ[2].angle = this.angle;
        break;
      case 3:
        this.ᐃⵠⵠⵠⲆ = zv;
        this.ΔⵠⲆⵠᐃ = Kv;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⵠⲆⵠⵠ = [];
        for (g = 0; g < 3; g++) {
          this.ⵠⲆⵠⵠ.push({
            ⲆᐃᐃⲆ: Gv,
            Δᐃⵠⵠ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⲆⵠⵠ[0].x = this.x - 16.5;
        this.ⵠⲆⵠⵠ[0].y = this.y - 15.5;
        this.ⵠⲆⵠⵠ[1].x = this.x - 5.5;
        this.ⵠⲆⵠⵠ[1].y = this.y + 7.5;
        this.ⵠⲆⵠⵠ[2].x = this.x + 18;
        this.ⵠⲆⵠⵠ[2].y = this.y - 5;
        break;
      case 77:
        this.ⲆᐃᐃⲆ = Xv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Bs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ⲆᐃᐃⲆ = Iv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(qa, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ⲆᐃᐃⲆ = Hv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔⲆᐃⲆΔΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔᐃⵠⲆᐃⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(sn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 0.6, 0.6, 0, 5, 3);
        this.ⲆⲆᐃΔⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ⲆᐃᐃⲆ = sw;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔⲆᐃⲆΔΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠΔᐃⵠⲆᐃⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ft, 0.6, 0.6, 0, 5, 3);
        this.ⲆⲆᐃΔⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Yi, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ⲆᐃᐃⲆ = wv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(z, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ⲆᐃᐃⲆ = Fv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(xo, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⵠⲆΔⵠⵠ = this.info & 15;
        this.ⲆⵠⲆⵠⲆᐃⲆ = this.ⲆⵠᐃⵠΔ & 1;
        this.ᐃΔⵠΔⲆⲆΔ = 0;
        this.x = this.info;
        this.y = this.ⲆⵠᐃⵠΔ;
        this.ⲆᐃᐃⲆ = bw;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ⲆᐃᐃⲆ = Fv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Wh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(hl, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ⲆᐃᐃⲆ = Zv;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        break;
      case 34:
        this.ΔⵠⲆⵠᐃ = jw;
        this.ⲆᐃᐃⲆ = nw;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(os, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.up = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Bs, 1, 1.03, 0.98, 0.1, 0.1);
        this.ΔΔΔΔⲆ = [];
        break;
      case 87:
        this.angle = Math.PI * Math.random() / 2;
      case 86:
      case 82:
        this.ⲆᐃᐃⲆ = vv;
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ld, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ⲆᐃᐃⲆ = qw;
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ⲆᐃᐃⲆ = Av;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ib, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(z, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Bs, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ΔΔᐃⲆᐃ = 0;
        this.ⵠᐃᐃΔ = [];
        this.ⲆᐃΔⵠᐃⵠᐃ = 0;
        this.ᐃⲆᐃᐃᐃΔⲆ = iw;
        this.ⲆᐃᐃⲆ = dw;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Bs, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ⲆⵠᐃⵠΔ;
        this.scale = 1;
        this.ΔⵠⲆⵠ = 0;
        this.ⲆᐃᐃⲆ = ew;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ft, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ⲆⵠᐃⵠΔ;
        this.scale = 1;
        this.ΔⵠⲆⵠ = 0;
        this.ⲆᐃᐃⲆ = hw;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(os, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(xo, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ⲆᐃᐃⲆ = Mv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ⲆᐃᐃⲆ = Lv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Qg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ul, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ld, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ⲆᐃᐃⲆ = Uv;
        this.Δᐃⵠⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Bs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(hl, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ⵠⲆⵠⵠ = [];
        for (g = 0; g < 5; g++) {
          this.ⵠⲆⵠⵠ.push({
            ⲆᐃᐃⲆ: Gv,
            Δᐃⵠⵠ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(sn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ⵠⲆⵠⵠ[0].x = this.x - 20.5;
            this.ⵠⲆⵠⵠ[0].y = this.y - 22.5;
            this.ⵠⲆⵠⵠ[1].x = this.x - 35.5;
            this.ⵠⲆⵠⵠ[1].y = this.y + 7.5;
            this.ⵠⲆⵠⵠ[2].x = this.x + 7.5;
            this.ⵠⲆⵠⵠ[2].y = this.y - 30;
            this.ⵠⲆⵠⵠ[3].x = this.x + 22.5;
            this.ⵠⲆⵠⵠ[3].y = this.y;
            this.ⵠⲆⵠⵠ[4].x = this.x - 7.5;
            this.ⵠⲆⵠⵠ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ⵠⲆⵠⵠ[0].x = this.x - 30.5;
            this.ⵠⲆⵠⵠ[0].y = this.y - 22.5;
            this.ⵠⲆⵠⵠ[1].x = this.x - 15.5;
            this.ⵠⲆⵠⵠ[1].y = this.y + 7.5;
            this.ⵠⲆⵠⵠ[2].x = this.x + 15.5;
            this.ⵠⲆⵠⵠ[2].y = this.y - 30;
            this.ⵠⲆⵠⵠ[3].x = this.x + 12.5;
            this.ⵠⲆⵠⵠ[3].y = this.y + 5;
            this.ⵠⲆⵠⵠ[4].x = this.x - 40.5;
            this.ⵠⲆⵠⵠ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⵠⲆⵠⵠ[0].x = this.x - 20.5;
            this.ⵠⲆⵠⵠ[0].y = this.y - 20.5;
            this.ⵠⲆⵠⵠ[1].x = this.x - 35.5;
            this.ⵠⲆⵠⵠ[1].y = this.y + 15.5;
            this.ⵠⲆⵠⵠ[2].x = this.x + 7.5;
            this.ⵠⲆⵠⵠ[2].y = this.y - 17;
            this.ⵠⲆⵠⵠ[3].x = this.x + 22.5;
            this.ⵠⲆⵠⵠ[3].y = this.y + 5;
            this.ⵠⲆⵠⵠ[4].x = this.x - 7.5;
            this.ⵠⲆⵠⵠ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: _r,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = pw;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠⲆⲆᐃᐃⲆ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = ow;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(qa, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: qa,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = Bv;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(os, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = Cv;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(ul, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = Ev;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(os, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = fw;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(os, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: Wh,
          angle: 0
        };
        this.ⲆᐃᐃⲆ = Yv;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ⲆᐃᐃⲆ = Nv;
        this.rotate = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        break;
      case 25:
        this.ⲆᐃᐃⲆ = Ov;
        this.rotate = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(ib, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        break;
      case 26:
        this.ⲆᐃᐃⲆ = rw;
        this.rotate = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(ft, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: Yi,
          angle: 0
        };
        break;
      case 27:
        this.ⲆᐃᐃⲆ = Vv;
        this.rotate = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(z, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: ld,
          angle: 0
        };
        break;
      case 28:
        this.ⲆᐃᐃⲆ = Jv;
        this.rotate = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: sn,
          angle: 0
        };
        break;
      case 32:
        this.ᐃⵠⵠⵠⲆ = yv;
        this.ΔⵠⲆⵠᐃ = xv;
        this.rotate = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: ib,
          angle: 0
        };
        break;
      case 38:
        this.ⲆᐃᐃⲆ = iv;
        this.ᐃΔⵠⵠ = Math.floor(this.x / 100);
        this.Δᐃ = Math.floor(this.y / 100);
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.opacity = 1;
        this.ⵠⲆⲆⲆⲆ = Zu;
        break;
      case 42:
        this.ⲆᐃᐃⲆ = kv;
        this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(qa, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: Yi,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ⲆᐃᐃⲆ = ev;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: _r,
          angle: 0
        };
        break;
      case 30:
        this.ⲆᐃᐃⲆ = ev;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: os,
          angle: 0
        };
        this.ⵠⲆⲆⲆⲆ = Zu;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ⲆᐃᐃⲆ = ev;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ⵠⲆⲆⲆⲆ = cv;
        break;
      case 41:
        this.ⲆᐃᐃⲆ = gv;
        this.opacity = 1;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(xo, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (m < Math.PI / 4) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ⲆᐃᐃⲆ = hv;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 89:
        this.ⲆᐃᐃⲆ = Xu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 83:
        this.ⲆᐃᐃⲆ = pv;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 84:
        this.ⲆᐃᐃⲆ = dv;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 85:
        this.ⲆᐃᐃⲆ = jv;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ᐃᐃⵠ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⲆᐃᐃⲆ = _u;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.lock = 0;
        this.ᐃᐃⵠ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ⲆᐃᐃⲆ = qv;
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(z, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: os,
          angle: 0
        };
        this.ⵠⲆⲆⲆⲆ = cv;
        break;
      case 18:
        this.ᐃⵠⵠⵠⲆ = Sv;
        this.ⲆᐃᐃⲆ = Qv;
        this.ΔⵠⲆⵠᐃ = gw;
        this.ⵠᐃᐃΔ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ᐃᐃΔⲆⵠ = new ⵠᐃΔᐃ.ΔΔⲆⵠ(hl, 1, 1.23, 1.18, 0.04, 0.04);
        this.ᐃⲆⵠ = {
          ⲆⲆᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(qa, 1, 1, 0, 10, 10),
          ᐃᐃⵠ: false,
          angle: 0
        };
        this.ᐃᐃⵠ = function (a) {
          this.action = a;
        };
    }
  }
  function Xw() {
    Math.random();
    return "t";
  }
  function Yw() {
    Math.random();
    return "o";
  }
  function Zw() {
    Math.random();
    return "n";
  }
  function $w() {
    this.ΔⲆᐃᐃⵠ = function () { };
    this.ⵠΔᐃᐃᐃ = {
      ΔᐃⲆΔΔ: 1,
      ΔᐃᐃⲆ: 1,
      open: false
    };
    this.ᐃᐃⲆⵠⵠ = {
      ΔᐃᐃⲆ: 1,
      ΔᐃⲆΔΔ: -1,
      open: _r
    };
    this.ⵠⲆⵠᐃ = {
      ⲆΔᐃΔᐃ: 0,
      ΔᐃⲆΔΔ: -1,
      ΔᐃᐃⲆ: 1,
      open: false,
      ᐃΔⲆⵠᐃⵠⵠ: 0
    };
    this.ᐃΔⲆΔ = {
      ⲆᐃⲆⲆᐃΔⲆ: 0,
      ΔᐃⵠᐃΔΔΔ: 0,
      type: 0,
      ⲆⲆⵠΔⵠᐃΔ: 0,
      ΔᐃᐃⲆ: 1,
      ΔᐃⲆΔΔ: -1,
      open: os
    };
    this.ΔᐃΔᐃ = {
      open: false,
      ⲆΔᐃΔᐃ: 0,
      ᐃⲆⵠⲆΔⲆᐃ: 0,
      ΔᐃᐃⲆ: 1,
      ΔᐃⲆΔΔ: -1,
      ⲆᐃⲆⲆᐃΔⲆ: 0
    };
    this.sign = {
      ΔᐃⲆΔΔ: -1,
      open: false
    };
    this.ΔⵠⲆⵠⵠ = {
      ΔⲆΔⵠ: 0,
      ΔᐃᐃⲆ: 1,
      ΔᐃⲆΔΔ: -1,
      open: sn
    };
    this.ΔⲆⵠⲆᐃ = {
      enabled: false,
      ᐃΔΔᐃΔ: -1,
      label: Ja,
      now: -1,
      ⲆᐃᐃⲆ: vw
    };
    this.ᐃΔⵠⲆ = {
      open: false,
      ᐃᐃⵠΔⲆⲆᐃ: false,
      ΔᐃᐃᐃⵠⲆⵠ: ld,
      lock: Bs,
      ΔᐃⲆΔΔ: -1,
      id: -1,
      ΔⲆΔⵠ: 0,
      locked: ib,
      ΔᐃᐃⲆ: 1
    };
    this.ⲆᐃᐃⲆⲆ = f;
    this.reconnect = {
      rotate: 0,
      enabled: false
    };
    this.key = ⵠᐃΔᐃ.ᐃᐃΔΔⲆⲆⵠ("key", jg.location.href);
    var a = ⵠᐃΔᐃ.ᐃᐃΔΔⲆⲆⵠ("egg", jg.location.href);
    if (a) {
      Ex.ⵠⲆΔΔ = parseInt(a);
    }
    this.beta = jg.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ΔᐃⲆΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ΔᐃⲆΔ.get("starve_beta");
    }
    this.ⲆΔΔⲆΔ = ΔᐃⲆΔ.get("starve_token") ? ΔᐃⲆΔ.get("starve_token") : ⵠᐃΔᐃ.ⲆΔᐃΔΔΔᐃ(14);
    jg.baguette();
    var b = jg.kot2;
    function c() {
      this.seed = 1;
      this.ᐃᐃΔᐃᐃᐃᐃ = 2;
      this.ΔᐃⵠᐃΔⵠΔ = 3;
      this.ΔⵠᐃⵠᐃⲆΔΔⲆ = 1;
      this.ᐃΔⵠⵠⵠⵠΔⲆⲆ = 2;
      this.ⵠⲆⵠⲆⲆᐃⲆᐃΔ = 3;
      this.ⲆᐃⲆΔΔᐃΔ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃⲆᐃⲆⵠⵠⵠ = function (a) {
        this.ᐃᐃΔᐃᐃᐃᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔΔⲆᐃΔᐃΔ = function (a) {
        this.ΔᐃⵠᐃΔⵠΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⵠⵠΔⵠᐃᐃⲆⲆ = function (a) {
        this.ΔⵠᐃⵠᐃⲆΔΔⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⵠⲆⵠᐃⵠᐃⲆⵠ = function (a) {
        this.ᐃΔⵠⵠⵠⵠΔⲆⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆⲆⲆⵠᐃⵠᐃᐃⲆ = function (a) {
        this.ⵠⲆⵠⲆⲆᐃⲆᐃΔ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃᐃⵠΔⲆΔΔ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ⵠⵠᐃⵠⵠᐃᐃ;
          var o = ⲆⲆᐃⲆΔⲆⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (k < m && a > m) {
              var q = Math.random() > 0.5 ? Ox * -10 : Ox * 10;
              var r = p * e;
              this.ᐃΔⵠⲆᐃᐃᐃ[n] = Math.max(-25, Math.min(25, this.ᐃΔⵠⲆᐃᐃᐃ[n] + q));
              this.ⲆⵠΔⵠⲆⵠⵠ[n] = Math.max(-8, Math.min(8, this.ⲆⵠΔⵠⲆⵠⵠ[n] + q));
              if (r > 0) {
                Jo.beginPath();
                Jo.arc(m + Gx.ᐃⵠⲆ.x + this.ⲆⵠΔⵠⲆⵠⵠ[n], c + this.ᐃΔⵠⲆᐃᐃᐃ[n] - 20, r, 0, Math.PI * 2);
                if (Fx.transition) {
                  var t = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
                  Jo.fillStyle = zf(83, 156, 160, 236, 247, 249, t);
                } else {
                  Jo.fillStyle = xs.ⵠⲆᐃⲆΔΔΔ[Fx.time];
                }
                Jo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⲆⵠⵠⵠΔΔΔ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ⵠⵠᐃⵠⵠᐃᐃ;
          var o = ⲆⲆᐃⲆΔⲆⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (k < m && m < a) {
              var q = Math.random() > 0.5 ? Ox * -10 : Ox * 10;
              var r = e * p;
              this.ⵠⲆⵠⵠⲆ[n] = Math.max(-25, Math.min(25, this.ⵠⲆⵠⵠⲆ[n] + q));
              this.ᐃⵠⵠᐃΔ[n] = Math.max(-8, Math.min(8, this.ᐃⵠⵠᐃΔ[n] + q));
              if (r > 0) {
                Jo.beginPath();
                Jo.arc(c + this.ⵠⲆⵠⵠⲆ[n] - 20, m + Gx.ᐃⵠⲆ.y + this.ᐃⵠⵠᐃΔ[n], r, 0, Math.PI * 2);
                if (Fx.transition) {
                  var t = Fx.time ? 1 - Fx.ⵠΔⵠΔ.ⲆᐃΔ : Fx.ⵠΔⵠΔ.ⲆᐃΔ;
                  Jo.fillStyle = zf(83, 156, 160, 236, 247, 249, t);
                } else {
                  Jo.fillStyle = xs.ⵠⲆᐃⲆΔΔΔ[Fx.time];
                }
                Jo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ᐃᐃⵠΔⲆⵠⲆΔΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ΔΔⲆᐃΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ᐃᐃⵠΔⲆΔΔ(d, h, this.ΔᐃⵠᐃΔⵠΔ, 18, 16, f, g);
        Jo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⲆᐃⲆΔΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ᐃᐃⵠΔⲆΔΔ(b, h, this.seed, 12, 10, f, g);
        Jo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃⲆᐃⲆⵠⵠⵠ();
          }
          Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
          this.ᐃᐃⵠΔⲆΔΔ(c, h, this.ᐃᐃΔᐃᐃᐃᐃ, 6, 6, f, g);
          Jo.globalAlpha = 1;
        }
      };
      this.ⲆΔᐃⲆⵠⵠᐃΔⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ΔΔⲆᐃΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ᐃᐃⵠΔⲆΔΔ(d, h, this.ΔᐃⵠᐃΔⵠΔ, 18, 16, f, g);
        Jo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⲆᐃⲆΔΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ᐃᐃⵠΔⲆΔΔ(b, h, this.seed, 12, 10, f, g);
        Jo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃⲆᐃⲆⵠⵠⵠ();
          }
          Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
          this.ᐃᐃⵠΔⲆΔΔ(c, h, this.ᐃᐃΔᐃᐃᐃᐃ, 6, 6, f, g);
          Jo.globalAlpha = 1;
        }
      };
      this.ΔΔⲆⵠⵠᐃᐃⵠᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ΔΔⲆᐃΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ⲆⵠⵠⵠΔΔΔ(d, h, this.ΔᐃⵠᐃΔⵠΔ, 18, 16, f, g);
        Jo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⲆᐃⲆΔΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ⲆⵠⵠⵠΔΔΔ(b, h, this.seed, 12, 10, f, g);
        Jo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃⲆᐃⲆⵠⵠⵠ();
          }
          Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
          this.ⲆⵠⵠⵠΔΔΔ(c, h, this.ᐃᐃΔᐃᐃᐃᐃ, 6, 6, f, g);
          Jo.globalAlpha = 1;
        }
      };
      this.ΔᐃᐃΔΔΔᐃᐃⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ΔΔⲆᐃΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ⲆⵠⵠⵠΔΔΔ(d, h, this.ΔᐃⵠᐃΔⵠΔ, 18, 16, f, g);
        Jo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⲆᐃⲆΔΔᐃΔ();
        }
        Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
        this.ⲆⵠⵠⵠΔΔΔ(b, h, this.seed, 12, 10, f, g);
        Jo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃⲆᐃⲆⵠⵠⵠ();
          }
          Jo.globalAlpha = ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(h);
          this.ⲆⵠⵠⵠΔΔΔ(c, h, this.ᐃᐃΔᐃᐃᐃᐃ, 6, 6, f, g);
          Jo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔⲆⵠΔᐃΔⵠ, 0, 10, 0, 0, 200),
        ⲆⲆⲆΔ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ᐃᐃⲆᐃᐃⵠᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆᐃⲆⲆⵠΔᐃ, 0, 10, 0, 0, 150),
        ⲆⲆⲆΔ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆΔᐃⵠⲆΔⵠ, 0, 10, 0, 0, 100),
        ⲆⲆⲆΔ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ, 0, 10, 100, 100, 0)
      };
      this.ᐃⵠⵠⵠⵠⵠᐃⵠⵠ = function (a) {
        if (a.r.x === a.r.ΔⵠⵠᐃΔ) {
          if (a.ⲆⲆⲆΔ.ΔⵠⵠᐃΔ === a.ⲆⲆⲆΔ.x) {
            return a.r;
          } else {
            return a.ⲆⲆⲆΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ΔⲆᐃ = function (a) {
        var b;
        if (a.r.ΔⵠⵠᐃΔ === a.r.x) {
          if (a.ⲆⲆⲆΔ.x === a.ⲆⲆⲆΔ.ΔⵠⵠᐃΔ) {
            a.r.ᐃᐃⵠΔᐃΔᐃ();
            a.ⲆⲆⲆΔ.ᐃᐃⵠΔᐃΔᐃ();
            b = a.r;
          } else {
            b = a.ⲆⲆⲆΔ;
          }
        } else {
          b = a.r;
        }
        b.ΔᐃⵠΔⲆ(b.ΔⵠⵠᐃΔ);
        return b;
      };
      this.ⵠⲆⵠⵠⲆ = [];
      this.ᐃⵠⵠᐃΔ = [];
      this.ᐃΔⵠⲆᐃᐃᐃ = [];
      this.ⲆⵠΔⵠⲆⵠⵠ = [];
      this.ΔⲆᐃᐃⵠ = function () {
        for (var a = 0; ⵠⵠᐃⵠⵠᐃᐃ > a; a++) {
          this.ⵠⲆⵠⵠⲆ[a] = Math.floor(ⲆⲆᐃⲆΔⲆⲆ[a] * 25);
          this.ᐃⵠⵠᐃΔ[a] = Math.floor(ⲆⲆᐃⲆΔⲆⲆ[a] * 8);
          this.ᐃΔⵠⲆᐃᐃᐃ[a] = Math.floor(ⲆⲆᐃⲆΔⲆⲆ[a] * 25);
          this.ⲆⵠΔⵠⲆⵠⵠ[a] = Math.floor(ⲆⲆᐃⲆΔⲆⲆ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ΔⵠⵠᐃΔ;
        this.w2.r.Δⵠⵠᐃᐃ = 3.5;
        this.w3.r.Δⵠⵠᐃᐃ = 2;
      };
      this.ΔⲆᐃᐃⵠ();
    }
    this.ⲆΔΔⲆΔ = b.substring(0, 6) + this.ⲆΔΔⲆΔ.substring(6);
    this.ⵠⵠᐃⲆⲆᐃⵠ = ΔᐃⲆΔ.get("starve_token_id") ? ΔᐃⲆΔ.get("starve_token_id") : "";
    this.id = 0;
    this.ΔᐃⲆⵠ = 0;
    this.ⵠⵠⲆ = 0;
    this.ᐃΔⲆΔⵠⵠⵠ = {
      ΔᐃⲆⲆᐃⵠⲆ: "",
      ᐃⲆᐃⵠⲆ: 0,
      ᐃᐃⲆᐃᐃ: 0,
      ⵠᐃΔⲆⵠΔᐃ: 0
    };
    this.ᐃⵠⵠᐃᐃᐃᐃⵠⲆ = {
      connected: 0,
      ⵠⲆᐃⵠᐃ: new Date().getTime()
    };
    this.ΔΔΔᐃΔ = [];
    this.ⵠⵠᐃⲆᐃᐃᐃ = function (a) {
      for (var b = 0; b < this.ΔΔΔᐃΔ.length; b++) {
        if (this.ΔΔΔᐃΔ[b] == a) {
          return true;
        }
      }
      return false;
    };
    this.ⵠΔⲆΔ = {
      ᐃΔΔᐃΔ: 0,
      time: 0,
      value: 0,
      open: z,
      ⲆᐃᐃⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ᐃΔΔᐃΔ) / 1000);
          if (this.time < 60) {
            Jx.ⵠΔⲆΔ.button.ⲆᐃᐃⲆ(Jo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = ft;
          }
        }
      }
    };
    this.ᐃⲆⲆΔⲆ = {
      id: -1,
      ΔᐃᐃⲆ: -1,
      lock: 0,
      timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(qe, 0, 1, 0, 1 / 30, 1),
      wait: false
    };
    this.ᐃⵠⵠⵠᐃ = {
      timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(_r, 0, 1, 0, 1 / 5, 1),
      wait: ul
    };
    this.ᐃⲆΔΔΔ = {
      timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(Ja, 0, 1, 0, 1, 1),
      wait: ft
    };
    this.ᐃΔᐃᐃΔ = {
      timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 1, 0, 1 / 10, 1),
      wait: na
    };
    this.ᐃⵠⲆ = new ⵠᐃΔᐃ.ⵠᐃΔΔⵠⲆᐃ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 0.4, 0, 0, Eo, _o, Eo, _o);
    this.ᐃⵠⲆ.ᐃΔΔᐃΔ = 0;
    this.ᐃⵠⲆ.ⲆᐃΔⵠⵠΔΔ = 0;
    this.ᐃⵠⲆ.ᐃᐃⵠ = function () {
      if (this.ⲆᐃΔⵠⵠΔΔ > 0) {
        this.ⲆᐃΔⵠⵠΔΔ -= Ox;
      } else {
        var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
        if (a) {
          this.ᐃΔΔᐃΔ = 0;
          var b = Math.max(Math.min(Eo - a.x, -2), -Fx.w + 2 + Mo);
          var c = Math.max(Math.min(_o - a.y, -2), 2 - Fx.ⲆΔΔ + Do);
          this.ΔᐃⵠΔⲆ({
            x: b,
            y: c
          });
        } else {
          this.ᐃΔΔᐃΔ += Ox;
          if (this.ᐃΔΔᐃΔ > 3) {
            this.ᐃΔΔᐃΔ = 0;
            if (!Gx.reconnect.enabled) {
              Ix.ΔⵠΔⵠⵠⵠΔⲆΔ();
            }
          }
        }
      }
    };
    this.ᐃⵠⲆ.w = screen.width;
    this.ᐃⵠⲆ.ⲆΔΔ = screen.height;
    this.ᐃⵠⲆ.ΔⵠΔⲆⵠᐃΔ = this.ᐃⵠⲆ.w;
    this.ᐃⵠⲆ.ⵠⵠᐃᐃΔΔΔ = this.ᐃⵠⲆ.ⲆΔΔ;
    this.ᐃⵠⲆ.rx = 0;
    this.ᐃⵠⲆ.ry = 0;
    this.ᐃⵠⲆ.ΔⵠⵠⲆⲆᐃⵠⵠΔ = 0;
    this.ᐃⵠⲆ.ΔᐃΔⲆⲆᐃᐃΔΔ = 0;
    this.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ = function (a, b) {
      this.x = -Math.min(Math.max(-Fx.ᐃᐃⲆⲆΔᐃⵠ * 2, a - Fx.ᐃᐃⲆⲆΔᐃⵠ - this.ΔⵠΔⲆⵠᐃΔ / 2), Fx.w - this.ΔⵠΔⲆⵠᐃΔ);
      this.y = -Math.min(Math.max(-Fx.ⲆᐃⵠᐃΔⲆΔ * 2, b - (Fx.ⲆᐃⵠᐃΔⲆΔ + this.ⵠⵠᐃᐃΔΔΔ) / 2), Fx.ⲆΔΔ - this.ⵠⵠᐃᐃΔΔΔ + Fx.ⲆᐃⵠᐃΔⲆΔ);
      this.ΔⵠⵠᐃΔ = this.x;
      this.ΔΔⵠΔΔΔᐃ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ΔΔⵠⵠⵠⲆΔ: 0,
      ᐃⵠⵠⲆ: 0,
      attack: 0,
      ᐃᐃⵠ: function () {
        var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
        if (a) {
          var b = {
            x: Gx.ᐃⵠⲆ.x + a.x,
            y: Gx.ᐃⵠⲆ.y + a.y
          };
        } else {
          b = Ro;
        }
        var c = ⵠᐃΔᐃ.ᐃᐃᐃⲆⲆⲆⲆ(Mx.ⵠΔΔⲆ, b);
        var d = qa;
        this.ᐃⵠⵠⲆ += Ox;
        if (!Mx.state) {
          if (a && !(a.action & 16) && this.ᐃⵠⵠⲆ > 0.2) {
            this.attack = 1;
            d = true;
            this.ᐃⵠⵠⲆ = 0;
            Ix.ⲆΔⲆⵠⲆⲆⲆᐃⲆ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⵠⵠᐃⵠⲆᐃΔ = c;
        }
        if (!d) {
          this.timeout += Ox;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              Ix.ⲆΔΔΔΔⵠⲆᐃⵠ(c);
              this.angle = c;
            }
          }
        }
        if (!Gx.ΔⵠΔΔⲆ.open && !Gx.ⵠΔΔⵠⵠ.open) {
          var e = 0;
          if (Lx.ΔᐃΔⵠᐃΔᐃ()) {
            e |= 1;
          }
          if (Lx.ᐃΔΔΔΔⲆᐃ()) {
            e |= 2;
          }
          if (Lx.ΔᐃⲆᐃⵠΔⲆ()) {
            e |= 4;
          }
          if (Lx.ΔⵠⲆᐃΔⲆΔ()) {
            e |= 8;
          }
          if (this.ΔΔⵠⵠⵠⲆΔ != e) {
            Ix.ⲆⵠΔⲆᐃⲆⲆΔΔ(e);
          }
          this.ΔΔⵠⵠⵠⲆΔ = e;
        }
      }
    };
    this.ᐃⵠⲆᐃ = {
      c: 1,
      ⲆⲆⲆΔ: 1,
      ⲆΔΔ: 1,
      ΔⲆᐃ: 1,
      ᐃΔⲆ: 1,
      ⲆΔⵠᐃⵠⲆᐃ: 1,
      ⵠΔᐃᐃᐃⵠΔ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(f, 0, 1, 0, 3, 3),
      ᐃᐃⵠΔᐃⵠᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(Xg, 0, 1, 0, 2, 2),
      ΔⲆᐃΔᐃΔΔ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 1, 0, 3, 3),
      ⲆⲆⲆᐃⵠᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 1, 0, 3, 3),
      ⲆⵠΔᐃΔᐃⵠ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 1, 0, 3, 3),
      ⲆΔΔⲆΔᐃᐃ: new ⵠᐃΔᐃ.ΔΔⲆⵠ(true, 0, 1, 0, 3, 3),
      ⵠⲆΔⲆⵠ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, 0, 0, 1),
      ᐃⵠᐃⲆⲆ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, 0, 0, 1),
      ⲆⲆΔᐃᐃᐃᐃ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, 0, 0, 1),
      ΔΔΔΔⵠⲆⵠ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, 0, 0, 1),
      ⵠᐃⲆᐃΔΔⵠ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, 0, 0, 1),
      ⲆⲆΔⲆΔ: new ⵠᐃΔᐃ.ΔᐃⲆΔⲆ(ⵠᐃΔᐃ.ΔΔⲆⲆᐃⵠⲆ, 0, 1, 0, 0, 1),
      ᐃᐃⵠ: function () {
        this.ⵠΔᐃᐃᐃⵠΔ.ᐃᐃⵠ();
        this.ᐃᐃⵠΔᐃⵠᐃ.ᐃᐃⵠ();
        this.ΔⲆᐃΔᐃΔΔ.ᐃᐃⵠ();
        this.ⲆⲆⲆᐃⵠᐃᐃ.ᐃᐃⵠ();
        this.ⲆⵠΔᐃΔᐃⵠ.ᐃᐃⵠ();
        this.ⲆΔΔⲆΔᐃᐃ.ᐃᐃⵠ();
        this.ⵠⲆΔⲆⵠ.ΔᐃⵠΔⲆ(this.c);
        this.ᐃⵠᐃⲆⲆ.ΔᐃⵠΔⲆ(this.ⲆⲆⲆΔ);
        this.ⲆⲆΔᐃᐃᐃᐃ.ΔᐃⵠΔⲆ(this.ⲆΔΔ);
        this.ΔΔΔΔⵠⲆⵠ.ΔᐃⵠΔⲆ(this.ΔⲆᐃ);
        this.ⵠᐃⲆᐃΔΔⵠ.ΔᐃⵠΔⲆ(this.ᐃΔⲆ);
        this.ⲆⲆΔⲆΔ.ΔᐃⵠΔⲆ(this.ⲆΔⵠᐃⵠⲆᐃ);
      }
    };
    this.ⲆⵠⲆⵠⵠΔⵠ = Bs;
    this.ⲆⲆᐃⵠΔⲆⵠ = false;
    this.ⵠΔⲆⲆⲆ = qa;
    this.ⲆⵠΔⵠΔᐃⵠ = Ja;
    this.ᐃᐃⲆΔ = {
      max: 10,
      ΔᐃᐃⲆΔᐃⲆ: 0,
      ΔΔⲆᐃⵠ: 0,
      ᐃΔΔᐃ: [],
      ⲆΔᐃⲆⵠ: [],
      ᐃΔⲆᐃⵠΔⵠ: function (a, b) {
        if (a === 1) {
          this.ΔΔⲆᐃⵠ = 6;
        }
        this.ΔᐃᐃⲆΔᐃⲆ += b;
        this.max = 10 + this.ΔᐃᐃⲆΔᐃⲆ + this.ΔΔⲆᐃⵠ;
      },
      ᐃⲆΔΔΔΔᐃ: {
        item: -1,
        ⵠΔ: null,
        ᐃⵠⵠᐃᐃⲆᐃ: 0,
        ⵠΔΔΔⵠᐃᐃ: 0,
        ⲆΔᐃᐃⲆ: -1,
        Δⵠⵠⵠᐃ: -1,
        ⵠΔⲆᐃⵠ: function (a) {
          if (!!this.ᐃⵠⵠᐃᐃⲆᐃ && (a.x !== this.ⲆΔᐃᐃⲆ || a.y !== this.Δⵠⵠⵠᐃ)) {
            this.ⵠΔΔΔⵠᐃᐃ = 1;
          }
        },
        start: function (a, b) {
          this.ⲆΔᐃᐃⲆ = b.x;
          this.Δⵠⵠⵠᐃ = b.y;
          this.item = a;
          this.ⵠΔ = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ[a].info.ⵠΔ[2];
          this.ᐃⵠⵠᐃᐃⲆᐃ = 1;
        },
        stop: function () {
          this.ᐃⵠⵠᐃᐃⲆᐃ = 0;
          this.ⵠΔΔΔⵠᐃᐃ = 0;
          this.ⲆΔᐃᐃⲆ = -1;
          this.Δⵠⵠⵠᐃ = -1;
        },
        release: function () {
          var a = -1;
          var b = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
          var c = 0;
          if (this.ᐃⵠⵠᐃᐃⲆᐃ && this.ⵠΔΔΔⵠᐃᐃ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === Ef) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Jx.ⲆⵠⵠⲆᐃᐃⲆ();
            }
          }
          this.stop();
          return c;
        },
        ⲆᐃᐃⲆ: function (a, b) {
          if (this.ᐃⵠⵠᐃᐃⲆᐃ && this.ⵠΔΔΔⵠᐃᐃ) {
            Kp(Jo, this.ⵠΔ, Math.floor(a - this.ⵠΔ.width / 2), Math.floor(b - this.ⵠΔ.height / 2));
          }
        }
      },
      ⲆⵠⵠⵠᐃᐃⲆΔΔ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ᐃΔΔᐃ[a[d][0]] == a[d][1]) {
            return Ui;
          }
        }
        return ft;
      },
      ᐃᐃΔⵠΔ: function (a) {
        for (var b = 0; b < this.ⲆΔᐃⲆⵠ.length; b++) {
          if (this.ⲆΔᐃⲆⵠ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⲆⵠⲆⵠⲆΔᐃ: function (a, b) {
        this.ᐃΔΔᐃ[a] = 0;
        this.ⲆΔᐃⲆⵠ.splice(b, 1);
        Jx.ⲆⵠⵠⲆᐃᐃⲆ();
      },
      ⲆⵠΔᐃⲆᐃᐃ: function (a, b, c) {
        ᐃᐃⵠ = kg;
        this.ᐃΔΔᐃ[a] = Math.max(0, this.ᐃΔΔᐃ[a] - b);
        if (!this.ᐃΔΔᐃ[a] && c >= 0) {
          this.ⲆⵠⲆⵠⲆΔᐃ(a, c);
        }
      }
    };
    this.ΔΔᐃᐃΔ = {
      enabled: false,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠΔⵠⲆⲆΔ: function () {
        if (Fx.mode == 1 && !Gx.ⲆⲆᐃⵠΔⲆⵠ) {
          Gx.ΔΔᐃᐃΔ.enabled = !Gx.ΔΔᐃᐃΔ.enabled;
          if (Gx.ΔΔᐃᐃΔ.enabled) {
            Jx.options.ⲆΔᐃᐃΔⲆᐃ.display = "inline-block";
          } else {
            Jx.options.ⲆΔᐃᐃΔⲆᐃ.display = "none";
          }
        }
      }
    };
    Jx.options.ⲆΔᐃᐃΔⲆᐃ.display = "none";
    this.ᐃⲆΔΔᐃ = {
      enabled: os,
      translate: {
        y: 0,
        x: 0
      },
      ᐃΔΔᐃΔ: 0,
      ΔⵠΔⵠⲆⲆΔ: function () {
        Gx.ᐃⲆΔΔᐃ.enabled = !Gx.ᐃⲆΔΔᐃ.enabled;
        if (Gx.ᐃⲆΔΔᐃ.enabled) {
          Jx.options.ᐃⵠᐃΔⲆᐃⵠ.display = "inline-block";
        } else {
          Jx.options.ᐃⵠᐃΔⲆᐃⵠ.display = "none";
        }
      },
      ᐃᐃⵠ: function () {
        if (!!this.enabled && Gx.ⲆΔᐃⵠ.id < 0 && !Jx.ⲆⲆᐃⵠ.open) {
          if (Gx.ᐃⵠⲆᐃ.ⲆΔΔ < 0.35) {
            if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[110]) {
              Ix.ⵠᐃⲆᐃⲆ(110, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(110));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[192]) {
              Ix.ⵠᐃⲆᐃⲆ(192, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(192));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[196]) {
              Ix.ⵠᐃⲆᐃⲆ(196, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(196));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[189]) {
              Ix.ⵠᐃⲆᐃⲆ(189, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(189));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[207]) {
              Ix.ⵠᐃⲆᐃⲆ(207, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(207));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[205]) {
              Ix.ⵠᐃⲆᐃⲆ(205, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(205));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[209]) {
              Ix.ⵠᐃⲆᐃⲆ(209, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(209));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[143]) {
              Ix.ⵠᐃⲆᐃⲆ(143, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(143));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[117]) {
              Ix.ⵠᐃⲆᐃⲆ(117, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(117));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[138]) {
              Ix.ⵠᐃⲆᐃⲆ(138, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(138));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[133]) {
              Ix.ⵠᐃⲆᐃⲆ(133, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(133));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[145]) {
              Ix.ⵠᐃⲆᐃⲆ(145, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(145));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[136]) {
              Ix.ⵠᐃⲆᐃⲆ(136, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(136));
            } else if (Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[197]) {
              Ix.ⵠᐃⲆᐃⲆ(197, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(197));
            }
          } else if (Gx.ᐃⵠⲆᐃ.ΔⲆᐃ < 0.35 && Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[127]) {
            Ix.ⵠᐃⲆᐃⲆ(127, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(127));
          }
        }
      }
    };
    Jx.options.ᐃⵠᐃΔⲆᐃⵠ.display = "none";
    this.ⲆΔᐃⵠ = {
      id: -1,
      ⵠⵠⲆᐃ: -1,
      timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(na, 0, 1, 0, 1, 1),
      ⲆΔᐃᐃᐃ: false,
      ᐃΔᐃⵠ: -1,
      mode: 0,
      label: [],
      ⲆⲆⵠΔⵠ: [],
      ⲆⲆⵠᐃᐃ: false,
      ᐃⲆᐃΔⲆ: false,
      ⵠᐃⲆΔⵠΔⲆ: false,
      ᐃᐃⲆⵠⵠ: false,
      ᐃᐃⲆᐃⵠⵠᐃⵠΔ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ᐃΔⲆⵠΔᐃᐃΔⵠ: function (a) {
        this.ⲆⲆⵠᐃᐃ = a;
        var b = Jx.ⲆⲆᐃⵠ;
        if (b.open) {
          b.ΔᐃΔΔⵠⲆⵠ(b.button);
        }
        this.ᐃᐃⵠ();
      },
      ᐃⲆⲆⲆΔⵠⲆⲆⵠ: function (a) {
        var b = At[a];
        this.id = a;
        this.ⲆΔᐃᐃᐃ = Xg;
        Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
        this.timeout.ΔᐃⲆᐃⲆⲆⵠ = b.time * 8;
        this.ⵠⵠⲆᐃ = b.ⵠⵠⲆᐃ;
      },
      ΔᐃⵠᐃᐃΔⲆᐃⵠ: function (a) {
        var b = At[a];
        this.id = a;
        this.ⲆΔᐃᐃᐃ = Xg;
        var c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
        if (c && c.right == 28) {
          this.timeout.ΔᐃⲆᐃⲆⲆⵠ = b.time * 3;
        } else {
          this.timeout.ΔᐃⲆᐃⲆⲆⵠ = b.time;
        }
        this.ⵠⵠⲆᐃ = b.ⵠⵠⲆᐃ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          Gx.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(e[0], e[1], Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(e[0]));
        }
        Jx.ⲆⵠⵠⲆᐃᐃⲆ();
      },
      ᐃᐃⵠ: function () {
        this.ⲆⲆⵠΔⵠ = [];
        if (Jx.ⵠᐃⵠᐃᐃ.ⲆΔᐃⵠ === 1) {
          Jx.ⵠᐃⵠᐃᐃ.display = 0;
        }
        for (var a in At) {
          var b = At[a];
          var c = f;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Gx.ᐃᐃⲆΔ.max >= 16 && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ⲆⲆⵠᐃᐃ || b.f > this.ᐃⲆᐃΔⲆ || b.ᐃΔⲆ > this.ⵠᐃⲆΔⵠΔⲆ || b.e > this.ᐃᐃⲆⵠⵠ) {
                c = ul;
                break;
              }
              var g = b.r[d];
              if (!Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[g[0]] || Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[g[0]] < g[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ⲆⲆⵠΔⵠ.push(Jx.ᐃⵠΔ[b.id]);
            }
          }
        }
        Jx.ⵠⵠⵠΔⵠᐃⲆ();
        Jx.ⲆᐃⲆⵠᐃⵠΔ();
        Jx.ⲆⵠᐃΔⲆΔΔ();
        Jx.ΔⲆⵠⲆΔᐃⵠ();
        Jx.ⵠⲆᐃΔⲆΔᐃ();
        Jx.ⲆⵠᐃᐃΔΔΔ();
        Jx.sign.ⵠⵠⲆΔᐃΔΔ();
      },
      ᐃᐃⵠΔᐃΔᐃ: function () {
        this.id = -1;
        this.ⲆΔᐃᐃᐃ = false;
        this.timeout.ⲆᐃΔ = 0;
        this.timeout.ᐃΔⲆ = false;
        this.ᐃᐃⵠ();
      }
    };
    this.ⵠⵠⲆΔΔᐃᐃ = {
      message: Sa,
      ⲆᐃᐃⲆ: yw
    };
    this.alert = {
      timeout: new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ⲆᐃᐃⲆ: xw,
      list: []
    };
    this.ᐃⵠⲆⵠᐃ = {
      ⲆⲆ: document.createElement("canvas"),
      ᐃⲆⲆᐃⲆ: [],
      ᐃᐃⵠ: true,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = Fx.ⵠⲆΔᐃ, c = 0; c < b.length; c++) {
          if (b[c].ⲆᐃᐃⲆⲆ) {
            a.push({
              id: c,
              ΔΔΔᐃ: b[c].ᐃⲆᐃⵠⲆ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ΔΔΔᐃ - a.ΔΔΔᐃ;
        });
        this.ᐃⲆⲆᐃⲆ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ᐃⲆⲆᐃⲆ.push(a[c].id);
        }
        this.ᐃᐃⵠ = true;
      },
      ΔⲆᐃᐃⵠ: function (a) {
        for (var b = Fx.ⵠⲆΔᐃ, c = 0; c < b.length; c++) {
          b[c].ᐃⲆᐃⵠⲆ = 0;
        }
        b[Gx.id].ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃΔⵠⵠΔΔⵠ(a[1]);
        this.ᐃⲆⲆᐃⲆ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ᐃⲆⲆᐃⲆ.push(a[c]);
          b[a[c]].ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃΔⵠⵠΔΔⵠ(a[c + 1]);
        }
        this.ᐃᐃⵠ = true;
      }
    };
    this.ᐃⵠⲆⵠᐃ.ⲆⲆ.width = eq * 180;
    this.ᐃⵠⲆⵠᐃ.ⲆⲆ.height = eq * 300;
    this.ᐃⵠⲆⵠᐃ.ᐃ = this.ᐃⵠⲆⵠᐃ.ⲆⲆ.getContext("2d");
    this.ⵠΔΔⵠⵠ = {
      open: Ja,
      input: document.getElementById("commandInput"),
      ΔΔⲆⵠᐃΔⲆ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ᐃΔⵠᐃⲆⵠⵠΔᐃ: function (a) {
        this.ΔΔⲆⵠᐃΔⲆ.innerHTML += a;
      },
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Mo / 2 - 300) + "px";
        this.style.top = Math.floor(Do / 2 - 250) + "px";
      },
      ΔΔΔⲆⵠⲆⵠᐃΔ: function () {
        this.ΔΔⲆⵠᐃΔⲆ.innerHTML = "";
      },
      ΔⲆⵠᐃΔ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ᐃΔᐃΔᐃ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 === 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ΔⲆⲆᐃΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ᐃΔⵠᐃⲆⵠⵠΔᐃ(f);
        this.ᐃΔⵠⵠᐃᐃᐃᐃⵠ();
      },
      ᐃΔⵠⵠᐃᐃᐃᐃⵠ: function () {
        this.ΔΔⲆⵠᐃΔⲆ.scrollTop = this.ΔΔⲆⵠᐃΔⲆ.scrollHeight;
      },
      ΔΔⵠᐃᐃΔΔ: function (b) {
        switch (b) {
          case "clean":
            this.ΔΔΔⲆⵠⲆⵠᐃΔ();
            return true;
          case "list":
            var c = "";
            const a = jg.document.createElement("div");
            for (var d = Fx.ⵠⲆΔᐃ, e = 0; e < d.length; e++) {
              var f = d[e];
              if (f.ⲆᐃᐃⲆⲆ) {
                a.innerText = f.ⲆⵠΔⵠΔ;
                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
              }
            }
            this.ΔⲆⲆᐃΔ("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.ΔⲆⲆᐃΔ("Weapons", 1, "List all weapons in the game", this.ᐃΔᐃΔᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return T;
          case "tool-list":
            this.ΔⲆⲆᐃΔ("Tools", 1, "List all tools in the game", this.ᐃΔᐃΔᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ΔⲆⲆᐃΔ("Survival Items", 1, "List all survival items in the game", this.ᐃΔᐃΔᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return fn;
          case "resource-list":
            this.ΔⲆⲆᐃΔ("Resources", 1, "List all resources in the game", this.ᐃΔᐃΔᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return T;
          case "food-list":
            this.ΔⲆⲆᐃΔ("Food", 1, "List all food in the game", this.ᐃΔᐃΔᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return true;
          case "hat-list":
            this.ΔⲆⲆᐃΔ("Hats", 1, "List all hats in the game", this.ᐃΔᐃΔᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ΔⲆⲆᐃΔ("Buildings", 1, "List all buildings in the game", this.ᐃΔᐃΔᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return $n;
          case "biome-list":
            this.ΔⲆⲆᐃΔ("Biomes list", 1, "List all available biomes in the game", this.ᐃΔᐃΔᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ΔⲆⲆᐃΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            d = Fx.Ⲇᐃⵠ[0];
            e = 0;
            for (; e < d.length; e++) {
              var g = d[e];
              if (g.ΔᐃᐃⲆ === Gx.id) {
                this.ΔⲆⲆᐃΔ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ΔⲆⲆᐃΔ("help-admin", 1, "List all available commands for admin only", this.ᐃΔᐃΔᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return Qe;
          case "help":
            this.ΔⲆⲆᐃΔ("help", 1, "List all available commands", this.ᐃΔᐃΔᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ᐃⲆᐃⵠᐃⲆᐃΔᐃ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⲆⵠΔΔΔΔⵠ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ΔΔⵠᐃᐃΔΔ(a)) {
            Ix.ΔᐃΔᐃᐃᐃⵠⲆⵠ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ΔⵠΔΔⲆ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Mo / 2 - 150) + "px";
        this.style.top = Math.floor(Do / 2 + 80) + "px";
      },
      ΔⲆⵠᐃΔ: function () {
        this.open = qa;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Gx.alert.text) {
              Gx.alert.list.push(b);
            } else {
              Gx.alert.text = b;
            }
            Jx.ⵠᐃⲆⵠⵠᐃᐃ = 0;
          } else {
            Jx.ⵠᐃⲆⵠⵠᐃᐃ = 1;
          }
        }
      },
      ΔΔⵠᐃᐃΔΔ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return true;
        }
        return z;
      },
      ⵠⲆᐃᐃΔ: function () {
        if (this.open) {
          this.open = sn;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ΔΔⵠᐃᐃΔΔ(a)) {
              Ix.ⲆΔᐃΔⵠΔⲆᐃⲆ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⲆⲆΔⲆΔᐃΔ = {
      ⲆΔΔⵠⲆ: [],
      ᐃᐃⵠ: function (a) {
        a.y += Ox * 80 * a.ΔΔΔᐃ;
        a.x += Ox * 80 * a.c;
        a.ᐃⵠᐃⲆⲆ -= Ox / 6;
        if (a.ᐃⵠᐃⲆⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + Ox * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Ox * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(xs.ᐃⵠΔⲆⲆΔⲆ * (Mo / 1366), xs.ᐃⵠΔⲆⲆΔⲆ + 10) * Math.max(Math.min(Fx.ΔΔⲆΔᐃ + 1000, 3000) / 3000, 0));
        if (this.ⲆΔΔⵠⲆ.length < c) {
          var d = Math.floor(Math.random() * xs.ᐃⵠΔⵠⲆⵠΔ);
          var e = -Gx.ᐃⵠⲆ.x + Math.floor(Math.random() * Gx.ᐃⵠⲆ.w);
          var f = -Gx.ᐃⵠⲆ.y + Math.floor(Math.random() * Gx.ᐃⵠⲆ.ⲆΔΔ);
          var g = Math.random(Math.PI);
          this.ⲆΔΔⵠⲆ.push(new Tw(d, e, f, g));
        }
      }
    };
    this.ⲆΔᐃⲆⵠᐃᐃ = 0;
    this.ⵠⲆⲆᐃΔ = 0;
    this.ⵠΔⵠⲆΔ = {
      ⲆΔΔⵠⲆ: [],
      ΔⵠⲆⲆⵠ: 0,
      ΔⵠⵠΔⲆ: 0,
      ᐃᐃⵠ: function (a) {
        a.y += Ox * (200 + this.ΔⵠⵠΔⲆ * 800) * a.ΔΔΔᐃ;
        a.x += Ox * (200 + this.ΔⵠⵠΔⲆ * 800) * a.c;
        a.ᐃⵠᐃⲆⲆ -= Ox / 6;
        if (a.ᐃⵠᐃⲆⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + Ox * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Ox * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ΔⵠⵠΔⲆ + 0.1) * xs.ⲆⲆⲆⲆᐃᐃΔ * (Mo / 1366), (this.ΔⵠⵠΔⲆ + 0.1) * xs.ⲆⲆⲆⲆᐃᐃΔ + 10) * Math.max(Math.min(Fx.ᐃⲆⲆⵠⵠ + 1000, 3000) / 3000, 0));
        if (this.ⲆΔΔⵠⲆ.length < c) {
          var d = Math.floor(Math.random() * xs.ᐃⵠΔⵠⲆⵠΔ);
          var e = -Gx.ᐃⵠⲆ.x + Math.floor(Math.random() * Gx.ᐃⵠⲆ.w);
          var f = -Gx.ᐃⵠⲆ.y + Math.floor(Math.random() * Gx.ᐃⵠⲆ.ⲆΔΔ);
          var g = Math.random(Math.PI);
          if (Gx.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ !== 0) {
            e -= Gx.ᐃⵠⲆ.w / 2;
          }
          this.ⲆΔΔⵠⲆ.push(new Tw(d, e, f, g));
        }
      }
    };
    this.ⵠⲆᐃⵠΔ = {
      ⲆΔΔⵠⲆ: [],
      ΔⵠⲆⲆⵠ: 0,
      ΔⵠⵠΔⲆ: 0,
      ᐃᐃⵠ: function (a) {
        if (Lx.ΔᐃⲆᐃⵠΔⲆ()) {
          a.y += Ox * a.ΔⲆⵠⵠΔ * (5.5 + this.ΔⵠⵠΔⲆ * 10);
        } else {
          a.y += Ox * a.ΔⲆⵠⵠΔ * (5 + this.ΔⵠⵠΔⲆ * 10);
        }
        a.ᐃⵠᐃⲆⲆ -= Ox / 2;
        if (Lx.ΔᐃΔⵠᐃΔᐃ()) {
          a.x += Ox * (100 + this.ΔⵠⵠΔⲆ * 400);
        } else if (Lx.ᐃΔΔΔΔⲆᐃ()) {
          a.x -= Ox * (130 - this.ΔⵠⵠΔⲆ * 400);
        } else {
          a.x -= Ox * (30 - this.ΔⵠⵠΔⲆ * 400);
        }
        if (a.ᐃⵠᐃⲆⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + Ox * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Ox * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔⵠⵠΔⲆ * 1.5 + 0.5) * xs.ⲆᐃⲆᐃⵠⲆᐃ * (Mo / 1366), (this.ΔⵠⵠΔⲆ * 1.5 + 0.5) * xs.ⲆᐃⲆᐃⵠⲆᐃ + 10) * Math.max(Math.min(Fx.ⵠⲆⵠΔⵠ + 1000, 3000) / 3000, 0));
        if (this.ⲆΔΔⵠⲆ.length < b) {
          var c = Math.floor(Math.random() * xs.ᐃⵠᐃⵠΔⵠⲆ);
          var d = -Gx.ᐃⵠⲆ.x + Math.floor(Math.random() * Gx.ᐃⵠⲆ.w);
          var e = -Gx.ᐃⵠⲆ.y + Math.floor(Math.random() * 400 * eq - eq * 200);
          this.ⲆΔΔⵠⲆ.push(new Tw(c, d, e, 0));
        }
      }
    };
    this.ΔⵠᐃΔ = [];
    for (var d = 0; d < 4; d++) {
      this.ΔⵠᐃΔ.push(new c());
    }
  }
  function _w() {
    Math.random();
    return "e";
  }
  function ax() {
    Math.random();
    return "r";
  }
  function bx() {
    Math.random();
    return "p";
  }
  function Yw() {
    Math.random();
    return "o";
  }
  function bx() {
    Math.random();
    return "p";
  }
  function cx() {
    Math.random();
    return "i";
  }
  function dx() {
    Math.random();
    return "a";
  }
  function dx() {
    Math.random();
    return "a";
  }
  function ex() {
    Math.random();
    return "g";
  }
  function fx() {
    Math.random();
    return "d";
  }
  function gx() {
    Math.random();
    return "s";
  }
  function hx() {
    Math.random();
    return "C";
  }
  function Xw() {
    Math.random();
    return "t";
  }
  function ix(b, c, d, e, f) {
    const g = ((b + 34272) * 22695477 + 1) % 4294967296;
    const a = ~(c & 16594) & (c | 16594);
    const i = ~(f & 24796) & (f | 24796);
    const j = function (b, c, d, e) {
      const f = (2147483587 + (b + 64104) * 2147483629) % 2147483647;
      const g = ~(c & 32623) & c | ~(c & 32623) & 32623;
      const a = (d | 57992) & ~(d & 57992);
      const i = (1 + (15660 + e) * 22695477) % 4294967296;
      const j = wx(f, g);
      Fb(a, i, f, g, a);
      return ~(j & 49023) & 49023 | ~(j & 49023) & j;
    }(g, a, (2531011 + (d + 56798) * 214013) % 4294967296, (e | 19597) & ~(e & 19597));
    ns(i, g, a);
    return ~(j & 55931) & (j | 55931);
  }
  ⲆⲆⵠᐃᐃΔⲆΔⵠ = 1;
  setTimeout(function b() {
    var c = Zw() + dx() + Xw() + cx();
    Math.random();
    var d = "W" + _w() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + Yw() + function () {
      Math.random();
      return "c";
    }() + function () {
      Math.random();
      return "k";
    }() + _w() + Xw();
    if (jg[d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var e = gx() + _w() + Zw() + fx();
    var f = bx() + ax() + Yw() + Xw() + Yw() + Xw() + function () {
      Math.random();
      return "y";
    }() + bx() + _w();
    if (jg[d][f][e].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    d = fx() + ax() + dx() + function () {
      Math.random();
      return "w";
    }() + function () {
      Math.random();
      return "I";
    }() + function () {
      Math.random();
      return "m";
    }() + dx() + ex() + _w();
    e = hx() + dx() + Zw() + function () {
      Math.random();
      return "v";
    }() + dx() + gx() + function () {
      Math.random();
      return "R";
    }() + _w() + Zw() + fx() + _w() + ax() + cx() + Zw() + ex() + hx() + Yw() + Zw() + Xw() + _w() + function () {
      Math.random();
      return "x";
    }() + Xw() + function () {
      Math.random();
      return "2";
    }() + function () {
      Math.random();
      return "D";
    }();
    if (jg[e][f][d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(b, 100000);
  }, 100000);
  function jx() {
    ⵠᐃΔᐃ.ⲆⲆᐃᐃⵠᐃᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function kx() {
    ⵠᐃΔᐃ.ⲆⲆᐃᐃⵠᐃᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Gx.ⵠⵠⲆ + "%20days%20with%20" + Gx.ᐃΔⲆΔⵠⵠⵠ.ᐃⲆᐃⵠⲆ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function lx(d, j) {
    this.ⲆⲆ = d;
    this.ᐃ = j;
    if (jg.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃⵠⵠⵠᐃΔⲆ = "default";
      this.ⵠᐃᐃΔⲆⵠⲆ = "pointer";
    } else {
      this.ᐃⵠⵠⵠᐃΔⲆ = "url('img/cursor0.png'), default";
      this.ⵠᐃᐃΔⲆⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    var C = this;
    function e(c, d, e, f, i) {
      var a = this;
      for (var j = d + 9, m = 0, n = f, o = d; j > o; o++) {
        C.buttons[o].info.callback = q;
        C.buttons[o].info.ΔⲆⲆᐃⲆⲆⵠΔⲆ = c;
      }
      function p() {
        var a = c[n];
        Ex.ΔΔᐃⵠΔᐃⲆ = _f(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
        if (Ij !== a.level) {
          Ex.ⲆΔΔᐃΔⵠⲆ = _f("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, zn, 10, 8);
        } else {
          Ex.ⲆΔΔᐃΔⵠⲆ = _f("by " + a.ΔΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, fh, 10, 8);
        }
      }
      function q() {
        if (this.ᐃⵠΔⵠᐃⵠΔ !== n && this.ᐃⵠΔⵠᐃⵠΔ !== -1) {
          if (this.ⵠⲆΔΔⵠΔΔ > 0) {
            if (ⵠᐃⵠⵠᐃⲆⵠ === d) {
              P(y, fa, "none");
            } else {
              P(k, fa, "none");
            }
          } else if (d === ⵠᐃⵠⵠᐃⲆⵠ) {
            P(y, ha, "inline-block");
          } else {
            P(k, ha, "inline-block");
          }
          n = this.ᐃⵠΔⵠᐃⵠΔ;
          e(this.ᐃⵠΔⵠᐃⵠΔ);
          p();
        }
      }
      this.ᐃᐃΔⲆᐃ = function () {
        for (var a = d, b = m * 3; a < j && b < c.length; a++, b++) {
          if (ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ !== c[b].ⲆⲆΔ || i[b] !== 0) {
            C.buttons[a].info.ᐃⵠΔⵠᐃⵠΔ = b;
            for (var e = 0; e < 3; e++) {
              C.buttons[a].info.ⵠΔ[e] = ⲆⵠΔᐃⲆ[c[b].ⲆⲆΔ][e];
              C.buttons[a].info.active = ha;
              C.buttons[a].info.ⵠⲆΔΔⵠΔΔ = i[b];
            }
          } else {
            C.buttons[a].info.ᐃⵠΔⵠᐃⵠΔ = -1;
            C.buttons[a].info.active = fa;
          }
        }
        for (; j > a; a++) {
          C.buttons[a].info.ᐃⵠΔⵠᐃⵠΔ = -1;
          C.buttons[a].info.active = fa;
        }
        p();
      };
      C.buttons[j].info.callback = function () {
        if (m > 0) {
          m--;
        }
        a.ᐃᐃΔⲆᐃ();
      };
      C.buttons[j + 1].info.callback = function () {
        if (c.length > m * 3 + 9) {
          m++;
        }
        a.ᐃᐃΔⲆᐃ();
      };
    }
    function n() {
      var b = Number(ΔᐃⲆΔ.get("starve_crate"));
      var c = Number(ΔᐃⲆΔ.get("starve_dead"));
      var d = Number(ΔᐃⲆΔ.get("starve_book"));
      var e = Number(ΔᐃⲆΔ.get("starve_bag"));
      var f = Number(ΔᐃⲆΔ.get("starve_skin"));
      var a = Number(ΔᐃⲆΔ.get("starve_accessory"));
      C.ⵠⲆΔΔ = f || 0;
      C.ⲆΔⵠΔΔ = d || 0;
      C.ⵠⵠΔⲆⲆ = b || 1;
      C.ᐃᐃⲆΔⵠ = a || 0;
      C.ΔΔⲆᐃⵠ = e || 0;
      C.Δᐃⵠⵠᐃ = c || 0;
    }
    function a() {
      for (var a = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, b = 0; b < a.length; b++) {
        if (ⵠⲆⲆ.ⲆⲆⵠΔΔ === a[b].ⲆⲆΔ) {
          C.unlock.ⵠⲆΔΔ[b] = 1;
        } else {
          C.unlock.ⵠⲆΔΔ[b] = 0;
        }
      }
      a = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (ⵠⲆⲆ.ⲆⲆⵠΔΔ === a[b].ⲆⲆΔ) {
          C.unlock.ᐃᐃⲆΔⵠ[b] = 1;
        } else {
          C.unlock.ᐃᐃⲆΔⵠ[b] = 0;
        }
      }
      a = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆⲆΔ === ⵠⲆⲆ.ⲆⲆⵠΔΔ) {
          C.unlock.ΔΔⲆᐃⵠ[b] = 1;
        } else {
          C.unlock.ΔΔⲆᐃⵠ[b] = 0;
        }
      }
      a = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ⲆⲆΔ === ⵠⲆⲆ.ⲆⲆⵠΔΔ) {
          C.unlock.ⲆΔⵠΔΔ[b] = 1;
        } else {
          C.unlock.ⲆΔⵠΔΔ[b] = 0;
        }
      }
      a = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆⲆΔ === ⵠⲆⲆ.ⲆⲆⵠΔΔ) {
          C.unlock.ⵠⵠΔⲆⲆ[b] = 1;
          C.unlock.Δᐃⵠⵠᐃ[b] = 1;
        } else {
          C.unlock.ⵠⵠΔⲆⲆ[b] = 0;
          C.unlock.Δᐃⵠⵠᐃ[b] = 0;
        }
      }
    }
    this.waiting = ul;
    this.ⵠΔⲆΔΔᐃΔ = 0;
    this.ⲆⵠᐃΔᐃⵠᐃ = -1;
    this.ⲆⵠᐃⲆΔⵠᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ⵠΔ: Ⲇⵠ[301],
      ⲆᐃᐃⲆ: function () {
        this.angle += Ox * 2;
        j.save();
        j.translate(this.translate.x + this.ⵠΔ.width / 2, this.translate.y + this.ⵠΔ.height / 2);
        j.rotate(this.angle);
        Kp(j, this.ⵠΔ, -this.ⵠΔ.width / 2, -this.ⵠΔ.height / 2);
        j.restore();
      }
    };
    this.ᐃⲆⲆᐃⲆΔᐃ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆⵠⵠΔⲆ = 0;
    this.ᐃⲆⲆⵠⵠᐃᐃ = -1;
    this.ⲆⲆᐃΔΔᐃⵠ = Gm;
    this.ΔᐃⵠⵠⲆⵠⵠ = "";
    this.ⵠΔΔⲆᐃΔⵠ = "";
    this.ᐃΔⲆΔΔⵠⲆ = undefined;
    this.ΔΔΔⵠⲆ = 0;
    this.ΔΔᐃⲆⵠᐃⲆ = -1;
    this.ᐃⲆⲆΔⲆᐃⲆ = ij;
    this.ⵠⲆᐃⲆⵠⵠⵠ = 0;
    this.ΔⵠⲆᐃΔΔⲆ = 0;
    this.ᐃⲆΔⵠⵠⵠⲆ = 0;
    this.ᐃᐃⲆᐃᐃ = 0;
    this.ΔⲆᐃΔⵠΔΔ = 0;
    this.time = 0;
    this.ᐃⲆᐃⵠⲆ = 0;
    this.ⵠⵠⲆΔᐃⵠΔ = 0;
    this.ⲆⵠⵠⲆⲆⲆⵠ = 0;
    this.ⵠᐃᐃΔⵠⲆⲆ = 0;
    this.ΔΔᐃᐃⲆᐃⵠ = 0;
    this.ᐃⲆΔᐃΔⵠΔ = [];
    this.ᐃⲆⲆΔⵠ = -1;
    this.ⲆⲆⲆᐃΔᐃᐃ = -1;
    this.ΔⲆΔΔᐃⵠΔ = -1;
    this.ΔⲆΔⲆΔΔΔ = wl;
    this.ⵠⲆΔⵠⵠΔΔ = ur;
    this.ⵠΔᐃⵠⵠᐃΔ = -1;
    this.ⲆᐃⵠⵠⵠΔᐃ = -1;
    this.ⵠΔΔⵠᐃⵠᐃ = -1;
    this.ⵠⲆᐃΔᐃⵠᐃ = -1;
    this.ΔΔΔⵠᐃΔᐃ = undefined;
    this.ΔⵠⲆⲆΔⲆⵠ = undefined;
    this.ⵠᐃΔⲆᐃⵠᐃ = undefined;
    this.ΔΔᐃⵠΔᐃⲆ = ur;
    this.ⲆΔΔᐃΔⵠⲆ = undefined;
    this.ⵠΔᐃⲆⲆⵠⲆ = hs;
    this.ⵠⵠᐃⵠⵠᐃⵠ = $i;
    this.ⵠⵠⲆⵠⲆⵠΔ = Es;
    this.ΔᐃⵠΔΔⵠⲆ = undefined;
    this.ⲆᐃΔⲆΔΔΔ = 3;
    this.Δᐃⵠⵠ = 0;
    this.ⵠⵠΔⲆⲆⲆΔⵠⲆ = z;
    this.ΔⲆᐃᐃΔ = ΔᐃⲆΔ.get("starve_quality") ? ΔᐃⲆΔ.get("starve_quality") : "high";
    if (this.ΔⲆᐃᐃΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⲆᐃᐃΔ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⲆᐃᐃΔ = 0;
    }
    this.ⵠⵠⵠⵠᐃⵠⲆⵠⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ΔᐃⲆΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Jx.ᐃΔⲆᐃⵠⵠⲆ();
      Ex.ΔⲆᐃᐃΔ = 1;
    };
    this.ΔⵠΔᐃΔⲆΔΔᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ΔᐃⲆΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (lr / mr);
      Jx.ᐃΔⲆᐃⵠⵠⲆ();
      Ex.ΔⲆᐃᐃΔ = 0;
    };
    if (ΔᐃⲆΔ.get("starve_mapping") === undefined && Lr === "FR") {
      Lx.ⵠΔⵠⵠᐃΔⲆ();
      this.mapping = "azerty";
    } else {
      this.mapping = ΔᐃⲆΔ.get("starve_mapping") ? ΔᐃⲆΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Lx.ⵠΔⵠⵠᐃΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⵠΔⵠⵠᐃΔⲆ = function () {
      Lx.ⵠΔⵠⵠᐃΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ΔᐃⲆΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠⲆΔⵠⵠΔⲆ = function () {
      Lx.ⵠⲆΔⵠⵠΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ΔᐃⲆΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ᐃᐃΔΔⵠᐃⵠ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ⵠⲆΔΔ = [];
    this.unlock.ΔΔⲆᐃⵠ = [];
    this.unlock.ⲆΔⵠΔΔ = [];
    this.unlock.ⵠⵠΔⲆⲆ = [];
    this.unlock.Δᐃⵠⵠᐃ = [];
    this.unlock.ᐃᐃⲆΔⵠ = [];
    this.ᐃⲆⵠᐃⵠᐃΔ = 0;
    this.ΔΔΔΔⲆⵠᐃ = a;
    a();
    this.ⵠⲆⲆⵠΔ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var i;
    var o = 0;
    function r() {
      C.ᐃᐃⵠ();
      if (++o == 30) {
        C.ΔⲆᐃⵠⲆᐃⵠ();
        C.ⵠΔⲆΔΔᐃΔ = true;
        C.ᐃᐃⵠ();
        return;
      }
      jg.setTimeout(r, 33);
    }
    this.ΔⲆⵠᐃΔ = function (a) {
      i = a;
      C.ⲆᐃⲆⲆⲆΔⵠ();
      C.ⵠΔⲆΔΔᐃΔ = 0;
      g = -1;
      t();
    };
    var g = -1;
    function t() {
      C.ᐃᐃⵠ();
      if (++g == 30) {
        ΔᐃⲆΔ.set("starve_nickname", C.ⲆⵠΔⵠΔ.input.value, {
          expires: 30
        });
        C.ⲆⵠΔⵠΔ.style.display = "none";
        C.ᐃⲆΔⲆⵠ.style.display = "none";
        C.ᐃⲆⲆᐃⲆΔᐃ.style.display = "none";
        C.ᐃᐃΔΔⵠᐃⵠ.style.display = "none";
        C.ⵠⲆⲆⵠΔ.style.display = "none";
        C.stop();
        i();
        return;
      }
      jg.setTimeout(t, 33);
    }
    this.ΔⲆΔⵠⵠ = false;
    this.stop = function () {
      this.ΔⲆΔⵠⵠ = Yi;
    };
    this.ⵠⲆᐃᐃΔ = function () {
      Sx();
      document.getElementById("game_body").style.backgroundColor = xs.ⵠᐃΔⲆΔ[Dx.time];
      C.ⲆⵠΔⵠΔ.style.display = "inline-block";
      C.ᐃⲆΔⲆⵠ.style.display = "inline-block";
      C.ᐃⲆⲆᐃⲆΔᐃ.style.display = "inline-block";
      C.ᐃᐃΔΔⵠᐃⵠ.style.display = "inline-block";
      C.ⵠⲆⲆⵠΔ.style.display = "inline-block";
      C.waiting = ld;
      C.ΔⲆΔⵠⵠ = Rr;
      g = -1;
      o = 0;
      r();
    };
    this.ΔΔΔⵠΔᐃΔ = function (a, b) {
      b = b < 0 ? -b : b;
      if (ca === (a.position & ca)) {
        if (Z === (a.position & Z)) {
          a.translate.x = Eo + a.translate.ⲆΔᐃᐃⲆ - b;
        } else if (_ === (a.position & _)) {
          a.translate.x = Eo + a.translate.ⲆΔᐃᐃⲆ + b;
        } else {
          a.translate.x = Eo + a.translate.ⲆΔᐃᐃⲆ;
        }
      } else if ((a.position & Z) === Z) {
        a.translate.x = a.translate.ⲆΔᐃᐃⲆ - b;
      } else if ((a.position & _) === _) {
        a.translate.x = Mo - a.translate.ⲆΔᐃᐃⲆ + b;
      } else {
        a.translate.x = a.translate.ⲆΔᐃᐃⲆ;
      }
      if ((a.position & da) === da) {
        if (aa === (a.position & aa)) {
          a.translate.y = _o + a.translate.Δⵠⵠⵠᐃ - b;
        } else if ((a.position & ba) === ba) {
          a.translate.y = _o + a.translate.Δⵠⵠⵠᐃ + b;
        } else {
          a.translate.y = _o + a.translate.Δⵠⵠⵠᐃ;
        }
      } else if (aa === (a.position & aa)) {
        a.translate.y = a.translate.Δⵠⵠⵠᐃ - b;
      } else if (ba === (a.position & ba)) {
        a.translate.y = Do + a.translate.Δⵠⵠⵠᐃ + b;
      } else {
        a.translate.y = a.translate.Δⵠⵠⵠᐃ;
      }
      if (a.style !== Gm) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃᐃⵠ = function () {
      var a = 0;
      if (o != 30 || g != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = 0; this.Ⲇⵠⵠⵠ.length > b; b++) {
        this.ΔΔΔⵠΔᐃΔ(this.Ⲇⵠⵠⵠ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ΔΔΔⵠΔᐃΔ(this.buttons[b].info, a);
      }
      for (b = 0; this.ΔΔⵠⲆΔ.length > b; b++) {
        this.ΔΔΔⵠΔᐃΔ(this.ΔΔⵠⲆΔ[b], a);
      }
      this.ⲆⵠᐃⲆΔⵠᐃ.translate.x = (Mo - this.ⲆⵠᐃⲆΔⵠᐃ.ⵠΔ.width) / 2;
      this.ⲆⵠᐃⲆΔⵠᐃ.translate.y = 0;
      this.ᐃⲆⲆᐃⲆΔᐃ.translate.x = Mo - 450;
      this.ᐃⲆⲆᐃⲆΔᐃ.translate.y = Do - 40;
      this.ᐃᐃΔΔⵠᐃⵠ.translate.x = Mo - 340;
      this.ᐃᐃΔΔⵠᐃⵠ.translate.y = Do - 25;
      this.ⵠⲆⲆⵠΔ.translate.x = Mo - 320;
      this.ⵠⲆⲆⵠΔ.translate.y = 80;
      if (o != 30 || g != -1) {
        var c = 0;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + 1) - 48);
        }
        this.ⲆⵠᐃⲆΔⵠᐃ.translate.y -= c > 0 ? c : -c;
        this.ᐃⲆⲆᐃⲆΔᐃ.translate.y -= c < 0 ? c : -c;
        this.ᐃᐃΔΔⵠᐃⵠ.translate.y -= c < 0 ? c : -c;
      }
      this.ᐃⲆⲆᐃⲆΔᐃ.ᐃᐃⵠ();
      this.ᐃᐃΔΔⵠᐃⵠ.ᐃᐃⵠ();
      this.ⵠⲆⲆⵠΔ.ᐃᐃⵠ();
    };
    this.ⵠᐃᐃᐃΔΔⵠ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; f < b.length; f++) {
        var g = b[f][0];
        var h = Math.PI * b[f][1] / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ᐃⵠⵠⲆⲆΔᐃᐃΔ = function () {
      this.ΔᐃⵠⵠⲆⵠⵠ = document.getElementById("account_nickname_input").value;
      if (this.ΔᐃⵠⵠⲆⵠⵠ !== this.ⵠΔΔⲆᐃΔⵠ) {
        this.ⵠΔΔⲆᐃΔⵠ = this.ΔᐃⵠⵠⲆⵠⵠ;
        this.ᐃΔⲆΔΔⵠⲆ = _f(this.ΔᐃⵠⵠⲆⵠⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⲆᐃᐃⲆ = function () {
      Cp();
      Ex.ⵠⲆᐃⲆⵠⵠⵠ = ⵠᐃΔᐃ.ⲆᐃⲆΔⵠ(Ex.ⵠⲆᐃⲆⵠⵠⵠ, Ex.ΔⵠⲆᐃΔΔⲆ, 0.03);
      this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.x = this.Ⲇⵠⵠⵠ[0].translate.x + -72 + Ex.ⵠⲆᐃⲆⵠⵠⵠ * 165;
      this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.ⲆΔᐃᐃⲆ = this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.x;
      this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.y = this.Ⲇⵠⵠⵠ[0].translate.y + 30;
      this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.Δⵠⵠⵠᐃ = this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ].translate.y;
      for (var d = 2; this.Ⲇⵠⵠⵠ.length > d; d++) {
        if (ha === this.Ⲇⵠⵠⵠ[d].active) {
          this.Ⲇⵠⵠⵠ[d].ⲆᐃᐃⲆ(j);
        }
      }
      var n;
      if ((n = this.ᐃⲆⲆΔⵠ - Date.now()) > 0) {
        var t = Math.floor(n / 60000);
        var y = Math.floor(t / 60);
        if ((t %= 60) !== this.ΔⲆΔΔᐃⵠΔ) {
          this.ΔⲆΔΔᐃⵠΔ = t;
          t = t < 10 ? "0" + t : "" + t;
          C.ΔⲆΔⲆΔΔΔ = _f(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆⲆⲆᐃΔᐃᐃ !== y) {
          this.ⲆⲆⲆᐃΔᐃᐃ = y;
          y = y < 10 ? "0" + y : "" + y;
          C.ⵠⲆΔⵠⵠΔΔ = _f(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.Ⲇⵠⵠⵠ[ᐃⲆΔᐃⲆⵠᐃ]).ⲆᐃᐃⲆ(j);
        var V = this.ⵠⲆΔⵠⵠΔΔ;
        Kp(j, V, W.translate.x - V.width / 4 + 182, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
        V = this.ΔⲆΔⲆΔΔΔ;
        Kp(j, V, W.translate.x - V.width / 4 + 251, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
      }
      if ((n = this.ⵠΔᐃⵠⵠᐃΔ - Date.now()) > 0) {
        t = Math.floor(n / 60000);
        y = Math.floor(t / 60);
        var W;
        var X = Math.floor(y / 24);
        y %= 24;
        if ((t %= 60) !== this.ⵠⲆᐃΔᐃⵠᐃ) {
          this.ⵠⲆᐃΔᐃⵠᐃ = t;
          t = t < 10 ? "0" + t : "" + t;
          C.ΔΔΔⵠᐃΔᐃ = _f(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠΔΔⵠᐃⵠᐃ !== y) {
          this.ⵠΔΔⵠᐃⵠᐃ = y;
          y = y < 10 ? "0" + y : "" + y;
          C.ΔⵠⲆⲆΔⲆⵠ = _f(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (X !== this.ⲆᐃⵠⵠⵠΔᐃ) {
          this.ⲆᐃⵠⵠⵠΔᐃ = X;
          X = X < 10 ? "0" + X : "" + X;
          C.ⵠᐃΔⲆᐃⵠᐃ = _f(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.Ⲇⵠⵠⵠ[ᐃᐃⵠᐃᐃⲆᐃ]).ⲆᐃᐃⲆ(j);
        V = this.ⵠᐃΔⲆᐃⵠᐃ;
        Kp(j, V, W.translate.x - V.width / 4 + 113, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
        V = this.ΔⵠⲆⲆΔⲆⵠ;
        Kp(j, V, W.translate.x - V.width / 4 + 182, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
        V = this.ΔΔΔⵠᐃΔᐃ;
        Kp(j, V, W.translate.x - V.width / 4 + 251, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
      }
      if ((this.ᐃΔΔⵠⲆ & F) === F) {
        this.buttons[ⲆᐃΔΔⲆΔᐃ].info.state = Sf;
      } else if ((this.ᐃΔΔⵠⲆ & f) === f) {
        this.buttons[ⵠⵠⵠⲆΔΔⲆ].info.state = Sf;
      } else if ((this.ᐃΔΔⵠⲆ & c) === c) {
        this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = Sf;
      } else if (v === (this.ᐃΔΔⵠⲆ & v)) {
        this.buttons[ΔᐃΔⵠΔⵠⲆ].info.state = Sf;
      } else if ((this.ᐃΔΔⵠⲆ & G) === G) {
        this.buttons[ⲆⲆⵠⲆⵠᐃⲆ].info.state = Sf;
      } else if ((this.ᐃΔΔⵠⲆ & m) === m) {
        this.buttons[ⲆⲆⵠⵠΔᐃᐃ].info.state = Sf;
      } else if (p === (this.ᐃΔΔⵠⲆ & p) || A === (this.ᐃΔΔⵠⲆ & A) || x === (this.ᐃΔΔⵠⲆ & x) || (this.ᐃΔΔⵠⲆ & H) === H || (this.ᐃΔΔⵠⲆ & B) === B || (this.ᐃΔΔⵠⲆ & D) === D || (this.ᐃΔΔⵠⲆ & I) === I) {
        this.buttons[ᐃⵠᐃⲆᐃᐃⲆ].info.state = Sf;
      } else if (E === (this.ᐃΔΔⵠⲆ & E) || (this.ᐃΔΔⵠⲆ & K) === K || J === (this.ᐃΔΔⵠⲆ & J) || (this.ᐃΔΔⵠⲆ & M) === M || L === (this.ᐃΔΔⵠⲆ & L) || (this.ᐃΔΔⵠⲆ & Q) === Q) {
        this.buttons[ⲆΔⵠΔΔΔᐃ].info.state = Sf;
      } else if (O === (this.ᐃΔΔⵠⲆ & O) || (this.ᐃΔΔⵠⲆ & R) === R || S === (this.ᐃΔΔⵠⲆ & S)) {
        this.buttons[ⵠΔᐃⵠᐃⲆⵠ].info.state = Sf;
      } else if (T === (this.ᐃΔΔⵠⲆ & T)) {
        this.buttons[ΔᐃΔⵠΔⵠⲆ].info.state = Sf;
      }
      if ((this.ᐃΔΔⵠⲆ & f) === f) {
        if (this.Δⵠᐃᐃᐃⵠⵠ === this.ⵠⵠᐃⵠⵠᐃⵠ) {
          this.ⵠΔᐃⲆⲆⵠⲆ = this.ⲆΔⲆⲆᐃΔΔ;
          this.buttons[this.ⲆΔⲆⲆᐃΔΔ].info.active = fa;
          this.buttons[this.ΔᐃⲆⵠΔΔⵠ].info.active = fa;
          this.buttons[this.ᐃᐃⵠⲆⵠⵠⲆ].info.active = fa;
        } else {
          this.buttons[this.ⲆΔⲆⲆᐃΔΔ].info.active = ha;
          this.buttons[this.ΔᐃⲆⵠΔΔⵠ].info.active = ha;
          this.buttons[this.ᐃᐃⵠⲆⵠⵠⲆ].info.active = ha;
        }
        if (this.ⲆᐃⵠᐃⵠΔⲆ === this.ⵠⵠᐃⵠⵠᐃⵠ) {
          this.buttons[this.ⲆᐃⵠᐃⵠΔⲆ].info.state = Sf;
        } else if (this.ⵠⵠᐃⵠⵠᐃⵠ === this.ᐃΔⵠᐃⲆΔᐃ) {
          this.buttons[this.ᐃΔⵠᐃⲆΔᐃ].info.state = Sf;
        } else if (this.ⵠⵠᐃⵠⵠᐃⵠ === this.Δⵠᐃᐃᐃⵠⵠ) {
          this.buttons[this.Δⵠᐃᐃᐃⵠⵠ].info.state = Sf;
        } else if (this.ⲆᐃᐃᐃⲆⵠΔ === this.ⵠⵠᐃⵠⵠᐃⵠ) {
          this.buttons[this.ⲆᐃᐃᐃⲆⵠΔ].info.state = Sf;
        } else if (this.ΔⲆⲆᐃⲆⲆⲆ === this.ⵠⵠᐃⵠⵠᐃⵠ) {
          this.buttons[this.ΔⲆⲆᐃⲆⲆⲆ].info.state = Sf;
        }
        if (this.ⲆΔⲆⲆᐃΔΔ === this.ⵠΔᐃⲆⲆⵠⲆ) {
          this.buttons[this.ⲆΔⲆⲆᐃΔΔ].info.state = Sf;
        } else if (this.ⵠΔᐃⲆⲆⵠⲆ === this.ΔᐃⲆⵠΔΔⵠ) {
          this.buttons[this.ΔᐃⲆⵠΔΔⵠ].info.state = Sf;
        } else if (this.ᐃᐃⵠⲆⵠⵠⲆ === this.ⵠΔᐃⲆⲆⵠⲆ) {
          this.buttons[this.ᐃᐃⵠⲆⵠⵠⲆ].info.state = Sf;
        }
        if (this.ⵠᐃᐃⲆᐃΔΔ === this.ⵠⵠⲆⵠⲆⵠΔ) {
          this.buttons[this.ⵠᐃᐃⲆᐃΔΔ].info.state = Sf;
        } else if (this.ⵠⵠⲆⵠⲆⵠΔ === this.ᐃⵠⲆⵠⵠⵠᐃ) {
          this.buttons[this.ᐃⵠⲆⵠⵠⵠᐃ].info.state = Sf;
        } else if (this.ⵠⵠⲆⵠⲆⵠΔ === this.ᐃᐃⲆⵠᐃᐃΔ) {
          this.buttons[this.ᐃᐃⲆⵠᐃᐃΔ].info.state = Sf;
        }
        if (this.ΔᐃⵠΔΔⵠⲆ === this.ⵠⵠⵠᐃᐃΔⲆ) {
          this.buttons[this.ⵠⵠⵠᐃᐃΔⲆ].info.state = Sf;
        } else if (this.ⲆⵠⵠΔⵠᐃᐃ === this.ΔᐃⵠΔΔⵠⲆ) {
          this.buttons[this.ⲆⵠⵠΔⵠᐃᐃ].info.state = Sf;
        } else if (this.ⲆⵠᐃⲆⵠⵠᐃ === this.ΔᐃⵠΔΔⵠⲆ) {
          this.buttons[this.ⲆⵠᐃⲆⵠⵠᐃ].info.state = Sf;
        } else if (this.ΔᐃⵠΔΔⵠⲆ === this.ⲆⵠⲆᐃⲆᐃⵠ) {
          this.buttons[this.ⲆⵠⲆᐃⲆᐃⵠ].info.state = Sf;
        } else if (this.ΔᐃⵠΔΔⵠⲆ === this.ⵠᐃⲆⲆᐃⵠᐃ) {
          this.buttons[this.ⵠᐃⲆⲆᐃⵠᐃ].info.state = Sf;
        } else if (this.ΔᐃⵠΔΔⵠⲆ === this.ΔᐃΔᐃⲆᐃⵠ) {
          this.buttons[this.ΔᐃΔᐃⲆᐃⵠ].info.state = Sf;
        }
      }
      if ((this.ᐃΔΔⵠⲆ & v) === v) {
        if (this.ⲆⵠᐃΔᐃⵠᐃ === -1) {
          this.buttons[Aa].info.state = Sf;
        } else if (this.ⲆⵠᐃΔᐃⵠᐃ === 0) {
          this.buttons[Ba].info.state = Sf;
        } else if (this.ⲆⵠᐃΔᐃⵠᐃ === 2) {
          this.buttons[Da].info.state = Sf;
        } else if (this.ⲆⵠᐃΔᐃⵠᐃ === 3) {
          this.buttons[Ea].info.state = Sf;
        } else if (this.ⲆⵠᐃΔᐃⵠᐃ === 4) {
          this.buttons[Ca].info.state = Sf;
        }
        if (this.ⲆᐃΔⲆΔΔΔ === 0) {
          this.buttons[ua].info.state = Sf;
        } else if (this.ⲆᐃΔⲆΔΔΔ === 1) {
          this.buttons[va].info.state = Sf;
        } else if (this.ⲆᐃΔⲆΔΔΔ === 2) {
          this.buttons[wa].info.state = Sf;
        } else if (this.ⲆᐃΔⲆΔΔΔ === 3) {
          this.buttons[xa].info.state = Sf;
        } else if (this.ⲆᐃΔⲆΔΔΔ === 4) {
          this.buttons[ya].info.state = Sf;
        } else if (this.ⲆᐃΔⲆΔΔΔ === 5) {
          this.buttons[za].info.state = Sf;
        }
      }
      if (F === (this.ᐃΔΔⵠⲆ & F) && Ix.ⲆΔΔⲆᐃⲆᐃ === 0) {
        if (this.buttons[la].ⵠⵠⵠᐃΔᐃΔ(Mx.ⵠΔΔⲆ)) {
          this.buttons[la].hint = Math.min(1, this.buttons[la].hint + Ox * 1.5);
        } else {
          this.buttons[la].hint = Math.max(0, this.buttons[la].hint - Ox * 1.5);
        }
        if (this.buttons[ma].ⵠⵠⵠᐃΔᐃΔ(Mx.ⵠΔΔⲆ)) {
          this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + Ox * 1.5);
        } else {
          this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - Ox * 1.5);
        }
        if (this.buttons[oa].ⵠⵠⵠᐃΔᐃΔ(Mx.ⵠΔΔⲆ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Ox * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Ox * 1.5);
        }
        if (this.buttons[sa].ⵠⵠⵠᐃΔᐃΔ(Mx.ⵠΔΔⲆ)) {
          this.buttons[sa].hint = Math.min(1, this.buttons[sa].hint + Ox * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - Ox * 1.5);
        }
        if (this.buttons[pa].ⵠⵠⵠᐃΔᐃΔ(Mx.ⵠΔΔⲆ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Ox * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Ox * 1.5);
        }
        if (this.buttons[ra].ⵠⵠⵠᐃΔᐃΔ(Mx.ⵠΔΔⲆ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Ox * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Ox * 1.5);
        }
      }
      var Y = 1;
      if ((this.ᐃΔΔⵠⲆ & (A | x | H | B | D | I)) > 1) {
        V = ΔⲆ.ⵠⲆᐃⲆⲆⲆⵠ;
        j.save();
        j.translate(Eo, ka + V.height / 4);
        if (this.ΔⲆΔⵠᐃ === 1) {
          this.ⲆᐃⲆⵠΔᐃᐃ += Ox / 3;
          Y = this.ΔⲆⵠᐃΔΔᐃ - 100 / Math.pow(1 + this.ⲆᐃⲆⵠΔᐃᐃ, 1 + this.ⲆᐃⲆⵠΔᐃᐃ);
          j.rotate(Y);
        }
        Kp(j, V, -V.width / 4, -V.height / 4, V.width / 2, V.height / 2);
        j.restore();
      }
      if (Ix.ⲆΔΔⲆᐃⲆᐃ === 0) {
        if (Ix.ⵠⵠᐃΔⲆ === 0) {
          this.buttons[la].info.state = Sf;
        } else if (Ix.ⵠⵠᐃΔⲆ === 4) {
          this.buttons[ma].info.state = Sf;
        } else if (Ix.ⵠⵠᐃΔⲆ === 2) {
          this.buttons[pa].info.state = Sf;
        } else if (Ix.ⵠⵠᐃΔⲆ === 3) {
          this.buttons[ra].info.state = Sf;
        } else if (Ix.ⵠⵠᐃΔⲆ === 6) {
          this.buttons[oa].info.state = Sf;
        } else if (Ix.ⵠⵠᐃΔⲆ === 7) {
          this.buttons[sa].info.state = Sf;
        }
      }
      for (d = 1; this.buttons.length > d; d++) {
        if (this.buttons[d].info.active === ha) {
          this.buttons[d].ⲆᐃᐃⲆ(j);
        }
      }
      this.Ⲇⵠⵠⵠ[0].ⲆᐃᐃⲆ(j);
      if ((this.ᐃΔΔⵠⲆ & (q | N)) > 0) {
        V = this.ᐃΔⲆΔΔⵠⲆ;
        Kp(j, V, Eo - V.width / 4, 138, V.width / 2, V.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((Ex.ΔΔΔⵠⲆ + 3) / 2)));
      this.Ⲇⵠⵠⵠ[Z].active = ha;
      this.Ⲇⵠⵠⵠ[Z].ⲆᐃᐃⲆ(j);
      this.Ⲇⵠⵠⵠ[Z].active = fa;
      this.buttons[0].ⲆᐃᐃⲆ(j);
      if ((this.ᐃΔΔⵠⲆ & (c | K | M | E | L)) > 1) {
        var l = (this.ᐃΔΔⵠⲆ & (K | M | E | L)) > 1 ? -190 : 0;
        V = Ⲇⵠ[29][this.ΔΔⲆᐃⵠ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 + l, 183, V.width / 2, V.height / 2);
        this.Δᐃⵠⵠ = (this.Δᐃⵠⵠ + Ox * 1000) % 2000;
        var u = (this.Δᐃⵠⵠ < 1000) * 4.5 ? this.Δᐃⵠⵠ / 1000 : (2000 - this.Δᐃⵠⵠ) / 1000;
        V = Ⲇⵠ[28][this.ⲆΔⵠΔΔ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 - 62 + u + l, 240, V.width / 2, V.height / 2);
        V = Ⲇⵠ[7][this.ⵠⲆΔΔ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 - 54 + u + l, 272, V.width / 2, V.height / 2);
        Kp(j, V, Eo - V.width / 4 + 54 - u + l, 272, V.width / 2, V.height / 2);
        V = Ⲇⵠ[255][this.ⵠⲆΔΔ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 + l, 222, V.width / 2, V.height / 2);
        V = Ⲇⵠ[796][this.ᐃᐃⲆΔⵠ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 + l, 222, V.width / 2, V.height / 2);
      }
      if ((this.ᐃΔΔⵠⲆ & c) === c) {
        V = Ⲇⵠ[250][this.ⵠⵠΔⲆⲆ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 - 61, 406 - V.height / 4, V.width / 2, V.height / 2);
        V = Ⲇⵠ[250][this.Δᐃⵠⵠᐃ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 + 53, 406 - V.height / 4, V.width / 2, V.height / 2);
      }
      if ((this.ᐃΔΔⵠⲆ & J) === J) {
        V = Ⲇⵠ[250][this.Δᐃⵠⵠᐃ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 - 200, 268 - V.height / 4, V.width / 2, V.height / 2);
      }
      if (Q === (this.ᐃΔΔⵠⲆ & Q)) {
        V = Ⲇⵠ[250][this.ⵠⵠΔⲆⲆ][this.ᐃⲆⵠᐃⵠᐃΔ];
        Kp(j, V, Eo - V.width / 4 - 200, 268 - V.height / 4, V.width / 2, V.height / 2);
      }
      if ((this.ᐃΔΔⵠⲆ & (K | M | E | L | J | Q)) > 1) {
        for (d = 1; this.buttons.length > d; d++) {
          if (this.buttons[d].view & this.ᐃΔΔⵠⲆ) {
            var _ = this.buttons[d].info;
            if (_.ᐃⵠΔⵠᐃⵠΔ >= 0) {
              V = _.ΔⲆⲆᐃⲆⲆⵠΔⲆ[_.ᐃⵠΔⵠᐃⵠΔ].ⵠⵠⲆ;
              Kp(j, V, _.translate.x - V.width / 8 + 44.5, _.translate.y - V.height / 8 + 45.5, V.width / 4, V.height / 4);
              if (_.ⵠⲆΔΔⵠΔΔ !== 1) {
                V = ΔⲆ.ᐃⵠΔⲆⲆⵠΔ;
                Kp(j, V, _.translate.x - V.width / 4 + 44.5, _.translate.y - V.height / 4 + 44.5, V.width / 2, V.height / 2);
              }
            }
          }
        }
        V = this.ΔΔᐃⵠΔᐃⲆ;
        Kp(j, V, Eo - 312, 375, V.width / 2, V.height / 2);
        V = this.ⲆΔΔᐃΔⵠⲆ;
        Kp(j, V, Eo - 312, 395, V.width / 2, V.height / 2);
      }
      if (this.ⲆⵠⵠΔⲆ !== this.ᐃⲆⲆⵠⵠᐃᐃ) {
        this.ᐃⲆⲆⵠⵠᐃᐃ = this.ⲆⵠⵠΔⲆ;
        this.ⲆⲆᐃΔΔᐃⵠ = _f("" + this.ⲆⵠⵠΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Kp(j, this.ⲆⲆᐃΔΔᐃⵠ, this.Ⲇⵠⵠⵠ[0].translate.x + 350, 15, this.ⲆⲆᐃΔΔᐃⵠ.w2, this.ⲆⲆᐃΔΔᐃⵠ.ᐃᐃⲆᐃⵠ);
      if (this.ΔΔΔⵠⲆ !== this.ΔΔᐃⲆⵠᐃⲆ) {
        this.ΔΔᐃⲆⵠᐃⲆ = this.ΔΔΔⵠⲆ;
        this.ᐃⲆⲆΔⲆᐃⲆ = _f("LVL " + (this.ΔΔΔⵠⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Gm, 30, 24, fo, Bl, undefined, undefined, "#3F3019", 20);
      }
      Kp(j, this.ᐃⲆⲆΔⲆᐃⲆ, this.Ⲇⵠⵠⵠ[0].translate.x + 94, 0, this.ᐃⲆⲆΔⲆᐃⲆ.w2, this.ᐃⲆⲆΔⲆᐃⲆ.ᐃᐃⲆᐃⵠ);
      if (Ix.ⲆΔΔⲆᐃⲆᐃ === 0) {
        var aa = this.buttons[la].hint;
        if (aa > 0) {
          V = ΔⲆ.ᐃᐃᐃΔΔΔΔ;
          Kp(j, V, Eo - V.width / 4, -36 - V.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
        }
        if ((aa = this.buttons[ma].hint) > 0) {
          V = ΔⲆ.ΔⵠᐃⲆⲆⵠΔ;
          Kp(j, V, Eo - V.width / 4, -36 - V.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
        }
        if ((aa = this.buttons[oa].hint) > 0) {
          V = ΔⲆ.ⵠΔⲆⵠⵠΔᐃ;
          Kp(j, V, Eo - V.width / 4, -36 - V.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
        }
        aa = this.buttons[sa].hint;
        if (aa > 0) {
          V = ΔⲆ.ᐃⵠᐃᐃⲆΔⵠ;
          Kp(j, V, Eo - V.width / 4, -36 - ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
        }
        aa = this.buttons[ra].hint;
        if (aa > 0) {
          V = ΔⲆ.ΔⲆᐃⵠΔⵠⵠ;
          Kp(j, V, Eo - V.width / 4, -36 - ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
        }
        if ((aa = this.buttons[pa].hint) > 0) {
          V = ΔⲆ.ⵠΔΔⲆΔΔⲆ;
          Kp(j, V, Eo - V.width / 4, -36 - V.height * ⵠᐃΔᐃ.ⲆⲆΔⲆᐃ(1 - aa) / 2, V.width / 2, V.height / 2);
        }
      }
      if (this.ΔⲆΔⵠᐃ === 1 && Math.abs(Y - this.ΔⲆⵠᐃΔΔᐃ) < 0.006) {
        j.globalAlpha = Math.min(1, this.ᐃⲆᐃⲆⲆⲆΔ * 3);
        V = ΔⲆ.Ⲇᐃⵠⵠᐃⵠⵠ;
        j.save();
        j.translate(Eo, 260);
        this.ᐃⲆᐃⲆⲆⲆΔ += Ox;
        j.rotate(this.ᐃⲆᐃⲆⲆⲆΔ);
        Kp(j, V, -V.width / 2, -V.height / 2, V.width, V.height);
        j.restore();
        u = 1.05 + Math.cos(this.ᐃⲆᐃⲆⲆⲆΔ * 5) * 0.05;
        if (this.ᐃⲆⲆⲆⵠΔⲆ === 0) {
          var ba = u * (V = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ).width;
          var ca = u * V.height;
          Kp(j, V, Eo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⲆⲆⲆⵠΔⲆ === 1) {
          ba = (V = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[0].ⵠⵠⲆ).width * u;
          ca = u * V.height;
          Kp(j, V, Eo - ba / 2, 260 - ca / 2, ba, ca);
          ba = (V = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ).width * u;
          ca = V.height * u;
          Kp(j, V, Eo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⲆⲆⲆⵠΔⲆ === 2) {
          ba = u * (V = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ).width;
          ca = V.height * u;
          Kp(j, V, Eo - ba / 2, 180 - ca / 2, ba, ca);
          ba = u * (V = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[0].ⵠⵠⲆ).width;
          ca = u * V.height;
          Kp(j, V, Eo - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃⲆⲆⲆⵠΔⲆ === 3) {
          ba = u * (V = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ).width;
          ca = u * V.height;
          j.save();
          j.translate(Eo, 260);
          j.rotate(Math.PI);
          Kp(j, V, -ba / 2, -ca / 2, ba, ca);
          j.restore();
        } else if (this.ᐃⲆⲆⲆⵠΔⲆ === 4) {
          ba = u * (V = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[this.ⵠᐃΔᐃᐃᐃⵠ].ⵠⵠⲆ).width;
          ca = u * V.height;
          Kp(j, V, Eo - ba / 2, 260 - ca / 2, ba, ca);
        }
        V = this.ⵠⲆⲆⵠⵠⲆⵠ;
        Kp(j, V, Eo - V.width / 4, 340, V.width / 2, V.height / 2);
        V = this.ⲆᐃΔΔΔⵠΔ;
        Kp(j, V, Eo - V.width / 4, 365, V.width / 2, V.height / 2);
        if (this.ᐃⲆᐃⲆⲆⲆΔ > 6) {
          this.ΔⲆΔⵠᐃ = 0;
          U(p);
        }
        j.globalAlpha = 1;
      }
      Gx.alert.ⲆᐃᐃⲆ("#FFF", "#000");
      if (C.waiting) {
        this.ⲆⵠᐃⲆΔⵠᐃ.ⲆᐃᐃⲆ();
      }
    };
    var u = 0;
    var F = Math.pow(2, u++);
    var v = Math.pow(2, u++);
    this.ΔⲆⲆⵠⵠ = v;
    var m = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    var p = Math.pow(2, u++);
    var G = Math.pow(2, u++);
    var f = Math.pow(2, u++);
    var w = Math.pow(2, u++);
    this.ⲆⲆΔΔⲆ = w;
    var y = Math.pow(2, u++);
    var k = Math.pow(2, u++);
    var A = Math.pow(2, u++);
    var x = Math.pow(2, u++);
    var H = Math.pow(2, u++);
    var B = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var E = Math.pow(2, u++);
    var J = Math.pow(2, u++);
    var K = Math.pow(2, u++);
    var M = Math.pow(2, u++);
    var L = Math.pow(2, u++);
    var Q = Math.pow(2, u++);
    var N = Math.pow(2, u++);
    var q = Math.pow(2, u++);
    var O = Math.pow(2, u++);
    this.ⵠΔᐃΔⲆ = O;
    var R = Math.pow(2, u++);
    this.ᐃᐃⲆᐃΔ = R;
    var S = Math.pow(2, u++);
    this.ΔΔⵠΔⲆ = S;
    var T = Math.pow(2, u++);
    function P(a, b, c) {
      for (var d = 0; C.Ⲇⵠⵠⵠ.length > d; d++) {
        if ((C.Ⲇⵠⵠⵠ[d].view & a) !== 0) {
          C.Ⲇⵠⵠⵠ[d].active = b;
        }
      }
      for (d = 0; d < C.buttons.length; d++) {
        if ((C.buttons[d].view & a) !== 0) {
          C.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < C.ΔΔⵠⲆΔ.length; d++) {
        if ((C.ΔΔⵠⲆΔ[d].view & a) !== 0) {
          C.ΔΔⵠⲆΔ[d].style.display = c;
        }
      }
    }
    this.ᐃΔΔⵠⲆ = F;
    function U(a) {
      if (C.ⵠΔⲆΔΔᐃΔ !== qe) {
        P(y, fa, "none");
        P(k, fa, "none");
        V();
        if (C.ᐃΔΔⵠⲆ !== a && C.ΔⲆΔⵠᐃ < 1) {
          C.ⵠⲆⲆⵠΔ.style.display = F === a || a === p || a === v || f === a || c === a || G === a ? "inline-block" : "none";
          P(C.ᐃΔΔⵠⲆ, fa, "none");
          C.ᐃΔΔⵠⲆ = a;
          P(C.ᐃΔΔⵠⲆ, ha, "inline-block");
        }
      }
    }
    function V() {
      var b = Number(ΔᐃⲆΔ.get("starve_crate"));
      var c = Number(ΔᐃⲆΔ.get("starve_dead"));
      var d = Number(ΔᐃⲆΔ.get("starve_book"));
      var e = Number(ΔᐃⲆΔ.get("starve_bag"));
      var f = Number(ΔᐃⲆΔ.get("starve_skin"));
      var g = Number(ΔᐃⲆΔ.get("starve_accessory"));
      if (Ex.unlock.ⵠⲆΔΔ[Ex.ⵠⲆΔΔ] <= 0) {
        Ex.ⵠⲆΔΔ = Ex.unlock.ⵠⲆΔΔ[f] > 0 ? f : 0;
      }
      if (Ex.unlock.ⲆΔⵠΔΔ[Ex.ⲆΔⵠΔΔ] <= 0) {
        Ex.ⲆΔⵠΔΔ = Ex.unlock.ⲆΔⵠΔΔ[d] > 0 ? d : 0;
      }
      if (Ex.unlock.Δᐃⵠⵠᐃ[Ex.Δᐃⵠⵠᐃ] <= 0) {
        Ex.Δᐃⵠⵠᐃ = Ex.unlock.Δᐃⵠⵠᐃ[c] > 0 ? c : 0;
      }
      if (Ex.unlock.ⵠⵠΔⲆⲆ[Ex.ⵠⵠΔⲆⲆ] <= 0) {
        Ex.ⵠⵠΔⲆⲆ = Ex.unlock.ⵠⵠΔⲆⲆ[b] > 0 ? b : 0;
      }
      if (Ex.unlock.ᐃᐃⲆΔⵠ[Ex.ᐃᐃⲆΔⵠ] <= 0) {
        Ex.ᐃᐃⲆΔⵠ = Ex.unlock.ᐃᐃⲆΔⵠ[g] > 0 ? g : 0;
      }
      if (Ex.unlock.ΔΔⲆᐃⵠ[Ex.ΔΔⲆᐃⵠ] <= 0) {
        Ex.ΔΔⲆᐃⵠ = Ex.unlock.ΔΔⲆᐃⵠ[e] > 0 ? e : 0;
      }
    }
    function W(a) {
      if (Gx.ΔΔⵠᐃⵠⵠᐃ !== undefined && Gx.Δᐃᐃⵠⵠⵠᐃ !== undefined && Gx.ⵠⵠⵠΔᐃΔⲆ !== Mh && Gx.ⵠⲆΔⲆⲆⵠⵠ !== Sa) {
        a();
      }
    }
    function X(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (Ij !== b) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    function Y() {
      V();
      if (Rx % 2) {
        console.log($g);
        Ix.connect();
      } else {
        console.log(undefined);
        if (jg.Widget.isBlocked === 1) {
          jg.Widget.createAdPlayer(Ix.connect.bind(Ix), Ix.connect.bind(Ix));
        } else {
          jg.Widget.preroll();
          jg.Widget.play = Ix.connect.bind(Ix);
        }
      }
    }
    this.ⵠⲆⲆΔⵠⲆᐃ = 0;
    this.ᐃⲆⲆⵠ = U;
    this.ⲆⵠΔᐃΔΔⵠ = function (j, a) {
      let b = "0";
      let e = 0;
      if (_x) {
        b = _x + "0";
      }
      if (Gx.ΔΔⵠᐃⵠⵠᐃ) {
        W(j);
      } else {
        X(`${Ux}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const c = b.split("_");
          const d = c[0] + "_";
          const f = Number(c[1]);
          const a = Math.abs(function (a) {
            return Un(a, 8260, 46947, 8004, 37330, 5330);
          }(f));
          Gx.ΔΔⵠᐃⵠⵠᐃ = d + a;
          W(j);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              j();
              return;
            } else {
              C.waiting = Wh;
              return;
            }
          }
        });
      }
      X(`${Vx}let`, function (q) {
        if (e === 1) {
          return;
        }
        q = q.split(":");
        var o = 234;
        if (o > 11) {
          o = 40;
        }
        var F = 250;
        if (F === 8) {
          F = 43;
        }
        {
          if (12 == 46) {
            8;
          }
          const a = q[0].split("_");
          var G = 54;
          if (G > 1) {
            G = 53;
          }
          if (16 > 63) {
            108;
          }
          var H = 132;
          if (H === 11) {
            H = 86;
          }
          var K = 110;
          if (K > 0) {
            K = 97;
          }
          const c = a[0] + "_";
          var L = 249;
          if (L === 1) {
            L = 27;
          }
          if (153 >= 81) {
            225;
          }
          if (57 > 131) {
            101;
          }
          var M = 52;
          if (M > 8) {
            M = 160;
          }
          let e = 219;
          226;
          var N = 135;
          if (N > 13) {
            N = 254;
          }
          ({}).ⲆⲆⵠΔⲆⲆᐃΔⲆ = 12;
          if (49 === 158) {
            177;
          }
          if (e >= 166) {
            157;
          }
          const f = 131;
          Math.floor(131[f.ⲆⵠⲆⵠᐃⵠⵠ]);
          var O = 82;
          if (O >= 14) {
            O = 206;
          }
          const g = Number(a[1]);
          const b = 242;
          Math.floor(242[b.ⲆᐃᐃⵠⲆⲆⲆ]);
          139 .ⲆⵠⵠⲆΔⲆΔⵠΔ = 6;
          const d = Math.abs(jc(g));
          Gx.Δᐃᐃⵠⵠⵠᐃ = c + d;
          Gx.ⵠⵠᐃⲆΔᐃᐃ = d;
        }
        var Q = 153;
        if (Q > 2) {
          Q = 142;
        }
        Math.floor(42[42 .ⵠΔⲆⲆⵠⲆⲆ]);
        var R = 5;
        if (R > 1) {
          R = 169;
        }
        var U = 182;
        if (U > 10) {
          U = 49;
        }
        var V = 140;
        if (V === 4) {
          V = 205;
        }
        {
          var X = 39;
          if (X == 3) {
            X = 147;
          }
          var Y = 54;
          var Z = 4;
          if (Z >= 5) {
            Z = 228;
          }
          var _ = 156;
          if (_ === 12) {
            _ = 12;
          }
          if (Y > 4) {
            Y = 110;
          }
          var aa = 105;
          if (aa === 8) {
            aa = 97;
          }
          if (64 === 64) {
            23;
          }
          var ba = 169;
          if (175 >= 43) {
            191;
          }
          if (2 <= 9) {
            210;
          }
          var ca = 195;
          if (37 <= 60) {
            152;
          }
          if (ca === 2) {
            ca = 211;
          }
          if (ba === 7) {
            ba = 28;
          }
          if (230 == 178) {
            172;
          }
          const b = q[1].split("_");
          const c = 239;
          Math.floor(239[c.ⲆᐃⲆⵠⵠⵠΔ]);
          const d = b[0] + "_";
          const e = Number(b[1]);
          var da = 40;
          var ea = 97;
          if (ea == 5) {
            ea = 115;
          }
          if (da >= 5) {
            da = 43;
          }
          const f = Math.abs(gd(e));
          Gx.ⵠⵠⵠΔᐃΔⲆ = d + f;
          var fa = 169;
          if (fa > 9) {
            fa = 228;
          }
          let a = 189;
          const g = 169;
          Math.floor(169[g.ΔΔⲆⵠᐃᐃᐃ]);
          a.ᐃΔΔⵠⵠⲆⵠⲆⲆ = 7;
          var ha = 217;
          var ia = 252;
          if (ia > 7) {
            ia = 141;
          }
          if (ha === 6) {
            ha = 232;
          }
          Gx.ⲆⲆⵠⲆΔᐃⵠᐃΔ = f;
        }
        {
          const b = {};
          const c = 31;
          var ja = 95;
          if (ja == 3) {
            ja = 232;
          }
          if (66 === 102) {
            189;
          }
          const d = 127;
          Math.floor(127[d.ⲆΔⵠⵠⵠⲆᐃ]);
          Math.floor(31[c.ⲆⵠΔᐃᐃᐃΔ]);
          if (192 === 47) {
            198;
          }
          const e = 0;
          Math.floor(0[e.ⵠᐃⲆⵠⲆⲆΔ]);
          var ka = 210;
          if (ka > 14) {
            ka = 18;
          }
          const f = 111;
          Math.floor(111[f.ⵠⵠⲆΔᐃᐃΔ]);
          const a = 73;
          var la = 206;
          if (la >= 13) {
            la = 249;
          }
          if (81 == 242) {
            247;
          }
          Math.floor(73[a.ΔᐃⵠᐃⵠᐃΔ]);
          b.ⲆⵠᐃⵠᐃⲆⵠⵠΔ = 8;
          const i = q[2].split("_");
          var ma = 96;
          if (ma == 2) {
            ma = 205;
          }
          const j = i[0] + "_";
          if (179 > 16) {
            147;
          }
          const h = Number(i[1]);
          const g = Math.abs(gd(h));
          var na = 11;
          if (na == 2) {
            na = 218;
          }
          Gx.ⵠⲆΔⲆⲆⵠⵠ = j + g;
          Gx.ΔᐃⲆΔᐃⵠᐃΔⵠ = g;
        }
        W(j);
        var oa = 23;
        if (oa === 0) {
          oa = 175;
        }
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            j();
            return;
          } else {
            C.waiting = false;
            return;
          }
        }
      });
    };
    this.ⵠⵠᐃΔᐃⵠⵠ = function () {
      if (C.waiting === false) {
        Gx.reconnect.enabled = false;
        C.waiting = true;
        C.ⲆⵠΔᐃΔΔⵠ(Y);
      }
    };
    var Z = 1;
    var _ = 2;
    var aa = 4;
    var ba = 8;
    var ca = 16;
    var da = 32;
    var ea = 1;
    var fa = 0;
    var ha = 1;
    if (jg.innerWidth < 1300) {
      this.ⲆⵠΔⵠΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ha,
        position: aa | Z,
        view: F,
        translate: {
          Δⵠⵠⵠᐃ: 184,
          ⲆΔᐃᐃⲆ: 200,
          x: 0,
          y: 0
        }
      };
    } else {
      this.ⲆⵠΔⵠΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ha,
        position: aa | ca,
        view: F,
        translate: {
          x: 0,
          Δⵠⵠⵠᐃ: 184,
          ⲆΔᐃᐃⲆ: -180,
          y: 0
        }
      };
    }
    this.ⲆⵠΔⵠΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !C.waiting && !C.ⵠⵠΔⲆⲆⲆΔⵠⲆ) {
        C.ⵠⵠᐃΔᐃⵠⵠ();
      }
    });
    this.ⲆⵠΔⵠΔ.input.value = ΔᐃⲆΔ.get("starve_nickname") ? ΔᐃⲆΔ.get("starve_nickname") : "";
    this.ⲆⵠⵠⲆⵠⵠΔΔΔ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: fa,
      position: aa | ca,
      view: v,
      translate: {
        y: 0,
        x: 0,
        ⲆΔᐃᐃⲆ: -122,
        Δⵠⵠⵠᐃ: 110
      }
    };
    if (jg.innerWidth < 1300) {
      this.ᐃⲆΔⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ha,
        position: aa | Z,
        view: F,
        translate: {
          Δⵠⵠⵠᐃ: 225,
          y: 0,
          x: 0,
          ⲆΔᐃᐃⲆ: 208
        }
      };
    } else {
      this.ᐃⲆΔⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ha,
        position: aa | ca,
        view: F,
        translate: {
          ⲆΔᐃᐃⲆ: -180,
          Δⵠⵠⵠᐃ: 225,
          y: 0,
          x: 0
        }
      };
    }
    this.ⲆⲆⲆⵠ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: fa,
      position: aa | ca,
      view: f,
      translate: {
        x: 0,
        ⲆΔᐃᐃⲆ: -294.5,
        y: 0,
        Δⵠⵠⵠᐃ: 190
      }
    };
    this.ⵠⵠΔⵠᐃΔⲆΔⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: fa,
      position: aa | ca,
      view: v,
      translate: {
        ⲆΔᐃᐃⲆ: 125,
        x: 0,
        Δⵠⵠⵠᐃ: 187,
        y: 0
      }
    };
    this.ᐃᐃᐃⵠⵠΔΔΔⵠ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: fa,
      position: aa | ca,
      view: S,
      translate: {
        y: 0,
        x: 0,
        Δⵠⵠⵠᐃ: 350,
        ⲆΔᐃᐃⲆ: -260
      }
    };
    u = 0;
    this.ΔΔⵠⲆΔ = [];
    this.ΔΔⵠⲆΔ[u++] = this.ⲆⵠΔⵠΔ;
    this.ΔΔⵠⲆΔ[u++] = this.ᐃⲆΔⲆⵠ;
    this.ΔΔⵠⲆΔ[u++] = this.ⲆⲆⲆⵠ;
    this.ΔΔⵠⲆΔ[u++] = this.ⲆⵠⵠⲆⵠⵠΔΔΔ;
    this.ΔΔⵠⲆΔ[u++] = this.ⵠⵠΔⵠᐃΔⲆΔⵠ;
    this.ΔΔⵠⲆΔ[u++] = this.ᐃᐃᐃⵠⵠΔΔΔⵠ;
    u = 0;
    this.Ⲇⵠⵠⵠ = [];
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⲆⵠΔᐃⲆᐃⵠ, ha, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠᐃΔⵠᐃΔⲆ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠⵠⲆΔᐃⲆᐃ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠⵠΔᐃᐃⵠⵠ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ΔᐃⲆⲆᐃΔⲆ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠⲆⲆᐃΔᐃΔ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⲆΔΔⲆⲆΔᐃ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⲆᐃᐃΔΔⵠΔ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ᐃΔᐃⲆⲆΔᐃ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠᐃⲆᐃⵠΔΔ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ΔΔⵠⲆΔⲆⲆ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ᐃᐃⵠΔΔΔⲆ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ᐃΔⵠⵠⲆⲆⵠ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠΔΔΔⵠⵠΔ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠⲆⵠᐃᐃⵠΔ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ᐃΔᐃΔΔΔⲆ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⵠⲆⵠⲆᐃⵠΔ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ΔᐃᐃⵠⲆᐃⵠ, fa, 0, 0, Z);
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ᐃΔᐃⲆⲆᐃⵠ, fa, 0, 0, Z);
    if (jg.innerWidth < 1300) {
      this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠᐃⵠᐃⲆⵠᐃ, ha, 200, 100, aa | Z);
    } else {
      this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠᐃⵠᐃⲆⵠᐃ, ha, -753 / 4, 100, aa | ca);
    }
    this.Ⲇⵠⵠⵠ[u++].view = F;
    this.Ⲇⵠⵠⵠ[u++] = Rf(ΔⲆ.ⲆⲆⲆΔⵠᐃΔ, ha, 403, -10, _);
    if (jg.innerWidth > 1300) {
      this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ΔⵠⲆⵠᐃᐃᐃ, ha, -885 / 4, -319 / 2, ba | ca);
      this.Ⲇⵠⵠⵠ[u++].view = F;
    }
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆⵠΔⲆⵠᐃᐃ, fa, -323.25, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = v;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠⵠΔᐃᐃᐃⲆ, fa, -1425 / 4, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = c;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ΔⲆⵠⲆΔⲆΔ, fa, -905 / 4, 50, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = m;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ᐃΔΔΔⲆⵠᐃ, fa, -402, 130, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = p;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆⲆΔⲆΔⲆΔ, fa, -1117 / 4, 130, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = O;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆⲆⲆᐃⲆⵠᐃ, fa, -305.5, 130, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = R;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆⲆΔΔⲆⵠⲆ, fa, -305.5, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = S;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠⲆᐃΔⵠᐃⵠ, fa, -ΔⲆ.ⵠⲆᐃΔⵠᐃⵠ.width / 4 - 350, -15, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = T;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆΔⵠⲆᐃⵠᐃ, fa, -1497 / 4, 110, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = G;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆΔᐃᐃⲆᐃΔ, fa, -1226 / 4, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = f;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠⲆⲆⵠⲆΔⵠ, fa, -1381 / 4, 80, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = w;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ΔΔΔⲆⵠⲆΔ, fa, -385.5, 150, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = A;
    var ia = 360 / 100;
    var ja = this.ⵠᐃᐃᐃΔΔⵠ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
    this.Ⲇⵠⵠⵠ[u] = Rf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = A;
    this.ΔΔⲆΔⲆΔⵠⲆⵠ = function (b, c, d) {
      var e;
      C.ΔⲆΔⵠᐃ = 1;
      C.ⲆᐃⲆⵠΔᐃᐃ = 0;
      C.ᐃⲆᐃⲆⲆⲆΔ = 0;
      C.ΔⲆⵠᐃΔΔᐃ = b;
      C.ᐃⲆⲆⲆⵠΔⲆ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; f < ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ.length && ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[f].id !== d; f++);
        e = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ[f];
        C.unlock.ⵠⲆΔΔ[f] = 1;
      } else if (c === 1) {
        for (f = 0; f < ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ.length && ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[f].id !== d; f++);
        e = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ[f];
        C.unlock.ᐃᐃⲆΔⵠ[f] = 1;
      } else if (c === 2) {
        for (f = 0; ᐃᐃⵠⵠ.ⲆⲆⲆⲆ.length > f && d !== ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[f].id; f++);
        e = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ[f];
        C.unlock.ΔΔⲆᐃⵠ[f] = 1;
      } else if (c === 3) {
        for (f = 0; f < ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ.length && d !== ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[f].id; f++);
        e = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ[f];
        C.unlock.ⲆΔⵠΔΔ[f] = 1;
      } else if (c === 4) {
        for (f = 0; f < ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ.length && d !== ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[f].id; f++);
        e = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ[f];
        C.unlock.ⵠⵠΔⲆⲆ[f] = 1;
        C.unlock.Δᐃⵠⵠᐃ[f] = 1;
      }
      C.ⵠᐃΔᐃᐃᐃⵠ = f;
      C.ⲆᐃΔΔΔⵠΔ = _f("by " + e.ΔΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, fh, 30, 24, undefined, undefined, ij, undefined, "#000000", 24);
      C.ⵠⲆⲆⵠⵠⲆⵠ = _f(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, hs, wl, Mh, "#000000", 20);
    };
    this.ΔⲆΔⵠᐃ = 0;
    this.ⲆᐃⲆⵠΔᐃᐃ = 0;
    this.ΔⲆⵠᐃΔΔᐃ = 0;
    this.ᐃⲆⲆⲆⵠΔⲆ = 0;
    this.ᐃⲆᐃⲆⲆⲆΔ = 0;
    this.ⲆᐃΔΔΔⵠΔ = undefined;
    this.ⵠⲆⲆⵠⵠⲆⵠ = ur;
    var ka = 197;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠⲆΔΔⵠⵠⲆ, fa, -385.5, 150, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = D;
    ja = this.ⵠᐃᐃᐃΔΔⵠ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
    this.Ⲇⵠⵠⵠ[u] = Rf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = D;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ᐃᐃⵠᐃⵠⵠⲆ, fa, -1542 / 4, 150, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = H;
    ja = this.ⵠᐃᐃᐃΔΔⵠ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
    this.Ⲇⵠⵠⵠ[u] = Rf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = H;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⵠⲆⵠⲆᐃΔⵠ, fa, -1542 / 4, 150, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = B;
    ja = this.ⵠᐃᐃᐃΔΔⵠ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
    this.Ⲇⵠⵠⵠ[u] = Rf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = B;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆΔΔΔⲆⲆⵠ, fa, -1542 / 4, 150, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = x;
    ja = this.ⵠᐃᐃᐃΔΔⵠ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
    this.Ⲇⵠⵠⵠ[u] = Rf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = x;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆᐃΔⵠᐃᐃᐃ, fa, -1542 / 4, 150, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = I;
    ja = this.ⵠᐃᐃᐃΔΔⵠ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
    this.Ⲇⵠⵠⵠ[u] = Rf(ja, fa, -ja.width / 4, 178, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = I;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆᐃⲆⵠΔⲆΔ, fa, -341.5, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = E;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆⵠΔⵠΔᐃᐃ, fa, -341.5, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = L;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ᐃⲆⲆⵠⵠΔⲆ, fa, -1366 / 4, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = K;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆΔΔΔΔⵠⵠ, fa, -1366 / 4, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = M;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆⲆᐃⵠⲆⲆⲆ, fa, -1366 / 4, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = J;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ΔⵠⲆᐃⲆΔⵠ, fa, -341.5, 100, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = Q;
    ᐃⲆΔᐃⲆⵠᐃ = u++;
    this.Ⲇⵠⵠⵠ[ᐃⲆΔᐃⲆⵠᐃ] = Rf(ΔⲆ.ᐃⲆΔᐃⲆⵠᐃ, fa, 484, 0, aa);
    ᐃᐃⵠᐃᐃⲆᐃ = u++;
    this.Ⲇⵠⵠⵠ[ᐃᐃⵠᐃᐃⲆᐃ] = Rf(ΔⲆ.ᐃᐃⵠᐃᐃⲆᐃ, fa, 812.5, 0, aa);
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ΔⵠᐃⲆⵠⵠⵠ, fa, -189.5, -5, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = k;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ΔΔΔⵠⲆᐃⵠ, fa, -189.5, -5, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = y;
    ⵠⲆΔᐃⵠⵠᐃ = u++;
    this.Ⲇⵠⵠⵠ[ⵠⲆΔᐃⵠⵠᐃ] = Rf(ΔⲆ.ᐃᐃᐃΔⲆⲆⲆ, ha, 93, 30, aa);
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ⲆᐃΔⵠΔΔᐃ, fa, -173, 110, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = N;
    this.Ⲇⵠⵠⵠ[u] = Rf(ΔⲆ.ᐃⵠⲆⵠᐃⲆⵠ, fa, -173, 110, aa | ca);
    this.Ⲇⵠⵠⵠ[u++].view = q;
    u = 0;
    this.buttons = [];
    this.buttons[u] = Qf(50, 57, 0, [ΔⲆ.ⲆΔᐃΔΔᐃⲆ, ΔⲆ.ⲆⵠΔⵠΔΔᐃ, ΔⲆ.ΔⵠⲆΔᐃⵠⲆ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        U(w);
      } else {
        U(m);
      }
    }, 320, 0, Z, ha);
    u++;
    if (jg.innerWidth < 1300) {
      this.buttons[u] = Qf(202, 97, 0, [ΔⲆ.ⲆᐃΔᐃⲆⲆⵠ, ΔⲆ.ⵠΔⲆᐃΔⵠᐃ, ΔⲆ.ⵠⲆⵠⵠⵠⵠⵠ], ea, 0, this.ⵠⵠᐃΔᐃⵠⵠ, 462, 235, aa | Z, ha);
    } else {
      this.buttons[u] = Qf(202, 97, 0, [ΔⲆ.ⲆᐃΔᐃⲆⲆⵠ, ΔⲆ.ⵠΔⲆᐃΔⵠᐃ, ΔⲆ.ⵠⲆⵠⵠⵠⵠⵠ], ea, 0, this.ⵠⵠᐃΔᐃⵠⵠ, 74, 235, aa | ca, ha);
    }
    this.buttons[u].view = F;
    u++;
    if (jg.innerWidth > 1300) {
      this.buttons[u] = Qf(355, 168, 0, [ΔⲆ.ᐃᐃⵠⵠᐃⵠᐃ, ΔⲆ.ᐃᐃⵠⵠᐃⵠᐃ, ΔⲆ.ᐃᐃⵠⵠᐃⵠᐃ], ea, 0, function () {
        jg.open("./changelog.html", "_blank");
      }, -195, -115, ba | ca, ha);
      this.buttons[u++].view = F;
      this.buttons[u] = Qf(355, 168, 0, [ΔⲆ.ⲆⵠⲆⵠⲆᐃⵠ, ΔⲆ.ⲆⵠⲆⵠⲆᐃⵠ, ΔⲆ.ⲆⵠⲆⵠⲆᐃⵠ], ea, 0, function () {
        jg.open("https://taming.io", "_blank");
      }, 20, -115, ba | ca, ha);
      this.buttons[u++].view = F;
    }
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ᐃᐃⲆⲆΔⲆⲆ, ΔⲆ.ⵠⲆᐃᐃⲆⲆⵠ, ΔⲆ.ΔⲆΔᐃⵠⵠⲆ], ea, 0, function () {
      jg.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, _, ha);
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ⲆΔΔᐃⲆⵠⲆ, ΔⲆ.ΔᐃᐃⵠⲆᐃΔ, ΔⲆ.ⲆᐃΔΔⵠᐃⵠ], ea, 0, function () {
      jg.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, _, ha);
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ⵠⵠᐃⲆⵠⲆΔ, ΔⲆ.ΔᐃᐃᐃⲆᐃⵠ, ΔⲆ.ΔⵠⲆΔⲆⲆᐃ], ea, 0, function () {
      jg.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, _, ha);
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ᐃⵠⲆⵠⵠⵠⲆ, ΔⲆ.ⵠΔᐃⵠᐃᐃΔ, ΔⲆ.ᐃᐃᐃⵠΔᐃⵠ], ea, 0, function () {
      jg.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, _, ha);
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ⲆᐃΔᐃΔΔΔ, ΔⲆ.ⵠΔᐃⲆᐃⵠΔ, ΔⲆ.ⵠⲆΔⲆᐃΔⲆ], ea, 0, function () {
      jg.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, _, ha);
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ⵠΔⵠᐃᐃᐃᐃ, ΔⲆ.ⵠΔΔᐃⲆⲆᐃ, ΔⲆ.ᐃⲆⵠᐃⵠⵠΔ], ea, 0, function () {
      jg.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, _, ha);
    this.buttons[u++] = Qf(80, 80, 0, [ΔⲆ.ⲆⲆᐃᐃΔᐃⲆ, ΔⲆ.ΔΔⲆⲆᐃΔⵠ, ΔⲆ.ᐃᐃⵠⲆⲆⵠⲆ], ea, 0, function () {
      jg.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, _, ha);
    ⵠⵠⵠⲆΔΔⲆ = u++;
    this.buttons[ⵠⵠⵠⲆΔΔⲆ] = Qf(232, 142, 0, [ΔⲆ.ⵠΔᐃⵠⵠᐃⵠ, ΔⲆ.ᐃⲆⵠᐃΔᐃΔ, ΔⲆ.ⵠᐃΔᐃⲆᐃΔ], ea, 0, function () {
      U(f);
      ry(Ex.ⲆΔⲆⲆᐃΔΔ, Ex.Δⵠᐃᐃᐃⵠⵠ, Ex.ᐃⵠⲆⵠⵠⵠᐃ, Ex.ΔᐃΔᐃⲆᐃⵠ);
    }, -5, 573, Z, ha);
    this.buttons[u++] = Qf(236, 165, 0, [ΔⲆ.ΔΔᐃⲆⲆⵠΔ, ΔⲆ.ΔΔᐃⲆⲆⵠΔ, ΔⲆ.ΔΔᐃⲆⲆⵠΔ], ea, 1, function () {
      U(f);
    }, -5, 566, Z, ha);
    ⲆⲆⵠⲆⵠᐃⲆ = u++;
    this.buttons[ⲆⲆⵠⲆⵠᐃⲆ] = Qf(236, 165, 0, [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ea, 0, function () {
      U(G);
    }, -5, 494, Z, ha);
    this.buttons[u++] = Qf(236, 165, 0, [ΔⲆ.ⵠᐃⵠⵠⲆⲆΔ, ΔⲆ.ⵠᐃⵠⵠⲆⲆΔ, ΔⲆ.ⵠᐃⵠⵠⲆⲆΔ], ea, 1, function () {
      U(G);
    }, -5, 494, Z, ha);
    ⵠΔᐃⵠᐃⲆⵠ = u++;
    this.buttons[ⵠΔᐃⵠᐃⲆⵠ] = Qf(236, 165, 0, [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        if (Ex.ⵠΔᐃⵠⵠᐃΔ - Date.now() > 0) {
          U(S);
        } else {
          U(O);
        }
      } else {
        U(m);
      }
    }, -5, 415, Z, ha);
    this.buttons[u++] = Qf(236, 165, 0, [ΔⲆ.ⲆᐃⵠΔⵠΔⲆ, ΔⲆ.ⲆᐃⵠΔⵠΔⲆ, ΔⲆ.ⲆᐃⵠΔⵠΔⲆ], ea, 1, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        if (Ex.ⵠΔᐃⵠⵠᐃΔ - Date.now() > 0) {
          U(S);
        } else {
          U(O);
        }
      } else {
        U(m);
      }
    }, -5, 415, Z, ha);
    ᐃⵠᐃⲆᐃᐃⲆ = u++;
    this.buttons[ᐃⵠᐃⲆᐃᐃⲆ] = Qf(236, 165, 0, [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ea, 0, function () {
      U(p);
    }, -5, 336, Z, ha);
    this.buttons[u++] = Qf(236, 165, 0, [ΔⲆ.ⵠⲆⵠⲆⲆⵠⵠ, ΔⲆ.ⵠⲆⵠⲆⲆⵠⵠ, ΔⲆ.ⵠⲆⵠⲆⲆⵠⵠ], ea, 1, function () {
      U(p);
    }, -5, 336, Z, ha);
    ⲆΔⵠΔΔΔᐃ = u++;
    this.buttons[ⲆΔⵠΔΔΔᐃ] = Qf(236, 165, 0, [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ea, 0, function () {
      U(c);
    }, -5, 257, Z, ha);
    this.buttons[u++] = Qf(236, 165, 0, [ΔⲆ.ⵠⲆⵠⵠΔΔΔ, ΔⲆ.ⵠⲆⵠⵠΔΔΔ, ΔⲆ.ⵠⲆⵠⵠΔΔΔ], ea, 1, function () {
      U(c);
    }, -5, 257, Z, ha);
    ⲆᐃΔΔⲆΔᐃ = u++;
    this.buttons[ⲆᐃΔΔⲆΔᐃ] = Qf(236, 165, 0, [ΔⲆ.ᐃᐃⵠⲆⲆᐃΔ, ΔⲆ.ΔΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆⲆⲆΔΔⵠⵠ], ea, 0, function () {
      U(F);
    }, -5, 178, Z, ha);
    this.buttons[u++] = Qf(236, 165, 0, [ΔⲆ.ⵠⵠⲆⵠⵠᐃΔ, ΔⲆ.ⵠⵠⲆⵠⵠᐃΔ, ΔⲆ.ⵠⵠⲆⵠⵠᐃΔ], ea, 1, function () {
      U(F);
    }, -5, 178, Z, ha);
    ⲆⲆⵠⵠΔᐃᐃ = u++;
    this.ⲆⲆⵠⵠΔᐃᐃ = ⲆⲆⵠⵠΔᐃᐃ;
    this.buttons[ⲆⲆⵠⵠΔᐃᐃ] = Qf(324, 222, 0, [ΔⲆ.ᐃⵠⲆΔⲆΔⵠ, ΔⲆ.ΔΔⵠᐃⲆⲆᐃ, ΔⲆ.ⵠᐃΔΔⲆⲆⵠ], ea, 0, function () {
      U(m);
    }, 0, 70, Z, ha);
    ΔᐃΔⵠΔⵠⲆ = u++;
    ⵠⵠΔⵠᐃΔⲆ = u++;
    this.ΔᐃΔⵠΔⵠⲆ = ΔᐃΔⵠΔⵠⲆ;
    this.ⵠⵠΔⵠᐃΔⲆ = ⵠⵠΔⵠᐃΔⲆ;
    this.buttons[ΔᐃΔⵠΔⵠⲆ] = Qf(324, 222, 0, [ΔⲆ.ⲆΔᐃΔⲆΔᐃ, ΔⲆ.ⵠⵠΔⵠΔⵠΔ, ΔⲆ.ⲆᐃᐃⲆΔⵠᐃ], ea, 0, function () {
      U(v);
      ta(-1);
    }, 0, 70, Z, fa);
    this.buttons[ⵠⵠΔⵠᐃΔⲆ] = Qf(324, 222, 0, [ΔⲆ.ΔΔᐃⲆΔⵠⲆ, ΔⲆ.ΔΔᐃⲆΔⵠⲆ, ΔⲆ.ΔΔᐃⲆΔⵠⲆ], ea, 1, function () {
      U(v);
      ta(-1);
    }, 0, 70, Z, fa);
    if (Ix.ⲆΔΔⲆᐃⲆᐃ === 0) {
      var la = u++;
      if (jg.innerWidth < 1300) {
        this.buttons[la] = Qf(266, 176, 0, [ΔⲆ.ΔⲆⵠᐃΔᐃⲆ, ΔⲆ.ᐃⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆᐃΔᐃⵠΔⲆ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(0);
        }, 150, 300, Z | aa, ha);
      } else {
        this.buttons[la] = Qf(266, 176, 0, [ΔⲆ.ΔⲆⵠᐃΔᐃⲆ, ΔⲆ.ᐃⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆᐃΔᐃⵠΔⲆ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(0);
        }, -340, 100, ca | aa, ha);
      }
      this.buttons[la].view = F;
      this.buttons[la].hint = 0;
      var ma = u++;
      if (jg.innerWidth < 1300) {
        this.buttons[ma] = Qf(266, 176, 0, [ΔⲆ.ⵠⵠⵠⵠΔΔⲆ, ΔⲆ.ᐃⵠⵠᐃᐃᐃΔ, ΔⲆ.ᐃⲆⲆⲆⵠᐃΔ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(4);
        }, 150, 400, Z | aa, ha);
      } else {
        this.buttons[ma] = Qf(266, 176, 0, [ΔⲆ.ⵠⵠⵠⵠΔΔⲆ, ΔⲆ.ᐃⵠⵠᐃᐃᐃΔ, ΔⲆ.ᐃⲆⲆⲆⵠᐃΔ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(4);
        }, -340, 200, ca | aa, ha);
      }
      this.buttons[ma].view = F;
      this.buttons[ma].hint = 0;
      var oa = u++;
      if (jg.innerWidth < 1300) {
        this.buttons[oa] = Qf(266, 176, 0, [ΔⲆ.ⵠⲆⵠΔᐃⵠΔ, ΔⲆ.ΔⵠⲆΔⵠᐃΔ, ΔⲆ.ⲆᐃΔΔΔΔΔ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(6);
        }, 450, 300, Z | aa, ha);
      } else {
        this.buttons[oa] = Qf(266, 176, 0, [ΔⲆ.ⵠⲆⵠΔᐃⵠΔ, ΔⲆ.ΔⵠⲆΔⵠᐃΔ, ΔⲆ.ⲆᐃΔΔΔΔΔ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(6);
        }, -340, 300, ca | aa, ha);
      }
      this.buttons[oa].view = F;
      this.buttons[oa].hint = 0;
      var pa = u++;
      if (jg.innerWidth < 1300) {
        this.buttons[pa] = Qf(266, 176, 0, [ΔⲆ.ΔΔⵠᐃⵠⵠⲆ, ΔⲆ.ΔᐃᐃᐃⵠⵠΔ, ΔⲆ.ⲆⲆᐃⲆⵠⵠⵠ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(2);
        }, 300, 300, Z | aa, ha);
      } else {
        this.buttons[pa] = Qf(266, 176, 0, [ΔⲆ.ΔΔⵠᐃⵠⵠⲆ, ΔⲆ.ΔᐃᐃᐃⵠⵠΔ, ΔⲆ.ⲆⲆᐃⲆⵠⵠⵠ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(2);
        }, 204, 100, ca | aa, ha);
      }
      this.buttons[pa].view = F;
      this.buttons[pa].hint = 0;
      var ra = u++;
      if (jg.innerWidth < 1300) {
        this.buttons[ra] = Qf(266, 176, 0, [ΔⲆ.ⵠⲆⲆΔⵠⵠⵠ, ΔⲆ.ᐃΔⲆᐃᐃⵠᐃ, ΔⲆ.ΔⲆᐃᐃᐃᐃΔ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(3);
        }, 300, 400, Z | aa, ha);
      } else {
        this.buttons[ra] = Qf(266, 176, 0, [ΔⲆ.ⵠⲆⲆΔⵠⵠⵠ, ΔⲆ.ᐃΔⲆᐃᐃⵠᐃ, ΔⲆ.ΔⲆᐃᐃᐃᐃΔ], ea, 0, function () {
          Ix.ⲆⵠⲆᐃⵠ(3);
        }, 204, 200, ca | aa, ha);
      }
      this.buttons[ra].view = F;
      this.buttons[ra].hint = 0;
      var sa = u++;
      this.buttons[sa] = Qf(266, 176, 0, [ΔⲆ.ⵠⵠᐃᐃΔⵠΔ, ΔⲆ.ⲆⵠΔΔΔᐃⵠ, ΔⲆ.ⵠΔⲆᐃΔᐃⲆ], ea, 0, function () {
        Ix.ⲆⵠⲆᐃⵠ(7);
      }, jg.innerWidth < 1300 ? 450 : 204, jg.innerWidth < 1300 ? 400 : 300, (jg.innerWidth < 1300 ? Z : ca) | aa, ha);
      this.buttons[sa].view = F;
      this.buttons[sa].hint = 0;
    }
    function ta(b, c) {
      if (fh !== c) {
        Ex.ⲆᐃΔⲆΔΔΔ = c;
        var d = Ex.ᐃⲆΔᐃΔⵠΔ[c];
        Ex.ᐃⲆᐃⵠⲆ = d.score;
        Ex.ᐃᐃⲆᐃᐃ = d.kill;
        Ex.ΔⲆᐃΔⵠΔΔ = d.death;
        Ex.time = d.time;
        Ex.ΔΔᐃᐃⲆᐃⵠ = d.bestScore;
        Ex.ⲆⵠⵠⲆⲆⲆⵠ = d.bestKill;
        Ex.ⵠᐃᐃΔⵠⲆⲆ = d.bestTime;
        Ex.ⵠⵠⲆΔᐃⵠΔ = d.scoreTotal;
      }
      if (b === undefined) {
        b = Ex.ⲆⵠᐃΔᐃⵠᐃ;
      }
      Ex.ⲆⵠᐃΔᐃⵠᐃ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = Ex.ⵠᐃᐃΔⵠⲆⲆ[b];
        document.getElementById("stats_box_kill").innerHTML = Ex.ⲆⵠⵠⲆⲆⲆⵠ[b];
        document.getElementById("stats_box_score").innerHTML = Ex.ΔΔᐃᐃⲆᐃⵠ[b];
      } else {
        var f = 0;
        for (var g = 0; g < Ex.ᐃᐃⲆᐃᐃ.length; g++) {
          f += Ex.ᐃᐃⲆᐃᐃ[g];
        }
        var h = 0;
        for (g = 0; g < Ex.time.length; g++) {
          h += Ex.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = Ex.ᐃⲆᐃⵠⲆ;
      }
    }
    this.buttons[u] = Qf(87, 78, 0, [ΔⲆ.ΔⲆΔⵠⵠᐃᐃ, ΔⲆ.ⲆΔᐃᐃΔⲆⵠ, ΔⲆ.ΔᐃⵠᐃᐃΔⲆ], ea, 0, function () {
      Ex.ᐃⵠⵠⲆⲆΔᐃᐃΔ();
      if (Ex.ᐃⲆΔⵠⵠⵠⲆ === 0) {
        U(q);
      } else {
        U(N);
      }
    }, 127, 110, ca | aa, fa);
    this.buttons[u++].view = v;
    this.buttons[u] = Qf(87, 78, 0, [ΔⲆ.ΔΔⵠⵠᐃⲆⵠ, ΔⲆ.ΔⵠⲆⵠⲆᐃᐃ, ΔⲆ.ⲆⲆⲆⲆΔⵠΔ], ea, 0, function () {
      const a = jg.document.createElement("textarea");
      a.value = _x;
      jg.document.body.appendChild(a);
      a.select();
      jg.document.execCommand("copy");
      jg.document.body.removeChild(a);
    }, 182, 110, ca | aa, fa);
    this.buttons[u++].view = v;
    this.buttons[u] = Qf(87, 78, 0, [ΔⲆ.ᐃΔᐃᐃΔⵠⵠ, ΔⲆ.ᐃⲆⵠⵠⵠⵠⵠ, ΔⲆ.ⵠΔⵠⲆⲆᐃΔ], ea, 0, function () {
      (function () {
        if (Xx === Zx && jg.FB && jg.FB.getUserID()) {
          jg.FB.logout();
        }
        if (Wx === Zx && jy !== undefined) {
          jg.gapi.auth2.getAuthInstance().signOut();
          jy = Gm;
        }
        _x = undefined;
        $x = Bl;
        Zx = ij;
        Ex.ᐃⲆⲆΔⵠ = 0;
        Ex.ⲆⵠⵠΔⲆ = 0;
        Ex.ᐃⲆᐃⵠⲆ = 0;
        Ex.ΔΔΔΔⲆⵠᐃ();
        ⵠᐃᐃⲆⵠⲆⲆⵠΔ();
      })();
    }, 255, 110, ca | aa, fa);
    this.buttons[u++].view = v;
    this.buttons[u] = Qf(58, 64, 0, [ΔⲆ.ⵠⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆΔⵠⲆⵠΔⵠ, ΔⲆ.ᐃᐃⵠΔⲆΔⲆ], ea, 0, function () {
      U(F);
    }, 189, 118, ca | aa, fa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qf(497, 72, 0, [ΔⲆ.ⵠⵠᐃᐃⲆᐃⵠ, ΔⲆ.ΔⵠⲆⲆᐃⵠⵠ, ΔⲆ.ΔⵠⵠΔⲆⲆⲆ], ea, 0, function () {
      (function () {
        if (Wf) {
          $x = ⵠᐃΔᐃ.ⲆΔᐃΔΔΔᐃ(40);
          Zx = Yx;
          _x = Wf.userId;
          jg.ⵠⲆᐃⲆΔᐃⵠ();
          return;
        }
        jg.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ca | aa, fa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qf(497, 72, 0, [ΔⲆ.ΔⲆⵠⲆΔⲆᐃ, ΔⲆ.ⲆⵠΔⵠⲆⵠΔ, ΔⲆ.ⵠⲆⲆⵠⲆⵠⲆ], ea, 0, function () {
      jg.FB.login(function (a) {
        if (a.authResponse) {
          jg.FB.api("/me", function (a) {
            Zx = Xx;
            $x = jg.FB.getAuthResponse().accessToken;
            sy();
            jg.ⵠⲆᐃⲆΔᐃⵠ();
          });
        }
      });
    }, -130, 430, ca | aa, fa);
    this.buttons[u++].view = m;
    ⵠΔⲆΔⲆᐃⲆ = 20000;
    this.ⲆᐃⲆᐃⲆⵠⲆ = function (a) {
      var b = Ex.ⲆᐃⲆⵠᐃⲆΔ(a);
      var c = ⵠΔⲆΔⲆᐃⲆ * (b * b);
      return (a -= c) / ((b + 1) * (b + 1) * ⵠΔⲆΔⲆᐃⲆ - c);
    };
    this.ⲆᐃⲆⵠᐃⲆΔ = function (a) {
      return Math.floor(Math.sqrt(a / ⵠΔⲆΔⲆᐃⲆ));
    };
    this.ᐃⵠⵠΔΔΔΔⲆᐃ = function (a) {
      Ex.ΔΔΔⵠⲆ = Ex.ⲆᐃⲆⵠᐃⲆΔ(a);
      Ex.ΔⵠⲆᐃΔΔⲆ = Ex.ⲆᐃⲆᐃⲆⵠⲆ(a);
      Ex.ⵠⲆᐃⲆⵠⵠⵠ = 0;
      Ex.ᐃⲆᐃⵠⲆ = a;
    };
    this.ΔⵠⵠᐃᐃⵠⲆⲆⵠ = function (a) {
      Ex.buttons[Ex.ⲆⲆⵠⵠΔᐃᐃ].info.active = 0;
      Ex.buttons[Ex.ΔᐃΔⵠΔⵠⲆ].info.active = 1;
      Ex.buttons[Ex.ⵠⵠΔⵠᐃΔⲆ].info.active = 1;
      n();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = jg.decodeURIComponent(jg.escape(jg.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      Ex.ⲆⵠⵠΔⲆ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      Ex.ᐃⲆΔᐃΔⵠΔ = b;
      C.ᐃⵠⵠΔΔΔΔⲆᐃ(c.score);
      Ex.ᐃⲆᐃⵠⲆ = c.score;
      Ex.ᐃᐃⲆᐃᐃ = c.kill;
      Ex.ΔⲆᐃΔⵠΔΔ = c.death;
      Ex.time = c.time;
      Ex.ΔΔᐃᐃⲆᐃⵠ = c.bestScore;
      Ex.ⲆⵠⵠⲆⲆⲆⵠ = c.bestKill;
      Ex.ⵠᐃᐃΔⵠⲆⲆ = c.bestTime;
      Ex.ⵠⵠⲆΔᐃⵠΔ = c.scoreTotal;
      Ex.ᐃⲆΔⵠⵠⵠⲆ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (Ex.ᐃⲆΔⵠⵠⵠⲆ === ij) {
        Ex.ᐃⲆΔⵠⵠⵠⲆ = 0;
      }
      Ex.ⵠΔᐃⵠⵠᐃΔ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        Ex.ⵠΔᐃⵠⵠᐃΔ = Date.now() + Number(a.privateServerTime);
      }
      Ex.ᐃⲆⲆΔⵠ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        Ex.ᐃⲆⲆΔⵠ = Date.now() + Number(a.kit);
      }
      var d = ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ;
      for (var e = 0; a.skins.length > e; e++) {
        var f = a.skins[e];
        if (f > 0) {
          for (var i = 0; i < d.length; i++) {
            if (e === d[i].id) {
              C.unlock.ⵠⲆΔΔ[i] = 1;
            }
          }
        }
      }
      d = ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ;
      e = 0;
      for (; a.accessories.length > e; e++) {
        if ((f = a.accessories[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (d[i].id === e) {
              C.unlock.ᐃᐃⲆΔⵠ[i] = 1;
            }
          }
        }
      }
      d = ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ;
      e = 0;
      for (; a.books.length > e; e++) {
        if ((f = a.books[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (e === d[i].id) {
              C.unlock.ⲆΔⵠΔΔ[i] = 1;
            }
          }
        }
      }
      d = ᐃᐃⵠⵠ.ⲆⲆⲆⲆ;
      e = 0;
      for (; a.bags.length > e; e++) {
        if ((f = a.bags[e]) > 0) {
          for (i = 0; d.length > i; i++) {
            if (e === d[i].id) {
              C.unlock.ΔΔⲆᐃⵠ[i] = 1;
            }
          }
        }
      }
      d = ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ;
      e = 0;
      for (; a.crates.length > e; e++) {
        if ((f = a.crates[e]) > 0) {
          for (i = 0; i < d.length; i++) {
            if (e === d[i].id) {
              C.unlock.ⵠⵠΔⲆⲆ[i] = 1;
              C.unlock.Δᐃⵠⵠᐃ[i] = 1;
            }
          }
        }
      }
    };
    this.ⲆΔΔⵠⲆΔⲆⵠⵠ = function () {
      jg.ⵠⲆᐃⲆΔᐃⵠ = function () {
        U(F);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Ux + "login?token=" + $x + "&type=" + Zx + (Wf ? "&userId=" + Wf.userId + "&userInfo=" + Wf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(C.ΔⵠⵠᐃᐃⵠⲆⲆⵠ);
      };
      if (ay === 1) {
        jg.ⵠⲆᐃⲆΔᐃⵠ();
      }
    };
    jg.ⵠᐃᐃⲆⵠⲆⲆⵠΔ = function () {
      Ex.buttons[Ex.ⲆⲆⵠⵠΔᐃᐃ].info.active = 1;
      Ex.buttons[Ex.ΔᐃΔⵠΔⵠⲆ].info.active = 0;
      Ex.buttons[Ex.ⵠⵠΔⵠᐃΔⲆ].info.active = 0;
      U(F);
    };
    this.ΔᐃΔᐃᐃ = function () {
      return Ex.buttons[Ex.ΔᐃΔⵠΔⵠⲆ].info.active;
    };
    this.buttons[u] = Qf(461, 105, 0, [ΔⲆ.ⲆⵠΔⵠᐃΔᐃ, ΔⲆ.ᐃⲆⵠⲆⲆⵠⲆ, ΔⲆ.ⲆᐃⵠΔⲆᐃΔ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        U(w);
      } else {
        U(m);
      }
    }, -100, 80, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(157, 158, 0, [ΔⲆ.ΔΔᐃΔΔⵠᐃ, ΔⲆ.ᐃΔᐃΔⵠⲆᐃ, ΔⲆ.ᐃⲆᐃⵠⵠⵠⵠ], ea, 0, function () {
      jg.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ca | aa, fa);
    this.buttons[u++].view = G;
    this.buttons[u] = Qf(66, 73, 0, [ΔⲆ.ᐃⲆΔⲆⵠⲆᐃ, ΔⲆ.ᐃⲆⲆⵠⲆⵠⲆ, ΔⲆ.ⵠⲆⵠⲆⲆⵠⲆ], ea, 0, undefined, -68, 340, ca | aa, fa);
    this.buttons[u++].view = G;
    this.buttons[u] = Qf(66, 73, 0, [ΔⲆ.ᐃΔⵠᐃΔΔⵠ, ΔⲆ.ⲆⲆⵠᐃⵠⲆᐃ, ΔⲆ.ⲆᐃⲆΔᐃⲆᐃ], ea, 0, undefined, -30, 340, ca | aa, fa);
    this.buttons[u++].view = G;
    this.ⲆᐃⲆⲆΔⲆΔᐃⵠ = u;
    this.buttons[u] = Qf(97, 66, 0, [ΔⲆ.ΔΔᐃᐃⲆⵠⲆ, ΔⲆ.ⲆⵠⵠᐃᐃⵠⲆ, ΔⲆ.ⲆᐃΔⲆⵠᐃΔ], ea, 0, function () {
      ry(undefined, undefined, Ex.ᐃⵠⲆⵠⵠⵠᐃ);
    }, -14, 151, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⵠᐃᐃⲆᐃΔΔ = u;
    this.buttons[u] = Qf(135, 66, 0, [ΔⲆ.ⵠΔΔⲆᐃΔΔ, ΔⲆ.ⲆᐃⵠᐃΔⲆⲆ, ΔⲆ.ⲆⲆⵠⵠΔⵠⲆ], ea, 0, function () {
      ry(undefined, Bl, Ex.ⵠᐃᐃⲆᐃΔΔ);
    }, 37.5, 151, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ᐃᐃⲆⵠᐃᐃΔ = u;
    this.buttons[u] = Qf(160, 66, 0, [ΔⲆ.ⲆᐃⵠⵠᐃⲆⵠ, ΔⲆ.ⵠΔᐃⵠᐃᐃⲆ, ΔⲆ.ᐃⵠᐃⵠⲆᐃᐃ], ea, 0, function () {
      ry(Sa, undefined, Ex.ᐃᐃⲆⵠᐃᐃΔ);
    }, 107.5, 151, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ᐃⵠⲆⵠⵠⵠᐃ = u;
    this.buttons[u] = Qf(207, 66, 0, [ΔⲆ.ⲆΔΔⵠⵠΔᐃ, ΔⲆ.ΔⲆⵠⲆΔᐃᐃ, ΔⲆ.ⲆⵠⵠⲆⵠΔᐃ], ea, 0, function () {
      ry(Gj, undefined, Ex.ᐃⵠⲆⵠⵠⵠᐃ);
    }, 190.5, 151, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ᐃᐃⵠⲆⵠⵠⲆ = u;
    this.buttons[u] = Qf(144, 66, 0, [ΔⲆ.ⲆΔᐃᐃΔᐃⲆ, ΔⲆ.ⲆΔΔⲆⲆⲆΔ, ΔⲆ.ⲆᐃΔᐃΔΔⲆ], ea, 0, function () {
      ry(Ex.ᐃᐃⵠⲆⵠⵠⲆ);
    }, 103.5, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ΔᐃⲆⵠΔΔⵠ = u;
    this.buttons[u] = Qf(124, 66, 0, [ΔⲆ.ⲆᐃᐃⵠᐃⲆΔ, ΔⲆ.ᐃΔⵠΔΔᐃᐃ, ΔⲆ.ⵠΔᐃΔᐃⲆᐃ], ea, 0, function () {
      ry(Ex.ΔᐃⲆⵠΔΔⵠ);
    }, 177.5, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⲆΔⲆⲆᐃΔΔ = u;
    this.buttons[u] = Qf(104, 66, 0, [ΔⲆ.ⲆᐃΔΔΔⲆᐃ, ΔⲆ.ⲆⲆⲆΔⵠⵠⵠ, ΔⲆ.ᐃΔᐃᐃᐃⵠΔ], ea, 0, function () {
      ry(Ex.ⲆΔⲆⲆᐃΔΔ);
    }, 242, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⵠⵠⵠᐃᐃΔⲆ = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ΔⲆᐃⵠΔΔⲆ, ΔⲆ.ΔΔⵠⵠⲆᐃΔ, ΔⲆ.ΔᐃΔⲆᐃᐃⲆ], ea, 0, function () {
      ry(undefined, undefined, undefined, Ex.ⵠⵠⵠᐃᐃΔⲆ);
    }, -185, 528, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⲆⵠⵠΔⵠᐃᐃ = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ⲆᐃᐃΔⲆᐃΔ, ΔⲆ.ᐃⵠⵠᐃⵠΔⲆ, ΔⲆ.ⵠΔΔⲆⲆⵠⲆ], ea, 0, function () {
      ry(undefined, undefined, undefined, Ex.ⲆⵠⵠΔⵠᐃᐃ);
    }, -149, 528, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⲆⵠᐃⲆⵠⵠᐃ = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ⲆⲆⲆⵠᐃⵠΔ, ΔⲆ.ⲆⵠⵠⲆⲆΔⵠ, ΔⲆ.ⲆΔⲆⲆⵠΔⵠ], ea, 0, function () {
      ry(ij, Bl, Ij, Ex.ⲆⵠᐃⲆⵠⵠᐃ);
    }, -113, 528, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⲆⵠⲆᐃⲆᐃⵠ = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ⲆⲆΔⲆⲆᐃⵠ, ΔⲆ.ⵠΔⲆⲆΔⵠⲆ, ΔⲆ.ΔⲆΔⵠⲆᐃᐃ], ea, 0, function () {
      ry(undefined, undefined, fo, Ex.ⲆⵠⲆᐃⲆᐃⵠ);
    }, -77, 528, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⵠᐃⲆⲆᐃⵠᐃ = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ᐃⵠⲆᐃⵠⲆᐃ, ΔⲆ.ΔᐃΔᐃΔⲆΔ, ΔⲆ.ⲆᐃⲆᐃᐃΔⵠ], ea, 0, function () {
      ry(undefined, undefined, undefined, Ex.ⵠᐃⲆⲆᐃⵠᐃ);
    }, -41, 528, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ΔᐃΔᐃⲆᐃⵠ = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ΔⲆⲆΔΔᐃΔ, ΔⲆ.ⲆΔⵠΔᐃΔᐃ, ΔⲆ.ᐃⵠⵠⲆⲆΔⵠ], ea, 0, function () {
      ry(undefined, Bl, fh, Ex.ΔᐃΔᐃⲆᐃⵠ);
    }, -5, 528, ca | aa, fa);
    this.buttons[u++].view = f;
    this.buttons[u] = Qf(232, 352, 0, [ΔⲆ.ⲆᐃⵠΔⲆΔΔ, ΔⲆ.ⵠᐃΔΔⲆⲆᐃ, ΔⲆ.ⲆⵠⵠΔΔΔⲆ], ea, 0, function () {
      xy(300);
    }, -330, 135, ca | aa, fa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qf(232, 352, 0, [ΔⲆ.ⲆᐃⲆⲆΔⲆⵠ, ΔⲆ.ΔᐃΔΔⲆᐃᐃ, ΔⲆ.ⵠⵠⵠΔⵠΔᐃ], ea, 0, function () {
      xy(600);
    }, -195, 135, ca | aa, fa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qf(243, 374, 0, [ΔⲆ.ᐃⲆᐃΔᐃⵠΔ, ΔⲆ.ᐃⵠΔᐃΔⲆΔ, ΔⲆ.ΔⲆᐃΔᐃⵠⵠ], ea, 0, function () {
      xy(2600);
    }, -60, 130, ca | aa, fa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qf(232, 352, 0, [ΔⲆ.ⵠΔⲆᐃⲆᐃⵠ, ΔⲆ.ᐃᐃΔᐃⵠᐃⵠ, ΔⲆ.ΔⵠΔⵠⲆⵠⵠ], ea, 0, function () {
      xy(7000);
    }, 78, 135, ca | aa, fa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qf(243, 374, 0, [ΔⲆ.ΔᐃᐃⵠⵠΔᐃ, ΔⲆ.ⵠᐃᐃⲆⵠⵠΔ, ΔⲆ.ⵠᐃⵠΔΔᐃⵠ], ea, 0, function () {
      xy(20000);
    }, 213, 130, ca | aa, fa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qf(58, 64, 0, [ΔⲆ.ⵠⵠᐃᐃΔⵠⵠ, ΔⲆ.ⲆΔⵠⲆⵠΔⵠ, ΔⲆ.ᐃᐃⵠΔⲆΔⲆ], ea, 0, function () {
      U(p);
    }, 300, 88, ca | aa, fa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qf(323, 112, 0, [ΔⲆ.ⵠⲆⵠⲆⵠᐃⵠ, ΔⲆ.ⵠᐃⵠᐃⵠᐃᐃ, ΔⲆ.ᐃᐃⲆᐃΔⲆⲆ], ea, 0, function () {
      U(E);
      Fa.ᐃᐃΔⲆᐃ();
    }, -315, 185, ca | aa, fa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qf(323, 112, 0, [ΔⲆ.ΔⲆⵠΔΔⵠⲆ, ΔⲆ.ᐃᐃΔⲆᐃᐃⲆ, ΔⲆ.ΔⲆⲆᐃᐃⲆⲆ], ea, 0, function () {
      U(L);
      Ka.ᐃᐃΔⲆᐃ();
    }, -315, 321, ca | aa, fa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qf(323, 112, 0, [ΔⲆ.ⵠⲆⲆᐃᐃΔᐃ, ΔⲆ.ᐃⲆⵠΔΔⲆⵠ, ΔⲆ.ᐃᐃΔⵠᐃᐃⵠ], ea, 0, function () {
      U(K);
      Ga.ᐃᐃΔⲆᐃ();
    }, 153, 185, ca | aa, fa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qf(323, 112, 0, [ΔⲆ.ᐃΔⵠΔⵠⲆᐃ, ΔⲆ.ⲆΔΔⲆΔⲆⵠ, ΔⲆ.ΔᐃⲆᐃᐃΔⲆ], ea, 0, function () {
      U(M);
      Ha.ᐃᐃΔⲆᐃ();
    }, 153, 321, ca | aa, fa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qf(323, 112, 0, [ΔⲆ.ΔⲆⲆⵠⲆΔΔ, ΔⲆ.ⲆᐃⵠⵠⵠⲆᐃ, ΔⲆ.ⵠⵠⲆⲆⲆⲆᐃ], ea, 0, function () {
      U(J);
      Ia.ᐃᐃΔⲆᐃ();
    }, 153, 463, ca | aa, fa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qf(323, 112, 0, [ΔⲆ.ⵠᐃⵠΔΔⵠᐃ, ΔⲆ.ΔⲆⲆᐃᐃⵠⲆ, ΔⲆ.ᐃⲆᐃⲆᐃᐃⲆ], ea, 0, function () {
      U(Q);
      Ja.ᐃᐃΔⲆᐃ();
    }, -315, 463, ca | aa, fa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qf(327, 117, 0, [ΔⲆ.ΔⲆΔᐃΔΔΔ, ΔⲆ.ᐃⵠⲆⵠⵠᐃΔ, ΔⲆ.ΔⵠⵠᐃᐃᐃⲆ], ea, 0, function () {
      U(T);
    }, 155, 70, Z, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = Qf(130, 129, 0, [ΔⲆ.ⵠⵠΔⲆⲆⵠᐃ, ΔⲆ.ΔⲆⵠⲆᐃⲆⲆ, ΔⲆ.ⵠⲆⵠᐃᐃΔⵠ], ea, 0, function () {
      P(y, fa, "none");
      U(p);
    }, 10, 40, ca | aa, fa);
    this.buttons[u++].view = y;
    this.buttons[u] = Qf(130, 129, 0, [ΔⲆ.ⵠⵠΔⲆⲆⵠᐃ, ΔⲆ.ΔⲆⵠⲆᐃⲆⲆ, ΔⲆ.ⵠⲆⵠᐃᐃΔⵠ], ea, 0, function () {
      P(k, fa, "none");
      U(p);
    }, 10, 40, ca | aa, fa);
    this.buttons[u++].view = k;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 200, 140, ca | aa, fa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qf(524, 110, 0, [ΔⲆ.ⵠΔⵠᐃⲆⵠᐃ, ΔⲆ.ᐃΔΔᐃΔᐃⵠ, ΔⲆ.ⲆⲆΔⲆᐃⲆⵠ], ea, 0, function () {
      qy("Atlanta");
    }, -265, 300, ca | aa, fa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qf(523, 110, 0, [ΔⲆ.ᐃⵠΔⵠⵠⵠⵠ, ΔⲆ.ΔᐃΔᐃⵠⵠΔ, ΔⲆ.ⵠᐃⵠⵠΔΔⲆ], ea, 0, function () {
      qy("LosAngeles");
    }, 5, 300, ca | aa, fa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qf(344, 110, 0, [ΔⲆ.ⲆΔΔᐃⲆΔⵠ, ΔⲆ.ΔᐃⲆΔⲆΔᐃ, ΔⲆ.ⵠⵠᐃᐃⲆᐃΔ], ea, 0, function () {
      qy("Frankfurt");
    }, -265, 365, ca | aa, fa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qf(344, 110, 0, [ΔⲆ.ⲆᐃᐃᐃᐃΔⵠ, ΔⲆ.ΔⵠΔᐃⲆⵠⲆ, ΔⲆ.ⵠⲆⲆᐃⲆᐃᐃ], ea, 0, function () {
      qy("Osaka");
    }, 100, 365, ca | aa, fa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qf(344, 110, 0, [ΔⲆ.ⲆⵠⲆⵠΔΔⲆ, ΔⲆ.ᐃⲆⵠΔⲆⲆⵠ, ΔⲆ.ⵠΔⵠᐃⵠΔⵠ], ea, 0, function () {
      qy("Sydney");
    }, -86, 365, ca | aa, fa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(O);
    }, 224, 140, ca | aa, fa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qf(230, 352, 0, [ΔⲆ.Ⲇⵠⵠⵠⵠᐃⵠ, ΔⲆ.ⲆⵠΔⲆⵠᐃΔ, ΔⲆ.ⲆⵠⵠᐃΔΔΔ], ea, 0, function () {
      xy(350);
    }, -280, 240, ca | aa, fa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qf(230, 352, 0, [ΔⲆ.ΔΔⲆⵠⲆⵠΔ, ΔⲆ.ⲆᐃᐃΔᐃΔΔ, ΔⲆ.ΔᐃᐃⵠⲆⵠⲆ], ea, 0, function () {
      xy(700);
    }, -130, 240, ca | aa, fa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qf(230, 352, 0, [ΔⲆ.ⵠⲆΔⲆⲆⲆⵠ, ΔⲆ.ᐃΔⵠⵠⵠⵠᐃ, ΔⲆ.ΔΔⵠᐃⲆᐃⵠ], ea, 0, function () {
      xy(1400);
    }, 20, 240, ca | aa, fa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qf(230, 352, 0, [ΔⲆ.ⵠⲆΔⲆᐃᐃⵠ, ΔⲆ.ᐃⲆΔⲆⲆⵠΔ, ΔⲆ.ΔⵠᐃⵠΔⵠⵠ], ea, 0, function () {
      xy(3000);
    }, 170, 240, ca | aa, fa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qf(105, 119, 0, [ΔⲆ.ⵠⲆⲆⵠᐃⲆⵠ, ΔⲆ.ᐃᐃΔⵠⵠⵠⲆ, ΔⲆ.ΔᐃⵠΔⲆᐃΔ], ea, 0, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = jg.document.createElement("textarea");
      b.value = Hf + "?server=" + a[1] + "&region=" + a[0];
      jg.document.body.appendChild(b);
      b.select();
      jg.document.execCommand("copy");
      jg.document.body.removeChild(b);
    }, 105, 310, ca | aa, fa);
    this.buttons[u++].view = S;
    this.buttons[u] = Qf(105, 119, 0, [ΔⲆ.ⲆⲆⲆⵠⲆΔᐃ, ΔⲆ.ⵠⵠΔᐃᐃΔⵠ, ΔⲆ.ⲆΔᐃⲆⵠΔᐃ], ea, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Ux + "rebootServer?token=" + $x + "&userid=" + _x);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Hf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ca | aa, fa);
    this.buttons[u++].view = S;
    this.buttons[u] = Qf(105, 119, 0, [ΔⲆ.ⲆⲆⵠΔⵠΔᐃ, ΔⲆ.ⲆΔᐃᐃⵠᐃⲆ, ΔⲆ.ΔⵠΔⵠⵠⲆᐃ], ea, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Ux + "restartServer?token=" + $x + "&userid=" + _x);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Hf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 170, 310, ca | aa, fa);
    this.buttons[u++].view = S;
    this.buttons[u] = Qf(204, 115, 0, [ΔⲆ.ⵠΔⲆΔΔᐃᐃ, ΔⲆ.ᐃΔΔⲆⲆⵠⵠ, ΔⲆ.ᐃᐃᐃⲆᐃᐃΔ], ea, 0, function () {
      jg.open("./commands.html", "_blank");
    }, -265, 490, ca | aa, fa);
    this.buttons[u++].view = S;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⵠⵠⵠⲆΔⲆⲆ, ΔⲆ.ᐃⵠⲆⵠⵠΔΔ, ΔⲆ.ⵠⵠΔⵠⵠⵠⵠ], ea, 0, function () {
      U(A);
    }, -210, 170, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⲆⲆⵠⲆⵠⵠΔ, ΔⲆ.ⲆⵠᐃᐃΔⲆⵠ, ΔⲆ.ᐃⲆᐃᐃᐃⲆⲆ], ea, 0, function () {
      U(B);
    }, 70, 170, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⲆᐃⲆᐃᐃⲆᐃ, ΔⲆ.ΔᐃᐃⵠΔΔᐃ, ΔⲆ.ⵠⲆΔⵠⲆⵠⵠ], ea, 0, function () {
      U(x);
    }, 70, 204, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⵠᐃΔΔⵠΔΔ, ΔⲆ.ΔⲆⵠΔᐃⵠⲆ, ΔⲆ.ⵠⲆΔⵠⵠΔᐃ], ea, 0, function () {
      U(D);
    }, -210, 204, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⵠᐃΔΔⵠΔΔ, ΔⲆ.ΔⲆⵠΔᐃⵠⲆ, ΔⲆ.ⵠⲆΔⵠⵠΔᐃ], ea, 0, function () {
      U(I);
    }, 70, 238, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⵠᐃΔΔⵠΔΔ, ΔⲆ.ΔⲆⵠΔᐃⵠⲆ, ΔⲆ.ⵠⲆΔⵠⵠΔᐃ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        wy(0, 300);
      } else {
        U(m);
      }
    }, 307, 205, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⲆᐃⲆΔⲆᐃⲆ, ΔⲆ.ᐃᐃⵠⲆΔⲆⲆ, ΔⲆ.ᐃⵠⲆⲆⲆΔⲆ], ea, 0, function () {
      U(H);
    }, -210, 238, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(145, 69, 0, [ΔⲆ.ⲆᐃⲆΔⲆᐃⲆ, ΔⲆ.ᐃᐃⵠⲆΔⲆⲆ, ΔⲆ.ᐃⵠⲆⲆⲆΔⲆ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        wy(1, 600);
      } else {
        U(m);
      }
    }, 307, 239, ca | aa, fa);
    this.buttons[u++].view = p;
    this.buttons[u] = Qf(192, 101, 0, [ΔⲆ.ⵠⲆᐃⲆⲆᐃΔ, ΔⲆ.ΔⲆⲆⵠᐃⵠⵠ, ΔⲆ.ᐃⵠᐃⵠΔⲆⲆ], ea, 0, function () {
      ky();
    }, -100, 250, ca | aa, fa);
    this.buttons[u++].view = q;
    this.buttons[u] = Qf(192, 104, 0, [ΔⲆ.ⲆᐃⲆᐃΔⵠⵠ, ΔⲆ.ⲆⲆⵠΔᐃΔᐃ, ΔⲆ.ᐃᐃⵠⲆⵠⲆⲆ], ea, 0, function () {
      ky();
    }, -100, 239, ca | aa, fa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qf(192, 101, 0, [ΔⲆ.ⲆⲆᐃⵠⵠΔⵠ, ΔⲆ.ᐃΔᐃᐃᐃΔᐃ, ΔⲆ.ⲆⲆΔᐃᐃⲆⲆ], ea, 0, function () {
      U(v);
    }, 10, 250, ca | aa, fa);
    this.buttons[u++].view = q;
    this.buttons[u] = Qf(192, 104, 0, [ΔⲆ.ⲆⲆᐃⲆΔⵠᐃ, ΔⲆ.ⲆⵠᐃΔΔΔⲆ, ΔⲆ.ⵠΔᐃᐃⲆⵠΔ], ea, 0, function () {
      U(v);
    }, 10, 239, ca | aa, fa);
    this.buttons[u++].view = N;
    ⲆⵠΔᐃⲆ = [];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ⲆⲆⵠΔΔ] = [ΔⲆ.ΔⲆᐃᐃΔᐃⵠ, ΔⲆ.ⵠⵠⲆΔⵠⲆⲆ, ΔⲆ.ⲆΔΔⲆΔⵠⵠ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⲆΔⲆ] = [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⵠᐃᐃ] = [ΔⲆ.ⲆᐃⵠΔⵠᐃᐃ, ΔⲆ.ΔΔⵠΔΔΔⲆ, ΔⲆ.ⵠΔᐃᐃⵠᐃΔ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⵠⵠᐃ] = [ΔⲆ.ᐃΔΔⲆⵠΔⵠ, ΔⲆ.ⲆᐃΔᐃⵠᐃΔ, ΔⲆ.ᐃⲆᐃⵠᐃΔΔ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ⵠⲆᐃᐃ] = [ΔⲆ.ᐃΔⲆⵠᐃΔⵠ, ΔⲆ.ⲆⲆΔⵠⵠΔΔ, ΔⲆ.ΔⵠⲆⵠⵠΔⲆ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃΔⲆᐃ] = [ΔⲆ.ⵠⵠΔΔⵠⵠⲆ, ΔⲆ.ΔⵠΔⵠΔᐃⵠ, ΔⲆ.ⵠⵠᐃⵠᐃΔᐃ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.Ⲇⵠⵠᐃ] = [ΔⲆ.ⵠΔⲆⵠᐃᐃⵠ, ΔⲆ.ⵠᐃΔⲆΔᐃᐃ, ΔⲆ.ⵠⲆⵠⲆⲆⵠΔ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ΔⲆᐃⵠᐃ] = [ΔⲆ.ⵠᐃΔΔⵠⲆΔ, ΔⲆ.ΔⵠΔΔΔⵠΔ, ΔⲆ.ⵠΔⲆᐃⵠⲆᐃ];
    ⲆⵠΔᐃⲆ[ⵠⲆⲆ.ᐃⵠⲆⲆᐃΔⵠ] = [ΔⲆ.ΔΔⲆⲆΔΔⲆ, ΔⲆ.ᐃⵠΔⲆⲆᐃΔ, ΔⲆ.ᐃⲆΔᐃⵠΔΔ];
    ⵠᐃⵠⵠᐃⲆⵠ = u;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Ua, -29, 205, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 300, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Qq, -29, 395, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, fo, 65, 300, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Ua, 159, 300, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ea, 0, fh, 260, 315, ca | aa, fa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(c);
    }, -320, 470, ca | aa, fa);
    this.buttons[u++].view = E;
    ⵠᐃⵠᐃΔⲆᐃΔⲆ = u;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Mh, -29, 205, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 300, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Cs, -29, 395, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Es, 65, 205, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 300, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Gj, 159, 300, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ea, 0, Qq, 260, 315, ca | aa, fa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(c);
    }, -320, 470, ca | aa, fa);
    this.buttons[u++].view = L;
    ⲆⵠΔⵠΔⵠⲆΔⵠ = u;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, wl, -29, 205, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Cs, -29, 300, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Qq, 65, 300, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, hs, 159, 300, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ea, 0, Es, -61, 315, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ea, 0, undefined, 260, 315, ca | aa, fa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(c);
    }, -320, 470, ca | aa, fa);
    this.buttons[u++].view = Q;
    ⵠᐃᐃᐃⲆᐃⲆⲆΔ = u;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 205, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 300, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Mh, 65, 205, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 300, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Gm, 65, 395, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, $g, 159, 205, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 300, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ea, 0, wl, -61, 315, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ea, 0, Gm, 260, 315, ca | aa, fa);
    this.buttons[u++].view = K;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(c);
    }, -320, 470, ca | aa, fa);
    this.buttons[u++].view = K;
    ⵠⲆᐃⲆⵠᐃⲆⲆΔ = u;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, wl, -29, 205, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, fh, -29, 300, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 300, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 395, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Qq, 159, 205, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Ua, 159, 300, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Gj, 159, 395, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ea, 0, Ij, 260, 315, ca | aa, fa);
    this.buttons[u++].view = M;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(c);
    }, -320, 470, ca | aa, fa);
    this.buttons[u++].view = M;
    ⵠⵠⲆⵠⵠᐃᐃⵠᐃ = u;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 205, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Gj, -29, 300, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, -29, 395, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 65, 205, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Cs, 65, 300, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Gj, 65, 395, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 205, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, Ua, 159, 300, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(178, 182, 0, [ΔⲆ.ᐃⲆⲆΔ, ΔⲆ.ⵠᐃΔΔ, ΔⲆ.ⵠⵠᐃᐃ], ea, 0, undefined, 159, 395, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃⵠⵠΔᐃΔΔ, ΔⲆ.ⵠΔᐃᐃΔΔⲆ, ΔⲆ.ΔΔᐃⲆⲆⲆⲆ], ea, 0, undefined, -61, 315, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(39, 122, 0, [ΔⲆ.ᐃΔΔⵠⵠᐃⵠ, ΔⲆ.ᐃᐃᐃⲆⲆᐃΔ, ΔⲆ.ⵠΔⵠⲆⵠⲆⲆ], ea, 0, undefined, 260, 315, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(c);
    }, -320, 470, ca | aa, fa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qf(260, 260, 0, [ΔⲆ.ᐃᐃⲆⵠⲆⲆⵠ, ΔⲆ.ⲆΔⲆⲆΔⵠⵠ, ΔⲆ.ΔΔᐃⵠⵠΔΔ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        ty(3, 50);
      } else {
        U(m);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[u++].view = B;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 309, 180, ca | aa, fa);
    this.buttons[u++].view = B;
    this.buttons[u] = Qf(260, 260, 0, [ΔⲆ.ⵠᐃᐃⵠΔΔⲆ, ΔⲆ.ΔᐃΔⵠⲆⵠⲆ, ΔⲆ.ⵠⲆⲆΔΔᐃⲆ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        ty(0, 100);
      } else {
        U(m);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[u++].view = A;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 309, 180, ca | aa, fa);
    this.buttons[u++].view = A;
    this.buttons[u] = Qf(260, 260, 0, [ΔⲆ.ⲆᐃᐃΔⵠⵠΔ, ΔⲆ.ⲆΔⵠⵠΔᐃⲆ, ΔⲆ.ᐃΔΔⲆΔⵠΔ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        ty(4, 150);
      } else {
        U(m);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[u++].view = x;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 309, 180, ca | aa, fa);
    this.buttons[u++].view = x;
    this.buttons[u] = Qf(260, 260, 0, [ΔⲆ.ⲆΔⲆⲆᐃᐃⲆ, ΔⲆ.ⵠⵠΔⲆⵠᐃⵠ, ΔⲆ.ΔᐃⲆⲆⵠΔⲆ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        ty(1, 300);
      } else {
        U(m);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[u++].view = D;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 309, 180, ca | aa, fa);
    this.buttons[u++].view = D;
    this.buttons[u] = Qf(260, 260, 0, [ΔⲆ.ᐃΔⵠⲆⵠᐃⵠ, ΔⲆ.ᐃΔΔⲆᐃΔⲆ, ΔⲆ.ᐃᐃⵠⲆᐃᐃⲆ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        ty(2, 600);
      } else {
        U(m);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[u++].view = H;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 309, 180, ca | aa, fa);
    this.buttons[u++].view = H;
    this.buttons[u] = Qf(260, 260, 0, [ΔⲆ.ⲆΔⲆⲆᐃᐃⲆ, ΔⲆ.ⵠⵠΔⲆⵠᐃⵠ, ΔⲆ.ΔᐃⲆⲆⵠΔⲆ], ea, 0, function () {
      if (C.ΔᐃΔᐃᐃ()) {
        ty(5, 300);
      } else {
        U(m);
      }
    }, -65, 197, ca | aa, fa);
    this.buttons[u++].view = I;
    this.buttons[u] = Qf(115, 73, 0, [ΔⲆ.ΔΔⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆ, ΔⲆ.ⵠⵠⲆⲆⵠ], ea, 0, function () {
      U(p);
    }, 309, 180, ca | aa, fa);
    this.buttons[u++].view = I;
    var ua = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ᐃᐃⲆⲆΔⵠⵠ, ΔⲆ.ᐃΔΔᐃⵠΔⵠ, ΔⲆ.ΔⵠⲆΔᐃΔⵠ], ea, 0, function () {
      ta(fo, 0);
    }, -305, 132, ca | aa, fa);
    this.buttons[u++].view = v;
    var va = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ᐃᐃΔⲆⵠΔⵠ, ΔⲆ.ⲆΔⵠΔᐃⵠⵠ, ΔⲆ.ΔⵠⵠⵠⵠΔΔ], ea, 0, function () {
      ta(undefined, 1);
    }, -273, 132, ca | aa, fa);
    this.buttons[u++].view = v;
    var wa = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ⵠⲆᐃⵠⵠᐃᐃ, ΔⲆ.ΔⲆΔⵠΔᐃⵠ, ΔⲆ.ⲆⵠΔΔΔⲆΔ], ea, 0, function () {
      ta(Mh, 2);
    }, -241, 132, ca | aa, fa);
    this.buttons[u++].view = v;
    var xa = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ΔᐃⲆᐃⵠᐃᐃ, ΔⲆ.ⲆΔⵠⲆⲆᐃⲆ, ΔⲆ.ⲆⲆⲆΔᐃⵠⲆ], ea, 0, function () {
      ta(Ij, 3);
    }, -305, 165, ca | aa, fa);
    this.buttons[u++].view = v;
    var ya = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ⵠᐃⵠⲆⲆΔᐃ, ΔⲆ.ⵠΔⲆⲆΔᐃΔ, ΔⲆ.ΔⵠᐃⲆᐃᐃⲆ], ea, 0, function () {
      ta(hg, 4);
    }, -273, 165, ca | aa, fa);
    this.buttons[u++].view = v;
    var za = u;
    this.buttons[u] = Qf(46, 51, 0, [ΔⲆ.ⲆⵠⵠΔⲆⵠⵠ, ΔⲆ.ΔⵠⲆⲆⵠⲆΔ, ΔⲆ.ⵠⲆΔΔΔᐃⵠ], ea, 0, function () {
      ta(undefined, 5);
    }, -241, 165, ca | aa, fa);
    this.buttons[u++].view = v;
    var Aa = u;
    this.buttons[u] = Qf(460, 73, 0, [ΔⲆ.ΔⵠᐃⵠⵠᐃΔ, ΔⲆ.ᐃᐃⵠᐃⵠΔⵠ, ΔⲆ.ⲆⲆⵠΔⲆⲆⵠ], ea, 0, function () {
      ta(-1);
    }, -180, 170, ca | aa, fa);
    this.buttons[u++].view = v;
    var Ba = u;
    this.buttons[u] = Qf(222, 68, 0, [ΔⲆ.ᐃᐃⲆⲆⲆΔⵠ, ΔⲆ.ΔΔᐃⵠᐃᐃΔ, ΔⲆ.ⵠⲆᐃᐃᐃⵠⲆ], ea, 0, function () {
      ta(0);
    }, -180, 215, ca | aa, fa);
    this.buttons[u++].view = v;
    var Ca = u;
    this.buttons[u] = Qf(222, 68, 0, [ΔⲆ.ⵠᐃᐃᐃᐃⲆⵠ, ΔⲆ.ΔᐃⲆⵠⲆⲆᐃ, ΔⲆ.ⲆΔⲆΔⲆᐃⵠ], ea, 0, function () {
      ta(4);
    }, -180, 260, ca | aa, fa);
    this.buttons[u++].view = v;
    var Da = u;
    this.buttons[u] = Qf(222, 68, 0, [ΔⲆ.ᐃⵠᐃΔⲆⲆⲆ, ΔⲆ.ⲆΔⲆΔⵠΔᐃ, ΔⲆ.ᐃᐃΔᐃⲆᐃΔ], ea, 0, function () {
      ta(2);
    }, -60, 215, ca | aa, fa);
    this.buttons[u++].view = v;
    var Ea = u;
    this.buttons[u] = Qf(222, 68, 0, [ΔⲆ.Δⵠⵠⵠⵠⵠᐃ, ΔⲆ.ⲆΔΔⵠⲆⵠΔ, ΔⲆ.ΔⵠⵠΔᐃᐃᐃ], ea, 0, function () {
      ta(3);
    }, -60, 260, ca | aa, fa);
    this.buttons[u++].view = v;
    this.Δⵠᐃᐃᐃⵠⵠ = u;
    this.buttons[u] = Qf(143, 66, 0, [ΔⲆ.ᐃᐃⲆⲆᐃᐃⵠ, ΔⲆ.ᐃΔΔᐃⲆΔᐃ, ΔⲆ.ΔΔΔΔᐃΔᐃ], ea, 0, function () {
      ry(Gm, Ex.Δⵠᐃᐃᐃⵠⵠ);
    }, -298, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⲆᐃⵠᐃⵠΔⲆ = u;
    this.buttons[u] = Qf(104, 66, 0, [ΔⲆ.ᐃᐃⵠΔⵠΔⲆ, ΔⲆ.ΔᐃⵠⵠᐃΔᐃ, ΔⲆ.ᐃΔΔᐃⲆΔⵠ], ea, 0, function () {
      ry(undefined, Ex.ⲆᐃⵠᐃⵠΔⲆ);
    }, -223, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ΔⲆⲆᐃⲆⲆⲆ = u;
    this.buttons[u] = Qf(110, 66, 0, [ΔⲆ.ΔⵠΔΔⲆⲆᐃ, ΔⲆ.ⵠΔᐃᐃⲆΔⲆ, ΔⲆ.ᐃΔᐃⲆⵠᐃΔ], ea, 0, function () {
      ry(Gm, Ex.ΔⲆⲆᐃⲆⲆⲆ);
    }, -168, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ⲆᐃᐃᐃⲆⵠΔ = u;
    this.buttons[u] = Qf(88, 66, 0, [ΔⲆ.ᐃΔⲆⲆᐃⲆΔ, ΔⲆ.ᐃΔⵠⲆⲆⵠⲆ, ΔⲆ.ⲆᐃᐃⲆΔᐃⲆ], ea, 0, function () {
      ry(Gm, Ex.ⲆᐃᐃᐃⲆⵠΔ);
    }, -110, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.ᐃΔⵠᐃⲆΔᐃ = u;
    this.buttons[u] = Qf(88, 66, 0, [ΔⲆ.ΔΔᐃⵠΔⵠⲆ, ΔⲆ.ᐃⵠᐃⲆᐃⵠΔ, ΔⲆ.ΔⵠⲆΔᐃᐃⲆ], ea, 0, function () {
      ry(fh, Ex.ᐃΔⵠᐃⲆΔᐃ);
    }, -63, 110, ca | aa, fa);
    this.buttons[u++].view = f;
    this.buttons[u] = Qf(86, 44, 0, [ΔⲆ.ⲆᐃᐃⲆΔⵠⲆ, ΔⲆ.ΔᐃᐃΔΔᐃⲆ, ΔⲆ.ΔⵠⲆᐃⵠⵠᐃ], ea, 0, function () {
      jg.open("./terms.html", "_blank");
    }, 349, 290, ca | aa, fa);
    this.buttons[u++].view = p;
    var Fa = new e(ᐃᐃⵠⵠ.ⵠᐃΔⲆⵠ, ⵠᐃⵠⵠᐃⲆⵠ, function (a) {
      Ex.ⵠⲆΔΔ = a;
      if (Ex.unlock.ⵠⲆΔΔ[a] === 1) {
        ΔᐃⲆΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⲆΔΔ, this.unlock.ⵠⲆΔΔ);
    var Ga = new e(ᐃᐃⵠⵠ.ⲆⲆⲆⲆ, ⵠᐃᐃᐃⲆᐃⲆⲆΔ, function (a) {
      Ex.ΔΔⲆᐃⵠ = a;
      if (Ex.unlock.ΔΔⲆᐃⵠ[a] === 1) {
        ΔᐃⲆΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ΔΔⲆᐃⵠ, this.unlock.ΔΔⲆᐃⵠ);
    var Ha = new e(ᐃᐃⵠⵠ.Δⵠᐃᐃⵠ, ⵠⲆᐃⲆⵠᐃⲆⲆΔ, function (a) {
      Ex.ⲆΔⵠΔΔ = a;
      if (Ex.unlock.ⲆΔⵠΔΔ[a] === 1) {
        ΔᐃⲆΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆΔⵠΔΔ, this.unlock.ⲆΔⵠΔΔ);
    var Ia = new e(ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ, ⵠⵠⲆⵠⵠᐃᐃⵠᐃ, function (a) {
      Ex.Δᐃⵠⵠᐃ = a;
      if (Ex.unlock.Δᐃⵠⵠᐃ[a] === 1) {
        ΔᐃⲆΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.Δᐃⵠⵠᐃ, this.unlock.Δᐃⵠⵠᐃ);
    var Ja = new e(ᐃᐃⵠⵠ.ⵠⵠⲆⵠᐃ, ⲆⵠΔⵠΔⵠⲆΔⵠ, function (a) {
      Ex.ⵠⵠΔⲆⲆ = a;
      if (Ex.unlock.ⵠⵠΔⲆⲆ[a] === 1) {
        ΔᐃⲆΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠⵠΔⲆⲆ, this.unlock.ⵠⵠΔⲆⲆ);
    var Ka = new e(ᐃᐃⵠⵠ.ⵠⵠΔⲆᐃ, ⵠᐃⵠᐃΔⲆᐃΔⲆ, function (a) {
      Ex.ᐃᐃⲆΔⵠ = a;
      if (Ex.unlock.ᐃᐃⲆΔⵠ[a] === 1) {
        ΔᐃⲆΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃᐃⲆΔⵠ, this.unlock.ᐃᐃⲆΔⵠ);
    this.ᐃΔⵠᐃⵠⲆΔ = function (a) {
      Mx.ⵠΔΔⲆ = Ff(C.ⲆⲆ, a);
      for (var b = 0; b < C.buttons.length; b++) {
        if (ha === C.buttons[b].info.active) {
          C.buttons[b].ⵠⲆⵠⲆ(C.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        }
      }
    };
    this.ΔΔⵠⵠⵠᐃⲆ = function (a) {
      Mx.ⵠΔΔⲆ = Ff(C.ⲆⲆ, a);
      for (var b = 0; b < C.buttons.length; b++) {
        var c = C.buttons[b];
        if (c.info.active === ha && c.ⵠⲆⵠⲆ(C.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ᐃΔⲆⵠⲆⲆⲆ = ul;
    this.ΔⵠΔⲆⲆΔⵠ = function (a) {
      Mx.ⵠΔΔⲆ = Ff(C.ⲆⲆ, a);
      var b = false;
      for (var c = 0; C.buttons.length > c; c++) {
        if (C.buttons[c].info.active === ha) {
          b |= C.buttons[c].ⵠⲆⵠⲆ(C.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        }
      }
      if (C.ᐃΔⲆⵠⲆⲆⲆ !== b) {
        C.ᐃΔⲆⵠⲆⲆⲆ = b;
        d.style.cursor = b ? C.ⵠᐃᐃΔⲆⵠⲆ : C.ᐃⵠⵠⵠᐃΔⲆ;
      }
    };
    this.ΔⲆᐃⵠⲆᐃⵠ = function () {
      jg.addEventListener("mousedown", this.ᐃΔⵠᐃⵠⲆΔ, qa);
      jg.addEventListener("mouseup", this.ΔΔⵠⵠⵠᐃⲆ, na);
      jg.addEventListener("mousemove", this.ΔⵠΔⲆⲆΔⵠ, na);
    };
    this.ⲆᐃⲆⲆⲆΔⵠ = function () {
      jg.removeEventListener("mousedown", this.ᐃΔⵠᐃⵠⲆΔ, Bs);
      jg.removeEventListener("mouseup", this.ΔΔⵠⵠⵠᐃⲆ, false);
      jg.removeEventListener("mousemove", this.ΔⵠΔⲆⲆΔⵠ, false);
    };
  }
  function mx(b, c) {
    this.ⲆⲆ = b;
    this.ᐃ = c;
    var d = this;
    this.ΔⵠΔⵠΔΔᐃ = false;
    this.ⵠⵠⵠᐃⲆⲆⵠ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ᐃᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ΔⲆᐃᐃⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Gx.ᐃΔⲆΔⵠⵠⵠ.ΔᐃⲆⲆᐃⵠⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Zb[335] + " : " + Gx.ⵠⵠⲆ + "</div><div class=\"stats\"> " + Zb[334] + " : " + Gx.ᐃΔⲆΔⵠⵠⵠ.ᐃᐃⲆᐃᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Zb[333] + " : " + Gx.ᐃΔⲆΔⵠⵠⵠ.ᐃⲆᐃⵠⲆ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Gx.ᐃΔⲆΔⵠⵠⵠ.ⵠᐃΔⲆⵠΔᐃ + " " + Zb[332] + "</div></div><div id=\"shop_points\">" + Zb[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Zb[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Zb[330] + "</div></div><div id=\"bbback\">" + Zb[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", kx, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Hx.ΔⲆⵠᐃΔ(Ex.ⵠⲆᐃᐃΔ);
        }, na);
        document.getElementById("fffacebook").addEventListener("mouseup", jx, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Ux + "getBreadAndScore?userid=" + _x);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - Ex.ⲆⵠⵠΔⲆ;
              Ex.ⲆⵠⵠΔⲆ = b.b;
              Ex.ᐃⲆᐃⵠⲆ = b.s;
              Ex.ΔΔΔⵠⲆ = Ex.ⲆᐃⲆⵠᐃⲆΔ(Ex.ᐃⲆᐃⵠⲆ);
              Ex.ΔⵠⲆᐃΔΔⲆ = Ex.ⲆᐃⲆᐃⲆⵠⲆ(Ex.ᐃⲆᐃⵠⲆ);
              Ex.ⵠⲆᐃⲆⵠⵠⵠ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ᐃᐃⵠ();
      if (++g != 30) {
        jg.setTimeout(e, 33);
      } else {
        d.ᐃᐃⵠ();
      }
    }
    this.ΔⲆⵠᐃΔ = function (a) {
      if (d.ΔⵠΔⵠΔΔᐃ === is) {
        d.ΔⵠΔⵠΔΔᐃ = hl;
        f = a;
        i = -1;
        j();
        Qx();
      }
    };
    var i = -1;
    function j() {
      d.ᐃᐃⵠ();
      if (++i == 30) {
        d.stop();
        d.ⵠⵠⵠᐃⲆⲆⵠ.style.display = "none";
        f();
        return;
      }
      jg.setTimeout(j, 33);
    }
    this.ΔⲆΔⵠⵠ = ul;
    this.stop = function () {
      this.ΔⲆΔⵠⵠ = xo;
    };
    this.ⵠⲆᐃᐃΔ = function () {
      Sx();
      document.getElementById("game_body").style.backgroundColor = xs.ⵠᐃΔⲆΔ[Dx.time];
      d.ⵠⵠⵠᐃⲆⲆⵠ.ΔⲆᐃᐃⵠ();
      Ex.ⵠⲆⲆⵠΔ.style.display = "inline-block";
      d.ΔⲆΔⵠⵠ = true;
      d.ΔⵠΔⵠΔΔᐃ = true;
      i = -1;
      g = 0;
      e();
    };
    this.ᐃᐃⵠ = function () {
      this.ⵠⵠⵠᐃⲆⲆⵠ.translate.x = Math.floor(Eo - 275);
      this.ⵠⵠⵠᐃⲆⲆⵠ.translate.y = Math.floor(_o - this.ⵠⵠⵠᐃⲆⲆⵠ.height - 28);
      Ex.ⵠⲆⲆⵠΔ.translate.x = this.ⵠⵠⵠᐃⲆⲆⵠ.translate.x - 350;
      Ex.ⵠⲆⲆⵠΔ.translate.y = this.ⵠⵠⵠᐃⲆⲆⵠ.translate.y + 0;
      Ex.ⵠⲆⲆⵠΔ.ᐃᐃⵠ();
      if (g != 30 || i != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (i != -1) {
          a = -(1750 / (30 - i + 1) - 48);
        }
        this.ⵠⵠⵠᐃⲆⲆⵠ.translate.y -= a;
      }
      this.ⵠⵠⵠᐃⲆⲆⵠ.ᐃᐃⵠ();
    };
    this.ⲆᐃᐃⲆ = function () {
      Cp();
      Gx.alert.ⲆᐃᐃⲆ("#FFF", "#000");
    };
  }
  function nx(c, d) {
    var f = this;
    this.ⲆⲆ = c;
    this.ᐃ = d;
    if (jg.navigator.userAgent.indexOf("Edge") > -1) {
      this.ᐃⵠⵠⵠᐃΔⲆ = "default";
      this.ⵠᐃᐃΔⲆⵠⲆ = "pointer";
    } else {
      this.ᐃⵠⵠⵠᐃΔⲆ = "url('img/cursor0.png'), default";
      this.ⵠᐃᐃΔⲆⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠᐃⲆⵠⵠᐃᐃ = 1;
    this.ᐃᐃⵠᐃΔⵠᐃ = 1;
    this.ᐃⲆΔΔΔΔⵠ = 1;
    this.ⵠᐃⵠⲆⲆᐃⲆ = 1;
    this.ⵠⲆΔⲆΔⲆᐃᐃⲆ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ⵠᐃⲆΔ = {
      ⲆΔⵠᐃΔΔΔ: Qf(60, 60, 0, Ⲇⵠ[782]),
      ᐃΔⵠᐃⲆⲆⲆ: Qf(60, 60, 0, Ⲇⵠ[783])
    };
    this.sign = {
      open: false,
      ᐃΔⵠⲆⵠⲆᐃᐃⲆ: 0,
      ⵠᐃᐃΔΔⵠⵠ: document.getElementById("sign_object"),
      ⲆᐃⵠΔᐃᐃⵠ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Qf(60, 60, 0, Ⲇⵠ[803]),
      ⵠⵠⲆΔᐃΔΔ: function () {
        var a = Math.floor(Math.floor((3 + Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) * (10 + Ⲇⵠ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 150) + "px";
        this.style.top = Math.floor(_o - 115) + "px";
      },
      ΔⲆⵠᐃΔ: function () {
        Jx.sign.style.display = "none";
        Jx.sign.open = ul;
      },
      select: function () {
        Jx.sign.open = !Jx.sign.open;
        if (Jx.sign.open) {
          Jx.sign.style.display = "inline-block";
        } else {
          Jx.sign.style.display = "none";
        }
      },
      ok: function () {
        Ix.ΔΔⲆⵠΔⲆⵠⲆᐃ(Gx.sign.ΔᐃⲆΔΔ, Jx.sign.ⲆᐃⵠΔᐃᐃⵠ);
        Jx.sign.select();
      },
      up: function () {
        Jx.sign.ⲆᐃⵠΔᐃᐃⵠ = Jx.sign.ⲆᐃⵠΔᐃᐃⵠ === 0 ? 3 : Jx.sign.ⲆᐃⵠΔᐃᐃⵠ - 1;
        Jx.sign.ⵠᐃᐃΔΔⵠⵠ.src = "./img/sign" + Jx.sign.ⲆᐃⵠΔᐃᐃⵠ + ".png";
      },
      down: function () {
        Jx.sign.ⲆᐃⵠΔᐃᐃⵠ = (Jx.sign.ⲆᐃⵠΔᐃᐃⵠ + 1) % 4;
        Jx.sign.ⵠᐃᐃΔΔⵠⵠ.src = "./img/sign" + Jx.sign.ⲆᐃⵠΔᐃᐃⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ⵠⵠᐃⲆᐃ = {
      open: Zq,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        Ⲇⵠⵠⵠᐃ: 1,
        b: 1,
        a: 3,
        ⲆΔⲆᐃᐃ: 316
      }, {
        id: 1,
        name: "stone",
        Ⲇⵠⵠⵠᐃ: 1,
        b: 1,
        a: 4,
        ⲆΔⲆᐃᐃ: 315
      }, {
        id: 2,
        name: "gold",
        Ⲇⵠⵠⵠᐃ: 1,
        b: 1,
        a: 6,
        ⲆΔⲆᐃᐃ: 297
      }, {
        id: 3,
        name: "diamond",
        Ⲇⵠⵠⵠᐃ: 4,
        b: 4,
        a: 1,
        ⲆΔⲆᐃᐃ: 298
      }, {
        id: 4,
        name: "amethyst",
        Ⲇⵠⵠⵠᐃ: 8,
        b: 8,
        a: 1,
        ⲆΔⲆᐃᐃ: 418
      }, {
        id: 5,
        name: "reidite",
        Ⲇⵠⵠⵠᐃ: 16,
        b: 16,
        a: 1,
        ⲆΔⲆᐃᐃ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        Ⲇⵠⵠⵠᐃ: 10,
        b: 10,
        a: 1,
        ⲆΔⲆᐃᐃ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        Ⲇⵠⵠⵠᐃ: 16,
        b: 16,
        a: 1,
        ⲆΔⲆᐃᐃ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        Ⲇⵠⵠⵠᐃ: 20,
        b: 20,
        a: 1,
        ⲆΔⲆᐃᐃ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        Ⲇⵠⵠⵠᐃ: 30,
        b: 30,
        a: 1,
        ⲆΔⲆᐃᐃ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        Ⲇⵠⵠⵠᐃ: 40,
        b: 40,
        a: 1,
        ⲆΔⲆᐃᐃ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        Ⲇⵠⵠⵠᐃ: 60,
        b: 60,
        a: 1,
        ⲆΔⲆᐃᐃ: 966
      }],
      button: Qf(60, 60, 0, Ⲇⵠ[795]),
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 450) + "px";
        this.style.top = Math.floor(_o - 270) + "px";
      },
      select: function () {
        Jx.ⵠⵠᐃⲆᐃ.open = !Jx.ⵠⵠᐃⲆᐃ.open;
        if (Jx.ⵠⵠᐃⲆᐃ.open) {
          Jx.ⵠⵠᐃⲆᐃ.style.display = "inline-block";
        } else {
          Jx.ⵠⵠᐃⲆᐃ.style.display = "none";
        }
      },
      ΔⲆⵠᐃΔ: function () {
        Jx.ⵠⵠᐃⲆᐃ.style.display = "none";
        Jx.ⵠⵠᐃⲆᐃ.open = Qg;
      },
      ⵠⵠⲆⵠⵠΔΔ: function () {
        Ix.ᐃⲆᐃⲆΔⲆⵠⲆᐃ(this.ⲆⵠⲆΔⵠⲆᐃ);
      },
      ⵠⵠᐃⵠᐃ: function () {
        this.id;
        if (this.ⲆⵠⲆΔⵠⲆᐃ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⲆⵠⲆΔⵠⲆᐃ.b);
          this.ⲆⵠⲆΔⵠⲆᐃ.Ⲇⵠⵠⵠᐃ = a;
          document.getElementById(this.ⲆⵠⲆΔⵠⲆᐃ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⲆⵠⲆΔⵠⲆᐃ.a);
          this.ⲆⵠⲆΔⵠⲆᐃ.Ⲇⵠⵠⵠᐃ = a;
          document.getElementById(this.ⲆⵠⲆΔⵠⲆᐃ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠⵠᐃⲆᐃ.ΔⲆⵠᐃΔ, false);
    var e = [["mouseup", this.ⵠⵠᐃⲆᐃ.ⵠⵠⲆⵠⵠΔΔ, "buy_"], ["click", this.ⵠⵠᐃⲆᐃ.ⵠⵠᐃⵠᐃ, ""], ["change", this.ⵠⵠᐃⲆᐃ.ⵠⵠᐃⵠᐃ, ""], ["keypress", this.ⵠⵠᐃⲆᐃ.keypress, ""]];
    for (var i = 0; i < this.ⵠⵠᐃⲆᐃ.items.length; i++) {
      var j = this.ⵠⵠᐃⲆᐃ.items[i];
      document.getElementById(j.name + "_market").src = Ⲇⵠ[j.ⲆΔⲆᐃᐃ][0].ⵠᐃᐃᐃΔ === undefined ? Ⲇⵠ[j.ⲆΔⲆᐃᐃ][0].src : Ⲇⵠ[j.ⲆΔⲆᐃᐃ][0].ⵠᐃᐃᐃΔ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = 1;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ⲆⵠⲆΔⵠⲆᐃ = j;
      document.getElementById(j.name + "_number").ⲆⵠⲆΔⵠⲆᐃ = j;
      for (var k = 0; e.length > k; k++) {
        document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ᐃᐃᐃⲆᐃ: document.getElementById("agree_ing").style,
      ⲆⲆΔⵠᐃⵠΔ: document.getElementById("cancel_agree_ing").style,
      ⲆⵠⲆⵠⵠᐃᐃ: document.getElementById("quest_agree_ing").style,
      ⲆΔᐃᐃΔⲆᐃ: document.getElementById("spectator_agree_ing").style,
      ᐃⵠᐃΔⲆᐃⵠ: document.getElementById("auto_feed_agree_ing").style,
      ᐃΔⲆᐃΔᐃⵠ: document.getElementById("info_agree_ing").style,
      ᐃⵠⵠⵠⲆΔⵠ: document.getElementById("pixelated_agree_ing").style,
      button: Qf(60, 60, 0, Ⲇⵠ[727]),
      ⲆΔᐃⲆⲆⵠᐃΔⵠ: function () {
        Jx.options.open = !Jx.options.open;
        if (Jx.options.open) {
          Jx.options.style.display = "inline-block";
        } else {
          Jx.options.style.display = "none";
        }
      },
      ⵠⲆⲆⵠᐃⵠⲆᐃⵠ: function () {
        Ex.ⵠΔⵠⵠᐃΔⲆ();
      },
      ⵠⵠΔⲆⵠᐃᐃᐃΔ: function () {
        Ex.ⵠⲆΔⵠⵠΔⲆ();
      },
      high: function () {
        Ex.ⵠⵠⵠⵠᐃⵠⲆⵠⲆ();
      },
      low: function () {
        Ex.ΔⵠΔᐃΔⲆΔΔᐃ();
      },
      ᐃⵠΔⵠⵠ: function () {
        Jx.ⲆⲆᐃⵠ.ᐃⵠΔⵠⵠ();
      },
      ⲆΔᐃⵠᐃᐃⲆᐃΔ: function () {
        Jx.ᐃΔᐃⲆⵠ.ᐃⵠΔⵠⵠ();
      },
      ᐃΔⲆᐃΔⲆᐃΔⲆ: function () {
        Jx.ⵠⲆⲆᐃ.ᐃⵠΔⵠⵠ();
      },
      ΔⲆⵠᐃⲆⵠΔⲆⲆ: function () {
        Gx.ΔΔᐃᐃΔ.ΔⵠΔⵠⲆⲆΔ();
      },
      ᐃⵠΔΔⲆΔⲆΔⲆ: function () {
        Gx.ᐃⲆΔΔᐃ.ΔⵠΔⵠⲆⲆΔ();
      },
      ΔⲆⵠᐃΔ: function () {
        Jx.options.style.display = "none";
        Jx.options.open = false;
      },
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 235) + "px";
        this.style.top = Math.floor(_o - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⵠⲆⲆⵠᐃⵠⲆᐃⵠ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠⵠΔⲆⵠᐃᐃᐃΔ, ul);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, _r);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ΔⲆⵠᐃΔ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠΔⵠⵠ, false);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃΔⲆᐃΔⲆᐃΔⲆ, Ja);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⲆΔᐃⵠᐃᐃⲆᐃΔ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆⵠᐃⲆⵠΔⲆⲆ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠΔΔⲆΔⲆΔⲆ, ld);
    this.ᐃΔᐃⲆⵠ = {
      open: Qg,
      ᐃⲆΔⲆΔ: ΔᐃⲆΔ.get("starve_cancel") ? ΔᐃⲆΔ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ᐃᐃᐃⲆᐃ: document.getElementById("cancel_agree").style,
      button: 0,
      Δᐃ: 0,
      ΔⲆⵠᐃΔ: function () {
        Jx.ᐃΔᐃⲆⵠ.style.display = "none";
        Jx.ᐃΔᐃⲆⵠ.open = ld;
      },
      ᐃⲆᐃⵠΔⵠⲆ: function () {
        if (Gx.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ) {
          Ix.ⵠᐃΔⵠᐃΔΔⲆΔ();
        }
        Jx.ᐃΔᐃⲆⵠ.ΔⲆⵠᐃΔ();
      },
      ᐃⵠΔⵠⵠ: function () {
        if (Jx.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ) {
          ΔᐃⲆΔ.set("starve_cancel", "0");
          Jx.ᐃΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ.display = "inline-block";
          Jx.options.ⲆⲆΔⵠᐃⵠΔ.display = "none";
        } else {
          ΔᐃⲆΔ.set("starve_cancel", "1");
          Jx.ᐃΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ.display = "none";
          Jx.options.ⲆⲆΔⵠᐃⵠΔ.display = "inline-block";
        }
        Jx.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ = !Jx.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ;
      },
      ΔᐃΔΔⵠⲆⵠ: function () {
        if (this.ᐃⲆΔⲆΔ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ᐃⲆᐃⵠΔⵠⲆ();
        }
      },
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 235) + "px";
        this.style.top = Math.floor(_o - 130) + "px";
      }
    };
    this.ᐃΔᐃⲆⵠ.id.oncontextmenu = function () {
      return false;
    };
    this.ᐃΔᐃⲆⵠ.ᐃᐃᐃⲆᐃ.display = "none";
    if (this.ᐃΔᐃⲆⵠ.ᐃⲆΔⲆΔ) {
      this.options.ⲆⲆΔⵠᐃⵠΔ.display = "inline-block";
    } else {
      this.options.ⲆⲆΔⵠᐃⵠΔ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃΔᐃⲆⵠ.ᐃⲆᐃⵠΔⵠⲆ, os);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃΔᐃⲆⵠ.ΔⲆⵠᐃΔ, na);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃΔᐃⲆⵠ.ᐃⵠΔⵠⵠ, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, xo);
    this.ΔⵠⲆΔⵠΔⵠ = {
      ᐃⲆΔⲆΔ: ΔᐃⲆΔ.get("starve_aliasing") ? ΔᐃⲆΔ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ⵠⲆᐃⵠᐃⲆⲆ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃⵠΔⵠⵠ: function () {
        if (Jx.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ === 0) {
          ΔᐃⲆΔ.set("starve_aliasing", "1");
          Jx.ΔⵠⲆΔⵠΔⵠ.ⵠⲆᐃⵠᐃⲆⲆ(1);
          Jx.options.ᐃⵠⵠⵠⲆΔⵠ.display = "inline-block";
        } else {
          ΔᐃⲆΔ.set("starve_aliasing", "0");
          Jx.ΔⵠⲆΔⵠΔⵠ.ⵠⲆᐃⵠᐃⲆⲆ(0);
          Jx.options.ᐃⵠⵠⵠⲆΔⵠ.display = "none";
        }
        Jx.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ = (Jx.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ + 1) % 2;
      }
    };
    if (this.ΔⵠⲆΔⵠΔⵠ.ᐃⲆΔⲆΔ === 1) {
      this.options.ᐃⵠⵠⵠⲆΔⵠ.display = "inline-block";
    } else {
      this.ΔⵠⲆΔⵠΔⵠ.ⵠⲆᐃⵠᐃⲆⲆ(0);
      this.options.ᐃⵠⵠⵠⲆΔⵠ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ΔⵠⲆΔⵠΔⵠ.ᐃⵠΔⵠⵠ, false);
    this.ⵠᐃⵠᐃᐃ = {
      ᐃⲆΔⲆΔ: ΔᐃⲆΔ.get("starve_info_box") && ΔᐃⲆΔ.get("starve_info_box") === "0" ? 0 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⲆΔᐃⵠ: 0,
      ᐃⵠΔⵠⵠ: function () {
        if (Jx.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ === 0) {
          ΔᐃⲆΔ.set("starve_info_box", "1");
          Jx.options.ᐃΔⲆᐃΔᐃⵠ.display = "inline-block";
        } else {
          ΔᐃⲆΔ.set("starve_info_box", "0");
          Jx.options.ᐃΔⲆᐃΔᐃⵠ.display = "none";
        }
        Jx.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ = (Jx.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ + 1) % 2;
      },
      ⵠⲆⵠⲆ: function (a, b, c) {
        if (a && this.ᐃⲆΔⲆΔ) {
          this.display = 1;
          this.id = c === 0 ? b.id : At[b.id].ⵠⵠⲆᐃ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⲆΔᐃⵠ = c;
        }
        return a;
      }
    };
    if (this.ⵠᐃⵠᐃᐃ.ᐃⲆΔⲆΔ === 1) {
      this.options.ᐃΔⲆᐃΔᐃⵠ.display = "inline-block";
    } else {
      this.options.ᐃΔⲆᐃΔᐃⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⵠᐃⵠᐃᐃ.ᐃⵠΔⵠⵠ, _r);
    if (ΔᐃⲆΔ.get("starve_scale")) {
      gq = Number(ΔᐃⲆΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = gq;
      gq *= lr / mr;
      nr();
    }
    this.ᐃΔⲆᐃⵠⵠⲆ = function () {
      ΔᐃⲆΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      gq = lr / mr * document.getElementById("input_ratio").value;
      nr();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃΔⲆᐃⵠⵠⲆ, ul);
    this.ⲆⲆᐃⵠ = {
      open: false,
      ᐃⲆΔⲆΔ: ΔᐃⲆΔ.get("starve_safe") && ΔᐃⲆΔ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ᐃᐃᐃⲆᐃ: document.getElementById("agree").style,
      button: 0,
      Δᐃ: 0,
      ΔⲆⵠᐃΔ: function () {
        Jx.ⲆⲆᐃⵠ.style.display = "none";
        Jx.ⲆⲆᐃⵠ.open = ib;
      },
      all: function () {
        if (!Gx.ᐃⲆΔΔΔ.wait) {
          if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && Gx.ⲆΔᐃⵠ.id < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled) {
            Ix.ᐃᐃᐃᐃᐃⵠᐃᐃⵠ(Jx.ⲆⲆᐃⵠ.button);
          }
          Jx.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ();
        }
      },
      ᐃΔᐃΔ: function () {
        if (Gx.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ && !Gx.ᐃⲆΔΔΔ.wait) {
          if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && Gx.ⲆΔᐃⵠ.id < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled) {
            Ix.ΔΔⲆⲆⵠᐃᐃᐃⲆ(Jx.ⲆⲆᐃⵠ.button);
          }
          Jx.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ();
        }
      },
      ΔΔᐃⲆⲆⵠⲆΔⵠ: function () {
        if (!Gx.ᐃⲆΔΔΔ.wait) {
          if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && Gx.ⲆΔᐃⵠ.id < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled) {
            Ix.ⵠⵠΔⵠⲆΔᐃⲆᐃ(Jx.ⲆⲆᐃⵠ.button);
          }
          Jx.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ();
        }
      },
      ᐃⵠΔⵠⵠ: function () {
        if (Jx.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ) {
          ΔᐃⲆΔ.set("starve_safe", "0");
          Jx.ⲆⲆᐃⵠ.ᐃᐃᐃⲆᐃ.display = "inline-block";
          Jx.options.ᐃᐃᐃⲆᐃ.display = "none";
        } else {
          ΔᐃⲆΔ.set("starve_safe", "1");
          Jx.ⲆⲆᐃⵠ.ᐃᐃᐃⲆᐃ.display = "none";
          Jx.options.ᐃᐃᐃⲆᐃ.display = "inline-block";
        }
        Jx.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ = !Jx.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ;
      },
      ΔᐃΔΔⵠⲆⵠ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = Ⲇⵠ[uh[a].ⵠΔ][0].ⵠᐃᐃᐃΔ === $i ? Ⲇⵠ[uh[a].ⵠΔ][0].src : Ⲇⵠ[uh[a].ⵠΔ][0].ⵠᐃᐃᐃΔ;
        if (uh[a].ᐃΔᐃΔ && !Gx.ⵠΔⲆⲆⲆ && Gx.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ᐃⲆΔⲆΔ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 235) + "px";
        this.style.top = Math.floor(_o - 175) + "px";
      }
    };
    this.ⲆⲆᐃⵠ.ᐃᐃᐃⲆᐃ.display = "none";
    if (this.ⲆⲆᐃⵠ.ᐃⲆΔⲆΔ) {
      this.options.ᐃᐃᐃⲆᐃ.display = "inline-block";
    } else {
      this.options.ᐃᐃᐃⲆᐃ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⲆⲆᐃⵠ.ΔΔᐃⲆⲆⵠⲆΔⵠ, ul);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⲆⲆᐃⵠ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⲆⲆᐃⵠ.ᐃΔᐃΔ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⲆⲆᐃⵠ.ΔⲆⵠᐃΔ, ld);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⲆⲆᐃⵠ.ᐃⵠΔⵠⵠ, false);
    this.ⵠΔⲆΔ = {
      open: false,
      ᐃⲆⲆΔⵠ: -1,
      button: Qf(60, 60, 0, Ⲇⵠ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 300) + "px";
        this.style.top = Math.floor(_o - 215) + "px";
      },
      ΔⲆⵠᐃΔ: function () {
        Jx.ⵠΔⲆΔ.open = false;
        Jx.ⵠΔⲆΔ.style.display = "none";
      },
      select: function () {
        Jx.ⵠΔⲆΔ.open = !Jx.ⵠΔⲆΔ.open;
        if (Jx.ⵠΔⲆΔ.open) {
          Jx.ⵠΔⲆΔ.style.display = "inline-block";
        } else {
          Jx.ⵠΔⲆΔ.style.display = "none";
        }
      },
      ⵠⵠⲆⵠⵠΔΔ: function () {
        if (Jx.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ >= 0) {
          Ix.ⵠⵠⲆΔᐃⲆᐃΔᐃ(Jx.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ);
          Jx.ⵠΔⲆΔ.ΔⲆⵠᐃΔ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Jx.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ);
          }
        }
      },
      ΔⲆᐃᐃⵠ: function () {
        var a = Gx.ⵠΔⲆΔ.value;
        document.getElementById("points_bank").innerHTML = ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(a) + " points";
        for (var b = 0; b < Yf.length; b++) {
          if (Yf[b].ΔΔΔᐃⲆ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⵠΔᐃΔᐃⲆᐃⵠⲆ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = Yf[a - 1];
        if (Gx.ⵠΔⲆΔ.value >= b.ΔΔΔᐃⲆ) {
          Jx.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Jx.ⵠΔⲆΔ.ᐃⲆⲆΔⵠ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = Ⲇⵠ[uh[b[c - 1][1]].ⵠΔ][0].ⵠᐃᐃᐃΔ === undefined ? Ⲇⵠ[uh[b[c - 1][1]].ⵠΔ][0].src : Ⲇⵠ[uh[b[c - 1][1]].ⵠΔ][0].ⵠᐃᐃᐃΔ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠΔⲆΔ.ΔⲆⵠᐃΔ, Yi);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠΔⲆΔ.ⵠⵠⲆⵠⵠΔΔ, false);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ⵠΔⲆΔ.ⵠΔᐃΔᐃⲆᐃⵠⲆ, Ja);
    }
    this.ⵠⲆⲆᐃ = {
      open: false,
      ᐃⲆΔⲆΔ: ΔᐃⲆΔ.get("starve_quests") ? ΔᐃⲆΔ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: Qf(60, 60, 0, Ⲇⵠ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃᐃⵠ: function () {
        this.style.left = Math.floor(Eo - 420) + "px";
        this.style.top = Math.floor(_o - 270) + "px";
      },
      ΔⲆⵠᐃΔ: function () {
        Jx.ⵠⲆⲆᐃ.style.display = "none";
        Jx.ⵠⲆⲆᐃ.open = Yi;
      },
      select: function () {
        Jx.ⵠⲆⲆᐃ.open = !Jx.ⵠⲆⲆᐃ.open;
        if (Jx.ⵠⲆⲆᐃ.open) {
          Jx.ⵠⲆⲆᐃ.style.display = "inline-block";
        } else {
          Jx.ⵠⲆⲆᐃ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Qw.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⲆⲆᐃΔⵠᐃⵠ: 0,
      ᐃΔⵠΔⲆⲆΔ: 0,
      ⲆⵠᐃΔⵠⲆⲆΔⵠ: function () {
        if (Jx.ⵠⲆⲆᐃ.open) {
          var a = new Date().getTime();
          if (a - this.ⲆⲆᐃΔⵠᐃⵠ >= 1000) {
            this.ⲆⲆᐃΔⵠᐃⵠ = a;
            for (var b = 0; b < Qw.length; b++) {
              if (Jx.ⵠⲆⲆᐃ.list[b]) {
                var c = Qw[b].time - (a - Fx.ΔᐃᐃⲆⵠ.ΔⲆᐃᐃⵠ + Jx.ⵠⲆⲆᐃ.ᐃΔⵠΔⲆⲆΔ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            Jx.ⵠⲆⲆᐃ.ⲆⲆᐃΔᐃΔⵠ(b, a[b]);
          }
        }
      },
      ⲆⲆᐃΔᐃΔⵠ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Gx.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(0, 1);
          Jx.ⲆⵠⵠⲆᐃᐃⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        if (b === 2) {
          document.getElementById("claim_reward_" + a).style.display = "inline-block";
        } else {
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
        document.getElementById("time_finished_" + a).style.display = "inline";
        Jx.ⵠⲆⲆᐃ.list[a] = 0;
      },
      modify: function (a, b) {
        Jx.ⵠⲆⲆᐃ.ⲆⲆᐃΔᐃΔⵠ(a, b);
        if (Jx.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ) {
          Jx.ⵠⲆⲆᐃ.open = Ej;
          Jx.ⵠⲆⲆᐃ.style.display = "inline-block";
        }
      },
      ᐃⵠΔⵠⵠ: function () {
        if (Jx.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ) {
          ΔᐃⲆΔ.set("starve_quests", "0");
          Jx.options.ⲆⵠⲆⵠⵠᐃᐃ.display = "none";
        } else {
          ΔᐃⲆΔ.set("starve_quests", "1");
          Jx.options.ⲆⵠⲆⵠⵠᐃᐃ.display = "inline-block";
        }
        Jx.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ = !Jx.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ;
      },
      ⲆⵠᐃΔᐃⵠⵠᐃⵠ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        Ix.ⵠΔⲆⲆⵠᐃⲆΔᐃ(a);
      }
    };
    if (this.ⵠⲆⲆᐃ.ᐃⲆΔⲆΔ) {
      this.options.ⲆⵠⲆⵠⵠᐃᐃ.display = "inline-block";
    } else {
      this.options.ⲆⵠⲆⵠⵠᐃᐃ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⵠⲆⲆᐃ.ΔⲆⵠᐃΔ, false);
    for (k = 0; Qw.length > k; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ⵠⲆⲆᐃ.ⲆⵠᐃΔᐃⵠⵠᐃⵠ, false);
    }
    this.ΔΔΔⵠ = {
      open: Wh,
      button: Qf(60, 60, 0, Ⲇⵠ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ᐃⲆΔⲆΔⲆⵠ: [],
        ⵠⲆⲆⵠΔⵠⲆ: 0,
        ᐃᐃⵠ: function () {
          this.style.left = Math.floor(Eo - 335) + "px";
          this.style.top = Math.floor(_o - 215) + "px";
        },
        ΔⲆⵠᐃΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Jx.ΔΔΔⵠ.open = false;
        },
        ΔΔⵠⵠⵠⲆΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ᐃⲆⵠⵠ: function (a) {
          if ((b = this.ᐃⲆΔⲆΔⲆⵠ[a]).ᐃΔⲆ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = Ⲇⵠ[uh[b[a][0]].ⵠΔ][0].ⵠᐃᐃᐃΔ === $g ? Ⲇⵠ[uh[b[a][0]].ⵠΔ][0].src : Ⲇⵠ[uh[b[a][0]].ⵠΔ][0].ⵠᐃᐃᐃΔ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⵠⲆⲆⵠΔⵠⲆ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < At.length; b++) {
            var d = At[b];
            if (a === d.ΔⲆᐃ) {
              this.ᐃⲆΔⲆΔⲆⵠ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = Ⲇⵠ[uh[d.ⵠⵠⲆᐃ].ⵠΔ][0].ⵠᐃᐃᐃΔ === Cs ? Ⲇⵠ[uh[d.ⵠⵠⲆᐃ].ⵠΔ][0].src : Ⲇⵠ[uh[d.ⵠⵠⲆᐃ].ⵠΔ][0].ⵠᐃᐃᐃΔ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ΔⵠⲆⵠⵠΔΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃᐃⵠ: function () {
          this.style.left = Math.floor(Eo - 285) + "px";
          this.style.top = Math.floor(_o - 170) + "px";
        },
        ΔⲆⵠᐃΔ: function () {
          document.getElementById("home_craft").style.display = "none";
          Jx.ΔΔΔⵠ.open = false;
        }
      },
      ᐃΔⵠᐃΔᐃⲆᐃⵠ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ΔΔΔⵠ.ΔⵠⲆⵠⵠΔΔ.ΔⲆⵠᐃΔ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ΔΔΔⵠ.list.ΔⲆⵠᐃΔ, Le);
    document.getElementById("backhome").addEventListener("mouseup", this.ΔΔΔⵠ.list.ΔΔⵠⵠⵠⲆΔ, sn);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Jx.ΔΔΔⵠ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Jx.ΔΔΔⵠ.list.select(1);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Jx.ΔΔΔⵠ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Jx.ΔΔΔⵠ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Jx.ΔΔΔⵠ.list.select(4);
    }, sn);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Jx.ΔΔΔⵠ.list.select(5);
    }, Zq);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(0);
    }, hl);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(1);
    }, Le);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(2);
    }, na);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(3);
    }, Le);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(4);
    }, Bs);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(6);
    }, Wh);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(7);
    }, z);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(8);
    }, ft);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(10);
    }, _r);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(11);
    }, false);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(14);
    }, ul);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(15);
    }, sn);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(17);
    }, xo);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(18);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(19);
    }, Ja);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(21);
    }, Le);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(22);
    }, sn);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(24);
    }, ul);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(25);
    }, z);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(26);
    }, qa);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(27);
    }, _r);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(29);
    }, Wh);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(30);
    }, hl);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(31);
    }, false);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(32);
    }, Yi);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(33);
    }, qa);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(34);
    }, qe);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(35);
    }, Le);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(37);
    }, xo);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(40);
    }, false);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(42);
    }, Ja);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(43);
    }, Wh);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(45);
    }, ib);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(46);
    }, ld);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Jx.ΔΔΔⵠ.list.ᐃⲆⵠⵠ(47);
    }, Zq);
    this.ⵠⲆⵠᐃⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠΔⵠⵠ: {
        x: -1,
        y: -1
      },
      ⵠⲆΔᐃ: [],
      focus: function (a) {
        var b = this.translate.y + (Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⵠⵠΔⵠⵠ.x = a.x - this.translate.x;
          this.ⵠⵠΔⵠⵠ.y = a.y - b;
        }
      }
    };
    this.ⲆⲆⲆⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠΔ: Ⲇⵠ[278],
      ⲆⲆ: document.createElement("canvas")
    };
    this.ⲆⲆⲆⵠ.ⲆⲆ.width = this.ⲆⲆⲆⵠ.ⵠΔ.width;
    this.ⲆⲆⲆⵠ.ⲆⲆ.height = this.ⲆⲆⲆⵠ.ⵠΔ.height;
    this.ⲆⲆⲆⵠ.ᐃ = this.ⲆⲆⲆⵠ.ⲆⲆ.getContext("2d");
    this.ᐃⵠⲆᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠΔ: Ⲇⵠ[267],
      ⲆᐃᐃⲆ: av,
      y: 0
    };
    var m = jg.document.createElement("div");
    this.ᐃⵠΔⵠΔΔⲆ = function () {
      ΔⵠⲆⲆᐃ = document.getElementById("team_box");
      ΔⵠⲆⲆᐃ.innerHTML = "";
      ΔⵠⲆⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = Fx.ⵠⲆΔᐃ[Gx.ΔΔΔᐃΔ[0]].ⲆⵠΔⵠΔ) && m.innerHTML) + "</div";
      for (var a = 1; Gx.ΔΔΔᐃΔ.length > a; a++) {
        ΔⵠⲆⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = Fx.ⵠⲆΔᐃ[Gx.ΔΔΔᐃΔ[a]].ⲆⵠΔⵠΔ) && m.innerHTML) + "</div></div>";
      }
      ΔⵠⲆⲆᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ΔⵠⲆⲆᐃ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Ix.ᐃⵠΔⵠΔΔⲆ, false);
    };
    this.ⵠⲆⲆΔΔⲆᐃΔⵠ = function () {
      ΔⵠⲆⲆᐃ = document.getElementById("team_box");
      ΔⵠⲆⲆᐃ.innerHTML = "";
      ΔⵠⲆⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = Fx.ⵠⲆΔᐃ[Gx.ΔΔΔᐃΔ[0]].ⲆⵠΔⵠΔ) && m.innerHTML) + "</div";
      for (var a = 1; Gx.ΔΔΔᐃΔ.length > a; a++) {
        ΔⵠⲆⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = Fx.ⵠⲆΔᐃ[Gx.ΔΔΔᐃΔ[a]].ⲆⵠΔⵠΔ) && m.innerHTML) + "</div></div>";
      }
      ΔⵠⲆⲆᐃ.innerHTML += "</div>";
      ΔⵠⲆⲆᐃ.style.display = "inline-block";
    };
    this.ⵠᐃⵠⵠΔᐃⲆⲆᐃ = function () {
      ΔⵠⲆⲆᐃ = document.getElementById("team_box");
      ΔⵠⲆⲆᐃ.innerHTML = "";
      ΔⵠⲆⲆᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((m.innerText = Fx.ⵠⲆΔᐃ[Gx.ΔΔΔᐃΔ[0]].ⲆⵠΔⵠΔ) && m.innerHTML) + "</div";
      for (var a = 1; Gx.ΔΔΔᐃΔ.length > a; a++) {
        ΔⵠⲆⲆᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((m.innerText = Fx.ⵠⲆΔᐃ[Gx.ΔΔΔᐃΔ[a]].ⲆⵠΔⵠΔ) && m.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Gx.ᐃⲆⲆΔⲆ.lock === 0) {
        ΔⵠⲆⲆᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ΔⵠⲆⲆᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Ix.ⵠⵠⲆΔΔⲆⵠᐃⲆ, false);
      ΔⵠⲆⲆᐃ.style.display = "inline-block";
      for (a = 1; Gx.ΔΔΔᐃΔ.length > a; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(1);
            }, ib);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(2);
            }, qe);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(3);
            }, ul);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(4);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(5);
            }, ft);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(6);
            }, false);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(7);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Ix.ⲆΔⲆΔΔⲆᐃ(8);
            }, z);
        }
      }
    };
    this.ⵠΔⵠᐃⲆ = [];
    this.ⵠΔⵠᐃⲆ[2] = {
      button: Qf(60, 60, 0, Ⲇⵠ[556]),
      action: this.ᐃⵠΔⵠΔΔⲆ
    };
    this.ⵠΔⵠᐃⲆ[3] = {
      button: Qf(60, 60, 0, Ⲇⵠ[556]),
      action: Ix.ⵠᐃⲆⲆΔⵠᐃⵠⲆ
    };
    this.ⵠΔⵠᐃⲆ[0] = {
      button: Qf(60, 60, 0, Ⲇⵠ[557]),
      action: this.ⵠᐃⵠⵠΔᐃⲆⲆᐃ
    };
    this.ⵠΔⵠᐃⲆ[1] = {
      button: Qf(60, 60, 0, Ⲇⵠ[561]),
      action: this.ⵠⲆⲆΔΔⲆᐃΔⵠ
    };
    this.ⵠΔⵠᐃⲆ[4] = {
      button: Qf(60, 60, 0, Ⲇⵠ[560]),
      action: function () { }
    };
    this.ⲆⲆⵠⵠᐃ = -1;
    this.ΔᐃⵠⲆΔⲆⵠ = Qf(60, 60, 0, Ⲇⵠ[723]);
    this.ΔΔᐃⵠΔᐃᐃ = Qf(60, 60, 0, Ⲇⵠ[724]);
    this.ΔⵠᐃⲆᐃᐃΔ = Qf(60, 60, 0, Ⲇⵠ[658]);
    this.ⲆΔΔΔⲆᐃΔ = Qf(60, 60, 0, Ⲇⵠ[657]);
    this.ⲆᐃⲆⲆⲆⵠᐃ = Qf(60, 60, 0, Ⲇⵠ[658]);
    this.ᐃⲆⲆⲆᐃⵠΔ = Qf(60, 60, 0, Ⲇⵠ[316]);
    this.ᐃᐃᐃΔΔⲆᐃ = Qf(60, 60, 0, Ⲇⵠ[315]);
    this.ᐃⲆⲆⵠⲆΔⲆ = Qf(60, 60, 0, Ⲇⵠ[297]);
    this.ΔΔⲆⲆΔⵠΔ = Qf(60, 60, 0, Ⲇⵠ[298]);
    this.ᐃⲆⲆⵠΔⲆΔ = Qf(60, 60, 0, Ⲇⵠ[418]);
    this.ⵠΔⲆⲆᐃⵠⵠ = Qf(60, 60, 0, Ⲇⵠ[938]);
    this.ⵠᐃⵠⵠⵠⲆⵠ = Qf(60, 60, 0, Ⲇⵠ[412]);
    this.ΔⵠⵠⲆΔΔⲆ = Qf(60, 60, 0, Ⲇⵠ[536]);
    this.ⵠΔᐃᐃᐃᐃΔ = Qf(60, 60, 0, Ⲇⵠ[535]);
    this.ΔⲆᐃΔΔⲆᐃ = Qf(60, 60, 0, Ⲇⵠ[538]);
    this.ⵠΔᐃᐃᐃ = Qf(120, 120, 0, Ⲇⵠ[149]);
    this.ⵠΔᐃᐃᐃ.info.translate.x = 10;
    this.ⵠΔᐃᐃᐃ.info.translate.y = 10;
    this.ⵠⵠΔ = [];
    this.ⵠⵠΔ[0] = Qf(68, 68, 0, Ⲇⵠ[340], 3);
    this.ⵠⵠΔ[0].id = 0;
    this.ⵠⵠΔ[1] = Qf(68, 68, 0, Ⲇⵠ[341], 3);
    this.ⵠⵠΔ[1].id = 1;
    this.ⵠⵠΔ[108] = Qf(68, 68, 0, Ⲇⵠ[342], 3);
    this.ⵠⵠΔ[108].id = 108;
    this.ⵠⵠΔ[109] = Qf(68, 68, 0, Ⲇⵠ[343], 3);
    this.ⵠⵠΔ[109].id = 109;
    this.ⵠⵠΔ[110] = Qf(68, 68, 0, Ⲇⵠ[269], 3);
    this.ⵠⵠΔ[110].id = 110;
    this.ⵠⵠΔ[233] = Qf(68, 68, 0, Ⲇⵠ[1155], 3);
    this.ⵠⵠΔ[233].id = 233;
    this.ⵠⵠΔ[111] = Qf(68, 68, 0, Ⲇⵠ[270], 3);
    this.ⵠⵠΔ[111].id = 111;
    this.ⵠⵠΔ[112] = Qf(68, 68, 0, Ⲇⵠ[271], 3);
    this.ⵠⵠΔ[112].id = 112;
    this.ⵠⵠΔ[3] = Qf(68, 68, 0, Ⲇⵠ[272], 3);
    this.ⵠⵠΔ[3].id = 3;
    this.ⵠⵠΔ[4] = Qf(68, 68, 0, Ⲇⵠ[344], 3);
    this.ⵠⵠΔ[4].id = 4;
    this.ⵠⵠΔ[5] = Qf(68, 68, 0, Ⲇⵠ[345], 3);
    this.ⵠⵠΔ[5].id = 5;
    this.ⵠⵠΔ[57] = Qf(68, 68, 0, Ⲇⵠ[831], 3);
    this.ⵠⵠΔ[57].id = 57;
    this.ⵠⵠΔ[6] = Qf(68, 68, 0, Ⲇⵠ[346], 3);
    this.ⵠⵠΔ[6].id = 6;
    this.ⵠⵠΔ[113] = Qf(68, 68, 0, Ⲇⵠ[273], 3);
    this.ⵠⵠΔ[113].id = 113;
    this.ⵠⵠΔ[114] = Qf(68, 68, 0, Ⲇⵠ[358], 3);
    this.ⵠⵠΔ[114].id = 114;
    this.ⵠⵠΔ[115] = Qf(68, 68, 0, Ⲇⵠ[348], 3);
    this.ⵠⵠΔ[115].id = 115;
    this.ⵠⵠΔ[162] = Qf(68, 68, 0, Ⲇⵠ[349], 3);
    this.ⵠⵠΔ[162].id = 162;
    this.ⵠⵠΔ[160] = Qf(68, 68, 0, Ⲇⵠ[350], 3);
    this.ⵠⵠΔ[160].id = 160;
    this.ⵠⵠΔ[8] = Qf(68, 68, 0, Ⲇⵠ[274], 3);
    this.ⵠⵠΔ[8].id = 8;
    this.ⵠⵠΔ[117] = Qf(68, 68, 0, Ⲇⵠ[351], 3);
    this.ⵠⵠΔ[117].id = 117;
    this.ⵠⵠΔ[116] = Qf(68, 68, 0, Ⲇⵠ[275], 3);
    this.ⵠⵠΔ[116].id = 116;
    this.ⵠⵠΔ[118] = Qf(68, 68, 0, Ⲇⵠ[276], 3);
    this.ⵠⵠΔ[118].id = 118;
    this.ⵠⵠΔ[195] = Qf(68, 68, 0, Ⲇⵠ[352], 3);
    this.ⵠⵠΔ[195].id = 195;
    this.ⵠⵠΔ[161] = Qf(68, 68, 0, Ⲇⵠ[353], 3);
    this.ⵠⵠΔ[161].id = 161;
    this.ⵠⵠΔ[163] = Qf(68, 68, 0, Ⲇⵠ[354], 3);
    this.ⵠⵠΔ[163].id = 163;
    this.ⵠⵠΔ[164] = Qf(68, 68, 0, Ⲇⵠ[355], 3);
    this.ⵠⵠΔ[164].id = 164;
    this.ⵠⵠΔ[165] = Qf(68, 68, 0, Ⲇⵠ[356], 3);
    this.ⵠⵠΔ[165].id = 165;
    this.ⵠⵠΔ[166] = Qf(68, 68, 0, Ⲇⵠ[357], 3);
    this.ⵠⵠΔ[166].id = 166;
    this.ⵠⵠΔ[167] = Qf(68, 68, 0, Ⲇⵠ[359], 3);
    this.ⵠⵠΔ[167].id = 167;
    this.ⵠⵠΔ[168] = Qf(68, 68, 0, Ⲇⵠ[382], 3);
    this.ⵠⵠΔ[168].id = 168;
    this.ⵠⵠΔ[169] = Qf(68, 68, 0, Ⲇⵠ[383], 3);
    this.ⵠⵠΔ[169].id = 169;
    this.ⵠⵠΔ[170] = Qf(68, 68, 0, Ⲇⵠ[384], 3);
    this.ⵠⵠΔ[170].id = 170;
    this.ⵠⵠΔ[2] = Qf(68, 68, 0, Ⲇⵠ[386], 3);
    this.ⵠⵠΔ[2].id = 2;
    this.ⵠⵠΔ[237] = Qf(68, 68, 0, Ⲇⵠ[1163], 3);
    this.ⵠⵠΔ[237].id = 237;
    this.ⵠⵠΔ[174] = Qf(68, 68, 0, Ⲇⵠ[394], 3);
    this.ⵠⵠΔ[174].id = 174;
    this.ⵠⵠΔ[222] = Qf(68, 68, 0, Ⲇⵠ[1036], 3);
    this.ⵠⵠΔ[222].id = 222;
    this.ⵠⵠΔ[231] = Qf(68, 68, 0, Ⲇⵠ[1038], 3);
    this.ⵠⵠΔ[231].id = 231;
    this.ⵠⵠΔ[232] = Qf(68, 68, 0, Ⲇⵠ[1040], 3);
    this.ⵠⵠΔ[232].id = 232;
    this.ⵠⵠΔ[234] = Qf(68, 68, 0, Ⲇⵠ[1157], 3);
    this.ⵠⵠΔ[234].id = 234;
    this.ⵠⵠΔ[10] = Qf(68, 68, 0, Ⲇⵠ[387], 3);
    this.ⵠⵠΔ[10].id = 10;
    this.ⵠⵠΔ[171] = Qf(68, 68, 0, Ⲇⵠ[388], 3);
    this.ⵠⵠΔ[171].id = 171;
    this.ⵠⵠΔ[172] = Qf(68, 68, 0, Ⲇⵠ[389], 3);
    this.ⵠⵠΔ[172].id = 172;
    this.ⵠⵠΔ[173] = Qf(68, 68, 0, Ⲇⵠ[390], 3);
    this.ⵠⵠΔ[173].id = 173;
    this.ⵠⵠΔ[11] = Qf(68, 68, 0, Ⲇⵠ[391], 3);
    this.ⵠⵠΔ[11].id = 11;
    this.ⵠⵠΔ[12] = Qf(68, 68, 0, Ⲇⵠ[403], 3);
    this.ⵠⵠΔ[12].id = 12;
    this.ⵠⵠΔ[13] = Qf(68, 68, 0, Ⲇⵠ[397], 3);
    this.ⵠⵠΔ[13].id = 13;
    this.ⵠⵠΔ[14] = Qf(68, 68, 0, Ⲇⵠ[400], 3);
    this.ⵠⵠΔ[14].id = 14;
    this.ⵠⵠΔ[15] = Qf(68, 68, 0, Ⲇⵠ[406], 3);
    this.ⵠⵠΔ[15].id = 15;
    this.ⵠⵠΔ[16] = Qf(68, 68, 0, Ⲇⵠ[875], 3);
    this.ⵠⵠΔ[16].id = 16;
    this.ⵠⵠΔ[119] = Qf(68, 68, 0, Ⲇⵠ[410], 3);
    this.ⵠⵠΔ[119].id = 119;
    this.ⵠⵠΔ[23] = Qf(68, 68, 0, Ⲇⵠ[422], 3);
    this.ⵠⵠΔ[23].id = 23;
    this.ⵠⵠΔ[24] = Qf(68, 68, 0, Ⲇⵠ[425], 3);
    this.ⵠⵠΔ[24].id = 24;
    this.ⵠⵠΔ[87] = Qf(68, 68, 0, Ⲇⵠ[1229], 3);
    this.ⵠⵠΔ[87].id = 87;
    this.ⵠⵠΔ[88] = Qf(68, 68, 0, Ⲇⵠ[1232], 3);
    this.ⵠⵠΔ[88].id = 88;
    this.ⵠⵠΔ[80] = Qf(68, 68, 0, Ⲇⵠ[1139], 3);
    this.ⵠⵠΔ[80].id = 80;
    this.ⵠⵠΔ[81] = Qf(68, 68, 0, Ⲇⵠ[1142], 3);
    this.ⵠⵠΔ[81].id = 81;
    this.ⵠⵠΔ[101] = Qf(68, 68, 0, Ⲇⵠ[1167], 3);
    this.ⵠⵠΔ[101].id = 101;
    this.ⵠⵠΔ[64] = Qf(68, 68, 0, Ⲇⵠ[571], 3);
    this.ⵠⵠΔ[64].id = 64;
    this.ⵠⵠΔ[71] = Qf(68, 68, 0, Ⲇⵠ[1240], 3);
    this.ⵠⵠΔ[71].id = 71;
    this.ⵠⵠΔ[102] = Qf(68, 68, 0, Ⲇⵠ[1170], 3);
    this.ⵠⵠΔ[102].id = 102;
    this.ⵠⵠΔ[65] = Qf(68, 68, 0, Ⲇⵠ[574], 3);
    this.ⵠⵠΔ[65].id = 65;
    this.ⵠⵠΔ[72] = Qf(68, 68, 0, Ⲇⵠ[1243], 3);
    this.ⵠⵠΔ[72].id = 72;
    this.ⵠⵠΔ[103] = Qf(68, 68, 0, Ⲇⵠ[1173], 3);
    this.ⵠⵠΔ[103].id = 103;
    this.ⵠⵠΔ[66] = Qf(68, 68, 0, Ⲇⵠ[577], 3);
    this.ⵠⵠΔ[66].id = 66;
    this.ⵠⵠΔ[73] = Qf(68, 68, 0, Ⲇⵠ[1246], 3);
    this.ⵠⵠΔ[73].id = 73;
    this.ⵠⵠΔ[104] = Qf(68, 68, 0, Ⲇⵠ[1176], 3);
    this.ⵠⵠΔ[104].id = 104;
    this.ⵠⵠΔ[67] = Qf(68, 68, 0, Ⲇⵠ[580], 3);
    this.ⵠⵠΔ[67].id = 67;
    this.ⵠⵠΔ[74] = Qf(68, 68, 0, Ⲇⵠ[1249], 3);
    this.ⵠⵠΔ[74].id = 74;
    this.ⵠⵠΔ[105] = Qf(68, 68, 0, Ⲇⵠ[1179], 3);
    this.ⵠⵠΔ[105].id = 105;
    this.ⵠⵠΔ[68] = Qf(68, 68, 0, Ⲇⵠ[583], 3);
    this.ⵠⵠΔ[68].id = 68;
    this.ⵠⵠΔ[75] = Qf(68, 68, 0, Ⲇⵠ[1252], 3);
    this.ⵠⵠΔ[75].id = 75;
    this.ⵠⵠΔ[106] = Qf(68, 68, 0, Ⲇⵠ[1182], 3);
    this.ⵠⵠΔ[106].id = 106;
    this.ⵠⵠΔ[69] = Qf(68, 68, 0, Ⲇⵠ[586], 3);
    this.ⵠⵠΔ[69].id = 69;
    this.ⵠⵠΔ[76] = Qf(68, 68, 0, Ⲇⵠ[1255], 3);
    this.ⵠⵠΔ[76].id = 76;
    this.ⵠⵠΔ[107] = Qf(68, 68, 0, Ⲇⵠ[1185], 3);
    this.ⵠⵠΔ[107].id = 107;
    this.ⵠⵠΔ[70] = Qf(68, 68, 0, Ⲇⵠ[589], 3);
    this.ⵠⵠΔ[70].id = 70;
    this.ⵠⵠΔ[94] = Qf(68, 68, 0, Ⲇⵠ[1258], 3);
    this.ⵠⵠΔ[94].id = 94;
    this.ⵠⵠΔ[95] = Qf(68, 68, 0, Ⲇⵠ[1261], 3);
    this.ⵠⵠΔ[95].id = 95;
    this.ⵠⵠΔ[96] = Qf(68, 68, 0, Ⲇⵠ[1264], 3);
    this.ⵠⵠΔ[96].id = 96;
    this.ⵠⵠΔ[97] = Qf(68, 68, 0, Ⲇⵠ[1267], 3);
    this.ⵠⵠΔ[97].id = 97;
    this.ⵠⵠΔ[98] = Qf(68, 68, 0, Ⲇⵠ[1270], 3);
    this.ⵠⵠΔ[98].id = 98;
    this.ⵠⵠΔ[99] = Qf(68, 68, 0, Ⲇⵠ[1273], 3);
    this.ⵠⵠΔ[99].id = 99;
    this.ⵠⵠΔ[58] = Qf(68, 68, 0, Ⲇⵠ[828], 3);
    this.ⵠⵠΔ[58].id = 58;
    this.ⵠⵠΔ[25] = Qf(68, 68, 0, Ⲇⵠ[431], 3);
    this.ⵠⵠΔ[25].id = 25;
    this.ⵠⵠΔ[26] = Qf(68, 68, 0, Ⲇⵠ[434], 3);
    this.ⵠⵠΔ[26].id = 26;
    this.ⵠⵠΔ[27] = Qf(68, 68, 0, Ⲇⵠ[437], 3);
    this.ⵠⵠΔ[27].id = 27;
    this.ⵠⵠΔ[28] = Qf(68, 68, 0, Ⲇⵠ[440], 3);
    this.ⵠⵠΔ[28].id = 28;
    this.ⵠⵠΔ[120] = Qf(68, 68, 0, Ⲇⵠ[443], 3);
    this.ⵠⵠΔ[120].id = 120;
    this.ⵠⵠΔ[29] = Qf(68, 68, 0, Ⲇⵠ[385], 3);
    this.ⵠⵠΔ[29].id = 29;
    this.ⵠⵠΔ[121] = Qf(68, 68, 0, Ⲇⵠ[446], 3);
    this.ⵠⵠΔ[121].id = 121;
    this.ⵠⵠΔ[30] = Qf(68, 68, 0, Ⲇⵠ[457], 3);
    this.ⵠⵠΔ[30].id = 30;
    this.ⵠⵠΔ[9] = Qf(68, 68, 0, Ⲇⵠ[862], 3);
    this.ⵠⵠΔ[9].id = 9;
    this.ⵠⵠΔ[31] = Qf(68, 68, 0, Ⲇⵠ[459], 3);
    this.ⵠⵠΔ[31].id = 31;
    this.ⵠⵠΔ[32] = Qf(68, 68, 0, Ⲇⵠ[1018], 3);
    this.ⵠⵠΔ[32].id = 32;
    this.ⵠⵠΔ[33] = Qf(68, 68, 0, Ⲇⵠ[474], 3);
    this.ⵠⵠΔ[33].id = 33;
    this.ⵠⵠΔ[35] = Qf(68, 68, 0, Ⲇⵠ[479], 3);
    this.ⵠⵠΔ[35].id = 35;
    this.ⵠⵠΔ[36] = Qf(68, 68, 0, Ⲇⵠ[482], 3);
    this.ⵠⵠΔ[36].id = 36;
    this.ⵠⵠΔ[37] = Qf(68, 68, 0, Ⲇⵠ[485], 3);
    this.ⵠⵠΔ[37].id = 37;
    this.ⵠⵠΔ[38] = Qf(68, 68, 0, Ⲇⵠ[488], 3);
    this.ⵠⵠΔ[38].id = 38;
    this.ⵠⵠΔ[39] = Qf(68, 68, 0, Ⲇⵠ[491], 3);
    this.ⵠⵠΔ[39].id = 39;
    this.ⵠⵠΔ[122] = Qf(68, 68, 0, Ⲇⵠ[494], 3);
    this.ⵠⵠΔ[122].id = 122;
    this.ⵠⵠΔ[123] = Qf(68, 68, 0, Ⲇⵠ[497], 3);
    this.ⵠⵠΔ[123].id = 123;
    this.ⵠⵠΔ[124] = Qf(68, 68, 0, Ⲇⵠ[501], 3);
    this.ⵠⵠΔ[124].id = 124;
    this.ⵠⵠΔ[40] = Qf(68, 68, 0, Ⲇⵠ[504], 3);
    this.ⵠⵠΔ[40].id = 40;
    this.ⵠⵠΔ[146] = Qf(68, 68, 0, Ⲇⵠ[506], 3);
    this.ⵠⵠΔ[146].id = 146;
    this.ⵠⵠΔ[240] = Qf(68, 68, 0, Ⲇⵠ[1234], 3);
    this.ⵠⵠΔ[240].id = 240;
    this.ⵠⵠΔ[147] = Qf(68, 68, 0, Ⲇⵠ[514], 3);
    this.ⵠⵠΔ[147].id = 147;
    this.ⵠⵠΔ[148] = Qf(68, 68, 0, Ⲇⵠ[520], 3);
    this.ⵠⵠΔ[148].id = 148;
    this.ⵠⵠΔ[149] = Qf(68, 68, 0, Ⲇⵠ[522], 3);
    this.ⵠⵠΔ[149].id = 149;
    this.ⵠⵠΔ[150] = Qf(68, 68, 0, Ⲇⵠ[524], 3);
    this.ⵠⵠΔ[150].id = 150;
    this.ⵠⵠΔ[151] = Qf(68, 68, 0, Ⲇⵠ[531], 3);
    this.ⵠⵠΔ[151].id = 151;
    this.ⵠⵠΔ[158] = Qf(68, 68, 0, Ⲇⵠ[534], 3);
    this.ⵠⵠΔ[158].id = 158;
    this.ⵠⵠΔ[159] = Qf(68, 68, 0, Ⲇⵠ[554], 3);
    this.ⵠⵠΔ[159].id = 159;
    this.ⵠⵠΔ[43] = Qf(68, 68, 0, Ⲇⵠ[543], 3);
    this.ⵠⵠΔ[43].id = 43;
    this.ⵠⵠΔ[45] = Qf(68, 68, 0, Ⲇⵠ[552], 3);
    this.ⵠⵠΔ[45].id = 45;
    this.ⵠⵠΔ[125] = Qf(68, 68, 0, Ⲇⵠ[606], 3);
    this.ⵠⵠΔ[125].id = 125;
    this.ⵠⵠΔ[221] = Qf(68, 68, 0, Ⲇⵠ[1237], 3);
    this.ⵠⵠΔ[221].id = 221;
    this.ⵠⵠΔ[223] = Qf(68, 68, 0, Ⲇⵠ[1029], 3);
    this.ⵠⵠΔ[223].id = 223;
    this.ⵠⵠΔ[224] = Qf(68, 68, 0, Ⲇⵠ[1032], 3);
    this.ⵠⵠΔ[224].id = 224;
    this.ⵠⵠΔ[230] = Qf(68, 68, 0, Ⲇⵠ[1118], 3);
    this.ⵠⵠΔ[230].id = 230;
    this.ⵠⵠΔ[89] = Qf(68, 68, 0, Ⲇⵠ[1047], 3);
    this.ⵠⵠΔ[89].id = 89;
    this.ⵠⵠΔ[225] = Qf(68, 68, 0, Ⲇⵠ[1050], 3);
    this.ⵠⵠΔ[225].id = 225;
    this.ⵠⵠΔ[227] = Qf(68, 68, 0, Ⲇⵠ[1081], 3);
    this.ⵠⵠΔ[227].id = 227;
    this.ⵠⵠΔ[239] = Qf(68, 68, 0, Ⲇⵠ[1225], 3);
    this.ⵠⵠΔ[239].id = 239;
    this.ⵠⵠΔ[228] = Qf(68, 68, 0, Ⲇⵠ[1096], 3);
    this.ⵠⵠΔ[228].id = 228;
    this.ⵠⵠΔ[229] = Qf(68, 68, 0, Ⲇⵠ[1111], 3);
    this.ⵠⵠΔ[229].id = 229;
    this.ⵠⵠΔ[226] = Qf(68, 68, 0, Ⲇⵠ[1190], 3);
    this.ⵠⵠΔ[226].id = 226;
    this.ⵠⵠΔ[126] = Qf(68, 68, 0, Ⲇⵠ[610], 3);
    this.ⵠⵠΔ[126].id = 126;
    this.ⵠⵠΔ[127] = Qf(68, 68, 0, Ⲇⵠ[615], 3);
    this.ⵠⵠΔ[127].id = 127;
    this.ⵠⵠΔ[128] = Qf(68, 68, 0, Ⲇⵠ[614], 3);
    this.ⵠⵠΔ[128].id = 128;
    this.ⵠⵠΔ[46] = Qf(68, 68, 0, Ⲇⵠ[617], 3);
    this.ⵠⵠΔ[46].id = 46;
    this.ⵠⵠΔ[50] = Qf(68, 68, 0, Ⲇⵠ[701], 3);
    this.ⵠⵠΔ[50].id = 50;
    this.ⵠⵠΔ[51] = Qf(68, 68, 0, Ⲇⵠ[703], 3);
    this.ⵠⵠΔ[51].id = 51;
    this.ⵠⵠΔ[52] = Qf(68, 68, 0, Ⲇⵠ[707], 3);
    this.ⵠⵠΔ[52].id = 52;
    this.ⵠⵠΔ[55] = Qf(68, 68, 0, Ⲇⵠ[710], 3);
    this.ⵠⵠΔ[55].id = 55;
    this.ⵠⵠΔ[129] = Qf(68, 68, 0, Ⲇⵠ[625], 3);
    this.ⵠⵠΔ[129].id = 129;
    this.ⵠⵠΔ[130] = Qf(68, 68, 0, Ⲇⵠ[628], 3);
    this.ⵠⵠΔ[130].id = 130;
    this.ⵠⵠΔ[131] = Qf(68, 68, 0, Ⲇⵠ[630], 3);
    this.ⵠⵠΔ[131].id = 131;
    this.ⵠⵠΔ[132] = Qf(68, 68, 0, Ⲇⵠ[633], 3);
    this.ⵠⵠΔ[132].id = 132;
    this.ⵠⵠΔ[133] = Qf(68, 68, 0, Ⲇⵠ[636], 3);
    this.ⵠⵠΔ[133].id = 133;
    this.ⵠⵠΔ[134] = Qf(68, 68, 0, Ⲇⵠ[640], 3);
    this.ⵠⵠΔ[134].id = 134;
    this.ⵠⵠΔ[135] = Qf(68, 68, 0, Ⲇⵠ[645], 3);
    this.ⵠⵠΔ[135].id = 135;
    this.ⵠⵠΔ[47] = Qf(68, 68, 0, Ⲇⵠ[648], 3);
    this.ⵠⵠΔ[47].id = 47;
    this.ⵠⵠΔ[48] = Qf(68, 68, 0, Ⲇⵠ[651], 3);
    this.ⵠⵠΔ[48].id = 48;
    this.ⵠⵠΔ[49] = Qf(68, 68, 0, Ⲇⵠ[653], 3);
    this.ⵠⵠΔ[49].id = 49;
    this.ⵠⵠΔ[136] = Qf(68, 68, 0, Ⲇⵠ[661], 3);
    this.ⵠⵠΔ[136].id = 136;
    this.ⵠⵠΔ[143] = Qf(68, 68, 0, Ⲇⵠ[689], 3);
    this.ⵠⵠΔ[143].id = 143;
    this.ⵠⵠΔ[137] = Qf(68, 68, 0, Ⲇⵠ[663], 3);
    this.ⵠⵠΔ[137].id = 137;
    this.ⵠⵠΔ[138] = Qf(68, 68, 0, Ⲇⵠ[665], 3);
    this.ⵠⵠΔ[138].id = 138;
    this.ⵠⵠΔ[139] = Qf(68, 68, 0, Ⲇⵠ[675], 3);
    this.ⵠⵠΔ[139].id = 139;
    this.ⵠⵠΔ[140] = Qf(68, 68, 0, Ⲇⵠ[682], 3);
    this.ⵠⵠΔ[140].id = 140;
    this.ⵠⵠΔ[141] = Qf(68, 68, 0, Ⲇⵠ[683], 3);
    this.ⵠⵠΔ[141].id = 141;
    this.ⵠⵠΔ[142] = Qf(68, 68, 0, Ⲇⵠ[686], 3);
    this.ⵠⵠΔ[142].id = 142;
    this.ⵠⵠΔ[144] = Qf(68, 68, 0, Ⲇⵠ[719], 3);
    this.ⵠⵠΔ[144].id = 144;
    this.ⵠⵠΔ[145] = Qf(68, 68, 0, Ⲇⵠ[731], 3);
    this.ⵠⵠΔ[145].id = 145;
    this.ⵠⵠΔ[59] = Qf(68, 68, 0, Ⲇⵠ[733], 3);
    this.ⵠⵠΔ[59].id = 59;
    this.ⵠⵠΔ[62] = Qf(68, 68, 0, Ⲇⵠ[565], 3);
    this.ⵠⵠΔ[62].id = 62;
    this.ⵠⵠΔ[185] = Qf(68, 68, 0, Ⲇⵠ[590], 3);
    this.ⵠⵠΔ[185].id = 185;
    this.ⵠⵠΔ[184] = Qf(68, 68, 0, Ⲇⵠ[752], 3);
    this.ⵠⵠΔ[184].id = 184;
    this.ⵠⵠΔ[187] = Qf(68, 68, 0, Ⲇⵠ[591], 3);
    this.ⵠⵠΔ[187].id = 187;
    this.ⵠⵠΔ[186] = Qf(68, 68, 0, Ⲇⵠ[754], 3);
    this.ⵠⵠΔ[186].id = 186;
    this.ⵠⵠΔ[77] = Qf(68, 68, 0, Ⲇⵠ[757], 3);
    this.ⵠⵠΔ[77].id = 77;
    this.ⵠⵠΔ[175] = Qf(68, 68, 0, Ⲇⵠ[759], 3);
    this.ⵠⵠΔ[175].id = 175;
    this.ⵠⵠΔ[176] = Qf(68, 68, 0, Ⲇⵠ[763], 3);
    this.ⵠⵠΔ[176].id = 176;
    this.ⵠⵠΔ[78] = Qf(68, 68, 0, Ⲇⵠ[761], 3);
    this.ⵠⵠΔ[78].id = 78;
    this.ⵠⵠΔ[177] = Qf(68, 68, 0, Ⲇⵠ[766], 3);
    this.ⵠⵠΔ[177].id = 177;
    this.ⵠⵠΔ[79] = Qf(68, 68, 0, Ⲇⵠ[765], 3);
    this.ⵠⵠΔ[79].id = 79;
    this.ⵠⵠΔ[83] = Qf(68, 68, 0, Ⲇⵠ[769], 3);
    this.ⵠⵠΔ[83].id = 83;
    this.ⵠⵠΔ[84] = Qf(68, 68, 0, Ⲇⵠ[773], 3);
    this.ⵠⵠΔ[84].id = 84;
    this.ⵠⵠΔ[178] = Qf(68, 68, 0, Ⲇⵠ[774], 3);
    this.ⵠⵠΔ[178].id = 178;
    this.ⵠⵠΔ[179] = Qf(68, 68, 0, Ⲇⵠ[775], 3);
    this.ⵠⵠΔ[179].id = 179;
    this.ⵠⵠΔ[86] = Qf(68, 68, 0, Ⲇⵠ[778], 3);
    this.ⵠⵠΔ[86].id = 86;
    this.ⵠⵠΔ[85] = Qf(68, 68, 0, Ⲇⵠ[781], 3);
    this.ⵠⵠΔ[85].id = 85;
    this.ⵠⵠΔ[180] = Qf(68, 68, 0, Ⲇⵠ[786], 3);
    this.ⵠⵠΔ[180].id = 180;
    this.ⵠⵠΔ[181] = Qf(68, 68, 0, Ⲇⵠ[787], 3);
    this.ⵠⵠΔ[181].id = 181;
    this.ⵠⵠΔ[182] = Qf(68, 68, 0, Ⲇⵠ[790], 3);
    this.ⵠⵠΔ[182].id = 182;
    this.ⵠⵠΔ[183] = Qf(68, 68, 0, Ⲇⵠ[801], 3);
    this.ⵠⵠΔ[183].id = 183;
    this.ⵠⵠΔ[188] = Qf(68, 68, 0, Ⲇⵠ[810], 3);
    this.ⵠⵠΔ[188].id = 188;
    this.ⵠⵠΔ[189] = Qf(68, 68, 0, Ⲇⵠ[815], 3);
    this.ⵠⵠΔ[189].id = 189;
    this.ⵠⵠΔ[190] = Qf(68, 68, 0, Ⲇⵠ[844], 3);
    this.ⵠⵠΔ[190].id = 190;
    this.ⵠⵠΔ[191] = Qf(68, 68, 0, Ⲇⵠ[836], 3);
    this.ⵠⵠΔ[191].id = 191;
    this.ⵠⵠΔ[192] = Qf(68, 68, 0, Ⲇⵠ[841], 3);
    this.ⵠⵠΔ[192].id = 192;
    this.ⵠⵠΔ[193] = Qf(68, 68, 0, Ⲇⵠ[847], 3);
    this.ⵠⵠΔ[193].id = 193;
    this.ⵠⵠΔ[194] = Qf(68, 68, 0, Ⲇⵠ[851], 3);
    this.ⵠⵠΔ[194].id = 194;
    this.ⵠⵠΔ[206] = Qf(68, 68, 0, Ⲇⵠ[961], 3);
    this.ⵠⵠΔ[206].id = 206;
    this.ⵠⵠΔ[207] = Qf(68, 68, 0, Ⲇⵠ[974], 3);
    this.ⵠⵠΔ[207].id = 207;
    this.ⵠⵠΔ[204] = Qf(68, 68, 0, Ⲇⵠ[951], 3);
    this.ⵠⵠΔ[204].id = 204;
    this.ⵠⵠΔ[205] = Qf(68, 68, 0, Ⲇⵠ[956], 3);
    this.ⵠⵠΔ[205].id = 205;
    this.ⵠⵠΔ[208] = Qf(68, 68, 0, Ⲇⵠ[968], 3);
    this.ⵠⵠΔ[208].id = 208;
    this.ⵠⵠΔ[209] = Qf(68, 68, 0, Ⲇⵠ[973], 3);
    this.ⵠⵠΔ[209].id = 209;
    this.ⵠⵠΔ[210] = Qf(68, 68, 0, Ⲇⵠ[983], 3);
    this.ⵠⵠΔ[210].id = 210;
    this.ⵠⵠΔ[211] = Qf(68, 68, 0, Ⲇⵠ[988], 3);
    this.ⵠⵠΔ[211].id = 211;
    this.ⵠⵠΔ[41] = Qf(68, 68, 0, Ⲇⵠ[881], 3);
    this.ⵠⵠΔ[41].id = 41;
    this.ⵠⵠΔ[42] = Qf(68, 68, 0, Ⲇⵠ[883], 3);
    this.ⵠⵠΔ[42].id = 42;
    this.ⵠⵠΔ[12] = Qf(68, 68, 0, Ⲇⵠ[403], 3);
    this.ⵠⵠΔ[12].id = 12;
    this.ⵠⵠΔ[16] = Qf(68, 68, 0, Ⲇⵠ[875], 3);
    this.ⵠⵠΔ[16].id = 16;
    this.ⵠⵠΔ[196] = Qf(68, 68, 0, Ⲇⵠ[898], 3);
    this.ⵠⵠΔ[196].id = 196;
    this.ⵠⵠΔ[18] = Qf(68, 68, 0, Ⲇⵠ[899], 3);
    this.ⵠⵠΔ[18].id = 18;
    this.ⵠⵠΔ[197] = Qf(68, 68, 0, Ⲇⵠ[906], 3);
    this.ⵠⵠΔ[197].id = 197;
    this.ⵠⵠΔ[198] = Qf(68, 68, 0, Ⲇⵠ[908], 3);
    this.ⵠⵠΔ[198].id = 198;
    this.ⵠⵠΔ[61] = Qf(68, 68, 0, Ⲇⵠ[911], 3);
    this.ⵠⵠΔ[61].id = 61;
    this.ⵠⵠΔ[201] = Qf(68, 68, 0, Ⲇⵠ[871], 3);
    this.ⵠⵠΔ[201].id = 201;
    this.ⵠⵠΔ[199] = Qf(68, 68, 0, Ⲇⵠ[863], 3);
    this.ⵠⵠΔ[199].id = 199;
    this.ⵠⵠΔ[200] = Qf(68, 68, 0, Ⲇⵠ[868], 3);
    this.ⵠⵠΔ[200].id = 200;
    this.ⵠⵠΔᐃΔ = [];
    for (k = 0; k < 250; k++) {
      this.ⵠⵠΔᐃΔ[k] = Qf(0, 0, 0, Ⲇⵠ[366]);
    }
    this.ᐃⲆᐃ = [];
    this.ᐃⲆᐃ[0] = Qf(60, 60, 0, Ⲇⵠ[261], 3);
    this.ᐃⲆᐃ[0].id = 0;
    this.ᐃⲆᐃ[1] = Qf(60, 60, 0, Ⲇⵠ[312], 3);
    this.ᐃⲆᐃ[1].id = 1;
    this.ᐃⲆᐃ[108] = Qf(60, 60, 0, Ⲇⵠ[315], 3);
    this.ᐃⲆᐃ[108].id = 108;
    this.ᐃⲆᐃ[108].info.ⵠΔ[2] = this.ᐃⲆᐃ[108].info.ⵠΔ[0];
    this.ᐃⲆᐃ[109] = Qf(60, 60, 0, Ⲇⵠ[316], 3);
    this.ᐃⲆᐃ[109].id = 109;
    this.ᐃⲆᐃ[109].info.ⵠΔ[2] = this.ᐃⲆᐃ[109].info.ⵠΔ[0];
    this.ᐃⲆᐃ[110] = Qf(60, 60, 0, Ⲇⵠ[277], 3);
    this.ᐃⲆᐃ[110].id = 110;
    this.ᐃⲆᐃ[233] = Qf(60, 60, 0, Ⲇⵠ[1154], 3);
    this.ᐃⲆᐃ[233].id = 233;
    this.ᐃⲆᐃ[111] = Qf(60, 60, 0, Ⲇⵠ[297], 3);
    this.ᐃⲆᐃ[111].id = 111;
    this.ᐃⲆᐃ[111].info.ⵠΔ[2] = this.ᐃⲆᐃ[111].info.ⵠΔ[0];
    this.ᐃⲆᐃ[112] = Qf(60, 60, 0, Ⲇⵠ[298], 3);
    this.ᐃⲆᐃ[112].id = 112;
    this.ᐃⲆᐃ[112].info.ⵠΔ[2] = this.ᐃⲆᐃ[112].info.ⵠΔ[0];
    this.ᐃⲆᐃ[3] = Qf(60, 60, 0, Ⲇⵠ[258], 3);
    this.ᐃⲆᐃ[3].id = 3;
    this.ᐃⲆᐃ[4] = Qf(60, 60, 0, Ⲇⵠ[296], 3);
    this.ᐃⲆᐃ[4].id = 4;
    this.ᐃⲆᐃ[5] = Qf(60, 60, 0, Ⲇⵠ[292], 3);
    this.ᐃⲆᐃ[5].id = 5;
    this.ᐃⲆᐃ[57] = Qf(60, 60, 0, Ⲇⵠ[829], 3);
    this.ᐃⲆᐃ[57].id = 57;
    this.ᐃⲆᐃ[6] = Qf(60, 60, 0, Ⲇⵠ[293], 3);
    this.ᐃⲆᐃ[6].id = 6;
    this.ᐃⲆᐃ[113] = Qf(60, 60, 0, Ⲇⵠ[309], 3);
    this.ᐃⲆᐃ[113].id = 113;
    this.ᐃⲆᐃ[114] = Qf(60, 60, 0, Ⲇⵠ[310], 3);
    this.ᐃⲆᐃ[114].id = 114;
    this.ᐃⲆᐃ[115] = Qf(60, 60, 0, Ⲇⵠ[311], 3);
    this.ᐃⲆᐃ[115].id = 115;
    this.ᐃⲆᐃ[162] = Qf(60, 60, 0, Ⲇⵠ[317], 3);
    this.ᐃⲆᐃ[162].id = 162;
    this.ᐃⲆᐃ[160] = Qf(60, 60, 0, Ⲇⵠ[319], 3);
    this.ᐃⲆᐃ[160].id = 160;
    this.ᐃⲆᐃ[8] = Qf(60, 60, 0, Ⲇⵠ[313], 3);
    this.ᐃⲆᐃ[8].id = 8;
    this.ᐃⲆᐃ[117] = Qf(60, 60, 0, Ⲇⵠ[323], 3);
    this.ᐃⲆᐃ[117].id = 117;
    this.ᐃⲆᐃ[116] = Qf(60, 60, 0, Ⲇⵠ[300], 3);
    this.ᐃⲆᐃ[116].id = 116;
    this.ᐃⲆᐃ[118] = Qf(60, 60, 0, Ⲇⵠ[328], 3);
    this.ᐃⲆᐃ[118].id = 118;
    this.ᐃⲆᐃ[195] = Qf(60, 60, 0, Ⲇⵠ[303], 3);
    this.ᐃⲆᐃ[195].id = 195;
    this.ᐃⲆᐃ[161] = Qf(60, 60, 0, Ⲇⵠ[305], 3);
    this.ᐃⲆᐃ[161].id = 161;
    this.ᐃⲆᐃ[161].info.ⵠΔ[2] = this.ᐃⲆᐃ[161].info.ⵠΔ[0];
    this.ᐃⲆᐃ[163] = Qf(60, 60, 0, Ⲇⵠ[329], 3);
    this.ᐃⲆᐃ[163].id = 163;
    this.ᐃⲆᐃ[164] = Qf(60, 60, 0, Ⲇⵠ[330], 3);
    this.ᐃⲆᐃ[164].id = 164;
    this.ᐃⲆᐃ[165] = Qf(60, 60, 0, Ⲇⵠ[331], 3);
    this.ᐃⲆᐃ[165].id = 165;
    this.ᐃⲆᐃ[166] = Qf(60, 60, 0, Ⲇⵠ[335], 3);
    this.ᐃⲆᐃ[166].id = 166;
    this.ᐃⲆᐃ[167] = Qf(60, 60, 0, Ⲇⵠ[337], 3);
    this.ᐃⲆᐃ[167].id = 167;
    this.ᐃⲆᐃ[168] = Qf(60, 60, 0, Ⲇⵠ[361], 3);
    this.ᐃⲆᐃ[168].id = 168;
    this.ᐃⲆᐃ[169] = Qf(60, 60, 0, Ⲇⵠ[362], 3);
    this.ᐃⲆᐃ[169].id = 169;
    this.ᐃⲆᐃ[170] = Qf(60, 60, 0, Ⲇⵠ[364], 3);
    this.ᐃⲆᐃ[170].id = 170;
    this.ᐃⲆᐃ[29] = Qf(60, 60, 0, Ⲇⵠ[392], 3);
    this.ᐃⲆᐃ[29].id = 29;
    this.ᐃⲆᐃ[10] = Qf(60, 60, 0, Ⲇⵠ[369], 3);
    this.ᐃⲆᐃ[10].id = 10;
    this.ᐃⲆᐃ[171] = Qf(60, 60, 0, Ⲇⵠ[372], 3);
    this.ᐃⲆᐃ[171].id = 171;
    this.ᐃⲆᐃ[172] = Qf(60, 60, 0, Ⲇⵠ[375], 3);
    this.ᐃⲆᐃ[172].id = 172;
    this.ᐃⲆᐃ[173] = Qf(60, 60, 0, Ⲇⵠ[378], 3);
    this.ᐃⲆᐃ[173].id = 173;
    this.ᐃⲆᐃ[2] = Qf(60, 60, 0, Ⲇⵠ[368], 3);
    this.ᐃⲆᐃ[2].id = 2;
    this.ᐃⲆᐃ[2].info.ⵠΔ[2] = this.ᐃⲆᐃ[2].info.ⵠΔ[0];
    this.ᐃⲆᐃ[237] = Qf(60, 60, 0, Ⲇⵠ[1162], 3);
    this.ᐃⲆᐃ[237].id = 237;
    this.ᐃⲆᐃ[237].info.ⵠΔ[2] = this.ᐃⲆᐃ[237].info.ⵠΔ[0];
    this.ᐃⲆᐃ[174] = Qf(60, 60, 0, Ⲇⵠ[393], 3);
    this.ᐃⲆᐃ[174].id = 174;
    this.ᐃⲆᐃ[174].info.ⵠΔ[2] = this.ᐃⲆᐃ[174].info.ⵠΔ[0];
    this.ᐃⲆᐃ[222] = Qf(60, 60, 0, Ⲇⵠ[1035], 3);
    this.ᐃⲆᐃ[222].id = 222;
    this.ᐃⲆᐃ[231] = Qf(60, 60, 0, Ⲇⵠ[1037], 3);
    this.ᐃⲆᐃ[231].id = 231;
    this.ᐃⲆᐃ[232] = Qf(60, 60, 0, Ⲇⵠ[1039], 3);
    this.ᐃⲆᐃ[232].id = 232;
    this.ᐃⲆᐃ[234] = Qf(60, 60, 0, Ⲇⵠ[1156], 3);
    this.ᐃⲆᐃ[234].id = 234;
    this.ᐃⲆᐃ[10] = Qf(60, 60, 0, Ⲇⵠ[369], 3);
    this.ᐃⲆᐃ[10].id = 10;
    this.ᐃⲆᐃ[11] = Qf(60, 60, 0, Ⲇⵠ[381], 3);
    this.ᐃⲆᐃ[11].id = 11;
    this.ᐃⲆᐃ[12] = Qf(60, 60, 0, Ⲇⵠ[401], 3);
    this.ᐃⲆᐃ[12].id = 12;
    this.ᐃⲆᐃ[13] = Qf(60, 60, 0, Ⲇⵠ[395], 3);
    this.ᐃⲆᐃ[13].id = 13;
    this.ᐃⲆᐃ[14] = Qf(60, 60, 0, Ⲇⵠ[398], 3);
    this.ᐃⲆᐃ[14].id = 14;
    this.ᐃⲆᐃ[15] = Qf(60, 60, 0, Ⲇⵠ[404], 3);
    this.ᐃⲆᐃ[15].id = 15;
    this.ᐃⲆᐃ[16] = Qf(60, 60, 0, Ⲇⵠ[874], 3);
    this.ᐃⲆᐃ[16].id = 16;
    this.ᐃⲆᐃ[119] = Qf(60, 60, 0, Ⲇⵠ[408], 3);
    this.ᐃⲆᐃ[119].id = 119;
    this.ᐃⲆᐃ[23] = Qf(60, 60, 0, Ⲇⵠ[420], 3);
    this.ᐃⲆᐃ[23].id = 23;
    this.ᐃⲆᐃ[24] = Qf(60, 60, 0, Ⲇⵠ[423], 3);
    this.ᐃⲆᐃ[24].id = 24;
    this.ᐃⲆᐃ[87] = Qf(60, 60, 0, Ⲇⵠ[1227], 3);
    this.ᐃⲆᐃ[87].id = 87;
    this.ᐃⲆᐃ[88] = Qf(60, 60, 0, Ⲇⵠ[1230], 3);
    this.ᐃⲆᐃ[88].id = 88;
    this.ᐃⲆᐃ[80] = Qf(60, 60, 0, Ⲇⵠ[1137], 3);
    this.ᐃⲆᐃ[80].id = 80;
    this.ᐃⲆᐃ[81] = Qf(60, 60, 0, Ⲇⵠ[1140], 3);
    this.ᐃⲆᐃ[81].id = 81;
    this.ᐃⲆᐃ[64] = Qf(60, 60, 0, Ⲇⵠ[569], 3);
    this.ᐃⲆᐃ[64].id = 64;
    this.ᐃⲆᐃ[101] = Qf(60, 60, 0, Ⲇⵠ[1166], 3);
    this.ᐃⲆᐃ[101].id = 101;
    this.ᐃⲆᐃ[71] = Qf(60, 60, 0, Ⲇⵠ[1239], 3);
    this.ᐃⲆᐃ[71].id = 71;
    this.ᐃⲆᐃ[65] = Qf(60, 60, 0, Ⲇⵠ[572], 3);
    this.ᐃⲆᐃ[65].id = 65;
    this.ᐃⲆᐃ[102] = Qf(60, 60, 0, Ⲇⵠ[1169], 3);
    this.ᐃⲆᐃ[102].id = 102;
    this.ᐃⲆᐃ[72] = Qf(60, 60, 0, Ⲇⵠ[1242], 3);
    this.ᐃⲆᐃ[72].id = 72;
    this.ᐃⲆᐃ[66] = Qf(60, 60, 0, Ⲇⵠ[575], 3);
    this.ᐃⲆᐃ[66].id = 66;
    this.ᐃⲆᐃ[103] = Qf(60, 60, 0, Ⲇⵠ[1172], 3);
    this.ᐃⲆᐃ[103].id = 103;
    this.ᐃⲆᐃ[73] = Qf(60, 60, 0, Ⲇⵠ[1245], 3);
    this.ᐃⲆᐃ[73].id = 73;
    this.ᐃⲆᐃ[67] = Qf(60, 60, 0, Ⲇⵠ[578], 3);
    this.ᐃⲆᐃ[67].id = 67;
    this.ᐃⲆᐃ[104] = Qf(60, 60, 0, Ⲇⵠ[1175], 3);
    this.ᐃⲆᐃ[104].id = 104;
    this.ᐃⲆᐃ[74] = Qf(60, 60, 0, Ⲇⵠ[1248], 3);
    this.ᐃⲆᐃ[74].id = 74;
    this.ᐃⲆᐃ[68] = Qf(60, 60, 0, Ⲇⵠ[581], 3);
    this.ᐃⲆᐃ[68].id = 68;
    this.ᐃⲆᐃ[105] = Qf(60, 60, 0, Ⲇⵠ[1178], 3);
    this.ᐃⲆᐃ[105].id = 105;
    this.ᐃⲆᐃ[75] = Qf(60, 60, 0, Ⲇⵠ[1251], 3);
    this.ᐃⲆᐃ[75].id = 75;
    this.ᐃⲆᐃ[69] = Qf(60, 60, 0, Ⲇⵠ[584], 3);
    this.ᐃⲆᐃ[69].id = 69;
    this.ᐃⲆᐃ[106] = Qf(60, 60, 0, Ⲇⵠ[1181], 3);
    this.ᐃⲆᐃ[106].id = 106;
    this.ᐃⲆᐃ[76] = Qf(60, 60, 0, Ⲇⵠ[1254], 3);
    this.ᐃⲆᐃ[76].id = 76;
    this.ᐃⲆᐃ[70] = Qf(60, 60, 0, Ⲇⵠ[587], 3);
    this.ᐃⲆᐃ[70].id = 70;
    this.ᐃⲆᐃ[107] = Qf(60, 60, 0, Ⲇⵠ[1184], 3);
    this.ᐃⲆᐃ[107].id = 107;
    this.ᐃⲆᐃ[94] = Qf(60, 60, 0, Ⲇⵠ[1257], 3);
    this.ᐃⲆᐃ[94].id = 94;
    this.ᐃⲆᐃ[95] = Qf(60, 60, 0, Ⲇⵠ[1260], 3);
    this.ᐃⲆᐃ[95].id = 95;
    this.ᐃⲆᐃ[96] = Qf(60, 60, 0, Ⲇⵠ[1263], 3);
    this.ᐃⲆᐃ[96].id = 96;
    this.ᐃⲆᐃ[97] = Qf(60, 60, 0, Ⲇⵠ[1266], 3);
    this.ᐃⲆᐃ[97].id = 97;
    this.ᐃⲆᐃ[98] = Qf(60, 60, 0, Ⲇⵠ[1269], 3);
    this.ᐃⲆᐃ[98].id = 98;
    this.ᐃⲆᐃ[99] = Qf(60, 60, 0, Ⲇⵠ[1272], 3);
    this.ᐃⲆᐃ[99].id = 99;
    this.ᐃⲆᐃ[58] = Qf(60, 60, 0, Ⲇⵠ[826], 3);
    this.ᐃⲆᐃ[58].id = 58;
    this.ᐃⲆᐃ[25] = Qf(60, 60, 0, Ⲇⵠ[429], 3);
    this.ᐃⲆᐃ[25].id = 25;
    this.ᐃⲆᐃ[26] = Qf(60, 60, 0, Ⲇⵠ[432], 3);
    this.ᐃⲆᐃ[26].id = 26;
    this.ᐃⲆᐃ[27] = Qf(60, 60, 0, Ⲇⵠ[435], 3);
    this.ᐃⲆᐃ[27].id = 27;
    this.ᐃⲆᐃ[28] = Qf(60, 60, 0, Ⲇⵠ[438], 3);
    this.ᐃⲆᐃ[28].id = 28;
    this.ᐃⲆᐃ[120] = Qf(60, 60, 0, Ⲇⵠ[441], 3);
    this.ᐃⲆᐃ[120].id = 120;
    this.ᐃⲆᐃ[120].info.ⵠΔ[2] = this.ᐃⲆᐃ[120].info.ⵠΔ[0];
    this.ᐃⲆᐃ[29] = Qf(60, 60, 0, Ⲇⵠ[392], 3);
    this.ᐃⲆᐃ[29].id = 29;
    this.ᐃⲆᐃ[121] = Qf(60, 60, 0, Ⲇⵠ[418], 3);
    this.ᐃⲆᐃ[121].id = 121;
    this.ᐃⲆᐃ[121].info.ⵠΔ[2] = this.ᐃⲆᐃ[121].info.ⵠΔ[0];
    this.ᐃⲆᐃ[30] = Qf(60, 60, 0, Ⲇⵠ[455], 3);
    this.ᐃⲆᐃ[30].id = 30;
    this.ᐃⲆᐃ[9] = Qf(60, 60, 0, Ⲇⵠ[860], 3);
    this.ᐃⲆᐃ[9].id = 9;
    this.ᐃⲆᐃ[31] = Qf(60, 60, 0, Ⲇⵠ[458], 3);
    this.ᐃⲆᐃ[31].id = 31;
    this.ᐃⲆᐃ[32] = Qf(60, 60, 0, Ⲇⵠ[1017], 3);
    this.ᐃⲆᐃ[32].id = 32;
    this.ᐃⲆᐃ[33] = Qf(60, 60, 0, Ⲇⵠ[472], 3);
    this.ᐃⲆᐃ[33].id = 33;
    this.ᐃⲆᐃ[35] = Qf(60, 60, 0, Ⲇⵠ[477], 3);
    this.ᐃⲆᐃ[35].id = 35;
    this.ᐃⲆᐃ[36] = Qf(60, 60, 0, Ⲇⵠ[480], 3);
    this.ᐃⲆᐃ[36].id = 36;
    this.ᐃⲆᐃ[37] = Qf(60, 60, 0, Ⲇⵠ[483], 3);
    this.ᐃⲆᐃ[37].id = 37;
    this.ᐃⲆᐃ[38] = Qf(60, 60, 0, Ⲇⵠ[486], 3);
    this.ᐃⲆᐃ[38].id = 38;
    this.ᐃⲆᐃ[39] = Qf(60, 60, 0, Ⲇⵠ[489], 3);
    this.ᐃⲆᐃ[39].id = 39;
    this.ᐃⲆᐃ[122] = Qf(60, 60, 0, Ⲇⵠ[492], 3);
    this.ᐃⲆᐃ[122].id = 122;
    this.ᐃⲆᐃ[123] = Qf(60, 60, 0, Ⲇⵠ[495], 3);
    this.ᐃⲆᐃ[123].id = 123;
    this.ᐃⲆᐃ[124] = Qf(60, 60, 0, Ⲇⵠ[499], 3);
    this.ᐃⲆᐃ[124].id = 124;
    this.ᐃⲆᐃ[40] = Qf(60, 60, 0, Ⲇⵠ[502], 3);
    this.ᐃⲆᐃ[40].id = 40;
    this.ᐃⲆᐃ[146] = Qf(60, 60, 0, Ⲇⵠ[505], 3);
    this.ᐃⲆᐃ[146].id = 146;
    this.ᐃⲆᐃ[146].info.ⵠΔ[2] = this.ᐃⲆᐃ[146].info.ⵠΔ[0];
    this.ᐃⲆᐃ[240] = Qf(60, 60, 0, Ⲇⵠ[1233], 3);
    this.ᐃⲆᐃ[240].id = 240;
    this.ᐃⲆᐃ[240].info.ⵠΔ[2] = this.ᐃⲆᐃ[240].info.ⵠΔ[0];
    this.ᐃⲆᐃ[147] = Qf(60, 60, 0, Ⲇⵠ[513], 3);
    this.ᐃⲆᐃ[147].id = 147;
    this.ᐃⲆᐃ[147].info.ⵠΔ[2] = this.ᐃⲆᐃ[147].info.ⵠΔ[0];
    this.ᐃⲆᐃ[148] = Qf(60, 60, 0, Ⲇⵠ[518], 3);
    this.ᐃⲆᐃ[148].id = 148;
    this.ᐃⲆᐃ[148].info.ⵠΔ[2] = this.ᐃⲆᐃ[148].info.ⵠΔ[0];
    this.ᐃⲆᐃ[149] = Qf(60, 60, 0, Ⲇⵠ[521], 3);
    this.ᐃⲆᐃ[149].id = 149;
    this.ᐃⲆᐃ[150] = Qf(60, 60, 0, Ⲇⵠ[523], 3);
    this.ᐃⲆᐃ[150].id = 150;
    this.ᐃⲆᐃ[151] = Qf(60, 60, 0, Ⲇⵠ[529], 3);
    this.ᐃⲆᐃ[151].id = 151;
    this.ᐃⲆᐃ[158] = Qf(60, 60, 0, Ⲇⵠ[532], 3);
    this.ᐃⲆᐃ[158].id = 158;
    this.ᐃⲆᐃ[159] = Qf(60, 60, 0, Ⲇⵠ[553], 3);
    this.ᐃⲆᐃ[159].id = 159;
    this.ᐃⲆᐃ[43] = Qf(60, 60, 0, Ⲇⵠ[541], 3);
    this.ᐃⲆᐃ[43].id = 43;
    this.ᐃⲆᐃ[45] = Qf(60, 60, 0, Ⲇⵠ[550], 3);
    this.ᐃⲆᐃ[45].id = 45;
    this.ᐃⲆᐃ[125] = Qf(60, 60, 0, Ⲇⵠ[605], 3);
    this.ᐃⲆᐃ[125].id = 125;
    this.ᐃⲆᐃ[221] = Qf(60, 60, 0, Ⲇⵠ[1236], 3);
    this.ᐃⲆᐃ[221].id = 221;
    this.ᐃⲆᐃ[223] = Qf(60, 60, 0, Ⲇⵠ[1028], 3);
    this.ᐃⲆᐃ[223].id = 223;
    this.ᐃⲆᐃ[224] = Qf(60, 60, 0, Ⲇⵠ[1031], 3);
    this.ᐃⲆᐃ[224].id = 224;
    this.ᐃⲆᐃ[230] = Qf(60, 60, 0, Ⲇⵠ[1117], 3);
    this.ᐃⲆᐃ[230].id = 230;
    this.ᐃⲆᐃ[89] = Qf(60, 60, 0, Ⲇⵠ[1046], 3);
    this.ᐃⲆᐃ[89].id = 89;
    this.ᐃⲆᐃ[225] = Qf(60, 60, 0, Ⲇⵠ[1049], 3);
    this.ᐃⲆᐃ[225].id = 225;
    this.ᐃⲆᐃ[226] = Qf(60, 60, 0, Ⲇⵠ[1189], 3);
    this.ᐃⲆᐃ[226].id = 226;
    this.ᐃⲆᐃ[227] = Qf(60, 60, 0, Ⲇⵠ[1080], 3);
    this.ᐃⲆᐃ[227].id = 227;
    this.ᐃⲆᐃ[239] = Qf(60, 60, 0, Ⲇⵠ[1224], 3);
    this.ᐃⲆᐃ[239].id = 239;
    this.ᐃⲆᐃ[228] = Qf(60, 60, 0, Ⲇⵠ[1095], 3);
    this.ᐃⲆᐃ[228].id = 228;
    this.ᐃⲆᐃ[229] = Qf(60, 60, 0, Ⲇⵠ[1110], 3);
    this.ᐃⲆᐃ[229].id = 229;
    this.ᐃⲆᐃ[126] = Qf(60, 60, 0, Ⲇⵠ[609], 3);
    this.ᐃⲆᐃ[126].id = 126;
    this.ᐃⲆᐃ[126].info.ⵠΔ[2] = this.ᐃⲆᐃ[126].info.ⵠΔ[0];
    this.ᐃⲆᐃ[127] = Qf(60, 60, 0, Ⲇⵠ[613], 3);
    this.ᐃⲆᐃ[127].id = 127;
    this.ᐃⲆᐃ[128] = Qf(60, 60, 0, Ⲇⵠ[612], 3);
    this.ᐃⲆᐃ[128].id = 128;
    this.ᐃⲆᐃ[46] = Qf(60, 60, 0, Ⲇⵠ[616], 3);
    this.ᐃⲆᐃ[46].id = 46;
    this.ᐃⲆᐃ[50] = Qf(60, 60, 0, Ⲇⵠ[699], 3);
    this.ᐃⲆᐃ[50].id = 50;
    this.ᐃⲆᐃ[51] = Qf(60, 60, 0, Ⲇⵠ[702], 3);
    this.ᐃⲆᐃ[51].id = 51;
    this.ᐃⲆᐃ[52] = Qf(60, 60, 0, Ⲇⵠ[705], 3);
    this.ᐃⲆᐃ[52].id = 52;
    this.ᐃⲆᐃ[55] = Qf(60, 60, 0, Ⲇⵠ[709], 3);
    this.ᐃⲆᐃ[55].id = 55;
    this.ᐃⲆᐃ[129] = Qf(60, 60, 0, Ⲇⵠ[624], 3);
    this.ᐃⲆᐃ[129].id = 129;
    this.ᐃⲆᐃ[129].info.ⵠΔ[2] = this.ᐃⲆᐃ[129].info.ⵠΔ[0];
    this.ᐃⲆᐃ[130] = Qf(60, 60, 0, Ⲇⵠ[626], 3);
    this.ᐃⲆᐃ[130].id = 130;
    this.ᐃⲆᐃ[131] = Qf(60, 60, 0, Ⲇⵠ[629], 3);
    this.ᐃⲆᐃ[131].id = 131;
    this.ᐃⲆᐃ[131].info.ⵠΔ[2] = this.ᐃⲆᐃ[131].info.ⵠΔ[0];
    this.ᐃⲆᐃ[132] = Qf(60, 60, 0, Ⲇⵠ[631], 3);
    this.ᐃⲆᐃ[132].id = 132;
    this.ᐃⲆᐃ[133] = Qf(60, 60, 0, Ⲇⵠ[634], 3);
    this.ᐃⲆᐃ[133].id = 133;
    this.ᐃⲆᐃ[134] = Qf(60, 60, 0, Ⲇⵠ[639], 3);
    this.ᐃⲆᐃ[134].id = 134;
    this.ᐃⲆᐃ[134].info.ⵠΔ[2] = this.ᐃⲆᐃ[134].info.ⵠΔ[0];
    this.ᐃⲆᐃ[135] = Qf(60, 60, 0, Ⲇⵠ[644], 3);
    this.ᐃⲆᐃ[135].id = 135;
    this.ᐃⲆᐃ[47] = Qf(60, 60, 0, Ⲇⵠ[646], 3);
    this.ᐃⲆᐃ[47].id = 47;
    this.ᐃⲆᐃ[48] = Qf(60, 60, 0, Ⲇⵠ[649], 3);
    this.ᐃⲆᐃ[48].id = 48;
    this.ᐃⲆᐃ[49] = Qf(60, 60, 0, Ⲇⵠ[652], 3);
    this.ᐃⲆᐃ[49].id = 49;
    this.ᐃⲆᐃ[136] = Qf(60, 60, 0, Ⲇⵠ[659], 3);
    this.ᐃⲆᐃ[136].id = 136;
    this.ᐃⲆᐃ[143] = Qf(60, 60, 0, Ⲇⵠ[143], 3);
    this.ᐃⲆᐃ[143].id = 143;
    this.ᐃⲆᐃ[137] = Qf(60, 60, 0, Ⲇⵠ[662], 3);
    this.ᐃⲆᐃ[137].id = 137;
    this.ᐃⲆᐃ[138] = Qf(60, 60, 0, Ⲇⵠ[664], 3);
    this.ᐃⲆᐃ[138].id = 138;
    this.ᐃⲆᐃ[139] = Qf(60, 60, 0, Ⲇⵠ[674], 3);
    this.ᐃⲆᐃ[139].id = 139;
    this.ᐃⲆᐃ[139].info.ⵠΔ[2] = this.ᐃⲆᐃ[139].info.ⵠΔ[0];
    this.ᐃⲆᐃ[140] = Qf(60, 60, 0, Ⲇⵠ[140], 3);
    this.ᐃⲆᐃ[140].id = 140;
    this.ᐃⲆᐃ[140].info.ⵠΔ[2] = this.ᐃⲆᐃ[140].info.ⵠΔ[0];
    this.ᐃⲆᐃ[141] = Qf(60, 60, 0, Ⲇⵠ[685], 3);
    this.ᐃⲆᐃ[141].id = 141;
    this.ᐃⲆᐃ[142] = Qf(60, 60, 0, Ⲇⵠ[142], 3);
    this.ᐃⲆᐃ[142].id = 142;
    this.ᐃⲆᐃ[142].info.ⵠΔ[2] = this.ᐃⲆᐃ[142].info.ⵠΔ[0];
    this.ᐃⲆᐃ[144] = Qf(60, 60, 0, Ⲇⵠ[717], 3);
    this.ᐃⲆᐃ[144].id = 144;
    this.ᐃⲆᐃ[145] = Qf(60, 60, 0, Ⲇⵠ[145], 3);
    this.ᐃⲆᐃ[145].id = 145;
    this.ᐃⲆᐃ[59] = Qf(60, 60, 0, Ⲇⵠ[732], 3);
    this.ᐃⲆᐃ[59].id = 59;
    this.ᐃⲆᐃ[62] = Qf(60, 60, 0, Ⲇⵠ[563], 3);
    this.ᐃⲆᐃ[62].id = 62;
    this.ᐃⲆᐃ[185] = Qf(60, 60, 0, Ⲇⵠ[252], 3);
    this.ᐃⲆᐃ[185].id = 185;
    this.ᐃⲆᐃ[185].info.ⵠΔ[2] = this.ᐃⲆᐃ[185].info.ⵠΔ[0];
    this.ᐃⲆᐃ[184] = Qf(60, 60, 0, Ⲇⵠ[751], 3);
    this.ᐃⲆᐃ[184].id = 184;
    this.ᐃⲆᐃ[184].info.ⵠΔ[2] = this.ᐃⲆᐃ[184].info.ⵠΔ[0];
    this.ᐃⲆᐃ[17] = Qf(60, 60, 0, Ⲇⵠ[877], 3);
    this.ᐃⲆᐃ[17].id = 17;
    this.ᐃⲆᐃ[63] = Qf(60, 60, 0, Ⲇⵠ[566], 3);
    this.ᐃⲆᐃ[63].id = 63;
    this.ᐃⲆᐃ[187] = Qf(60, 60, 0, Ⲇⵠ[253], 3);
    this.ᐃⲆᐃ[187].id = 187;
    this.ᐃⲆᐃ[187].info.ⵠΔ[2] = this.ᐃⲆᐃ[187].info.ⵠΔ[0];
    this.ᐃⲆᐃ[186] = Qf(60, 60, 0, Ⲇⵠ[753], 3);
    this.ᐃⲆᐃ[186].id = 186;
    this.ᐃⲆᐃ[186].info.ⵠΔ[2] = this.ᐃⲆᐃ[186].info.ⵠΔ[0];
    this.ᐃⲆᐃ[77] = Qf(60, 60, 0, Ⲇⵠ[756], 3);
    this.ᐃⲆᐃ[77].id = 77;
    this.ᐃⲆᐃ[175] = Qf(60, 60, 0, Ⲇⵠ[176], 3);
    this.ᐃⲆᐃ[175].id = 175;
    this.ᐃⲆᐃ[175].info.ⵠΔ[2] = this.ᐃⲆᐃ[175].info.ⵠΔ[0];
    this.ᐃⲆᐃ[176] = Qf(60, 60, 0, Ⲇⵠ[177], 3);
    this.ᐃⲆᐃ[176].id = 176;
    this.ᐃⲆᐃ[176].info.ⵠΔ[2] = this.ᐃⲆᐃ[176].info.ⵠΔ[0];
    this.ᐃⲆᐃ[78] = Qf(60, 60, 0, Ⲇⵠ[760], 3);
    this.ᐃⲆᐃ[78].id = 78;
    this.ᐃⲆᐃ[177] = Qf(60, 60, 0, Ⲇⵠ[175], 3);
    this.ᐃⲆᐃ[177].id = 177;
    this.ᐃⲆᐃ[177].info.ⵠΔ[2] = this.ᐃⲆᐃ[177].info.ⵠΔ[0];
    this.ᐃⲆᐃ[79] = Qf(60, 60, 0, Ⲇⵠ[764], 3);
    this.ᐃⲆᐃ[79].id = 79;
    this.ᐃⲆᐃ[83] = Qf(60, 60, 0, Ⲇⵠ[767], 3);
    this.ᐃⲆᐃ[83].id = 83;
    this.ᐃⲆᐃ[84] = Qf(60, 60, 0, Ⲇⵠ[771], 3);
    this.ᐃⲆᐃ[84].id = 84;
    this.ᐃⲆᐃ[178] = Qf(60, 60, 0, Ⲇⵠ[178], 3);
    this.ᐃⲆᐃ[178].id = 178;
    this.ᐃⲆᐃ[179] = Qf(60, 60, 0, Ⲇⵠ[179], 3);
    this.ᐃⲆᐃ[179].id = 179;
    this.ᐃⲆᐃ[86] = Qf(60, 60, 0, Ⲇⵠ[776], 3);
    this.ᐃⲆᐃ[86].id = 86;
    this.ᐃⲆᐃ[85] = Qf(60, 60, 0, Ⲇⵠ[779], 3);
    this.ᐃⲆᐃ[85].id = 85;
    this.ᐃⲆᐃ[180] = Qf(60, 60, 0, Ⲇⵠ[180], 3);
    this.ᐃⲆᐃ[180].id = 180;
    this.ᐃⲆᐃ[181] = Qf(60, 60, 0, Ⲇⵠ[181], 3);
    this.ᐃⲆᐃ[181].id = 181;
    this.ᐃⲆᐃ[182] = Qf(60, 60, 0, Ⲇⵠ[789], 3);
    this.ᐃⲆᐃ[182].id = 182;
    this.ᐃⲆᐃ[183] = Qf(60, 60, 0, Ⲇⵠ[800], 3);
    this.ᐃⲆᐃ[183].id = 183;
    this.ᐃⲆᐃ[188] = Qf(60, 60, 0, Ⲇⵠ[808], 3);
    this.ᐃⲆᐃ[188].id = 188;
    this.ᐃⲆᐃ[189] = Qf(60, 60, 0, Ⲇⵠ[814], 3);
    this.ᐃⲆᐃ[189].id = 189;
    this.ᐃⲆᐃ[191] = Qf(60, 60, 0, Ⲇⵠ[834], 3);
    this.ᐃⲆᐃ[191].id = 191;
    this.ᐃⲆᐃ[192] = Qf(60, 60, 0, Ⲇⵠ[840], 3);
    this.ᐃⲆᐃ[192].id = 192;
    this.ᐃⲆᐃ[190] = Qf(60, 60, 0, Ⲇⵠ[842], 3);
    this.ᐃⲆᐃ[190].id = 190;
    this.ᐃⲆᐃ[193] = Qf(60, 60, 0, Ⲇⵠ[845], 3);
    this.ᐃⲆᐃ[193].id = 193;
    this.ᐃⲆᐃ[194] = Qf(60, 60, 0, Ⲇⵠ[850], 3);
    this.ᐃⲆᐃ[194].id = 194;
    this.ᐃⲆᐃ[204] = Qf(60, 60, 0, Ⲇⵠ[949], 3);
    this.ᐃⲆᐃ[204].id = 204;
    this.ᐃⲆᐃ[205] = Qf(60, 60, 0, Ⲇⵠ[955], 3);
    this.ᐃⲆᐃ[205].id = 205;
    this.ᐃⲆᐃ[206] = Qf(60, 60, 0, Ⲇⵠ[959], 3);
    this.ᐃⲆᐃ[206].id = 206;
    this.ᐃⲆᐃ[207] = Qf(60, 60, 0, Ⲇⵠ[965], 3);
    this.ᐃⲆᐃ[207].id = 207;
    this.ᐃⲆᐃ[208] = Qf(60, 60, 0, Ⲇⵠ[966], 3);
    this.ᐃⲆᐃ[208].id = 208;
    this.ᐃⲆᐃ[209] = Qf(60, 60, 0, Ⲇⵠ[972], 3);
    this.ᐃⲆᐃ[209].id = 209;
    this.ᐃⲆᐃ[210] = Qf(60, 60, 0, Ⲇⵠ[981], 3);
    this.ᐃⲆᐃ[210].id = 210;
    this.ᐃⲆᐃ[211] = Qf(60, 60, 0, Ⲇⵠ[987], 3);
    this.ᐃⲆᐃ[211].id = 211;
    this.ᐃⲆᐃ[41] = Qf(60, 60, 0, Ⲇⵠ[880], 3);
    this.ᐃⲆᐃ[41].id = 41;
    this.ᐃⲆᐃ[42] = Qf(60, 60, 0, Ⲇⵠ[882], 3);
    this.ᐃⲆᐃ[42].id = 42;
    this.ᐃⲆᐃ[12] = Qf(60, 60, 0, Ⲇⵠ[401], 3);
    this.ᐃⲆᐃ[12].id = 12;
    this.ᐃⲆᐃ[16] = Qf(60, 60, 0, Ⲇⵠ[874], 3);
    this.ᐃⲆᐃ[16].id = 16;
    this.ᐃⲆᐃ[196] = Qf(60, 60, 0, Ⲇⵠ[196], 3);
    this.ᐃⲆᐃ[196].id = 196;
    this.ᐃⲆᐃ[18] = Qf(60, 60, 0, Ⲇⵠ[901], 3);
    this.ᐃⲆᐃ[18].id = 18;
    this.ᐃⲆᐃ[197] = Qf(60, 60, 0, Ⲇⵠ[197], 3);
    this.ᐃⲆᐃ[197].id = 197;
    this.ᐃⲆᐃ[198] = Qf(60, 60, 0, Ⲇⵠ[907], 3);
    this.ᐃⲆᐃ[198].id = 198;
    this.ᐃⲆᐃ[61] = Qf(60, 60, 0, Ⲇⵠ[910], 3);
    this.ᐃⲆᐃ[61].id = 61;
    this.ᐃⲆᐃ[201] = Qf(60, 60, 0, Ⲇⵠ[870], 3);
    this.ᐃⲆᐃ[201].id = 201;
    this.ᐃⲆᐃ[200] = Qf(60, 60, 0, Ⲇⵠ[200], 3);
    this.ᐃⲆᐃ[200].id = 200;
    this.ᐃⲆᐃ[199] = Qf(60, 60, 0, Ⲇⵠ[865], 3);
    this.ᐃⲆᐃ[199].id = 199;
    this.ᐃⵠΔ = [];
    this.ᐃⵠΔ[35] = Qf(60, 60, 0, Ⲇⵠ[254], 3);
    this.ᐃⵠΔ[35].id = 35;
    this.ᐃⵠΔ[5] = Qf(60, 60, 0, Ⲇⵠ[256], 3);
    this.ᐃⵠΔ[5].id = 5;
    this.ᐃⵠΔ[0] = Qf(60, 60, 0, Ⲇⵠ[302], 3);
    this.ᐃⵠΔ[0].id = 0;
    this.ᐃⵠΔ[3] = Qf(60, 60, 0, Ⲇⵠ[262], 3);
    this.ᐃⵠΔ[3].id = 3;
    this.ᐃⵠΔ[55] = Qf(60, 60, 0, Ⲇⵠ[318], 3);
    this.ᐃⵠΔ[55].id = 55;
    this.ᐃⵠΔ[67] = Qf(60, 60, 0, Ⲇⵠ[320], 3);
    this.ᐃⵠΔ[67].id = 67;
    this.ᐃⵠΔ[40] = Qf(60, 60, 0, Ⲇⵠ[284], 3);
    this.ᐃⵠΔ[40].id = 40;
    this.ᐃⵠΔ[6] = Qf(60, 60, 0, Ⲇⵠ[295], 3);
    this.ᐃⵠΔ[6].id = 6;
    this.ᐃⵠΔ[7] = Qf(60, 60, 0, Ⲇⵠ[257], 3);
    this.ᐃⵠΔ[7].id = 7;
    this.ᐃⵠΔ[36] = Qf(60, 60, 0, Ⲇⵠ[290], 3);
    this.ᐃⵠΔ[36].id = 36;
    this.ᐃⵠΔ[34] = Qf(60, 60, 0, Ⲇⵠ[830], 3);
    this.ᐃⵠΔ[34].id = 34;
    this.ᐃⵠΔ[37] = Qf(60, 60, 0, Ⲇⵠ[291], 3);
    this.ᐃⵠΔ[37].id = 37;
    this.ᐃⵠΔ[4] = Qf(60, 60, 0, Ⲇⵠ[314], 3);
    this.ᐃⵠΔ[4].id = 4;
    this.ᐃⵠΔ[49] = Qf(60, 60, 0, Ⲇⵠ[325], 3);
    this.ᐃⵠΔ[49].id = 49;
    this.ᐃⵠΔ[1] = Qf(60, 60, 0, Ⲇⵠ[327], 3);
    this.ᐃⵠΔ[1].id = 1;
    this.ᐃⵠΔ[54] = Qf(60, 60, 0, Ⲇⵠ[304], 3);
    this.ᐃⵠΔ[54].id = 54;
    this.ᐃⵠΔ[56] = Qf(60, 60, 0, Ⲇⵠ[263], 3);
    this.ᐃⵠΔ[56].id = 56;
    this.ᐃⵠΔ[57] = Qf(60, 60, 0, Ⲇⵠ[265], 3);
    this.ᐃⵠΔ[57].id = 57;
    this.ᐃⵠΔ[58] = Qf(60, 60, 0, Ⲇⵠ[332], 3);
    this.ᐃⵠΔ[58].id = 58;
    this.ᐃⵠΔ[61] = Qf(60, 60, 0, Ⲇⵠ[268], 3);
    this.ᐃⵠΔ[61].id = 61;
    this.ᐃⵠΔ[79] = Qf(60, 60, 0, Ⲇⵠ[338], 3);
    this.ᐃⵠΔ[79].id = 79;
    this.ᐃⵠΔ[68] = Qf(60, 60, 0, Ⲇⵠ[360], 3);
    this.ᐃⵠΔ[68].id = 68;
    this.ᐃⵠΔ[69] = Qf(60, 60, 0, Ⲇⵠ[363], 3);
    this.ᐃⵠΔ[69].id = 69;
    this.ᐃⵠΔ[70] = Qf(60, 60, 0, Ⲇⵠ[365], 3);
    this.ᐃⵠΔ[70].id = 70;
    this.ᐃⵠΔ[100] = Qf(60, 60, 0, Ⲇⵠ[367], 3);
    this.ᐃⵠΔ[100].id = 100;
    this.ᐃⵠΔ[83] = Qf(60, 60, 0, Ⲇⵠ[370], 3);
    this.ᐃⵠΔ[83].id = 83;
    this.ᐃⵠΔ[62] = Qf(60, 60, 0, Ⲇⵠ[371], 3);
    this.ᐃⵠΔ[62].id = 62;
    this.ᐃⵠΔ[63] = Qf(60, 60, 0, Ⲇⵠ[374], 3);
    this.ᐃⵠΔ[63].id = 63;
    this.ᐃⵠΔ[64] = Qf(60, 60, 0, Ⲇⵠ[377], 3);
    this.ᐃⵠΔ[64].id = 64;
    this.ᐃⵠΔ[83] = Qf(60, 60, 0, Ⲇⵠ[370], 3);
    this.ᐃⵠΔ[83].id = 83;
    this.ᐃⵠΔ[84] = Qf(60, 60, 0, Ⲇⵠ[380], 3);
    this.ᐃⵠΔ[84].id = 84;
    this.ᐃⵠΔ[25] = Qf(60, 60, 0, Ⲇⵠ[402], 3);
    this.ᐃⵠΔ[25].id = 25;
    this.ᐃⵠΔ[26] = Qf(60, 60, 0, Ⲇⵠ[396], 3);
    this.ᐃⵠΔ[26].id = 26;
    this.ᐃⵠΔ[27] = Qf(60, 60, 0, Ⲇⵠ[399], 3);
    this.ᐃⵠΔ[27].id = 27;
    this.ᐃⵠΔ[28] = Qf(60, 60, 0, Ⲇⵠ[405], 3);
    this.ᐃⵠΔ[28].id = 28;
    this.ᐃⵠΔ[31] = Qf(60, 60, 0, Ⲇⵠ[876], 3);
    this.ᐃⵠΔ[31].id = 31;
    this.ᐃⵠΔ[2] = Qf(60, 60, 0, Ⲇⵠ[409], 3);
    this.ᐃⵠΔ[2].id = 2;
    this.ᐃⵠΔ[80] = Qf(60, 60, 0, Ⲇⵠ[421], 3);
    this.ᐃⵠΔ[80].id = 80;
    this.ᐃⵠΔ[81] = Qf(60, 60, 0, Ⲇⵠ[424], 3);
    this.ᐃⵠΔ[81].id = 81;
    this.ᐃⵠΔ[ih.ⵠⵠᐃⲆⲆ] = Qf(60, 60, 0, Ⲇⵠ[1228], 3);
    this.ᐃⵠΔ[ih.ⵠⵠᐃⲆⲆ].id = ih.ⵠⵠᐃⲆⲆ;
    this.ᐃⵠΔ[86] = Qf(60, 60, 0, Ⲇⵠ[1231], 3);
    this.ᐃⵠΔ[86].id = 86;
    this.ᐃⵠΔ[98] = Qf(60, 60, 0, Ⲇⵠ[1138], 3);
    this.ᐃⵠΔ[98].id = 98;
    this.ᐃⵠΔ[99] = Qf(60, 60, 0, Ⲇⵠ[1141], 3);
    this.ᐃⵠΔ[99].id = 99;
    this.ᐃⵠΔ[131] = Qf(60, 60, 0, Ⲇⵠ[570], 3);
    this.ᐃⵠΔ[131].id = 131;
    this.ᐃⵠΔ[132] = Qf(60, 60, 0, Ⲇⵠ[1168], 3);
    this.ᐃⵠΔ[132].id = 132;
    this.ᐃⵠΔ[145] = Qf(60, 60, 0, Ⲇⵠ[1238], 3);
    this.ᐃⵠΔ[145].id = 145;
    this.ᐃⵠΔ[133] = Qf(60, 60, 0, Ⲇⵠ[573], 3);
    this.ᐃⵠΔ[133].id = 133;
    this.ᐃⵠΔ[134] = Qf(60, 60, 0, Ⲇⵠ[1171], 3);
    this.ᐃⵠΔ[134].id = 134;
    this.ᐃⵠΔ[146] = Qf(60, 60, 0, Ⲇⵠ[1241], 3);
    this.ᐃⵠΔ[146].id = 146;
    this.ᐃⵠΔ[135] = Qf(60, 60, 0, Ⲇⵠ[576], 3);
    this.ᐃⵠΔ[135].id = 135;
    this.ᐃⵠΔ[136] = Qf(60, 60, 0, Ⲇⵠ[1174], 3);
    this.ᐃⵠΔ[136].id = 136;
    this.ᐃⵠΔ[147] = Qf(60, 60, 0, Ⲇⵠ[1244], 3);
    this.ᐃⵠΔ[147].id = 147;
    this.ᐃⵠΔ[137] = Qf(60, 60, 0, Ⲇⵠ[579], 3);
    this.ᐃⵠΔ[137].id = 137;
    this.ᐃⵠΔ[138] = Qf(60, 60, 0, Ⲇⵠ[1177], 3);
    this.ᐃⵠΔ[138].id = 138;
    this.ᐃⵠΔ[167] = Qf(60, 60, 0, Ⲇⵠ[1256], 3);
    this.ᐃⵠΔ[167].id = 167;
    this.ᐃⵠΔ[168] = Qf(60, 60, 0, Ⲇⵠ[1259], 3);
    this.ᐃⵠΔ[168].id = 168;
    this.ᐃⵠΔ[169] = Qf(60, 60, 0, Ⲇⵠ[1262], 3);
    this.ᐃⵠΔ[169].id = 169;
    this.ᐃⵠΔ[170] = Qf(60, 60, 0, Ⲇⵠ[1265], 3);
    this.ᐃⵠΔ[170].id = 170;
    this.ᐃⵠΔ[171] = Qf(60, 60, 0, Ⲇⵠ[1268], 3);
    this.ᐃⵠΔ[171].id = 171;
    this.ᐃⵠΔ[172] = Qf(60, 60, 0, Ⲇⵠ[1271], 3);
    this.ᐃⵠΔ[172].id = 172;
    this.ᐃⵠΔ[148] = Qf(60, 60, 0, Ⲇⵠ[1247], 3);
    this.ᐃⵠΔ[148].id = 148;
    this.ᐃⵠΔ[139] = Qf(60, 60, 0, Ⲇⵠ[582], 3);
    this.ᐃⵠΔ[139].id = 139;
    this.ᐃⵠΔ[140] = Qf(60, 60, 0, Ⲇⵠ[1180], 3);
    this.ᐃⵠΔ[140].id = 140;
    this.ᐃⵠΔ[149] = Qf(60, 60, 0, Ⲇⵠ[1250], 3);
    this.ᐃⵠΔ[149].id = 149;
    this.ᐃⵠΔ[141] = Qf(60, 60, 0, Ⲇⵠ[585], 3);
    this.ᐃⵠΔ[141].id = 141;
    this.ᐃⵠΔ[142] = Qf(60, 60, 0, Ⲇⵠ[1183], 3);
    this.ᐃⵠΔ[142].id = 142;
    this.ᐃⵠΔ[150] = Qf(60, 60, 0, Ⲇⵠ[1253], 3);
    this.ᐃⵠΔ[150].id = 150;
    this.ᐃⵠΔ[143] = Qf(60, 60, 0, Ⲇⵠ[588], 3);
    this.ᐃⵠΔ[143].id = 143;
    this.ᐃⵠΔ[144] = Qf(60, 60, 0, Ⲇⵠ[1186], 3);
    this.ᐃⵠΔ[144].id = 144;
    this.ᐃⵠΔ[87] = Qf(60, 60, 0, Ⲇⵠ[827], 3);
    this.ᐃⵠΔ[87].id = 87;
    this.ᐃⵠΔ[88] = Qf(60, 60, 0, Ⲇⵠ[430], 3);
    this.ᐃⵠΔ[88].id = 88;
    this.ᐃⵠΔ[89] = Qf(60, 60, 0, Ⲇⵠ[433], 3);
    this.ᐃⵠΔ[89].id = 89;
    this.ᐃⵠΔ[90] = Qf(60, 60, 0, Ⲇⵠ[436], 3);
    this.ᐃⵠΔ[90].id = 90;
    this.ᐃⵠΔ[24] = Qf(60, 60, 0, Ⲇⵠ[439], 3);
    this.ᐃⵠΔ[24].id = 24;
    this.ᐃⵠΔ[101] = Qf(60, 60, 0, Ⲇⵠ[442], 3);
    this.ᐃⵠΔ[101].id = 101;
    this.ᐃⵠΔ[100] = Qf(60, 60, 0, Ⲇⵠ[367], 3);
    this.ᐃⵠΔ[100].id = 100;
    this.ᐃⵠΔ[38] = Qf(60, 60, 0, Ⲇⵠ[456], 3);
    this.ᐃⵠΔ[38].id = 38;
    this.ᐃⵠΔ[ih.ᐃᐃⲆⲆⲆ] = Qf(60, 60, 0, Ⲇⵠ[861], 3);
    this.ᐃⵠΔ[ih.ᐃᐃⲆⲆⲆ].id = ih.ᐃᐃⲆⲆⲆ;
    this.ᐃⵠΔ[8] = Qf(60, 60, 0, Ⲇⵠ[460], 3);
    this.ᐃⵠΔ[8].id = 8;
    this.ᐃⵠΔ[9] = Qf(60, 60, 0, Ⲇⵠ[1019], 3);
    this.ᐃⵠΔ[9].id = 9;
    this.ᐃⵠΔ[29] = Qf(60, 60, 0, Ⲇⵠ[473], 3);
    this.ᐃⵠΔ[29].id = 29;
    this.ᐃⵠΔ[10] = Qf(60, 60, 0, Ⲇⵠ[478], 3);
    this.ᐃⵠΔ[10].id = 10;
    this.ᐃⵠΔ[11] = Qf(60, 60, 0, Ⲇⵠ[481], 3);
    this.ᐃⵠΔ[11].id = 11;
    this.ᐃⵠΔ[12] = Qf(60, 60, 0, Ⲇⵠ[484], 3);
    this.ᐃⵠΔ[12].id = 12;
    this.ᐃⵠΔ[13] = Qf(60, 60, 0, Ⲇⵠ[487], 3);
    this.ᐃⵠΔ[13].id = 13;
    this.ᐃⵠΔ[14] = Qf(60, 60, 0, Ⲇⵠ[490], 3);
    this.ᐃⵠΔ[14].id = 14;
    this.ᐃⵠΔ[59] = Qf(60, 60, 0, Ⲇⵠ[493], 3);
    this.ᐃⵠΔ[59].id = 59;
    this.ᐃⵠΔ[71] = Qf(60, 60, 0, Ⲇⵠ[496], 3);
    this.ᐃⵠΔ[71].id = 71;
    this.ᐃⵠΔ[65] = Qf(60, 60, 0, Ⲇⵠ[498], 3);
    this.ᐃⵠΔ[65].id = 65;
    this.ᐃⵠΔ[85] = Qf(60, 60, 0, Ⲇⵠ[503], 3);
    this.ᐃⵠΔ[85].id = 85;
    this.ᐃⵠΔ[102] = Qf(60, 60, 0, Ⲇⵠ[515], 3);
    this.ᐃⵠΔ[102].id = 102;
    this.ᐃⵠΔ[103] = Qf(60, 60, 0, Ⲇⵠ[519], 3);
    this.ᐃⵠΔ[103].id = 103;
    this.ᐃⵠΔ[115] = Qf(60, 60, 0, Ⲇⵠ[530], 3);
    this.ᐃⵠΔ[115].id = 115;
    this.ᐃⵠΔ[104] = Qf(60, 60, 0, Ⲇⵠ[533], 3);
    this.ᐃⵠΔ[104].id = 104;
    this.ᐃⵠΔ[105] = Qf(60, 60, 0, Ⲇⵠ[555], 3);
    this.ᐃⵠΔ[105].id = 105;
    this.ᐃⵠΔ[91] = Qf(60, 60, 0, Ⲇⵠ[542], 3);
    this.ᐃⵠΔ[91].id = 91;
    this.ᐃⵠΔ[15] = Qf(60, 60, 0, Ⲇⵠ[551], 3);
    this.ᐃⵠΔ[15].id = 15;
    this.ᐃⵠΔ[106] = Qf(60, 60, 0, Ⲇⵠ[604], 3);
    this.ᐃⵠΔ[106].id = 106;
    this.ᐃⵠΔ[108] = Qf(60, 60, 0, Ⲇⵠ[1235], 3);
    this.ᐃⵠΔ[108].id = 108;
    this.ᐃⵠΔ[163] = Qf(60, 60, 0, Ⲇⵠ[1027], 3);
    this.ᐃⵠΔ[163].id = 163;
    this.ᐃⵠΔ[164] = Qf(60, 60, 0, Ⲇⵠ[1030], 3);
    this.ᐃⵠΔ[164].id = 164;
    this.ᐃⵠΔ[166] = Qf(60, 60, 0, Ⲇⵠ[1116], 3);
    this.ᐃⵠΔ[166].id = 166;
    this.ᐃⵠΔ[165] = Qf(60, 60, 0, Ⲇⵠ[1048], 3);
    this.ᐃⵠΔ[165].id = 165;
    this.ᐃⵠΔ[ih.ⵠⵠΔⵠⲆ] = Qf(60, 60, 0, Ⲇⵠ[1051], 3);
    this.ᐃⵠΔ[ih.ⵠⵠΔⵠⲆ].id = ih.ⵠⵠΔⵠⲆ;
    this.ᐃⵠΔ[ih.ⵠᐃⲆΔⲆ] = Qf(60, 60, 0, Ⲇⵠ[1082], 3);
    this.ᐃⵠΔ[ih.ⵠᐃⲆΔⲆ].id = ih.ⵠᐃⲆΔⲆ;
    this.ᐃⵠΔ[ih.ᐃΔⲆΔⵠ] = Qf(60, 60, 0, Ⲇⵠ[1226], 3);
    this.ᐃⵠΔ[ih.ᐃΔⲆΔⵠ].id = ih.ᐃΔⲆΔⵠ;
    this.ᐃⵠΔ[ih.ᐃᐃⵠⵠᐃ] = Qf(60, 60, 0, Ⲇⵠ[1191], 3);
    this.ᐃⵠΔ[ih.ᐃᐃⵠⵠᐃ].id = ih.ᐃᐃⵠⵠᐃ;
    this.ᐃⵠΔ[110] = Qf(60, 60, 0, Ⲇⵠ[611], 3);
    this.ᐃⵠΔ[110].id = 110;
    this.ᐃⵠΔ[111] = Qf(60, 60, 0, Ⲇⵠ[715], 3);
    this.ᐃⵠΔ[111].id = 111;
    this.ᐃⵠΔ[112] = Qf(60, 60, 0, Ⲇⵠ[715], 3);
    this.ᐃⵠΔ[112].id = 112;
    this.ᐃⵠΔ[113] = Qf(60, 60, 0, Ⲇⵠ[715], 3);
    this.ᐃⵠΔ[113].id = 113;
    this.ᐃⵠΔ[16] = Qf(60, 60, 0, Ⲇⵠ[618], 3);
    this.ᐃⵠΔ[16].id = 16;
    this.ᐃⵠΔ[17] = Qf(60, 60, 0, Ⲇⵠ[700], 3);
    this.ᐃⵠΔ[17].id = 17;
    this.ᐃⵠΔ[18] = Qf(60, 60, 0, Ⲇⵠ[704], 3);
    this.ᐃⵠΔ[18].id = 18;
    this.ᐃⵠΔ[19] = Qf(60, 60, 0, Ⲇⵠ[706], 3);
    this.ᐃⵠΔ[19].id = 19;
    this.ᐃⵠΔ[122] = Qf(60, 60, 0, Ⲇⵠ[711], 3);
    this.ᐃⵠΔ[122].id = 122;
    this.ᐃⵠΔ[20] = Qf(60, 60, 0, Ⲇⵠ[627], 3);
    this.ᐃⵠΔ[20].id = 20;
    this.ᐃⵠΔ[41] = Qf(60, 60, 0, Ⲇⵠ[632], 3);
    this.ᐃⵠΔ[41].id = 41;
    this.ᐃⵠΔ[52] = Qf(60, 60, 0, Ⲇⵠ[635], 3);
    this.ᐃⵠΔ[52].id = 52;
    this.ᐃⵠΔ[114] = Qf(60, 60, 0, Ⲇⵠ[643], 3);
    this.ᐃⵠΔ[114].id = 114;
    this.ᐃⵠΔ[94] = Qf(60, 60, 0, Ⲇⵠ[647], 3);
    this.ᐃⵠΔ[94].id = 94;
    this.ᐃⵠΔ[93] = Qf(60, 60, 0, Ⲇⵠ[650], 3);
    this.ᐃⵠΔ[93].id = 93;
    this.ᐃⵠΔ[21] = Qf(60, 60, 0, Ⲇⵠ[654], 3);
    this.ᐃⵠΔ[21].id = 21;
    this.ᐃⵠΔ[53] = Qf(60, 60, 0, Ⲇⵠ[660], 3);
    this.ᐃⵠΔ[53].id = 53;
    this.ᐃⵠΔ[51] = Qf(60, 60, 0, Ⲇⵠ[690], 3);
    this.ᐃⵠΔ[51].id = 51;
    this.ᐃⵠΔ[50] = Qf(60, 60, 0, Ⲇⵠ[666], 3);
    this.ᐃⵠΔ[50].id = 50;
    this.ᐃⵠΔ[109] = Qf(60, 60, 0, Ⲇⵠ[684], 3);
    this.ᐃⵠΔ[109].id = 109;
    this.ᐃⵠΔ[124] = Qf(60, 60, 0, Ⲇⵠ[718], 3);
    this.ᐃⵠΔ[124].id = 124;
    this.ᐃⵠΔ[125] = Qf(60, 60, 0, Ⲇⵠ[730], 3);
    this.ᐃⵠΔ[125].id = 125;
    this.ᐃⵠΔ[126] = Qf(60, 60, 0, Ⲇⵠ[734], 3);
    this.ᐃⵠΔ[126].id = 126;
    this.ᐃⵠΔ[129] = Qf(60, 60, 0, Ⲇⵠ[563], 3);
    this.ᐃⵠΔ[129].id = 129;
    this.ᐃⵠΔ[151] = Qf(60, 60, 0, Ⲇⵠ[758], 3);
    this.ᐃⵠΔ[151].id = 151;
    this.ᐃⵠΔ[152] = Qf(60, 60, 0, Ⲇⵠ[762], 3);
    this.ᐃⵠΔ[152].id = 152;
    this.ᐃⵠΔ[153] = Qf(60, 60, 0, Ⲇⵠ[770], 3);
    this.ᐃⵠΔ[153].id = 153;
    this.ᐃⵠΔ[154] = Qf(60, 60, 0, Ⲇⵠ[768], 3);
    this.ᐃⵠΔ[154].id = 154;
    this.ᐃⵠΔ[155] = Qf(60, 60, 0, Ⲇⵠ[772], 3);
    this.ᐃⵠΔ[155].id = 155;
    this.ᐃⵠΔ[157] = Qf(60, 60, 0, Ⲇⵠ[777], 3);
    this.ᐃⵠΔ[157].id = 157;
    this.ᐃⵠΔ[156] = Qf(60, 60, 0, Ⲇⵠ[780], 3);
    this.ᐃⵠΔ[156].id = 156;
    this.ᐃⵠΔ[158] = Qf(60, 60, 0, Ⲇⵠ[784], 3);
    this.ᐃⵠΔ[158].id = 158;
    this.ᐃⵠΔ[159] = Qf(60, 60, 0, Ⲇⵠ[785], 3);
    this.ᐃⵠΔ[159].id = 159;
    this.ᐃⵠΔ[160] = Qf(60, 60, 0, Ⲇⵠ[791], 3);
    this.ᐃⵠΔ[160].id = 160;
    this.ᐃⵠΔ[161] = Qf(60, 60, 0, Ⲇⵠ[799], 3);
    this.ᐃⵠΔ[161].id = 161;
    this.ᐃⵠΔ[42] = Qf(60, 60, 0, Ⲇⵠ[809], 3);
    this.ᐃⵠΔ[42].id = 42;
    this.ᐃⵠΔ[43] = Qf(60, 60, 0, Ⲇⵠ[835], 3);
    this.ᐃⵠΔ[43].id = 43;
    this.ᐃⵠΔ[107] = Qf(60, 60, 0, Ⲇⵠ[843], 3);
    this.ᐃⵠΔ[107].id = 107;
    this.ᐃⵠΔ[44] = Qf(60, 60, 0, Ⲇⵠ[846], 3);
    this.ᐃⵠΔ[44].id = 44;
    this.ᐃⵠΔ[46] = Qf(60, 60, 0, Ⲇⵠ[960], 3);
    this.ᐃⵠΔ[46].id = 46;
    this.ᐃⵠΔ[45] = Qf(60, 60, 0, Ⲇⵠ[950], 3);
    this.ᐃⵠΔ[45].id = 45;
    this.ᐃⵠΔ[47] = Qf(60, 60, 0, Ⲇⵠ[967], 3);
    this.ᐃⵠΔ[47].id = 47;
    this.ᐃⵠΔ[48] = Qf(60, 60, 0, Ⲇⵠ[982], 3);
    this.ᐃⵠΔ[48].id = 48;
    this.ᐃⵠΔ[25] = Qf(60, 60, 0, Ⲇⵠ[402], 3);
    this.ᐃⵠΔ[25].id = 25;
    this.ᐃⵠΔ[31] = Qf(60, 60, 0, Ⲇⵠ[876], 3);
    this.ᐃⵠΔ[31].id = 31;
    this.ᐃⵠΔ[33] = Qf(60, 60, 0, Ⲇⵠ[900], 3);
    this.ᐃⵠΔ[33].id = 33;
    this.ᐃⵠΔ[162] = Qf(60, 60, 0, Ⲇⵠ[909], 3);
    this.ᐃⵠΔ[162].id = 162;
    this.ᐃⵠΔ[128] = Qf(60, 60, 0, Ⲇⵠ[912], 3);
    this.ᐃⵠΔ[128].id = 128;
    this.ⵠⵠΔ[53] = Qf(68, 68, 0, Ⲇⵠ[976], 3);
    this.ⵠⵠΔ[53].id = 53;
    this.ᐃⲆᐃ[53] = Qf(60, 60, 0, Ⲇⵠ[975], 3);
    this.ᐃⲆᐃ[53].id = 53;
    this.ᐃⵠΔ[22] = Qf(60, 60, 0, Ⲇⵠ[977], 3);
    this.ᐃⵠΔ[22].id = 22;
    this.ⵠⵠΔ[54] = Qf(68, 68, 0, Ⲇⵠ[979], 3);
    this.ⵠⵠΔ[54].id = 54;
    this.ᐃⲆᐃ[54] = Qf(60, 60, 0, Ⲇⵠ[978], 3);
    this.ᐃⲆᐃ[54].id = 54;
    this.ᐃⵠΔ[23] = Qf(60, 60, 0, Ⲇⵠ[980], 3);
    this.ᐃⵠΔ[23].id = 23;
    this.ⵠⵠΔ[56] = Qf(68, 68, 0, Ⲇⵠ[713], 3);
    this.ⵠⵠΔ[56].id = 56;
    this.ᐃⲆᐃ[56] = Qf(60, 60, 0, Ⲇⵠ[712], 3);
    this.ᐃⲆᐃ[56].id = 56;
    this.ᐃⵠΔ[123] = Qf(60, 60, 0, Ⲇⵠ[714], 3);
    this.ᐃⵠΔ[123].id = 123;
    this.ⵠⵠΔ[82] = Qf(68, 68, 0, Ⲇⵠ[428], 3);
    this.ⵠⵠΔ[82].id = 82;
    this.ᐃⲆᐃ[82] = Qf(60, 60, 0, Ⲇⵠ[426], 3);
    this.ᐃⲆᐃ[82].id = 82;
    this.ᐃⵠΔ[82] = Qf(60, 60, 0, Ⲇⵠ[427], 3);
    this.ᐃⵠΔ[82].id = 82;
    this.ⵠⵠΔ[235] = Qf(68, 68, 0, Ⲇⵠ[1159], 3);
    this.ⵠⵠΔ[235].id = 235;
    this.ᐃⲆᐃ[235] = Qf(60, 60, 0, Ⲇⵠ[1158], 3);
    this.ᐃⲆᐃ[235].id = 235;
    this.ⵠⵠΔ[238] = Qf(68, 68, 0, Ⲇⵠ[1188], 3);
    this.ⵠⵠΔ[238].id = 238;
    this.ᐃⲆᐃ[238] = Qf(60, 60, 0, Ⲇⵠ[1187], 3);
    this.ᐃⲆᐃ[238].id = 238;
    this.ⵠⵠΔ[236] = Qf(68, 68, 0, Ⲇⵠ[1161], 3);
    this.ⵠⵠΔ[236].id = 236;
    this.ᐃⲆᐃ[236] = Qf(60, 60, 0, Ⲇⵠ[1160], 3);
    this.ᐃⲆᐃ[236].id = 236;
    this.ⵠⵠΔ[152] = Qf(68, 68, 0, Ⲇⵠ[1197], 3);
    this.ⵠⵠΔ[152].id = 152;
    this.ᐃⲆᐃ[152] = Qf(60, 60, 0, Ⲇⵠ[1195], 3);
    this.ᐃⲆᐃ[152].id = 152;
    this.ᐃⵠΔ[116] = Qf(60, 60, 0, Ⲇⵠ[1196], 3);
    this.ᐃⵠΔ[116].id = 116;
    this.ⵠⵠΔ[212] = Qf(68, 68, 0, Ⲇⵠ[992], 3);
    this.ⵠⵠΔ[212].id = 212;
    this.ᐃⲆᐃ[212] = Qf(60, 60, 0, Ⲇⵠ[991], 3);
    this.ᐃⲆᐃ[212].id = 212;
    this.ᐃⵠΔ[73] = Qf(60, 60, 0, Ⲇⵠ[990], 3);
    this.ᐃⵠΔ[73].id = 73;
    this.ⵠⵠΔ[213] = Qf(68, 68, 0, Ⲇⵠ[995], 3);
    this.ⵠⵠΔ[213].id = 213;
    this.ᐃⲆᐃ[213] = Qf(60, 60, 0, Ⲇⵠ[994], 3);
    this.ᐃⲆᐃ[213].id = 213;
    this.ᐃⵠΔ[74] = Qf(60, 60, 0, Ⲇⵠ[993], 3);
    this.ᐃⵠΔ[74].id = 74;
    this.ⵠⵠΔ[214] = Qf(68, 68, 0, Ⲇⵠ[998], 3);
    this.ⵠⵠΔ[214].id = 214;
    this.ᐃⲆᐃ[214] = Qf(60, 60, 0, Ⲇⵠ[997], 3);
    this.ᐃⲆᐃ[214].id = 214;
    this.ᐃⵠΔ[75] = Qf(60, 60, 0, Ⲇⵠ[996], 3);
    this.ᐃⵠΔ[75].id = 75;
    this.ⵠⵠΔ[215] = Qf(68, 68, 0, Ⲇⵠ[1001], 3);
    this.ⵠⵠΔ[215].id = 215;
    this.ᐃⲆᐃ[215] = Qf(60, 60, 0, Ⲇⵠ[1000], 3);
    this.ᐃⲆᐃ[215].id = 215;
    this.ᐃⵠΔ[76] = Qf(60, 60, 0, Ⲇⵠ[999], 3);
    this.ᐃⵠΔ[76].id = 76;
    this.ⵠⵠΔ[216] = Qf(68, 68, 0, Ⲇⵠ[1004], 3);
    this.ⵠⵠΔ[216].id = 216;
    this.ᐃⲆᐃ[216] = Qf(60, 60, 0, Ⲇⵠ[1003], 3);
    this.ᐃⲆᐃ[216].id = 216;
    this.ᐃⵠΔ[77] = Qf(60, 60, 0, Ⲇⵠ[1002], 3);
    this.ᐃⵠΔ[77].id = 77;
    this.ⵠⵠΔ[220] = Qf(68, 68, 0, Ⲇⵠ[1007], 3);
    this.ⵠⵠΔ[220].id = 220;
    this.ᐃⲆᐃ[220] = Qf(60, 60, 0, Ⲇⵠ[1006], 3);
    this.ᐃⲆᐃ[220].id = 220;
    this.ᐃⵠΔ[78] = Qf(60, 60, 0, Ⲇⵠ[1005], 3);
    this.ᐃⵠΔ[78].id = 78;
    this.ⵠⵠΔ[217] = Qf(68, 68, 0, Ⲇⵠ[1016], 3);
    this.ⵠⵠΔ[217].id = 217;
    this.ᐃⲆᐃ[217] = Qf(60, 60, 0, Ⲇⵠ[1015], 3);
    this.ᐃⲆᐃ[217].id = 217;
    this.ᐃⵠΔ[60] = Qf(60, 60, 0, Ⲇⵠ[1014], 3);
    this.ᐃⵠΔ[60].id = 60;
    this.ⵠⵠΔ[219] = Qf(68, 68, 0, Ⲇⵠ[1013], 3);
    this.ⵠⵠΔ[219].id = 219;
    this.ᐃⲆᐃ[219] = Qf(60, 60, 0, Ⲇⵠ[1012], 3);
    this.ᐃⲆᐃ[219].id = 219;
    this.ᐃⵠΔ[72] = Qf(60, 60, 0, Ⲇⵠ[1011], 3);
    this.ᐃⵠΔ[72].id = 72;
    this.ⵠⵠΔ[218] = Qf(68, 68, 0, Ⲇⵠ[1010], 3);
    this.ⵠⵠΔ[218].id = 218;
    this.ᐃⲆᐃ[218] = Qf(60, 60, 0, Ⲇⵠ[1009], 3);
    this.ᐃⲆᐃ[218].id = 218;
    this.ᐃⵠΔ[66] = Qf(60, 60, 0, Ⲇⵠ[1008], 3);
    this.ᐃⵠΔ[66].id = 66;
    this.ⵠⵠΔ[153] = Qf(68, 68, 0, Ⲇⵠ[1201], 3);
    this.ⵠⵠΔ[153].id = 153;
    this.ᐃⲆᐃ[153] = Qf(60, 60, 0, Ⲇⵠ[1199], 3);
    this.ᐃⲆᐃ[153].id = 153;
    this.ᐃⵠΔ[117] = Qf(60, 60, 0, Ⲇⵠ[1200], 3);
    this.ᐃⵠΔ[117].id = 117;
    this.ⵠⵠΔ[154] = Qf(68, 68, 0, Ⲇⵠ[1205], 3);
    this.ⵠⵠΔ[154].id = 154;
    this.ᐃⲆᐃ[154] = Qf(60, 60, 0, Ⲇⵠ[1203], 3);
    this.ᐃⲆᐃ[154].id = 154;
    this.ᐃⵠΔ[118] = Qf(60, 60, 0, Ⲇⵠ[1204], 3);
    this.ᐃⵠΔ[118].id = 118;
    this.ⵠⵠΔ[155] = Qf(68, 68, 0, Ⲇⵠ[1209], 3);
    this.ⵠⵠΔ[155].id = 155;
    this.ᐃⲆᐃ[155] = Qf(60, 60, 0, Ⲇⵠ[1207], 3);
    this.ᐃⲆᐃ[155].id = 155;
    this.ᐃⵠΔ[119] = Qf(60, 60, 0, Ⲇⵠ[1208], 3);
    this.ᐃⵠΔ[119].id = 119;
    this.ⵠⵠΔ[156] = Qf(68, 68, 0, Ⲇⵠ[1213], 3);
    this.ⵠⵠΔ[156].id = 156;
    this.ᐃⲆᐃ[156] = Qf(60, 60, 0, Ⲇⵠ[1211], 3);
    this.ᐃⲆᐃ[156].id = 156;
    this.ᐃⵠΔ[120] = Qf(60, 60, 0, Ⲇⵠ[1212], 3);
    this.ᐃⵠΔ[120].id = 120;
    this.ⵠⵠΔ[157] = Qf(68, 68, 0, Ⲇⵠ[1217], 3);
    this.ⵠⵠΔ[157].id = 157;
    this.ᐃⲆᐃ[157] = Qf(60, 60, 0, Ⲇⵠ[1215], 3);
    this.ᐃⲆᐃ[157].id = 157;
    this.ᐃⵠΔ[121] = Qf(60, 60, 0, Ⲇⵠ[1216], 3);
    this.ᐃⵠΔ[121].id = 121;
    this.ⵠⵠΔ[203] = Qf(68, 68, 0, Ⲇⵠ[937], 3);
    this.ⵠⵠΔ[203].id = 203;
    this.ᐃⲆᐃ[203] = Qf(60, 60, 0, Ⲇⵠ[936], 3);
    this.ᐃⲆᐃ[203].id = 203;
    this.ᐃⲆᐃ[203].info.ⵠΔ[2] = this.ᐃⲆᐃ[203].info.ⵠΔ[0];
    this.ⵠⵠΔ[150] = Qf(68, 68, 0, Ⲇⵠ[524], 3);
    this.ⵠⵠΔ[150].id = 150;
    this.ᐃⲆᐃ[150] = Qf(60, 60, 0, Ⲇⵠ[523], 3);
    this.ᐃⲆᐃ[150].id = 150;
    this.ᐃⲆᐃ[150].info.ⵠΔ[2] = this.ᐃⲆᐃ[150].info.ⵠΔ[0];
    this.ⵠⵠΔ[202] = Qf(68, 68, 0, Ⲇⵠ[939], 3);
    this.ⵠⵠΔ[202].id = 202;
    this.ᐃⲆᐃ[202] = Qf(60, 60, 0, Ⲇⵠ[938], 3);
    this.ᐃⲆᐃ[202].id = 202;
    this.ᐃⲆᐃ[202].info.ⵠΔ[2] = this.ᐃⲆᐃ[202].info.ⵠΔ[0];
    this.ⵠⵠΔ[19] = Qf(68, 68, 0, Ⲇⵠ[934], 3);
    this.ⵠⵠΔ[19].id = 19;
    this.ᐃⲆᐃ[19] = Qf(60, 60, 0, Ⲇⵠ[932], 3);
    this.ᐃⲆᐃ[19].id = 19;
    this.ᐃⵠΔ[39] = Qf(60, 60, 0, Ⲇⵠ[933], 3);
    this.ᐃⵠΔ[39].id = 39;
    this.ⵠⵠΔ[20] = Qf(68, 68, 0, Ⲇⵠ[923], 3);
    this.ⵠⵠΔ[20].id = 20;
    this.ᐃⲆᐃ[20] = Qf(60, 60, 0, Ⲇⵠ[921], 3);
    this.ᐃⲆᐃ[20].id = 20;
    this.ᐃⵠΔ[95] = Qf(60, 60, 0, Ⲇⵠ[922], 3);
    this.ᐃⵠΔ[95].id = 95;
    this.ⵠⵠΔ[21] = Qf(68, 68, 0, Ⲇⵠ[927], 3);
    this.ⵠⵠΔ[21].id = 21;
    this.ᐃⲆᐃ[21] = Qf(60, 60, 0, Ⲇⵠ[925], 3);
    this.ᐃⲆᐃ[21].id = 21;
    this.ᐃⵠΔ[96] = Qf(60, 60, 0, Ⲇⵠ[926], 3);
    this.ᐃⵠΔ[96].id = 96;
    this.ⵠⵠΔ[22] = Qf(68, 68, 0, Ⲇⵠ[931], 3);
    this.ⵠⵠΔ[22].id = 22;
    this.ᐃⲆᐃ[22] = Qf(60, 60, 0, Ⲇⵠ[929], 3);
    this.ᐃⲆᐃ[22].id = 22;
    this.ᐃⵠΔ[97] = Qf(60, 60, 0, Ⲇⵠ[930], 3);
    this.ᐃⵠΔ[97].id = 97;
    this.ⵠⵠΔ[60] = Qf(68, 68, 0, Ⲇⵠ[736], 3);
    this.ⵠⵠΔ[60].id = 60;
    this.ᐃⲆᐃ[60] = Qf(60, 60, 0, Ⲇⵠ[735], 3);
    this.ᐃⲆᐃ[60].id = 60;
    this.ᐃⵠΔ[127] = Qf(60, 60, 0, Ⲇⵠ[737], 3);
    this.ᐃⵠΔ[127].id = 127;
    this.ⵠⵠΔ[90] = Qf(68, 68, 0, Ⲇⵠ[739], 3);
    this.ⵠⵠΔ[90].id = 90;
    this.ᐃⲆᐃ[90] = Qf(60, 60, 0, Ⲇⵠ[738], 3);
    this.ᐃⲆᐃ[90].id = 90;
    this.ᐃⵠΔ[173] = Qf(60, 60, 0, Ⲇⵠ[740], 3);
    this.ᐃⵠΔ[173].id = 173;
    this.ⵠⵠΔ[92] = Qf(68, 68, 0, Ⲇⵠ[745], 3);
    this.ⵠⵠΔ[92].id = 92;
    this.ᐃⲆᐃ[92] = Qf(60, 60, 0, Ⲇⵠ[744], 3);
    this.ᐃⲆᐃ[92].id = 92;
    this.ᐃⵠΔ[174] = Qf(60, 60, 0, Ⲇⵠ[746], 3);
    this.ᐃⵠΔ[174].id = 174;
    this.ⵠⵠΔ[93] = Qf(68, 68, 0, Ⲇⵠ[748], 3);
    this.ⵠⵠΔ[93].id = 93;
    this.ᐃⲆᐃ[93] = Qf(60, 60, 0, Ⲇⵠ[747], 3);
    this.ᐃⲆᐃ[93].id = 93;
    this.ᐃⵠΔ[175] = Qf(60, 60, 0, Ⲇⵠ[749], 3);
    this.ᐃⵠΔ[175].id = 175;
    this.ⵠⵠΔ[91] = Qf(68, 68, 0, Ⲇⵠ[742], 3);
    this.ⵠⵠΔ[91].id = 91;
    this.ᐃⲆᐃ[91] = Qf(60, 60, 0, Ⲇⵠ[741], 3);
    this.ᐃⲆᐃ[91].id = 91;
    this.ᐃⵠΔ[176] = Qf(60, 60, 0, Ⲇⵠ[743], 3);
    this.ᐃⵠΔ[176].id = 176;
    this.ⵠⵠΔ[100] = Qf(68, 68, 0, Ⲇⵠ[1165], 3);
    this.ⵠⵠΔ[100].id = 100;
    this.ᐃⲆᐃ[100] = Qf(60, 60, 0, Ⲇⵠ[1164], 3);
    this.ᐃⲆᐃ[100].id = 100;
    this.ᐃⵠΔ[ih.ⲆᐃΔⵠᐃ] = Qf(60, 60, 0, Ⲇⵠ[xs.ᐃⲆⵠᐃΔᐃᐃⲆΔ], 3);
    this.ᐃⵠΔ[ih.ⲆᐃΔⵠᐃ].id = ih.ⲆᐃΔⵠᐃ;
    this.ⵠⵠΔ[34] = Qf(68, 68, 0, Ⲇⵠ[945], 3);
    this.ⵠⵠΔ[34].id = 34;
    this.ᐃⲆᐃ[34] = Qf(60, 60, 0, Ⲇⵠ[943], 3);
    this.ᐃⲆᐃ[34].id = 34;
    this.ᐃⵠΔ[30] = Qf(60, 60, 0, Ⲇⵠ[944], 3);
    this.ᐃⵠΔ[30].id = 30;
    this.ⵠⵠΔ[44] = Qf(68, 68, 0, Ⲇⵠ[948], 3);
    this.ⵠⵠΔ[44].id = 44;
    this.ᐃⲆᐃ[44] = Qf(60, 60, 0, Ⲇⵠ[946], 3);
    this.ᐃⲆᐃ[44].id = 44;
    this.ᐃⵠΔ[92] = Qf(60, 60, 0, Ⲇⵠ[947], 3);
    this.ᐃⵠΔ[92].id = 92;
    this.ⵠⵠΔ[17] = Qf(68, 68, 0, Ⲇⵠ[878], 3);
    this.ⵠⵠΔ[17].id = 17;
    this.ᐃⲆᐃ[17] = Qf(60, 60, 0, Ⲇⵠ[877], 3);
    this.ᐃⲆᐃ[17].id = 17;
    this.ᐃⵠΔ[32] = Qf(60, 60, 0, Ⲇⵠ[879], 3);
    this.ᐃⵠΔ[32].id = 32;
    this.ⵠⵠΔ[63] = Qf(68, 68, 0, Ⲇⵠ[568], 3);
    this.ⵠⵠΔ[63].id = 63;
    this.ᐃⲆᐃ[63] = Qf(60, 60, 0, Ⲇⵠ[566], 3);
    this.ᐃⲆᐃ[63].id = 63;
    this.ᐃⵠΔ[130] = Qf(60, 60, 0, Ⲇⵠ[567], 3);
    this.ᐃⵠΔ[130].id = 130;
    this.ⵠⵠΔ[187] = Qf(68, 68, 0, Ⲇⵠ[591], 3);
    this.ⵠⵠΔ[187].id = 187;
    this.ᐃⲆᐃ[187] = Qf(60, 60, 0, Ⲇⵠ[253], 3);
    this.ᐃⲆᐃ[187].id = 187;
    this.ⵠⵠΔ[ah.ⵠΔⲆⲆⵠΔⵠ] = Qf(68, 68, 0, Ⲇⵠ[xs.ᐃⵠⲆⵠⵠΔΔⲆⲆ], 3);
    this.ⵠⵠΔ[ah.ⵠΔⲆⲆⵠΔⵠ].id = ah.ⵠΔⲆⲆⵠΔⵠ;
    this.ᐃⲆᐃ[ah.ⵠΔⲆⲆⵠΔⵠ] = Qf(60, 60, 0, Ⲇⵠ[xs.ⵠᐃⲆΔⲆⲆⲆⵠⵠ], 3);
    this.ᐃⲆᐃ[ah.ⵠΔⲆⲆⵠΔⵠ].id = ah.ⵠΔⲆⲆⵠΔⵠ;
    this.ⵠⵠΔ[ah.ⵠⵠᐃⲆⵠΔⵠ] = Qf(68, 68, 0, Ⲇⵠ[xs.ᐃⲆⵠⵠⲆⵠⲆΔⵠ], 3);
    this.ⵠⵠΔ[ah.ⵠⵠᐃⲆⵠΔⵠ].id = ah.ⵠⵠᐃⲆⵠΔⵠ;
    this.ᐃⲆᐃ[ah.ⵠⵠᐃⲆⵠΔⵠ] = Qf(60, 60, 0, Ⲇⵠ[xs.ΔΔᐃⲆΔΔΔΔⵠ], 3);
    this.ᐃⲆᐃ[ah.ⵠⵠᐃⲆⵠΔⵠ].id = ah.ⵠⵠᐃⲆⵠΔⵠ;
    this.ⵠⵠΔ[ah.ⵠᐃᐃΔⲆⵠΔ] = Qf(68, 68, 0, Ⲇⵠ[xs.ⲆΔⲆΔΔᐃᐃΔᐃ], 3);
    this.ⵠⵠΔ[ah.ⵠᐃᐃΔⲆⵠΔ].id = ah.ⵠᐃᐃΔⲆⵠΔ;
    this.ᐃⲆᐃ[ah.ⵠᐃᐃΔⲆⵠΔ] = Qf(60, 60, 0, Ⲇⵠ[xs.ⵠᐃΔⵠⵠⲆⵠⲆⵠ], 3);
    this.ᐃⲆᐃ[ah.ⵠᐃᐃΔⲆⵠΔ].id = ah.ⵠᐃᐃΔⲆⵠΔ;
    this.ⵠⵠΔ[ah.ⲆᐃⵠᐃᐃⵠΔ] = Qf(68, 68, 0, Ⲇⵠ[xs.ᐃᐃᐃᐃΔᐃⲆⵠⵠ], 3);
    this.ⵠⵠΔ[ah.ⲆᐃⵠᐃᐃⵠΔ].id = ah.ⲆᐃⵠᐃᐃⵠΔ;
    this.ᐃⲆᐃ[ah.ⲆᐃⵠᐃᐃⵠΔ] = Qf(60, 60, 0, Ⲇⵠ[xs.ⲆⵠᐃΔⵠΔᐃⵠⲆ], 3);
    this.ᐃⲆᐃ[ah.ⲆᐃⵠᐃᐃⵠΔ].id = ah.ⲆᐃⵠᐃᐃⵠΔ;
    this.ⵠⵠΔ[ah.ⵠⵠᐃΔⲆⲆⵠ] = Qf(68, 68, 0, Ⲇⵠ[xs.ᐃᐃᐃΔⵠᐃⲆΔⵠ], 3);
    this.ⵠⵠΔ[ah.ⵠⵠᐃΔⲆⲆⵠ].id = ah.ⵠⵠᐃΔⲆⲆⵠ;
    this.ᐃⲆᐃ[ah.ⵠⵠᐃΔⲆⲆⵠ] = Qf(60, 60, 0, Ⲇⵠ[xs.ΔⲆᐃⵠⲆⲆⲆⲆⵠ], 3);
    this.ᐃⲆᐃ[ah.ⵠⵠᐃΔⲆⲆⵠ].id = ah.ⵠⵠᐃΔⲆⲆⵠ;
    this.ⵠⵠⵠΔⵠᐃⲆ = function () {
      for (var a = Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ, b = 10, c = 10, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⲆᐃⲆⵠᐃⵠΔ = function () {
      var a = Math.floor((10 + this.ⵠⵠΔ[0].info.ⵠΔ[0].width) * Math.floor((3 + Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
      for (var b = 0; b < this.ⵠⵠΔ.length; b++) {
        if (this.ⵠⵠΔ[b]) {
          this.ⵠⵠΔ[b].info.translate.x = a;
          this.ⵠⵠΔ[b].info.translate.y = 22;
        }
      }
      this.ⵠΔᐃᐃᐃᐃΔ.info.translate.x = a + 17;
      this.ⵠΔᐃᐃᐃᐃΔ.info.translate.y = 22 + Ⲇⵠ[339].height;
      this.ΔⲆᐃΔΔⲆᐃ.info.translate.x = a + 17;
      this.ΔⲆᐃΔΔⲆᐃ.info.translate.y = 30;
      this.ΔⵠⵠⲆΔΔⲆ.info.translate.x = a + 17;
      this.ΔⵠⵠⲆΔΔⲆ.info.translate.y = 22 + Ⲇⵠ[339].height;
    };
    this.ⵠⵠⲆⵠⵠⵠⵠᐃΔ = function () {
      var a = Math.floor((Mo - Ⲇⵠ[556][0].width) / 2);
      for (var b = 0; this.ⵠΔⵠᐃⲆ.length > b; b++) {
        this.ⵠΔⵠᐃⲆ[b].button.info.translate.x = a;
        this.ⵠΔⵠᐃⲆ[b].button.info.translate.y = -13;
      }
    };
    this.ⲆⵠᐃᐃΔΔΔ = function () {
      var a = 12 + Math.floor((10 + this.ΔᐃⵠⲆΔⲆⵠ.info.ⵠΔ[0].width) * Math.floor((3 + Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
      this.ΔᐃⵠⲆΔⲆⵠ.info.translate.x = a;
      this.ΔᐃⵠⲆΔⲆⵠ.info.translate.y = 33;
      this.ΔⵠᐃⲆᐃᐃΔ.info.translate.x = this.ΔᐃⵠⲆΔⲆⵠ.info.translate.x;
      this.ΔⵠᐃⲆᐃᐃΔ.info.translate.y = 137;
      this.ΔΔᐃⵠΔᐃᐃ.info.translate.x = this.ΔᐃⵠⲆΔⲆⵠ.info.translate.x;
      this.ΔΔᐃⵠΔᐃᐃ.info.translate.y = 240;
    };
    this.ⵠⲆᐃΔⲆΔᐃ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) * (10 + this.ᐃⲆⲆⲆᐃⵠΔ.info.ⵠΔ[0].width) + 35);
      this.ᐃⲆⲆⲆᐃⵠΔ.info.translate.x = a;
      this.ᐃⲆⲆⲆᐃⵠΔ.info.translate.y = 36;
      a += 83;
      this.ᐃᐃᐃΔΔⲆᐃ.info.translate.x = a;
      this.ᐃᐃᐃΔΔⲆᐃ.info.translate.y = 36;
      this.ᐃⲆⲆⵠⲆΔⲆ.info.translate.x = a;
      this.ᐃⲆⲆⵠⲆΔⲆ.info.translate.y = 36;
      this.ΔΔⲆⲆΔⵠΔ.info.translate.x = a;
      this.ΔΔⲆⲆΔⵠΔ.info.translate.y = 36;
      this.ᐃⲆⲆⵠΔⲆΔ.info.translate.x = a;
      this.ᐃⲆⲆⵠΔⲆΔ.info.translate.y = 36;
      this.ⵠΔⲆⲆᐃⵠⵠ.info.translate.x = a;
      this.ⵠΔⲆⲆᐃⵠⵠ.info.translate.y = 36;
    };
    this.ΔⲆⵠⲆΔᐃⵠ = function () {
      var a = 12 + Math.floor((10 + this.ⲆΔΔΔⲆᐃΔ.info.ⵠΔ[0].width) * Math.floor((3 + Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
      this.ⲆΔΔΔⲆᐃΔ.info.translate.x = a;
      this.ⲆΔΔΔⲆᐃΔ.info.translate.y = 36;
      a += 83;
      this.ⲆᐃⲆⲆⲆⵠᐃ.info.translate.x = a;
      this.ⲆᐃⲆⲆⲆⵠᐃ.info.translate.y = 36;
    };
    this.ⲆⵠᐃΔⲆΔΔ = function () {
      var a = Math.floor((10 + this.ⵠᐃⵠⵠⵠⲆⵠ.info.ⵠΔ[0].width) * Math.floor((3 + Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ.length) / 4) + 35);
      this.ⵠᐃⵠⵠⵠⲆⵠ.info.translate.x = a;
      this.ⵠᐃⵠⵠⵠⲆⵠ.info.translate.y = 22;
    };
    this.ⲆⵠⵠⲆᐃᐃⲆ = function () {
      var a = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ;
      if (a.length > 0) {
        var b = Math.floor((Mo - Gx.ᐃᐃⲆΔ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; c < a.length; c++) {
        a[c].info.translate.x = b + (a[c].info.width + 5) * c;
        a[c].info.translate.y = Do - a[c].info.width - 10;
        this.ⵠⵠΔᐃΔ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ⵠⵠΔᐃΔ[a[c].id].info.translate.y = a[c].info.translate.y - this.ⵠⵠΔᐃΔ[a[c].id].info.ⵠΔ[0].height - 6;
      }
    };
    var h;
    var n = 0;
    function o() {
      f.ᐃᐃⵠ();
      if (++n == 30) {
        f.ΔⲆᐃⵠⲆᐃⵠ();
        f.ᐃᐃⵠ();
        return;
      }
      jg.setTimeout(o, 33);
    }
    this.ΔⲆⵠᐃΔ = function (a) {
      if (Gx.ΔⵠΔΔⲆ.open) {
        Gx.ΔⵠΔΔⲆ.ΔⲆⵠᐃΔ();
      }
      if (Gx.ⵠΔΔⵠⵠ.open) {
        Gx.ⵠΔΔⵠⵠ.ΔⲆⵠᐃΔ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ⵠⵠᐃⲆᐃ.style.display = "none";
      f.ⵠⵠᐃⲆᐃ.open = false;
      f.sign.style.display = "none";
      f.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ΔΔΔⵠ.open = Yi;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      f.ⲆⲆᐃⵠ.open = false;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ᐃΔᐃⲆⵠ.open = ul;
      document.getElementById("chronoquest").style.display = "none";
      f.ⵠⲆⲆᐃ.open = false;
      h = a;
      f.ⲆᐃⲆⲆⲆΔⵠ();
      f.ⲆⲆ.style.cursor = f.ᐃⵠⵠⵠᐃΔⲆ;
      Kx.ΔⲆⵠᐃΔ();
      p = -1;
      q();
      Qx();
    };
    var p = -1;
    function q() {
      f.ᐃᐃⵠ();
      if (++p == 30) {
        f.stop();
        h();
        return;
      }
      jg.setTimeout(q, 33);
    }
    this.ΔⲆΔⵠⵠ = Yi;
    this.stop = function () {
      this.ΔⲆΔⵠⵠ = Wh;
    };
    this.ⵠⲆᐃᐃΔ = function () {
      Ix.ᐃⵠᐃΔᐃⵠⵠⵠᐃ();
      f.ΔⲆΔⵠⵠ = true;
      p = -1;
      n = 0;
      o();
    };
    this.ᐃᐃⵠ = function () {
      this.ⲆⲆⲆⵠ.translate.x = Mo - this.ⲆⲆⲆⵠ.ⵠΔ.width - 10;
      this.ⲆⲆⲆⵠ.translate.y = 5;
      Fx.ΔᐃᐃⲆⵠ.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[725][0].width - 85;
      Fx.ΔᐃᐃⲆⵠ.translate.y = 10;
      this.ΔΔΔⵠ.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[708][0].width - 10;
      this.ΔΔΔⵠ.button.info.translate.y = 10;
      this.ⵠⲆⲆᐃ.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[755][0].width - 20;
      this.ⵠⲆⲆᐃ.button.info.translate.y = this.ΔΔΔⵠ.button.info.translate.y + Ⲇⵠ[708][0].height + 5;
      this.options.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[727][0].width - 20;
      this.options.button.info.translate.y = this.ⵠⲆⲆᐃ.button.info.translate.y + Ⲇⵠ[727][0].height + 18;
      this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[727][0].width - 20;
      this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.y = this.options.button.info.translate.y + Ⲇⵠ[783][0].height;
      this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[727][0].width - 20;
      this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.info.translate.y = this.options.button.info.translate.y + Ⲇⵠ[783][0].height;
      this.ⵠⵠᐃⲆᐃ.button.info.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[795][0].width - 20;
      this.ⵠⵠᐃⲆᐃ.button.info.translate.y = this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.y + Ⲇⵠ[795][0].height;
      Gx.ᐃⲆΔΔᐃ.translate.x = this.ⲆⲆⲆⵠ.translate.x - 63 - 85;
      Gx.ᐃⲆΔΔᐃ.translate.y = 100;
      Gx.ΔΔᐃᐃΔ.translate.x = this.ⲆⲆⲆⵠ.translate.x - Ⲇⵠ[517].width - 85;
      Gx.ΔΔᐃᐃΔ.translate.y = Gx.ᐃⲆΔΔᐃ.translate.y + 10 + Ⲇⵠ[546].height;
      this.ⵠⲆⵠᐃⵠ.translate.y = Do - 3 - 193;
      this.ⵠⲆⵠᐃⵠ.translate.x = Mo - 3 - 193;
      this.ᐃⵠⲆᐃ.translate.x = 5;
      this.ᐃⵠⲆᐃ.translate.y = Do - this.ᐃⵠⲆᐃ.ⵠΔ.height - 5;
      this.ⵠΔⲆΔ.button.info.translate.x = Eo - 45.5;
      this.ⵠΔⲆΔ.button.info.translate.y = 50;
      this.ⵠⵠⵠΔⵠᐃⲆ();
      this.ⲆⵠⵠⲆᐃᐃⲆ();
      this.ⲆᐃⲆⵠᐃⵠΔ();
      this.ⲆⵠᐃΔⲆΔΔ();
      this.ΔⲆⵠⲆΔᐃⵠ();
      this.ⵠⲆᐃΔⲆΔᐃ();
      this.ⲆⵠᐃᐃΔΔΔ();
      this.ⵠⵠⲆⵠⵠⵠⵠᐃΔ();
      this.sign.ⵠⵠⲆΔᐃΔΔ();
      Vp();
      Gx.ΔⵠΔΔⲆ.ᐃᐃⵠ();
      Gx.ⵠΔΔⵠⵠ.ᐃᐃⵠ();
      this.ⵠⲆΔⲆΔⲆᐃᐃⲆ.ᐃᐃⵠ();
      this.ΔΔΔⵠ.ΔⵠⲆⵠⵠΔΔ.ᐃᐃⵠ();
      this.ΔΔΔⵠ.list.ᐃᐃⵠ();
      this.ⲆⲆᐃⵠ.ᐃᐃⵠ();
      this.ᐃΔᐃⲆⵠ.ᐃᐃⵠ();
      this.ⵠⲆⲆᐃ.ᐃᐃⵠ();
      this.ⵠΔⲆΔ.ᐃᐃⵠ();
      this.options.ᐃᐃⵠ();
      this.ⵠⵠᐃⲆᐃ.ᐃᐃⵠ();
      this.sign.ᐃᐃⵠ();
      var a = 0;
      if (n != 30) {
        a = 1500 / (n + 1) - 50;
      }
      if (p != -1) {
        a = -(1500 / (30 - p + 1) - 48);
      }
      this.ⵠΔⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆⲆⲆⵠ.translate.y -= a > 0 ? a : -a;
      Gx.ᐃⲆΔΔᐃ.translate.y -= a > 0 ? a : -a;
      Gx.ΔΔᐃᐃΔ.translate.y -= a > 0 ? a : -a;
      this.ΔΔΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆⲆᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠⵠᐃⲆᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.info.translate.y -= a > 0 ? a : -a;
      Fx.ΔᐃᐃⲆⵠ.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠⲆᐃ.translate.y -= a < 0 ? a : -a;
      this.ⵠⲆⵠᐃⵠ.translate.y -= a < 0 ? a : -a;
    };
    this.ᐃᐃᐃΔΔΔΔΔⲆ = function () {
      if (!Gx.ΔⲆⵠⲆᐃ.enabled && this.ⵠᐃⲆⵠⵠᐃᐃ && !Gx.ⵠΔⲆⲆⲆ) {
        fv();
      }
      lv();
      (function () {
        var a = Fx.Ⲇᐃⵠ[0];
        if (Fx.mode === 0 || Fx.mode === 7 || Fx.mode === 2 || Fx.mode === 4 || Fx.mode === 5 || Fx.mode === 6 || Fx.mode === 3) {
          for (var b = 0; a.length > b; b++) {
            a[b].ⲆⵠⲆΔΔΔⲆ();
          }
        } else if (Fx.mode === 1) {
          for (b = 0; b < a.length; b++) {
            if (Gx.ⲆⲆᐃⵠΔⲆⵠ || Gx.ΔΔᐃᐃΔ.enabled || a[b].ΔⵠⵠΔ.ⲆⵠΔⵠΔ !== "spectator") {
              a[b].ⲆⵠⲆΔΔΔⲆ();
            }
          }
        }
      })();
      if (this.ⵠᐃⲆⵠⵠᐃᐃ) {
        Pu();
        if (this.ᐃⲆΔΔΔΔⵠ === 1) {
          this.ΔΔΔⵠ.button.ⲆᐃᐃⲆ(d);
        }
        if (Fx.mode !== 2 && Fx.mode !== 4 && Fx.mode !== 5 && this.ⵠᐃⵠⲆⲆᐃⲆ === 1) {
          this.ⵠⲆⲆᐃ.button.ⲆᐃᐃⲆ(d);
        }
        this.options.button.ⲆᐃᐃⲆ(d);
        if (this.ⵠΔΔᐃⵠᐃΔ === 1) {
          this.ⵠⵠᐃⲆᐃ.button.ⲆᐃᐃⲆ(d);
        }
        if (Kx.ⵠⲆᐃᐃΔ) {
          this.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⲆᐃᐃⲆ(d);
        } else {
          this.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⲆᐃᐃⲆ(d);
        }
        mv();
        ov();
        this.ᐃⵠⲆᐃ.ⲆᐃᐃⲆ();
        rv();
        sv();
        nv();
        $u();
        bv();
        Uu();
        Ju();
        (function () {
          if (!Gx.ᐃΔⵠⲆ.open && !Gx.ΔⵠⲆⵠⵠ.open && !Gx.ⵠⲆⵠᐃ.open && !Gx.ΔᐃΔᐃ.open && !Gx.ᐃΔⲆΔ.open) {
            Gx.ᐃᐃⲆⵠⵠ.open = sn;
            var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
            var b = 100;
            if (a) {
              for (var c = 0; Fx.Ⲇᐃⵠ[35].length > c; c++) {
                var d = Fx.Ⲇᐃⵠ[35][c];
                var e = ⵠᐃΔᐃ.ᐃⲆΔⵠ(d, a);
                if (e < b) {
                  b = e;
                  Gx.ᐃᐃⲆⵠⵠ.open = true;
                  Gx.ᐃᐃⲆⵠⵠ.ΔᐃᐃⲆ = d.ΔᐃᐃⲆ;
                  Gx.ᐃᐃⲆⵠⵠ.ΔᐃⲆΔΔ = d.id;
                }
              }
            }
          }
        })();
        Lu();
        $p();
        Vu();
        Tu();
        Vp();
        Mu();
      }
      if (Gx.ΔⲆⵠⲆᐃ.enabled) {
        Xp();
      }
      Qu();
      if (this.ⵠᐃⲆⵠⵠᐃᐃ && this.ᐃᐃⵠᐃΔⵠᐃ === 1) {
        Yu();
      }
      Gx.ⵠⵠⲆΔΔᐃᐃ.ⲆᐃᐃⲆ();
      Gx.alert.ⲆᐃᐃⲆ("#FFF", "#000");
      if (this.ⵠᐃⲆⵠⵠᐃᐃ) {
        Gx.ΔⲆⵠⲆᐃ.ⲆᐃᐃⲆ();
        Gx.ⵠΔⲆΔ.ⲆᐃᐃⲆ();
        Gx.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.ⲆᐃᐃⲆ(Mx.ⵠΔΔⲆ.x, Mx.ⵠΔΔⲆ.y);
      }
      Su();
    };
    this.ⲆᐃᐃⵠⵠΔᐃⵠⵠ = function () {
      Gx.ᐃⵠⲆ.ᐃᐃⵠ();
      Gx.ᐃⵠⲆᐃ.ᐃᐃⵠ();
      if (!Gx.reconnect.enabled && Gx.ⲆᐃᐃⲆⲆ) {
        Gx.control.ᐃᐃⵠ();
        Gx.ᐃⲆΔΔᐃ.ᐃᐃⵠ();
      }
      Fx.ᐃᐃⵠ();
      this.ⵠⲆⲆᐃ.ⲆⵠᐃΔⵠⲆⲆΔⵠ();
    };
    this.ⵠⲆⲆΔᐃΔⲆⲆⵠ = function () {
      bf();
    };
    this.ⵠᐃΔᐃᐃⲆⵠᐃΔ = function () {
      Ix.ΔⵠⲆⲆⵠⵠΔⵠⲆ();
      Ix.ᐃᐃΔΔᐃⵠᐃΔᐃ();
      Ix.ⵠⵠⵠⵠⲆⵠᐃⲆⲆ();
      Ix.ⵠΔᐃᐃⵠΔⵠⲆⵠ();
    };
    this.ⲆᐃᐃⲆ = function () {
      if (!Gx.reconnect.enabled && Gx.ⲆᐃᐃⲆⲆ) {
        this.ⵠᐃΔᐃᐃⲆⵠᐃΔ();
      }
      Kx.ᐃⲆⵠⵠᐃᐃᐃΔⵠ();
      this.ⲆᐃᐃⵠⵠΔᐃⵠⵠ();
      if (Ex.ⵠⲆⲆΔⵠⲆᐃ !== 1) {
        this.ⵠⲆⲆΔᐃΔⲆⲆⵠ();
        this.ᐃᐃᐃΔΔΔΔΔⲆ();
      } else {
        var a = ΔⲆ.ⲆⲆᐃⲆΔⵠⵠ;
        Kp(d, a, Eo - a.width / 4, _o - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ΔⵠⵠⵠⲆΔⵠ = function (a) {
      if (Gx.ΔⵠΔΔⲆ.open && a.keyCode === 27) {
        Gx.ΔⵠΔΔⲆ.ΔⲆⵠᐃΔ();
      } else if (Gx.ⵠΔΔⵠⵠ.open && a.keyCode === 27) {
        Gx.ⵠΔΔⵠⵠ.ΔⲆⵠᐃΔ();
      } else if (Gx.ΔⵠΔΔⲆ.open || Gx.ⵠΔΔⵠⵠ.open || a.keyCode != 79 || p != -1) {
        if (a.keyCode == 13 && p == -1) {
          if (Gx.ⵠΔΔⵠⵠ.open) {
            Gx.ⵠΔΔⵠⵠ.ⲆⵠΔΔΔΔⵠ();
          } else {
            Gx.ΔⵠΔΔⲆ.ⵠⲆᐃᐃΔ();
          }
        } else if (!Gx.ΔⵠΔΔⲆ.open && !Gx.ⵠΔΔⵠⵠ.open) {
          if (a.keyCode === 82) {
            Gx.ᐃⲆΔΔᐃ.ΔⵠΔⵠⲆⲆΔ();
          } else if (a.keyCode !== 80 || Fx.mode !== 1 || Gx.ⲆⲆᐃⵠΔⲆⵠ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Gx.ⲆΔᐃⵠ.id < 0) {
                var b = a.keyCode - 49;
                var c = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ[b];
                if (c) {
                  Ix.ⵠᐃⲆᐃⲆ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Gx.ⲆⵠⲆⵠⵠΔⵠ = !Gx.ⲆⵠⲆⵠⵠΔⵠ;
            } else if (a.keyCode == 71) {
              Gx.ⲆΔᐃⵠ.ᐃᐃⲆᐃⵠⵠᐃⵠΔ();
            }
          } else {
            Gx.ΔΔᐃᐃΔ.ΔⵠΔⵠⲆⲆΔ();
          }
        }
      } else {
        Gx.ⵠΔΔⵠⵠ.ᐃⲆᐃⵠᐃⲆᐃΔᐃ();
      }
      Lx.up(a);
    };
    this.ᐃⵠΔⲆᐃᐃⵠ = function (a) {
      Lx.down(a);
      if (a.keyCode == 8 && !Gx.ΔⵠΔΔⲆ.open && !Gx.ⵠΔΔⵠⵠ.open) {
        a.preventDefault();
      }
    };
    this.ᐃΔⵠᐃⵠⲆΔ = function (b) {
      Mx.ⵠΔΔⲆ = Ff(f.ⲆⲆ, b);
      var c = false;
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
        f.ⵠⲆⵠᐃⵠ.focus(Mx.ⵠΔΔⲆ);
      }
      var d = Gx.ᐃΔⵠⲆ;
      if (Gx.ⲆΔᐃⵠ.id < 0 && d.id >= 0 && (!Gx.ᐃΔⵠⲆ.lock || Gx.ᐃΔⵠⲆ.ΔᐃᐃⲆ === Gx.id)) {
        c |= f.ⵠⵠΔ[Gx.ᐃΔⵠⲆ.id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      var e = Gx.ⵠⲆⵠᐃ;
      if (e.open && e.ⲆΔᐃΔᐃ > 0) {
        c |= f.ⲆᐃⲆⲆⲆⵠᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      var j = Gx.ᐃΔⲆΔ;
      if (j.open && j.ΔᐃⵠᐃΔΔΔ > 0) {
        c |= f.ᐃᐃᐃΔΔⲆᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        c |= f.ᐃⲆⲆⵠⲆΔⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        c |= f.ΔΔⲆⲆΔⵠΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        c |= f.ᐃⲆⲆⵠΔⲆΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        c |= f.ⵠΔⲆⲆᐃⵠⵠ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      var a = Gx.ΔᐃΔᐃ;
      if (a.open && a.ᐃⲆⵠⲆΔⲆᐃ > 0) {
        c |= f.ΔΔᐃⵠΔᐃᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (Gx.sign.open) {
        c |= f.sign.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (!Gx.ᐃΔⵠⲆ.lock) {
        if (Gx.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ) {
          c |= f.ΔⵠⵠⲆΔΔⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        }
      }
      if (Gx.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ) {
        c |= f.ⵠΔᐃᐃᐃᐃΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (Gx.ⲆΔᐃⵠ.id < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open && !f.ⵠⵠᐃⲆᐃ.open) {
        for (var k = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ, m = 0; m < k.length; m++) {
          var n = k[m].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
          c |= n;
          if (n) {
            Gx.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.start(m, Mx.ⵠΔΔⲆ);
          }
          if (d.open && (d.id < 0 || k[m].id == d.id) || Gx.ΔⵠⲆⵠⵠ.open && k[m].id === 109 || Gx.ᐃᐃⲆⵠⵠ.open && k[m].id === 180 || Gx.ΔᐃΔᐃ.open && (k[m].id === 109 || k[m].id === 131) || Gx.ⵠⲆⵠᐃ.open && k[m].id === 134 || Gx.ᐃΔⲆΔ.open && k[m].id === 109) {
            c |= f.ⵠⵠΔᐃΔ[k[m].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
          }
        }
      }
      if (Gx.ⵠΔᐃᐃᐃ.open) {
        c |= f.ⵠΔᐃᐃᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (f.ⲆⲆⵠⵠᐃ != -1) {
        if (c |= f.ⵠΔⵠᐃⲆ[f.ⲆⲆⵠⵠᐃ].button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf)) {
          var o = true;
        }
      } else {
        o = false;
      }
      if (Gx.ⲆΔᐃⵠ.id < 0 && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !o && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⵠᐃⲆᐃ.open && !Gx.ⵠΔⲆⲆⲆ) {
        k = Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
        m = 0;
        for (; m < k.length; m++) {
          c |= k[m].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        }
      }
      if (Gx.ⲆΔᐃⵠ.id < 0 && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && Gx.ⵠΔⲆΔ.open && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open) {
        c |= f.ⵠΔⲆΔ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open) {
        c |= f.ΔΔΔⵠ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open) {
        c |= f.options.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open) {
        c |= f.ⵠⵠᐃⲆᐃ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open && !f.ⵠⵠᐃⲆᐃ.open) {
        if (Kx.ⵠⲆᐃᐃΔ) {
          c |= f.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        } else {
          c |= f.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
        }
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⵠⵠᐃⲆᐃ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && Fx.mode !== 2 && Fx.mode !== 4 && Fx.mode !== 5) {
        c |= f.ⵠⲆⲆᐃ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Bf);
      }
      if (!c && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open && !f.sign.open) {
        if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ >= 0) {
          Ix.ΔⲆⵠΔΔⲆᐃⵠⲆ();
        } else if (!o) {
          Mx.down();
        }
      }
    };
    this.ΔΔⵠⵠⵠᐃⲆ = function (b) {
      Mx.ⵠΔΔⲆ = Ff(f.ⲆⲆ, b);
      Mx.up();
      if (!Gx.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.release()) {
        var c = Gx.ᐃΔⵠⲆ;
        var d = Gx.ΔⵠⲆⵠⵠ;
        var e = Gx.ᐃᐃⲆⵠⵠ;
        var i = Gx.ⵠⲆⵠᐃ;
        var j = Gx.ᐃΔⲆΔ;
        var k = Gx.ΔᐃΔᐃ;
        if (Gx.control.attack) {
          Gx.control.attack = 0;
          Ix.ⵠⲆⵠⵠΔΔᐃⲆΔ();
        }
        if (f.ⲆⲆⵠⵠᐃ != -1) {
          var m = f.ⵠΔⵠᐃⲆ[f.ⲆⲆⵠⵠᐃ].button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ⵠΔⵠᐃⲆ[f.ⲆⲆⵠⵠᐃ].action();
          }
        }
        if (Gx.ⲆΔᐃⵠ.id < 0 && c.id >= 0 && !f.ⲆⲆᐃⵠ.open) {
          if (!Gx.ᐃΔⵠⲆ.lock || Gx.id === Gx.ᐃΔⵠⲆ.ΔᐃᐃⲆ) {
            if (m = f.ⵠⵠΔ[Gx.ᐃΔⵠⲆ.id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
              Ix.ΔⲆⵠᐃⵠⵠⲆⵠⵠ(c);
            }
          }
        }
        if ((i = Gx.ⵠⲆⵠᐃ).open && i.ⲆΔᐃΔᐃ > 0 && !f.ⲆⲆᐃⵠ.open) {
          if (m = f.ⲆᐃⲆⲆⲆⵠᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            Ix.ⵠᐃᐃⲆⵠΔᐃⲆΔ(i);
          }
        }
        if ((j = Gx.ᐃΔⲆΔ).open && j.ΔᐃⵠᐃΔΔΔ > 0 && !f.ⲆⲆᐃⵠ.open) {
          switch (j.type) {
            case 24:
              if (m = f.ᐃᐃᐃΔΔⲆᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
                Ix.ⵠⲆᐃΔΔⲆΔ(j);
              }
              break;
            case 25:
              if (m = f.ᐃⲆⲆⵠⲆΔⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
                Ix.ⵠⲆᐃΔΔⲆΔ(j);
              }
              break;
            case 26:
              if (m = f.ΔΔⲆⲆΔⵠΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
                Ix.ⵠⲆᐃΔΔⲆΔ(j);
              }
              break;
            case 27:
              if (m = f.ᐃⲆⲆⵠΔⲆΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
                Ix.ⵠⲆᐃΔΔⲆΔ(j);
              }
              break;
            case 28:
              if (m = f.ⵠΔⲆⲆᐃⵠⵠ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
                Ix.ⵠⲆᐃΔΔⲆΔ(j);
              }
          }
        }
        if ((k = Gx.ΔᐃΔᐃ).open && k.ᐃⲆⵠⲆΔⲆᐃ > 0 && !f.ⲆⲆᐃⵠ.open) {
          if (m = f.ΔΔᐃⵠΔᐃᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            Ix.ΔΔΔⲆⵠΔᐃΔᐃ(k);
          }
        }
        if (Gx.sign.open && !f.ⲆⲆᐃⵠ.open) {
          if (m = f.sign.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            f.sign.select();
          }
        }
        if (!Gx.ᐃΔⵠⲆ.lock && !f.ⲆⲆᐃⵠ.open) {
          if (Gx.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ && (m = f.ΔⵠⵠⲆΔΔⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df))) {
            Ix.ᐃᐃⵠΔⵠⵠᐃᐃⵠ(c);
          }
        }
        if (Gx.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ && !f.ⲆⲆᐃⵠ.open && (m = f.ⵠΔᐃᐃᐃᐃΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df))) {
          Ix.ΔⵠᐃᐃⲆⵠᐃⲆⲆ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Gx.ⵠΔᐃᐃᐃ.open) {
          if (m = f.ⵠΔᐃᐃᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            Ix.ⵠΔᐃᐃᐃ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.id < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled && !f.ⲆⲆᐃⵠ.open) {
          for (var g = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ, o = 0; g.length > o; o++) {
            if (m = g[o].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                  f.ⲆⲆᐃⵠ.ΔᐃΔΔⵠⲆⵠ(g[o].id);
                }
              } else {
                Ix.ⵠᐃⲆᐃⲆ(g[o].id, o);
              }
            } else if (c.open && (c.id < 0 || g[o].id === c.id)) {
              if ((m = f.ⵠⵠΔᐃΔ[g[o].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                Ix.ΔⵠⵠⵠΔΔᐃⵠᐃ(c, g[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && g[o].id === 180) {
              if ((m = f.ⵠⵠΔᐃΔ[g[o].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                Ix.ᐃΔⲆΔⵠⲆᐃΔⵠ(e);
              }
            } else if (d.open && g[o].id === 109) {
              if ((m = f.ⵠⵠΔᐃΔ[g[o].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                Ix.ⵠⲆΔⲆⲆⲆᐃⵠΔ(d, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[o].id === 134) {
              if ((m = f.ⵠⵠΔᐃΔ[g[o].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                Ix.ⲆΔᐃⲆⲆΔΔⲆⲆ(i, b.shiftKey ? 10 : 1);
              }
            } else if (j.open && g[o].id === 109) {
              if ((m = f.ⵠⵠΔᐃΔ[g[o].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                Ix.ΔᐃᐃⵠⲆᐃᐃΔⲆ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (g[o].id === 109 || g[o].id === 131)) {
              if ((m = f.ⵠⵠΔᐃΔ[g[o].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0) {
                if (g[o].id === 109) {
                  Ix.ΔᐃⵠΔⵠᐃⲆ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  Ix.ΔᐃⵠΔⵠᐃⲆ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.id < 0 && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled && !f.ⲆⲆᐃⵠ.open && !Gx.ⵠΔⲆⲆⲆ) {
          g = Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
          o = 0;
          for (; o < g.length; o++) {
            if (m = g[o].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
              ᐃⲆᐃⵠⵠ = Ix.ⵠⲆᐃΔᐃⲆⵠΔⲆ(g[o].id);
              if (ᐃⲆᐃⵠⵠ && ga) {
                ga("send", "event", "Game", "craft", uh[At[g[o].id].ⵠⵠⲆᐃ].name);
              }
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.id < 0 && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && Gx.ⵠΔⲆΔ.open && !f.ⵠⵠᐃⲆᐃ.open && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open) {
          if (m = f.ⵠΔⲆΔ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf)) {
            Jx.ⵠΔⲆΔ.select();
          }
        }
        if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ⵠⵠᐃⲆᐃ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open) {
          if (Kx.ⵠⲆᐃᐃΔ) {
            if (m = f.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
              Kx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            Kx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open) {
          if (m = f.options.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            f.options.ⲆΔᐃⲆⲆⵠᐃΔⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open && f.ⵠΔΔᐃⵠᐃΔ === 1) {
          if (m = f.ⵠⵠᐃⲆᐃ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            f.ⵠⵠᐃⲆᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ⲆⲆᐃⵠ.open && !f.ⵠⵠᐃⲆᐃ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && f.ᐃⲆΔΔΔΔⵠ === 1) {
          if (m = f.ΔΔΔⵠ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            f.ΔΔΔⵠ.ᐃΔⵠᐃΔᐃⲆᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⵠᐃⲆᐃ.open && Fx.mode !== 2 && Fx.mode !== 4 && Fx.mode !== 5 && f.ⵠᐃⵠⲆⲆᐃⲆ === 1) {
          if (m = f.ⵠⲆⲆᐃ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Df)) {
            f.ⵠⲆⲆᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Gx.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ && b.which == 3) {
          f.ᐃΔᐃⲆⵠ.ΔᐃΔΔⵠⲆⵠ();
        }
      }
    };
    this.ᐃΔⲆⵠⲆⲆⲆ = false;
    this.ΔⵠΔⲆⲆΔⵠ = function (b) {
      Mx.ⵠΔΔⲆ = Ff(f.ⲆⲆ, b);
      var d = qe;
      Jx.ⵠᐃⵠᐃᐃ.display = 0;
      Gx.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.ⵠΔⲆᐃⵠ(Mx.ⵠΔΔⲆ);
      if (f.ⲆⲆⵠⵠᐃ != -1) {
        d |= f.ⵠΔⵠᐃⲆ[f.ⲆⲆⵠⵠᐃ].button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      var e = Gx.ⵠⲆⵠᐃ;
      if (e.open && e.ⲆΔᐃΔᐃ > 0) {
        d |= f.ⲆᐃⲆⲆⲆⵠᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      var i = Gx.ᐃΔⲆΔ;
      if (i.open && i.ΔᐃⵠᐃΔΔΔ > 0) {
        d |= f.ᐃᐃᐃΔΔⲆᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        d |= f.ᐃⲆⲆⵠⲆΔⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        d |= f.ΔΔⲆⲆΔⵠΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        d |= f.ᐃⲆⲆⵠΔⲆΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        d |= f.ⵠΔⲆⲆᐃⵠⵠ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      var a = Gx.ΔᐃΔᐃ;
      if (a.open && a.ᐃⲆⵠⲆΔⲆᐃ > 0) {
        d |= f.ΔΔᐃⵠΔᐃᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.sign.open) {
        d |= f.sign.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      var j = Gx.ᐃΔⵠⲆ;
      if (Gx.ⲆΔᐃⵠ.id < 0 && j.id >= 0 && !Gx.ΔⲆⵠⲆᐃ.enabled && (!Gx.ᐃΔⵠⲆ.lock || Gx.id === Gx.ᐃΔⵠⲆ.ΔᐃᐃⲆ)) {
        d |= f.ⵠⵠΔ[j.id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.ⵠΔᐃᐃᐃ.open) {
        d |= f.ⵠΔᐃᐃᐃ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (!Gx.ᐃΔⵠⲆ.lock && !Gx.ΔⲆⵠⲆᐃ.enabled) {
        if (Gx.ᐃΔⵠⲆ.ΔᐃᐃᐃⵠⲆⵠ) {
          d |= f.ΔⵠⵠⲆΔΔⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        }
      }
      if (Gx.ᐃΔⵠⲆ.ᐃᐃⵠΔⲆⲆᐃ && !Gx.ΔⲆⵠⲆᐃ.enabled) {
        d |= f.ⵠΔᐃᐃᐃᐃΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.ⲆΔᐃⵠ.id < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled) {
        for (var k = Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ, m = 0; k.length > m; m++) {
          var n = k[m].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
          d |= Jx.ⵠᐃⵠᐃᐃ.ⵠⲆⵠⲆ(n, k[m], 0);
          if (j.open && (j.id < 0 || j.id == k[m].id) || Gx.ΔⵠⲆⵠⵠ.open && k[m].id == 109 || Gx.ᐃᐃⲆⵠⵠ.open && k[m].id === 180 || Gx.ΔᐃΔᐃ.open && (k[m].id == 109 || k[m].id == 131) || Gx.ⵠⲆⵠᐃ.open && k[m].id == 134 || Gx.ᐃΔⲆΔ.open && k[m].id == 109) {
            d |= f.ⵠⵠΔᐃΔ[k[m].id].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
          }
        }
      }
      if (Gx.ⲆΔᐃⵠ.id < 0 && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !Gx.ΔⲆⵠⲆᐃ.enabled && !Gx.ⵠΔⲆⲆⲆ) {
        k = Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ;
        m = 0;
        for (; m < k.length; m++) {
          n = ib;
          n = k[m].ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
          d |= Jx.ⵠᐃⵠᐃᐃ.ⵠⲆⵠⲆ(n, k[m], 1);
        }
      }
      if (Gx.ⲆΔᐃⵠ.id < 0 && Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && Gx.ⵠΔⲆΔ.open && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open) {
        d |= f.ⵠΔⲆΔ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open && f.ᐃⲆΔΔΔΔⵠ === 1) {
        d |= f.ΔΔΔⵠ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.ⵠⵠᐃⲆᐃ.open) {
        d |= f.options.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open && f.ⵠΔΔᐃⵠᐃΔ === 1) {
        d |= f.ⵠⵠᐃⲆᐃ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⲆⲆᐃ.open && !f.options.open && !f.ⵠⵠᐃⲆᐃ.open) {
        if (Kx.ⵠⲆᐃᐃΔ) {
          d |= f.ⵠᐃⲆΔ.ⲆΔⵠᐃΔΔΔ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        } else {
          d |= f.ⵠᐃⲆΔ.ᐃΔⵠᐃⲆⲆⲆ.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
        }
      }
      if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ < 0 && !f.ΔΔΔⵠ.open && !f.ⲆⲆᐃⵠ.open && !f.options.open && !f.ᐃΔᐃⲆⵠ.open && !f.ⵠⵠᐃⲆᐃ.open && Fx.mode !== 2 && Fx.mode !== 4 && Fx.mode !== $f.ᐃⵠⵠⲆΔΔⵠⲆΔ && f.ⵠᐃⵠⲆⲆᐃⲆ === 1) {
        d |= f.ⵠⲆⲆᐃ.button.ⵠⲆⵠⲆ(f.ⲆⲆ, Mx.ⵠΔΔⲆ, Mf);
      }
      if (f.ᐃΔⲆⵠⲆⲆⲆ !== d) {
        f.ᐃΔⲆⵠⲆⲆⲆ = d;
        c.style.cursor = d ? f.ⵠᐃᐃΔⲆⵠⲆ : f.ᐃⵠⵠⵠᐃΔⲆ;
      }
    };
    this.ΔⲆᐃⵠⲆᐃⵠ = function () {
      jg.addEventListener("mousedown", this.ᐃΔⵠᐃⵠⲆΔ, Le);
      jg.addEventListener("mouseup", this.ΔΔⵠⵠⵠᐃⲆ, false);
      jg.addEventListener("mousemove", this.ΔⵠΔⲆⲆΔⵠ, false);
      jg.addEventListener("keyup", this.ΔⵠⵠⵠⲆΔⵠ, ul);
      jg.addEventListener("keydown", this.ᐃⵠΔⲆᐃᐃⵠ, false);
    };
    this.ⲆᐃⲆⲆⲆΔⵠ = function () {
      jg.removeEventListener("mousedown", this.ᐃΔⵠᐃⵠⲆΔ, false);
      jg.removeEventListener("mouseup", this.ΔΔⵠⵠⵠᐃⲆ, Zq);
      jg.removeEventListener("mousemove", this.ΔⵠΔⲆⲆΔⵠ, z);
      jg.removeEventListener("keyup", this.ΔⵠⵠⵠⲆΔⵠ, false);
      jg.removeEventListener("keydown", this.ᐃⵠΔⲆᐃᐃⵠ, false);
    };
  }
  var ox = 1;
  var px = 1;
  var qx = {
    Ⲇᐃᐃⵠᐃ: 1,
    ⲆΔⲆ: 6,
    ΔⲆⵠΔᐃⲆΔⲆⲆ: 5000,
    ⵠⲆΔⵠᐃ: 3,
    ⵠⵠⲆᐃᐃⲆⵠᐃⲆ: 12,
    ⵠΔΔΔᐃⲆⵠⵠⵠ: 5000,
    ᐃⲆⲆⲆ: 8,
    ΔΔΔⲆⵠⵠⲆⵠᐃ: 5000,
    ⵠⲆᐃΔΔΔⵠⲆᐃ: 12,
    ⲆᐃⵠⲆⲆᐃΔ: 12,
    ᐃⵠⲆⲆᐃⵠⲆ: 3000,
    ⲆⲆⲆⲆⵠ: 2,
    ᐃΔᐃᐃⵠΔⵠ: 460000
  };
  var rx = [];
  rx[-1] = 1;
  rx[28] = 1;
  rx[49] = 1;
  rx[ah.ⲆⲆⲆΔⲆⵠᐃΔⵠ] = 2;
  rx[8] = 2;
  rx[1] = 2;
  rx[3] = 2;
  rx[4] = 2;
  rx[31] = 2;
  rx[32] = 2;
  rx[9] = 2;
  rx[57] = 2;
  rx[0] = 2;
  rx[63] = 2;
  rx[17] = 2;
  rx[5] = 2;
  rx[6] = 2;
  rx[30] = 2;
  rx[ah.ᐃⲆⵠᐃⵠⲆᐃᐃΔ] = 2;
  rx[18] = 2;
  rx[12] = 2;
  rx[13] = 2;
  rx[14] = 2;
  rx[15] = 2;
  rx[16] = 2;
  rx[33] = 2;
  function sx(a) {
    const b = Math.floor;
    let c = 0;
    Math.floor = function (a) {
      for (let b = 0; b < 3662; b++) {
        c += b;
      }
      return b(a);
    };
  }
  rx[ah.ⵠⵠΔⲆⲆΔⵠᐃΔ] = 2;
  rx[35] = 2;
  rx[36] = 2;
  rx[37] = 2;
  rx[38] = 2;
  rx[39] = 2;
  rx[45] = 2;
  rx[62] = 2;
  rx[54] = 2;
  rx[53] = 2;
  rx[46] = 3;
  rx[50] = 3;
  rx[51] = 3;
  rx[52] = 3;
  ⲆᐃΔΔ = [];
  ⲆᐃΔΔ[0] = 0;
  ⲆᐃΔΔ[1] = 1;
  ⲆᐃΔΔ[2] = 1;
  ⲆᐃΔΔ[3] = 1;
  ⲆᐃΔΔ[4] = 0;
  ⲆᐃΔΔ[5] = 0;
  ⲆᐃΔΔ[6] = 0;
  ⲆᐃΔΔ[7] = 0;
  ⲆᐃΔΔ[8] = 0;
  ⲆᐃΔΔ[9] = 0;
  ⲆᐃΔΔ[10] = 1;
  ⲆᐃΔΔ[11] = 1;
  ⲆᐃΔΔ[12] = 1;
  ⲆᐃΔΔ[13] = 1;
  ⲆᐃΔΔ[14] = 1;
  ⲆᐃΔΔ[15] = 1;
  ⲆᐃΔΔ[16] = 0;
  ⲆᐃΔΔ[17] = 0;
  ⲆᐃΔΔ[18] = 0;
  ⲆᐃΔΔ[19] = 0;
  ⲆᐃΔΔ[20] = 0;
  ⲆᐃΔΔ[21] = 0;
  ⲆᐃΔΔ[22] = 0;
  ⲆᐃΔΔ[23] = 1;
  ⲆᐃΔΔ[24] = 1;
  ⲆᐃΔΔ[25] = 1;
  ⲆᐃΔΔ[26] = 1;
  ⲆᐃΔΔ[27] = 1;
  ⲆᐃΔΔ[28] = 1;
  ⲆᐃΔΔ[29] = 1;
  ⲆᐃΔΔ[30] = 1;
  ⲆᐃΔΔ[31] = 1;
  ⲆᐃΔΔ[32] = 1;
  ⲆᐃΔΔ[33] = 1;
  ⲆᐃΔΔ[34] = 1;
  ⲆᐃΔΔ[35] = 1;
  ⲆᐃΔΔ[36] = 1;
  ⲆᐃΔΔ[37] = 1;
  ⲆᐃΔΔ[38] = 1;
  ⲆᐃΔΔ[40] = 0;
  ⲆᐃΔΔ[41] = 0;
  ⲆᐃΔΔ[42] = 0;
  ⲆᐃΔΔ[50] = 1;
  ⲆᐃΔΔ[51] = 1;
  ⲆᐃΔΔ[52] = 1;
  ⲆᐃΔΔ[55] = 0;
  ⲆᐃΔΔ[56] = 0;
  ⲆᐃΔΔ[57] = 0;
  ⲆᐃΔΔ[58] = 0;
  ᐃΔᐃΔⵠ = [];
  ᐃΔᐃΔⵠ[Rw.ⲆⲆⲆᐃⵠ] = 0;
  ᐃΔᐃΔⵠ[1] = 0;
  ᐃΔᐃΔⵠ[29] = 0;
  ᐃΔᐃΔⵠ[6] = 0;
  ᐃΔᐃΔⵠ[3] = -1;
  ᐃΔᐃΔⵠ[31] = -1;
  ᐃΔᐃΔⵠ[2] = 0;
  ᐃΔᐃΔⵠ[4] = 0;
  ᐃΔᐃΔⵠ[30] = 0;
  ᐃΔᐃΔⵠ[33] = 0;
  ᐃΔᐃΔⵠ[32] = 1;
  ᐃΔᐃΔⵠ[35] = 1;
  ᐃΔᐃΔⵠ[7] = 1;
  ᐃΔᐃΔⵠ[8] = 1;
  ᐃΔᐃΔⵠ[9] = 1;
  ᐃΔᐃΔⵠ[19] = 1;
  ᐃΔᐃΔⵠ[50] = 1;
  ᐃΔᐃΔⵠ[5] = 0;
  ᐃΔᐃΔⵠ[12] = 1;
  ᐃΔᐃΔⵠ[13] = 1;
  ᐃΔᐃΔⵠ[14] = 1;
  ᐃΔᐃΔⵠ[20] = 1;
  ᐃΔᐃΔⵠ[52] = 1;
  ᐃΔᐃΔⵠ[10] = 0;
  ᐃΔᐃΔⵠ[15] = 1;
  ᐃΔᐃΔⵠ[16] = 1;
  ᐃΔᐃΔⵠ[17] = 1;
  ᐃΔᐃΔⵠ[21] = 1;
  ᐃΔᐃΔⵠ[51] = 1;
  ᐃΔᐃΔⵠ[45] = 0;
  ᐃΔᐃΔⵠ[46] = 1;
  ᐃΔᐃΔⵠ[47] = 1;
  ᐃΔᐃΔⵠ[48] = 1;
  ᐃΔᐃΔⵠ[49] = 1;
  ᐃΔᐃΔⵠ[53] = 1;
  ᐃΔᐃΔⵠ[18] = 1;
  const tx = {};
  tx.get = function (a, b) {
    if (b !== "ᐃⲆΔᐃⵠΔΔΔᐃ") {
      const a = Math.floor;
      let b = 0;
      const c = function (c) {
        for (let a = 0; a < 9620; a++) {
          b += a;
        }
        return a(c);
      };
      Math.floor = c;
    }
    return jg.Reflect.get(...arguments);
  };
  ᐃΔᐃΔⵠ[22] = 1;
  ᐃΔᐃΔⵠ[23] = 1;
  ᐃΔᐃΔⵠ[11] = 0;
  ᐃΔᐃΔⵠ[34] = 1;
  var ux = {
    ⵠⵠⵠᐃⵠΔΔ: {
      ⵠᐃⵠⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        d1: [90391, 300, Bs],
        d0: [90086, 300, false],
        d2: [90684, 300, na]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ΔⲆⵠⵠⵠⲆⲆ: {
      ⵠᐃⵠⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        p0: [89303, 300, false],
        p2: [89815, 300, os],
        p1: [89549, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ⲆⵠⵠΔⵠⵠⵠ: {
      ⵠᐃⵠⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        w2: [88751, 300, Le],
        w1: [88473, 300, os],
        w0: [88195, 300, sn],
        w3: [89025, 300, ft]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ᐃⵠᐃⲆᐃⵠⵠ: {
      ⵠᐃⵠⵠⲆ: null,
      path: ["audio/ambience.mp3"],
      Ⲇⵠ: {
        ΔΔᐃⲆΔᐃΔ: [19882, 8301, fn],
        ᐃⲆⲆⲆⵠⵠΔ: [31658, 813, true],
        ⵠⲆⵠⲆⲆⵠᐃ: [32604, 21890, true],
        ⲆⵠΔΔΔⲆᐃ: [3100, 8800, true],
        ⵠⵠⵠᐃΔ: [91431, 400, Qg],
        ⵠⵠⵠⵠΔⵠⲆ: [66961, 21223, true],
        ⵠΔⵠⲆⲆⲆⵠ: [66014, 925, true],
        ⵠᐃᐃᐃⲆ: [28380, 1797, true],
        ᐃⲆⵠⲆΔⲆⲆ: [92249, 500, false],
        ᐃⲆᐃΔⲆ: [12356, 6965, true],
        ⵠⲆΔΔⵠΔΔⵠΔ: [100, 2800, true],
        ΔΔⵠⲆⵠΔⲆ: [91022, 400, _r],
        ΔⲆᐃΔⵠⲆⲆ: [30562, 655, true],
        ΔΔᐃᐃⲆⲆⵠ: [66961, 21223, true],
        ΔⲆⵠⲆⵠᐃΔ: [54524, 11393, true]
      },
      sample: {
        ⵠⲆΔΔⵠΔΔⵠΔ: 1,
        ⲆⵠΔΔΔⲆᐃ: 1,
        ΔΔᐃⲆΔᐃΔ: 1,
        ⵠⲆⵠⲆⲆⵠᐃ: 1,
        ΔⲆⵠⲆⵠᐃΔ: 1,
        ⵠⵠⵠⵠΔⵠⲆ: 1,
        ΔΔᐃᐃⲆⲆⵠ: 1,
        ᐃⲆᐃΔⲆ: 8,
        ⵠᐃᐃᐃⲆ: 8,
        ΔⲆᐃΔⵠⲆⲆ: 8,
        ᐃⲆⲆⲆⵠⵠΔ: 8,
        ⵠΔⵠⲆⲆⲆⵠ: 8,
        ΔΔⵠⲆⵠΔⲆ: 6,
        ⵠⵠⵠᐃΔ: 6,
        ᐃⲆⵠⲆΔⲆⲆ: 6
      }
    }
  };
  function vx(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.ᐃΔΔᐃΔ = b;
    this.ⲆⲆΔⲆⲆᐃᐃ = b;
    this.ᐃΔᐃ = c;
    this.ⵠⵠⲆ = d;
    this.fade = e;
    this.ⵠΔΔᐃⵠᐃᐃ = f;
    this.ᐃᐃⲆΔⲆⵠⵠ = i;
    this.ΔⵠⵠΔ = a;
    this.ⵠⵠᐃⲆⲆⵠⵠ = j;
    this.source = k;
    this.source.ᐃΔᐃΔⲆⲆΔ = k.x + k.w;
    this.source.ᐃⵠⵠᐃΔ = k.y + k.ⲆΔΔ;
    this.ⲆΔΔΔᐃⲆΔΔΔ = h;
    this.ᐃΔⵠⵠⵠᐃⵠ = g;
    this.ᐃΔᐃⲆⲆⲆⵠ = 0;
    this.ⵠΔⲆᐃᐃΔΔ = {
      ⵠΔᐃᐃ: 5,
      d: 5
    };
    this.ΔⵠΔᐃᐃ = function () {
      this.ᐃΔΔᐃΔ -= Ox;
      if (this.ᐃΔΔᐃΔ < 0) {
        this.ᐃΔΔᐃΔ = this.ⲆⲆΔⲆⲆᐃᐃ;
        var a = ux.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ.playing(this.ᐃΔᐃ);
        var b = ux.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ.playing(this.ⵠⵠⲆ);
        if (a && !b) {
          var c = this.ΔⵠⵠΔ.volume(this.ᐃΔᐃ) * ox;
          var d = (Math.random() * this.ᐃᐃⲆΔⲆⵠⵠ + this.ⵠΔΔᐃⵠᐃᐃ) * ox;
          this.ΔⵠⵠΔ.fade(c, d, this.fade, this.ᐃΔᐃ);
        } else if (!a && b) {
          c = this.ΔⵠⵠΔ.volume(this.ⵠⵠⲆ) * ox;
          d = ox * (Math.random() * this.ᐃᐃⲆΔⲆⵠⵠ + this.ⵠΔΔᐃⵠᐃᐃ);
          this.ΔⵠⵠΔ.fade(c, d, this.fade, this.ⵠⵠⲆ);
        }
      }
    };
    this.transition = function () {
      this.ᐃΔΔᐃΔ = this.ⲆⲆΔⲆⲆᐃᐃ;
      this.ⵠΔⲆᐃᐃΔΔ.d = this.ⵠΔⲆᐃᐃΔΔ.ⵠΔᐃᐃ;
      if (Fx.time) {
        this.ΔⵠⵠΔ.fade(0, ox * this.ⵠΔΔᐃⵠᐃᐃ, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ᐃΔᐃ);
        this.ΔⵠⵠΔ.play(this.ᐃΔᐃ);
        if (this.ΔⵠⵠΔ.playing(this.ⵠⵠⲆ)) {
          var a = this.ΔⵠⵠΔ.volume(this.ⵠⵠⲆ) * ox;
          this.ΔⵠⵠΔ.fade(a, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ⵠⵠⲆ);
        }
      } else {
        this.ΔⵠⵠΔ.fade(0, this.ⵠΔΔᐃⵠᐃᐃ * ox, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ⵠⵠⲆ);
        this.ΔⵠⵠΔ.play(this.ⵠⵠⲆ);
        if (this.ΔⵠⵠΔ.playing(this.ᐃΔᐃ)) {
          a = ox * this.ΔⵠⵠΔ.volume(this.ᐃΔᐃ);
          this.ΔⵠⵠΔ.fade(a, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ᐃΔᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ᐃΔᐃⲆⲆⲆⵠ) {
        if (ⵠᐃΔᐃ.ᐃΔⵠⵠⵠᐃⵠ(a, this.ⲆΔΔΔᐃⲆΔΔΔ)) {
          if (!Kx.transition && Fx.ΔᐃᐃⲆⵠ.now < 460000) {
            if (Fx.time) {
              if (!this.ΔⵠⵠΔ.playing(this.ᐃΔᐃ)) {
                this.ⵠΔⲆᐃᐃΔΔ.d -= Ox;
                if (this.ⵠΔⲆᐃᐃΔΔ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ΔⵠⵠΔ.playing(this.ⵠⵠⲆ)) {
              this.ⵠΔⲆᐃᐃΔΔ.d -= Ox;
              if (this.ⵠΔⲆᐃᐃΔΔ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ᐃΔᐃⲆⲆⲆⵠ = 0;
          if (this.ΔⵠⵠΔ.playing(this.ᐃΔᐃ)) {
            var b = ox * this.ΔⵠⵠΔ.volume(this.ᐃΔᐃ);
            this.ΔⵠⵠΔ.fade(b, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ᐃΔᐃ);
          }
          if (this.ΔⵠⵠΔ.playing(this.ⵠⵠⲆ)) {
            b = this.ΔⵠⵠΔ.volume(this.ⵠⵠⲆ) * ox;
            this.ΔⵠⵠΔ.fade(b, 0, this.ⵠⵠᐃⲆⲆⵠⵠ, this.ⵠⵠⲆ);
          }
        }
      } else if (ⵠᐃΔᐃ.ᐃΔⵠⵠⵠᐃⵠ(a, this.ᐃΔⵠⵠⵠᐃⵠ)) {
        this.ᐃΔᐃⲆⲆⲆⵠ = 1;
        if (!Kx.transition && Fx.ΔᐃᐃⲆⵠ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ᐃᐃⵠ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? Kx.ⵠⲆⵠᐃⵠⲆᐃ(this.source.x) : this.source.ᐃΔᐃΔⲆⲆΔ < a.x ? Kx.ⵠⲆⵠᐃⵠⲆᐃ(this.source.ᐃΔᐃΔⲆⲆΔ) : b.x;
      d = a.y < this.source.y ? Kx.ⲆᐃΔΔΔⵠᐃ(this.source.y) : this.source.ᐃⵠⵠᐃΔ < a.y ? Kx.ⲆᐃΔΔΔⵠᐃ(this.source.ᐃⵠⵠᐃΔ) : b.y;
      this.ΔⵠⵠΔ.pos(c, d, -0.5, this.ᐃΔᐃ);
      this.ΔⵠⵠΔ.pos(c, d, -0.5, this.ⵠⵠⲆ);
    };
  }
  function wx(a, b) {
    const c = ~(a & 31107) & (a | 31107);
    const d = ~(b & 43386) & (b | 43386);
    const e = Po(c, d, c);
    Co(d, c, d, c, d);
    return e ^ 6840;
  }
  ⵠⲆⵠⲆⲆ = {
    ⲆⵠⵠΔⲆΔⲆ: 0,
    ΔΔΔⲆΔᐃⲆ: 100,
    ⲆΔⲆⲆΔⲆᐃⲆᐃ: 0.2,
    ΔᐃᐃᐃΔΔΔΔⵠ: 0.2,
    ⵠⵠⵠⵠΔⲆᐃ: 100,
    ⵠΔⵠⲆΔᐃΔⲆᐃ: 0.2,
    ⲆⵠⵠΔᐃΔᐃΔⲆ: 0.4,
    ⵠΔⲆⲆⲆᐃⵠ: 3,
    ⵠⵠⲆⵠⵠⲆⲆ: 4,
    ᐃΔⲆᐃΔⲆⵠ: 2,
    ΔⵠⲆΔᐃᐃΔ: 300,
    ΔΔⵠΔⵠΔᐃ: 100,
    ⲆᐃᐃΔⵠ: 2,
    ⲆᐃΔΔᐃΔᐃ: 1
  };
  function xx(a, b, c) {
    this.ⲆΔΔᐃⵠⲆᐃ = a;
    this.c = 0;
    this.ΔⵠⵠΔ = b;
    this.ᐃⲆⲆᐃⲆ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ᐃⲆⲆᐃⲆ[this.c];
      this.ⲆΔΔᐃⵠⲆᐃ.ⲆⲆᐃΔΔΔⲆ(this.ΔⵠⵠΔ, a);
      this.ΔⵠⵠΔ.play(a);
    };
  }
  function yx(a) {
    this.ΔⲆⲆΔⲆΔᐃ = 1;
    this.ΔᐃⲆⵠ = 0;
    this.mode = -1;
    this.ⵠᐃᐃᐃⲆ = Kx.sample.ⵠᐃᐃᐃⲆ[a];
    this.ΔⲆᐃΔⵠⲆⲆ = Kx.sample.ΔⲆᐃΔⵠⲆⲆ[a];
    this.ᐃⲆⲆⲆⵠⵠΔ = Kx.sample.ᐃⲆⲆⲆⵠⵠΔ[a];
    this.ⵠΔⵠⲆⲆⲆⵠ = Kx.sample.ⵠΔⵠⲆⲆⲆⵠ[a];
    this.ⵠᐃⵠᐃΔᐃΔ = new xx(this, ux.ΔⲆⵠⵠⵠⲆⲆ.ⵠᐃⵠⵠⲆ, Kx.ⵠⵠᐃΔⵠ.ⵠᐃⵠᐃΔᐃΔ[a]);
    this.ᐃΔᐃᐃΔ = new xx(this, ux.ⲆⵠⵠΔⵠⵠⵠ.ⵠᐃⵠⵠⲆ, Kx.ⵠⵠᐃΔⵠ.ᐃΔᐃᐃΔ[a]);
    this.ΔΔᐃⲆᐃ = new xx(this, ux.ⵠⵠⵠᐃⵠΔΔ.ⵠᐃⵠⵠⲆ, Kx.ⵠⵠᐃΔⵠ.ΔΔᐃⲆᐃ[a]);
    this.ⵠᐃΔᐃᐃ = a;
    this.x = 0;
    this.y = 0;
    this.ⵠΔⲆᐃⵠ = 0;
    this.ᐃΔΔᐃΔ = ⵠⲆⵠⲆⲆ.ⲆᐃⵠⲆⵠⲆᐃⵠΔ;
    this.ⵠΔΔⲆ = {
      y: 0,
      x: 0
    };
    this.ⵠⵠⲆⵠΔ = ux.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ;
    this.ΔⵠΔᐃᐃᐃⲆΔΔ = function (a) {
      if (a === 1) {
        this.ⵠᐃⵠᐃΔᐃΔ.play();
      } else if (a === 2) {
        this.ᐃΔᐃᐃΔ.play();
      } else if (a === 3) {
        this.ΔΔᐃⲆᐃ.play();
      }
    };
    this.ⲆⵠⲆⲆⲆΔᐃ = function (a) {
      if (a.ΔⲆⲆᐃΔⵠΔ > 0) {
        return ⵠⲆⵠⲆⲆ.ⲆᐃᐃΔⵠ;
      } else if (a.ΔⲆⲆⵠⲆᐃⵠ > 0) {
        return ⵠⲆⵠⲆⲆ.ⲆᐃΔΔᐃΔᐃ;
      } else if (a.ⵠⲆⵠΔⵠ > 0 || a.ΔΔⲆΔᐃ > 0) {
        return ⵠⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⵠ;
      } else {
        return ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔⲆΔⲆ;
      }
    };
    this.ΔⲆᐃᐃⵠ = function (a) {
      this.ΔⲆⲆΔⲆΔᐃ = 0;
      this.ΔᐃⲆⵠ = a;
      var b = Fx.ΔⲆᐃᐃ[a];
      b.ⵠᐃΔᐃᐃ = this.ⵠᐃΔᐃᐃ;
      this.mode = this.ⲆⵠⲆⲆⲆΔᐃ(b);
      this.ⵠΔΔⲆ.x = b.x;
      this.ⵠΔΔⲆ.y = b.y;
    };
    this.ᐃⲆᐃΔⵠᐃⲆ = function () {
      this.ΔⲆⲆΔⲆΔᐃ = 1;
      this.mode = -1;
      this.ⵠⵠⲆⵠΔ.stop(this.ⵠᐃᐃᐃⲆ);
      this.ⵠⵠⲆⵠΔ.stop(this.ΔⲆᐃΔⵠⲆⲆ);
      this.ⵠⵠⲆⵠΔ.stop(this.ᐃⲆⲆⲆⵠⵠΔ);
      this.ⵠⵠⲆⵠΔ.stop(this.ⵠΔⵠⲆⲆⲆⵠ);
    };
    this.fade = function (a, b) {
      var c = this.ⵠⵠⲆⵠΔ.volume(a) * px;
      this.ⵠⵠⲆⵠΔ.fade(c, 0, b, a);
    };
    this.ⲆⲆᐃΔΔΔⲆ = function (a, b) {
      if (this.ⵠΔⲆᐃⵠ && this.ⵠᐃΔᐃᐃ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ΔⵠΔᐃᐃ = function (b, c, d, e, f, g, a) {
      this.ᐃΔΔᐃΔ = g;
      if (e && f === this.mode) {
        var i = px * this.ⵠⵠⲆⵠΔ.volume(b);
        if (this.ⵠΔⲆᐃⵠ) {
          var j = px * (d * Math.random() + c);
          this.ⵠⵠⲆⵠΔ.fade(i, j, a, b);
        } else {
          this.ⵠⵠⲆⵠΔ.fade(i, 0, a, b);
        }
      } else if (this.mode != f && this.ⵠΔⲆᐃⵠ) {
        this.ⵠⵠⲆⵠΔ.fade(0, (c + d) * px, a, b);
      } else if (this.ⵠΔⲆᐃⵠ) {
        i = this.ⵠⵠⲆⵠΔ.volume(b) * px;
        j = (Math.random() * d + c) * px;
        this.ⵠⵠⲆⵠΔ.fade(i, j, a, b);
      }
      this.ⲆⲆᐃΔΔΔⲆ(this.ⵠⵠⲆⵠΔ, b);
      this.ⵠⵠⲆⵠΔ.play(b);
    };
    this.ᐃᐃⵠ = function () {
      var a = Fx.ΔⲆᐃᐃ[this.ΔᐃⲆⵠ];
      this.ᐃΔΔᐃΔ -= Ox;
      if (this.ᐃΔΔᐃΔ <= 0) {
        var b = 0;
        if (this.ⵠΔΔⲆ.x != a.x || this.ⵠΔΔⲆ.y != a.y) {
          if (!this.ⵠΔⲆᐃⵠ) {
            b = 1;
            this.ⵠΔⲆᐃⵠ = 1;
          }
          this.x = Kx.ΔΔⵠⵠⲆⵠⲆ(a.x, ⵠⲆⵠⲆⲆ.ᐃΔⲆᐃΔⲆⵠ);
          this.y = Kx.ᐃᐃᐃⲆⵠΔΔ(a.y, ⵠⲆⵠⲆⲆ.ᐃΔⲆᐃΔⲆⵠ);
        } else if (this.ⵠΔⲆᐃⵠ) {
          b = 1;
          this.ⵠΔⲆᐃⵠ = 0;
        }
        this.ⵠΔΔⲆ.x = a.x;
        this.ⵠΔΔⲆ.y = a.y;
        ΔΔᐃⲆ = this.ⲆⵠⲆⲆⲆΔᐃ(a);
        if (this.mode != ΔΔᐃⲆ) {
          if (ⵠⲆⵠⲆⲆ.ⲆᐃΔΔᐃΔᐃ === this.mode) {
            this.fade(this.ⵠᐃᐃᐃⲆ, ⵠⲆⵠⲆⲆ.ΔⵠⲆΔᐃᐃΔ);
          } else if (this.mode === ⵠⲆⵠⲆⲆ.ⲆᐃᐃΔⵠ) {
            this.fade(this.ΔⲆᐃΔⵠⲆⲆ, ⵠⲆⵠⲆⲆ.ΔΔΔⲆΔᐃⲆ);
          } else if (this.mode === ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔⲆΔⲆ) {
            this.fade(this.ᐃⲆⲆⲆⵠⵠΔ, ⵠⲆⵠⲆⲆ.ΔΔⵠΔⵠΔᐃ);
          } else if (this.mode === ⵠⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⵠ) {
            this.fade(this.ⵠΔⵠⲆⲆⲆⵠ, ⵠⲆⵠⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ);
          }
        }
        if (ⵠⲆⵠⲆⲆ.ⲆᐃΔΔᐃΔᐃ === ΔΔᐃⲆ) {
          this.ΔⵠΔᐃᐃ(this.ⵠᐃᐃᐃⲆ, 0.08, 0.3, b, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔᐃΔᐃΔⲆ, ⵠⲆⵠⲆⲆ.ΔⵠⲆΔᐃᐃΔ);
        } else if (ⵠⲆⵠⲆⲆ.ⲆᐃᐃΔⵠ === ΔΔᐃⲆ) {
          this.ΔⵠΔᐃᐃ(this.ΔⲆᐃΔⵠⲆⲆ, 0.2, 0.3, b, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ΔᐃᐃᐃΔΔΔΔⵠ, ⵠⲆⵠⲆⲆ.ΔΔΔⲆΔᐃⲆ);
        } else if (ⵠⲆⵠⲆⲆ.ⲆⵠⵠΔⲆΔⲆ === ΔΔᐃⲆ) {
          this.ΔⵠΔᐃᐃ(this.ᐃⲆⲆⲆⵠⵠΔ, 0.3, 0.6, b, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ⲆΔⲆⲆΔⲆᐃⲆᐃ, ⵠⲆⵠⲆⲆ.ΔΔⵠΔⵠΔᐃ);
        } else if (ΔΔᐃⲆ === ⵠⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⵠ) {
          this.ΔⵠΔᐃᐃ(this.ⵠΔⵠⲆⲆⲆⵠ, 0.1, 0.25, b, ΔΔᐃⲆ, ⵠⲆⵠⲆⲆ.ⵠΔⵠⲆΔᐃΔⲆᐃ, ⵠⲆⵠⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ);
        }
        this.mode = ΔΔᐃⲆ;
      }
    };
    this.check = function () {
      var a = Fx.ΔⲆᐃᐃ[this.ΔᐃⲆⵠ];
      return !!a || (this.ᐃⲆᐃΔⵠᐃⲆ(a), false);
    };
  }
  function zx(b, c, d, e) {
    const f = ((58687 + b) * 1664525 + 1013904223) % 4294967296;
    const g = ((32375 + c) * 1664525 + 1013904223) % 4294967296;
    const a = ~(d & 20247) & (d | 20247);
    const h = ((34639 + e) * 22695477 + 1) % 4294967296;
    return ((51077 + (Fk(f, g, a, h, f, g) ^ qb(a, h, f))) * 2147483629 + 2147483587) % 2147483647;
  }
  function Ax(b, c, d) {
    const e = ((37859 + b) * 22695477 + 1) % 4294967296;
    const f = (c | 4439) & ~(c & 4439);
    const g = ((28320 + d) * 214013 + 2531011) % 4294967296;
    const a = zb(e, f, g, e);
    qb(f, g, e);
    return a ^ 501;
  }
  ΔΔΔΔⵠᐃΔ = 0;
  function Bx(a) {
    return jg.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔᐃⲆ: 6209084,
      ΔⵠΔΔⵠ: 6389427,
      ᐃΔ: 4009539,
      ᐃᐃⲆΔⵠⵠΔ: 6124643
    };
  })();
  document.getElementById("version").innerHTML = 52 + ".3";
  var Cx = [];
  var Dx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = xs.ⵠᐃΔⲆΔ[Dx.time];
  Dx.items.push(new Ww(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  Dx.items.push(new Ww(100, 0, 0, 0, 0, 0, 0, 5));
  Dx.items.push(new Ww(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  Dx.items.push(new Ww(100, 0, 0, 0, 0, 0, 0, 5));
  var Ex;
  var Fx;
  var Gx;
  var Hx;
  var Ix = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Zb[324] + "]";
      }
    }
    this.ΔΔⵠᐃ = null;
    this.ΔΔᐃⵠⲆ = 0;
    this.ᐃⲆΔⲆⵠ = [];
    this.ᐃᐃΔⵠΔⲆⵠ = {};
    this.ΔᐃⵠⵠⲆᐃΔ = {};
    this.ΔⲆᐃⵠⲆ = [[], [], [], [], [], [], [], [], []];
    this.ΔⵠⲆᐃⵠᐃⲆ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⵠⵠᐃΔⲆ = 0;
    this.ⲆΔΔⲆᐃⲆᐃ = 0;
    this.ⵠⲆⵠΔΔⵠⵠ = function (c) {
      if (Wf !== undefined) {
        b.ᐃⲆΔⲆⵠ.push({
          a: Wf.name,
          gm: Wf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(Hf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ᐃⲆΔⲆⵠ = [];
            b.ΔᐃⵠⵠⲆᐃΔ = {};
            for (let a in $f.ⲆⵠΔⲆⲆⲆᐃ) {
              const c = $f.ⲆⵠΔⲆⲆⲆᐃ[a];
              b.ᐃⲆΔⲆⵠ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 1;
            var g = 4;
            for (let c = 0; d.length > c; c++) {
              const e = d[c];
              const a = e.n;
              const i = e.l;
              const j = e.p;
              const h = [];
              b.ᐃᐃΔⵠΔⲆⵠ[a] = h;
              const k = [];
              for (let b = 0; j.length > b; b++) {
                const c = a + j[b][0];
                k.push(c);
                h.push(c);
              }
              for (let c = 0; c < i.length; c++) {
                const d = i[c];
                let e;
                let a = $f.ⲆⵠΔⲆⲆⲆᐃ[d[2]];
                let j = a + d[f];
                e = a in b.ΔᐃⵠⵠⲆᐃΔ ? ++b.ΔᐃⵠⵠⲆᐃΔ[a] : b.ΔᐃⵠⵠⲆᐃΔ[a] = 1;
                if (j in b.ΔᐃⵠⵠⲆᐃΔ) {
                  ᐃⵠᐃⲆᐃⲆΔ = ++b.ΔᐃⵠⵠⲆᐃΔ[j];
                } else {
                  ᐃⵠᐃⲆᐃⲆΔ = b.ΔᐃⵠⵠⲆᐃΔ[j] = 1;
                }
                b.ᐃⲆΔⲆⵠ.push({
                  name: d[g],
                  a: $f.ΔⲆⲆΔⲆΔⲆⵠᐃ[d[f]] + " " + ᐃⵠᐃⲆᐃⲆΔ,
                  r: d[f],
                  gm: $f.ⲆⵠΔⲆⲆⲆᐃ[d[2]],
                  idx: e,
                  m: 100,
                  nu: d[3],
                  id: d[f] + d[0],
                  p: k
                });
              }
            }
            const e = [];
            const a = [];
            const i = [];
            for (let c = 0; c < b.ᐃⲆΔⲆⵠ.length; c++) {
              const d = b.ᐃⲆΔⲆⵠ[c];
              if (!d.auto) {
                if ($f.ⲆⵠΔⲆⲆⲆᐃ[6] === d.gm) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    e.push(d);
                  } else {
                    a.push(d);
                  }
                  i.push(c);
                }
              }
            }
            const j = [];
            j.push(...a.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            j.push(...e.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; a < i.length; a++) {
              const c = i[a];
              const d = j[a];
              d.idx = a + 1;
              b.ᐃⲆΔⲆⵠ[c] = d;
            }
            c();
          });
        } else {
          jg.setTimeout(function () {
            b.ⵠⲆⵠΔΔⵠⵠ(c);
          }, 3000);
        }
      });
    };
    this.ⲆⵠⵠⵠⲆⵠᐃⲆⲆ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(Wr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⵠⵠᐃᐃᐃⵠⵠ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Ix.ΔⵠⲆᐃⵠᐃⲆ[Ix.ⵠⵠᐃΔⲆ] === -1) {
        Ix.ΔⵠⲆᐃⵠᐃⲆ[Ix.ⵠⵠᐃΔⲆ] = e.selectedIndex = Ix.ⲆⵠⵠⵠⲆⵠᐃⲆⲆ(b);
      } else {
        e.selectedIndex = Ix.ΔⵠⲆᐃⵠᐃⲆ[Ix.ⵠⵠᐃΔⲆ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Zb[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Zb[323] + " (" + this.ᐃⵠⵠᐃᐃⲆⵠ + ") " + Zb[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Zb[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = Ix.ΔⲆᐃⵠⲆ[Ix.ⵠⵠᐃΔⲆ], e = 0; d.length > e; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Ix.ΔⵠⲆᐃⵠᐃⲆ[Ix.ⵠⵠᐃΔⲆ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ᐃⵠⵠᐃᐃⲆⵠ = 0;
    this.ᐃⵠΔⲆⵠⲆᐃᐃᐃ = function () {
      this.ᐃⵠⵠᐃᐃⲆⵠ = 0;
      for (var a = 0; Ix.ᐃⲆΔⲆⵠ.length > a; a++) {
        if (this.ᐃⲆΔⲆⵠ[a].gm == "experimental") {
          this.ΔⲆᐃⵠⲆ[7].push(this.ᐃⲆΔⲆⵠ[a]);
        } else if (this.ᐃⲆΔⲆⵠ[a].gm == "zombies") {
          this.ΔⲆᐃⵠⲆ[2].push(this.ᐃⲆΔⲆⵠ[a]);
        } else if (this.ᐃⲆΔⲆⵠ[a].gm == "community") {
          this.ΔⲆᐃⵠⲆ[6].push(this.ᐃⲆΔⲆⵠ[a]);
        } else if (this.ᐃⲆΔⲆⵠ[a].gm == "forest") {
          this.ΔⲆᐃⵠⲆ[4].push(this.ᐃⲆΔⲆⵠ[a]);
        } else if (this.ᐃⲆΔⲆⵠ[a].gm == "battle-royale") {
          this.ΔⲆᐃⵠⲆ[5].push(this.ᐃⲆΔⲆⵠ[a]);
        } else if (this.ᐃⲆΔⲆⵠ[a].gm == "vampires") {
          this.ΔⲆᐃⵠⲆ[3].push(this.ᐃⲆΔⲆⵠ[a]);
        } else {
          this.ΔⲆᐃⵠⲆ[0].push(this.ᐃⲆΔⲆⵠ[a]);
        }
        this.ᐃⵠⵠᐃᐃⲆⵠ += this.ᐃⲆΔⲆⵠ[a].nu;
      }
      for (a = 0; this.ΔⲆᐃⵠⲆ.length > a; a++) {
        if (this.ΔⲆᐃⵠⲆ[a].length === 0) {
          this.ΔⲆᐃⵠⲆ[a].push({
            a: Zb[327],
            ⲆΔⲆⵠⵠᐃⵠΔⵠ: 0,
            Δᐃ: "127.0.0.1",
            ΔⵠΔ: 80
          });
        }
      }
      this.ⵠⵠᐃᐃᐃⵠⵠ(this.ΔⲆᐃⵠⲆ[0]);
      this.ⲆⵠⲆᐃⵠ = function (a) {
        Ix.ⵠⵠᐃΔⲆ = a;
        Ix.ⵠⵠᐃᐃᐃⵠⵠ(Ix.ΔⲆᐃⵠⲆ[Ix.ⵠⵠᐃΔⲆ]);
        Ix.ⵠⵠᐃᐃᐃⵠⵠ(Ix.ΔⲆᐃⵠⲆ[Ix.ⵠⵠᐃΔⲆ]);
        document.getElementById("servselect").selectedIndex = Ix.ⵠⵠᐃΔⲆ;
      };
    };
    this.ᐃⵠΔᐃΔⲆⵠ = 0;
    this.ΔⲆᐃΔΔⲆⵠ = 0;
    this.ΔⵠᐃⲆⲆ = null;
    this.timeout = function () {
      b.ΔⲆᐃΔΔⲆⵠ++;
      b.ΔΔⵠᐃ.close();
      if (b.ΔⲆᐃΔΔⲆⵠ > 3) {
        Rx = 1;
        Ex.ⵠΔⵠⲆⲆⵠᐃᐃᐃ = Vf.ⲆᐃᐃᐃⲆⲆⲆⲆⵠ;
        b.Ⲇᐃⵠⵠᐃ(Zb[300]);
        Ex.waiting = sn;
        if (Gx.reconnect.enabled) {
          Jx.ΔⲆⵠᐃΔ(Ex.ⵠⲆᐃᐃΔ);
        }
      } else if ($g === Gx.ΔΔⵠᐃⵠⵠᐃ || Mh === Gx.Δᐃᐃⵠⵠⵠᐃ || Gx.ⵠⵠⵠΔᐃΔⲆ === undefined || hg === Gx.ⵠⲆΔⲆⲆⵠⵠ) {
        Ex.ⲆⵠΔᐃΔΔⵠ(function () {
          b.ᐃⲆⵠΔΔⲆⲆ();
        }, 1);
      } else {
        b.ᐃⲆⵠΔΔⲆⲆ();
      }
    };
    this.ᐃⵠⲆⵠΔⵠⵠ = function (a) {
      if (this.ΔΔᐃⵠⲆ == this.ΔΔⵠᐃ.ΔΔᐃⵠⲆ) {
        this.ΔΔᐃⵠⲆ++;
        this.Ⲇᐃⵠⵠᐃ(Zb[301] + a);
        Jx.ΔⲆⵠᐃΔ(Ex.ⵠⲆᐃᐃΔ);
      }
    };
    this.ⵠⵠⵠΔⵠⵠᐃⵠⲆ = function () {
      this.Ⲇᐃⵠⵠᐃ("You speak too much");
    };
    this.ᐃⵠΔΔᐃᐃⲆⵠΔ = function () {
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ(Zb[302]);
      Ex.waiting = Wh;
    };
    this.ΔΔᐃᐃⲆΔΔⵠⵠ = function () {
      Gx.ⵠΔⲆΔ.open = qa;
    };
    this.ΔᐃⵠΔⵠⲆΔΔⵠ = function () {
      Jx.ᐃⲆΔΔΔΔⵠ = 0;
    };
    this.ᐃΔⲆΔᐃⲆⵠᐃⲆ = function () {
      Jx.ᐃᐃⵠᐃΔⵠᐃ = 0;
    };
    this.ⲆΔⲆᐃⲆΔⵠⲆⲆ = function (a) {
      Gx.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ = a;
      if (Fx.ᐃⲆⲆⵠⵠ > -300) {
        if (a === 0) {
          this.Ⲇᐃⵠⵠᐃ(Zb[340]);
        } else {
          this.Ⲇᐃⵠⵠᐃ(Zb[341]);
        }
      }
    };
    this.ⵠⲆⲆᐃΔ = function (a) {
      Gx.ⵠⲆⲆᐃΔ = a;
    };
    this.ⲆⲆᐃᐃⲆⲆⵠⵠΔ = function (a) {
      Gx.ⲆΔᐃⲆⵠᐃᐃ = a;
    };
    this.ⲆΔᐃⲆⵠᐃᐃ = function (a) {
      Gx.ⵠⲆᐃⵠΔ.ΔⵠⲆⲆⵠ = a;
      if (Fx.ⵠⲆⵠΔⵠ > -300) {
        if (a === 0) {
          this.Ⲇᐃⵠⵠᐃ(Zb[342]);
        } else {
          this.Ⲇᐃⵠⵠᐃ(Zb[343]);
        }
      }
    };
    this.ⲆΔⲆᐃᐃᐃⲆᐃΔ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ΔⵠᐃⵠⵠⵠⵠᐃⲆ = function () {
      Jx.ⵠΔΔᐃⵠᐃΔ = 0;
    };
    this.ᐃⲆⲆⵠᐃᐃᐃⲆᐃ = function () {
      Jx.ⵠᐃⵠⲆⲆᐃⲆ = 0;
    };
    this.ΔⵠⲆⵠΔᐃⵠΔᐃ = function () {
      Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ = [];
      Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ = [];
      Gx.ᐃᐃⲆΔ.id = -1;
      Gx.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.stop();
      Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ = [];
      Gx.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ = false;
      Gx.ⲆΔᐃⵠ.ⵠⲆⲆⵠⵠⵠᐃᐃΔ = false;
      Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
      Gx.ⲆΔᐃⵠ.id = -1;
      Gx.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ = false;
      Gx.ⲆΔᐃⵠ.ᐃᐃⲆⵠⵠ = false;
      Gx.ⲆΔᐃⵠ.ᐃⲆᐃΔⲆ = false;
      Gx.ⲆΔᐃⵠ.ⵠᐃⲆΔⵠΔⲆ = false;
      Gx.ⲆΔᐃⵠ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 1, 0, 1, 1);
    };
    this.ⵠⵠΔΔΔΔⲆⵠᐃ = function () {
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ();
      Ex.waiting = false;
    };
    this.ΔΔⵠᐃᐃΔΔ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⵠᐃΔᐃ.ⲆΔᐃⵠⲆⵠΔ(a[b]);
        }
      }
      Gx.ⵠΔΔⵠⵠ.ΔⲆⲆᐃΔ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.Ⲇᐃⵠⵠᐃ(a);
    };
    this.ᐃΔΔⲆᐃⲆⲆΔᐃ = function () {
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ(Zb[339]);
      Ex.waiting = Ja;
    };
    this.ⵠᐃⲆΔⵠᐃΔⵠΔ = function () {
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ(Zb[338]);
      Ex.waiting = na;
    };
    this.ΔΔⵠΔⵠΔⲆᐃᐃ = function () {
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ(Zb[304]);
      Ex.waiting = qe;
    };
    this.ΔⵠⵠⲆⵠΔⵠΔΔ = function () {
      Gx.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, 0);
      Jx.ⲆⵠⵠⲆᐃᐃⲆ();
    };
    this.ᐃᐃᐃΔⵠΔΔΔⲆ = function (a) {
      var b = a[1];
      var c = Fx.ⵠⲆΔᐃ[b];
      c.ⵠⲆΔΔ = a[2];
      c.ᐃᐃⲆΔⵠ = a[3];
      c.ΔⲆᐃᐃΔⵠⲆ = a[4];
      c.ⲆΔⵠΔΔ = a[5];
      c.ⵠⵠΔⲆⲆ = a[6];
      c.Δᐃⵠⵠᐃ = a[7];
      c.level = a[8];
      var d = Fx.ΔⲆᐃᐃ[b * Fx.ⵠⵠⵠⲆΔⵠΔ];
      if (d) {
        d.ⵠⲆΔΔ = a[2];
        d.ᐃᐃⲆΔⵠ = a[3];
        d.ΔⲆᐃᐃΔⵠⲆ = a[4];
        d.ⲆΔⵠΔΔ = a[5];
      }
    };
    this.ⵠᐃΔΔⲆᐃΔᐃΔ = function (a) {
      if (a === 29) {
        Gx.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, 0);
        Jx.ⲆⵠⵠⲆᐃᐃⲆ();
      } else {
        this.ᐃⲆⵠⵠΔⲆⵠ([0, a, 1]);
      }
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ();
    };
    this.ΔΔᐃⲆⵠᐃᐃᐃⲆ = function (a) {
      Gx.ᐃⲆΔΔᐃ.ᐃΔΔᐃΔ = 0;
      Gx.ⲆΔᐃⵠ.ᐃⲆⲆⲆΔⵠⲆⲆⵠ(a);
    };
    this.ΔᐃΔⵠⵠⵠᐃⲆΔ = function (a) {
      for (var b = At[a].r, c = 0; c < b.length; c++) {
        if (Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length < Gx.ᐃᐃⲆΔ.max || Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ᐃⲆⵠⵠΔⲆⵠ([0, b[c][0], d]);
        }
      }
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ();
    };
    this.ΔᐃᐃⵠΔΔΔⵠⲆ = function (a) {
      Gx.ᐃⲆΔΔᐃ.ᐃΔΔᐃΔ = 0;
      Gx.ⲆΔᐃⵠ.ΔᐃⵠᐃᐃΔⲆᐃⵠ(a);
    };
    this.Ⲇᐃⵠⵠᐃ = function (a) {
      if (Gx.alert.text) {
        if (Gx.alert.text !== a && a !== Gx.alert.list[Gx.alert.list.length - 1]) {
          Gx.alert.list.push(a);
        }
      } else {
        Gx.alert.text = a;
      }
    };
    this.ⲆⲆⲆⵠΔΔᐃⵠᐃ = function () {
      this.Ⲇᐃⵠⵠᐃ(Zb[305]);
    };
    this.ΔᐃⲆΔⲆᐃⲆᐃᐃ = function () {
      var a;
      a = Gx.ⵠⵠⲆ == 0 ? Zb[306] : Zb[307] + (Gx.ⵠⵠⲆ + 1) + Zb[308];
      this.Ⲇᐃⵠⵠᐃ(a);
      Gx.ⵠⵠⲆ++;
    };
    this.ᐃⵠᐃⵠⵠⵠΔⵠΔ = function () {
      clearTimeout(b.ΔⵠᐃⲆⲆ);
      Gx.reconnect.enabled = false;
      Gx.ⲆᐃᐃⲆⲆ = ib;
      this.Ⲇᐃⵠⵠᐃ(Zb[309]);
      Jx.ΔⲆⵠᐃΔ(Ex.ⵠⲆᐃᐃΔ);
      this.ΔΔⵠᐃ.close();
    };
    this.ⵠⲆⲆΔⵠᐃΔⲆⵠ = function () {
      Rx = 1;
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ(Zb[310]);
      Ex.waiting = false;
    };
    this.ⵠⲆΔᐃΔⲆⲆΔⲆ = function () {
      Rx = 1;
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      this.Ⲇᐃⵠⵠᐃ(Zb[311]);
      Ex.waiting = Yi;
    };
    this.ⲆΔΔᐃⲆⵠΔᐃⲆ = function (a) {
      var b = a[1];
      var c = Fx.ⵠⲆΔᐃ;
      c[b].ⲆⵠΔⵠΔ = a[2];
      c[b].ⵠⲆΔΔ = a[3];
      c[b].ᐃᐃⲆΔⵠ = a[4];
      c[b].ΔⲆᐃᐃΔⵠⲆ = a[5];
      c[b].ⲆΔⵠΔΔ = a[6];
      c[b].ⵠⵠΔⲆⲆ = a[7];
      c[b].Δᐃⵠⵠᐃ = a[8];
      c[b].level = a[9];
      c[b].ᐃⲆᐃⵠⲆ = 0;
      c[b].ΔⵠΔⵠⵠΔⲆ = null;
      c[b].label = null;
      c[b].ⲆᐃⵠΔᐃⵠⲆ = null;
      c[b].ⲆᐃᐃⲆⲆ = f;
      if (Lf === 1) {
        c[b].ⲆⵠΔⵠΔ += "|" + b;
      }
    };
    this.ΔⵠΔⵠⵠⵠΔⲆΔ = function () {
      this.ΔΔⵠᐃ[jf](jq[lq].stringify([9]));
    };
    this.ⵠⵠΔΔΔⲆⲆⵠᐃ = function () {
      this.Ⲇᐃⵠⵠᐃ(Zb[312]);
    };
    this.ᐃⲆⵠⲆᐃⵠᐃ = function () {
      this.Ⲇᐃⵠⵠᐃ(Zb[313]);
    };
    this.ⵠⵠⲆΔᐃⲆᐃΔᐃ = function (a) {
      this.ΔΔⵠᐃ[jf](va[Ga].stringify([38, a]));
      Gx.ⵠΔⲆΔ.open = ib;
    };
    this.ᐃⲆⲆᐃⵠⲆⵠᐃΔ = function (a) {
      for (var b = Yf[a - 1].items, c = 0; b.length > c && Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length < Gx.ᐃᐃⲆΔ.max; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          Gx.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, 0);
        } else {
          this.ᐃⲆⵠⵠΔⲆⵠ([0, d, e]);
        }
      }
    };
    this.ᐃⲆⵠⵠΔⲆⵠ = function (b) {
      for (var c = b.length, d = Gx.ᐃᐃⲆΔ, e = 1; c > e; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; d.ⲆΔᐃⲆⵠ.length > h; h++) {
          if (f == d.ⲆΔᐃⲆⵠ[h].id) {
            d.ᐃΔΔᐃ[f] += g;
            break;
          }
        }
        if (d.ⲆΔᐃⲆⵠ.length == h) {
          d.ᐃΔΔᐃ[f] = g;
          d.ⲆΔᐃⲆⵠ.push(Jx.ᐃⲆᐃ[f]);
          Jx.ⲆⵠⵠⲆᐃᐃⲆ();
        }
      }
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ᐃⵠⲆᐃ = function (b, c, d, e, f, g, a) {
      Gx.ᐃⵠⲆᐃ.ⲆⲆⲆΔ = b / 100;
      Gx.ᐃⵠⲆᐃ.ⲆΔΔ = c / 100;
      Gx.ᐃⵠⲆᐃ.c = d / 100;
      Gx.ᐃⵠⲆᐃ.ΔⲆᐃ = e / 100;
      Gx.ᐃⵠⲆᐃ.ᐃΔⲆ = f / 100;
      Gx.ᐃⵠⲆᐃ.ⲆΔⵠᐃⵠⲆᐃ = g / 100;
      Gx.ⵠⲆⲆᐃΔ = a;
    };
    this.ᐃⵠᐃⲆⲆᐃΔΔΔ = function (a) {
      Jx.ⵠⲆⲆᐃ.modify(a, 2);
    };
    this.ⵠᐃᐃⵠᐃΔⲆⲆΔ = function (a) {
      Jx.ⵠⲆⲆᐃ.modify(a, 0);
    };
    this.claimed = function (a) {
      Jx.ⵠⲆⲆᐃ.modify(a, 3);
    };
    this.ᐃⵠⵠⲆⵠⵠⲆΔⵠ = function (a, b) {
      Gx.ᐃⵠⲆᐃ.ⲆⲆⲆΔ = a / 100;
      Gx.ⵠⲆⲆᐃΔ = b;
    };
    this.ⵠⵠⵠⵠᐃΔᐃΔⲆ = function (a) {
      Gx.ᐃⵠⲆᐃ.ΔⲆᐃ = a / 100;
    };
    this.ⲆΔⵠΔΔⲆᐃᐃᐃ = function (a) {
      Gx.ᐃⵠⲆᐃ.ⲆΔΔ = a / 100;
    };
    this.ΔⵠΔⲆᐃΔΔⲆᐃ = function (a) {
      Gx.ᐃⵠⲆᐃ.ⲆΔⵠᐃⵠⲆᐃ = a / 100;
    };
    this.ᐃᐃΔᐃⵠⲆⲆⲆᐃ = function (a) {
      Gx.ᐃⵠⲆᐃ.c = a / 100;
    };
    this.ⵠⲆⵠᐃⵠⲆᐃⵠΔ = function (a) {
      Fx.time = a;
      Fx.transition = Dh;
      Kx.transition = 1;
    };
    this.ᐃⵠᐃΔᐃⵠⵠⵠᐃ = function () {
      document.getElementById("game_body").style.backgroundColor = xs.ⵠᐃΔⲆΔ[Fx.time];
    };
    this.ⵠΔⲆᐃⲆⲆᐃⲆᐃ = function (a) {
      if (Fx.mode == 1 && Fx.ⵠⲆΔᐃ[a].ⲆⵠΔⵠΔ !== "spectator") {
        this.Ⲇᐃⵠⵠᐃ(Fx.ⵠⲆΔᐃ[a].ⲆⵠΔⵠΔ + Zb[314]);
      }
      Fx.ⵠⲆΔᐃ[a].ⲆᐃᐃⲆⲆ = qe;
    };
    this.ⲆᐃᐃⵠⲆⲆⵠⲆⵠ = function (a) {
      var b = new Uint16Array(a);
      ΔⵠⵠΔ.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ(b[1], b[2]);
    };
    this.ΔΔᐃⲆⲆⲆⵠΔᐃ = function (a) {
      var b = new Uint16Array(a);
      Gx.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ(b[1], b[2]);
    };
    this.ⲆⵠᐃⵠΔⵠⲆᐃⵠ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
        var k = Fx.ΔⲆᐃᐃ[i * Fx.ⵠⵠⵠⲆΔⵠΔ + g];
        if (k && k.ᐃⲆⵠ) {
          if (Kx.loaded && Kx.ⵠⲆᐃᐃΔ) {
            Kx.ᐃⲆⵠ(b[5 + f * 4] & 1, ᐃΔᐃΔⵠ[k.type], k.x, k.y);
          }
          k.ᐃⲆⵠ.angle = j;
          k.ᐃⲆⵠ.ᐃᐃⵠ = j;
        }
      }
    };
    this.ᐃⵠΔΔⲆΔΔᐃᐃ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
        var i;
        var j = e * 4;
        var k = c[1 + j];
        var m = c[2 + j];
        var p = (c[3 + j] >> 1) / 127 * Math.PI * 2;
        var q = c[4 + j];
        var t = Cx.Ⲇᐃⵠᐃ[m][k];
        switch (q) {
          case 0:
            (i = t.p[0][0]).angle = p;
            i.ᐃᐃⵠ = Ho;
            break;
          case 1:
            (i = t.s[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 2:
            (i = t.s[1][0]).angle = p;
            i.ᐃᐃⵠ = is;
            break;
          case 3:
            (i = t.s[2][0]).angle = p;
            i.ᐃᐃⵠ = tg;
            break;
          case 4:
            (i = t.t[0][0]).angle = p;
            i.ᐃᐃⵠ = kg;
            break;
          case 5:
            (i = t.t[1][0]).angle = p;
            i.ᐃᐃⵠ = $n;
            break;
          case 6:
            (i = t.t[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 7:
            (i = t.t[3][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 8:
            (i = t.t[4][0]).angle = p;
            i.ᐃᐃⵠ = kg;
            break;
          case 9:
            (i = t.t[5][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 10:
            (i = t.g[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 11:
            (i = t.g[1][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 12:
            (i = t.g[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 13:
            (i = t.d[0][0]).angle = p;
            i.ᐃᐃⵠ = f;
            break;
          case 14:
            (i = t.d[1][0]).angle = p;
            i.ᐃᐃⵠ = $n;
            break;
          case 15:
            (i = t.d[2][0]).angle = p;
            i.ᐃᐃⵠ = f;
            break;
          case 16:
            (i = t.b[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 17:
            (i = t.b[1][0]).angle = p;
            i.ᐃᐃⵠ = $n;
            break;
          case 18:
            (i = t.b[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 19:
            (i = t.b[3][0]).angle = p;
            i.ᐃᐃⵠ = nl;
            break;
          case 20:
            (i = t.f[0][0]).angle = p;
            i.ᐃᐃⵠ = tg;
            break;
          case 21:
            (i = t.f[1][0]).angle = p;
            i.ᐃᐃⵠ = Ha;
            break;
          case 22:
            (i = t.f[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 23:
            (i = t.sw[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 24:
            (i = t.sw[1][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 25:
            (i = t.sw[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 26:
            (i = t.gw[0][0]).angle = p;
            i.ᐃᐃⵠ = U;
            break;
          case 27:
            (i = t.gw[1][0]).angle = p;
            i.ᐃᐃⵠ = is;
            break;
          case 28:
            (i = t.gw[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 29:
            (i = t.dw[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 30:
            (i = t.dw[1][0]).angle = p;
            i.ᐃᐃⵠ = $n;
            break;
          case 31:
            (i = t.dw[2][0]).angle = p;
            i.ᐃᐃⵠ = is;
            break;
          case 32:
            (i = t.a[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 33:
            (i = t.a[1][0]).angle = p;
            i.ᐃᐃⵠ = $n;
            break;
          case 34:
            (i = t.a[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 35:
            (i = t.cs[0][0]).angle = p;
            i.ᐃᐃⵠ = Qk;
            break;
          case 36:
            (i = t.cs[1][0]).angle = p;
            i.ᐃᐃⵠ = fn;
            break;
          case 37:
            (i = t.cs[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 38:
            (i = t.cs[3][0]).angle = p;
            i.ᐃᐃⵠ = Qk;
            break;
          case 40:
            (i = t.plm[0][0]).angle = p;
            i.ᐃᐃⵠ = $n;
            break;
          case 41:
            (i = t.plm[1][0]).angle = p;
            i.ᐃᐃⵠ = Rr;
            break;
          case 42:
            (i = t.plm[2][0]).angle = p;
            i.ᐃᐃⵠ = Qk;
            break;
          case 50:
            (i = t.re[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 51:
            (i = t.re[1][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 52:
            (i = t.re[2][0]).angle = p;
            i.ᐃᐃⵠ = Ha;
            break;
          case 55:
            (i = t.c[0][0]).angle = p;
            i.ᐃᐃⵠ = Ej;
            break;
          case 56:
            (i = t.m[0][0]).angle = p;
            i.ᐃᐃⵠ = true;
            break;
          case 57:
            (i = t.m[1][0]).angle = p;
            i.ᐃᐃⵠ = Rr;
            break;
          case 58:
            (i = t.m[2][0]).angle = p;
            i.ᐃᐃⵠ = true;
        }
        if (Kx.loaded && Kx.ⵠⲆᐃᐃΔ && i) {
          Kx.ᐃⲆⵠ(c[3 + j] & 1, ⲆᐃΔΔ[q], i.x, i.y);
        }
      }
    };
    this.ⵠΔᐃᐃᐃ = function () {
      this.ΔΔⵠᐃ[jf](ia[Xo].stringify([35, Gx.ⵠΔᐃᐃᐃ.ΔᐃᐃⲆ, Gx.ⵠΔᐃᐃᐃ.ΔᐃⲆΔΔ]));
    };
    this.ⲆΔᐃⲆⲆΔΔⲆⲆ = function (a, b) {
      this.ΔΔⵠᐃ[jf](ia[ca].stringify([30, b, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ΔᐃⵠΔⵠᐃⲆ = function (a, b, c) {
      if (b) {
        this.ΔΔⵠᐃ[jf](ia[ca].stringify([14, b, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
      } else {
        this.ΔΔⵠᐃ[jf](ia[ra].stringify([25, c, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
      }
    };
    this.ΔΔΔⲆⵠΔᐃΔᐃ = function (a) {
      this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([13, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ⵠΔⲆⲆⵠᐃⲆΔᐃ = function (a) {
      this.ΔΔⵠᐃ[jf](Ba[Ya].stringify([32, a]));
    };
    this.ᐃΔⲆΔⵠⲆᐃΔⵠ = function (a) {
      this.ΔΔⵠᐃ[jf](Aa[Xo].stringify([29, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ΔᐃᐃⵠⲆᐃᐃΔⲆ = function (a, b) {
      this.ΔΔⵠᐃ[jf](va[Ia].stringify([27, b, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ, a.type]));
    };
    this.ⵠⲆΔⲆⲆⲆᐃⵠΔ = function (a, b) {
      this.ΔΔⵠᐃ[jf](va[Ia].stringify([7, b, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ΔⵠⵠⵠΔΔᐃⵠᐃ = function (a, b, c) {
      this.ΔΔⵠᐃ[jf](Aa[ca].stringify([1, b, c, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ⵠⲆᐃΔΔⲆΔ = function (a) {
      this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([37, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ, a.type]));
    };
    this.ⵠᐃᐃⲆⵠΔᐃⲆΔ = function (a) {
      this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([4, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ΔⲆⵠᐃⵠⵠⲆⵠⵠ = function (a) {
      this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([8, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ΔⵠᐃᐃⲆⵠᐃⲆⲆ = function (a) {
      this.ΔΔⵠᐃ[jf](ja[Qa].stringify([20, a.ΔᐃᐃⲆ, a.ΔᐃⲆΔΔ]));
    };
    this.ᐃᐃⵠΔⵠⵠᐃᐃⵠ = function (a) {
      this.ΔΔⵠᐃ[jf](Oa[Ga].stringify([3, a.ΔᐃⲆΔΔ]));
    };
    this.ⲆΔⲆΔΔⲆᐃ = function (a) {
      b.ΔΔⵠᐃ[jf](vq[Ya].stringify([23, Gx.ᐃⲆⲆΔⲆ.id, Gx.ΔΔΔᐃΔ[a]]));
    };
    this.ⵠᐃⲆⲆΔⵠᐃⵠⲆ = function () {
      b.ΔΔⵠᐃ[jf](Dq[Aq].stringify([17, Gx.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ, Gx.ᐃⲆⲆΔⲆ.id]));
    };
    this.ᐃⵠΔⵠΔΔⲆ = function () {
      b.ΔΔⵠᐃ[jf](Gq[Fq].stringify([12]));
    };
    this.ⵠⵠⲆΔΔⲆⵠᐃⲆ = function () {
      b.ΔΔⵠᐃ[jf](Gq[Ya].stringify([19, Gx.ᐃⲆⲆΔⲆ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Gx.ᐃⲆⲆΔⲆ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Gx.ᐃⲆⲆΔⲆ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.Ⲇᐃⵠ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        Fx.ⲆΔⵠΔΔΔⲆⲆⲆ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = Fx.ⵠⵠⵠⲆΔⵠΔ * w + y;
        if (x & 1) {
          Fx.ΔᐃⵠⵠⵠΔⵠΔΔ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (Fx.ΔⲆᐃᐃ[z]) {
            var I = Fx.ΔⲆᐃᐃ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ⵠᐃΔᐃ.ᐃⲆΔⵠ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (Gx.id !== I.id || w === 0) {
              I.ⵠⵠᐃⵠⲆᐃΔ = H;
            }
            I.action |= x;
            I.info = E;
            I.ΔⲆⵠⵠΔ = F;
            I.ⲆⵠᐃⵠΔ = G;
            if (I.ᐃᐃⵠ) {
              I.ᐃᐃⵠ(x);
            }
          } else {
            var J = new Ww(A, w, y, B, D, H, x, E, F, G);
            Fx.ΔⲆᐃᐃ[z] = J;
            Fx.Ⲇᐃⵠ[A].push(J);
          }
        }
      }
    };
    this.ⲆⲆⲆⵠ = function (a) {
      this.ᐃⵠΔᐃΔⲆⵠ = Nx;
      var b = new Uint16Array(a);
      Gx.ᐃⵠⲆⵠᐃ.ΔⲆᐃᐃⵠ(b);
    };
    this.ⵠΔᐃⵠᐃⲆᐃⲆⵠ = function (a) {
      if (lb !== undefined) {
        At = lb;
      }
      if (a.length > 0) {
        lb = JSON.parse(JSON.stringify(At));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = At[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ᐃΔⲆ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⵠⵠⲆΔΔᐃᐃ = function (a) {
      if (a && a.length !== 0) {
        Gx.ⵠⵠⲆΔΔᐃᐃ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ᐃⲆ = [];
          var f = 14;
          var g = b.length * (f + 4) + 10;
          var h = 0;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(0) === "#") {
              ᐃⲆ[i] = b[i].substring(0, 7);
              b[i] = b[i].substring(8);
            } else {
              ᐃⲆ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; i < b.length; i++) {
            var j = xm(1, b[i], f, ᐃⲆ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, 8, (f + 4) * i + 5);
          }
          return c;
        }(a);
      } else {
        Gx.ⵠⵠⲆΔΔᐃᐃ.message = Mh;
      }
    };
    this.ΔⵠΔΔⲆ = function (a) {
      var b = Fx.ΔⲆᐃᐃ[a[1] * Fx.ⵠⵠⵠⲆΔⵠΔ];
      if (b) {
        if (Fx.mode === 2 && b.ⵠⲆΔΔ === 0) {
          if (Gx.ⵠΔⲆⲆⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ᐃⵠᐃΔΔ);
            } else {
              b.text.push(ᐃⵠᐃΔΔ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔⲆⵠΔⲆⲆⲆ[Math.floor(Math.random() * ΔⲆⵠΔⲆⲆⲆ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⵠⲆᐃΔᐃⲆⵠΔⲆ = function (a) {
      if (Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ.length !== Gx.ᐃᐃⲆΔ.max || At[a].ⵠⵠⲆᐃ === 29 || Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(At[a].ⵠⵠⲆᐃ) != -1 || Gx.ᐃᐃⲆΔ.ⲆⵠⵠⵠᐃᐃⲆΔΔ(At[a].r)) {
        this.ΔΔⵠᐃ[jf](jq[lq].stringify([26, a]));
        return 1;
      } else {
        this.ᐃⲆⵠⲆᐃⵠᐃ();
        return 0;
      }
    };
    this.ⲆⲆⵠᐃᐃ = function (a) {
      Gx.ⲆΔᐃⵠ.ᐃΔⲆⵠΔᐃᐃΔⵠ(a);
    };
    this.ᐃᐃⲆⵠⵠ = function (a) {
      Gx.ⲆΔᐃⵠ.ᐃᐃⲆⵠⵠ = a;
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ᐃⲆᐃΔⲆ = function (a) {
      Gx.ⲆΔᐃⵠ.ᐃⲆᐃΔⲆ = a;
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ⵠᐃⲆΔⵠΔⲆ = function (a) {
      Gx.ⲆΔᐃⵠ.ⵠᐃⲆΔⵠΔⲆ = a;
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ⵠᐃΔᐃⵠⲆᐃΔⲆ = function (a) {
      this.Ⲇᐃⵠⵠᐃ(Zb[315]);
    };
    this.ⵠΔΔΔⵠΔⵠᐃΔ = function () {
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ();
    };
    this.ⵠⲆⵠᐃⵠ = function (a) {
      Jx.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ = [];
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * Fx.w / 250),
          y: Math.floor(a[d + 1] * Fx.ⲆΔΔ / 250)
        };
        if (b && !c && !Gx.ⲆⲆᐃⵠΔⲆⵠ && ⵠᐃΔᐃ.ᐃⲆΔⵠ(e, b) < 250) {
          c += 1;
        } else {
          Jx.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ.push(e);
        }
      }
    };
    this.ᐃᐃΔⵠⵠⲆⲆⲆᐃ = function () {
      Gx.ⵠΔᐃᐃᐃ.open = false;
      Gx.ΔⲆⵠⲆᐃ.enabled = z;
      Gx.ΔⲆⵠⲆᐃ.ᐃΔΔᐃΔ = -1;
      Gx.ΔⲆⵠⲆᐃ.label = null;
      Gx.ΔⲆⵠⲆᐃ.ΔⲆⲆᐃΔΔⵠ = null;
      Gx.ΔⲆⵠⲆᐃ.now = -1;
    };
    this.ΔⲆⵠⲆᐃ = function (a) {
      $f.ⲆⲆⵠΔΔᐃᐃ = a;
      Gx.ΔⲆⵠⲆᐃ.enabled = Rr;
      Gx.ΔⲆⵠⲆᐃ.ᐃΔΔᐃΔ = new Date().getTime();
      Gx.ΔⲆⵠⲆᐃ.label = null;
      Gx.ΔⲆⵠⲆᐃ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(b[c]);
        if (d != -1) {
          Gx.ᐃᐃⲆΔ.ⲆⵠⲆⵠⲆΔᐃ(b.length[c], d);
        }
      }
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠΔᐃΔᐃ();
    };
    this.ⲆⲆᐃⵠΔΔⵠⲆⵠ = function (a, b, c) {
      this.ΔⵠΔⵠⵠⲆⲆ(a, b * 256 + c);
    };
    this.ΔⵠΔⵠⵠⲆⲆ = function (a, b) {
      Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
      Gx.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(a, b, Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(a));
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ΔΔΔⵠΔᐃⵠᐃᐃ = function (a) {
      Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
      Gx.ᐃⲆΔΔΔ.wait = kg;
      var b = Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(a);
      Gx.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(a, 1, b);
      if (b >= 0 && !Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ[a]) {
        Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
      }
      if (a == 159) {
        Gx.ΔΔΔᐃΔ = [Gx.id];
      }
    };
    this.ⵠᐃΔⵠᐃΔΔⲆΔ = function () {
      this.ΔΔⵠᐃ[jf](ia[Xo].stringify([6]));
    };
    this.ᐃⲆᐃⲆΔⲆⵠⲆᐃ = function (a) {
      this.ΔΔⵠᐃ[jf](va[ra].stringify([2, a.Ⲇⵠⵠⵠᐃ, a.id]));
    };
    this.ΔΔⲆⵠΔⲆⵠⲆᐃ = function (a, b) {
      this.ΔΔⵠᐃ[jf](va[Ia].stringify([10, a, b]));
    };
    this.ΔⲆⵠΔΔⲆᐃⵠⲆ = function () {
      var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      if (a) {
        var b = Math.PI * 2;
        this.ΔΔⵠᐃ[jf](va[ra].stringify([22, Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ, Math.floor((a.angle + b) % b * 255 / b), Gx.ⲆΔᐃⵠ.mode]));
      }
    };
    this.ⵠᐃⲆᐃⲆ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
          this.ΔΔⵠᐃ[jf](Aa[ca].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!Gx.ⵠΔⲆⲆⲆ) {
            if (Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ === a) {
              Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
            } else {
              Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case ah.ⵠⵠΔⲆⲆΔⵠᐃΔ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!Gx.ⵠΔⲆⲆⲆ) {
            Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
            if ((c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ]) && a === c.right) {
              this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([34, 7]));
            } else {
              Gx.ᐃΔᐃᐃΔ.wait = true;
              this.ΔΔⵠᐃ[jf](ja[Qa].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!Gx.ⵠΔⲆⲆⲆ) {
            Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
            if ((c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ]) && a === c.right) {
              this.ΔΔⵠᐃ[jf](Oa[Ga].stringify([34, 7]));
            } else {
              this.ΔΔⵠᐃ[jf](vq[Ya].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!Gx.ⵠΔⲆⲆⲆ) {
            Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
            var c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
            this.ΔΔⵠᐃ[jf](vq[Ya].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ]) && a !== c.ΔⲆⲆⲆᐃ) {
            Gx.ᐃⵠⵠⵠᐃ.wait = tg;
          }
          this.ΔΔⵠᐃ[jf](Aa[Ia].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ΔΔⵠᐃ[jf](Dq[Aq].stringify([34, a]));
      }
    };
    this.ᐃᐃᐃᐃᐃⵠᐃᐃⵠ = function (a) {
      this.ΔΔⵠᐃ[jf](va[lq].stringify([31, a]));
    };
    this.ⵠᐃⵠⲆⲆΔⲆⵠΔ = function (a) {
      Gx.ᐃⲆΔΔΔ.wait = tg;
      var b = Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(a);
      Gx.ᐃᐃⲆΔ.ⲆⵠⲆⵠⲆΔᐃ(a, b);
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ΔΔⲆⲆⵠᐃᐃᐃⲆ = function (a, b) {
      this.ΔΔⵠᐃ[jf](jq[Ga].stringify([18, a]));
    };
    this.ⵠⵠΔⵠⲆΔᐃⲆᐃ = function (a, b) {
      this.ΔΔⵠᐃ[jf](ia[Xo].stringify([24, a]));
    };
    this.ΔᐃᐃΔΔⵠⵠⵠⲆ = function (a) {
      Gx.ᐃⲆΔΔΔ.wait = Rr;
      var b = Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(a);
      Gx.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(a, 1, b);
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ΔᐃΔⲆⵠⲆⲆᐃⲆ = function (a) {
      var b = a[1];
      var c = a[2];
      Gx.ᐃⲆΔΔΔ.wait = tg;
      var d = Gx.ᐃᐃⲆΔ.ᐃᐃΔⵠΔ(b);
      Gx.ᐃᐃⲆΔ.ⲆⵠΔᐃⲆᐃᐃ(b, c, d);
      Gx.ⲆΔᐃⵠ.ᐃᐃⵠ();
    };
    this.ⵠⲆⵠⵠΔΔᐃⲆΔ = function () {
      this.ΔΔⵠᐃ[jf](ia[Xo].stringify([16]));
    };
    this.ⲆΔⲆⵠⲆⲆⲆᐃⲆ = function (a) {
      var b = Math.PI * 2;
      this.ΔΔⵠᐃ[jf](va[ra].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆΔΔΔΔⵠⲆᐃⵠ = function (a) {
      var b = Math.PI * 2;
      this.ΔΔⵠᐃ[jf](va[ra].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆⵠΔⲆᐃⲆⲆΔΔ = function (a) {
      this.ΔΔⵠᐃ[jf](ⲆΔⵠᐃᐃᐃⲆ[mq].stringify([11, a]));
    };
    this.ΔᐃΔᐃᐃᐃⵠⲆⵠ = function (a) {
      this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([33, a]));
    };
    this.ⲆΔᐃΔⵠΔⲆᐃⲆ = function (a) {
      var b = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
      if (Gx.ⵠΔⲆⲆⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃⵠᐃΔΔ);
        } else {
          b.text.push(ᐃⵠᐃΔΔ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ΔΔⵠᐃ[jf](Ba[Ia].stringify([15, a]));
    };
    this.ⵠΔⵠⵠⲆ = function (a) {
      var b = ΔⵠⵠΔ.select.Ⲇᐃⵠ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ⵠᐃΔᐃ.ΔΔᐃⵠΔⲆᐃ(a, {
          x: ΔⵠⵠΔ.ᐃⵠⲆ.rx,
          y: ΔⵠⵠΔ.ᐃⵠⲆ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; b.length > e; e++) {
          d.push(b[e].ΔⵠⵠᐃᐃⵠⲆⲆΔ);
        }
        c.push(d);
        this.ΔΔⵠᐃ[jf](ja[Qa].stringify(c));
      }
    };
    this.ΔᐃΔⵠⵠΔΔ = 0;
    this.ᐃᐃΔΔⲆⵠⵠ = {
      ᐃΔⵠⵠ: 0,
      Δᐃ: 0
    };
    this.ⵠΔᐃᐃⵠΔⵠⲆⵠ = function () {
      if (Nx - this.ΔᐃΔⵠⵠΔΔ > 50) {
        this.ΔᐃΔⵠⵠΔΔ = Nx;
        var a = Gx.ᐃⵠⲆ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (b != this.ᐃᐃΔΔⲆⵠⵠ.Δᐃ || c != this.ᐃᐃΔΔⲆⵠⵠ.ᐃΔⵠⵠ) {
          this.ΔΔⵠᐃ[jf](vq[Ga].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ᐃᐃΔΔⲆⵠⵠ.Δᐃ = b;
          this.ᐃᐃΔΔⲆⵠⵠ.ᐃΔⵠⵠ = c;
        }
      }
    };
    this.ⵠΔⵠΔΔΔΔ = 0;
    this.ⵠⵠⵠⵠⲆⵠᐃⲆⲆ = function () {
      if (Nx - this.ⵠΔⵠΔΔΔΔ > 60000) {
        this.ⵠΔⵠΔΔΔΔ = Nx;
        //this.ping();
      }
    };
    this.ΔⲆⵠⵠⵠᐃⲆⲆΔ = function () {
      Gx.reconnect.enabled = fn;
      if (b.ΔΔⵠᐃ.ΔΔᐃⵠⲆ == b.ΔΔᐃⵠⲆ) {
        b.ΔΔᐃⵠⲆ++;
        b.ΔΔⵠᐃ.close();
        Ix.connect();
      }
    };
    this.ⲆᐃᐃᐃⵠⵠᐃᐃⲆ = function (a) {
      this.Ⲇᐃⵠⵠᐃ(Zb[316]);
      for (var b = 1; a.length > b; b++) {
        Gx.ΔΔΔᐃΔ.push(a[b]);
      }
    };
    this.ᐃᐃᐃΔⵠᐃⵠⵠΔ = function (a) {
      this.Ⲇᐃⵠⵠᐃ(Fx.ⵠⲆΔᐃ[a].ⲆⵠΔⵠΔ + Zb[318]);
      Gx.ΔΔΔᐃΔ.push(a);
      var b = document.getElementById("team_box");
      if (Jx.ⲆⲆⵠⵠᐃ != -1 && b.style.display == "inline-block") {
        Jx.ⵠΔⵠᐃⲆ[Jx.ⲆⲆⵠⵠᐃ].action();
      }
    };
    this.ΔΔᐃᐃᐃⵠⲆⲆΔ = function () {
      this.Ⲇᐃⵠⵠᐃ(Zb[319]);
      Gx.ᐃⲆⲆΔⲆ.wait = true;
      Gx.ΔΔΔᐃΔ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ᐃᐃΔΔΔᐃΔΔᐃ = function (a) {
      if (Gx.id == a) {
        this.Ⲇᐃⵠⵠᐃ(Zb[320]);
        Gx.ᐃⲆⲆΔⲆ.wait = true;
        Gx.ΔΔΔᐃΔ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.Ⲇᐃⵠⵠᐃ(Fx.ⵠⲆΔᐃ[a].ⲆⵠΔⵠΔ + Zb[321]);
        for (var b = 0; b < Gx.ΔΔΔᐃΔ.length; b++) {
          if (a == Gx.ΔΔΔᐃΔ[b]) {
            Gx.ΔΔΔᐃΔ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Jx.ⲆⲆⵠⵠᐃ != -1 && c.style.display == "inline-block") {
          Jx.ⵠΔⵠᐃⲆ[Jx.ⲆⲆⵠⵠᐃ].action();
        }
      }
    };
    this.ⵠⲆⲆⲆᐃⲆΔⵠⵠ = function (a) {
      Gx.ⲆᐃᐃⲆⲆ = false;
      this.Ⲇᐃⵠⵠᐃ(Zb[322]);
      if (this.ΔΔᐃⵠⲆ == this.ΔΔⵠᐃ.ΔΔᐃⵠⲆ) {
        this.ΔΔᐃⵠⲆ++;
        Jx.ΔⲆⵠᐃΔ(Ex.ⵠⲆᐃᐃΔ);
        this.ΔΔⵠᐃ.close();
      }
    };
    this.ⲆΔΔⵠᐃⲆⲆᐃⲆ = function (a, b) {
      Gx.ⲆᐃᐃⲆⲆ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Gx.ᐃΔⲆΔⵠⵠⵠ.ΔᐃⲆⲆᐃⵠⲆ = Et[a][Math.floor(Math.random() * Et[a].length)];
      Gx.ᐃΔⲆΔⵠⵠⵠ.ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(Fx.ⵠⲆΔᐃ[Gx.id].ᐃⲆᐃⵠⲆ);
      Gx.ᐃΔⲆΔⵠⵠⵠ.ⵠᐃΔⲆⵠΔᐃ = ⵠᐃΔᐃ.ᐃⲆΔⵠᐃᐃⵠ(d[1]);
      Gx.ᐃΔⲆΔⵠⵠⵠ.ᐃᐃⲆᐃᐃ = c[1];
      this.Ⲇᐃⵠⵠᐃ(Zb[317]);
      if (this.ΔΔᐃⵠⲆ == this.ΔΔⵠᐃ.ΔΔᐃⵠⲆ) {
        this.ΔΔᐃⵠⲆ++;
        Jx.ΔⲆⵠᐃΔ(Hx.ⵠⲆᐃᐃΔ);
        this.ΔΔⵠᐃ.close();
        try {
          jg.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ΔΔⵠᐃ[jf]("[21]");
    };
    this.ΔⵠⲆⲆⵠⵠΔⵠⲆ = function () {
      if (this.ΔΔⵠᐃ.readyState == 3) {
        this.ᐃⵠΔᐃΔⲆⵠ -= 600000;
      }
    };
    this.ᐃᐃΔΔᐃⵠᐃΔᐃ = function () {
      if (Ox > 5) {
        this.ᐃⵠΔᐃΔⲆⵠ = Nx;
      }
      if (Nx - this.ᐃⵠΔᐃΔⲆⵠ > 600000) {
        this.ᐃⵠΔᐃΔⲆⵠ = Nx;
        this.ΔⲆⵠⵠⵠᐃⲆⲆΔ();
      }
    };
    this.ΔΔᐃⵠΔᐃΔᐃⲆ = function (c) {
      Rx++;
      clearTimeout(this.ΔⵠᐃⲆⲆ);
      document.getElementById("commandMainBoxName").innerHTML = this.ΔⲆᐃⵠⲆ[this.ⵠⵠᐃΔⲆ][this.ΔⵠⲆᐃⵠᐃⲆ[this.ⵠⵠᐃΔⲆ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ᐃⵠΔᐃΔⲆⵠ = Nx;
      Gx.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.Δⵠⵠᐃᐃ = Gx.ᐃⵠⲆᐃ.ⵠⲆΔⲆⵠ.ᐃⵠΔⲆᐃ;
      Gx.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.Δⵠⵠᐃᐃ = Gx.ᐃⵠⲆᐃ.ⲆⲆΔᐃᐃᐃᐃ.ᐃⵠΔⲆᐃ;
      Gx.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.Δⵠⵠᐃᐃ = Gx.ᐃⵠⲆᐃ.ΔΔΔΔⵠⲆⵠ.ᐃⵠΔⲆᐃ;
      Gx.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.Δⵠⵠᐃᐃ = Gx.ᐃⵠⲆᐃ.ⵠᐃⲆᐃΔΔⵠ.ᐃⵠΔⲆᐃ;
      Gx.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.Δⵠⵠᐃᐃ = Gx.ᐃⵠⲆᐃ.ⲆⲆΔⲆΔ.ᐃⵠΔⲆᐃ;
      Gx.ᐃⵠⲆᐃ.ⲆⲆⲆΔ = 1;
      Gx.ᐃⵠⲆᐃ.c = 1;
      Gx.ᐃⵠⲆᐃ.ⲆΔΔ = 1;
      Gx.ᐃⵠⲆᐃ.ΔⲆᐃ = 1;
      Gx.ᐃⵠⲆᐃ.ᐃΔⲆ = 1;
      Gx.ᐃⵠⲆᐃ.ⲆΔⵠᐃⵠⲆᐃ = 1;
      Gx.ⲆⵠⲆⵠⵠΔⵠ = false;
      Jx.ⵠᐃⵠᐃᐃ.display = 0;
      Gx.ᐃᐃⲆΔ.ⲆΔᐃⲆⵠ = [];
      Gx.ᐃᐃⲆΔ.ᐃΔΔᐃ = [];
      Gx.ᐃᐃⲆΔ.max = 10;
      Gx.ᐃᐃⲆΔ.ΔᐃᐃⲆΔᐃⲆ = 0;
      Gx.ᐃᐃⲆΔ.ΔΔⲆᐃⵠ = 0;
      Gx.ᐃᐃⲆΔ.id = -1;
      Jx.ᐃⲆΔΔΔΔⵠ = 1;
      Jx.ᐃᐃⵠᐃΔⵠᐃ = 1;
      Jx.ⵠᐃⵠⲆⲆᐃⲆ = 1;
      Jx.ⵠΔΔᐃⵠᐃΔ = 1;
      Gx.ⲆᐃᐃⲆⲆ = true;
      Gx.ᐃᐃⲆΔ.ᐃⲆΔΔΔΔᐃ.stop();
      Gx.ⲆΔᐃⵠ.ⲆⲆⵠΔⵠ = [];
      Gx.ⲆΔᐃⵠ.ⲆΔᐃᐃᐃ = false;
      Gx.ⲆΔᐃⵠ.ⵠⲆⲆⵠⵠⵠᐃᐃΔ = false;
      Gx.ⲆΔᐃⵠ.ᐃΔᐃⵠ = -1;
      Gx.ⲆΔᐃⵠ.id = -1;
      Gx.ⲆΔᐃⵠ.ⲆⲆⵠᐃᐃ = false;
      Gx.ⲆΔᐃⵠ.ᐃᐃⲆⵠⵠ = false;
      Gx.ⲆΔᐃⵠ.ᐃⲆᐃΔⲆ = false;
      Gx.ⲆΔᐃⵠ.ⵠᐃⲆΔⵠΔⲆ = false;
      Gx.ⲆΔᐃⵠ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Zq, 0, 1, 0, 1, 1);
      Gx.ᐃΔᐃᐃΔ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(Le, 0, 1, 0, 0.1, 1);
      Gx.ᐃΔᐃᐃΔ.wait = false;
      Gx.ᐃⵠⵠⵠᐃ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 1, 0, 1 / 5, 1);
      Gx.ᐃⵠⵠⵠᐃ.wait = false;
      Gx.ᐃⲆΔΔΔ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 1, 0, 1, 1);
      Gx.ᐃⲆΔΔΔ.wait = false;
      Gx.ᐃⲆⲆΔⲆ.id = -1;
      Gx.ᐃⲆⲆΔⲆ.ΔᐃᐃⲆ = -1;
      Gx.ᐃⲆⲆΔⲆ.wait = false;
      Gx.ᐃⲆⲆΔⲆ.timeout = new ⵠᐃΔᐃ.ΔΔⲆⵠ(false, 0, 1, 0, 1 / 30, 1);
      Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.x = -1;
      Jx.ⵠⲆⵠᐃⵠ.ⵠⵠΔⵠⵠ.y = -1;
      Jx.ΔΔΔⵠ.open = false;
      Jx.ⵠⲆⵠᐃⵠ.ⵠⲆΔᐃ = [];
      Gx.ΔΔᐃᐃΔ.enabled = ld;
      Fx.mode = c[1];
      if (c[20] !== undefined && c[21] !== undefined) {
        Fx.ᐃⵠⲆΔΔ = c[20];
        Fx.ΔᐃⵠⵠⲆ = c[21];
        Fx.w = Fx.ᐃᐃⲆⲆΔᐃⵠ * Fx.ᐃⵠⲆΔΔ;
        Fx.ⲆΔΔ = Fx.ΔᐃⵠⵠⲆ * Fx.ⲆᐃⵠᐃΔⲆΔ;
      }
      Fx.ⵠⲆⲆⵠΔⵠᐃ = c[22];
      Fx.ᐃΔⵠΔⲆ = c[23];
      b.ⵠⵠⲆΔΔᐃᐃ(c[24]);
      b.ⵠΔᐃⵠᐃⲆᐃⲆⵠ(c[25]);
      Gx.ⵠΔⵠⲆΔ.ΔⵠⲆⲆⵠ = c[26];
      Gx.ⲆΔᐃⲆⵠᐃᐃ = 0;
      Gx.ⵠⲆᐃⵠΔ.ΔⵠⲆⲆⵠ = c[27];
      Fx.ⵠⵠⲆᐃΔᐃⲆⲆⲆ(c[19]);
      Fx.time = c[5];
      Fx.ΔᐃᐃⲆⵠ.ᐃΔΔΔⲆ = c[15];
      Fx.ΔᐃᐃⲆⵠ.ΔⲆᐃᐃⵠ = new Date().getTime();
      Jx.ⵠⲆⲆᐃ.ᐃΔⵠΔⲆⲆΔ = c[16];
      Fx.transition = false;
      Gx.ⵠⵠⲆ = c[2];
      Jx.ⵠⲆⲆᐃ.reset();
      Gx.ΔΔΔᐃΔ = c[8];
      Fx.Ⲇᐃⵠ[0] = [];
      Fx.Ⲇᐃⵠ[100] = [];
      Fx.Ⲇᐃⵠ[2] = [];
      Fx.Ⲇᐃⵠ[1] = [];
      Fx.Ⲇᐃⵠ[6] = [];
      Fx.Ⲇᐃⵠ[3] = [];
      Fx.Ⲇᐃⵠ[31] = [];
      Fx.Ⲇᐃⵠ[37] = [];
      Fx.Ⲇᐃⵠ[43] = [];
      Fx.Ⲇᐃⵠ[44] = [];
      Fx.Ⲇᐃⵠ[39] = [];
      Fx.Ⲇᐃⵠ[40] = [];
      Fx.Ⲇᐃⵠ[54] = [];
      Fx.Ⲇᐃⵠ[55] = [];
      Fx.Ⲇᐃⵠ[4] = [];
      Fx.Ⲇᐃⵠ[7] = [];
      Fx.Ⲇᐃⵠ[8] = [];
      Fx.Ⲇᐃⵠ[9] = [];
      Fx.Ⲇᐃⵠ[10] = [];
      Fx.Ⲇᐃⵠ[15] = [];
      Fx.Ⲇᐃⵠ[16] = [];
      Fx.Ⲇᐃⵠ[17] = [];
      Fx.Ⲇᐃⵠ[45] = [];
      Fx.Ⲇᐃⵠ[46] = [];
      Fx.Ⲇᐃⵠ[47] = [];
      Fx.Ⲇᐃⵠ[48] = [];
      Fx.Ⲇᐃⵠ[49] = [];
      Fx.Ⲇᐃⵠ[53] = [];
      Fx.Ⲇᐃⵠ[11] = [];
      Fx.Ⲇᐃⵠ[22] = [];
      Fx.Ⲇᐃⵠ[23] = [];
      Fx.Ⲇᐃⵠ[5] = [];
      Fx.Ⲇᐃⵠ[12] = [];
      Fx.Ⲇᐃⵠ[13] = [];
      Fx.Ⲇᐃⵠ[14] = [];
      Fx.Ⲇᐃⵠ[60] = [];
      Fx.Ⲇᐃⵠ[70] = [];
      Fx.Ⲇᐃⵠ[71] = [];
      Fx.Ⲇᐃⵠ[72] = [];
      Fx.Ⲇᐃⵠ[73] = [];
      Fx.Ⲇᐃⵠ[74] = [];
      Fx.Ⲇᐃⵠ[81] = [];
      Fx.Ⲇᐃⵠ[82] = [];
      Fx.Ⲇᐃⵠ[87] = [];
      Fx.Ⲇᐃⵠ[86] = [];
      Fx.Ⲇᐃⵠ[34] = [];
      Fx.Ⲇᐃⵠ[65] = [];
      Fx.Ⲇᐃⵠ[66] = [];
      Fx.Ⲇᐃⵠ[67] = [];
      Fx.Ⲇᐃⵠ[62] = [];
      Fx.Ⲇᐃⵠ[63] = [];
      Fx.Ⲇᐃⵠ[78] = [];
      Fx.Ⲇᐃⵠ[77] = [];
      Fx.Ⲇᐃⵠ[75] = [];
      Fx.Ⲇᐃⵠ[76] = [];
      Fx.Ⲇᐃⵠ[64] = [];
      Fx.Ⲇᐃⵠ[69] = [];
      Fx.Ⲇᐃⵠ[68] = [];
      Fx.Ⲇᐃⵠ[79] = [];
      Fx.Ⲇᐃⵠ[89] = [];
      Fx.Ⲇᐃⵠ[83] = [];
      Fx.Ⲇᐃⵠ[84] = [];
      Fx.Ⲇᐃⵠ[85] = [];
      Fx.Ⲇᐃⵠ[80] = [];
      Fx.Ⲇᐃⵠ[88] = [];
      Fx.Ⲇᐃⵠ[91] = [];
      Fx.Ⲇᐃⵠ[90] = [];
      Fx.Ⲇᐃⵠ[61] = [];
      Fx.Ⲇᐃⵠ[18] = [];
      Fx.Ⲇᐃⵠ[19] = [];
      Fx.Ⲇᐃⵠ[20] = [];
      Fx.Ⲇᐃⵠ[21] = [];
      Fx.Ⲇᐃⵠ[50] = [];
      Fx.Ⲇᐃⵠ[52] = [];
      Fx.Ⲇᐃⵠ[51] = [];
      Fx.Ⲇᐃⵠ[29] = [];
      Fx.Ⲇᐃⵠ[56] = [];
      Fx.Ⲇᐃⵠ[30] = [];
      Fx.Ⲇᐃⵠ[38] = [];
      Fx.Ⲇᐃⵠ[33] = [];
      Fx.Ⲇᐃⵠ[32] = [];
      Fx.Ⲇᐃⵠ[24] = [];
      Fx.Ⲇᐃⵠ[25] = [];
      Fx.Ⲇᐃⵠ[26] = [];
      Fx.Ⲇᐃⵠ[27] = [];
      Fx.Ⲇᐃⵠ[28] = [];
      Fx.Ⲇᐃⵠ[42] = [];
      Fx.Ⲇᐃⵠ[41] = [];
      Fx.Ⲇᐃⵠ[35] = [];
      Fx.Ⲇᐃⵠ[36] = [];
      Fx.ΔⲆᐃᐃ = [];
      Fx.ⵠⵠⵠⲆΔⵠΔ = c[7];
      Gx.id = c[9];
      Gx.ΔᐃⲆⵠ = Fx.ⵠⵠⵠⲆΔⵠΔ * Gx.id;
      if (Kx.loaded) {
        Kx.ⵠⲆΔᐃ[0].ΔᐃⲆⵠ = Gx.ΔᐃⲆⵠ;
        Kx.ⵠⲆΔᐃ[0].ΔⲆⲆΔⲆΔᐃ = 0;
      }
      Lx.ᐃᐃᐃⲆⵠΔⵠ();
      Gx.ᐃⵠⲆ.ⵠⵠᐃⵠᐃ(c[3], c[10]);
      Fx.ⵠⲆΔᐃ = [];
      var d = Fx.ⵠⲆΔᐃ;
      for (var e = 0; e < c[11]; e++) {
        d.push(new Vw());
      }
      e = 0;
      for (var f = c[4]; e < f.length; e++) {
        var g = d[f[e].i];
        g.ⲆⵠΔⵠΔ = f[e].n;
        g.ⵠⲆΔΔ = f[e].s;
        g.ᐃᐃⲆΔⵠ = f[e].a;
        g.ⵠⵠΔⲆⲆ = f[e].c;
        g.ⲆΔⵠΔΔ = f[e].b;
        g.Δᐃⵠⵠᐃ = f[e].d;
        g.ΔⲆᐃᐃΔⵠⲆ = f[e].g;
        g.level = f[e].l;
        g.ᐃⲆᐃⵠⲆ = ⵠᐃΔᐃ.ᐃΔⵠⵠΔΔⵠ(f[e].p);
        g.ⲆᐃᐃⲆⲆ = true;
        if (Lf === 1) {
          g.ⲆⵠΔⵠΔ += "|" + f[e].i;
        }
      }
      Gx.ᐃⵠⲆⵠᐃ.sort();
      if (Fx.mode === 1 && Fx.ⵠⲆΔᐃ[Gx.id].ⲆⵠΔⵠΔ === "spectator") {
        Gx.ⲆⲆᐃⵠΔⲆⵠ = true;
      } else {
        Gx.ⲆⲆᐃⵠΔⲆⵠ = false;
      }
      if (Fx.mode === 2 && Fx.ⵠⲆΔᐃ[Gx.id].ⵠⲆΔΔ === 0) {
        Gx.ⵠΔⲆⲆⲆ = Ej;
      } else {
        Gx.ⵠΔⲆⲆⲆ = false;
      }
      if (Fx.mode === 3 && Fx.ⵠⲆΔᐃ[Gx.id].ⵠⲆΔΔ === 0) {
        Gx.ⲆⵠΔⵠΔᐃⵠ = Dh;
      } else {
        Gx.ⲆⵠΔⵠΔᐃⵠ = na;
      }
      ΔᐃⲆΔ.set("starve_token", Gx.ⲆΔΔⲆΔ);
      if (c[12] === 0) {
        Gx.ⵠΔⲆΔ.ᐃΔΔᐃΔ = 0;
        Jx.ⵠⲆⲆᐃ.restore(c[17]);
        var h = c[14];
        if (h[29]) {
          Gx.ᐃᐃⲆΔ.ᐃΔⲆᐃⵠΔⵠ(1, 0);
        }
        for (e = 0; h.length > e; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ᐃⲆⵠⵠΔⲆⵠ([0, e, h[e]]);
          }
        }
        Gx.ⵠΔⲆΔ.open = false;
      } else {
        if (Fx.mode === 4) {
          this.ᐃⲆⵠⵠΔⲆⵠ([0, 238, 1]);
        } else if (Fx.mode === 3) {
          if (Gx.ⲆⵠΔⵠΔᐃⵠ) {
            this.ᐃⲆⵠⵠΔⲆⵠ([0, 190, 4]);
          } else {
            this.ᐃⲆⵠⵠΔⲆⵠ([0, 191, 3]);
          }
        }
        if (Fx.mode === 0 || Fx.mode === 3 || Fx.mode === 7 || Fx.mode === 4) {
          Gx.ⵠΔⲆΔ.ᐃΔΔᐃΔ = new Date().getTime();
          Gx.ⵠΔⲆΔ.open = true;
          Gx.ⵠΔⲆΔ.value = c[13];
          Jx.ⵠΔⲆΔ.ΔⲆᐃᐃⵠ();
        } else {
          Gx.ⵠΔⲆΔ.ᐃΔΔᐃΔ = 0;
          Gx.ⵠΔⲆΔ.open = false;
          Gx.ⵠΔⲆΔ.value = 0;
        }
        Gx.ⵠⵠᐃⲆⲆᐃⵠ = c[12].toString();
      }
      Gx.ΔⲆⵠⲆᐃ.enabled = c[6];
      Gx.ΔⲆⵠⲆᐃ.ᐃΔΔᐃΔ = -1;
      Gx.ΔⲆⵠⲆᐃ.label = null;
      Gx.ΔⲆⵠⲆᐃ.now = -1;
      ΔᐃⲆΔ.set("starve_token_id", Gx.ⵠⵠᐃⲆⲆᐃⵠ);
      if (Gx.reconnect.enabled) {
        Gx.reconnect.rotate = 0;
        Gx.reconnect.enabled = false;
      } else {
        Ex.ΔⲆⵠᐃΔ(Jx.ⵠⲆᐃᐃΔ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + Ex.ⵠⲆΔΔ + "A" + Ex.ᐃᐃⲆΔⵠ);
        }
      }
    };
    this.connect = function () {
      b.ΔⲆᐃΔΔⲆⵠ = 0;
      b.ᐃⲆⵠΔΔⲆⲆ();
    };
    this.ⵠᐃᐃⲆΔᐃⵠ = [];
    this.ⲆΔᐃⲆΔᐃᐃΔⵠ = function (c) {
      const d = b.ᐃⲆΔⲆⵠ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== Ua) {
          if (f[c] === Qq) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function e(d) {
        b.ⵠᐃᐃⲆΔᐃⵠ[c] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        b.ᐃⵠΔᐃΔΔⵠ({
          domain: Of,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (b.ⵠᐃᐃⲆΔᐃⵠ[c] !== undefined) {
        e(b.ⵠᐃᐃⲆΔᐃⵠ[c]);
        return;
      }
      let a = 1;
      function g(b) {
        const c = new jg.XMLHttpRequest();
        const d = b[0];
        const f = d.p;
        const g = d.r;
        const i = f[Math.floor(Math.random() * f.length)];
        c.open("GET", "https://" + i + "." + Of + "/", true);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            e(g);
          }
        };
        c.send();
      }
      for (let a in f) {
        g(f[a]);
      }
      jg.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = jg.Object.keys(f);
        e(b[Math.floor(Math.random() * b.length)]);
      }, 5000);
    };
    this.ΔᐃⲆⲆᐃⲆᐃⵠⲆ = function () {
      let a = $f.ⲆⵠΔⲆⲆⲆᐃ[b.ⵠⵠᐃΔⲆ];
      console.log(undefined, Sa, zn);
      let c = b.ΔⵠⲆᐃⵠᐃⲆ[b.ⵠⵠᐃΔⲆ];
      let d = b.ᐃⲆΔⲆⵠ.find(b => b.gm == a && b.idx == c);
      if (d === zn) {
        b.ⲆΔᐃⲆΔᐃᐃΔⵠ(a);
      } else {
        b.ᐃⵠΔᐃΔΔⵠ({
          domain: Of,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ᐃⲆⵠΔΔⲆⲆ = function () {
      console.log(Bl);
      if (Nw !== undefined && Gj !== qf) {
        console.log(undefined, undefined, undefined);
        b.ᐃⵠΔᐃΔΔⵠ({
          domain: Of,
          is_tls: 1,
          id: qf + Nw,
          p: b.ᐃᐃΔⵠΔⲆⵠ[qf]
        });
        return;
      }
      if (Wf === undefined) {
        b.ΔᐃⲆⲆᐃⲆᐃⵠⲆ();
      } else {
        b.ᐃⵠΔᐃΔΔⵠ({
          domain: Wf.domain,
          is_tls: Wf.ssl,
          id: Wf.id,
          p: [Wf.p]
        });
      }
    };
    this.ᐃⵠΔᐃΔΔⵠ = function (c) {
      let d = c.domain;
      let e = c.is_tls;
      let f = c.id;
      let a = c.p;
      let g = a[Math.floor(Math.random() * a.length)];
      let i = e ? "wss://" + g + "." + d + "/" + f + "?" + Gx.ⵠⲆΔⲆⲆⵠⵠ : "ws://" + d;
      console.log(fh, undefined);
      b.ΔΔⵠᐃ = new jg.WebSocket(i);
      b.ΔΔⵠᐃ.binaryType = "arraybuffer";
      b.ΔΔⵠᐃ.ΔΔᐃⵠⲆ = b.ΔΔᐃⵠⲆ;
      b.ΔΔⵠᐃ.onmessage = function (a) {
        if (b.ΔΔᐃⵠⲆ == b.ΔΔᐃⵠⲆ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ΔⵠΔΔⲆ(c);
                break;
              case 1:
                b.ᐃⵠⲆⵠΔⵠⵠ(c[1]);
                break;
              case 2:
                b.ⲆΔΔᐃⲆⵠΔᐃⲆ(c);
                break;
              case 3:
                b.ΔΔᐃⵠΔᐃΔᐃⲆ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ΔΔⵠᐃᐃΔΔ(c);
                break;
              case 6:
                b.ⵠⵠⲆΔΔᐃᐃ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h;
              let i = Ow[e];
              if (i === Es) {
                Kf += e * 2;
                if (Kf < 65535) {
                  g = lj(Jj(e));
                } else {
                  Kf = e;
                  for (let a = 0; a < Ow.length; a++) {
                    if (Ow[a] !== Gm) {
                      const b = Ow[a][0];
                      Ow[a] = undefined;
                      be(b);
                    }
                  }
                  g = lj(Jj(e));
                  oj();
                }
                h = mk(g);
                Ow[e] = [g, h];
              } else {
                g = i[0];
                h = i[1];
              }
              for (let a = 0; f.length > a; a++) {
                h[a] = f[a];
              }
              Pj(g, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = h[a];
              }
              return f;
            }(a.data, Gx.ⵠⵠᐃⲆΔᐃᐃ, Gx.ⲆⲆⵠⲆΔᐃⵠᐃΔ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                b.Ⲇᐃⵠ(e, d, false);
                break;
              case 1:
                b.Ⲇᐃⵠ(e, d, true);
                break;
              case 2:
                b.ⵠΔΔΔⵠΔⵠᐃΔ();
                break;
              case 3:
                b.ᐃⲆⵠⵠΔⲆⵠ(new Uint16Array(e));
                break;
              case 4:
                b.ΔΔⵠΔⵠΔⲆᐃᐃ();
                break;
              case 5:
                b.ⵠⲆΔᐃΔⲆⲆΔⲆ();
                break;
              case 6:
                b.ⵠᐃΔᐃⵠⲆᐃΔⲆ();
                break;
              case 7:
                b.ᐃⵠΔΔⲆΔΔᐃᐃ(e);
                break;
              case 8:
                b.ⵠᐃΔΔⲆᐃΔᐃΔ(d[1]);
                break;
              case 9:
                b.ΔᐃᐃⵠΔΔΔⵠⲆ(d[1]);
                break;
              case 10:
                b.ᐃⲆⵠⲆᐃⵠᐃ();
                break;
              case 11:
                b.ΔⵠΔⵠⵠⲆⲆ(d[1], d[2]);
                break;
              case 12:
                b.ⲆⲆⵠᐃᐃ(d[1]);
                break;
              case 13:
                b.ⲆⵠᐃⵠΔⵠⲆᐃⵠ(d, e);
                break;
              case 14:
                b.ⵠⵠⵠΔⵠⵠᐃⵠⲆ();
                break;
              case 15:
                b.ⵠΔⲆᐃⲆⲆᐃⲆᐃ(d[1]);
                break;
              case 16:
                b.ᐃⵠⲆᐃ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ΔΔᐃⲆⲆⲆⵠΔᐃ(e);
                break;
              case 18:
                b.ⵠⵠΔΔΔⲆⲆⵠᐃ();
                break;
              case 19:
                b.ᐃⲆᐃΔⲆ(d[1]);
                break;
              case 20:
                b.ΔᐃⲆΔⲆᐃⲆᐃᐃ();
                break;
              case 21:
                b.ⲆⲆⲆⵠ(e);
                break;
              case 22:
                b.ⵠⲆⵠᐃⵠⲆᐃⵠΔ(d[1]);
                break;
              case 23:
                b.ⲆᐃᐃⵠⲆⲆⵠⲆⵠ(e);
                break;
              case 24:
                b.ΔΔΔⵠΔᐃⵠᐃᐃ(d[1]);
                break;
              case 25:
                b.ⲆΔΔⵠᐃⲆⲆᐃⲆ(d[1], e);
                break;
              case 26:
                b.ⵠⲆⵠᐃⵠ(d);
                break;
              case 27:
                b.ᐃⵠᐃⵠⵠⵠΔⵠΔ();
                break;
              case 28:
                b.ΔⲆⵠⲆᐃ(d[1]);
                break;
              case 29:
                b.ᐃᐃΔⵠⵠⲆⲆⲆᐃ();
                break;
              case 30:
                b.ⵠⲆⲆⲆᐃⲆΔⵠⵠ();
                break;
              case 31:
                b.ⲆᐃᐃᐃⵠⵠᐃᐃⲆ(d);
                break;
              case 32:
                b.ᐃᐃΔΔΔᐃΔΔᐃ(d[1]);
                break;
              case 33:
                b.ᐃᐃᐃΔⵠᐃⵠⵠΔ(d[1]);
                break;
              case 34:
                b.ΔΔᐃᐃᐃⵠⲆⲆΔ();
                break;
              case 35:
                b.ᐃⲆⲆᐃⵠⲆⵠᐃΔ(d[1]);
                break;
              case 36:
                b.ⵠᐃⲆΔⵠΔⲆ(d[1]);
                break;
              case 37:
                b.ᐃⵠⵠⲆⵠⵠⲆΔⵠ(d[1], d[2]);
                break;
              case 38:
                b.ⲆΔⵠΔΔⲆᐃᐃᐃ(d[1]);
                break;
              case 39:
                b.ⵠⵠⵠⵠᐃΔᐃΔⲆ(d[1]);
                break;
              case 40:
                b.ΔⵠⵠⲆⵠΔⵠΔΔ();
                break;
              case 41:
                b.ᐃᐃᐃΔⵠΔΔΔⲆ(d);
                break;
              case 42:
                b.ᐃⵠᐃⲆⲆᐃΔΔΔ(d[1]);
                break;
              case 43:
                b.ⵠᐃᐃⵠᐃΔⲆⲆΔ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ΔΔᐃⲆⵠᐃᐃᐃⲆ(d[1]);
                break;
              case 46:
                b.ΔᐃΔⵠⵠⵠᐃⲆΔ(d[1]);
                break;
              case 47:
                b.ᐃᐃⲆⵠⵠ(d[1]);
                break;
              case 48:
                b.ⲆⲆⲆⵠΔΔᐃⵠᐃ();
                break;
              case 50:
                b.ⲆⲆᐃⵠΔΔⵠⲆⵠ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ⵠⲆⲆΔⵠᐃΔⲆⵠ();
                break;
              case 52:
                b.ⵠᐃⵠⲆⲆΔⲆⵠΔ(d[1]);
                break;
              case 53:
                b.ΔᐃᐃΔΔⵠⵠⵠⲆ(d[1]);
                break;
              case 54:
                b.ΔⵠΔᐃⵠⵠΔⲆᐃ();
                break;
              case 55:
                b.ΔⵠΔⲆᐃΔΔⲆᐃ(d[1]);
                break;
              case 56:
                b.ᐃᐃΔᐃⵠⲆⲆⲆᐃ(d[1]);
                break;
              case 57:
                b.ⵠᐃⲆΔⵠᐃΔⵠΔ();
                break;
              case 58:
                b.ᐃΔΔⲆᐃⲆⲆΔᐃ();
                break;
              case 59:
                b.ΔⵠⲆⵠΔᐃⵠΔᐃ();
                break;
              case 60:
                b.ΔΔᐃᐃⲆΔΔⵠⵠ();
                break;
              case 61:
                Gx.ᐃⵠⲆ.ⲆᐃΔⵠⵠΔΔ = 0.2;
                Gx.ᐃⵠⲆ.ᐃΔΔᐃΔ = 3;
                break;
              case 62:
                b.ΔᐃΔⲆⵠⲆⲆᐃⲆ(new Uint16Array(e));
                break;
              case 63:
                b.ᐃΔⲆΔᐃⲆⵠᐃⲆ();
                break;
              case 64:
                b.ΔᐃⵠΔⵠⲆΔΔⵠ();
                break;
              case 65:
                b.ᐃⲆⲆⵠᐃᐃᐃⲆᐃ();
                break;
              case 66:
                b.ΔⵠᐃⵠⵠⵠⵠᐃⲆ();
                break;
              case 67:
                b.ⲆΔⲆᐃᐃᐃⲆᐃΔ(d[1]);
                break;
              case 68:
                b.ⲆΔⲆᐃⲆΔⵠⲆⲆ(d[1]);
                break;
              case 69:
                b.ⲆΔᐃⲆⵠᐃᐃ(d[1]);
                break;
              case 70:
                b.ⲆⲆᐃᐃⲆⲆⵠⵠΔ(d[1]);
                break;
              case 71:
                b.ⵠⲆⲆᐃΔ(d[1]);
            }
          }
        }
      };
      b.ΔΔⵠᐃ.onerror = function () {
        if (Gx.reconnect.enabled) {
          jg.setTimeout(b.timeout, 2500);
        }
      };
      this.ΔΔⵠᐃ.onopen = function () {
        clearTimeout(b.ΔⵠᐃⲆⲆ);
        Gx.ΔΔⵠᐃⵠⵠᐃ = Gx.ΔΔⵠᐃⵠⵠᐃ || ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("token");
        ⵠᐃΔᐃ.ⲆᐃⵠΔⵠΔᐃ().then(a => {
          b.ΔΔⵠᐃ[jf](Gq[Aq].stringify([Ex.ⲆⵠΔⵠΔ.input.value, screen.width + 200, screen.height + 200, 52, Gx.ⲆΔΔⲆΔ, Gx.ⵠⵠᐃⲆⲆᐃⵠ, Gx.reconnect.enabled ? 1 : 0, Ex.ⵠⲆΔΔ, Ex.ᐃᐃⲆΔⵠ, Ex.ΔΔⲆᐃⵠ, Ex.ⲆΔⵠΔΔ, Ex.ⵠⵠΔⲆⲆ, Ex.Δᐃⵠⵠᐃ, _x === fh ? 0 : _x, $x === Bl ? 0 : $x.substring($x.length - 50), Gf, Gx.ΔΔⵠᐃⵠⵠᐃ, a, Gx.Δᐃᐃⵠⵠⵠᐃ, Gx.ⵠⵠⵠΔᐃΔⲆ]));
          Gx.ΔΔⵠᐃⵠⵠᐃ = undefined;
          Gx.Δᐃᐃⵠⵠⵠᐃ = undefined;
          Gx.ⵠⵠⵠΔᐃΔⲆ = ij;
          Gx.ⵠⲆΔⲆⲆⵠⵠ = Ua;
          b.ΔⵠᐃⲆⲆ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  var Jx = {
    ΔⲆΔⵠⵠ: qe
  };
  var Kx = new function () {
    this.ⵠⲆᐃᐃΔ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ⵠⲆⵠᐃⵠⲆᐃ = function (a) {
      return a / Fx.w * 100;
    };
    this.ⲆᐃΔΔΔⵠᐃ = function (a) {
      return a / Fx.ⲆΔΔ * 100;
    };
    this.ΔΔⵠⵠⲆⵠⲆ = function (a, b) {
      a = this.ⵠⲆⵠᐃⵠⲆᐃ(a) - this.ΔⵠⵠΔⵠ.x;
      return this.ΔⵠⵠΔⵠ.x + b * a;
    };
    this.ᐃᐃᐃⲆⵠΔΔ = function (a, b) {
      a = Math.abs(this.ⲆᐃΔΔΔⵠᐃ(a) - this.ΔⵠⵠΔⵠ.y);
      return this.ΔⵠⵠΔⵠ.y + b * a;
    };
    this.sample = {};
    this.ⵠⵠᐃΔⵠ = {};
    this.ΔⵠⵠΔ = {};
    this.ⲆΔⵠⵠⲆᐃᐃ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return Dh;
        }
      }
      return false;
    };
    this.ᐃⲆⵠ = function (a, b, c, d) {
      c = this.ΔΔⵠⵠⲆⵠⲆ(c, ⵠⲆⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆⲆ);
      d = this.ᐃᐃᐃⲆⵠΔΔ(d, ⵠⲆⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆⲆ);
      console.log("HIT", a, b, c, d, ⵠⲆⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆⲆ);
      if (a) {
        if (b === 1) {
          this.ⲆΔⵠⵠⲆᐃᐃ(this.ΔⵠⵠΔ.ᐃⲆⵠⲆΔⲆⲆ, this.sample.ᐃⲆⵠⲆΔⲆⲆ, c, d);
        } else if (b === 0) {
          this.ⲆΔⵠⵠⲆᐃᐃ(this.ΔⵠⵠΔ.ΔΔⵠⲆⵠΔⲆ, this.sample.ΔΔⵠⲆⵠΔⲆ, c, d);
        }
      } else {
        this.ⲆΔⵠⵠⲆᐃᐃ(this.ΔⵠⵠΔ.ⵠⵠⵠᐃΔ, this.sample.ⵠⵠⵠᐃΔ, c, d);
      }
    };
    this.ΔⵠⵠΔⵠ = {
      y: 0,
      x: 0
    };
    this.ΔᐃⵠΔⵠⵠⵠ = {
      x: 0,
      y: 0
    };
    this.ⵠⵠⲆⲆᐃ = {};
    this.ⵠⲆΔᐃ = [];
    this.ⵠⵠⲆⵠΔ = function (a, b) {
      for (var c in this.ⵠⵠⲆⲆᐃ) {
        var d = this.ⵠⵠⲆⲆᐃ[c];
        d.check(a);
        if (d.ᐃΔᐃⲆⲆⲆⵠ) {
          if (Fx.ΔᐃᐃⲆⵠ.now < 460000) {
            d.ΔⵠΔᐃᐃ();
          }
          if (b) {
            d.ᐃᐃⵠ(a, this.ΔⵠⵠΔⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ⲆⵠⵠᐃⲆᐃⲆⲆΔ = function () {
      var a = [];
      for (var b = 0; b < this.ⵠⲆΔᐃ.length; b++) {
        if ((e = this.ⵠⲆΔᐃ[b]).ΔⲆⲆΔⲆΔᐃ) {
          a.push(b);
        } else if (!e.ΔⲆⲆΔⲆΔᐃ && !Fx.ΔⲆᐃᐃ[e.ΔᐃⲆⵠ]) {
          e.ᐃⲆᐃΔⵠᐃⲆ();
          a.push(b);
        }
      }
      for (var c = Fx.Ⲇᐃⵠ[0], d = (b = 0, 0); c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((Fx.mode != 1 || Fx.ⵠⲆΔᐃ[e.id].ⲆⵠΔⵠΔ !== "spectator") && e.ⵠᐃΔᐃᐃ === -1 && e.ΔᐃⲆⵠ !== Gx.ΔᐃⲆⵠ) {
          this.ⵠⲆΔᐃ[a[d]].ΔⲆᐃᐃⵠ(e.ΔᐃⲆⵠ);
          d++;
        }
      }
    };
    this.ᐃⵠᐃⲆⲆΔⲆᐃⵠ = function () {
      this.ⲆⵠⵠᐃⲆᐃⲆⲆΔ();
      for (var a = 0; this.ⵠⲆΔᐃ.length > a; a++) {
        var b = this.ⵠⲆΔᐃ[a];
        if (!b.ΔⲆⲆΔⲆΔᐃ && b.check()) {
          b.ᐃᐃⵠ();
        }
      }
    };
    this.ᐃΔΔΔⲆⲆⲆΔⲆ = function (a) {
      if (a.x === this.ΔᐃⵠΔⵠⵠⵠ.x && a.y === this.ΔᐃⵠΔⵠⵠⵠ.y) {
        return 0;
      } else {
        this.ΔᐃⵠΔⵠⵠⵠ.x = a.x;
        this.ΔᐃⵠΔⵠⵠⵠ.y = a.y;
        this.ΔⵠⵠΔⵠ.x = this.ⵠⲆⵠᐃⵠⲆᐃ(a.x);
        this.ΔⵠⵠΔⵠ.y = this.ⲆᐃΔΔΔⵠᐃ(a.y);
        Howler.pos(this.ΔⵠⵠΔⵠ.x, this.ΔⵠⵠΔⵠ.y, 0);
        return 1;
      }
    };
    this.ᐃⲆⵠⵠᐃᐃᐃΔⵠ = function () {
      if (this.ⵠⲆᐃᐃΔ && this.loaded) {
        var a = Fx.ΔⲆᐃᐃ[Gx.ΔᐃⲆⵠ];
        if (a) {
          a.ⵠᐃΔᐃᐃ = 0;
          var b = this.ᐃΔΔΔⲆⲆⲆΔⲆ(a);
          if (Fx.mode !== 2 && Fx.mode !== 4 && Fx.mode !== 5) {
            this.ⵠⵠⲆⵠΔ(a, b);
          }
          this.ᐃⵠᐃⲆⲆΔⲆᐃⵠ();
        }
      }
    };
    this.ΔⵠⵠⲆᐃⲆⵠⲆΔ = function () {
      for (var b in ux) {
        var c = ux[b];
        if (typeof c === "object" && c.path) {
          c.ⵠᐃⵠⵠⲆ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.Ⲇⵠ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(Sa);
          for (var h = 0; h < f; h++) {
            var j = c.ⵠᐃⵠⵠⲆ.play(d);
            c.ⵠᐃⵠⵠⲆ.stop(j);
            c.ⵠᐃⵠⵠⲆ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(hs, Ij);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Kx.sample[d] = g;
          } else {
            Kx.sample[d] = g[0];
          }
          Kx.ΔⵠⵠΔ[d] = c.ⵠᐃⵠⵠⲆ;
        }
      }
    };
    this.ᐃⲆΔΔΔⵠᐃ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ΔⵠⵠⵠᐃΔⵠ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; d > i; i++) {
        var j = a[i] = [];
        for (ᐃΔⵠⵠ = 0; ᐃΔⵠⵠ < e; ᐃΔⵠⵠ++) {
          j[ᐃΔⵠⵠ] = Kx.sample[f + ᐃΔⵠⵠ][i];
          c.ⵠᐃⵠⵠⲆ.volume(g, j[ᐃΔⵠⵠ]);
        }
      }
    };
    this.ΔⲆᐃᐃⵠ = function () {
      Kx.ΔⵠⵠⲆᐃⲆⵠⲆΔ();
      Kx.ⵠⵠᐃΔⵠ.ⵠᐃⵠᐃΔᐃΔ = [];
      Kx.ⵠⵠᐃΔⵠ.ᐃΔᐃᐃΔ = [];
      Kx.ⵠⵠᐃΔⵠ.ΔΔᐃⲆᐃ = [];
      Kx.ΔⵠⵠⵠᐃΔⵠ(Kx.ⵠⵠᐃΔⵠ.ⵠᐃⵠᐃΔᐃΔ, ux.ΔⲆⵠⵠⵠⲆⲆ, 8, 3, "p", 0.15);
      Kx.ΔⵠⵠⵠᐃΔⵠ(Kx.ⵠⵠᐃΔⵠ.ᐃΔᐃᐃΔ, ux.ⲆⵠⵠΔⵠⵠⵠ, 8, 4, "w", 0.15);
      Kx.ΔⵠⵠⵠᐃΔⵠ(Kx.ⵠⵠᐃΔⵠ.ΔΔᐃⲆᐃ, ux.ⵠⵠⵠᐃⵠΔΔ, 8, 3, "d", 0.09);
      Kx.ᐃⲆΔΔΔⵠᐃ(Kx.sample.ⵠⵠⵠᐃΔ, Kx.ΔⵠⵠΔ.ⵠⵠⵠᐃΔ, 0.15);
      Kx.ᐃⲆΔΔΔⵠᐃ(Kx.sample.ΔΔⵠⲆⵠΔⲆ, Kx.ΔⵠⵠΔ.ΔΔⵠⲆⵠΔⲆ, 0.2);
      Kx.ᐃⲆΔΔΔⵠᐃ(Kx.sample.ᐃⲆⵠⲆΔⲆⲆ, Kx.ΔⵠⵠΔ.ᐃⲆⵠⲆΔⲆⲆ, 1);
      Kx.ⵠⵠⲆⲆᐃ.ⲆΔⲆⵠΔᐃΔΔⲆ = new vx(12, this.sample.ΔΔᐃⲆΔᐃΔ, this.sample.ⲆⵠΔΔΔⲆᐃ, 5000, 0.05, 0.4, ux.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ, 3000, {
        x: xs.ᐃⲆⲆᐃᐃΔⲆ,
        y: xs.ⵠΔⲆⲆΔᐃⲆ,
        w: Fx.w,
        ⲆΔΔ: Fx.ⲆΔΔ
      }, {
        x: xs.ᐃⲆⲆᐃᐃΔⲆ - 2300,
        y: xs.ⵠΔⲆⲆΔᐃⲆ - 4000,
        w: Fx.w,
        ⲆΔΔ: Fx.ⲆΔΔ
      }, {
        x: xs.ᐃⲆⲆᐃᐃΔⲆ - 1500,
        y: xs.ⵠΔⲆⲆΔᐃⲆ - 2000,
        w: Fx.w,
        ⲆΔΔ: Fx.ⲆΔΔ
      });
      Kx.ⵠⵠⲆⲆᐃ.ΔⵠΔⲆⵠⲆⵠΔᐃ = new vx(12, this.sample.ΔⲆⵠⲆⵠᐃΔ, this.sample.ⵠⲆⵠⲆⲆⵠᐃ, 5000, 0.03, 0.25, ux.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ, 3000, {
        x: 0,
        y: xs.ⵠΔⲆⲆΔᐃⲆ + 800,
        w: xs.ᐃⲆⲆᐃᐃΔⲆ - 2300,
        ⲆΔΔ: Fx.ⲆΔΔ
      }, {
        x: -100,
        y: xs.ⵠΔⲆⲆΔᐃⲆ - 300,
        w: xs.ᐃⲆⲆᐃᐃΔⲆ - 100,
        ⲆΔΔ: Fx.ⲆΔΔ
      }, {
        x: -100,
        y: xs.ⵠΔⲆⲆΔᐃⲆ + 400,
        w: xs.ᐃⲆⲆᐃᐃΔⲆ - 1400,
        ⲆΔΔ: Fx.ⲆΔΔ
      });
      Kx.ⵠⵠⲆⲆᐃ.ⵠΔⵠⲆⲆⲆⵠ = new vx(12, this.sample.ΔΔᐃᐃⲆⲆⵠ, this.sample.ⵠⵠⵠⵠΔⵠⲆ, 5000, 0.01, 0.22, ux.ᐃⵠᐃⲆᐃⵠⵠ.ⵠᐃⵠⵠⲆ, 3000, {
        x: -100,
        y: -100,
        w: Fx.w + 200,
        ⲆΔΔ: xs.ⵠΔⲆⲆΔᐃⲆ - 1000
      }, {
        x: -100,
        y: -100,
        w: Fx.w + 200,
        ⲆΔΔ: xs.ⵠΔⲆⲆΔᐃⲆ + 600
      }, {
        x: -100,
        y: -100,
        w: Fx.w + 200,
        ⲆΔΔ: xs.ⵠΔⲆⲆΔᐃⲆ + 100
      });
      for (var a = 0; a < 8; a++) {
        Kx.ⵠⲆΔᐃ[a] = new yx(a);
      }
      Kx.ⵠⲆΔᐃ[0].ΔⲆᐃᐃⵠ(Gx.ΔᐃⲆⵠ);
      Kx.loaded = 1;
    };
    this.ⲆⲆⵠᐃᐃᐃΔⲆⲆ = function () {
      if (!this.transition && Fx.ΔᐃᐃⲆⵠ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ΔⲆⵠᐃΔ = function () {
      if (this.ⵠⲆᐃᐃΔ && this.loaded) {
        for (var a in Kx.sample) {
          var b = Kx.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              Kx.ΔⵠⵠΔ[a].stop(b[c]);
            }
          } else {
            Kx.ΔⵠⵠΔ[a].stop(b);
          }
        }
        for (c = 0; c < Kx.ⵠⲆΔᐃ.length; c++) {
          Kx.ⵠⲆΔᐃ[c].ᐃⲆᐃΔⵠᐃⲆ();
        }
      }
    };
    this.select = function () {
      if (Kx.ⵠⲆᐃᐃΔ) {
        Kx.ΔⲆⵠᐃΔ();
      } else {
        if (!Kx.loaded) {
          Kx.ΔⲆᐃᐃⵠ();
        }
        Kx.ⵠⲆΔᐃ[0].ΔᐃⲆⵠ = Gx.ΔᐃⲆⵠ;
        Kx.ⵠⲆΔᐃ[0].ΔⲆⲆΔⲆΔᐃ = 0;
        Kx.ⲆⲆⵠᐃᐃᐃΔⲆⲆ();
      }
      Kx.ⵠⲆᐃᐃΔ = !Kx.ⵠⲆᐃᐃΔ;
    };
  }();
  var Lx = new function () {
    this.ⵠΔⵠⵠᐃΔⲆ = function () {
      this.ⲆⵠΔⲆΔ = 81;
      this.ⲆᐃⵠΔᐃ = 68;
      this.ᐃΔᐃᐃᐃ = 90;
      this.ⵠΔᐃⵠⲆᐃᐃ = 83;
    };
    this.ⵠⲆΔⵠⵠΔⲆ = function () {
      this.ⲆⵠΔⲆΔ = 65;
      this.ⲆᐃⵠΔᐃ = 68;
      this.ᐃΔᐃᐃᐃ = 87;
      this.ΔⲆᐃⲆᐃ = 83;
    };
    this.ᐃⲆⲆⵠᐃ = 0;
    this.ⵠΔᐃⵠⲆᐃᐃ = 1;
    this.ᐃᐃⲆᐃᐃᐃⲆ = 49;
    this.ⵠᐃΔᐃⵠⵠΔ = 50;
    this.ⵠΔⲆⲆⵠΔΔ = 51;
    this.ΔⲆΔΔᐃΔΔ = 52;
    this.ⵠⲆⲆᐃᐃᐃⵠⵠΔ = 53;
    this.ᐃⲆᐃΔⲆⵠⲆ = 17;
    this.ⵠⵠⵠΔᐃΔΔ = 37;
    this.ᐃΔΔΔⲆᐃΔ = 39;
    this.ⵠᐃⵠⵠⵠⵠᐃ = 38;
    this.ⵠΔᐃΔⵠΔᐃ = 40;
    this.ᐃᐃⲆᐃⲆᐃᐃ = 32;
    this.ⵠΔᐃᐃᐃⲆⲆ = 82;
    this.ⵠⵠⲆⵠⲆⲆᐃ = 71;
    this.ΔⵠᐃΔⵠᐃΔ = 86;
    this.ⲆⵠΔΔⵠⲆⲆ = 66;
    this.ⵠⲆΔⵠⵠΔⲆ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ᐃⲆⲆⵠᐃ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ᐃⲆⲆⵠᐃ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ⲆⵠΔⲆΔ == b || this.ⵠⵠⵠΔᐃΔΔ == b) {
        this.ᐃΔⵠⲆᐃⲆᐃ();
      } else if (b == this.ᐃΔᐃᐃᐃ || this.ⵠᐃⵠⵠⵠⵠᐃ == b) {
        this.ⲆᐃⲆᐃⵠᐃΔ();
      } else if (b == this.ⵠΔᐃⵠⲆᐃᐃ || this.ᐃⲆΔⲆⲆⵠⲆΔⵠ == b) {
        this.ᐃⵠⲆⵠᐃⵠᐃ();
      } else if (b == this.ⲆᐃⵠΔᐃ || b == this.ᐃΔΔΔⲆᐃΔ) {
        this.ΔⲆⲆᐃΔⲆΔ();
      }
      this.keys[b] = this.ⵠΔᐃⵠⲆᐃᐃ;
      return b;
    };
    this.ᐃΔⵠⲆᐃⲆᐃ = function () {
      this.keys[this.ⲆᐃⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ᐃΔΔΔⲆᐃΔ] = this.ᐃⲆⲆⵠᐃ;
    };
    this.ΔⲆⲆᐃΔⲆΔ = function () {
      this.keys[this.ⲆⵠΔⲆΔ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⵠⵠⵠΔᐃΔΔ] = this.ᐃⲆⲆⵠᐃ;
    };
    this.ᐃⵠⲆⵠᐃⵠᐃ = function () {
      this.keys[this.ᐃΔᐃᐃᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⵠᐃⵠⵠⵠⵠᐃ] = this.ᐃⲆⲆⵠᐃ;
    };
    this.ⲆᐃⲆᐃⵠᐃΔ = function () {
      this.keys[this.ΔⲆᐃⲆᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⵠΔᐃΔⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ;
    };
    this.ᐃᐃᐃⲆⵠΔⵠ = function () {
      this.keys[this.ⲆᐃⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ᐃΔΔΔⲆᐃΔ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⲆⵠΔⲆΔ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⵠⵠⵠΔᐃΔΔ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ᐃΔᐃᐃᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⵠᐃⵠⵠⵠⵠᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ΔⲆᐃⲆᐃ] = this.ᐃⲆⲆⵠᐃ;
      this.keys[this.ⵠΔᐃΔⵠΔᐃ] = this.ᐃⲆⲆⵠᐃ;
    };
    this.ΔᐃΔⵠᐃΔᐃ = function () {
      return this.keys[this.ⲆⵠΔⲆΔ] || this.keys[this.ⵠⵠⵠΔᐃΔΔ];
    };
    this.ᐃΔΔΔΔⲆᐃ = function () {
      return this.keys[this.ⲆᐃⵠΔᐃ] || this.keys[this.ᐃΔΔΔⲆᐃΔ];
    };
    this.ΔⵠⲆᐃΔⲆΔ = function () {
      return this.keys[this.ᐃΔᐃᐃᐃ] || this.keys[this.ⵠᐃⵠⵠⵠⵠᐃ];
    };
    this.ΔᐃⲆᐃⵠΔⲆ = function () {
      return this.keys[this.ΔⲆᐃⲆᐃ] || this.keys[this.ⵠΔᐃΔⵠΔᐃ];
    };
    this.ⲆΔᐃⵠⵠⲆᐃᐃⵠ = function () {
      return this.keys[this.ᐃⲆᐃΔⲆⵠⲆ];
    };
    this.ΔⵠⲆⲆⵠᐃⵠΔᐃ = function () {
      return this.keys[this.ᐃᐃⲆᐃᐃᐃⲆ];
    };
    this.ⲆⲆⵠᐃΔᐃΔⲆⲆ = function () {
      return this.keys[this.ⵠᐃΔᐃⵠⵠΔ];
    };
    this.ⵠΔΔⵠⲆⲆⲆΔΔ = function () {
      return this.keys[this.ⵠΔⲆⲆⵠΔΔ];
    };
    this.ΔΔⲆΔᐃΔΔⵠⵠ = function () {
      return this.keys[this.ΔⲆΔΔᐃΔΔ];
    };
    this.ⵠΔⵠᐃΔⲆΔΔᐃ = function () {
      return this.keys[this.ᐃᐃⲆᐃⲆᐃᐃ];
    };
    this.ᐃⵠΔⲆᐃⵠΔⵠⲆ = function () {
      return this.keys[this.ⵠΔᐃᐃᐃⲆⲆ];
    };
    this.ᐃΔⵠΔⵠⲆΔΔΔ = function () {
      return this.keys[this.ⵠⵠⲆⵠⲆⲆᐃ];
    };
    this.ᐃⵠⵠⵠᐃⵠⲆⵠᐃ = function () {
      return this.keys[this.ΔⵠᐃΔⵠᐃΔ];
    };
    this.ⵠΔⲆᐃⲆᐃᐃⵠⵠ = function () {
      return this.keys[this.ⲆⵠΔΔⵠⲆⲆ];
    };
  }();
  var Mx = new function () {
    this.ⵠΔᐃⵠⲆᐃᐃ = 0;
    this.ᐃⲆⲆⵠᐃ = 1;
    this.IDLE = 2;
    this.ⵠⵠΔⵠⵠᐃⵠ = 0;
    this.ⲆⵠΔⵠΔᐃΔᐃⲆ = 1;
    this.ⵠΔΔⲆ = {
      x: 0,
      y: 0
    };
    this.ⲆⵠΔⲆⲆⲆⵠ = 0;
    this.ᐃⲆᐃⲆΔΔᐃ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ᐃⲆΔⵠ = this.ⵠⵠΔⵠⵠᐃⵠ;
    this.down = function () {
      this.state = this.ⵠΔᐃⵠⲆᐃᐃ;
    };
    this.up = function () {
      this.state = this.ᐃⲆⲆⵠᐃ;
    };
    this.ᐃᐃⵠ = function () {
      if (this.ⲆⵠΔⲆⲆⲆⵠ != this.ⵠΔΔⲆ.x || this.ⵠΔΔⲆ.y != this.ᐃⲆᐃⲆΔΔᐃ) {
        this.ⲆⵠΔⲆⲆⲆⵠ = this.ⵠΔΔⲆ.x;
        this.ᐃⲆᐃⲆΔΔᐃ = this.ⵠΔΔⲆ.y;
        return Ej;
      } else {
        return Yi;
      }
    };
  }();
  var Nx = 0;
  var Ox = 0;
  var Px = new function (d, e, f) {
    this.ⲆⲆ = d;
    this.ᐃ = e;
    this.ΔΔⲆⲆⵠⵠᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ᐃᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔΔⲆⲆⵠⵠᐃ.style.position = "absolute";
    this.ΔΔⲆⲆⵠⵠᐃ.style.display = "inline-block";
    this.ΔΔⲆⲆⵠⵠᐃ.ᐃᐃⵠ();
    this.ΔⲆΔⵠⵠ = is;
    this.stop = function () {
      this.ΔⲆΔⵠⵠ = Ja;
    };
    this.ⲆⵠᐃⲆΔⵠᐃ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.Δᐃⵠᐃᐃ = function () {
      i.ᐃᐃⵠ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      jg.setTimeout(i.Δᐃⵠᐃᐃ, 33);
    };
    this.ΔⲆⵠᐃΔ = function (a) {
      j = a;
      i.Δᐃⵠᐃᐃ();
    };
    new Date().getTime();
    Object.keys(ΔⲆ).length;
    console.log(undefined, undefined);
    for (var o in ΔⲆ) {
      if (n(ΔⲆ[o]) === 0) {
        0;
      }
    }
    console.log(hg, undefined);
    function p() {
      if (this.ⵠᐃᐃⲆᐃⵠⲆ !== 0) {
        return this.ⵠᐃᐃⲆᐃⵠⲆ;
      } else {
        this.ⵠᐃᐃⲆᐃⵠⲆ = 2;
        this.src = this.ⵠᐃᐃᐃΔ;
        return 0;
      }
    }
    function g(a) {
      this.ⵠᐃᐃⲆᐃⵠⲆ = 1;
    }
    var l = 0;
    function q() {
      console.log(undefined);
      if (l !== 1) {
        l = 1;
        console.log(undefined);
        if (Tb !== rd) {
          Tb();
        }
        rd();
        var a = ⵠᐃΔᐃ.ⵠⲆⵠⵠⵠⲆⲆ("server");
        if (a !== null) {
          Ix.ⲆΔΔⲆᐃⲆᐃ = 1;
          Ix.ᐃⲆΔⲆⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        Ix.ᐃⵠΔⲆⵠⲆᐃᐃᐃ();
        setTimeout(f, 100);
      }
    }
    function b() {
      let a = function () {
        Ix.ⵠⲆⵠΔΔⵠⵠ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ΔΔⵠⲆᐃⵠᐃ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ΔΔⵠⲆᐃⵠᐃ}`, this);
      if (this.ΔΔⵠⲆᐃⵠᐃ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ΔΔⵠⲆᐃⵠᐃ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ΔⲆΔⲆΔΔⵠ) {
          if (b.indexOf(ΔⲆΔⲆΔΔⵠ[c]) !== -1) {
            ΔⲆ[c] = new Image();
            ΔⲆ[c].onload = g;
            ΔⲆ[c].onerror = s;
            ΔⲆ[c].ΔΔⵠⲆᐃⵠᐃ = a;
            ΔⲆ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function m(a) {
      for (var b in ΔⲆ) {
        var c = ΔⲆ[b];
        if (typeof c === "string" && n(c) === a) {
          ΔⲆ[b] = new Image();
          ΔⲆ[b].ⵠᐃᐃⲆᐃⵠⲆ = 0;
          ΔⲆ[b].ΔΔⵠⲆᐃⵠᐃ = 0;
          ΔⲆ[b].onload = g;
          ΔⲆ[b].onerror = s;
          ΔⲆ[b].ΔⲆΔᐃΔⲆΔ = p;
          ΔⲆ[b].ⵠᐃᐃᐃΔ = c;
        }
      }
    }
    m(1);
    m(0);
    xm(1, "l", 20, "#000");
    b();
    Rp();
    this.ᐃᐃⵠ = function () {
      this.ΔΔⲆⲆⵠⵠᐃ.translate.x = (Mo - 500) / 2;
      this.ΔΔⲆⲆⵠⵠᐃ.translate.y = (Do - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ΔΔⲆⲆⵠⵠᐃ.translate.y -= a;
      this.ΔΔⲆⲆⵠⵠᐃ.ᐃᐃⵠ();
    };
    this.ΔΔⲆⲆⵠⵠᐃ.ᐃᐃⵠ();
    this.ⲆᐃᐃⲆ = function () {
      try {
        Cp();
      } catch (a) { }
      this.ᐃᐃⵠ();
    };
  }(ko, Jo, function () {
    uc();
    Jx = new nx(ko, Jo);
    (Ex = new lx(ko, Jo)).ⲆΔΔⵠⲆΔⲆⵠⵠ();
    Hx = new mx(ko, Jo);
    Fx = new Uw();
    Gx = new $w();
    Px.ΔⲆⵠᐃΔ(function () {
      Px.ΔΔⲆⲆⵠⵠᐃ.style.display = "none";
      Ex.ⵠⲆᐃᐃΔ();
    });
  });
  function Qx() {
    try {
      jg.Widget.adsRefresh();
    } catch (a) { }
  }
  jg.onbeforeunload = function () {
    if (Jx.ΔⲆΔⵠⵠ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  nr();
  (function b(a) {
    jg.requestAnimationFrame(b);
    Ox = (a - Nx) / 1000;
    Nx = a;
    Ox = Ox > 1 ? 1 : Ox;
    if (Jx.ΔⲆΔⵠⵠ) {
      Jx.ⲆᐃᐃⲆ();
    } else {
      Jo.clearRect(0, 0, Mo, Do);
      if (Px.ΔⲆΔⵠⵠ) {
        Px.ⲆᐃᐃⲆ();
      } else if (Ex.ΔⲆΔⵠⵠ) {
        Ex.ⲆᐃᐃⲆ();
      } else if (Hx.ΔⲆΔⵠⵠ) {
        Hx.ⲆᐃᐃⲆ();
      }
    }
  })(0);
  const [workerTimersSetInterval, unusedWorkerTimersSetTimeout] = (() => {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));

    // node_modules/fast-unique-numbers/build/es5/bundle.js
    var require_bundle = __commonJS({
      "node_modules/fast-unique-numbers/build/es5/bundle.js"(exports, module) {
        (function (global, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.fastUniqueNumbers = {}));
        })(exports, function (exports2) {
          "use strict";
          var createAddUniqueNumber = function createAddUniqueNumber2(generateUniqueNumber3) {
            return function (set) {
              var number = generateUniqueNumber3(set);
              set.add(number);
              return number;
            };
          };
          var createCache = function createCache2(lastNumberWeakMap) {
            return function (collection, nextNumber) {
              lastNumberWeakMap.set(collection, nextNumber);
              return nextNumber;
            };
          };
          var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER;
          var TWO_TO_THE_POWER_OF_TWENTY_NINE = 536870912;
          var TWO_TO_THE_POWER_OF_THIRTY = TWO_TO_THE_POWER_OF_TWENTY_NINE * 2;
          var createGenerateUniqueNumber = function createGenerateUniqueNumber2(cache2, lastNumberWeakMap) {
            return function (collection) {
              var lastNumber = lastNumberWeakMap.get(collection);
              var nextNumber = lastNumber === void 0 ? collection.size : lastNumber < TWO_TO_THE_POWER_OF_THIRTY ? lastNumber + 1 : 0;
              if (!collection.has(nextNumber)) {
                return cache2(collection, nextNumber);
              }
              if (collection.size < TWO_TO_THE_POWER_OF_TWENTY_NINE) {
                while (collection.has(nextNumber)) {
                  nextNumber = Math.floor(Math.random() * TWO_TO_THE_POWER_OF_THIRTY);
                }
                return cache2(collection, nextNumber);
              }
              if (collection.size > MAX_SAFE_INTEGER) {
                throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
              }
              while (collection.has(nextNumber)) {
                nextNumber = Math.floor(Math.random() * MAX_SAFE_INTEGER);
              }
              return cache2(collection, nextNumber);
            };
          };
          var LAST_NUMBER_WEAK_MAP = /* @__PURE__ */ new WeakMap();
          var cache = createCache(LAST_NUMBER_WEAK_MAP);
          var generateUniqueNumber2 = createGenerateUniqueNumber(cache, LAST_NUMBER_WEAK_MAP);
          var addUniqueNumber = createAddUniqueNumber(generateUniqueNumber2);
          exports2.addUniqueNumber = addUniqueNumber;
          exports2.generateUniqueNumber = generateUniqueNumber2;
        });
      }
    });

    // node_modules/worker-timers-broker/build/es2019/module.js
    var import_fast_unique_numbers = __toESM(require_bundle());

    // node_modules/worker-timers-broker/build/es2019/guards/call-notification.js
    var isCallNotification = (message) => {
      return message.method !== void 0 && message.method === "call";
    };

    // node_modules/worker-timers-broker/build/es2019/guards/clear-response.js
    var isClearResponse = (message) => {
      return typeof message.id === "number" && typeof message.result === "boolean";
    };

    // node_modules/worker-timers-broker/build/es2019/module.js
    var load = (url) => {
      const scheduledIntervalFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const scheduledTimeoutFunctions = /* @__PURE__ */ new Map([[0, () => {
      }]]);
      const unrespondedRequests = /* @__PURE__ */ new Map();
      const worker2 = new Worker(url);
      worker2.addEventListener("message", ({ data }) => {
        if (isCallNotification(data)) {
          const { params: { timerId, timerType } } = data;
          if (timerType === "interval") {
            const idOrFunc = scheduledIntervalFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
            }
          } else if (timerType === "timeout") {
            const idOrFunc = scheduledTimeoutFunctions.get(timerId);
            if (typeof idOrFunc === void 0) {
              throw new Error("The timer is in an undefined state.");
            }
            if (typeof idOrFunc === "number") {
              const timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
              if (timerIdAndTimerType === void 0 || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                throw new Error("The timer is in an undefined state.");
              }
            } else if (typeof idOrFunc === "function") {
              idOrFunc();
              scheduledTimeoutFunctions.delete(timerId);
            }
          }
        } else if (isClearResponse(data)) {
          const { id } = data;
          const timerIdAndTimerType = unrespondedRequests.get(id);
          if (timerIdAndTimerType === void 0) {
            throw new Error("The timer is in an undefined state.");
          }
          const { timerId, timerType } = timerIdAndTimerType;
          unrespondedRequests.delete(id);
          if (timerType === "interval") {
            scheduledIntervalFunctions.delete(timerId);
          } else {
            scheduledTimeoutFunctions.delete(timerId);
          }
        } else {
          const { error: { message } } = data;
          throw new Error(message);
        }
      });
      const clearInterval = (timerId) => {
        if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "interval" });
          scheduledIntervalFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "interval" }
          });
        }
      };
      const clearTimeout = (timerId) => {
        if (typeof scheduledTimeoutFunctions.get(timerId) === "function") {
          const id = (0, import_fast_unique_numbers.generateUniqueNumber)(unrespondedRequests);
          unrespondedRequests.set(id, { timerId, timerType: "timeout" });
          scheduledTimeoutFunctions.set(timerId, id);
          worker2.postMessage({
            id,
            method: "clear",
            params: { timerId, timerType: "timeout" }
          });
        }
      };
      const setInterval2 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, () => {
          func(...args);
          if (typeof scheduledIntervalFunctions.get(timerId) === "function") {
            worker2.postMessage({
              id: null,
              method: "set",
              params: {
                delay,
                now: performance.timeOrigin + performance.now(),
                timerId,
                timerType: "interval"
              }
            });
          }
        });
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "interval"
          }
        });
        return timerId;
      };
      const setTimeout3 = (func, delay = 0, ...args) => {
        const timerId = (0, import_fast_unique_numbers.generateUniqueNumber)(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, () => func(...args));
        worker2.postMessage({
          id: null,
          method: "set",
          params: {
            delay,
            now: performance.timeOrigin + performance.now(),
            timerId,
            timerType: "timeout"
          }
        });
        return timerId;
      };
      return {
        clearInterval,
        clearTimeout,
        setInterval: setInterval2,
        setTimeout: setTimeout3
      };
    };

    // node_modules/worker-timers/build/es2019/factories/load-or-return-broker.js
    var createLoadOrReturnBroker = (loadBroker, worker2) => {
      let broker = null;
      return () => {
        if (broker !== null) {
          return broker;
        }
        const blob = new Blob([worker2], { type: "application/javascript; charset=utf-8" });
        const url = URL.createObjectURL(blob);
        broker = loadBroker(url);
        setTimeout(() => URL.revokeObjectURL(url));
        return broker;
      };
    };

    // node_modules/worker-timers/build/es2019/worker/worker.js
    var worker = `(()=>{"use strict";const e=new Map,t=new Map,r=t=>{const r=e.get(t);return void 0!==r&&(clearTimeout(r),e.delete(t),!0)},s=e=>{const r=t.get(e);return void 0!==r&&(clearTimeout(r),t.delete(e),!0)},o=(e,t)=>{const r=performance.now(),s=e+t-r-performance.timeOrigin;return{expected:r+s,remainingDelay:s}},i=(e,t,r,s)=>{const o=r-performance.now();o>0?e.set(t,setTimeout(i,o,e,t,r,s)):(e.delete(t),postMessage({id:null,method:"call",params:{timerId:t,timerType:s}}))};addEventListener("message",(n=>{let{data:a}=n;try{if("clear"===a.method){const{id:e,params:{timerId:t,timerType:o}}=a;if("interval"===o)postMessage({id:e,result:r(t)});else{if("timeout"!==o)throw new Error('The given type "'.concat(o,'" is not supported'));postMessage({id:e,result:s(t)})}}else{if("set"!==a.method)throw new Error('The given method "'.concat(a.method,'" is not supported'));{const{params:{delay:r,now:s,timerId:n,timerType:m}}=a;if("interval"===m)((t,r,s)=>{const{expected:n,remainingDelay:a}=o(t,s);e.set(r,setTimeout(i,a,e,r,n,"interval"))})(r,n,s);else{if("timeout"!==m)throw new Error('The given type "'.concat(m,'" is not supported'));((e,r,s)=>{const{expected:n,remainingDelay:a}=o(e,s);t.set(r,setTimeout(i,a,t,r,n,"timeout"))})(r,n,s)}}}}catch(e){postMessage({error:{message:e.message},id:a.id,result:null})}}))})();`;

    // node_modules/worker-timers/build/es2019/module.js
    var loadOrReturnBroker = createLoadOrReturnBroker(load, worker);
    var setInterval = (...args) => loadOrReturnBroker().setInterval(...args);
    var setTimeout2 = (...args) => loadOrReturnBroker().setTimeout(...args);

    return [setInterval, setTimeout2]
  })();
  workerTimersSetInterval(function () {
    Gx.ᐃⲆΔΔᐃ.ᐃᐃⵠ();
  }, 2e3);
  workerTimersSetInterval(function () {
    try {
      if (!Jx.ⲆⲆᐃⵠ.open) {
        Ix.ping();
      }
    } catch {}
  }, 1000 * 60);
  var Rx = 0;
  function Sx() {
    Tx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", $n);
    Tx.send();
  }
  var Tx = new XMLHttpRequest();
  Tx.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Ux = "https://token.starve.io/";
  var Vx = "https://token2.starve.io/";
  var Wx = 0;
  var Xx = 1;
  var Yx = 4;
  var Zx = Sa;
  var $x = fh;
  var _x = Ij;
  var ay = 0;
  jg.ⵠⲆᐃⲆΔᐃⵠ = function () {
    ay = 1;
  };
  var gy = {
    ⲆΔΔⲆⵠⵠΔᐃΔ: "ACCESS_TOKEN"
  };
  var cy = document.createElement("script");
  cy.type = "text/javascript";
  cy.async = Ui;
  cy.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  cy.addEventListener("load", function (a) {
    jg.XPayStationWidget.init(gy);
    jg.XPayStationWidget.on("status-done", uy);
  }, Yi);
  document.getElementsByTagName("head")[0].appendChild(cy);
  jg.fbAsyncInit = function () {
    sy();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var hy = undefined;
  var jy = undefined;
  function ly() {
    jg.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (hy = a).isSignedIn.listen(fy);
      hy.currentUser.listen(ny);
      if (hy.isSignedIn.get()) {
        hy.signIn();
      }
      py();
    });
  }
  function fy(a) { }
  function ny(a) {
    if ($x === Cs && fh !== jy && ($x = jy.getAuthResponse().id_token) !== undefined) {
      Zx = Wx;
      _x = jy.getBasicProfile().getId();
      jg.ⵠⲆᐃⲆΔᐃⵠ();
      return;
    }
    if (a !== Ij && a.isSignedIn() === is) {
      _x = (jy = a).id;
      _x = jy.getBasicProfile().getId();
      $x = jy.getAuthResponse().id_token;
      Zx = Wx;
      jg.ⵠⲆᐃⲆΔᐃⵠ();
    }
  }
  function py() {
    if (hy) {
      jy = hy.currentUser.get();
    }
  }
  function qy(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Ux + "setRegion?token=" + $x + "&userid=" + _x + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          Ex.ᐃⲆⲆⵠ(Ex.ᐃᐃⲆᐃΔ);
        } else {
          Ex.ᐃⲆⲆⵠ(Ex.ⲆΔⵠⲆᐃ);
        }
      }
    };
    b.send();
  }
  function ry(b, c, d, e) {
    b = b === Ij ? Ex.ⵠΔᐃⲆⲆⵠⲆ : b;
    c = Es === c ? Ex.ⵠⵠᐃⵠⵠᐃⵠ : c;
    d = d === hs ? Ex.ⵠⵠⲆⵠⲆⵠΔ : d;
    e = e === Gm ? Ex.ΔᐃⵠΔΔⵠⲆ : e;
    if (b !== Ex.ⵠΔᐃⲆⲆⵠⲆ || c !== Ex.ⵠⵠᐃⵠⵠᐃⵠ || Ex.ⵠⵠⲆⵠⲆⵠΔ !== d || e !== Ex.ΔᐃⵠΔΔⵠⲆ) {
      Ex.ⵠΔᐃⲆⲆⵠⲆ = b;
      Ex.ⵠⵠᐃⵠⵠᐃⵠ = c;
      Ex.ⵠⵠⲆⵠⲆⵠΔ = d;
      Ex.ΔᐃⵠΔΔⵠⲆ = e;
      if (e === Ex.ⵠⵠⵠᐃᐃΔⲆ) {
        e = "0";
      } else if (Ex.ⲆⵠⵠΔⵠᐃᐃ === e) {
        e = "1";
      } else if (e === Ex.ⲆⵠᐃⲆⵠⵠᐃ) {
        e = "2";
      } else if (e === Ex.ⲆⵠⲆᐃⲆᐃⵠ) {
        e = "3";
      } else if (e === Ex.ⵠᐃⲆⲆᐃⵠᐃ) {
        e = "4";
      } else if (e === Ex.ΔᐃΔᐃⲆᐃⵠ) {
        e = "5";
      }
      if (Ex.Δⵠᐃᐃᐃⵠⵠ === c) {
        c = "total";
      } else if (Ex.ⲆᐃⵠᐃⵠΔⲆ === c) {
        c = "normal";
      } else if (Ex.ⲆᐃᐃᐃⲆⵠΔ === c) {
        c = "zombie";
      } else if (Ex.ᐃΔⵠᐃⲆΔᐃ === c) {
        c = "vampire";
      } else if (Ex.ΔⲆⲆᐃⲆⲆⲆ === c) {
        c = "forest";
      }
      if (Ex.ⲆΔⲆⲆᐃΔΔ === b) {
        b = "all";
      }
      if (Ex.ΔᐃⲆⵠΔΔⵠ === b) {
        b = "week";
      }
      if (b === Ex.ᐃᐃⵠⲆⵠⵠⲆ) {
        b = "today";
      }
      if (d === Ex.ⵠᐃᐃⲆᐃΔΔ) {
        d = "kill";
      } else if (Ex.ᐃⵠⲆⵠⵠⵠᐃ === d) {
        d = "score";
      } else if (d === Ex.ᐃᐃⲆⵠᐃᐃΔ) {
        d = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Ux + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            ᐃⲆⵠᐃⵠ = a[c];
            var d = ᐃⲆⵠᐃⵠ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = jg.decodeURIComponent(jg.escape(jg.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += Ex.ⲆᐃⲆⵠᐃⲆΔ(ᐃⲆⵠᐃⵠ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ᐃⲆⵠᐃⵠ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ᐃⲆⵠᐃⵠ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ᐃⲆⵠᐃⵠ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function ky() {
    if (Ex.ⲆⵠⵠΔⲆ >= 300 || Ex.ᐃⲆΔⵠⵠⵠⲆ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Ux + "changeNickname?token=" + $x + "&userid=" + _x + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              Ex.ⲆⵠⵠΔⲆ -= a;
            }
            Ex.ᐃⲆΔⵠⵠⵠⲆ = 1;
            Ex.ᐃⲆⲆⵠ(Ex.ΔⲆⲆⵠⵠ);
          }
        };
        b.send();
      }
    }
  }
  function sy() {
    if (jg.FB) {
      jg.FB.init({
        xfbml: T,
        cookie: Qk,
        version: "v15.0",
        appId: "642017356260407"
      });
    }
    if (_x === undefined) {
      (function () {
        try {
          if (jg.FB && jg.FB.getUserID()) {
            _x = jg.FB.getUserID();
            if ($x === undefined) {
              jg.FB.getLoginStatus(function () {
                Zx = Xx;
                $x = jg.FB.getAuthResponse().accessToken;
                jg.ⵠⲆᐃⲆΔᐃⵠ(_x);
              });
            }
          }
        } catch (a) { }
        try {
          _x = jy.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function ty(a, b) {
    if (Ex.ΔⲆΔⵠᐃ <= 0) {
      if (Ex.ⲆⵠⵠΔⲆ < b) {
        Ex.ᐃⲆⲆⵠ(Ex.ⲆⲆΔΔⲆ);
      } else {
        Ex.ΔⲆΔⵠᐃ = 2;
        Ex.ⲆᐃⲆⵠΔᐃᐃ = 0;
        Ex.ΔⲆⵠᐃΔΔᐃ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Ux + "buySpin?token=" + $x + "&userid=" + _x + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              Ex.ΔΔⲆΔⲆΔⵠⲆⵠ(a.rand * Math.PI * 2, a.type, a.id);
              Ex.ⲆⵠⵠΔⲆ -= b;
            } else {
              Ex.ΔⲆΔⵠᐃ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function uy() {
    var a = new XMLHttpRequest();
    a.open("GET", Ux + "claimBread?userid=" + _x);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          Ex.ⲆⵠⵠΔⲆ = b;
        }
      }
    };
    a.send();
  }
  ;
  function wy(a, b) {
    if (b > Ex.ⲆⵠⵠΔⲆ) {
      Ex.ᐃⲆⲆⵠ(Ex.ⲆⲆΔΔⲆ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Ux + "buyKit?token=" + $x + "&userid=" + _x + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          Ex.ⲆⵠⵠΔⲆ -= b;
          Ex.ᐃⲆⲆΔⵠ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function xy(a) {
    if (_x) {
      var b = new XMLHttpRequest();
      b.open("GET", Ux + "xsolla?userid=" + _x + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          gy.access_token = b.responseText;
          jg.XPayStationWidget.init(gy);
          jg.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
})();
