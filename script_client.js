(function () {
  var u = 189;
  if (u > 11) {
    u = 85;
  }
  const Ya = window;
  var y = 53;
  if (y > 10) {
    y = 137;
  }
  var bc = 101;
  if (bc > 8) {
    bc = 217;
  }
  let hc = 210;
  Math.floor(154[154 .ⵠᐃΔᐃⵠⵠⲆ]);
  const Yf = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += Ya.String.fromCharCode(a[c] ^ hc++ % 255);
    }
    return b;
  };
  var a = 28;
  if (a >= 10) {
    a = 244;
  }
  var cg = 108;
  if (cg > 7) {
    cg = 86;
  }
  var Mg = 82;
  if (Mg === 6) {
    Mg = 135;
  }
  Math.floor(5[5 .ⵠΔᐃⲆΔΔⲆᐃⵠ]);
  Math.floor(84[84 .ΔⵠΔⲆⲆⲆⵠᐃΔ]);
  var $h = 152;
  if ($h > 9) {
    $h = 52;
  }
  const aj = 16;
  const g = 255;
  const b = -8;
  const d = 14;
  const bj = undefined;
  const c = 8;
  const m = 15;
  const p = 1;
  const v = -4;
  function C(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function f(a) {
    return Ya.String.fromCharCode(a);
  }
  const T = true;
  const w = 20;
  const z = 12;
  const k = 18;
  const A = 1;
  const x = 14;
  const cj = false;
  const J = 17;
  const B = 256;
  const E = 19;
  const D = 3;
  const I = 100;
  const M = 5;
  const P = 13;
  const Q = 11;
  const F = 1 << 1;
  const R = 7;
  const j = 4;
  const G = 4;
  const L = 9;
  const S = 6;
  const O = 10;
  const q = 1 << 11;
  const N = 6;
  const H = 4096;
  const U = 13;
  const W = 4;
  const K = 20;
  var V = Ya.console;
  V.log = V.info = V.error = V.warn = V.debug = V.ⲆᐃᐃⲆⵠⵠᐃⵠᐃ = V.trace = V.time = V.timeEnd = function () {};
  const X = 13;
  const Y = 2;
  const Z = 12;
  const _ = 0;
  let ee;
  const ie = 8;
  let oe;
  let te;
  let dj;
  let ej = bj;
  let fj = bj;
  let gj = bj;
  const hj = T;
  const ue = 11;
  let be = bj;
  let ij = [];
  const ve = 256;
  const ce = cj;
  let me = "_";
  let jj = bj;
  const kj = 14;
  const Te = 15;
  const fe = 12;
  let ze;
  const lj = 10;
  let we;
  const mj = 9;
  let ke = bj;
  const nj = 10;
  const xe = 14;
  const Je = 17;
  let Me;
  let oj;
  let pj;
  let qj;
  let rj = bj;
  let sj = bj;
  const tj = 255;
  const _e = ce;
  let Fe;
  const uj = 100;
  let je;
  const vj = 20;
  let Le;
  let wj = bj;
  const xj = 16;
  let qe;
  let yj;
  let zj = bj;
  let Aj = bj;
  let Bj = bj;
  const Cj = 9;
  const Ve = bj;
  let Xe = Ve;
  let Dj = Ve;
  const Ej = Ve;
  const ei = 18;
  const ii = 16;
  let ti = bj;
  const Fj = 5;
  const oi = 14;
  let ai = Ve;
  const Gj = 7;
  const si = 6;
  const hi = _e;
  let li;
  const Hj = 6;
  const ui = 0;
  let bi;
  let Ij;
  let Jj;
  let Kj = Ve;
  let Lj = Ej;
  let Mj = bj;
  const Nj = 19;
  let Ti;
  const Oj = 17;
  let zi = bj;
  let Pj = Ve;
  let Qj = Ve;
  const Rj = 14;
  let ki;
  const Sj = 4;
  const xi = 11;
  const Ji = 1;
  const Mi = 3;
  const Bi = 5;
  let Ei;
  const Tj = 6;
  let Ii;
  let Uj;
  let Vj = Ej;
  const Wj = 15;
  const Fi = 16;
  let Ri;
  const Xj = T;
  const Gi = 2;
  let Li = Ve;
  const Yj = 256;
  let Oi = Ej;
  const Zj = 100;
  const Ni = 13;
  const Hi = 12;
  let Ui = 0;
  let $j = bj;
  if (!Ya.WebAssembly || !Ya.WebAssembly.instantiate) {
    ᐃⵠᐃᐃΔⲆⲆΔΔ();
  }
  const _j = {
    Date: Date
  };
  Ya.WebAssembly.instantiate(Uint8Array.from(Ya.atob(""), function (a) {
    return a.charCodeAt(0);
  }), _j).then(function (a) {
    ee = a.instance;
    ej = ee.exports;
    oe = ej.memory;
    te = oe.buffer;
    dj = ej.__pin;
    gj = ej.__unpin;
    fj = ej.__new;
    be = ej.__collect;
    me = "_";
    for (let b = 0; b < 31; b++) {
      ij[b] = ej[me + b];
    }
    jj = ej.__rtti_base;
    ze = new Float32Array(te);
    we = new Float64Array(te);
    ke = new BigUint64Array(te);
    Me = new Uint32Array(te);
    oj = new Uint16Array(te);
    pj = new Uint8Array(te);
    qj = new BigInt64Array(te);
    sj = new Int32Array(te);
    rj = new Int16Array(te);
    Fe = new Int8Array(te);
    bi = ij[10];
    Lj = ij[0];
    Kj = ij[21];
    Ti = ij[29];
    Jj = ij[27];
    Bj = ij[22];
    Li = ij[2];
    Ei = ij[11];
    wj = ij[13];
    ki = ij[3];
    Ri = ij[23];
    Xe = ij[30];
    je = ij[26];
    ti = ij[25];
    Uj = ij[19];
    Ii = ij[17];
    Pj = ij[28];
    Oi = ij[15];
    Mj = ij[6];
    zi = ij[16];
    qe = ij[24];
    Aj = ij[7];
    Dj = ij[4];
    zj = ij[5];
    Vj = ij[8];
    Qj = ij[12];
    yj = ij[1];
    ai = ij[9];
    Ij = ij[18];
    li = ij[14];
    Le = ij[20];
    Ui = 1;
    if ($j) {
      $j();
    }
  });
  const Vi = function (a) {
    return Me[(jj + 4 >>> 2) + (a << 1)];
  };
  const Xi = 9;
  function Zi(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const $i = 20;
  const ak = 10;
  function bk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return ze;
        case 3:
          return we;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Fe;
          } else {
            return pj;
          }
        case 1:
          if (b) {
            return rj;
          } else {
            return oj;
          }
        case 2:
          if (b) {
            return sj;
          } else {
            return Me;
          }
        case 3:
          if (b) {
            return qj;
          } else {
            return ke;
          }
      }
    }
  }
  const ck = 8;
  function dk(c) {
    const d = Me[c + b >>> 2];
    const e = Vi(d);
    const f = Zi(e);
    let g = e & 4 ? c : Me[c + 4 >>> 2];
    const h = e & F ? Me[c + 12 >>> 2] : Me[g + v >>> 2] >>> f;
    return bk(f, e & q, e & H).subarray(g >>>= f, g + h);
  }
  const ek = 18;
  const fk = 20;
  const gk = "development";
  const hk = "production";
  function ik(a) {
    this.ⵠΔΔⲆ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⵠΔΔⲆ - 1));
  }
  const jk = 18;
  ik.prototype.random = function () {
    this.state = (this.state * this.a + this.c) % this.ⵠΔΔⲆ;
    return this.state / this.ⵠΔΔⲆ;
  };
  ik.prototype.ⲆΔⵠᐃⲆΔᐃ = function (a) {
    this.state = a;
  };
  const kk = 255;
  ⲆⵠⲆⲆⵠⵠᐃ = 10000;
  const lk = 14;
  const mk = hi;
  const nk = 15;
  ⲆΔΔΔᐃⵠⵠ = [];
  var ok = new ik();
  ok.ⲆΔⵠᐃⲆΔᐃ(new Date().getTime());
  const pk = 15;
  const qk = 5;
  function rk(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function sk(a) {
    return Ya.String.fromCharCode(a);
  }
  const tk = 0;
  for (var uk = 0; uk < ⲆⵠⲆⲆⵠⵠᐃ; uk++) {
    ⲆΔΔΔᐃⵠⵠ.push(ok.random());
  }
  const vk = 19;
  function wk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const g = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const i = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const j = function (b, e, f, g, i, j) {
      const a = b ^ 10715;
      const k = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const m = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = g ^ 40782;
      const l = i ^ 41301;
      const n = ~(j & 12091) & (j | 12091);
      const d = Qk(a, k, m, h, l, n);
      Qk(a, k, m, h, l, n);
      rn(a, k, m, h, l);
      const o = (d | 3006) & ~(d & 3006);
      return ~(o & 24460) & (o | 24460);
    }(f, g, a, i, f, g);
    const h = cn(a, i, f, g, a);
    Qk(i, f, g, a, i, f);
    const k = (1013904223 + (26191 + (j ^ h)) * 1664525) % 4294967296;
    return (k | 38630) & ~(k & 38630);
  }
  const xk = 17;
  const yk = 1;
  function zk(c, d, e, f, g) {
    const i = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = d ^ 63080;
    const j = ((e + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (g | 40165) & ~(g & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const g = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const i = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const j = Ek(f, g, a, i);
      const h = bn(f, g, a, i);
      wk(f, g, a, i);
      const k = (24 << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 16 & 255)) + (16 << ((j ^ h) >> 32 & 255)) + (32 << ((j ^ h) >> 8 & 255));
      return ~(k & 63304) & (k | 63304);
    }(i, a, j, k);
    const m = cn(h, i, a, j, k);
    return ((28765 + ((16 << ((l ^ m) >> 24 & 255)) + (8 << ((l ^ m) >> 16 & 255)) + (24 << ((l ^ m) >> 32 & 255)) + (32 << ((l ^ m) >> 8 & 255)) ^ tn(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function Ak(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = un(a, m, n, h, l);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const g = (j | 45652) & ~(j & 45652);
      const n = un(a, k, m, h, l);
      zk(g, a, k, m, h);
      nn(l, g, a, k, m, h);
      return n ^ 60048;
    }(g, a, m, n, h, l);
    en(g, a, m, n, h, l);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  const Bk = Ej;
  function Ck(b, c, e, f, i) {
    const j = (12345 + (23101 + b) * 1103515245) % 2147483648;
    const a = c ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const l = vn(j, a);
    const g = wk(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = pn(c, d, c);
        Vk(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ Fk(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = fn(a, j, f, i, a);
      vn(j, f);
      const l = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const Dk = 10;
  function Ek(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function Fk(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = Ek(i, a, j, k);
    fn(h, i, a, j, k);
    en(h, i, a, j, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  const Gk = 15;
  function Hk(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = sn(i, a);
    fn(j, k, h, i, a);
    nn(j, k, h, i, a, j);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const Ik = 18;
  const Jk = 7;
  function Kk(b, c, e, f, g, i) {
    const a = (1013904223 + (b + 28824) * 1664525) % 4294967296;
    const j = (1013904223 + (13210 + c) * 1664525) % 4294967296;
    const k = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const l = (1 + (39199 + g) * 22695477) % 4294967296;
    const m = i ^ 33037;
    const d = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = Tl(e, f, g, e, f);
      const i = tn(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = nn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = zk(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Nk(a, m, n, h);
                const b = fn(l, g, a, m, n);
                const d = Nk(h, l, g, a);
              })(g, e, f, g, e, f);
              bn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            rn(d, c, d, c, d);
            Ek(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          Vk(j, k, h, i);
          const g = Hk(a, j, k, h, i);
        })(c, d, c, d, c);
        sn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
      return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(a, j, k);
    bn(h, l, m, a);
    return ((34159 + (d ^ 2959 ^ Nk(j, k, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  const Lk = 19;
  const Mk = 11;
  function Nk(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = un(f, i, a, j, f);
      const h = Ck(i, a, j, f, i);
      const l = on(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    bn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ un(f, g, a, i, f))) * 214013) % 4294967296;
  }
  const Ok = 2;
  const Pk = 3;
  function Qk(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (mn(a, j, k, h, l) ^ bn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ rn(h, l, g, a, j))) * 1103515245) % 2147483648;
  }
  const Rk = 255;
  const Sk = 13;
  const Tk = 100;
  const Uk = 8;
  function Vk(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = Ak(f, g, a, i, f, g);
    bn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ en(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  const Wk = 6;
  const Xk = 9;
  const Yk = 4;
  const Zk = 17;
  const $k = 18;
  const _k = hj;
  const wl = 20;
  function Tl(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const l = en(i, a, j, k, h, i);
    const g = Ek(a, j, k, h);
    pn(i, a, j);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
  }
  function en(b, c, d, e, f, g) {
    const a = b ^ 23409;
    const i = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (Ek(a, i, d ^ 53590, e ^ 36633) ^ Ek(j, h, a, i))) * 22695477 + 1) % 4294967296;
  }
  const an = 16;
  function nn(b, c, e, f, i, j) {
    const a = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const k = (c | 41551) & ~(c & 41551);
    const m = (24 << (e >> 24 & 255)) + (16 << (e >> 32 & 255)) + (8 << (e >> 16 & 255)) + (32 << (e >> 8 & 255));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const n = tn(a, k, m, h, l, g);
    Fk(a, k, m, h, l);
    Ek(g, a, k, m);
    const d = ~(n & 8077) & 8077 | ~(n & 8077) & n;
    return ~(d & 3708) & (d | 3708);
  }
  function on(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = en(d, e, d, e, d, e);
    const g = en(d, e, d, e, d, e);
    Ek(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  const hn = 12;
  var ln = Ya.Math.acos;
  Ya.Math.acos = Ya.Math.asin;
  Ya.Math.asin = ln;
  var gn = Ya.Math.cos;
  Ya.Math.cos = Ya.Math.sin;
  Ya.Math.sin = gn;
  function rn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = en(i, a, j, k, h, i);
    const g = nn(a, j, k, h, i, a);
    Ek(j, k, h, i);
    return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  function bn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = sn(f, g);
    sn(a, i);
    cn(f, g, a, i, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  const dn = 1;
  function sn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (mn(c, d, c, d, c) ^ fn(d, c, d, c, d))) % 65357 ^ Ek(c, d, c, d))) * 22695477) % 4294967296;
  }
  function cn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = Fk(j, a, k, m, h);
    const g = vn(j, a);
    Fk(k, m, h, j, a);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function mn(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = fn(j, a, k, m, h);
    const g = rn(j, a, k, m, h);
    Ek(j, a, k, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function pn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = Hk(e, f, g, e, f);
    const h = Hk(g, e, f, g, e);
    Hk(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  function tn(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const l = on((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = on(a, j);
    on(k, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  function un(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = zk(i, a, j, k, h);
    tn(i, a, j, k, h, i);
    return ((3037 + (l ^ 57467 ^ cn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  function fn(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = tn(i, a, j, k, h, i);
    tn(a, j, k, h, i, a);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Ek(j, k, h, i))) * 214013) % 4294967296;
  }
  ;
  function vn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Hk(d, e, d, e, d);
    const g = mn(e, d, e, d, e);
    Tl(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  ⲆᐃΔ = {
    ᐃΔᐃⵠⲆΔⲆ: () => new Promise((a, b) => {
      Ya.grecaptcha.ready(function () {
        Ya.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (gf) {
            a(0);
          } else {
            console.log(bj);
            b(c);
          }
        });
      });
    }),
    ᐃᐃⵠΔᐃᐃⵠⵠⵠ: function (a) {
      Ya.open(a, "_blank").focus();
    },
    Δᐃᐃᐃᐃᐃⵠ: function (a) {
      Ya.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔⲆⲆⵠΔΔΔ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return _e;
        }
      }
      return _k;
    },
    ⲆⵠⲆΔΔⵠΔΔᐃ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ΔⲆⲆⵠΔΔΔ(a[c], b[c])) {
            return cj;
          }
        } else if (a[c] != b[c]) {
          return cj;
        }
      }
      return true;
    },
    ᐃᐃΔⲆΔᐃᐃ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ΔⵠⲆᐃᐃⲆΔ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⵠᐃⲆΔᐃᐃᐃⵠΔ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⲆⵠᐃΔⵠᐃΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ᐃᐃᐃΔΔᐃⵠ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ΔⵠΔⵠⵠΔⵠ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⲆⲆⵠΔⲆⵠΔ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ΔⵠⲆⵠⵠΔᐃ: function (a, b) {
      return Math.asin(this.ⲆⵠᐃΔⵠᐃΔ(a, b) / (this.ᐃᐃᐃΔΔᐃⵠ(a) * this.ᐃᐃᐃΔΔᐃⵠ(b))) * this.sign(this.ΔⵠΔⵠⵠΔⵠ(a, b));
    },
    ΔⵠΔⲆᐃⵠᐃ: function (a) {
      ⲆΔΔᐃⲆᐃΔ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆΔΔᐃⲆᐃΔ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⵠⲆⵠⵠᐃᐃΔ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ᐃⲆⵠΔᐃᐃᐃ: function (a, b) {
      return this.ΔⵠⲆⵠⵠΔᐃ({
        x: 1,
        y: 0
      }, this.ΔⵠⲆᐃᐃⲆΔ(a, b));
    },
    ᐃᐃⵠΔ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ᐃⲆⲆΔΔᐃᐃ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ᐃⲆΔᐃⲆⲆᐃ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆΔΔⵠᐃⵠⲆ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ΔᐃΔΔᐃΔᐃΔⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ΔΔᐃⲆᐃᐃΔΔⵠ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⲆᐃⲆᐃΔ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⲆⵠᐃⲆᐃⲆⵠ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⵠᐃⲆΔᐃⲆⲆ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ⵠΔⲆΔⵠⵠⲆ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ΔΔⲆΔΔΔΔᐃⵠ: function (b, c, d) {
      var e = this.ⵠΔⲆΔⵠⵠⲆ();
      var f = this.ⵠΔⲆΔⵠⵠⲆ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ᐃⵠΔᐃᐃΔΔᐃᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃⵠⲆ = d;
    },
    ⵠΔᐃⵠΔᐃᐃⵠᐃ: function (a) {
      ΔⵠⲆ = [];
      ΔⵠⲆ.push.apply(ΔⵠⲆ, a);
      var b = [];
      while (ΔⵠⲆ.length > 0) {
        var c = Math.floor(Math.random() * ΔⵠⲆ.length);
        b.push(ΔⵠⲆ[c]);
        ΔⵠⲆ.splice(c, 1);
      }
      return b;
    },
    ⲆⲆⵠⵠᐃΔΔ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⲆᐃⵠⵠᐃⲆΔ: function (b) {
      if (typeof b !== "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ⵠⲆΔⵠⵠⵠⲆ: function (a) {
      return a * (2 - a);
    },
    ΔⲆᐃⵠΔᐃᐃ: function (a) {
      return --a * a * a + 1;
    },
    ⵠᐃⲆᐃⵠ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ⵠᐃⵠⲆⵠᐃᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ᐃⵠᐃᐃⲆΔᐃⲆⲆ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ΔΔⲆⲆΔΔⵠ: function (a) {
      return 1 - --a * a * a * a;
    },
    ⲆᐃⵠⵠᐃᐃⲆ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ΔⲆⵠᐃ: function (b, c, d, e, f, g) {
      this.ᐃⲆᐃ = b;
      this.ⲆⵠΔ = c;
      this.max = d;
      this.min = e;
      this.ⵠⵠⲆⲆΔⵠᐃ = f;
      this.ⲆᐃᐃΔⲆΔΔ = g;
      this.ⵠΔⲆΔΔᐃΔ = 0;
      this.ⵠⵠᐃ = function () {
        if (this.ᐃⲆᐃ) {
          if ((a = this.ⲆⵠΔ + rx * this.ⵠⵠⲆⲆΔⵠᐃ) > this.max) {
            this.ⲆⵠΔ = this.max;
            this.ᐃⲆᐃ = hi;
            return true;
          }
          this.ⲆⵠΔ = a;
        } else {
          var a;
          if ((a = this.ⲆⵠΔ - rx * this.ⲆᐃᐃΔⲆΔΔ) < this.min) {
            this.ⲆⵠΔ = this.min;
            this.ᐃⲆᐃ = true;
          } else {
            this.ⲆⵠΔ = a;
          }
        }
      };
      return mk;
    },
    ᐃⲆΔⲆᐃ: function (b, c, d, e, f, g) {
      this.ⵠᐃⵠⵠΔ = b;
      this.ⲆᐃᐃΔΔ = c;
      this.ⵠᐃⵠⲆΔ = d;
      this.ⵠΔΔΔΔ = e;
      this.x = f;
      this.ᐃⲆᐃⵠⲆ = g;
      this.ⲆᐃⵠⲆⲆΔⵠ = function () {
        this.x = this.ⲆⲆⵠΔᐃⲆⵠⵠΔ;
        this.ⲆᐃᐃΔΔ = 0;
      };
      this.ⲆᐃⲆᐃΔΔⵠ = function (a) {
        if (a !== this.ᐃⲆᐃⵠⲆ) {
          this.ᐃⲆᐃⵠⲆ = a;
          this.ⵠΔΔΔΔ = this.x;
          this.ⲆᐃᐃΔΔ = 0;
        }
        if (this.ᐃⲆᐃⵠⲆ !== this.x) {
          this.ⲆᐃᐃΔΔ += rx;
          if (this.ⲆᐃᐃΔΔ > this.ⵠᐃⵠⲆΔ) {
            this.x = this.ᐃⲆᐃⵠⲆ;
          } else {
            var b = this.ⵠᐃⵠⵠΔ(this.ⲆᐃᐃΔΔ / this.ⵠᐃⵠⲆΔ);
            this.x = this.ⵠΔΔΔΔ + (this.ᐃⲆᐃⵠⲆ - this.ⵠΔΔΔΔ) * b;
          }
        }
      };
    },
    ⵠᐃⲆⵠᐃⲆⵠ: function (b, c, d, e, f, g, a, i, j) {
      this.ⵠᐃⵠⵠΔ = b;
      this.ⲆᐃᐃΔΔ = c;
      this.ⵠᐃⵠⲆΔ = d;
      this.ⵠΔΔΔΔ = e;
      this.ᐃΔΔΔΔ = f;
      this.x = g;
      this.y = a;
      this.ᐃⲆᐃⵠⲆ = i;
      this.ⵠᐃⵠΔⲆΔⲆ = j;
      this.ⲆᐃⲆᐃΔΔⵠ = function (a) {
        if (a.x != this.ᐃⲆᐃⵠⲆ || a.y != this.ⵠᐃⵠΔⲆΔⲆ) {
          this.ᐃⲆᐃⵠⲆ = a.x;
          this.ⵠᐃⵠΔⲆΔⲆ = a.y;
          this.ⵠΔΔΔΔ = this.x;
          this.ᐃΔΔΔΔ = this.y;
          this.ⲆᐃᐃΔΔ = 0;
        }
        if (this.ᐃⲆᐃⵠⲆ != this.x || this.ⵠᐃⵠΔⲆΔⲆ != this.y) {
          this.ⲆᐃᐃΔΔ += rx;
          if (this.ⲆᐃᐃΔΔ > this.ⵠᐃⵠⲆΔ) {
            this.x = this.ᐃⲆᐃⵠⲆ;
            this.y = this.ⵠᐃⵠΔⲆΔⲆ;
          } else {
            var b = this.ⵠᐃⵠⵠΔ(this.ⲆᐃᐃΔΔ / this.ⵠᐃⵠⲆΔ);
            this.x = this.ⵠΔΔΔΔ + (this.ᐃⲆᐃⵠⲆ - this.ⵠΔΔΔΔ) * b;
            this.y = this.ᐃΔΔΔΔ + (this.ⵠᐃⵠΔⲆΔⲆ - this.ᐃΔΔΔΔ) * b;
          }
        }
      };
    },
    ⵠⵠᐃᐃⲆⵠⵠ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ΔΔⵠᐃⵠᐃΔ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⲆⲆΔⵠⲆ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ΔᐃⲆᐃⲆΔⵠ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃⵠⲆ;
    },
    ⲆΔᐃⵠᐃΔΔ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ⵠⵠᐃᐃⵠΔᐃ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ⵠᐃΔⵠⲆⲆⲆ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const wn = hj;
  const yn = 16;
  function kn(b, c) {
    const d = (24 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b & 255)) + (0 << (b >> 8 & 255));
    const e = (c + 16671) % 65352;
    const f = dw(d, e, d, e, d);
    const g = Zf(e, d, e, d, e, d);
    return (0 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 0 & 255));
  }
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⵠⵠᐃᐃⲆⲆⲆⵠⲆ;
  };
  (function (a) {
    var b = _e;
    if (typeof ⲆⲆⲆᐃⲆⵠΔ === "function" && ⲆⲆⲆᐃⲆⵠΔ.ⵠⲆᐃᐃᐃᐃⵠ) {
      ⲆⲆⲆᐃⲆⵠΔ(a);
      b = true;
    }
    if (typeof ΔΔⵠᐃⵠⲆΔ === "object") {
      ⲆᐃⵠᐃⵠᐃⵠΔΔ.exports = a();
      b = T;
    }
    if (!b) {
      var c = Ya.ⵠⵠᐃΔ;
      var d = Ya.ⵠⵠᐃΔ = a();
      d.ⵠᐃΔᐃⲆΔⲆᐃᐃ = function () {
        Ya.ⵠⵠᐃΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⵠΔⵠⵠᐃΔᐃ, j)).expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ᐃⵠᐃᐃⲆΔⵠⲆᐃ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
            var p = n[l].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) {}
              }
              if (s === e) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) {}
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ᐃⲆⵠΔᐃΔⲆᐃⲆ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ⵠΔⵠⵠᐃΔᐃ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ᐃⲆⲆᐃΔᐃⲆⲆΔ = a;
      return d;
    }(function () {});
  });
  const zn = 4;
  const xn = 1;
  function An(b, c, d, e, f) {
    zi(Dw, b, c, d, e, f);
    const g = Ww(of[0], of[1], of[2], of[3], of[4], of[0]);
    ef(of[1], of[2], of[3], of[4], of[0]);
    return g ^ 33424;
  }
  const Cn = Ve;
  const Bn = 255;
  const En = mk;
  const Dn = 14;
  function In(a, b) {
    Oi(Dw, a, b);
    const c = yw(of[0], of[1], of[0]);
    const d = Ww(of[1], of[0], of[1], of[0], of[1], of[0]);
    return (16 << ((c ^ d) >> 16 & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) & 255)) + (8 << ((c ^ d) >> 8 & 255));
  }
  var Jn = document.getElementById("game_canvas");
  const Mn = 6;
  const Pn = bj;
  const Fn = 7;
  const Qn = 256;
  const jn = Xj;
  var Gn = Jn.getContext("2d");
  var Ln = Jn.width;
  const Rn = 4;
  const On = 100;
  var qn = Jn.height;
  var Sn = Jn.width / 2;
  var Tn = Jn.height / 2;
  const Zn = 20;
  const Yn = 5;
  const Kn = 2;
  function Vn(a) {
    const b = function () {
      for (let a = 0; a < 5; a++) {
        Ya.addEventListener("click", function () {
          b();
        });
      }
    };
    b();
  }
  var Xn = {
    x: Sn,
    y: Tn
  };
  const _n = 17;
  var eo = 1;
  var aq = 1;
  const bq = 15;
  const no = 18;
  var oo = -1;
  var cq = "J" + ca;
  const dq = 17;
  const so = 7;
  var ho = "S" + ja;
  const eq = 0;
  const go = Cn;
  const uo = 13;
  var bo = Ya;
  const vo = 8;
  const co = 17;
  const mo = 4;
  const po = 10;
  const Co = 19;
  const To = 15;
  const fo = 6;
  var zo;
  const fq = 20;
  const wo = 2;
  var Po = (No = "O") + "N";
  const gq = 11;
  const Ao = _e;
  const xo = 14;
  const Jo = 100;
  var Mo;
  const hq = Xj;
  const Eo = 256;
  var Do = 0;
  var Io = bo;
  function So(a) {
    return Ya.String.fromCharCode(a);
  }
  var Qo;
  (function b() {
    const c = {
      ⲆⵠΔⲆⵠΔⵠᐃⵠ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(Ya.Math.floor(1 + Ya.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new Ya.Function(g);
    Ya.setTimeout(b, 10000);
    e();
  })();
  ho = "N";
  var iq = "J";
  const jq = 18;
  const Ro = 7;
  const jo = String.fromCharCode;
  const Go = jo(101);
  const Lo = jo(118);
  const Wo = jo(97);
  const Oo = jo(108);
  const qo = (0, Ya[Go + Lo + Wo + Oo])(function a() {
    ⲆᐃΔΔΔⵠⵠ = a;
    return a;
  } + "try{ΔⲆⲆᐃⵠ();0;}catch(ᐃᐃΔⲆⵠᐃᐃ){1;}");
  if (qo) {
    const a = Ya.setInterval;
    const b = a;
    const c = function () {
      a(c, 4588);
      b(c, 4343);
    };
    c();
  }
  var No = "O" + ca;
  const kq = hi;
  const Uo = 12;
  var Yo = Io;
  const Ko = 9;
  const Vo = 3;
  var Xo;
  const lq = 255;
  var $o = Yo;
  Po = "N" + undefined;
  const ea = 16;
  const ia = 4;
  var ta;
  var mq = $o;
  const oa = 15;
  const aa = 18;
  const ra = cj;
  var sa;
  const nq = 11;
  var la;
  var oq = mq;
  const ba = 8;
  const da = 20;
  const va = 14;
  var ca;
  const pq = 6;
  var pa = oq;
  const Ca = 2;
  var Ta;
  const qq = 10;
  const za = hj;
  const ya = 2;
  const wa = 10;
  const Pa = 256;
  const ka = 1;
  var Aa = pa;
  iq = "O";
  const rq = 100;
  const Ja = Cn;
  const Ma = 2;
  const Ba = 17;
  const Ea = 18;
  var Da;
  const sq = 13;
  var Sa = Aa = pa;
  const Qa = 5;
  var _a;
  const tq = 10;
  var Ra = Sa;
  var ja = "J" + (Da = "S");
  const Ga = 19;
  Jn.oncontextmenu = function () {
    return false;
  };
  const La = 255;
  const Wa = Bk;
  function Oa(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⲆⵠⵠΔΔᐃΔ = 1;
    return b;
  }
  cq = "J";
  const uq = 6;
  function Na(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ha(a) {
    return Ya.String.fromCharCode(a);
  }
  const Ua = 8;
  const Ka = 10;
  const Va = 18;
  const Xa = Ao;
  const Za = 7;
  const $a = 256;
  No = Po;
  const vq = 17;
  const wq = 8;
  const xq = 9;
  const yq = 0;
  const zq = 16;
  Qo = zo = Mo = ja + (iq += cq = ho);
  Po = ca;
  ca = ja;
  const Aq = 12;
  const Bq = 17;
  ca = ja;
  No = ja;
  const Cq = 3;
  Xo = ta = ja + iq;
  ho = iq + cq;
  const Dq = {};
  Dq.get = function (a, b) {
    if (b !== "ΔᐃⲆΔⲆᐃⲆ") {
      const a = function () {
        Ya.addEventListener("mousemove", function () {
          a();
        });
      };
      a();
    }
    return Ya.Reflect.get(...arguments);
  };
  new Ya.Proxy({}, Dq).ΔᐃⲆΔⲆᐃⲆ;
  const Eq = 19;
  sa = zo;
  const Fq = 16;
  No = ja + iq;
  la = Mo;
  const Gq = 15;
  const Hq = 20;
  Po = ja + iq;
  Ta = Qo;
  const Iq = 14;
  iq = ca;
  Da = Mo;
  const Jq = T;
  const Kq = 13;
  _a = zo;
  cq = No;
  const Lq = 7;
  var Mq = Ya.devicePixelRatio || 1;
  const Nq = 9;
  const Oq = 3;
  var Pq = Gn.ᐃⵠᐃᐃΔⵠⲆⲆⵠ || Gn.ᐃΔⵠΔΔⵠⲆΔΔ || Gn.ⵠΔᐃᐃᐃΔΔᐃⵠ || Gn.ⲆᐃᐃᐃⲆⵠΔⵠⲆ || Gn.ᐃⲆᐃⲆⲆΔᐃⲆⲆ || 1;
  function Qq() {
    if (Ya.innerWidth != Jn.width) {
      Jn.width = Ya.innerWidth;
      Ln = Jn.width;
      Sn = Jn.width / 2;
    }
    if (Jn.height != Ya.innerHeight) {
      Jn.height = Ya.innerHeight;
      qn = Jn.height;
      Tn = Jn.height / 2;
    }
    Xn = {
      x: Sn,
      y: Tn
    };
    var a = Jn.width;
    var b = Jn.height;
    aq = oo === -1 ? Mq / Pq : oo;
    Jn.width = aq * a;
    Jn.height = b * aq;
    Jn.style.width = a + "px";
    Jn.style.height = b + "px";
    Gn.scale(aq, aq);
    if (lx) {
      lx.ⲆⲆⵠ.ⲆⲆᐃⵠⵠΔᐃ = a;
      lx.ⲆⲆⵠ.ⲆⵠⲆⲆΔΔⲆ = b;
    }
    if (tx.ⲆⵠⵠⲆᐃ) {
      tx.ⵠⵠᐃ();
    } else if (hx.ⲆⵠⵠⲆᐃ) {
      hx.ⵠⵠᐃ();
    } else if (nx.ⲆⵠⵠⲆᐃ) {
      nx.ⵠⵠᐃ();
    } else if (mx.ⲆⵠⵠⲆᐃ) {
      mx.ⵠⵠᐃ();
    }
  }
  ;
  var Rq = document.getElementById("game_body");
  const Sq = 11;
  Rq.ondragstart = function () {
    return hi;
  };
  Rq.ondrop = function () {
    return false;
  };
  Rq.onresize = Qq;
  const Tq = 100;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !Ya.requestAnimationFrame; ++c) {
      Ya.requestAnimationFrame = Ya[a[c] + "RequestAnimationFrame"];
      Ya.cancelAnimationFrame = Ya[a[c] + "CancelAnimationFrame"] || Ya[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!Ya.requestAnimationFrame) {
      Ya.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var f = Math.max(0, 16 - (e - b));
        var a = Ya.setTimeout(function () {
          c(e + f);
        }, f);
        b = e + f;
        return a;
      };
    }
    Ya.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Uq = 9;
  function Vq(a, b, c, d) {
    wj(Dw, a, b, c, d);
    return ((162 + (In(of[0], of[1]) ^ function (b, c, d, e, f, g) {
      li(Dw, b, c, d, e, f, g);
      const a = function (b, c, d, e, f, g) {
        ki(Dw, b, c, d, e, f, g);
        const a = function (b, c, d, e) {
          ti(Dw, b, c, d, e);
          const f = function (a, b) {
            Dj(Dw, a, b);
            const c = fx(of[0], of[1]);
            const d = An(of[0], of[1], of[0], of[1], of[0]);
            return (16 << ((c ^ d) & 255)) + (0 << ((c ^ d) >> 16 & 255)) + (8 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) >> 8 & 255));
          }(of[0], of[1]);
          const g = ef(of[2], of[3], of[0], of[1], of[2]);
          return (8 << ((f ^ g) >> 24 & 255)) + (0 << ((f ^ g) & 255)) + (16 << ((f ^ g) >> 16 & 255)) + (24 << ((f ^ g) >> 8 & 255));
        }(of[0], of[1], of[2], of[3]);
        const h = Ww(of[4], of[5], of[0], of[1], of[2], of[3]);
        return (40141 + (a ^ h)) % 65386;
      }(of[0], of[1], of[2], of[3], of[4], of[5]);
      const h = yw(of[0], of[1], of[2]);
      return (16 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 0 & 255));
    }(of[2], of[3], of[0], of[1], of[2], of[3]))) * 48271 + 0) % 2147483647;
  }
  const Wq = function () {
    let i = 0;
    let j = 0;
    let k = 0;
    const q = ⲆᐃΔ.ⲆⲆΔⵠⲆ([115, 116, 97, 99, 107]);
    const o = ⲆᐃΔ.ⲆⲆΔⵠⲆ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const a = ⲆᐃΔ.ⲆⲆΔⵠⲆ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const r = ⲆᐃΔ.ⲆⲆΔⵠⲆ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
    ⲆᐃΔ.ⲆⲆΔⵠⲆ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const s = ⲆᐃΔ.ⲆⲆΔⵠⲆ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ⲆᐃΔ.ⲆⲆΔⵠⲆ([105, 110, 100, 101, 120, 79, 102]);
    const l = ⲆᐃΔ.ⲆⲆΔⵠⲆ([77, 97, 116, 104]);
    ⲆᐃΔ.ⲆⲆΔⵠⲆ([99, 101, 105, 108]);
    const g = ⲆᐃΔ.ⲆⲆΔⵠⲆ([102, 108, 111, 111, 114]);
    const u = ⲆᐃΔ.ⲆⲆΔⵠⲆ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const b = ⲆᐃΔ.ⲆⲆΔⵠⲆ([115, 101, 110, 100]);
    const d = ⲆᐃΔ.ⲆⲆΔⵠⲆ([115, 105, 103, 110]);
    const v = ⲆᐃΔ.ⲆⲆΔⵠⲆ([102, 105, 108, 108, 82, 101, 99, 116]);
    const c = ⲆᐃΔ.ⲆⲆΔⵠⲆ([103, 117, 105, 102, 121]);
    const m = ⲆᐃΔ.ⲆⲆΔⵠⲆ([101, 118, 97, 108]);
    const p = ⲆᐃΔ.ⲆⲆΔⵠⲆ([67, 66, 79]);
    const w = ⲆᐃΔ.ⲆⲆΔⵠⲆ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
    function x(a) {
      try {
        Ya[m](a);
        return 1;
      } catch (a) {
        return 0;
      }
    }
    function f(a) {
      try {
        a();
      } catch (a) {
        if (a[q][h](s) !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    return {
      ΔⵠΔᐃⲆⲆⵠ: function () {
        i++;
        if (i > 1000) {
          i = 0;
          j = f(Ya[o][a][r]) || j;
          j = f(Ya[o][a][v]) || j;
          j = f(Ya[u][a][b]) || j;
          j = function (a) {
            try {
              new a();
            } catch (a) {
              if (a[q][h](s) !== -1) {
                return 1;
              } else {
                return 0;
              }
            }
            return 0;
          }(Ya[u]) || j;
          j = x(w) || j;
          j = x(p) || j;
          if (Ya[c] !== Bk) {
            j = 1;
          }
        }
        if (j === 1) {
          k++;
          if (k > 10000) {
            k = 0;
            Ya[l][g] = Ya[l][d];
          }
        }
      },
      ⲆᐃΔⵠΔⲆᐃ: function () {
        return j;
      }
    };
  }();
  const Xq = 2;
  const Yq = 6;
  var Zq = navigator.language || navigator.userLanguage;
  var $q = -new Date().getTimezoneOffset() / 60;
  const _q = 4;
  var ar = "Europe";
  const br = 3;
  const cr = ra;
  const dr = 3;
  var er = "South America";
  const fr = 16;
  const gr = hj;
  var hr = ar;
  const ir = 18;
  const jr = 13;
  if ($q >= -2 && $q <= 2) {
    hr = ar;
  } else if ($q > 2 && $q <= 5) {
    hr = "Russia";
  } else if ($q > 5 && $q <= 9) {
    hr = "Asia";
  } else if ($q > 9) {
    hr = "Australia";
  } else if ($q >= -5 && $q < -2) {
    hr = Zq === "pt-BR" || Zq === "pt-br" || Zq === "pt" || Zq === "pt-pt" ? er : "North America";
  } else if ($q < -5) {
    hr = Zq === "pt-BR" || Zq === "pt-br" || Zq === "pt" || Zq === "pt-pt" ? er : "West America";
  }
  const kr = 7;
  var ik = {
    ⵠΔᐃⵠⵠⵠᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.ΔⵠΔΔⵠ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const lr = 256;
  const mr = Ej;
  const nr = 255;
  const or = 11;
  function pr(b, c, d, e, f) {
    const i = ((b + 64625) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 47473) & (c | 47473);
    const j = (12345 + (16077 + d) * 1103515245) % 2147483648;
    const k = (2147483587 + (56006 + e) * 2147483629) % 2147483647;
    const h = (f | 64701) & ~(f & 64701);
    const l = bx(i, a, j, k);
    const g = Qw(h, i, a, j, k, h);
    return (1 + (45335 + (l ^ g)) * 22695477) % 4294967296;
  }
  var qr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  const rr = 20;
  var sr = 0;
  var tr = {
    ᐃⵠΔⲆⵠ: ["#133A2B", "#042b30"],
    ᐃⲆΔⵠᐃⲆᐃⲆᐃ: ["#EBF2F0", "#136167"],
    ⵠΔᐃⲆⲆⲆᐃ: ["#4EB687", "#187484"],
    ⲆⲆᐃⲆⲆⲆⲆ: ["#664516", "#13474C"],
    ΔᐃⵠⵠᐃⲆᐃ: ["#FCEFBB", "#0F4D48"],
    ΔⵠⲆΔᐃᐃⵠ: ["#C1AA7E", "#0F423D"],
    ⲆΔΔⵠⵠΔΔ: ["#594837", "#163A3A"],
    ᐃΔΔⲆΔⵠᐃ: ["#A5D6D6", "#539CA0"],
    ΔΔᐃⵠΔ: ["#0B6A84", "#09373F"],
    ⲆΔΔΔᐃΔΔ: ["#2A8B9B", "#0F464C"],
    ⵠᐃᐃΔΔᐃΔ: ["#A9D6D3", "#115E60"],
    ⲆᐃⲆⵠᐃᐃⵠ: ["#ECF7F9", "#539CA0"],
    ᐃⲆⲆΔᐃΔⲆ: ["#FFF", "#FFF"],
    ΔⵠⲆᐃᐃΔⲆ: ["#FFF", "#FFF"],
    ⲆⵠᐃⲆΔᐃⲆ: ["#1C9BA4", "#00272F"],
    ΔᐃΔᐃⲆ: ["#2D2017", "#031C1E"],
    ⵠΔⵠ: 0,
    Ⲇᐃᐃ: 1,
    ΔⵠΔᐃΔⲆᐃⵠΔ: 2300,
    ⵠⲆΔΔⲆᐃΔⲆⲆ: 2290,
    ΔⵠᐃⲆᐃⵠΔ: 34,
    ⵠⲆⵠΔᐃΔⵠ: 5,
    ⵠᐃᐃΔΔᐃⲆ: 68,
    ⵠᐃⵠᐃⲆΔⲆ: 34,
    ⵠⲆΔᐃᐃΔΔ: 5,
    ⵠⲆᐃΔⵠⲆⵠ: 1,
    ⵠⲆⲆⵠΔΔⵠ: 0.6,
    ⲆΔⵠᐃⵠⲆᐃ: 0.25,
    ΔⲆΔΔΔᐃⵠ: 50,
    ᐃᐃⵠᐃⲆⵠⵠ: 10,
    ⵠΔⵠᐃΔΔΔ: 75,
    ΔⲆⵠⵠⵠΔᐃ: 20,
    ⲆⵠΔᐃᐃⲆⲆ: 5,
    ⵠΔΔᐃⵠ: 0,
    ᐃⲆᐃⲆⲆ: 1,
    ᐃⲆΔⲆⲆ: 2,
    ᐃᐃᐃᐃᐃ: 3,
    ᐃᐃⲆⲆⲆ: 4,
    ⵠΔⲆⵠⲆ: 5,
    ⵠⵠⲆΔΔ: 6,
    ⲆΔⵠⵠᐃ: 7,
    ⵠΔⲆⲆΔ: 8,
    ΔⵠΔⵠⵠ: 9,
    ΔⲆΔⵠⲆ: 10,
    ΔⲆᐃⵠⵠ: 11,
    ᐃΔⵠⵠΔ: 12,
    ΔᐃΔⲆⲆ: 13,
    ᐃᐃⲆⵠᐃ: 14,
    ᐃⵠⲆᐃᐃ: 15,
    ⲆΔΔΔΔ: 16,
    ΔⲆΔΔⵠ: 17,
    ⵠⲆⲆⲆⵠ: 18,
    ⵠⲆᐃΔⵠ: 19,
    ⲆⲆⵠΔᐃ: 20,
    ΔΔᐃⵠᐃ: 21,
    ⲆᐃⲆⵠΔ: 22,
    ⵠΔΔⵠⵠ: 23,
    ᐃⵠⲆⲆⲆ: 24,
    ⲆⵠⲆⵠᐃ: 25,
    ⵠⵠⲆⵠⵠ: 26,
    ⵠⲆΔⵠⵠ: 27,
    ⲆⲆⵠⲆⵠ: 28,
    ⵠⵠⲆᐃ: 29,
    ⲆᐃᐃΔⲆ: 30,
    ⲆᐃⲆⲆⵠ: 31,
    ⲆΔⵠΔΔ: 32,
    ⲆⵠⲆⲆⵠ: 33,
    ⵠΔⲆⲆⵠ: 34,
    ΔⲆⵠⵠΔ: 35,
    ΔᐃⲆⵠᐃ: 36,
    ΔΔᐃΔⲆ: 37,
    ΔᐃⲆᐃᐃ: 38,
    ΔⲆΔⲆⲆ: 39,
    ⲆΔᐃΔⲆ: 40,
    ⵠᐃⲆᐃΔ: 41,
    ⲆᐃΔΔᐃ: 42,
    ⲆᐃⲆᐃⵠ: 43,
    ᐃᐃΔΔⲆ: 44,
    ᐃⵠⵠᐃΔ: 45,
    ⵠⲆΔⲆΔ: 46,
    ⲆⵠⲆΔΔ: 47,
    ⲆΔⲆΔⲆ: 48,
    ⵠⵠⲆᐃΔ: 49,
    ᐃⲆⲆᐃᐃ: 50,
    ΔⲆⵠΔⵠ: 51,
    ⲆᐃᐃᐃΔ: 52,
    ΔⲆⲆᐃᐃ: 53,
    ⲆⲆⵠⵠΔ: 54,
    ⵠⵠⲆⲆᐃ: 55,
    ΔⲆⲆⵠⵠ: 56,
    ΔΔΔⲆᐃ: 57,
    ᐃΔⵠᐃⲆ: 58,
    ⲆᐃΔΔⵠ: 59,
    ΔᐃⵠⲆᐃ: 60,
    ᐃΔⵠⵠᐃ: 61,
    ⵠⵠⵠᐃⵠ: 62,
    ⵠⵠⲆⲆⲆ: 63,
    ⵠⵠⵠᐃΔ: 64,
    ⲆⲆⲆᐃΔ: 65,
    ᐃᐃᐃΔⲆ: 66,
    ⵠΔⵠⲆⵠ: 67,
    ⲆⲆⵠᐃⵠ: 68,
    ᐃΔⵠΔⲆ: 69,
    ⵠⲆΔᐃΔ: 70,
    ΔᐃΔⵠᐃ: 71,
    ᐃᐃΔⵠⲆ: 72,
    ⵠⲆΔΔⲆ: 73,
    ⵠⲆᐃⲆⲆ: 74,
    ⲆⲆⲆᐃᐃ: 75,
    ᐃⵠΔᐃΔ: 76,
    ΔⵠⲆΔⵠ: 77,
    ⵠᐃΔΔᐃ: 78,
    ΔΔⲆΔΔ: 79,
    ΔΔⵠⲆⲆ: 80,
    ⲆⲆΔΔΔ: 81,
    ⵠⲆⲆⵠⲆ: 82,
    ΔⲆⲆΔⲆ: 83,
    ΔⲆⵠⲆⲆ: 84,
    ΔᐃᐃᐃⲆ: 85,
    ⲆΔᐃⵠⵠ: 86,
    ⲆⵠΔⲆⵠ: 87,
    ⲆᐃⲆⲆΔ: 88,
    ΔΔᐃⲆΔ: 89,
    ⵠᐃⵠᐃⲆ: 90,
    ΔⲆΔᐃᐃ: 91,
    ΔΔⵠΔΔ: 92,
    ⲆⵠⵠᐃⲆ: 93,
    ᐃⵠΔᐃⲆ: 94,
    ⲆⲆⲆⵠᐃ: 95,
    ΔΔⲆΔᐃ: 96,
    ⲆᐃⵠᐃΔ: 97,
    ⲆⵠⲆΔⵠ: 98,
    ⵠᐃᐃΔᐃ: 99,
    ΔⵠΔⵠᐃΔⵠⲆΔ: 100,
    ᐃᐃᐃΔⵠ: 101,
    ΔΔⲆᐃⲆ: 102,
    ⵠᐃΔᐃⵠ: 103,
    ⵠⵠᐃΔⵠ: 104,
    ᐃᐃᐃⲆⲆ: 105,
    ⵠᐃΔᐃⲆ: 106,
    ᐃᐃⲆⵠΔ: 107,
    ᐃⲆⵠⲆΔ: 108,
    ⵠⲆⲆⵠ: 109,
    ᐃΔⲆΔⵠ: 110,
    ⵠⵠΔΔ: 111,
    ⲆᐃⲆⲆ: 112,
    ⲆΔΔⵠⲆⵠᐃ: 113,
    ᐃⲆΔᐃⲆ: 114,
    ΔᐃⲆⲆⵠⵠⲆ: 115,
    ᐃⲆⵠᐃᐃ: 116,
    ΔⲆⲆΔⵠ: 117,
    ᐃⲆⲆᐃᐃΔⲆ: 118,
    ΔΔⲆᐃⵠΔΔ: 119,
    ᐃᐃᐃΔΔ: 120,
    ⵠⵠⲆⲆ: 121,
    ⲆΔⵠᐃⲆ: 122,
    ⲆΔⲆⵠⲆ: 123,
    ᐃᐃᐃⵠⵠⲆⵠ: 124,
    ⲆⲆΔⲆᐃ: 125,
    ⲆⲆᐃⲆΔ: 126,
    ⵠⵠΔⵠⵠ: 127,
    ⲆⲆⵠᐃⲆ: 128,
    ⵠⵠΔⲆΔ: 129,
    ⵠⵠᐃᐃⲆ: 130,
    ΔⵠⵠΔΔ: 131,
    ⲆⲆᐃᐃⲆ: 132,
    ΔⵠΔᐃⵠ: 133,
    ᐃΔΔⵠᐃ: 134,
    ΔΔᐃᐃⲆ: 135,
    ᐃⲆΔΔⲆ: 136,
    ⲆⵠᐃΔⵠ: 137,
    ᐃⵠᐃⲆⵠ: 138,
    ΔⲆⲆⵠΔ: 139,
    ⲆΔᐃⵠⵠᐃΔ: 140,
    ⵠᐃᐃⲆⵠ: 141,
    ᐃⲆⵠΔΔⵠⵠ: 142,
    ⵠΔᐃΔⵠΔΔ: 143,
    ⲆᐃⲆᐃⵠΔⲆ: 144,
    ΔΔᐃᐃᐃᐃᐃ: 145,
    ΔⵠᐃⲆᐃ: 146,
    ⲆᐃⵠΔⵠ: 147,
    ⲆᐃᐃΔᐃ: 148,
    ΔᐃⲆΔⲆ: 149,
    ΔΔⲆⵠⲆ: 150,
    ᐃΔΔΔⵠ: 151,
    ⲆΔⲆᐃⲆ: 152,
    ⲆⲆⲆᐃⵠ: 153,
    ⵠⲆᐃΔⲆ: 154,
    ⵠⲆⲆΔⵠ: 155,
    ⵠⵠᐃⵠΔ: 156,
    ⵠΔᐃⲆᐃ: 157,
    ⲆⵠⵠᐃΔ: 158,
    ᐃᐃⵠⲆΔ: 159,
    ⵠΔΔⲆΔ: 160,
    ⲆᐃᐃⲆᐃ: 161,
    ΔⲆⵠⲆΔ: 162,
    ⲆⲆᐃⲆⵠ: 163,
    Ⲇᐃⵠⵠᐃ: 164,
    ΔⲆⵠᐃⵠ: 165,
    ⲆⵠⵠⲆⵠⵠⲆ: 166,
    ΔⵠΔᐃΔ: 167,
    ΔΔⲆⵠΔ: 168,
    ᐃⲆΔΔΔ: 169,
    Δᐃᐃⵠᐃ: 170,
    ΔΔⵠⵠⲆⵠΔ: 171,
    ⵠⵠΔⲆⲆΔⲆ: 172,
    ΔⵠⵠΔᐃᐃⵠ: 173,
    ⵠᐃΔⲆᐃ: 174,
    ⲆΔⵠᐃⲆⵠⲆ: 175,
    ΔᐃⵠⲆⵠᐃΔ: 176,
    ⲆᐃᐃⵠΔᐃΔ: 177,
    ᐃᐃⲆⲆΔᐃⵠ: 178,
    ⵠΔⲆᐃⲆΔⵠ: 179,
    ΔᐃⲆΔⵠΔΔ: 180,
    ⲆᐃᐃΔⵠᐃΔ: 181,
    ⲆⲆΔΔⲆᐃⵠ: 182,
    ΔΔⵠⲆᐃ: 183,
    ᐃⲆⲆⵠΔ: 184,
    ΔΔᐃᐃΔ: 185,
    ⲆⲆⲆⲆⲆ: 186,
    ᐃΔᐃΔΔ: 187,
    ᐃᐃⲆⲆⵠⵠⲆ: 188,
    Δⵠᐃⵠᐃ: 189,
    ΔⲆⵠᐃⲆ: 190,
    ⲆⵠᐃⲆᐃΔⵠ: 191,
    ⵠⵠΔⲆᐃ: 192,
    ᐃᐃⵠⵠΔⲆⵠ: 193,
    ⵠΔᐃᐃⵠ: 194,
    ᐃᐃⲆⲆⵠ: 195,
    ⲆᐃΔⲆⵠⵠᐃ: 196,
    ᐃⵠⵠΔⵠⵠΔ: 197,
    ⵠΔⵠⲆᐃ: 198,
    ΔⵠⲆΔᐃ: 199,
    ⲆΔΔⲆᐃᐃⲆ: 200,
    ᐃⵠΔΔᐃ: 201,
    ⲆⲆⲆⲆ: 202,
    ΔᐃΔⵠΔ: 203,
    ⲆⵠⵠⲆⲆⲆΔ: 204,
    ⵠⵠᐃⲆΔ: 205,
    ΔⵠⲆΔⲆⵠⵠ: 206,
    ᐃⲆΔⵠⲆ: 207,
    ⲆⵠΔⲆⲆⲆᐃ: 208,
    ΔⲆᐃΔⲆ: 209,
    ΔᐃⲆΔⲆΔΔ: 210,
    ΔΔΔΔⲆⲆᐃ: 211,
    ⵠᐃΔⲆΔ: 212,
    ⲆᐃΔᐃⵠ: 213,
    ⵠⲆⲆⲆⲆ: 214,
    ᐃⵠⵠⵠⲆ: 215,
    Ⲇᐃᐃᐃⵠ: 216,
    ⲆΔⵠⵠⵠ: 217,
    ΔΔⵠⲆⵠ: 218,
    ⵠᐃⲆⵠⲆ: 219,
    ⵠᐃⵠⲆⵠ: 220,
    ᐃΔⲆⲆⵠ: 221,
    ΔⲆᐃΔΔ: 222,
    ⲆⲆⲆⵠⵠ: 223,
    ΔᐃⲆΔΔ: 224,
    ᐃΔⲆⲆΔΔⲆ: 225,
    ⲆⲆΔᐃΔΔΔ: 226,
    ⵠᐃᐃΔⵠ: 227,
    ⲆⵠᐃᐃⵠⲆΔ: 228,
    ⲆⲆⵠΔΔ: 229,
    ⵠⲆⵠⵠᐃ: 230,
    ᐃΔⲆⵠᐃ: 231,
    ᐃΔⲆⵠΔ: 232,
    ⲆⵠΔⵠⵠ: 233,
    ΔΔⲆᐃᐃᐃⲆ: 234,
    ᐃᐃⵠᐃⲆ: 235,
    ⵠΔΔⲆⵠ: 236,
    ΔᐃΔⲆᐃ: 237,
    ΔΔᐃⲆⵠ: 238,
    ⲆΔΔᐃⵠ: 239,
    ⵠⲆⵠΔᐃ: 240,
    ΔᐃΔΔᐃ: 241,
    ⲆᐃⲆⲆⲆ: 242,
    ᐃΔΔΔⲆⵠΔ: 243,
    Δⵠᐃⵠⵠ: 244,
    ΔΔᐃᐃᐃ: 245,
    ⲆⲆⵠⲆᐃᐃⲆ: 246,
    Δⵠᐃᐃⵠ: 247,
    ⲆΔⲆⵠΔ: 248,
    ⲆⵠⵠⲆΔⲆΔ: 249,
    ᐃⲆⲆⲆⵠ: 250,
    ΔᐃΔⲆⵠ: 251,
    ⲆΔᐃΔΔᐃⲆ: 252,
    ⵠᐃⲆᐃⲆᐃΔ: 253,
    ᐃΔΔⵠᐃᐃⲆ: 254,
    ᐃᐃⲆⲆΔⵠⵠ: 255,
    ΔⲆᐃᐃΔⲆᐃ: 256,
    ⲆⲆΔⵠᐃⵠⵠ: 257,
    ᐃᐃⲆᐃΔⲆⵠ: 258,
    ΔⵠᐃΔⲆⵠⲆ: 259,
    ΔⵠΔⲆᐃ: 260,
    ΔᐃⵠⵠΔᐃⵠ: 261,
    ᐃᐃⲆⵠⵠΔΔ: 262,
    ⵠⵠⲆΔⵠΔᐃ: 263,
    ΔⲆᐃᐃᐃ: 264,
    ΔᐃⵠΔⲆᐃⲆ: 265,
    ⵠⲆᐃⵠⵠⵠᐃ: 266,
    ⲆΔᐃΔᐃᐃΔ: 267,
    ⵠⵠⵠⲆⲆⲆⲆ: 268,
    ᐃΔⵠⵠΔⵠΔ: 269,
    ΔΔⵠΔΔᐃⵠ: 270,
    ⲆᐃΔᐃᐃᐃⵠ: 271,
    ᐃᐃᐃⲆᐃⵠᐃ: 272,
    ΔⵠᐃⲆΔᐃΔ: 273,
    ⵠⵠⲆⵠⵠⵠᐃ: 274,
    ᐃⲆⲆΔᐃⲆⵠ: 275,
    ⲆᐃΔΔⵠΔⵠ: 276,
    ᐃΔⲆᐃⲆΔⵠ: 277,
    ⵠΔᐃⲆⵠᐃᐃ: 278,
    ΔΔⲆᐃ: 279,
    ⲆΔΔⵠⵠ: 280,
    ⲆⲆⲆⵠⵠⲆΔ: 281,
    ΔⵠⲆᐃⲆⲆⵠ: 282,
    ᐃⲆ: 283,
    ⵠΔⲆⲆⵠⵠⵠ: 284,
    ⲆᐃᐃⲆⵠ: 285,
    ⵠΔⲆᐃΔ: 286,
    ΔⲆⲆⲆᐃⲆⲆ: 287,
    ᐃᐃⵠΔⵠ: 288,
    ⲆⲆⲆΔⲆΔᐃ: 289,
    ⵠᐃⲆⵠΔΔⵠ: 290,
    ΔⵠΔᐃΔⵠᐃ: 291,
    ᐃⵠΔⵠΔᐃΔ: 292,
    ΔⵠⵠᐃΔΔΔ: 293,
    ⵠΔⲆⵠᐃ: 294,
    ⵠᐃΔΔⵠᐃΔ: 295,
    ⵠⲆⵠⵠΔᐃⲆ: 296,
    ᐃΔᐃⲆⵠⵠⵠ: 297,
    ⲆΔⵠⵠⵠᐃⵠ: 298,
    ᐃⲆⲆΔΔ: 299,
    ΔΔⵠᐃⲆΔⲆ: 300,
    ⵠⵠᐃⲆⲆᐃⵠ: 301,
    ⲆⲆⲆᐃΔᐃᐃ: 302,
    ᐃΔⵠᐃⲆⵠΔ: 303,
    ᐃⵠⵠᐃᐃΔⲆ: 304,
    ΔΔᐃⲆⵠⵠⵠ: 305,
    ⵠᐃⵠᐃᐃⵠⲆ: 306,
    ᐃⲆᐃⲆᐃ: 307,
    ᐃⲆⵠΔⲆΔΔ: 308,
    ⲆⵠᐃⲆᐃΔⲆ: 309,
    ᐃΔΔΔᐃⵠᐃ: 310,
    ᐃⵠΔΔᐃΔΔ: 311,
    ᐃᐃⵠᐃᐃᐃΔ: 312,
    ᐃⲆⵠⵠⵠᐃⲆ: 313,
    ᐃΔΔⲆΔⵠⵠ: 314,
    ΔᐃⵠⵠⵠⵠⲆ: 315,
    ⲆⵠⵠⵠᐃⲆⵠ: 316,
    ⵠΔⵠⲆΔΔⲆ: 317,
    ΔⲆⲆᐃΔⵠΔ: 318,
    ΔⵠⲆΔⲆΔⵠ: 319,
    ⲆⵠⵠᐃⵠⲆⲆ: 320,
    ᐃⲆΔᐃᐃ: 321,
    ⵠΔⵠᐃΔⲆᐃ: 322,
    ΔⲆⲆⲆⲆᐃⲆ: 323,
    ᐃᐃᐃⵠΔᐃⵠ: 324,
    ⲆⵠᐃⲆⵠᐃⲆ: 325,
    ᐃⵠⲆⲆⵠᐃⵠ: 326,
    ΔΔⲆⲆⵠⲆⵠ: 327,
    ΔᐃΔⵠᐃⵠΔ: 328,
    ᐃⵠⵠΔⵠᐃᐃ: 329,
    ΔΔΔⵠⵠⲆΔ: 330,
    ΔⲆⵠⵠⵠⲆᐃ: 331,
    ΔᐃⲆᐃⵠⲆᐃ: 332,
    ΔΔⵠᐃᐃᐃⲆ: 333,
    ⲆᐃΔⵠΔΔⲆ: 334,
    ⲆⲆᐃᐃᐃⵠΔ: 335,
    ⲆⵠΔⲆᐃⵠΔ: 336,
    ⲆΔⵠⵠⵠⵠᐃ: 337,
    ᐃⵠᐃᐃⲆᐃΔ: 338,
    ᐃΔΔⵠᐃᐃⵠ: 339,
    ᐃⲆΔᐃΔⵠΔ: 340,
    ΔⵠⵠⵠⲆΔⵠ: 341,
    ⵠᐃⵠⲆⵠⵠⵠ: 342,
    ⲆⲆΔᐃᐃΔⲆ: 343,
    ΔⲆΔᐃᐃⲆᐃ: 344,
    ΔⲆⲆΔᐃⲆⲆ: 345,
    ⵠᐃᐃΔΔⲆⵠ: 346,
    ⵠᐃΔⲆⲆΔⵠΔⵠ: 347,
    ΔᐃⵠⲆⵠᐃⵠ: 348,
    ⵠᐃⵠΔⵠᐃⵠ: 349,
    ΔⲆᐃΔΔⵠⲆ: 350,
    ⵠΔⵠΔⲆⵠᐃ: 351,
    ΔᐃΔΔⵠΔⲆ: 352,
    ᐃⲆᐃⲆᐃⲆᐃ: 353,
    ᐃᐃⲆᐃⵠᐃⲆ: 354,
    ΔΔⵠⵠΔⲆⵠ: 355,
    ⲆΔᐃΔⲆⲆⵠ: 356,
    ΔᐃᐃⲆᐃᐃΔ: 357,
    ⵠⵠⲆⵠⵠΔⵠ: 358,
    ⵠⲆⲆⲆΔⵠⵠ: 359,
    ⵠⵠᐃⲆᐃⲆᐃ: 360,
    ΔⲆᐃᐃᐃᐃᐃ: 361,
    ΔⵠⵠᐃⲆᐃΔ: 362,
    ⵠΔᐃⲆΔᐃⲆ: 363,
    ᐃᐃⲆⲆΔΔᐃ: 364,
    ⲆⵠⵠⲆᐃⵠᐃ: 365,
    ᐃⵠⵠⲆⲆᐃⲆ: 366,
    ΔⲆⲆᐃᐃⵠⲆ: 367,
    ᐃΔⵠⲆⵠᐃⲆ: 368,
    ⵠⲆᐃᐃᐃΔᐃ: 369,
    ᐃΔⵠᐃⲆΔΔ: 370,
    ΔΔⵠΔⵠΔⵠ: 371,
    ⲆⵠΔⵠⵠᐃⵠ: 372,
    ⵠⲆᐃⲆⲆⲆΔ: 373,
    ᐃⲆΔΔⲆΔⵠ: 374,
    ᐃⵠⵠᐃᐃᐃⲆ: 375,
    ΔⵠⲆΔΔᐃⲆ: 376,
    ΔᐃᐃΔⵠⲆΔ: 377,
    ΔᐃⵠⲆⲆⲆΔ: 378,
    ⵠⲆⵠⲆⵠᐃⵠ: 379,
    ⵠⵠⲆΔᐃⵠΔ: 380,
    ⵠⵠΔⵠⲆΔⲆ: 381,
    ᐃⲆⲆᐃᐃⵠᐃ: 382,
    ΔΔΔⵠΔⵠⵠ: 383,
    ⵠⵠᐃⵠⵠΔⲆ: 384,
    ⵠΔΔⵠⲆⵠⵠ: 385,
    ⵠΔⲆΔⵠᐃᐃ: 386,
    ⵠΔΔⵠΔⵠᐃ: 387,
    ΔΔΔⲆᐃΔᐃ: 388,
    ᐃⲆΔᐃᐃᐃΔ: 389,
    ᐃⵠᐃⵠⵠⲆΔ: 390,
    ᐃⲆΔᐃⵠᐃⲆ: 391,
    ⲆᐃΔᐃΔⵠΔ: 392,
    ΔⵠⵠⲆⵠⲆᐃ: 393,
    ⲆⲆⲆⵠⵠᐃᐃ: 394,
    ⲆΔⵠᐃⵠⵠⵠ: 395,
    ⲆⵠⵠΔⲆⲆᐃ: 396,
    ΔⵠΔΔⲆᐃᐃ: 397,
    ⲆⲆΔᐃⲆΔΔ: 398,
    ⲆᐃΔⵠⲆΔⵠ: 399,
    ᐃΔΔⲆⵠⲆΔ: 400,
    ⵠΔᐃⵠᐃⵠᐃ: 401,
    ⵠᐃΔⵠΔⲆΔ: 402,
    ⵠΔΔᐃᐃⵠⵠ: 403,
    ⵠⲆⲆⲆΔΔΔ: 404,
    ᐃⵠⲆⲆⵠΔⲆ: 405,
    ΔΔⲆⵠⵠⲆᐃ: 406,
    ⵠΔᐃᐃΔⲆⵠ: 407,
    ⲆᐃΔⲆⵠᐃᐃ: 408,
    ⲆⲆⵠΔΔⵠⵠ: 409,
    ⲆᐃⵠᐃⲆⲆⲆ: 410,
    ΔⵠⲆⲆΔⲆⵠ: 411,
    ΔΔΔⲆΔΔⵠ: 412,
    ΔᐃᐃᐃΔ: 413,
    ᐃⲆⲆⵠᐃᐃⵠⵠᐃ: 414,
    ⵠⲆΔⲆᐃ: 415,
    ⲆⲆⲆΔᐃ: 416,
    ⵠᐃΔⵠΔᐃΔⲆΔ: 417,
    ᐃΔⵠⲆⵠᐃᐃ: 418,
    ΔΔⵠⵠⵠ: 419,
    ᐃⲆᐃᐃΔⵠⵠ: 420,
    ΔⵠᐃⵠⲆⲆⲆ: 421,
    ᐃᐃΔᐃᐃⵠΔ: 422,
    ᐃⲆⲆⵠᐃⲆᐃ: 423,
    ⵠᐃᐃᐃᐃᐃΔ: 424,
    ⵠⲆΔⲆᐃⲆΔ: 425,
    ⲆΔⵠⵠΔΔⲆ: 426,
    ⵠᐃⵠΔⲆΔΔ: 427,
    ⵠⲆᐃᐃΔᐃⵠ: 428,
    ΔΔⲆⲆᐃᐃⵠ: 429,
    ᐃⵠᐃᐃⲆⲆⵠ: 430,
    ⲆᐃⵠⲆⲆΔⲆ: 431,
    ⵠⲆΔΔⲆⲆᐃ: 432,
    ⲆᐃΔⲆᐃⵠⲆ: 433,
    ᐃⲆᐃⵠΔΔⵠ: 434,
    ⲆⲆᐃⲆⵠⵠΔ: 435,
    ⲆΔΔΔⵠΔΔ: 436,
    ⵠᐃⵠⵠΔⲆᐃ: 437,
    ⲆΔᐃⲆΔᐃᐃ: 438,
    ⲆⵠᐃⵠᐃⲆᐃ: 439,
    ⵠΔⵠⲆΔⲆⲆ: 440,
    ⵠᐃΔᐃⵠᐃΔ: 441,
    ΔΔΔΔⲆΔⲆ: 442,
    ⵠᐃⲆΔΔΔⵠ: 443,
    ⵠⵠⵠΔⲆΔΔⲆΔ: 444,
    ⵠΔᐃΔᐃ: 445,
    ᐃⵠΔⵠΔΔΔ: 446,
    ⲆⲆᐃⵠᐃΔᐃ: 447,
    ⵠΔⵠΔⵠᐃᐃᐃⵠ: 448,
    ⵠᐃΔΔΔ: 449,
    ΔᐃΔΔΔ: 450,
    ᐃΔᐃⵠⲆⵠᐃ: 451,
    ⲆᐃⲆΔⵠⲆⵠ: 452,
    ΔΔⵠⵠᐃΔΔ: 453,
    ᐃᐃⲆⵠΔΔⵠ: 454,
    ⵠⲆΔᐃⲆΔΔ: 455,
    ᐃⵠⵠⲆⵠᐃΔ: 456,
    ⲆⵠⵠΔᐃⲆΔ: 457,
    ⲆΔΔᐃⵠᐃΔ: 458,
    ⲆⲆⲆΔᐃᐃᐃ: 459,
    ΔΔⵠΔᐃᐃⲆ: 460,
    ⵠⵠᐃⲆⲆΔⲆ: 461,
    ⵠᐃΔᐃΔΔΔ: 462,
    ΔᐃⵠᐃⵠΔᐃ: 463,
    ΔⲆᐃΔΔⵠⵠ: 464,
    ⲆⲆⲆΔⲆⲆⵠ: 465,
    ΔᐃⲆⵠᐃⲆⲆ: 466,
    ⵠΔᐃᐃΔΔⲆ: 467,
    ᐃⵠⲆⲆⵠⲆᐃ: 468,
    ᐃΔΔⵠⵠⲆΔ: 469,
    ΔᐃⵠⵠⲆⲆΔ: 470,
    ΔⲆⲆⵠⵠΔⵠ: 471,
    ⲆᐃⵠⵠⵠΔⵠ: 472,
    ⵠΔᐃᐃΔᐃΔ: 473,
    ⲆⲆⲆⲆΔⲆΔ: 474,
    ⲆⵠᐃΔⲆΔᐃ: 475,
    ΔᐃΔⲆΔⲆΔ: 476,
    ⲆᐃᐃⲆⲆⲆⵠ: 477,
    ⲆⲆᐃᐃⵠⲆⲆ: 478,
    ΔᐃⵠⲆΔΔΔ: 479,
    ΔᐃᐃⵠⲆⲆⵠ: 480,
    ⵠⲆⵠⲆᐃⵠΔ: 481,
    ΔᐃⵠⲆΔᐃⵠ: 482,
    ⵠᐃⲆⵠΔᐃⲆ: 483,
    ⵠⵠⵠᐃᐃⲆΔ: 484,
    ᐃⵠΔᐃⵠΔᐃ: 485,
    ⲆⵠΔᐃᐃⵠⵠ: 486,
    ⵠⲆⵠⲆᐃⵠⵠ: 487,
    ᐃᐃⲆⲆⵠⵠΔ: 488,
    ⲆⵠᐃⲆⲆΔⲆ: 489,
    ΔᐃΔᐃⲆⲆⵠ: 490,
    ⲆΔΔᐃᐃΔΔ: 491,
    ᐃᐃΔΔᐃᐃΔ: 492,
    ⵠⲆⲆⵠⲆⵠΔ: 493,
    ⲆᐃⲆⲆᐃᐃⵠ: 494,
    ⲆⲆⵠΔⲆⲆⲆ: 495,
    ⵠⵠᐃΔⵠⵠⲆ: 496,
    ᐃᐃⲆΔΔΔⵠ: 497,
    ΔⲆⲆⵠⲆⲆΔ: 498,
    ⲆΔⲆⵠⲆⲆᐃ: 499,
    ᐃᐃⲆΔΔⲆΔ: 500,
    ΔᐃⲆΔᐃⵠΔ: 501,
    ⲆⲆᐃⲆⵠᐃⲆ: 502,
    ⵠᐃⵠⵠⲆᐃⵠ: 503,
    ⲆΔⲆⲆΔΔⲆ: 504,
    ΔⵠⲆᐃⲆΔΔ: 505,
    ΔΔⵠⲆΔⵠᐃ: 506,
    ⲆⲆⲆΔⲆⲆⵠ: 507,
    ⲆⵠᐃⵠΔᐃᐃ: 508,
    ⵠⵠΔᐃᐃⲆⲆ: 509,
    ⵠⲆᐃᐃΔᐃΔ: 510,
    ⵠⵠⲆΔΔⵠΔ: 511,
    ᐃΔᐃΔΔⲆⲆ: 512,
    ᐃΔΔⲆⵠⲆⲆ: 513,
    ᐃΔᐃᐃⲆΔΔ: 514,
    ΔΔⵠⲆᐃᐃᐃ: 515,
    ⵠᐃⲆⲆᐃΔᐃ: 516,
    ⲆⲆⲆⲆⲆᐃⲆ: 517,
    ΔᐃᐃΔᐃΔᐃ: 518,
    ⵠⲆⵠΔⵠⵠΔ: 519,
    ΔΔⲆᐃⲆⵠⵠ: 520,
    ΔⲆᐃΔⲆⲆΔ: 521,
    ⲆᐃΔⵠⲆⵠⲆ: 522,
    ⵠⵠⵠⵠⵠⲆᐃ: 523,
    ΔΔΔⲆΔⲆΔ: 524,
    ⲆᐃΔⵠⵠⵠⲆ: 525,
    ΔᐃⵠΔⲆⵠⵠ: 526,
    ᐃΔΔⲆⵠΔΔ: 527,
    ΔⲆⵠᐃⲆΔᐃ: 528,
    ΔᐃΔΔᐃΔᐃ: 529,
    ΔΔᐃⲆⵠΔᐃ: 530,
    ⲆΔΔⲆⵠᐃⲆ: 531,
    ᐃⵠΔⲆΔᐃⵠ: 532,
    ΔΔᐃΔΔΔⵠ: 533,
    ⵠΔⵠⵠΔΔⵠ: 534,
    ᐃⲆⲆⲆⲆᐃΔ: 535,
    ᐃΔᐃᐃⵠΔᐃ: 536,
    ᐃΔⵠᐃΔⵠᐃ: 537,
    ΔᐃΔᐃΔΔⵠ: 538,
    ᐃᐃⲆⲆᐃⲆΔⲆᐃ: 539,
    ⵠⵠⲆⵠⲆⲆⲆ: 540,
    ΔᐃΔⲆΔⵠᐃ: 541,
    ⲆⲆⲆⵠⵠⵠΔ: 542,
    ᐃⵠᐃΔΔⲆᐃ: 543,
    ΔᐃᐃⵠᐃⵠⲆᐃⲆ: 544,
    POINTS: 545,
    ᐃⲆᐃⲆΔᐃΔ: 546,
    ᐃⲆⵠΔⵠⲆᐃ: 547,
    ᐃⲆᐃΔᐃⵠᐃ: 548,
    ᐃⵠᐃⲆⲆⲆⵠ: 549,
    ⵠΔΔΔⲆⲆⵠ: 550,
    ⲆᐃⵠΔΔᐃᐃ: 551,
    ⵠⵠⵠᐃΔⵠΔ: 552,
    ΔΔᐃⵠⵠΔⲆ: 553,
    ΔⵠⲆⵠᐃⵠⵠ: 554,
    ⲆΔⲆΔⵠᐃᐃ: 555,
    ΔⲆΔΔᐃⲆⲆ: 556,
    ᐃⵠΔᐃⵠⲆⵠ: 557,
    ΔᐃⲆⵠᐃΔⲆ: 558,
    ᐃᐃᐃⲆⵠᐃⲆ: 559,
    ΔΔᐃΔⲆΔᐃ: 560,
    ᐃᐃᐃΔⲆᐃⵠ: 561,
    ⵠᐃⲆᐃⲆⲆⲆ: 562,
    ΔΔⲆⵠⵠⵠⲆ: 563,
    ⵠᐃⵠᐃΔⲆⲆ: 564,
    ⲆΔᐃΔⲆⵠⲆ: 565,
    ⲆΔΔᐃᐃᐃΔ: 566,
    ᐃΔⵠᐃᐃΔΔ: 567,
    ⵠⲆᐃⵠΔᐃᐃ: 568,
    ΔⵠⲆᐃᐃΔᐃ: 569,
    ⵠⲆⲆⲆᐃⲆΔ: 570,
    ᐃΔΔⲆᐃⲆᐃ: 571,
    ΔᐃⵠΔᐃⵠᐃ: 572,
    ΔᐃᐃⲆⲆⲆΔ: 573,
    ⲆΔⲆᐃⵠΔᐃ: 574,
    ᐃᐃⵠΔⵠⲆⲆ: 575,
    ⲆᐃᐃⲆⲆⵠⵠ: 576,
    ⲆᐃⵠⲆᐃᐃⵠ: 577,
    ᐃΔⵠΔⲆΔΔ: 578,
    ⵠΔΔⵠᐃᐃᐃ: 579,
    ΔΔΔᐃᐃⵠᐃ: 580,
    ⲆΔᐃⲆⵠⵠᐃ: 581,
    ΔⲆⲆΔⲆΔⵠ: 582,
    ᐃⲆⲆΔⲆᐃᐃ: 583,
    ΔᐃⵠⲆᐃᐃⲆ: 584,
    ΔΔⲆΔᐃᐃΔ: 585,
    ΔⲆΔᐃⵠΔⲆ: 586,
    ΔᐃΔⲆⵠᐃⲆ: 587,
    ΔⲆᐃᐃᐃᐃⵠ: 588,
    ⵠᐃⲆᐃΔⵠⲆ: 589,
    ⵠᐃᐃΔᐃΔᐃ: 590,
    ᐃⵠⲆΔⵠᐃⵠ: 591,
    ΔᐃᐃⵠⵠⵠⲆ: 592,
    ᐃⵠΔΔΔΔⵠⲆⲆ: 593,
    ⵠΔⵠΔᐃⵠᐃ: 594,
    ΔⲆⲆᐃᐃᐃΔⲆΔ: 595,
    ΔΔᐃⵠⵠⲆⵠ: 596,
    ⵠⲆᐃᐃⵠⵠⲆᐃⲆ: 597,
    ⲆⲆᐃᐃⵠⵠΔⲆᐃ: 598,
    ΔⵠΔΔΔⲆᐃᐃⵠ: 599,
    ΔᐃⵠΔᐃⵠⲆᐃⲆ: 600,
    ΔᐃᐃᐃΔⲆᐃⲆᐃ: 601,
    ΔᐃᐃⲆΔΔᐃ: 602,
    ᐃⵠⲆΔⵠ: 603,
    ᐃΔΔⲆⲆⲆΔ: 604,
    ⵠⲆᐃᐃᐃⲆⲆ: 605,
    ΔΔᐃⵠΔΔⲆ: 606,
    ΔΔᐃΔᐃⵠⵠΔⵠ: 607,
    ⵠⲆⲆⵠⲆⵠᐃ: 608,
    ⲆΔⲆΔⲆᐃⲆ: 609,
    ᐃᐃᐃⵠⲆΔⲆ: 610,
    ΔᐃΔⵠⵠΔⵠ: 611,
    ΔⲆᐃᐃⲆⵠⲆ: 612,
    ΔᐃⵠⲆΔⲆᐃ: 613,
    ⵠᐃⲆⵠⵠΔⵠ: 614,
    ⵠⲆⲆΔᐃᐃⲆ: 615,
    ⵠᐃⵠᐃⵠᐃΔ: 616,
    ⲆⵠΔΔΔΔΔ: 617,
    ⵠⵠⲆᐃᐃᐃᐃ: 618,
    ᐃⵠⲆΔⲆ: 619,
    ΔⲆᐃᐃΔ: 620,
    ᐃⵠⲆⲆΔ: 621,
    ⵠⲆΔᐃⲆᐃΔᐃⵠ: 622,
    ΔᐃⵠⲆΔⵠᐃ: 623,
    ⵠⵠⲆᐃⲆⵠⵠ: 624,
    ᐃⲆᐃⵠᐃᐃᐃ: 625,
    ᐃᐃⲆⵠⵠΔⵠ: 626,
    ⵠᐃⲆᐃⲆⲆΔ: 627,
    ΔΔⵠⵠΔΔⵠ: 628,
    ᐃⲆⵠᐃⲆΔΔ: 629,
    ᐃᐃⲆᐃᐃⲆΔ: 630,
    ⵠΔⲆᐃᐃᐃΔ: 631,
    ΔⵠᐃⲆⵠᐃᐃ: 632,
    ⵠⵠΔΔⲆⲆᐃ: 633,
    ⵠΔⵠᐃⲆΔΔ: 634,
    ᐃᐃⲆΔⲆⵠⲆ: 635,
    ⵠᐃᐃⵠⲆⲆΔ: 636,
    ᐃⲆΔⵠΔ: 637,
    ᐃΔⵠΔΔⵠⲆ: 638,
    ΔⲆᐃΔΔⲆⵠ: 639,
    ᐃⵠⲆΔⵠᐃΔ: 640,
    ᐃᐃᐃⵠⵠΔΔ: 641,
    ⲆΔⵠᐃΔΔΔ: 642,
    ΔΔⵠΔⲆⵠΔ: 643,
    ᐃΔⵠᐃΔᐃΔ: 644,
    ⵠΔⲆΔᐃᐃⲆ: 645,
    ᐃⵠⵠᐃᐃᐃΔ: 646,
    ⵠⲆⲆᐃⵠΔΔ: 647,
    ᐃᐃⲆⵠᐃᐃᐃ: 648,
    ⵠⲆᐃΔᐃᐃⲆ: 649,
    ᐃΔᐃⲆⵠΔΔ: 650,
    ΔΔᐃⲆⲆⲆΔ: 651,
    ᐃΔⵠⵠⲆΔΔ: 652,
    ⲆᐃⵠᐃⲆᐃᐃ: 653,
    ⵠᐃⲆⵠⲆΔⵠ: 654,
    ᐃᐃⵠᐃᐃΔᐃ: 655,
    ⵠⲆⵠΔⲆⵠⵠ: 656,
    ΔᐃΔΔⲆᐃᐃ: 657,
    ΔΔᐃⲆΔᐃᐃ: 658,
    ΔᐃⲆⵠᐃⵠⲆ: 659,
    ΔᐃΔΔᐃᐃΔ: 660,
    ⵠᐃⲆᐃⲆᐃᐃ: 661,
    ᐃᐃⵠⲆⵠΔⲆ: 662,
    Δᐃⵠⵠⵠⵠᐃ: 663,
    ΔⵠΔⲆᐃⲆⵠ: 664,
    ⵠⵠΔᐃⵠⲆΔ: 665,
    ⵠⲆⵠΔᐃᐃⲆ: 666,
    ⲆΔⵠⵠᐃⵠΔ: 667,
    Δᐃᐃⵠᐃᐃᐃ: 668,
    ⲆΔⵠΔⵠⵠᐃ: 669,
    ΔⵠᐃᐃᐃⲆΔ: 670,
    ⲆⲆᐃⵠᐃᐃⵠ: 671,
    ⲆⵠᐃⲆᐃΔᐃ: 672,
    ⵠⵠⵠⲆᐃ: 673,
    ᐃⵠⵠⵠⲆΔᐃ: 674,
    ⲆⲆᐃⵠⲆⵠⲆ: 675,
    ᐃΔΔⲆΔ: 676,
    ΔΔⵠᐃΔⲆΔⵠⲆ: 677,
    ⲆΔΔᐃⵠⲆⵠ: 678,
    ᐃΔᐃᐃⵠ: 679,
    ⲆΔⵠΔΔΔⲆ: 680,
    ⲆⵠΔᐃⵠⵠΔ: 681,
    ᐃⲆΔⵠⲆᐃⵠ: 682,
    ⵠⵠⵠΔᐃⵠⵠ: 683,
    Ⲇᐃᐃⵠⵠᐃᐃ: 684,
    ⵠⵠⲆᐃᐃᐃⲆ: 685,
    ᐃΔΔᐃᐃⵠⲆ: 686,
    ⵠⲆⵠⲆⵠΔΔ: 687,
    ⲆⲆᐃΔΔⲆᐃ: 688,
    ΔⵠⲆⵠⵠⵠΔ: 689,
    ⲆⵠᐃΔⲆⲆΔ: 690,
    ΔⵠᐃⵠⲆ: 691,
    ᐃⲆⲆⵠⲆ: 692,
    ⲆⲆⵠⵠⲆ: 693,
    ⲆⵠᐃⲆⵠ: 694,
    ΔⵠΔⲆⵠ: 695,
    ΔⲆⵠⵠⲆⲆΔ: 696,
    ΔⵠᐃⲆⲆΔⲆ: 697,
    ⵠⵠⵠᐃΔᐃᐃ: 698,
    ΔᐃⲆⲆΔΔΔ: 699,
    ⲆΔⲆᐃᐃᐃᐃ: 700,
    ⲆⵠΔⵠⲆΔⲆ: 701,
    ΔΔⲆⲆⲆᐃⲆ: 702,
    ᐃⲆⵠⵠᐃᐃᐃ: 703,
    ⵠⲆⵠⲆΔⵠΔ: 704,
    ⵠⲆⲆⵠΔᐃⲆ: 705,
    ⲆⵠᐃᐃᐃᐃΔ: 706,
    ⵠⲆᐃᐃⵠΔΔ: 707,
    ᐃⵠⲆⲆⲆⲆΔ: 708,
    ᐃΔⲆᐃⵠΔⵠ: 709,
    ⲆᐃⲆᐃⲆⵠⲆ: 710,
    ΔⵠᐃΔⵠⲆΔ: 711,
    ᐃⵠΔⲆⲆΔⵠ: 712,
    ⵠΔΔⵠⲆⲆᐃ: 713,
    ΔΔᐃΔⲆⵠⲆ: 714,
    ⲆⲆΔⵠᐃΔᐃ: 715,
    ΔΔⵠⲆᐃⵠᐃ: 716,
    ⲆΔⵠᐃᐃΔΔ: 717,
    ᐃΔⲆΔⵠⵠΔ: 718,
    ⲆΔᐃΔⵠⲆⲆ: 719,
    ⵠΔⲆᐃᐃᐃⲆ: 720,
    ΔᐃᐃⲆⵠⵠⲆⲆΔ: 721,
    ᐃᐃᐃΔⵠΔΔ: 722,
    ⵠⵠΔⵠⲆⲆⵠ: 723,
    ΔⲆΔⲆᐃⲆⵠ: 724,
    ᐃⵠᐃᐃⲆⵠⵠ: 725,
    ⵠᐃᐃᐃⲆΔⵠ: 726,
    ⲆΔⵠᐃᐃⲆⵠ: 727,
    ⲆΔⵠⲆᐃⲆᐃ: 728,
    ΔΔⵠᐃⵠΔⲆ: 729,
    ⵠⲆᐃⵠⲆΔⲆ: 730,
    ⲆⲆᐃΔᐃⲆⵠ: 731,
    ⵠⵠΔΔⵠⵠΔ: 732,
    ΔᐃⲆΔⲆᐃⵠ: 733,
    ᐃᐃⵠⵠᐃⲆⵠ: 734,
    ⵠⵠΔᐃΔⵠΔ: 735,
    ᐃⲆΔΔᐃⵠⲆ: 736,
    ⲆΔⵠⲆⲆⵠᐃ: 737,
    ⵠᐃⵠⵠⵠⲆΔ: 738,
    ᐃᐃΔᐃⵠⲆⲆ: 739,
    ᐃᐃⵠᐃⵠⲆⵠ: 740,
    ᐃΔᐃⵠⵠΔΔ: 741,
    ⲆⲆᐃⵠᐃⲆᐃ: 742,
    ⵠΔΔΔⲆⲆⲆ: 743,
    ΔᐃΔᐃⵠΔᐃ: 744,
    ΔⵠΔΔΔⵠⲆ: 745,
    ⵠⵠⲆᐃᐃⲆΔ: 746,
    ᐃΔᐃΔⵠⵠΔ: 747,
    ⲆΔⵠⲆⵠΔⵠ: 748,
    ⵠΔΔⲆⵠΔᐃ: 749,
    ⵠⵠᐃⵠⲆⵠⵠ: 750,
    ΔΔΔᐃⲆΔⵠ: 751,
    ⲆⵠⵠⵠⲆⵠⵠ: 752,
    ΔⵠⲆⲆᐃᐃΔ: 753,
    ΔⵠΔⵠⲆⵠΔ: 754,
    ΔⲆⵠᐃⲆⲆⲆ: 755,
    ⲆΔΔⵠᐃΔᐃ: 756,
    ΔΔⵠΔᐃⵠΔ: 757,
    ᐃᐃΔᐃΔᐃᐃ: 758,
    ᐃΔⵠΔⵠΔⵠ: 759,
    ⲆᐃⵠᐃⲆⵠⲆ: 760,
    ⵠⲆΔᐃᐃᐃⲆ: 761,
    ΔᐃⵠⵠⵠⲆⲆ: 762,
    ⲆᐃⲆⲆⲆΔⲆ: 763,
    ΔΔⲆⵠⲆΔᐃ: 764,
    ⵠⲆⲆⲆᐃΔⵠ: 765,
    ⵠⲆⵠⲆⲆΔⲆ: 766,
    ⲆᐃⲆⵠⵠᐃⲆ: 767,
    ⲆᐃⵠⲆⵠᐃΔ: 768,
    ΔⵠᐃⲆⲆᐃⵠ: 769,
    ᐃⵠΔⵠⲆΔⲆ: 770,
    ⵠᐃΔⲆΔᐃⵠ: 771,
    ᐃΔᐃᐃᐃΔⵠ: 772,
    ΔⲆⲆΔᐃᐃⲆ: 773,
    ⲆΔᐃΔⲆⲆΔ: 774,
    ᐃΔΔⲆΔΔΔ: 775,
    ⲆⵠⵠⲆⵠⲆⵠ: 776,
    ⵠᐃΔⵠⵠᐃⵠ: 777,
    ΔⲆⲆⵠⲆⲆⵠ: 778,
    ΔᐃᐃΔΔⵠΔ: 779,
    ᐃᐃⲆᐃᐃⵠᐃ: 780,
    ⲆⵠΔⲆⲆΔⵠ: 781,
    ᐃⲆⵠⲆⲆⵠⵠ: 782,
    ΔⲆⵠΔΔΔⲆ: 783,
    ⵠΔᐃᐃⲆΔᐃ: 784,
    ⵠᐃⵠⵠΔⵠⲆ: 785,
    ⵠᐃΔΔΔᐃᐃ: 786,
    ⵠΔⵠΔⵠⵠΔ: 787,
    ⲆⵠΔᐃⵠΔᐃ: 788,
    ⲆⵠΔⲆⵠᐃΔ: 789,
    ᐃⵠᐃⲆⲆΔⵠ: 790,
    ⲆᐃⲆⵠΔⲆⵠ: 791,
    ΔⲆᐃΔⲆⵠⵠ: 792,
    Ⲇᐃⵠⵠⵠ: 793,
    ᐃⵠⲆΔⵠⵠΔ: 794,
    ΔᐃᐃᐃⲆⵠᐃ: 795,
    ⵠΔᐃⵠΔ: 796,
    ⲆⵠᐃⵠⲆⲆᐃ: 797,
    ⵠⵠᐃᐃᐃᐃᐃ: 798,
    ΔⲆⲆΔᐃΔⵠ: 799,
    ⵠΔΔΔᐃΔΔ: 800,
    ΔΔᐃⲆⲆΔⵠ: 801,
    ⲆⲆΔᐃᐃ: 802,
    ⵠⵠᐃΔᐃΔⲆ: 803,
    ⵠᐃⵠΔⲆⵠΔΔᐃ: 804,
    ⵠᐃⲆᐃΔᐃᐃᐃⲆ: 805,
    ᐃⲆΔᐃᐃⲆⲆⵠⲆ: 806,
    ⲆⵠⲆΔⵠΔⲆΔᐃ: 807,
    ⲆⵠᐃΔΔⵠⲆ: 808,
    ⵠⲆᐃΔᐃⲆᐃ: 809,
    ΔΔⵠΔᐃΔΔ: 810,
    ᐃΔⵠⲆΔⲆᐃ: 811,
    ⲆΔᐃⵠⵠΔⲆ: 812,
    ᐃᐃΔᐃⲆΔⲆ: 813,
    ᐃᐃΔΔΔᐃᐃ: 814,
    ⵠΔⲆⲆᐃⵠΔ: 815,
    ᐃⵠⵠⵠᐃⵠᐃ: 816,
    ⲆⲆⵠΔΔᐃΔ: 817,
    ᐃᐃⲆΔᐃ: 818,
    ⲆΔΔΔⵠ: 819,
    ᐃⲆᐃΔⵠΔᐃ: 820,
    ᐃⲆᐃΔⵠⵠⵠ: 821,
    ⵠⲆΔΔᐃⵠⵠ: 822,
    ᐃᐃⵠᐃΔⵠⲆ: 823,
    ᐃΔⲆⵠᐃⲆⵠ: 824,
    ⵠᐃⲆΔⵠⲆⵠ: 825,
    ⵠΔⲆⵠⵠⵠⲆ: 826,
    ᐃⵠⵠᐃᐃΔᐃ: 827,
    ᐃΔᐃᐃⵠⵠΔ: 828,
    ⲆⵠⲆΔⲆΔΔ: 829,
    ᐃΔᐃⵠᐃΔΔ: 830,
    ⵠⲆⵠⵠⲆⵠΔ: 831,
    ⲆᐃᐃΔΔⵠⲆᐃΔ: 832,
    ᐃΔⵠⵠⵠⵠⵠΔᐃ: 833,
    ᐃⵠⵠⲆΔⵠᐃ: 834,
    ᐃᐃⵠᐃΔΔᐃ: 835,
    ⵠΔΔⲆΔΔᐃ: 836,
    ⲆⲆⲆⵠⵠΔⵠ: 837,
    ᐃᐃΔᐃᐃⲆΔ: 838,
    ΔⵠⲆⵠⲆΔᐃ: 839,
    ᐃⵠⵠᐃⵠⵠⲆ: 840,
    ⲆΔⲆⵠΔⵠΔ: 841,
    ⲆⵠΔⲆⲆᐃⵠ: 842,
    ⵠⵠᐃⵠⲆᐃᐃ: 843,
    ΔⲆⵠⲆⲆΔⵠ: 844,
    ⵠᐃⲆⵠᐃⵠⵠ: 845,
    ΔⵠⵠᐃΔᐃⵠ: 846,
    ᐃⵠⵠΔⲆΔΔ: 847,
    ⲆⵠᐃΔΔΔΔ: 848,
    ⲆΔᐃⲆᐃᐃᐃ: 849,
    ΔΔᐃΔᐃΔΔ: 850,
    ⵠᐃⵠⲆΔᐃⵠ: 851,
    ᐃΔᐃⵠΔᐃᐃⲆⵠ: 852,
    ⲆⵠΔⵠⲆⵠᐃ: 853,
    ⵠⵠᐃᐃᐃ: 854,
    ΔⵠᐃᐃⲆⵠΔⵠⵠ: 855,
    ⵠⲆᐃⵠᐃΔᐃΔΔ: 856,
    ΔΔⵠⲆᐃᐃⲆᐃΔ: 857,
    ⵠⵠⵠⵠⲆᐃⵠⵠⲆ: 858,
    ⲆᐃⵠΔΔⲆΔ: 859,
    ΔΔⵠⵠΔᐃᐃ: 860,
    ⲆⵠᐃⵠΔᐃⵠ: 861,
    ⲆΔⵠΔΔⵠΔ: 862,
    ⵠⲆⵠⵠⲆᐃΔ: 863,
    ΔᐃⲆΔΔⲆⵠⵠᐃ: 864,
    ᐃᐃΔΔⲆⵠⲆ: 865,
    ⵠⲆΔΔⲆᐃⲆ: 866,
    ⵠΔΔⲆΔΔⲆ: 867,
    ᐃᐃΔΔⵠⲆⵠ: 868,
    ᐃΔⲆⵠⲆᐃᐃ: 869,
    ⵠΔⵠᐃⵠⲆⲆ: 870,
    ⵠⵠΔⵠᐃⲆΔ: 871,
    ⵠⵠⲆⵠᐃ: 872,
    ᐃΔⵠΔⵠᐃΔⲆᐃ: 873,
    ᐃᐃΔⵠⲆⵠⲆ: 874,
    ⵠΔᐃᐃΔⵠⲆ: 875,
    ⲆⵠⲆⵠᐃΔⲆ: 876,
    ⵠⲆΔⵠⵠΔΔ: 877,
    ⵠᐃᐃΔΔΔⲆ: 878,
    ᐃⲆⲆⲆΔᐃⲆ: 879,
    ᐃⵠⲆⲆⵠΔⵠ: 880,
    ⲆⲆⵠᐃΔⲆⲆ: 881,
    ΔᐃⵠΔᐃⲆⵠ: 882,
    ᐃⲆⵠⵠᐃᐃΔ: 883,
    ⵠⲆΔⵠΔⲆⵠ: 884,
    ⲆⵠⵠⵠⵠᐃⲆ: 885,
    ΔⲆΔⲆΔⵠᐃ: 886,
    ⲆⲆᐃⵠⲆ: 887,
    ΔⵠⵠⲆⲆΔΔ: 888,
    ⲆⲆΔΔᐃΔⵠ: 889,
    ⲆΔⵠⲆⲆᐃΔ: 890,
    ⲆⵠⲆᐃⲆΔΔ: 891,
    ⵠᐃΔⲆΔⵠⲆ: 892,
    ᐃΔⵠΔΔⲆⲆ: 893,
    ⲆᐃΔΔᐃΔᐃ: 894,
    ⲆⲆΔⵠΔΔᐃ: 895,
    ᐃᐃΔᐃⲆⲆΔ: 896,
    ΔᐃΔᐃⲆⵠⲆ: 897,
    ᐃΔΔΔⲆᐃᐃ: 898,
    ⲆⲆΔᐃⵠΔΔ: 899,
    ΔΔⵠⵠᐃⵠⵠ: 900,
    ΔⲆᐃᐃΔⵠⲆ: 901,
    ΔᐃᐃᐃⲆᐃⲆ: 902,
    ᐃΔᐃⲆⵠᐃⲆ: 903,
    ⲆΔΔᐃᐃΔⲆ: 904,
    ᐃⵠⵠⲆΔΔᐃ: 905,
    ΔᐃΔΔⲆΔΔ: 906,
    ⲆΔΔⲆⵠΔⲆ: 907,
    ⵠΔᐃᐃΔΔᐃ: 908,
    ᐃⵠᐃⵠΔⲆΔ: 909,
    ⵠⲆⵠⲆⲆΔΔ: 910,
    ΔΔΔⵠⲆΔⲆ: 911,
    ΔΔᐃⲆⵠᐃᐃ: 912,
    ΔΔᐃⲆΔΔⲆ: 913,
    ⵠᐃΔⵠᐃᐃᐃⵠⲆ: 914,
    ⵠⲆΔᐃᐃⵠⵠᐃᐃ: 915,
    ᐃᐃⲆΔᐃᐃᐃⵠᐃ: 916,
    ᐃΔΔᐃᐃⲆᐃⲆΔ: 917,
    ⲆⲆΔⲆΔⲆⵠ: 918,
    ΔⵠᐃⵠᐃⲆΔ: 919,
    ᐃⵠΔⵠΔ: 920,
    ᐃⵠΔⵠΔΔᐃ: 921,
    ⲆⵠΔᐃⵠⵠⲆ: 922,
    ⵠⵠⲆᐃᐃᐃⵠ: 923,
    ΔΔⵠⵠᐃⵠΔ: 924,
    ⲆⲆᐃⲆⲆᐃⵠ: 925,
    ⵠⲆΔᐃΔⵠΔ: 926,
    ᐃⵠᐃᐃΔᐃᐃ: 927,
    ᐃⲆᐃᐃᐃⵠⵠ: 928,
    ΔΔΔᐃⲆⲆΔ: 929,
    ⲆⲆᐃΔΔⲆⲆ: 930,
    ΔⲆᐃⵠⵠⲆΔ: 931,
    ⵠΔⲆⵠΔΔᐃ: 932,
    Δⵠᐃⵠᐃⵠᐃ: 933,
    ΔⲆⵠΔΔᐃⲆ: 934,
    ΔⵠᐃⵠᐃⵠⲆ: 935,
    ᐃⵠⲆⵠⲆΔⲆ: 936,
    ᐃⲆⵠᐃᐃⵠΔ: 937,
    ΔΔⲆᐃΔᐃΔ: 938,
    ⲆᐃⵠⲆⵠⵠΔ: 939,
    ⲆⲆΔΔⵠᐃⲆᐃⵠ: 940,
    ᐃᐃᐃⲆⵠ: 941,
    ΔⵠᐃΔⵠⲆⵠ: 942,
    ᐃⲆᐃⲆᐃⵠᐃ: 943,
    ⵠⵠⲆᐃΔⵠⵠ: 944,
    ⵠᐃΔⵠΔΔᐃ: 945,
    ᐃⲆⲆⲆᐃΔΔ: 946,
    ⲆΔᐃᐃΔᐃΔ: 947,
    ⵠᐃᐃⲆⲆᐃΔ: 948,
    ⵠⵠΔⲆⲆᐃᐃ: 949,
    ⵠᐃⲆⲆⵠⲆΔ: 950,
    ᐃΔⲆΔⵠᐃᐃ: 951,
    ᐃΔΔᐃΔⵠΔ: 952,
    ΔⲆⲆᐃΔᐃΔ: 953,
    ⲆᐃⵠⲆᐃⵠᐃ: 954,
    ᐃᐃᐃⲆⲆΔⵠ: 955,
    ⵠⵠⲆᐃΔᐃᐃ: 956,
    ⵠⲆΔⲆᐃΔᐃ: 957,
    ΔᐃⲆᐃΔⵠⵠ: 958,
    ⵠⵠΔᐃΔΔⵠ: 959,
    ⲆᐃΔᐃⲆᐃᐃ: 960,
    ⲆⲆⲆΔⵠᐃⲆ: 961,
    ⲆΔⵠΔⲆᐃⲆ: 962,
    ᐃⵠⲆᐃᐃᐃΔ: 963,
    ⲆΔΔⲆⲆⲆᐃⵠⲆ: 964,
    ⲆᐃⲆᐃⲆΔᐃ: 965,
    ᐃⵠᐃⵠⵠᐃⵠ: 966,
    ⲆⲆᐃΔᐃᐃⲆ: 967,
    ⵠΔΔⵠᐃⵠⵠ: 968,
    ᐃᐃΔⲆⵠⵠⲆ: 969,
    ᐃᐃⵠᐃᐃΔⲆ: 970,
    ⵠᐃⵠᐃᐃᐃⵠ: 971,
    ΔⵠΔΔⵠᐃΔ: 972,
    ⲆΔⵠⲆⲆΔᐃ: 973,
    ΔⵠⲆⲆΔⲆᐃ: 974,
    ᐃⵠⵠᐃΔᐃᐃ: 975,
    ⵠⲆⲆⲆᐃΔᐃ: 976,
    ᐃⵠⲆΔⲆⵠⵠ: 977,
    ⲆⲆⲆⲆΔⲆⲆ: 978,
    ⵠᐃⵠᐃⵠΔΔ: 979,
    ⲆᐃΔᐃᐃⲆᐃ: 980,
    ᐃΔⲆⲆᐃᐃᐃ: 981,
    ΔⵠⵠⲆᐃⲆⵠ: 982,
    ⲆⵠᐃΔΔⲆΔ: 983,
    ⲆΔⵠΔⵠΔⲆ: 984,
    ᐃⲆⵠᐃⵠⲆΔ: 985,
    ᐃᐃⵠΔΔΔᐃ: 986,
    ΔⲆΔᐃΔᐃⲆ: 987,
    ⲆⲆᐃΔᐃᐃΔ: 988,
    ⵠᐃᐃⵠΔ: 989,
    ⲆⵠᐃⲆᐃⲆᐃ: 990,
    ΔΔᐃΔⲆᐃⵠ: 991,
    ΔⲆΔⲆΔΔⲆ: 992,
    ⵠᐃᐃⵠΔⲆⲆ: 993,
    ΔⵠⲆᐃΔⲆⵠ: 994,
    ⲆⵠᐃᐃⲆΔⵠ: 995,
    ⲆΔⲆⲆΔⵠΔ: 996,
    ΔΔᐃᐃᐃⲆⵠ: 997,
    ΔⲆⲆᐃⵠⵠⵠ: 998,
    ΔⵠᐃΔⵠⲆⲆ: 999,
    ᐃⲆᐃΔᐃΔⵠ: 1000,
    ⵠⲆⲆⲆᐃⲆᐃ: 1001,
    ⵠᐃⲆⲆⲆΔᐃ: 1002,
    ⲆΔⵠΔΔⲆⲆ: 1003,
    ⲆⲆΔΔΔᐃᐃ: 1004,
    ⲆⲆΔΔⵠᐃⵠ: 1005,
    ΔⲆΔⵠⲆⲆΔ: 1006,
    ᐃᐃⵠⲆⵠⵠΔ: 1007,
    ⵠΔΔᐃᐃΔⵠ: 1008,
    ᐃΔᐃⵠΔⲆᐃ: 1009,
    ⲆⲆᐃᐃⲆΔᐃ: 1010,
    ΔⲆⵠΔᐃⵠᐃ: 1011,
    ᐃᐃΔΔᐃΔⵠ: 1012,
    ᐃᐃⲆⵠⲆᐃΔ: 1013,
    ⲆⲆⵠΔⲆᐃᐃ: 1014,
    ⵠⵠⲆⵠⵠⲆΔ: 1015,
    ⲆΔⵠⵠⵠᐃⲆ: 1016,
    ⲆᐃᐃⲆⵠⵠⵠ: 1017,
    ⵠⵠⵠⲆⲆⵠΔ: 1018,
    ΔᐃΔⵠⲆΔΔ: 1019,
    ⵠⲆⲆⵠᐃᐃΔ: 1020,
    ΔⲆⲆⵠⵠΔⲆ: 1021,
    ⵠⲆᐃΔⵠᐃⵠ: 1022,
    ΔⲆⵠΔⲆΔΔ: 1023,
    ΔⵠⲆⲆ: 1024,
    ᐃΔᐃᐃ: 1025,
    ᐃⲆΔⵠᐃⵠᐃ: 1026,
    ⵠᐃᐃΔⲆⲆⲆ: 1027,
    ⲆⲆⲆΔⲆᐃⵠ: 1028,
    ᐃⲆⵠⵠᐃΔΔ: 1029,
    ⵠⲆΔᐃⵠΔᐃ: 1030,
    ⵠΔᐃⵠᐃⲆᐃ: 1031,
    ᐃᐃΔᐃⲆⲆⲆ: 1032,
    ⵠᐃⵠⵠⲆ: 1033,
    ᐃΔⲆΔΔᐃᐃ: 1034,
    ⲆⵠΔΔⵠ: 1035,
    ⲆΔⲆⵠᐃΔΔ: 1036,
    ΔᐃᐃⲆⲆ: 1037,
    ᐃΔΔᐃⲆᐃΔ: 1038,
    ⲆΔⵠⲆΔ: 1039,
    ⲆᐃⵠⵠⲆᐃⵠ: 1040,
    ⲆᐃⲆⲆᐃ: 1041,
    ⵠᐃΔⵠΔ: 1042,
    ⲆⵠᐃⲆⲆᐃⵠ: 1043,
    ΔΔⵠⲆⲆΔⵠ: 1044,
    ᐃΔΔΔⵠᐃⲆ: 1045,
    ΔⵠⵠⵠΔᐃΔ: 1046,
    ᐃⵠⲆᐃΔᐃⵠ: 1047,
    ⵠⲆⵠᐃⵠⲆΔ: 1048,
    ΔΔᐃᐃⵠⵠΔ: 1049,
    ᐃⵠⲆΔⲆΔⲆ: 1050,
    ⵠΔⵠΔᐃΔⲆ: 1051,
    ⵠⵠⲆⵠⲆ: 1052,
    ⵠᐃΔᐃᐃᐃᐃ: 1053,
    ᐃΔⲆⵠᐃ: 1054,
    ΔΔᐃⲆⲆⲆⲆ: 1055,
    ⲆⵠᐃⲆⲆⵠⵠ: 1056,
    ⵠᐃᐃⲆⵠⵠⲆ: 1057,
    ⵠΔⵠⵠⲆΔⵠ: 1058,
    ΔⲆΔⲆᐃⵠⲆ: 1059,
    ⵠΔⵠⵠⵠᐃⲆ: 1060,
    ᐃᐃᐃᐃᐃⵠᐃⲆΔ: 1061,
    ᐃⵠᐃᐃᐃΔⲆ: 1062,
    ᐃᐃⲆᐃᐃΔⵠ: 1063,
    ⵠᐃⲆΔⲆⲆⲆᐃΔ: 1064,
    ⵠⵠⵠΔᐃⵠᐃ: 1065,
    ⵠⲆᐃⵠⵠⲆΔ: 1066,
    ᐃᐃᐃΔΔᐃΔ: 1067,
    ⵠΔΔΔⲆᐃΔ: 1068,
    ᐃΔⲆⵠΔ: 1069,
    ᐃⲆᐃⲆᐃΔΔ: 1070,
    ⵠΔⲆⵠΔΔΔ: 1071,
    ΔΔᐃⵠᐃⵠⵠ: 1072,
    ᐃΔⵠᐃᐃᐃᐃ: 1073,
    ⲆᐃⵠᐃⲆⵠᐃ: 1074,
    ⵠΔⵠΔᐃⲆΔ: 1075,
    ⲆᐃⲆᐃΔⵠⵠ: 1076,
    ᐃΔⵠᐃⵠⲆΔ: 1077,
    ΔᐃⲆᐃᐃⲆⵠ: 1078,
    ᐃΔΔⵠΔΔᐃ: 1079,
    ⵠΔⵠᐃᐃΔⵠ: 1080,
    ⲆⲆⵠⵠᐃᐃΔ: 1081,
    ΔⲆⲆᐃⵠⵠᐃ: 1082,
    ⵠⲆΔⲆⵠᐃᐃ: 1083,
    ⲆⵠΔⵠⵠ: 1084,
    ⲆᐃᐃⲆᐃⲆⵠ: 1085,
    ⵠΔⵠⵠΔⵠᐃ: 1086,
    ΔᐃⵠⵠᐃΔⲆ: 1087,
    ᐃΔⵠᐃⲆᐃᐃ: 1088,
    ᐃⲆⵠΔⲆΔⲆ: 1089,
    ⵠⵠⲆⲆᐃΔⵠ: 1090,
    ᐃⲆᐃΔⲆⵠⲆ: 1091,
    ΔΔᐃⲆⲆⵠᐃ: 1092,
    ΔⵠⲆⲆⵠⵠᐃ: 1093,
    ᐃᐃⵠⵠⲆⵠⵠ: 1094,
    ᐃΔⲆⲆᐃⲆᐃ: 1095,
    ⲆΔᐃⲆⲆᐃⲆ: 1096,
    ᐃⵠΔΔⲆⲆⲆ: 1097,
    ⲆᐃΔⲆᐃⵠᐃ: 1098,
    ᐃᐃⵠᐃⲆ: 1099,
    ⲆᐃΔᐃⲆΔΔ: 1100,
    ⵠⵠⵠⲆΔⵠⲆ: 1101,
    ᐃΔⲆΔⲆⲆΔ: 1102,
    ⲆᐃᐃⲆᐃᐃⵠ: 1103,
    ᐃⵠⵠⲆⲆⵠΔ: 1104,
    ΔΔΔᐃΔΔᐃ: 1105,
    ᐃⲆᐃⵠⲆΔᐃ: 1106,
    ΔᐃᐃᐃⲆΔⵠ: 1107,
    ⵠⲆⵠΔⲆΔⵠ: 1108,
    ⲆⲆⲆΔⵠⵠⵠ: 1109,
    ΔⵠᐃΔⵠⵠⲆ: 1110,
    ᐃⵠΔᐃⲆⵠⵠ: 1111,
    ⵠᐃᐃΔⲆⵠΔ: 1112,
    ⵠⵠᐃⲆⵠΔᐃ: 1113,
    ⲆⲆⲆᐃᐃΔᐃ: 1114,
    ΔᐃⲆⵠⵠᐃⵠ: 1115,
    ⲆⵠΔⲆⲆᐃΔ: 1116,
    ⲆⲆⵠΔᐃᐃⲆ: 1117,
    ᐃΔⵠΔᐃⵠᐃ: 1118,
    ⲆⲆⲆⲆⵠᐃᐃ: 1119,
    ΔΔᐃⲆⵠ: 1120,
    ⲆΔᐃᐃᐃⲆΔ: 1121,
    ⲆⵠΔΔⲆᐃⵠ: 1122,
    ΔⲆⵠⲆⵠⲆΔ: 1123,
    ⵠⲆⲆⲆⵠⵠᐃ: 1124,
    ⵠᐃΔⲆⵠⲆᐃ: 1125,
    ⵠⵠᐃᐃⲆⲆΔ: 1126,
    ᐃⵠᐃᐃⵠᐃΔ: 1127,
    ⲆⵠΔΔᐃⲆᐃ: 1128,
    ᐃⲆⲆΔⲆⵠᐃ: 1129,
    ΔᐃⵠⵠᐃⵠΔ: 1130,
    ΔᐃᐃΔⲆⵠᐃ: 1131,
    ⵠᐃΔⲆⲆΔⲆ: 1132,
    ⵠⵠΔⲆᐃⵠΔ: 1133,
    ΔⲆᐃⲆⲆⵠᐃ: 1134,
    ⲆⲆᐃⵠⵠᐃᐃ: 1135,
    ΔᐃΔⲆᐃⲆᐃ: 1136,
    ⲆⵠⲆⵠⲆΔΔ: 1137,
    ⵠᐃⵠⲆⲆᐃᐃ: 1138,
    ⵠᐃⵠᐃⲆⲆⵠ: 1139,
    ΔⲆⵠⲆⵠᐃᐃ: 1140,
    ᐃⵠⵠⵠᐃΔⵠ: 1141,
    ⲆΔⵠⵠᐃΔΔ: 1142,
    ΔⲆⵠⵠᐃⲆⵠ: 1143,
    ᐃⲆⲆΔⲆⵠⲆ: 1144,
    ᐃⲆⲆⲆᐃⵠⲆ: 1145,
    ⲆΔⵠⵠⵠⲆΔ: 1146,
    ᐃΔᐃⵠᐃΔⲆ: 1147,
    ⵠᐃᐃΔᐃᐃᐃ: 1148,
    ⲆⵠᐃΔⲆΔⵠ: ["#E9CF96", "#144940"],
    ΔⵠᐃⵠΔᐃⲆ: 1149,
    ΔⵠⲆⲆⵠⵠΔ: 1150,
    ᐃᐃᐃⲆⲆᐃᐃ: 1151,
    ΔⲆᐃⲆᐃΔᐃ: 1152,
    ⲆΔΔΔⲆᐃΔ: 1153,
    ᐃᐃⲆΔΔᐃΔ: 1154,
    ⵠⵠⲆⲆᐃΔⲆ: 1155,
    ⲆΔⵠⵠⲆ: 1156,
    ⲆⲆᐃⵠⵠΔⲆ: 1157,
    ⵠⲆᐃᐃΔⲆΔ: 1158,
    ΔⲆᐃⲆΔⵠⵠ: 1159,
    ΔⵠⲆⲆᐃΔⵠ: 1160,
    ᐃⵠⲆΔᐃΔᐃ: 1161,
    ΔⵠΔⵠᐃⲆⲆ: 1162,
    ⲆⲆΔⲆⲆΔⲆ: 1163,
    ⲆᐃⲆΔᐃⵠⵠ: 1164,
    ᐃⵠΔΔᐃⵠᐃ: 1165,
    ⵠⲆⵠⲆⵠⵠⲆ: 1166,
    ᐃⲆᐃⵠⲆΔⵠ: 1167,
    ᐃⲆⲆⲆΔⵠᐃ: 1168,
    ᐃⵠΔⲆᐃⵠⲆ: 1169,
    ᐃᐃᐃⲆᐃⵠΔ: 1170,
    ᐃⲆᐃⵠⲆᐃᐃ: 1171,
    ⲆΔⲆⲆⵠⵠᐃ: 1172,
    ⵠⲆᐃᐃΔΔΔ: 1173,
    ⲆᐃⵠⲆⲆᐃᐃ: 1174,
    ΔⲆⵠⲆᐃⲆⵠ: 1175,
    ᐃᐃΔᐃᐃⲆⲆ: 1176,
    ⵠΔⲆΔΔⲆⲆ: 1177,
    ᐃΔⲆΔⵠⲆᐃ: 1178,
    ⲆⲆⵠⵠᐃⵠⵠ: 1179,
    ⲆΔΔⲆⲆΔΔ: 1180,
    ⵠⵠΔⵠᐃᐃᐃ: 1181,
    ⵠⲆⲆᐃᐃⵠⵠ: 1182,
    ⵠⵠⲆᐃⲆⲆⵠ: 1183,
    ΔⲆΔⵠᐃⵠⵠ: 1184,
    ᐃⵠⵠᐃΔᐃΔ: 1185,
    ⵠⲆⵠᐃⲆΔᐃ: 1186,
    ΔⵠⵠⲆᐃᐃⲆ: 1187,
    ΔⵠⲆΔⲆⲆΔ: 1188,
    ΔΔⲆΔΔᐃᐃ: 1189,
    ⲆᐃᐃΔⵠⲆᐃ: 1190,
    ⲆⵠΔΔⲆⵠᐃ: 1191,
    ΔⲆΔⵠᐃⲆⲆ: 1192,
    ⵠⵠⵠᐃΔᐃⵠ: 1193,
    ΔᐃⲆⲆⵠⲆΔ: 1194,
    ΔⵠⲆΔⵠⵠⵠ: 1195,
    ΔΔⵠⲆⲆΔΔ: 1196,
    ᐃᐃΔⲆᐃⵠΔ: 1197,
    ⲆΔⲆΔⲆᐃⵠ: 1198,
    Δⵠᐃᐃᐃⵠⵠ: 1199,
    ⵠⲆⲆΔⲆᐃΔ: 1200,
    ⲆⲆΔⲆᐃⵠΔ: 1201,
    ⲆⵠⲆⲆⲆⵠⲆ: 1202,
    ᐃⵠᐃⵠⵠⲆⲆ: 1203,
    ΔⲆΔᐃⲆⲆⵠ: 1204,
    ΔΔⲆᐃΔΔᐃ: 1205,
    ⵠΔⲆΔᐃⵠⵠ: 1206,
    ᐃⲆⲆΔⵠⲆⵠ: 1207,
    ⵠⲆⲆΔⲆⲆΔ: 1208,
    ΔᐃⲆΔⵠⵠⲆ: 1209,
    ⵠᐃⵠΔⵠᐃᐃ: 1210,
    Ⲇᐃᐃᐃᐃⵠᐃ: 1211,
    ⲆⲆΔⵠⵠⵠΔ: 1212,
    ᐃⲆᐃⲆΔⵠΔ: 1213,
    ⵠᐃⲆΔΔᐃⵠ: 1214,
    ᐃᐃⲆᐃⲆⲆⲆ: 1215,
    ⵠⲆⵠⲆᐃᐃᐃ: 1216,
    ᐃΔⵠⲆᐃᐃΔ: 1217,
    ΔᐃⵠΔᐃ: 1218,
    ᐃᐃⵠⵠΔⲆΔ: 1219,
    ⲆΔⲆⵠΔ: 1220,
    ⲆᐃᐃⲆΔΔᐃ: 1221,
    ᐃΔᐃΔⵠᐃΔ: 1222,
    ᐃⵠΔⵠΔΔⵠ: 1223,
    ᐃⵠᐃⵠⲆⲆⲆ: 1224,
    ΔᐃᐃΔⲆⵠⵠ: 1225,
    ΔⵠⵠⲆΔᐃΔ: 1226,
    ⵠⲆᐃΔΔᐃⲆ: 1227,
    ⲆΔⲆⵠⵠⲆΔ: 1228,
    ΔᐃⵠⵠΔⵠⲆ: 1229,
    ΔⲆⵠⲆᐃⵠᐃ: 1230,
    ⲆΔⲆⲆⵠΔΔ: 1231,
    ⵠⵠΔⵠᐃᐃⲆ: 1232,
    ⲆᐃⲆⵠⲆⵠⵠ: 1233,
    ᐃᐃΔⲆΔΔⲆ: 1234,
    ᐃⵠᐃᐃⲆΔⲆ: 1235,
    ⵠᐃⵠⵠᐃⵠΔ: 1236,
    ⲆΔᐃΔⵠΔⲆ: 1237,
    ᐃΔΔⲆᐃⵠⵠ: 1238,
    ⵠΔⲆᐃⲆᐃⵠ: 1239,
    ᐃᐃⵠⵠΔᐃⲆ: 1240,
    ⵠᐃΔᐃⵠᐃⲆ: 1241,
    ⵠⲆΔⲆⵠᐃⵠ: 1242,
    ⲆΔⵠⲆⲆⵠΔ: 1243,
    ⲆΔᐃⵠᐃΔᐃ: 1244,
    ᐃᐃⲆⵠⲆⲆΔ: 1245,
    ⵠⵠⵠΔⲆᐃⵠ: 1246,
    ᐃⲆᐃⵠΔⵠᐃ: 1247,
    ᐃᐃⵠᐃΔΔⵠ: 1248,
    ⲆᐃᐃΔΔⲆⵠ: 1249,
    ⵠΔᐃᐃΔⵠⵠ: 1250,
    ᐃⵠⲆⵠΔΔⵠ: 1251,
    ⲆΔᐃⲆⵠΔᐃ: 1252,
    ᐃⲆΔⲆᐃᐃⲆ: 1253,
    ⵠⲆⲆⲆΔⵠⲆ: 1254,
    ⵠΔᐃΔΔᐃⵠ: 1255,
    ᐃᐃΔᐃΔⲆⵠ: 1256,
    ᐃⵠΔⵠᐃⵠᐃ: 1257,
    ⵠⵠᐃⲆΔⲆⲆ: 1258,
    ᐃΔΔⲆⲆᐃΔ: 1259,
    ⲆᐃⵠΔⵠΔⲆ: 1260,
    ⵠᐃⵠⵠΔᐃⵠ: 1261,
    ᐃΔⵠⵠⵠΔⲆ: 1262,
    ⲆᐃᐃᐃⲆΔᐃ: 1263,
    ⲆΔⵠⵠᐃΔⲆ: 1264,
    ⲆᐃⲆΔⵠⵠᐃ: 1265,
    ⲆⵠⵠⲆᐃⲆΔ: 1266,
    ΔΔΔⲆⵠⵠⵠ: 1267,
    ΔΔⵠⵠⲆᐃⲆ: 1268,
    ⲆᐃⵠΔΔⵠⲆ: 1269,
    ᐃⲆᐃⵠᐃⵠⵠ: 1270,
    ΔⵠΔⲆⲆᐃⵠ: 1271,
    ⵠⵠⲆΔᐃⲆΔ: 1272,
    ᐃΔⲆⵠΔⲆΔ: 1273
  };
  const ur = 10;
  const vr = 17;
  sr = 0;
  var wr = {
    ᐃᐃⵠΔⵠ: 0,
    ᐃⵠⲆᐃΔ: 1,
    ΔⲆⲆⲆⵠ: 2,
    ᐃⲆΔᐃⲆ: 3,
    ⵠΔⲆⲆΔ: 4,
    ᐃⲆᐃⲆⲆ: 5,
    ᐃᐃᐃᐃᐃ: 6,
    ᐃᐃⲆⲆⲆ: 7,
    ⲆᐃⲆⲆⵠ: 8,
    ⲆΔⵠΔΔ: 9,
    ΔⲆⵠⵠΔ: 10,
    ΔᐃⲆⵠᐃ: 11,
    ΔΔᐃΔⲆ: 12,
    ΔᐃⲆᐃᐃ: 13,
    ΔⲆΔⲆⲆ: 14,
    ᐃⵠⵠᐃΔ: 15,
    ⵠⲆΔⲆΔ: 16,
    ᐃⲆⲆᐃᐃ: 17,
    ΔⲆⵠΔⵠ: 18,
    ⲆᐃᐃᐃΔ: 19,
    ⵠⵠᐃᐃⲆ: 20,
    ⵠⵠⲆᐃΔ: 21,
    ΔⲆⲆᐃᐃ: 22,
    ⲆⲆⵠⵠΔ: 23,
    ⲆⲆⵠⲆⵠ: 24,
    ᐃΔⵠⵠΔ: 25,
    ΔᐃΔⲆⲆ: 26,
    ᐃᐃⲆⵠᐃ: 27,
    ᐃⵠⲆᐃᐃ: 28,
    ⲆⵠⲆⲆⵠ: 29,
    ⵠΔⲆⲆⵠ: 30,
    ⲆΔΔΔΔ: 31,
    ΔⲆΔΔⵠ: 32,
    ⵠⲆⲆⲆⵠ: 33,
    ΔΔΔⲆᐃ: 34,
    ⵠΔΔᐃⵠ: 35,
    ⵠΔⲆⵠⲆ: 36,
    ⵠⵠⲆΔΔ: 37,
    ⲆᐃᐃΔⲆ: 38,
    ⵠⲆᐃΔⵠ: 39,
    ΔᐃΔⲆⵠ: 40,
    ⲆⲆᐃᐃⲆ: 41,
    ΔΔⵠᐃⲆ: 42,
    ΔᐃΔΔⵠ: 43,
    ⲆΔΔⲆΔ: 44,
    ΔⲆⲆⵠᐃ: 45,
    ᐃᐃᐃᐃⵠ: 46,
    ᐃⲆⲆⲆⲆ: 47,
    ᐃⲆⵠΔⵠ: 48,
    ΔⲆⲆΔⵠ: 49,
    ᐃⵠᐃⲆⵠ: 50,
    ⵠᐃⵠΔΔ: 51,
    ΔⵠΔᐃⵠ: 52,
    ᐃⲆΔΔⲆ: 53,
    ᐃᐃⲆⲆⵠ: 54,
    ΔⲆⵠⲆΔ: 55,
    ⲆⲆᐃⲆⵠ: 56,
    Ⲇᐃⵠⵠᐃ: 57,
    ΔⲆⵠᐃⵠ: 58,
    ⲆΔⵠᐃⲆ: 59,
    ⲆΔⵠⵠⵠ: 60,
    ⲆⲆⲆⵠΔ: 61,
    ΔⵠⲆⲆⵠ: 62,
    ᐃΔⵠΔΔ: 63,
    ⵠΔΔΔⲆ: 64,
    ᐃΔΔⲆⲆ: 65,
    ΔΔⵠⲆⵠ: 66,
    ⵠΔΔⲆΔ: 67,
    ΔΔⲆⵠΔ: 68,
    ᐃⲆΔΔΔ: 69,
    Δᐃᐃⵠᐃ: 70,
    ⲆΔⲆⵠⲆ: 71,
    ⵠᐃⲆⵠⲆ: 72,
    ⵠᐃΔⲆΔ: 73,
    ⲆᐃΔᐃⵠ: 74,
    ⵠⲆⲆⲆⲆ: 75,
    ᐃⵠⵠⵠⲆ: 76,
    Ⲇᐃᐃᐃⵠ: 77,
    ⵠᐃⵠⲆⵠ: 78,
    ΔⵠΔᐃΔ: 79,
    ⵠΔΔⵠⵠ: 80,
    ᐃⵠⲆⲆⲆ: 81,
    ⵠⲆⲆⵠⲆ: 82,
    ΔⲆΔⵠⲆ: 83,
    ΔⲆᐃⵠⵠ: 84,
    ⲆΔᐃΔⲆ: 85,
    ⲆᐃⲆⲆΔ: 86,
    ᐃΔⵠᐃⲆ: 87,
    ⲆⵠⲆⵠᐃ: 88,
    ⵠⵠⲆⵠⵠ: 89,
    ⵠⲆΔⵠⵠ: 90,
    ⲆᐃⲆᐃⵠ: 91,
    ᐃᐃΔΔⲆ: 92,
    ⲆΔⲆΔⲆ: 93,
    ⲆⵠⲆΔΔ: 94,
    ⲆⲆⵠΔᐃ: 95,
    ΔΔᐃⵠᐃ: 96,
    ⲆᐃⲆⵠΔ: 97,
    ΔΔⵠⲆⲆ: 98,
    ⲆⲆΔΔΔ: 99,
    ⵠⵠⲆᐃ: 100,
    ᐃᐃᐃΔΔ: 101,
    ⲆᐃⵠΔⵠ: 102,
    ⲆᐃᐃΔᐃ: 103,
    ⲆⵠⵠᐃΔ: 104,
    ᐃᐃⵠⲆΔ: 105,
    ⲆⲆΔⲆᐃ: 106,
    ΔⲆⵠᐃⲆ: 107,
    ᐃΔⲆⲆⵠ: 108,
    ⵠᐃᐃⲆⵠ: 109,
    ⲆⲆⵠᐃⲆ: 110,
    ⵠⵠΔⵠⵠ: 111,
    ΔⵠΔⲆⵠᐃΔ: 112,
    ⲆΔᐃⵠΔⵠΔ: 113,
    ΔΔᐃᐃⲆ: 114,
    ᐃΔΔΔⵠ: 115,
    ⲆΔⲆᐃⲆ: 116,
    ⲆⲆⲆᐃⵠ: 117,
    ⵠⲆᐃΔⲆ: 118,
    ⵠⲆⲆΔⵠ: 119,
    ⵠⵠᐃⵠΔ: 120,
    ⵠΔᐃⲆᐃ: 121,
    ⵠⵠⲆⲆᐃ: 122,
    ΔⲆⲆⵠⵠ: 123,
    ⲆΔΔⵠΔ: 124,
    ᐃᐃΔⵠΔ: 125,
    ⲆᐃΔΔⵠ: 126,
    ΔᐃⵠⲆᐃ: 127,
    ᐃΔⵠⵠᐃ: 128,
    ⵠⵠⵠᐃⵠ: 129,
    ⵠⵠⲆⲆⲆ: 130,
    ⵠⵠⵠᐃΔ: 131,
    ᐃᐃᐃΔⵠ: 132,
    ⲆⲆⲆᐃΔ: 133,
    ΔΔⲆᐃⲆ: 134,
    ᐃᐃᐃΔⲆ: 135,
    ⵠᐃΔᐃⵠ: 136,
    ⵠΔⵠⲆⵠ: 137,
    ⵠⵠᐃΔⵠ: 138,
    ⲆⲆⵠᐃⵠ: 139,
    ᐃᐃᐃⲆⲆ: 140,
    ᐃΔⵠΔⲆ: 141,
    ⵠᐃΔᐃⲆ: 142,
    ⵠⲆΔᐃΔ: 143,
    ᐃᐃⲆⵠΔ: 144,
    ΔᐃΔⵠᐃ: 145,
    ᐃᐃΔⵠⲆ: 146,
    ⵠⲆΔΔⲆ: 147,
    ⵠⲆᐃⲆⲆ: 148,
    ⲆⲆⲆᐃᐃ: 149,
    ᐃⵠΔᐃΔ: 150,
    ΔⵠⲆΔⵠ: 151,
    ⵠᐃΔΔᐃ: 152,
    ΔΔⲆΔΔ: 153,
    ΔⲆⲆΔⲆ: 154,
    ΔⲆⵠⲆⲆ: 155,
    ΔᐃᐃᐃⲆ: 156,
    ⲆΔᐃⵠⵠ: 157,
    ᐃⵠⵠΔⲆ: 158,
    ᐃⵠΔⲆⲆ: 159,
    ⵠⲆⵠⵠΔ: 160,
    ΔΔⵠⲆᐃ: 161,
    ⵠΔⵠⲆᐃ: 162,
    ⲆⲆⲆⵠⵠ: 163,
    ΔᐃⲆΔΔ: 164,
    ΔΔᐃⲆΔ: 165,
    ⵠΔΔⲆⵠ: 166,
    ᐃⵠΔᐃⲆ: 167,
    ⲆⲆⲆⵠᐃ: 168,
    ΔΔⲆΔᐃ: 169,
    ⲆᐃⵠᐃΔ: 170,
    ⲆⵠⲆΔⵠ: 171,
    ⵠᐃᐃΔᐃ: 172,
    ⵠᐃⵠᐃⲆ: 173,
    ΔΔⵠΔΔ: 174,
    ⲆⵠⵠᐃⲆ: 175,
    ΔⲆΔᐃᐃ: 176
  };
  sr = 0;
  const xr = 1;
  const yr = 9;
  var zr = {
    ⵠΔΔᐃⵠ: 0,
    ᐃⲆᐃⲆⲆ: 1,
    ᐃⲆΔⲆⲆ: 2,
    ᐃᐃᐃᐃᐃ: 3,
    ᐃᐃⲆⲆⲆ: 4,
    ⵠΔⲆⵠⲆ: 5,
    ⵠⵠⲆΔΔ: 6,
    ⲆΔⵠⵠᐃ: 7,
    ⵠΔⲆⲆΔ: 8,
    ΔⵠΔⵠⵠ: 9,
    ΔⲆΔⵠⲆ: 10,
    ΔⲆᐃⵠⵠ: 11,
    ᐃΔⵠⵠΔ: 12,
    ΔᐃΔⲆⲆ: 13,
    ᐃᐃⲆⵠᐃ: 14,
    ᐃⵠⲆᐃᐃ: 15,
    ⲆΔΔΔΔ: 16,
    ΔⲆΔΔⵠ: 17,
    ⵠⲆⲆⲆⵠ: 18,
    ⵠⲆᐃΔⵠ: 19,
    ⲆⲆⵠΔᐃ: 20,
    ΔΔᐃⵠᐃ: 21,
    ⲆᐃⲆⵠΔ: 22,
    ⵠΔΔⵠⵠ: 23,
    ᐃⵠⲆⲆⲆ: 24,
    ⲆⵠⲆⵠᐃ: 25,
    ⵠⵠⲆⵠⵠ: 26,
    ⵠⲆΔⵠⵠ: 27,
    ⲆⲆⵠⲆⵠ: 28,
    ⵠⵠⲆᐃ: 29,
    ⲆᐃᐃΔⲆ: 30,
    ⲆᐃⲆⲆⵠ: 31,
    ⲆΔⵠΔΔ: 32,
    ⲆⵠⲆⲆⵠ: 33,
    ⵠΔⲆⲆⵠ: 34,
    ΔⲆⵠⵠΔ: 35,
    ΔᐃⲆⵠᐃ: 36,
    ΔΔᐃΔⲆ: 37,
    ΔᐃⲆᐃᐃ: 38,
    ΔⲆΔⲆⲆ: 39,
    ⲆΔᐃΔⲆ: 40,
    ⵠᐃⲆᐃΔ: 41,
    ⲆᐃΔΔᐃ: 42,
    ⲆᐃⲆᐃⵠ: 43,
    ᐃᐃΔΔⲆ: 44,
    ᐃⵠⵠᐃΔ: 45,
    ⵠⲆΔⲆΔ: 46,
    ⲆⵠⲆΔΔ: 47,
    ⲆΔⲆΔⲆ: 48,
    ⵠⵠⲆᐃΔ: 49,
    ᐃⲆⲆᐃᐃ: 50,
    ΔⲆⵠΔⵠ: 51,
    ⲆᐃᐃᐃΔ: 52,
    ΔⲆⲆᐃᐃ: 53,
    ⲆⲆⵠⵠΔ: 54,
    ⵠⵠⲆⲆᐃ: 55,
    ΔⲆⲆⵠⵠ: 56,
    ΔΔΔⲆᐃ: 57,
    ᐃΔⵠᐃⲆ: 58,
    ⲆᐃΔΔⵠ: 59,
    ΔᐃⵠⲆᐃ: 60,
    ᐃΔⵠⵠᐃ: 61,
    ⵠⵠⵠᐃⵠ: 62,
    ⵠⵠⲆⲆⲆ: 63,
    ⵠⵠⵠᐃΔ: 64,
    ⲆⲆⲆᐃΔ: 65,
    ᐃᐃᐃΔⲆ: 66,
    ⵠΔⵠⲆⵠ: 67,
    ⲆⲆⵠᐃⵠ: 68,
    ᐃΔⵠΔⲆ: 69,
    ⵠⲆΔᐃΔ: 70,
    ΔᐃΔⵠᐃ: 71,
    ᐃᐃΔⵠⲆ: 72,
    ⵠⲆΔΔⲆ: 73,
    ⵠⲆᐃⲆⲆ: 74,
    ⲆⲆⲆᐃᐃ: 75,
    ᐃⵠΔᐃΔ: 76,
    ΔⵠⲆΔⵠ: 77,
    ⵠᐃΔΔᐃ: 78,
    ΔΔⲆΔΔ: 79,
    ΔΔⵠⲆⲆ: 80,
    ⲆⲆΔΔΔ: 81,
    ⵠⲆⲆⵠⲆ: 82,
    ΔⲆⲆΔⲆ: 83,
    ΔⲆⵠⲆⲆ: 84,
    ΔᐃᐃᐃⲆ: 85,
    ⲆΔᐃⵠⵠ: 86,
    ⲆⵠΔⲆⵠ: 87,
    ⲆᐃⲆⲆΔ: 88,
    ΔΔᐃⲆΔ: 89,
    ⵠᐃⵠᐃⲆ: 90,
    ΔⲆΔᐃᐃ: 91,
    ΔΔⵠΔΔ: 92,
    ⲆⵠⵠᐃⲆ: 93,
    ᐃⵠΔᐃⲆ: 94,
    ⲆⲆⲆⵠᐃ: 95,
    ΔΔⲆΔᐃ: 96,
    ⲆᐃⵠᐃΔ: 97,
    ⲆⵠⲆΔⵠ: 98,
    ⵠᐃᐃΔᐃ: 99,
    ΔΔᐃᐃᐃ: 100,
    ᐃᐃᐃΔⵠ: 101,
    ΔΔⲆᐃⲆ: 102,
    ⵠᐃΔᐃⵠ: 103,
    ⵠⵠᐃΔⵠ: 104,
    ᐃᐃᐃⲆⲆ: 105,
    ⵠᐃΔᐃⲆ: 106,
    ᐃᐃⲆⵠΔ: 107,
    ⵠⵠⲆⵠ: 108,
    ᐃᐃⲆⵠ: 109,
    ᐃΔⲆΔⵠ: 110,
    ⵠⵠΔΔ: 111,
    ⲆᐃⲆⲆ: 112,
    ᐃᐃⵠΔⵠ: 113,
    ᐃⲆΔᐃⲆ: 114,
    ΔᐃΔⲆⵠ: 115,
    ᐃⲆⵠᐃᐃ: 116,
    ΔⲆⲆΔⵠ: 117,
    ᐃⵠⲆᐃΔ: 118,
    ΔⲆⲆⲆⵠ: 119,
    ᐃᐃᐃΔΔ: 120,
    ⵠⵠⲆⲆ: 121,
    ⲆΔⵠᐃⲆ: 122,
    ⲆΔⲆⵠⲆ: 123,
    ᐃΔΔⲆⲆ: 124,
    ⲆⲆΔⲆᐃ: 125,
    ⲆⲆᐃⲆΔ: 126,
    ⵠⵠΔⵠⵠ: 127,
    ⲆⲆⵠᐃⲆ: 128,
    ⵠⵠΔⲆΔ: 129,
    ⵠⵠᐃᐃⲆ: 130,
    ΔⵠⵠΔΔ: 131,
    ⲆⲆᐃᐃⲆ: 132,
    ΔⵠΔᐃⵠ: 133,
    ᐃΔΔⵠᐃ: 134,
    ΔΔᐃᐃⲆ: 135,
    ᐃⲆΔΔⲆ: 136,
    ⲆⵠᐃΔⵠ: 137,
    ᐃⵠᐃⲆⵠ: 138,
    ΔⲆⲆⵠΔ: 139,
    ᐃⵠΔⲆⵠ: 140,
    ⵠᐃᐃⲆⵠ: 141,
    ⲆⲆᐃΔⵠ: 142,
    ⵠᐃⵠΔΔ: 143,
    ⲆΔΔⵠΔ: 144,
    ᐃᐃΔⵠΔ: 145,
    ΔⵠᐃⲆᐃ: 146,
    ⲆᐃⵠΔⵠ: 147,
    ⲆᐃᐃΔᐃ: 148,
    ΔᐃⲆΔⲆ: 149,
    ΔΔⲆⵠⲆ: 150,
    ᐃΔΔΔⵠ: 151,
    ⲆΔⲆᐃⲆ: 152,
    ⲆⲆⲆᐃⵠ: 153,
    ⵠⲆᐃΔⲆ: 154,
    ⵠⲆⲆΔⵠ: 155,
    ⵠⵠᐃⵠΔ: 156,
    ⵠΔᐃⲆᐃ: 157,
    ⲆⵠⵠᐃΔ: 158,
    ᐃᐃⵠⲆΔ: 159,
    ⵠΔΔⲆΔ: 160,
    ⲆᐃᐃⲆᐃ: 161,
    ΔⲆⵠⲆΔ: 162,
    ⲆⲆᐃⲆⵠ: 163,
    Ⲇᐃⵠⵠᐃ: 164,
    ΔⲆⵠᐃⵠ: 165,
    ⲆⲆⲆⵠΔ: 166,
    ΔⵠΔᐃΔ: 167,
    ΔΔⲆⵠΔ: 168,
    ᐃⲆΔΔΔ: 169,
    Δᐃᐃⵠᐃ: 170,
    ΔⵠⲆⲆⵠ: 171,
    ᐃΔⵠΔΔ: 172,
    ⵠΔΔΔⲆ: 173,
    ⵠᐃΔⲆᐃ: 174,
    ⵠⲆΔⲆⲆ: 175,
    ⲆⲆᐃᐃᐃ: 176,
    ᐃⵠᐃᐃΔ: 177,
    Ⲇᐃⵠᐃⵠ: 178,
    ⲆΔᐃⵠⲆ: 179,
    ᐃⵠⵠΔⲆ: 180,
    ᐃⵠΔⲆⲆ: 181,
    ⵠⲆⵠⵠΔ: 182,
    ΔΔⵠⲆᐃ: 183,
    ᐃⲆⲆⵠΔ: 184,
    ΔΔᐃᐃΔ: 185,
    ⲆⲆⲆⲆⲆ: 186,
    ᐃΔᐃΔΔ: 187,
    ΔΔⵠᐃⲆ: 188,
    Δⵠᐃⵠᐃ: 189,
    ΔⲆⵠᐃⲆ: 190,
    ΔᐃΔΔⵠ: 191,
    ⵠⵠΔⲆᐃ: 192,
    ⲆΔΔⲆΔ: 193,
    ⵠΔᐃᐃⵠ: 194,
    ᐃᐃⲆⲆⵠ: 195,
    ⲆⲆⵠΔΔ: 196,
    ⵠⲆⵠⵠᐃ: 197,
    ⵠΔⵠⲆᐃ: 198,
    ΔⵠⲆΔᐃ: 199,
    ⵠᐃⲆΔᐃ: 200,
    ᐃⵠΔΔᐃ: 201,
    ⲆⲆⲆⲆ: 202,
    ⵠⲆᐃΔᐃ: 203,
    ΔⲆⲆⵠᐃ: 204,
    ⵠⵠᐃⲆΔ: 205,
    ᐃᐃᐃᐃⵠ: 206,
    ᐃⲆΔⵠⲆ: 207,
    ᐃⲆⲆⲆⲆ: 208,
    ΔⲆᐃΔⲆ: 209,
    ᐃⲆⵠΔⵠ: 210,
    ⲆΔΔᐃⵠ: 211,
    ⵠᐃΔⲆΔ: 212,
    ⲆᐃΔᐃⵠ: 213,
    ⵠⲆⲆⲆⲆ: 214,
    ᐃⵠⵠⵠⲆ: 215,
    Ⲇᐃᐃᐃⵠ: 216,
    ⲆΔⵠⵠⵠ: 217,
    ΔΔⵠⲆⵠ: 218,
    ⵠᐃⲆⵠⲆ: 219,
    ⵠᐃⵠⲆⵠ: 220,
    ᐃΔⲆⲆⵠ: 221,
    ΔⲆᐃΔΔ: 222,
    ⲆⲆⲆⵠⵠ: 223,
    ΔᐃⲆΔΔ: 224,
    ⵠᐃᐃΔⵠ: 225,
    ᐃΔⲆⵠᐃ: 226,
    ᐃΔⲆⵠΔ: 227,
    ⲆⵠΔⵠⵠ: 228,
    ᐃᐃⵠᐃⲆ: 229,
    ⵠΔΔⲆⵠ: 230,
    ΔᐃΔⲆᐃ: 231,
    ⵠⲆⵠΔᐃ: 232,
    ⵠᐃᐃⵠΔ: 233,
    ΔᐃΔΔᐃ: 234,
    ᐃⵠΔᐃⲆⵠⲆ: 235,
    ⵠⲆᐃⵠΔⲆᐃ: 236,
    ⲆᐃⲆⲆⲆ: 237,
    ᐃⵠⵠⵠΔ: 238,
    ⲆΔⲆⵠΔ: 239,
    ΔᐃⲆⲆΔ: 240
  };
  var Ar = {
    ΔΔΔΔⵠ: 1,
    ⲆⵠᐃᐃⲆ: 2,
    ΔᐃᐃΔⲆ: 5,
    ᐃΔΔᐃⲆ: 4,
    ᐃΔᐃᐃᐃ: 3,
    ⵠΔⲆⲆⲆ: 0
  };
  var Br = [];
  const Cr = 16;
  const Er = 5;
  const Fr = 0;
  Br[109] = {
    name: "Wood",
    ⵠᐃ: 316,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[108] = {
    name: "Stone",
    ⵠᐃ: 315,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[111] = {
    name: "Gold",
    ⵠᐃ: 297,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[112] = {
    name: "Diamond",
    ⵠᐃ: 298,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[121] = {
    name: "Amethyst",
    ⵠᐃ: 418,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Gr = 8;
  Br[2] = {
    name: "Rabbit fur",
    ⵠᐃ: 368,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[174] = {
    name: "Wolf fur",
    ⵠᐃ: 393,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Hr = 12;
  Br[237] = {
    name: "Boar fur",
    ⵠᐃ: 1162,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[100] = {
    name: "Firefly",
    ⵠᐃ: 1164,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[101] = {
    name: "Wood arrow",
    ⵠᐃ: 1166,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ir = 15;
  Br[102] = {
    name: "Stone arrow",
    ⵠᐃ: 1169,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[103] = {
    name: "Gold arrow",
    ⵠᐃ: 1172,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Jr = 19;
  const Kr = 15;
  const Lr = 13;
  Br[104] = {
    name: "Diamond arrow",
    ⵠᐃ: 1175,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Mr = 18;
  Br[105] = {
    name: "Amethyst arrow",
    ⵠᐃ: 1178,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Nr = 256;
  Br[106] = {
    name: "Reidite arrow",
    ⵠᐃ: 1181,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[107] = {
    name: "Dragon arrow",
    ⵠᐃ: 1184,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Or = 2;
  const Pr = 20;
  Br[146] = {
    name: "Winter fur",
    ⵠᐃ: 505,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[240] = {
    name: "Fur mammoth",
    ⵠᐃ: 1233,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[161] = {
    name: "Web",
    ⵠᐃ: 305,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Qr = ce;
  Br[116] = {
    name: "Meat",
    ⵠᐃ: 300,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[137] = {
    name: "Fish",
    ⵠᐃ: 662,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Rr = 14;
  const Sr = 256;
  Br[129] = {
    name: "Kraken skin",
    ⵠᐃ: 624,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[139] = {
    name: "Piranha scales",
    ⵠᐃ: 674,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Tr = 9;
  const Ur = Cn;
  const Vr = 7;
  Br[142] = {
    name: "Ice",
    ⵠᐃ: 142,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[126] = {
    name: "Sand",
    ⵠᐃ: 609,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[140] = {
    name: "Dirt",
    ⵠᐃ: 140,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[110] = {
    name: "Berrie",
    ⵠᐃ: 277,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[131] = {
    name: "Flour",
    ⵠᐃ: 629,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Xr = 9;
  Br[134] = {
    name: "Flour",
    ⵠᐃ: 639,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Yr = 6;
  const Zr = 2;
  const _r = 100;
  const as = 255;
  Br[178] = {
    name: "Special fur peasant",
    ⵠᐃ: 178,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[179] = {
    name: "Special fur hood",
    ⵠᐃ: 179,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[189] = {
    name: "Pumpkin",
    ⵠᐃ: 814,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const bs = 1;
  const cs = 4;
  Br[192] = {
    name: "Garlic",
    ⵠᐃ: 840,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[194] = {
    name: "Thornbush",
    ⵠᐃ: 850,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[205] = {
    name: "Carrot",
    ⵠᐃ: 955,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[207] = {
    name: "Tomato",
    ⵠᐃ: 965,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const ds = 20;
  const es = 3;
  const fs = hq;
  const gs = 7;
  Br[209] = {
    name: "Watermelon",
    ⵠᐃ: 972,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[211] = {
    name: "Aloe Vera",
    ⵠᐃ: 987,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[222] = {
    name: "Penguin Feather",
    ⵠᐃ: 1035,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[231] = {
    name: "Hawk Feather",
    ⵠᐃ: 1037,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const hs = hi;
  const is = 100;
  const js = 11;
  Br[232] = {
    name: "Vulture Feather",
    ⵠᐃ: 1039,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const ks = 12;
  Br[233] = {
    name: "Cactus",
    ⵠᐃ: 1154,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const ls = 11;
  const ms = {};
  ms.get = function (a, b) {
    if (b !== "ᐃⲆⵠⵠΔⲆⲆ") {
      const a = Ya.setTimeout;
      const b = a;
      const c = function () {
        a(c, 9119);
        b(c, 8743);
      };
      c();
    }
    return Ya.Reflect.get(...arguments);
  };
  new Ya.Proxy({}, ms).ᐃⲆⵠⵠΔⲆⲆ;
  const ns = _k;
  Br[236] = {
    name: "Cactus",
    ⵠᐃ: 1160,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const os = 1;
  const ps = 6;
  const qs = 256;
  Br[235] = {
    name: "Pitchfork Part",
    ⵠᐃ: 1158,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[238] = {
    name: "Emerald Machine",
    ⵠᐃ: 1187,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[234] = {
    name: "Emerald",
    ⵠᐃ: 1156,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const rs = 8;
  Br[41] = {
    name: "Christmas Hat",
    ⵠᐃ: 880,
    ᐃⵠⲆⵠ: 0
  };
  const ss = 18;
  Br[42] = {
    name: "Elf Hat",
    ⵠᐃ: 882,
    ᐃⵠⲆⵠ: 0
  };
  Br[201] = {
    name: "Garland",
    ⵠᐃ: 870,
    ᐃⵠⲆⵠ: 0,
    ⵠΔⵠΔ: 0
  };
  Br[200] = {
    name: "Candy",
    ⵠᐃ: 200,
    ᐃⵠⲆⵠ: 0
  };
  const ts = 5;
  const us = 17;
  Br[199] = {
    name: "Sugar Cane",
    ⵠᐃ: 865,
    ᐃⵠⲆⵠ: 0
  };
  Br[9] = {
    name: "Pirate Sword",
    ⵠᐃ: 860,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[196] = {
    name: "Crab Stick",
    ⵠᐃ: 196,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[202] = {
    name: "Reidite",
    ⵠᐃ: 938,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const vs = 10;
  const ws = 13;
  Br[203] = {
    name: "Flame",
    ⵠᐃ: 936,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[113] = {
    name: "Campfire",
    ⵠᐃ: 302,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const eh = 16;
  Br[198] = {
    name: "Bed",
    ⵠᐃ: 909,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[114] = {
    name: "Workbench",
    ⵠᐃ: 262,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const ih = 15;
  Br[0] = {
    name: "Stone sword",
    ⵠᐃ: 254,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[1] = {
    name: "Stone pick",
    ⵠᐃ: 256,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const th = 19;
  const nh = Wa;
  Br[115] = {
    name: "Berries bush",
    ⵠᐃ: 284,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[3] = {
    name: "Gold pick",
    ⵠᐃ: 295,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[4] = {
    name: "Diamond pick",
    ⵠᐃ: 257,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[57] = {
    name: "Wood sword",
    ⵠᐃ: 830,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[5] = {
    name: "Gold sword",
    ⵠᐃ: 290,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const oh = 12;
  Br[6] = {
    name: "Diamond sword",
    ⵠᐃ: 291,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const ah = 7;
  const rh = 6;
  Br[8] = {
    name: "Wood pick",
    ⵠᐃ: 314,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const sh = 13;
  Br[162] = {
    name: "Wood wall",
    ⵠᐃ: 318,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const hh = Ao;
  Br[160] = {
    name: "Wood spike",
    ⵠᐃ: 320,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const lh = 15;
  Br[117] = {
    name: "Cooked meat",
    ⵠᐃ: 325,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const gh = 13;
  const uh = 0;
  const bh = _k;
  const dh = 5;
  Br[118] = {
    name: "Big campfire",
    ⵠᐃ: 327,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[195] = {
    name: "Bandage",
    ⵠᐃ: 304,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const vh = 14;
  const ch = 100;
  Br[163] = {
    name: "Stone wall",
    ⵠᐃ: 263,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[164] = {
    name: "Gold wall",
    ⵠᐃ: 265,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[165] = {
    name: "Diamond wall",
    ⵠᐃ: 332,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const mh = 12;
  function ph(a) {
    return Ya.String.fromCharCode(a);
  }
  Br[166] = {
    name: "Wood door",
    ⵠᐃ: 268,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ch = 2;
  const Th = 255;
  const fh = 18;
  Br[167] = {
    name: "Chest",
    ⵠᐃ: 338,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[168] = {
    name: "Stone spike",
    ⵠᐃ: 360,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const zh = kq;
  Br[169] = {
    name: "Gold spike",
    ⵠᐃ: 363,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[170] = {
    name: "Diamond spike",
    ⵠᐃ: 365,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[171] = {
    name: "Stone door",
    ⵠᐃ: 371,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[172] = {
    name: "Gold door",
    ⵠᐃ: 374,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const yh = 17;
  Br[173] = {
    name: "Diamond door",
    ⵠᐃ: 377,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const wh = 9;
  Br[10] = {
    name: "Chapka",
    ⵠᐃ: 370,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[11] = {
    name: "Big Chapka",
    ⵠᐃ: 380,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[12] = {
    name: "Wood spear",
    ⵠᐃ: 402,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ph = 4;
  Br[13] = {
    name: "Stone spear",
    ⵠᐃ: 396,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[14] = {
    name: "Gold spear",
    ⵠᐃ: 399,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[15] = {
    name: "Diamond spear",
    ⵠᐃ: 405,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[16] = {
    name: "Dragon spear",
    ⵠᐃ: 876,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const kh = 2;
  const Ah = mk;
  const xh = 20;
  Br[17] = {
    name: "Dragon spear",
    ⵠᐃ: 879,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Jh = 8;
  const Mh = 5;
  const Bh = 0;
  Br[18] = {
    name: "Crab spear",
    ⵠᐃ: 900,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Eh = 16;
  const Dh = 15;
  const Ih = 1;
  Br[197] = {
    name: "Crab loot",
    ⵠᐃ: 197,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[119] = {
    name: "Furnace",
    ⵠᐃ: 409,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[23] = {
    name: "Explorer hat",
    ⵠᐃ: 421,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[24] = {
    name: "Pirate hat",
    ⵠᐃ: 424,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[87] = {
    name: "Flower hat",
    ⵠᐃ: 1228,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Sh = Wa;
  Br[88] = {
    name: "Fur hat",
    ⵠᐃ: 1231,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Qh = 11;
  Br[58] = {
    name: "Wood helmet",
    ⵠᐃ: 827,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const _h = 3;
  Br[25] = {
    name: "Stone helmet",
    ⵠᐃ: 430,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[26] = {
    name: "Gold helmet",
    ⵠᐃ: 433,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[27] = {
    name: "Diamond helmet",
    ⵠᐃ: 436,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[28] = {
    name: "Book",
    ⵠᐃ: 439,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Fh = 12;
  const Rh = 6;
  Br[120] = {
    name: "Paper",
    ⵠᐃ: 442,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const jh = 17;
  const Gh = 4;
  const Lh = 14;
  const Wh = Xj;
  Br[29] = {
    name: "Bag",
    ⵠᐃ: 367,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[30] = {
    name: "Amethyst sword",
    ⵠᐃ: 456,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[31] = {
    name: "Amethyst pick",
    ⵠᐃ: 460,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[33] = {
    name: "Amethyst spear",
    ⵠᐃ: 473,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Oh = Ej;
  const qh = 13;
  Br[35] = {
    name: "Stone hammer",
    ⵠᐃ: 478,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Nh = 9;
  Br[36] = {
    name: "Gold hammer",
    ⵠᐃ: 481,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Hh = 7;
  const Uh = 100;
  const Yh = 15;
  const Kh = 19;
  Br[37] = {
    name: "Diamond hammer",
    ⵠᐃ: 484,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Vh = 10;
  Br[38] = {
    name: "Amethyst hammer",
    ⵠᐃ: 487,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Xh = 1;
  Br[39] = {
    name: "Reidite hammer",
    ⵠᐃ: 490,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[122] = {
    name: "Amethyst wall",
    ⵠᐃ: 493,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[123] = {
    name: "Amethyst spike",
    ⵠᐃ: 496,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  ;
  const Zh = En;
  Br[124] = {
    name: "Amethyst door",
    ⵠᐃ: 498,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[40] = {
    name: "Cap & scarf",
    ⵠᐃ: 503,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const el = 0;
  Br[147] = {
    name: "Blue cord",
    ⵠᐃ: 515,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[148] = {
    name: "Lock",
    ⵠᐃ: 519,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const il = 12;
  function tl(a) {
    return Ya.String.fromCharCode(a);
  }
  const nl = Cn;
  Br[151] = {
    name: "Resurrection",
    ⵠᐃ: 530,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[158] = {
    name: "Lockpick",
    ⵠᐃ: 533,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const ol = Jq;
  const al = 17;
  const rl = 255;
  Br[159] = {
    name: "Totem",
    ⵠᐃ: 555,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[43] = {
    name: "Amethyst helmet",
    ⵠᐃ: 542,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[45] = {
    name: "Super hammer",
    ⵠᐃ: 551,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const sl = 16;
  Br[125] = {
    name: "Bridge",
    ⵠᐃ: 604,
    ⵠΔⵠΔ: 1,
    ᐃⵠⲆⵠ: 1
  };
  const hl = 14;
  const ll = 1;
  Br[221] = {
    name: "Wood Tower",
    ⵠᐃ: 1235,
    ⵠΔⵠΔ: 1,
    ᐃⵠⲆⵠ: 1
  };
  const gl = 15;
  Br[127] = {
    name: "Bottle full",
    ⵠᐃ: 715,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[128] = {
    name: "Bottle empty",
    ⵠᐃ: 611,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const ul = 18;
  const bl = 9;
  Br[46] = {
    name: "Stone shovel",
    ⵠᐃ: 618,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[130] = {
    name: "Watering can",
    ⵠᐃ: 627,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const dl = 256;
  const vl = 20;
  Br[132] = {
    name: "Wheat",
    ⵠᐃ: 632,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const cl = 3;
  Br[133] = {
    name: "Cookie",
    ⵠᐃ: 635,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[135] = {
    name: "Windmill",
    ⵠᐃ: 643,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[47] = {
    name: "Super diving suit",
    ⵠᐃ: 647,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[48] = {
    name: "Diving mask",
    ⵠᐃ: 650,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const ml = 100;
  Br[49] = {
    name: "Watering can full",
    ⵠᐃ: 654,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const pl = 100;
  ;
  Br[136] = {
    name: "Cake",
    ⵠᐃ: 660,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Cl = cj;
  Br[138] = {
    name: "Foodfish cooked",
    ⵠᐃ: 666,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  function fl(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function zl(a) {
    return Ya.String.fromCharCode(a);
  }
  const yl = 10;
  Br[141] = {
    name: "Plot",
    ⵠᐃ: 684,
    ⵠΔⵠΔ: 1,
    ᐃⵠⲆⵠ: 1
  };
  Br[143] = {
    name: "Bread",
    ⵠᐃ: 690,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Pl = 255;
  const kl = 100;
  const Al = 8;
  Br[zr.ΔⵠΔⲆⵠᐃΔ] = {
    name: "Bottle full (with ice)",
    ⵠᐃ: tr.ⵠᐃⲆΔⵠΔᐃΔΔ,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[zr.ⲆΔᐃⵠΔⵠΔ] = {
    name: "Bottle full (with well)",
    ⵠᐃ: tr.ᐃⲆⵠⲆᐃᐃⵠⵠⵠ,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const xl = 14;
  Br[50] = {
    name: "Gold shovel",
    ⵠᐃ: 700,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Jl = 4;
  Br[51] = {
    name: "Diamond shovel",
    ⵠᐃ: 704,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[52] = {
    name: "Amethyst shovel",
    ⵠᐃ: 706,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ml = 1;
  Br[55] = {
    name: "Spanner",
    ⵠᐃ: 711,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Bl = 11;
  const El = 3;
  Br[56] = {
    name: "Machete",
    ⵠᐃ: 714,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Dl = 2;
  Br[144] = {
    name: "Bread oven",
    ⵠᐃ: 718,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Il = 17;
  Br[145] = {
    name: "Sandwich",
    ⵠᐃ: 730,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Sl = 19;
  const Ql = 5;
  Br[59] = {
    name: "Dragon helmet",
    ⵠᐃ: 734,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[60] = {
    name: "Dragon helmet",
    ⵠᐃ: 737,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const _l = 0;
  Br[90] = {
    name: "Witch",
    ⵠᐃ: 740,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[91] = {
    name: "Nimbus",
    ⵠᐃ: 743,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[92] = {
    name: "Wand1",
    ⵠᐃ: 746,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[93] = {
    name: "Wand2",
    ⵠᐃ: 749,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[62] = {
    name: "Dragon sword",
    ⵠᐃ: 564,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Fl = Ja;
  Br[63] = {
    name: "Dragon sword",
    ⵠᐃ: 567,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Rl = 4;
  const jl = 7;
  Br[71] = {
    name: "Wood shield",
    ⵠᐃ: 1238,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Gl = 6;
  Br[72] = {
    name: "Stone shield",
    ⵠᐃ: 1241,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[73] = {
    name: "Gold shield",
    ⵠᐃ: 1244,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[74] = {
    name: "Diamond shield",
    ⵠᐃ: 1247,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[75] = {
    name: "Amethyst shield",
    ⵠᐃ: 1250,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ll = 5;
  Br[76] = {
    name: "Reidite shield",
    ⵠᐃ: 1253,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[94] = {
    name: "Wood axe",
    ⵠᐃ: 1256,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[95] = {
    name: "Stone axe",
    ⵠᐃ: 1259,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[96] = {
    name: "Gold axe",
    ⵠᐃ: 1262,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Wl = 13;
  const Ol = 1;
  const ql = 256;
  const Nl = 15;
  const Hl = 0;
  Br[97] = {
    name: "Diamond axe",
    ⵠᐃ: 1265,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ul = 18;
  Br[98] = {
    name: "Amethyst axe",
    ⵠᐃ: 1268,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Yl = 9;
  const Kl = 16;
  const Vl = hq;
  Br[99] = {
    name: "Reidite axe",
    ⵠᐃ: 1271,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[64] = {
    name: "Wood bow",
    ⵠᐃ: 570,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[65] = {
    name: "Stone bow",
    ⵠᐃ: 573,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[66] = {
    name: "Gold bow",
    ⵠᐃ: 576,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[67] = {
    name: "Diamond bow",
    ⵠᐃ: 579,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[68] = {
    name: "Amethyst bow",
    ⵠᐃ: 582,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Xl = 5;
  Br[69] = {
    name: "Reidite bow",
    ⵠᐃ: 585,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Zl = 5;
  const $l = 12;
  Br[70] = {
    name: "Dragon bow",
    ⵠᐃ: 588,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[77] = {
    name: "Crown of life",
    ⵠᐃ: 758,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[175] = {
    name: "Gem of life",
    ⵠᐃ: 176,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const eg = 14282495;
  const ig = 14282495 .ᐃⵠᐃᐃ;
  const tg = `const ᐃⵠΔⵠ = (typeof ⲆᐃⲆⲆᐃΔΔ === "${ig}") ? 1 : 0; return ᐃⵠΔⵠ;`;
  Br[185] = {
    name: "Orb of the dragon",
    ⵠᐃ: 252,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const ng = 20;
  Br[187] = {
    name: "Orb of the dragon",
    ⵠᐃ: 253,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[184] = {
    name: "Cube of the dragon",
    ⵠᐃ: 751,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const og = 2;
  Br[186] = {
    name: "Cube of the dragon",
    ⵠᐃ: 753,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[78] = {
    name: "Crown of luck",
    ⵠᐃ: 762,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[176] = {
    name: "Gem of luck",
    ⵠᐃ: 177,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[79] = {
    name: "Crown of the angel",
    ⵠᐃ: 770,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const ag = Xj;
  const rg = 12;
  const sg = 8;
  const hg = 14;
  const lg = mk;
  Br[177] = {
    name: "Gem of the angel",
    ⵠᐃ: 175,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[149] = {
    name: "Dragon heart",
    ⵠᐃ: 521,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[150] = {
    name: "Lava heart",
    ⵠᐃ: 523,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[83] = {
    name: "Hood",
    ⵠᐃ: 768,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const gg = 100;
  Br[84] = {
    name: "Peasant",
    ⵠᐃ: 772,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const ug = 16;
  const bg = 4;
  Br[86] = {
    name: "Winter peasant",
    ⵠᐃ: 777,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const dg = 3;
  ;
  const vg = Ah;
  const mg = 9;
  Br[85] = {
    name: "Winter hood",
    ⵠᐃ: 780,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[180] = {
    name: "Bucket full",
    ⵠᐃ: 784,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const pg = 20;
  const Cg = 17;
  const Tg = 5;
  Br[181] = {
    name: "Bucket empty",
    ⵠᐃ: 785,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const fg = 17;
  const zg = 10;
  Br[182] = {
    name: "Well",
    ⵠᐃ: 791,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[183] = {
    name: "Sign",
    ⵠᐃ: 799,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const yg = 20;
  const wg = 100;
  Br[188] = {
    name: "Pumpkin Seed",
    ⵠᐃ: 809,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[191] = {
    name: "Garlic Seed",
    ⵠᐃ: 835,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Pg = 12;
  const kg = 11;
  Br[193] = {
    name: "Thorbushes Seed",
    ⵠᐃ: 846,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Ag = 9;
  const xg = T;
  Br[190] = {
    name: "Roof",
    ⵠᐃ: 843,
    ⵠΔⵠΔ: 1,
    ᐃⵠⲆⵠ: 1
  };
  Br[61] = {
    name: "Crab Crown",
    ⵠᐃ: 912,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[204] = {
    name: "Carrot Seed",
    ⵠᐃ: 950,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  ;
  const Jg = 16;
  const Bg = 16623130;
  const Eg = 16623130 .ⲆⲆᐃⵠᐃΔⵠ;
  const Dg = `const ᐃΔᐃΔᐃᐃΔ = (typeof ⵠⵠⵠΔⵠⵠΔ === "${Eg}") ? 1 : 0; return ᐃΔᐃΔᐃᐃΔ;`;
  const Ig = Oh;
  Br[206] = {
    name: "Tomato Seed",
    ⵠᐃ: 960,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[208] = {
    name: "Watermelon Seed",
    ⵠᐃ: 967,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[210] = {
    name: "Aloe Vera Seed",
    ⵠᐃ: 982,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Sg = 19;
  Br[80] = {
    name: "Cap",
    ⵠᐃ: 1138,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[81] = {
    name: "Turban",
    ⵠᐃ: 1141,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Qg = 8;
  Br[82] = {
    name: "Pilot Helmet",
    ⵠᐃ: 427,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[152] = {
    name: "Emerald Machine",
    ⵠᐃ: 1196,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[153] = {
    name: "Emerald Machine",
    ⵠᐃ: 1200,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const _g = 5;
  const Fg = 18;
  Br[154] = {
    name: "Emerald Machine",
    ⵠᐃ: 1204,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[155] = {
    name: "Emerald Machine",
    ⵠᐃ: 1208,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[156] = {
    name: "Emerald Machine",
    ⵠᐃ: 1212,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[157] = {
    name: "Emerald Machine",
    ⵠᐃ: 1216,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[53] = {
    name: "Pitchfork",
    ⵠᐃ: 977,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[212] = {
    name: "Wood Door Spike",
    ⵠᐃ: 990,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Rg = 6;
  const jg = 13;
  const Gg = 7;
  const Lg = Fl;
  Br[213] = {
    name: "Stone Door Spike",
    ⵠᐃ: 993,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Wg = 11;
  const Og = 10;
  const qg = 19;
  const Ng = 255;
  const Hg = 256;
  Br[214] = {
    name: "Gold Door Spike",
    ⵠᐃ: 996,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Ug = 16;
  Br[215] = {
    name: "Diamond Door Spike",
    ⵠᐃ: 999,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[216] = {
    name: "Amethyst Door Spike",
    ⵠᐃ: 1002,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Yg = 255;
  Br[20] = {
    name: "Diamond Fire Protection ",
    ⵠᐃ: 922,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Kg = 1;
  Br[21] = {
    name: "Amethyst Fire Protection ",
    ⵠᐃ: 926,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[22] = {
    name: "Amethyst Fire Protection ",
    ⵠᐃ: 930,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Vg = 100;
  Br[19] = {
    name: "Reidite Sword",
    ⵠᐃ: 933,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const Xg = ns;
  const Zg = 15;
  Br[34] = {
    name: "Reidite Spear",
    ⵠᐃ: 944,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const $g = 1;
  Br[44] = {
    name: "Reidite Helmet",
    ⵠᐃ: 947,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[220] = {
    name: "Reidite Door Spike",
    ⵠᐃ: 1005,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[218] = {
    name: "Reidite Door",
    ⵠᐃ: 1008,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[219] = {
    name: "Reidite Spike",
    ⵠᐃ: 1011,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[217] = {
    name: "Reidite Wall",
    ⵠᐃ: 1014,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[32] = {
    name: "Reidite pick",
    ⵠᐃ: 1019,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[223] = {
    name: "Boat",
    ⵠᐃ: 1027,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[224] = {
    name: "Sled",
    ⵠᐃ: 1030,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  Br[89] = {
    name: "Saddle",
    ⵠᐃ: 1048,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 1
  };
  const xs = 20;
  const ys = 9;
  const zs = 100;
  Br[225] = {
    name: "Mount Boar",
    ⵠᐃ: 1051,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const As = 0;
  const Bs = 14;
  Br[226] = {
    name: "Mount King Crab",
    ⵠᐃ: 1191,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[227] = {
    name: "Mount Baby Dragon",
    ⵠᐃ: 1082,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[228] = {
    name: "Mount Baby Lava",
    ⵠᐃ: 1097,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Cs = 17;
  const Ds = Ja;
  const Es = 2;
  Br[229] = {
    name: "Mount Hawk",
    ⵠᐃ: 1112,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  const Fs = 18;
  Br[230] = {
    name: "Plane",
    ⵠᐃ: 1116,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[54] = {
    name: "Pitchfork 2",
    ⵠᐃ: 980,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  Br[239] = {
    name: "Baby Mammoth",
    ⵠᐃ: 1226,
    ⵠΔⵠΔ: 0,
    ᐃⵠⲆⵠ: 0
  };
  function Gs(a) {
    return Ya.String.fromCharCode(a);
  }
  var Hs = undefined;
  var Is = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 0,
    ΔⲆᐃⵠ: 113,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 1,
    ΔⲆᐃⵠ: 118,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 2,
    ΔⲆᐃⵠ: 119,
    time: 1 / 20,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 3,
    ΔⲆᐃⵠ: 114,
    time: 1 / 6,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 4,
    ΔⲆᐃⵠ: 8,
    time: 1 / 3,
    ᐃᐃⵠ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 5,
    ΔⲆᐃⵠ: 1,
    time: 1 / 8,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 6,
    ΔⲆᐃⵠ: 3,
    time: 1 / 12,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 7,
    ΔⲆᐃⵠ: 4,
    time: 1 / 20,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 8,
    ΔⲆᐃⵠ: 31,
    time: 1 / 60,
    ᐃᐃⵠ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 9,
    ΔⲆᐃⵠ: 32,
    time: 1 / 90,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 10,
    ΔⲆᐃⵠ: 35,
    time: 0.1,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 11,
    ΔⲆᐃⵠ: 36,
    time: 1 / 15,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 12,
    ΔⲆᐃⵠ: 37,
    time: 1 / 20,
    ᐃᐃⵠ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 13,
    ΔⲆᐃⵠ: 38,
    time: 1 / 60,
    ᐃᐃⵠ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 14,
    ΔⲆᐃⵠ: 39,
    time: 1 / 90,
    ᐃᐃⵠ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 15,
    ΔⲆᐃⵠ: 45,
    time: 1 / 120,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 16,
    ΔⲆᐃⵠ: 46,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 17,
    ΔⲆᐃⵠ: 50,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 18,
    ΔⲆᐃⵠ: 51,
    time: 1 / 20,
    ᐃᐃⵠ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 19,
    ΔⲆᐃⵠ: 52,
    time: 1 / 40,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 20,
    ΔⲆᐃⵠ: 130,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 21,
    ΔⲆᐃⵠ: 49,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 22,
    ΔⲆᐃⵠ: 53,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 23,
    ΔⲆᐃⵠ: 54,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 24,
    ΔⲆᐃⵠ: 28,
    time: 1 / 15,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 25,
    ΔⲆᐃⵠ: 12,
    time: 0.2,
    ᐃᐃⵠ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 26,
    ΔⲆᐃⵠ: 13,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 27,
    ΔⲆᐃⵠ: 14,
    ᐃᐃⵠ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 28,
    ΔⲆᐃⵠ: 15,
    time: 0.03333333333333333,
    ᐃᐃⵠ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 29,
    ΔⲆᐃⵠ: 33,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 30,
    ΔⲆᐃⵠ: 34,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 31,
    ΔⲆᐃⵠ: 16,
    time: 1 / 120,
    ᐃᐃⵠ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 32,
    ΔⲆᐃⵠ: 17,
    time: 0.005,
    ᐃᐃⵠ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 33,
    ΔⲆᐃⵠ: 18,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 34,
    ΔⲆᐃⵠ: 57,
    time: 1 / 5,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 35,
    ΔⲆᐃⵠ: 0,
    time: 0.1,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 36,
    ΔⲆᐃⵠ: 5,
    time: 1 / 20,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 37,
    ΔⲆᐃⵠ: 6,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 38,
    ΔⲆᐃⵠ: 30,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 39,
    ΔⲆᐃⵠ: 19,
    time: 0.011111111111111112,
    ᐃᐃⵠ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 40,
    ΔⲆᐃⵠ: 115,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 41,
    ΔⲆᐃⵠ: 132,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 42,
    ΔⲆᐃⵠ: 188,
    time: 0.2,
    ᐃᐃⵠ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 43,
    ΔⲆᐃⵠ: 191,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 44,
    ΔⲆᐃⵠ: 193,
    time: 0.2,
    ᐃᐃⵠ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 45,
    ΔⲆᐃⵠ: 204,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 46,
    ΔⲆᐃⵠ: 206,
    time: 0.2,
    ᐃᐃⵠ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 47,
    ΔⲆᐃⵠ: 208,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 48,
    ΔⲆᐃⵠ: 210,
    time: 0.2,
    ᐃᐃⵠ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 49,
    ΔⲆᐃⵠ: 117,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 50,
    ΔⲆᐃⵠ: 138,
    time: 1 / 3,
    ᐃᐃⵠ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 51,
    ΔⲆᐃⵠ: 143,
    time: 1 / 3,
    ᐃᐃⵠ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 52,
    ΔⲆᐃⵠ: 133,
    time: 0.3333333333333333,
    ᐃᐃⵠ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 53,
    ΔⲆᐃⵠ: 136,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 54,
    ΔⲆᐃⵠ: 195,
    time: 0.2,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 55,
    ΔⲆᐃⵠ: 162,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 56,
    ΔⲆᐃⵠ: 163,
    time: 0.2,
    ᐃᐃⵠ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 57,
    ΔⲆᐃⵠ: 164,
    time: 0.2,
    ᐃᐃⵠ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 58,
    ΔⲆᐃⵠ: 165,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 59,
    ΔⲆᐃⵠ: 122,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 60,
    ΔⲆᐃⵠ: 217,
    time: 1 / 5,
    ᐃᐃⵠ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 61,
    ΔⲆᐃⵠ: 166,
    time: 0.125,
    ᐃᐃⵠ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 62,
    ΔⲆᐃⵠ: 171,
    time: 0.125,
    ᐃᐃⵠ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 63,
    ΔⲆᐃⵠ: 172,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 64,
    ΔⲆᐃⵠ: 173,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 65,
    ΔⲆᐃⵠ: 124,
    time: 1 / 8,
    ᐃᐃⵠ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 66,
    ΔⲆᐃⵠ: 218,
    time: 0.125,
    ᐃᐃⵠ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 67,
    ΔⲆᐃⵠ: 160,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 68,
    ΔⲆᐃⵠ: 168,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 69,
    ΔⲆᐃⵠ: 169,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 70,
    ΔⲆᐃⵠ: 170,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 71,
    ΔⲆᐃⵠ: 123,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 72,
    ΔⲆᐃⵠ: 219,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 73,
    ΔⲆᐃⵠ: 212,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 74,
    ΔⲆᐃⵠ: 213,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 75,
    ΔⲆᐃⵠ: 214,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 76,
    ΔⲆᐃⵠ: 215,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 77,
    ΔⲆᐃⵠ: 216,
    time: 0.05,
    ᐃᐃⵠ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 78,
    ΔⲆᐃⵠ: 220,
    time: 1 / 20,
    ᐃᐃⵠ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 79,
    ΔⲆᐃⵠ: 167,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 80,
    ΔⲆᐃⵠ: 23,
    time: 0.2,
    ᐃᐃⵠ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 81,
    ΔⲆᐃⵠ: 24,
    time: 0.03333333333333333,
    ᐃᐃⵠ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 82,
    ΔⲆᐃⵠ: 82,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 83,
    ΔⲆᐃⵠ: 10,
    time: 1 / 5,
    ᐃᐃⵠ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 84,
    ΔⲆᐃⵠ: 11,
    time: 1 / 12,
    ᐃᐃⵠ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 85,
    ΔⲆᐃⵠ: 40,
    time: 0.03333333333333333,
    ᐃᐃⵠ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 86,
    ΔⲆᐃⵠ: 88,
    time: 1 / 50,
    ᐃᐃⵠ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 87,
    ΔⲆᐃⵠ: 58,
    time: 1 / 5,
    ᐃᐃⵠ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 88,
    ΔⲆᐃⵠ: 25,
    time: 1 / 10,
    ᐃᐃⵠ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 89,
    ΔⲆᐃⵠ: 26,
    time: 1 / 20,
    ᐃᐃⵠ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 90,
    ΔⲆᐃⵠ: 27,
    time: 1 / 30,
    ᐃᐃⵠ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 91,
    ΔⲆᐃⵠ: 43,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 92,
    ΔⲆᐃⵠ: 44,
    time: 0.011111111111111112,
    ᐃᐃⵠ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 93,
    ΔⲆᐃⵠ: 48,
    time: 0.05,
    ᐃᐃⵠ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 94,
    ΔⲆᐃⵠ: 47,
    time: 1 / 90,
    ᐃᐃⵠ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 95,
    ΔⲆᐃⵠ: 20,
    time: 1 / 20,
    ᐃᐃⵠ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 96,
    ΔⲆᐃⵠ: 21,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 97,
    ΔⲆᐃⵠ: 22,
    time: 0.011111111111111112,
    ᐃᐃⵠ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 98,
    ΔⲆᐃⵠ: 80,
    time: 1 / 15,
    ᐃᐃⵠ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 99,
    ΔⲆᐃⵠ: 81,
    time: 1 / 150,
    ᐃᐃⵠ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 100,
    ΔⲆᐃⵠ: 29,
    time: 0.06666666666666667,
    ᐃᐃⵠ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 101,
    ΔⲆᐃⵠ: 120,
    time: 1 / 3,
    ᐃᐃⵠ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 102,
    ΔⲆᐃⵠ: 147,
    time: 1 / 3,
    ᐃᐃⵠ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 103,
    ΔⲆᐃⵠ: 148,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 104,
    ΔⲆᐃⵠ: 158,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 105,
    ΔⲆᐃⵠ: 159,
    time: 1 / 10,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 106,
    ΔⲆᐃⵠ: 125,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 107,
    ΔⲆᐃⵠ: 190,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 108,
    ΔⲆᐃⵠ: 221,
    time: 1 / 15,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 109,
    ΔⲆᐃⵠ: 141,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 110,
    ΔⲆᐃⵠ: 128,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 111,
    ΔⲆᐃⵠ: 127,
    time: 1 / 5,
    ᐃᐃⵠ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 112,
    ΔⲆᐃⵠ: 127,
    time: 1 / 10,
    ᐃᐃⵠ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 1,
    id: 113,
    ΔⲆᐃⵠ: 127,
    time: 1 / 3,
    ᐃᐃⵠ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 114,
    ΔⲆᐃⵠ: 135,
    time: 1 / 10,
    ᐃᐃⵠ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 115,
    ΔⲆᐃⵠ: 151,
    time: 1 / 20,
    ᐃᐃⵠ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 116,
    ΔⲆᐃⵠ: 152,
    time: 1 / 200,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 117,
    ΔⲆᐃⵠ: 153,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 118,
    ΔⲆᐃⵠ: 154,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 119,
    ΔⲆᐃⵠ: 155,
    time: 0.011111111111111112,
    ᐃᐃⵠ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 120,
    ΔⲆᐃⵠ: 156,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 121,
    ΔⲆᐃⵠ: 157,
    time: 1 / 90,
    ᐃᐃⵠ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 122,
    ΔⲆᐃⵠ: 55,
    time: 0.1,
    ᐃᐃⵠ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 123,
    ΔⲆᐃⵠ: 56,
    time: 1 / 10,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 124,
    ΔⲆᐃⵠ: 144,
    time: 1 / 10,
    ᐃᐃⵠ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 125,
    ΔⲆᐃⵠ: 145,
    time: 1 / 3,
    ᐃᐃⵠ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 126,
    ΔⲆᐃⵠ: 59,
    time: 0.008333333333333333,
    ᐃᐃⵠ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 127,
    ΔⲆᐃⵠ: 60,
    time: 0.005555555555555556,
    ᐃᐃⵠ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 128,
    ΔⲆᐃⵠ: 61,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 129,
    ΔⲆᐃⵠ: 62,
    time: 1 / 120,
    ᐃᐃⵠ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 130,
    ΔⲆᐃⵠ: 63,
    time: 1 / 180,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 131,
    ΔⲆᐃⵠ: 64,
    time: 1 / 20,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 132,
    ΔⲆᐃⵠ: 101,
    time: 1 / 5,
    ᐃᐃⵠ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 133,
    ΔⲆᐃⵠ: 65,
    time: 1 / 25,
    ᐃᐃⵠ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 134,
    ΔⲆᐃⵠ: 102,
    time: 0.2,
    ᐃᐃⵠ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 135,
    ΔⲆᐃⵠ: 66,
    time: 0.03333333333333333,
    ᐃᐃⵠ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 136,
    ΔⲆᐃⵠ: 103,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 137,
    ΔⲆᐃⵠ: 67,
    time: 0.02857142857142857,
    ᐃᐃⵠ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 138,
    ΔⲆᐃⵠ: 104,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 139,
    ΔⲆᐃⵠ: 68,
    time: 0.025,
    ᐃᐃⵠ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 140,
    ΔⲆᐃⵠ: 105,
    time: 0.06666666666666667,
    ᐃᐃⵠ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 141,
    ΔⲆᐃⵠ: 69,
    time: 1 / 45,
    ᐃᐃⵠ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 142,
    ΔⲆᐃⵠ: 106,
    time: 1 / 15,
    ᐃᐃⵠ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 143,
    ΔⲆᐃⵠ: 70,
    time: 0.02,
    ᐃᐃⵠ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 144,
    ΔⲆᐃⵠ: 107,
    time: 0.05,
    ᐃᐃⵠ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 145,
    ΔⲆᐃⵠ: 71,
    time: 0.04,
    ᐃᐃⵠ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 146,
    ΔⲆᐃⵠ: 72,
    time: 0.025,
    ᐃᐃⵠ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 147,
    ΔⲆᐃⵠ: 73,
    time: 1 / 50,
    ᐃᐃⵠ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 148,
    ΔⲆᐃⵠ: 74,
    time: 1 / 70,
    ᐃᐃⵠ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 149,
    ΔⲆᐃⵠ: 75,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 150,
    ΔⲆᐃⵠ: 76,
    time: 1 / 120,
    ᐃᐃⵠ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 151,
    ΔⲆᐃⵠ: 77,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 152,
    ΔⲆᐃⵠ: 78,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 153,
    ΔⲆᐃⵠ: 79,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 154,
    ΔⲆᐃⵠ: 83,
    time: 1 / 10,
    ᐃᐃⵠ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 155,
    ΔⲆᐃⵠ: 84,
    time: 1 / 10,
    ᐃᐃⵠ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 156,
    ΔⲆᐃⵠ: 85,
    time: 0.016666666666666666,
    ᐃᐃⵠ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 157,
    ΔⲆᐃⵠ: 86,
    time: 1 / 60,
    ᐃᐃⵠ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ᐃⲆᐃ: 1,
    e: 0,
    id: 158,
    ΔⲆᐃⵠ: 180,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 159,
    ΔⲆᐃⵠ: 181,
    time: 1 / 5,
    ᐃᐃⵠ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 160,
    ΔⲆᐃⵠ: 182,
    time: 0.1,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 161,
    ΔⲆᐃⵠ: 183,
    time: 1 / 5,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 162,
    ΔⲆᐃⵠ: 198,
    time: 0.05,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 163,
    ΔⲆᐃⵠ: 223,
    time: 1 / 50,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 164,
    ΔⲆᐃⵠ: 224,
    time: 1 / 50,
    ᐃᐃⵠ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 165,
    ΔⲆᐃⵠ: 89,
    time: 0.05,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 166,
    ΔⲆᐃⵠ: 230,
    time: 0.02,
    ᐃᐃⵠ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 167,
    ΔⲆᐃⵠ: 94,
    time: 0.2,
    ᐃᐃⵠ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 168,
    ΔⲆᐃⵠ: 95,
    time: 1 / 10,
    ᐃᐃⵠ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 169,
    ΔⲆᐃⵠ: 96,
    time: 1 / 20,
    ᐃᐃⵠ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 170,
    ΔⲆᐃⵠ: 97,
    time: 1 / 30,
    ᐃᐃⵠ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 171,
    ΔⲆᐃⵠ: 98,
    time: 1 / 60,
    ᐃᐃⵠ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ᐃⲆᐃ: 0,
    e: 0,
    id: 172,
    ΔⲆᐃⵠ: 99,
    time: 1 / 90,
    ᐃᐃⵠ: 1
  }];
  const Js = 5;
  sr = 300;
  Δᐃᐃ = {
    ⵠᐃⵠⲆΔᐃᐃ: 300,
    ⵠⵠⵠⲆᐃⲆⲆ: 301,
    ⲆΔᐃⵠΔᐃⵠ: 302,
    ᐃᐃΔⲆᐃΔⲆ: 303,
    ΔⲆⲆΔⵠΔⲆ: 304,
    ᐃᐃᐃᐃᐃⲆΔ: 305,
    ⵠⵠᐃᐃⵠⲆⵠ: 306,
    ⵠᐃⵠᐃᐃⵠᐃ: 307,
    ⵠᐃΔⵠᐃⵠᐃ: 308,
    ⵠΔᐃΔⵠⵠⵠ: 309,
    ᐃΔΔⲆⲆⲆⵠ: 310,
    ΔⵠΔᐃⵠⵠⵠ: 311,
    EMPTY: 312,
    ⵠⲆᐃⵠⵠΔΔ: 313,
    ᐃΔᐃⵠⵠᐃᐃ: 314,
    ⵠⵠΔΔᐃΔᐃ: 315,
    ΔᐃⲆΔΔᐃΔ: 316,
    ⵠⵠⲆⲆΔᐃⵠ: 317,
    ᐃⲆᐃⲆⵠⲆᐃ: 318,
    ΔⵠᐃᐃΔᐃⲆ: 319,
    ⵠΔᐃⲆⲆⲆⲆ: 320,
    ⵠⲆⲆΔⲆⵠⵠ: 321,
    ΔᐃⵠᐃΔ: 322,
    ᐃⵠⲆᐃΔⲆᐃ: 323,
    ᐃⲆⵠⲆᐃ: 324,
    ΔⲆᐃᐃⲆⵠⵠ: 325,
    ᐃᐃᐃΔⵠΔⲆ: 326,
    ⲆⲆᐃᐃⲆⲆᐃ: 327,
    ᐃⲆⲆⵠⵠⲆⵠ: 328,
    ⵠΔᐃⲆⵠΔⲆ: 329,
    ⲆᐃᐃΔΔⵠᐃ: 330,
    ᐃⲆᐃΔⵠⲆⲆ: 331,
    POINTS: 332,
    ⲆᐃᐃΔⲆΔᐃ: 333,
    ᐃΔᐃΔⲆΔΔ: 334,
    ΔⵠΔⲆᐃᐃᐃ: 335,
    ᐃⲆΔΔⵠⵠᐃ: 336,
    ᐃΔΔΔΔΔⲆ: 337,
    ⲆⲆΔΔⲆⲆᐃ: 338,
    ⲆΔᐃᐃᐃΔⲆ: 339,
    ⵠⲆⲆⲆΔⵠᐃ: 340,
    ⵠⲆΔⲆᐃᐃᐃ: 341,
    ⵠΔᐃΔΔⲆᐃ: 342,
    ΔΔⲆⲆΔΔⲆ: 343
  };
  const Ks = 13;
  function Ls() {
    pt[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    pt[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    pt[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    pt[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    pt[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    pt[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    pt[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    pt[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    pt[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    pt[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    pt[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    pt[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    pt[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    pt[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    pt[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    pt[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    pt[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    pt[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    pt[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    pt[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    pt[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    pt[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    pt[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    pt[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    pt[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    pt[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    pt[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    pt[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    pt[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    pt[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    pt[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    pt[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    pt[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    pt[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    pt[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    pt[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    pt[232] = ["Vulture Feather", "From a deadly vulture"];
    pt[234] = ["Emerald", "How many golden breads can you get from it?"];
    pt[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    pt[80] = ["Turban", "Useful to survive in the desert."];
    pt[81] = ["Ninja outfit", "Essential to survive in the desert"];
    pt[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    pt[236] = ["Pilot Glasses"];
    pt[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    pt[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    pt[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    pt[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    pt[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    pt[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    pt[89] = ["Saddle", "Hit a boar with it to tame it."];
    pt[90] = ["Witch Hat", "You're a wizard Starvy!"];
    pt[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    pt[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    pt[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    pt[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    pt[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    pt[224] = ["Sled", "You are faster with it in the snow"];
    pt[223] = ["Boat", "You are faster with it in the water"];
    pt[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    pt[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    pt[222] = ["Penguin Feather", "From a deadly cute penguin."];
    pt[231] = ["Hawk Feather", "From a deadly hawk."];
    pt[233] = ["Cactus", "Food : 20", "Water : 10"];
    pt[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    pt[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    pt[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    pt[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    pt[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    pt[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    pt[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    pt[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    pt[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    pt[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    pt[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    pt[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    pt[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    pt[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    pt[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    pt[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    pt[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    pt[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    pt[53] = ["Pitchfork", "Perfect for gathering"];
    pt[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    pt[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    pt[zr.ᐃⲆⲆⵠᐃΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    pt[zr.ⲆⲆᐃⲆⵠᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    pt[zr.ΔᐃⵠᐃⲆⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    pt[zr.ᐃΔⵠΔⵠᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    pt[zr.ΔⲆⲆⲆΔΔᐃ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    pt[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    pt[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    pt[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    pt[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    pt[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    pt[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    pt[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    pt[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    pt[203] = ["Flame", "It's hot!"];
    pt[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    pt[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    pt[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    pt[202] = ["Reidite", "The ultimate ore"];
    pt[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    st[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    st[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    st[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    st[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    st[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    st[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    st[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    st[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    st[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    st[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    st[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    st[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    st[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    st[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    st[38] = ["You died crushed by an angry baby mammoth."];
    st[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    st[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[341] = "A sandstorm is approaching in a few seconds.";
    pt[340] = "The sandstorm will soon stop.";
    pt[343] = "A blizzard is approaching in a few seconds.";
    pt[342] = "The blizzard will soon stop.";
    pt[328] = " BACK TO THE GAME";
    pt[329] = " Share on Twitter";
    pt[330] = " Share on Facebook";
    pt[331] = "You can buy items on the shop in the next game with your points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Kill";
    pt[335] = "Days survived";
    pt[336] = "Building method: Free. Press G to change";
    pt[337] = "Building method: Grid. Press G to change";
    pt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    pt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    pt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    pt[7] = ["Hand"];
    pt[140] = ["Dirt", "Dirty!"];
    pt[126] = ["Sand", "I got it in my eyes!"];
    pt[109] = ["Wood", "You can't get enough of it!"];
    pt[108] = ["Stone", "Also called a rock"];
    pt[111] = ["Gold", "Be generous, give it to others"];
    pt[112] = ["Diamond", "What will you make with it?"];
    pt[121] = ["Amethyst", "It's Mauve like Lapa"];
    pt[131] = ["Flour", "Used in cooking"];
    pt[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    pt[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    pt[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    pt[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    pt[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    pt[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    pt[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    pt[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    pt[200] = ["Candies", "Only for children!", "Food: 20"];
    pt[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    pt[201] = ["Garland", "Perfect decoration for roofs"];
    pt[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    pt[110] = ["Berry", "Berry tasty!", "Food: 10"];
    pt[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    pt[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    pt[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    pt[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    pt[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    pt[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    pt[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    pt[194] = ["Thorn bush", "It stings!"];
    pt[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    pt[142] = ["Ice", "Useful for making cakes and water"];
    pt[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    pt[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    pt[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    pt[178] = ["Pure Fur", "You're a bread factory"];
    pt[179] = ["Dark Fur", "You get ready to do something wrong"];
    pt[146] = ["Winter Fur", "These animals just wanted a hug..."];
    pt[139] = ["Scales", "It smells like fish!"];
    pt[129] = ["Kraken Skin", "Weren't you too scared?"];
    pt[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    pt[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    pt[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    pt[161] = ["Cord", "Used in crafting Hats and Bag"];
    pt[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    pt[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    pt[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    pt[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    pt[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    pt[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    pt[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    pt[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    pt[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    pt[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    pt[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    pt[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    pt[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    pt[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    pt[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    pt[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    pt[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    pt[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    pt[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    pt[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    pt[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    pt[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    pt[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    pt[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    pt[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    pt[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    pt[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    pt[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    pt[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    pt[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    pt[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    pt[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    pt[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    pt[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    pt[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    pt[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    pt[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    pt[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    pt[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    pt[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    pt[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    pt[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    pt[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    pt[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    pt[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    pt[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    pt[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    pt[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    pt[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    pt[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    pt[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    pt[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    pt[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    pt[177] = ["Blue Gemstone", "For too kind people"];
    pt[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    pt[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    pt[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    pt[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    pt[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    pt[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    pt[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    pt[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    pt[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    pt[29] = ["Bag", "More space for your items!"];
    pt[120] = ["Paper", "Used in book-crafting"];
    pt[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    pt[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    pt[148] = ["Lock", "Allow you to lock your chest"];
    pt[158] = ["Lock-pick", "Allows you to unlock one chest"];
    pt[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    pt[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    pt[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    pt[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    pt[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    pt[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    pt[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    pt[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    pt[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    pt[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    pt[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    pt[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    pt[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    pt[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    pt[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    pt[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    pt[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    pt[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    pt[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    pt[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    pt[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    pt[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    pt[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    pt[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    pt[300] = "You cannot join this server";
    pt[301] = "Kicked: ";
    pt[302] = "Your key is already used by someone else";
    pt[303] = "Your key is wrong";
    pt[304] = "You have an old version, you need to clear your cache";
    pt[338] = "Your client version is too recent for this server. The server is being updated";
    pt[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    pt[305] = "There are no more new resources";
    pt[306] = "You survived 1 day";
    pt[307] = "You survived ";
    pt[308] = " days";
    pt[309] = "You are dead ;-;";
    pt[310] = "Server cannot find spawn location! Spam the play button!";
    pt[311] = "Server is full! Spam the play button!";
    pt[312] = "Resource is empty";
    pt[313] = "Inventory is full (right-click to empty items)";
    pt[314] = " is dead";
    pt[315] = "This is not the right tool";
    pt[316] = "You joined a team";
    pt[317] = "You are dead";
    pt[318] = " joined the team";
    pt[319] = "Your team was destroyed";
    pt[320] = "You left the team";
    pt[321] = " left the team";
    pt[322] = "Someone stole your token :>";
    pt[323] = "Choose a server";
    pt[324] = "players";
    pt[325] = "total players";
    pt[326] = "players on this mode";
    pt[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    st[0] = ["You were killed for no reason"];
    st[1] = ["You starved to death, as the name of the game implies"];
    st[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    st[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    st[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    st[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    st[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    st[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    st[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    st[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    st[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    st[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    st[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    st[13] = ["You died of thirst. Better drink your own piss."];
    st[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    st[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    st[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    st[17] = ["Your skin's falling apart, the sun killed you."];
    st[18] = ["Garlic stored in your pockets boiled your brain."];
    st[19] = ["As a vampire, don't stand near the garlic cloves."];
    st[20] = ["You ate garlic as a vampire, what did you expect?"];
    st[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const Ms = 8;
  function Ns() {
    pt[184] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[328] = " BACK TO THE GAME";
    pt[329] = " Share on Twitter";
    pt[330] = " Share on Facebook";
    pt[331] = "You can buy items on the shop in the next game with your points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Kill";
    pt[335] = "Days survived";
    pt[336] = "Building method: Free. Press G to change";
    pt[337] = "Building method: Grid. Press G to change";
    pt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    pt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    pt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    pt[7] = ["Рука"];
    pt[140] = ["Земля", "Грязно!"];
    pt[126] = ["Песок", "Он в моих глазах!"];
    pt[109] = ["Дерево", "Постоянно нужно больше!"];
    pt[108] = ["Камень", "Твердый"];
    pt[111] = ["Золото", "Будьте щедры, давайте его другим"];
    pt[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    pt[121] = ["Аметист", "Он сиреневый, как Lapa"];
    pt[131] = ["Мука", "Используется в готовке"];
    pt[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    pt[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    pt[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    pt[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    pt[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    pt[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    pt[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    pt[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    pt[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    pt[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    pt[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    pt[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    pt[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    pt[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    pt[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    pt[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    pt[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    pt[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    pt[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    pt[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    pt[194] = ["Колючий Куст", "Это больно!"];
    pt[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    pt[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    pt[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    pt[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    pt[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    pt[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    pt[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    pt[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    pt[139] = ["Чешуя", "Она пахнет рыбой!"];
    pt[129] = ["Шкура Кракена", "Вы не испугались?"];
    pt[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    pt[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    pt[114] = ["Верстак", "Необходим для создания многих предметов"];
    pt[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    pt[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    pt[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    pt[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    pt[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    pt[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    pt[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    pt[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    pt[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    pt[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    pt[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    pt[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    pt[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    pt[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    pt[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    pt[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    pt[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    pt[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    pt[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    pt[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    pt[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    pt[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    pt[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    pt[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    pt[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    pt[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    pt[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    pt[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    pt[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    pt[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    pt[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    pt[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    pt[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    pt[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    pt[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    pt[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    pt[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    pt[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    pt[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    pt[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    pt[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    pt[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    pt[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    pt[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    pt[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    pt[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    pt[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    pt[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    pt[185] = ["Шар Дракона", "Даётся за квест"];
    pt[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    pt[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    pt[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    pt[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    pt[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    pt[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    pt[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    pt[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    pt[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    pt[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    pt[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    pt[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    pt[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    pt[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    pt[120] = ["Бумага", "Используется при создании книги"];
    pt[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    pt[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    pt[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    pt[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    pt[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    pt[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    pt[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    pt[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    pt[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    pt[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    pt[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    pt[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    pt[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    pt[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    pt[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    pt[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    pt[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    pt[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    pt[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    pt[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    pt[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    pt[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    pt[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    pt[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    pt[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    pt[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    pt[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    pt[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    pt[300] = "Вы не можете зайти на этот сервер";
    pt[301] = "Выгнаны: ";
    pt[302] = "Ваш ключ уже используется кем-то";
    pt[303] = "Ваш ключ неправильный";
    pt[304] = "У вас старая версия, вам нужно очистить кеш";
    pt[305] = "Ресурсов больше нет";
    pt[306] = "Вы выжили 1 день";
    pt[307] = "Вы выжили ";
    pt[308] = " дней";
    pt[309] = "Вы умерли ;-;";
    pt[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    pt[311] = "Сервер заполнен! Спамьте кнопку играть!";
    pt[312] = "Ресурсы закончились";
    pt[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    pt[314] = " умер";
    pt[315] = "Это не тот инструмент";
    pt[316] = "Вы вошли в команду";
    pt[317] = "Вы умерли";
    pt[318] = " вошёл в команду";
    pt[319] = "Ваша команда была разрушена";
    pt[320] = "Вы покинули команду";
    pt[321] = " покинул команду";
    pt[322] = "Кто-то использует ваш токен :>";
    pt[323] = "Выберите сервер";
    pt[324] = "игроков";
    pt[325] = "игроков всего";
    pt[326] = "игроков в этом режиме";
    pt[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    st[0] = ["Вы были убиты без причины"];
    st[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    st[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    st[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    st[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    st[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    st[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    st[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    st[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    st[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    st[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    st[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    st[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    st[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    st[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    st[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    st[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    st[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    st[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    st[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    st[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    st[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function Os() {
    pt[184] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[328] = " BACK TO THE GAME";
    pt[329] = " Share on Twitter";
    pt[330] = " Share on Facebook";
    pt[331] = "You can buy items on the shop in the next game with your points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Kill";
    pt[335] = "Days survived";
    pt[336] = "Building method: Free. Press G to change";
    pt[337] = "Building method: Grid. Press G to change";
    pt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    pt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    pt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    pt[7] = ["mão"];
    pt[140] = ["terra", "está sujo!"];
    pt[126] = ["areia", "entrou nos meus olhos!"];
    pt[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    pt[108] = ["pedra", "também chamado rocha"];
    pt[111] = ["ouro", "seja generoso, dê para outros"];
    pt[112] = ["diamante", "o que você irá fazer com isso?"];
    pt[121] = ["ametista", "é mauve como lapa"];
    pt[131] = ["farinha", "usada na cozinha"];
    pt[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    pt[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    pt[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    pt[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    pt[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    pt[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    pt[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    pt[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    pt[200] = ["doces", "apenas para crianças!", "comida: 100"];
    pt[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    pt[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    pt[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    pt[110] = ["berry", "Berry saborosa!", "comida: 10"];
    pt[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    pt[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    pt[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    pt[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    pt[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    pt[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    pt[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    pt[194] = ["mato de espinhos", "pica!"];
    pt[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    pt[142] = ["gelo", "útil para fazer bolo e água"];
    pt[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    pt[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    pt[2] = ["pele de coelho", "o coelho era tão fofo..."];
    pt[178] = ["pele pura", "você é uma fábrica de pão"];
    pt[179] = ["pele negra", "você está pronto para fazer algo errado"];
    pt[146] = ["pele de inverno", "ele só queria um abraço"];
    pt[139] = ["escala", "é pequeno como peixe!"];
    pt[129] = ["pele do kraken", "você não está com medo?"];
    pt[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    pt[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    pt[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    pt[161] = ["linha", "usada para fazer chapéus e mochila"];
    pt[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    pt[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    pt[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    pt[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    pt[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    pt[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    pt[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    pt[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    pt[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    pt[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    pt[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    pt[zr.ΔⲆΔΔⵠⲆⵠΔᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    pt[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    pt[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    pt[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    pt[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    pt[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    pt[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    pt[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    pt[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    pt[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    pt[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    pt[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    pt[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    pt[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    pt[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    pt[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    pt[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    pt[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    pt[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    pt[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    pt[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    pt[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    pt[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    pt[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    pt[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    pt[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    pt[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    pt[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    pt[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    pt[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    pt[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    pt[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    pt[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    pt[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    pt[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    pt[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    pt[185] = ["esfera do dragão", "dado na questt"];
    pt[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    pt[175] = ["pedra verde", "você não vai trapacear, promete?"];
    pt[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    pt[177] = ["pedra azul", "para pessoas muito gentis"];
    pt[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    pt[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    pt[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    pt[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    pt[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    pt[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    pt[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    pt[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    pt[49] = ["regador", "permite regar as plantas", "dano: 1"];
    pt[29] = ["mochila", "mais espaço para seus itens!"];
    pt[120] = ["papel", "usado para fazer o livro"];
    pt[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    pt[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    pt[148] = ["fechadura", "permite você trancar seu baú"];
    pt[158] = ["chave", "permite destrancar um baú"];
    pt[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    pt[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    pt[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    pt[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    pt[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    pt[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    pt[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    pt[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    pt[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    pt[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    pt[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    pt[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    pt[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    pt[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    pt[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    pt[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    pt[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    pt[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    pt[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    pt[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    pt[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    pt[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    pt[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    pt[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    pt[300] = "você não pode entrar no servidor";
    pt[301] = "kickado: ";
    pt[302] = "sua chave está em uso por outra pessoa";
    pt[303] = "sua chave está errada";
    pt[304] = "você tem uma versão velha, limpe seu cache";
    pt[305] = "não tem mais recursos";
    pt[306] = "você sobreviveu 1 dia";
    pt[307] = "você sobreviveu ";
    pt[308] = " dias";
    pt[309] = "você está morto ;-;";
    pt[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    pt[311] = "servidor está cheio! spam o botão de play!";
    pt[312] = "não tem recursos";
    pt[313] = "inventário está cheio (botão direito para deletar itens)";
    pt[314] = " está morto";
    pt[315] = "essa não é a ferramenta certa";
    pt[316] = "você entrou no time";
    pt[317] = "você está morto";
    pt[318] = "entrou no time";
    pt[319] = "seu time foi destruido";
    pt[320] = "você saiu do time";
    pt[321] = " saiu do time";
    pt[322] = "alguém roubou sua ficha :>";
    pt[323] = "escolha um servidor";
    pt[324] = "jogadores";
    pt[325] = "jogadores totais";
    pt[326] = "jogadores nesse modo";
    pt[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    st[0] = ["você morreu sem motivo"];
    st[1] = ["você morreu de fome, como o jogo diz"];
    st[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    st[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    st[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    st[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    st[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    st[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    st[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    st[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    st[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    st[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    st[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    st[13] = ["você morreu de sede. melhor beber sua própria urina."];
    st[14] = ["você sabia que você morre afogado? agora você sabe."];
    st[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    st[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    st[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    st[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    st[19] = ["como vampiro, não chegue perto do alho."];
    st[20] = ["você comeu alho como vampiro, o que você esperava?"];
    st[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const Ps = 7;
  const Qs = fs;
  function Rs(b, c, d, e, f, g) {
    const a = (1013904223 + (47707 + f) * 1664525) % 4294967296;
    const h = (16 << (g >> 8 & 255)) + (0 << (g & 255)) + (24 << (g >> 24 & 255)) + (8 << (g >> 16 & 255));
    return (12345 + (27234 + (Jf((24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b & 255)), c ^ 30897, (0 << (d & 255)) + (16 << (d >> 8 & 255)) + (24 << (d >> 16 & 255)) + (8 << (d >> 24 & 255)), e ^ 45677) ^ kn(a, h))) * 1103515245) % 2147483648;
  }
  const Ss = 12;
  function Ts() {
    pt[184] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[328] = " BACK TO THE GAME";
    pt[329] = " Share on Twitter";
    pt[330] = " Share on Facebook";
    pt[331] = "You can buy items on the shop in the next game with your points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Kill";
    pt[335] = "Days survived";
    pt[336] = "Building method: Free. Press G to change";
    pt[337] = "Building method: Grid. Press G to change";
    pt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    pt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    pt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    pt[7] = ["Mano"];
    pt[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    pt[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    pt[109] = ["Madera", "¡Nunca hay suficiente!"];
    pt[108] = ["Piedra", "También llamada roca."];
    pt[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    pt[112] = ["Diamante", "¿Que vas a hacer con él?"];
    pt[121] = ["Amatista", "Es Mauve como Lapa"];
    pt[131] = ["Harina", "Usada para cocinar."];
    pt[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    pt[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    pt[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    pt[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    pt[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    pt[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    pt[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    pt[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    pt[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    pt[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    pt[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    pt[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    pt[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    pt[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    pt[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    pt[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    pt[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    pt[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    pt[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    pt[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    pt[194] = ["Planta de Espinas", "¡Te daña!"];
    pt[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    pt[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    pt[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    pt[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    pt[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    pt[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    pt[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    pt[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    pt[139] = ["Escamas", "¡Huele a pescado!"];
    pt[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    pt[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    pt[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    pt[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    pt[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    pt[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    pt[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    pt[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    pt[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    pt[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    pt[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    pt[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    pt[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    pt[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    pt[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    pt[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    pt[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    pt[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    pt[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    pt[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    pt[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    pt[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    pt[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    pt[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    pt[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    pt[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    pt[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    pt[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    pt[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    pt[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    pt[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    pt[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    pt[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    pt[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    pt[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    pt[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    pt[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    pt[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    pt[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    pt[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    pt[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    pt[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    pt[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    pt[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    pt[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    pt[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    pt[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    pt[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    pt[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    pt[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    pt[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    pt[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    pt[185] = ["Esfera del Dragón", "Dada en la misión"];
    pt[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    pt[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    pt[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    pt[177] = ["Gema Azul", "Para gente muy amable"];
    pt[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    pt[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    pt[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    pt[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    pt[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    pt[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    pt[128] = ["Botella Vacia", "La puedes llenar de agua"];
    pt[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    pt[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    pt[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    pt[120] = ["Hoja", "Usada para hacer un libro"];
    pt[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    pt[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    pt[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    pt[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    pt[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    pt[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    pt[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    pt[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    pt[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    pt[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    pt[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    pt[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    pt[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    pt[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    pt[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    pt[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    pt[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    pt[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    pt[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    pt[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    pt[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    pt[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    pt[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    pt[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    pt[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    pt[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    pt[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    pt[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    pt[300] = "No puedes unirte a este servidor";
    pt[301] = "Expulsado: ";
    pt[302] = "Tu llave ya está usada";
    pt[303] = "Tu llave está mal";
    pt[304] = "Tienes una versión antigua, limpia tu cache";
    pt[305] = "No hay mas recursos";
    pt[306] = "Has sobrevivido 1 día";
    pt[307] = "Has sobrevivido ";
    pt[308] = " días";
    pt[309] = "Estás muerto ;-;";
    pt[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    pt[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    pt[312] = "Recurso vacio";
    pt[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    pt[314] = " está muerto";
    pt[315] = "Esta no es la herramienta correcta";
    pt[316] = "Te has unido a un equipo";
    pt[317] = "Estás muerto";
    pt[318] = " se unió al equipo";
    pt[319] = "Tu equipo ha sido destruido";
    pt[320] = "Has dejado el equipo";
    pt[321] = " dejo el equipo ";
    pt[322] = "Alguien te robó tu token :>";
    pt[323] = "Elige un servidor";
    pt[324] = "jugadores";
    pt[325] = "total de jugadores";
    pt[326] = "Jugadores en este modo de juego";
    pt[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    st[0] = ["Has muerto por ninguna razón"];
    st[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    st[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    st[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    st[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    st[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    st[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    st[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    st[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    st[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    st[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    st[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    st[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    st[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    st[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    st[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    st[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    st[17] = ["Tu piel se cayó, el sol te quemó."];
    st[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    st[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    st[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    st[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function Us(b, c, d, e, f, g) {
    const a = ~(d & 20176) & 20176 | ~(d & 20176) & d;
    const i = e ^ 28175;
    const j = ((40746 + f) * 214013 + 2531011) % 4294967296;
    const h = g ^ 1772;
    return (12340 + (Tw(((40591 + b) * 2147483629 + 2147483587) % 2147483647, (1 + (c + 9698) * 22695477) % 4294967296) ^ Jf(a, i, j, h))) % 65516;
  }
  function Vs(b, c, d, e, f) {
    const g = ~(e & 28664) & (e | 28664);
    const a = (16 << (f >> 8 & 255)) + (8 << (f & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> 24 & 255));
    const h = gx((1 + (b + 26886) * 22695477) % 4294967296, ~(c & 48828) & c | ~(c & 48828) & 48828, ~(d & 39264) & d | ~(d & 39264) & 39264);
    Tw(g, a);
    return ~(h & 10205) & 10205 | ~(h & 10205) & h;
  }
  const Ws = 6;
  const Xs = 5;
  function Ys(a, b) {
    const c = (24 << (a >> 24 & 255)) + (0 << (a >> 16 & 255)) + (8 << (a & 255)) + (16 << (a >> 8 & 255));
    const d = (b | 22687) & ~(b & 22687);
    const e = bx(c, d, c, d);
    Pw(c, d, c, d, c);
    return ~(e & 9336) & e | ~(e & 9336) & 9336;
  }
  const Zs = 4;
  const $s = 19;
  const _s = 3;
  function at(b, c, d, e) {
    const f = b ^ 20028;
    const g = (c | 62429) & ~(c & 62429);
    const a = ~(d & 35588) & 35588 | ~(d & 35588) & d;
    const i = ~(e & 46642) & 46642 | ~(e & 46642) & e;
    const j = bx(f, g, a, i);
    (function (b, c, d, e, f) {
      const g = (2147483587 + (29803 + e) * 2147483629) % 2147483647;
      const a = ~(f & 50813) & 50813 | ~(f & 50813) & f;
      const h = gb(((b + 61875) * 214013 + 2531011) % 4294967296, (0 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c & 255)), (1013904223 + (d + 13058) * 1664525) % 4294967296);
      Ys(g, a);
    })(f, g, a, i, f);
    return j ^ 62490;
  }
  const bt = 7;
  function ct(b, c, d) {
    const e = (16 << (b >> 24 & 255)) + (0 << (b >> 16 & 255)) + (8 << (b & 255)) + (24 << (b >> 8 & 255));
    const f = c ^ 60466;
    const g = ~(d & 13202) & 13202 | ~(d & 13202) & d;
    const a = gx(e, f, g);
    (function (b, c, d, e, f, g) {
      const a = ~(d & 29171) & (d | 29171);
      const i = (12345 + (20386 + e) * 1103515245) % 2147483648;
      const j = function (a, b) {
        const c = (8 << (a >> 8 & 255)) + (16 << (a & 255)) + (0 << (a >> 16 & 255)) + (24 << (a >> 24 & 255));
        const d = ~(b & 32253) & (b | 32253);
        const e = function (b, c, d, e, f) {
          const i = (24 << (b >> 8 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b & 255)) + (0 << (b >> 24 & 255));
          const a = (c | 10774) & ~(c & 10774);
          const j = ((d + 55131) * 2147483629 + 2147483587) % 2147483647;
          const k = (0 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255));
          const h = (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (0 << (f & 255)) + (16 << (f >> 24 & 255));
          const l = function (b, c, d) {
            const e = b ^ 54893;
            const f = (c + 28091) % 65394;
            const g = (0 << (d >> 8 & 255)) + (16 << (d & 255)) + (8 << (d >> 24 & 255)) + (24 << (d >> 16 & 255));
            const a = function (a, b) {
              const c = (2531011 + (23035 + a) * 214013) % 4294967296;
              const d = (2147483587 + (56571 + b) * 2147483629) % 2147483647;
              const e = function (b, c, d, e, f) {
                const i = (b | 12858) & ~(b & 12858);
                const a = (c | 21276) & ~(c & 21276);
                const j = ((1109 + d) * 1664525 + 1013904223) % 4294967296;
                const k = (e | 47043) & ~(e & 47043);
                const h = ((33511 + f) * 22695477 + 1) % 4294967296;
                const l = dt(i, a, j, k, h, i);
                const g = function (b, c, d, e) {
                  const f = (24 << (b >> 16 & 255)) + (0 << (b & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 24 & 255));
                  const g = (c | 8372) & ~(c & 8372);
                  const a = ~(d & 30093) & (d | 30093);
                  return ((46034 + (Mw(f, g, a, (12345 + (e + 34121) * 1103515245) % 2147483648, f) ^ Tw(g, a))) * 1664525 + 1013904223) % 4294967296;
                }(a, j, k, h);
                return (2531011 + (51487 + (l ^ g)) * 214013) % 4294967296;
              }(c, d, c, d, c);
              Vs(d, c, d, c, d);
              return ~(e & 10964) & e | ~(e & 10964) & 10964;
            }(e, f);
            Mw(g, e, f, g, e);
            return a ^ 59070;
          }(i, a, j);
          pr(k, h, i, a, j);
          return (l | 53616) & ~(l & 53616);
        }(c, d, c, d, c);
        dt(d, c, d, c, d, c);
        return ~(e & 11879) & 11879 | ~(e & 11879) & e;
      }(~(b & 64964) & b | ~(b & 64964) & 64964, c ^ 36367);
      Vw(a, i);
    })(e, f, g, e);
    return ~(a & 54865) & 54865 | ~(a & 54865) & a;
  }
  function dt(b, c, d, e, f, g) {
    const a = ~(d & 18893) & d | ~(d & 18893) & 18893;
    const h = (8 << (e >> 16 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e & 255)) + (0 << (e >> 24 & 255));
    return ((51553 + (function (a, b) {
      const c = (24 << (a >> 8 & 255)) + (16 << (a >> 16 & 255)) + (8 << (a >> 24 & 255)) + (0 << (a & 255));
      const d = (55217 + b) % 65392;
      const e = Qw(c, d, c, d, c, d);
      (function (b, c, d, e, f, g) {
        const a = b ^ 62044;
        const i = c ^ 19868;
        const j = (8 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (0 << (d >> 24 & 255));
        const h = Rs(a, i, j, e ^ 62536, (1013904223 + (51458 + f) * 1664525) % 4294967296, (g + 18589) % 65388);
        (function (b, c, d) {
          const e = (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255));
          const f = ~(c & 21609) & c | ~(c & 21609) & 21609;
          const g = function (b, c, d) {
            const e = ~(b & 20969) & 20969 | ~(b & 20969) & b;
            const f = ~(c & 29621) & c | ~(c & 29621) & 29621;
            const g = ((d + 8612) * 214013 + 2531011) % 4294967296;
            return (2531011 + (51373 + (Jf(e, f, g, e) ^ Rs(f, g, e, f, g, e))) * 214013) % 4294967296;
          }(e, f, ~(d & 26067) & (d | 26067));
          const a = Ys(e, f);
        })(a, i, j);
      })(c, d, c, d, c, d);
      return e ^ 11910;
    }((1 + (b + 64754) * 22695477) % 4294967296, (16 << (c >> 8 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (0 << (c & 255))) ^ kn(a, h))) * 214013 + 2531011) % 4294967296;
  }
  const et = 255;
  function ft() {
    pt[184] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[328] = " BACK TO THE GAME";
    pt[329] = " Share on Twitter";
    pt[330] = " Share on Facebook";
    pt[331] = "You can buy items on the shop in the next game with your points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Kill";
    pt[335] = "Days survived";
    pt[336] = "Building method: Free. Press G to change";
    pt[337] = "Building method: Grid. Press G to change";
    pt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    pt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    pt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    pt[7] = ["Hand"];
    pt[140] = ["Boden", "Dreckig!"];
    pt[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    pt[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    pt[108] = ["Stein", "Auch Fels gennant"];
    pt[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    pt[112] = ["Diamant", "Was wirst du daraus machen?"];
    pt[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    pt[131] = ["Mehl", "wird fürs Backen gebraucht"];
    pt[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    pt[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    pt[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    pt[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    pt[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    pt[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    pt[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    pt[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    pt[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    pt[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    pt[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    pt[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    pt[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    pt[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    pt[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    pt[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    pt[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    pt[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    pt[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    pt[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    pt[194] = ["Dornenbusch", "Es sticht!"];
    pt[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    pt[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    pt[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    pt[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    pt[2] = ["Hasenfell", "Der Hase war so süß..."];
    pt[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    pt[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    pt[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    pt[139] = ["Schuppen", "Es riecht wie Fisch!"];
    pt[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    pt[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    pt[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    pt[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    pt[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    pt[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    pt[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    pt[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    pt[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    pt[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    pt[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    pt[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    pt[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    pt[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    pt[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    pt[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    pt[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    pt[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    pt[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    pt[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    pt[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    pt[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    pt[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    pt[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    pt[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    pt[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    pt[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    pt[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    pt[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    pt[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    pt[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    pt[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    pt[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    pt[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    pt[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    pt[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    pt[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    pt[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    pt[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    pt[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    pt[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    pt[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    pt[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    pt[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    pt[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    pt[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    pt[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    pt[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    pt[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    pt[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    pt[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    pt[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    pt[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    pt[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    pt[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    pt[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    pt[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    pt[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    pt[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    pt[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    pt[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    pt[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    pt[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    pt[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    pt[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    pt[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    pt[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    pt[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    pt[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    pt[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    pt[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    pt[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    pt[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    pt[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    pt[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    pt[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    pt[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    pt[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    pt[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    pt[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    pt[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    pt[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    pt[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    pt[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    pt[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    pt[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    pt[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    pt[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    pt[300] = "Du kannst diesem Server nicht beitreten";
    pt[301] = "Gekickt: ";
    pt[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    pt[303] = "Dein Schlüssel ist falsch";
    pt[304] = "Deine Version ist veraltet, säubere dein Cache";
    pt[305] = "Es gibt keine neuen Ressourcen";
    pt[306] = "Du hast einen Tag überlebt";
    pt[307] = "Du hast überlebt ";
    pt[308] = " Tage";
    pt[309] = "Du bist gestorben ;-;";
    pt[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    pt[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    pt[312] = "Ressource ist leer";
    pt[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    pt[314] = " ist gestorben";
    pt[315] = "Das ist nicht das richtige Werkzeug";
    pt[316] = "Du bist einem Team beigetreten";
    pt[317] = "Du bist gestorben";
    pt[318] = " ist dem Team beigetreten";
    pt[319] = "Dein Team wurde zerstört";
    pt[320] = "Du hast das Team verlassen";
    pt[321] = " hat das Team verlassen";
    pt[322] = "Jemand hat dein Token gestohlen :>";
    pt[323] = "Suche dir ein Server aus";
    pt[324] = "Spieler";
    pt[325] = "alle Spieler";
    pt[326] = "Spieler in diesem Modus";
    pt[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    st[0] = ["Du wurdest ohne Grund getötet"];
    st[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    st[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    st[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    st[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    st[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    st[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    st[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    st[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    st[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    st[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    st[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    st[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    st[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    st[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    st[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    st[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    st[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    st[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    st[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    st[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    st[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const gt = 15;
  function ht() {
    pt[184] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[328] = " BACK TO THE GAME";
    pt[329] = " Share on Twitter";
    pt[330] = " Share on Facebook";
    pt[331] = "You can buy items on the shop in the next game with your points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Kill";
    pt[335] = "Days survived";
    pt[336] = "Building method: Free. Press G to change";
    pt[337] = "Building method: Grid. Press G to change";
    pt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    pt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    pt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    pt[7] = ["Ręka"];
    pt[140] = ["Ziemia", "Brudna!"];
    pt[126] = ["Piasek", "Mam go w oczach!"];
    pt[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    pt[108] = ["Kamień", "Także nazywany skałą"];
    pt[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    pt[112] = ["Diament", "Co z nim zrobisz?"];
    pt[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    pt[131] = ["Mąka", "Używana w gotowaniu"];
    pt[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    pt[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    pt[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    pt[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    pt[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    pt[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    pt[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    pt[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    pt[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    pt[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    pt[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    pt[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    pt[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    pt[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    pt[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    pt[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    pt[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    pt[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    pt[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    pt[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    pt[194] = ["Kolczasty krzew", "Kłuje!"];
    pt[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    pt[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    pt[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    pt[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    pt[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    pt[178] = ["Skóra", "Jesteś fabryką chleba"];
    pt[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    pt[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    pt[139] = ["Łuski", "Pachnie jak ryba!"];
    pt[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    pt[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    pt[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    pt[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    pt[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    pt[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    pt[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    pt[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    pt[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    pt[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    pt[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    pt[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    pt[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    pt[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    pt[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    pt[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    pt[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    pt[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    pt[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    pt[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    pt[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    pt[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    pt[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    pt[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    pt[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    pt[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    pt[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    pt[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    pt[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    pt[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    pt[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    pt[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    pt[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    pt[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    pt[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    pt[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    pt[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    pt[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    pt[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    pt[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    pt[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    pt[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    pt[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    pt[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    pt[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    pt[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    pt[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    pt[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    pt[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    pt[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    pt[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    pt[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    pt[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    pt[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    pt[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    pt[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    pt[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    pt[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    pt[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    pt[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    pt[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    pt[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    pt[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    pt[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    pt[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    pt[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    pt[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    pt[120] = ["Papier", "Używany w tworzeniu książki"];
    pt[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    pt[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    pt[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    pt[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    pt[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    pt[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    pt[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    pt[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    pt[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    pt[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    pt[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    pt[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    pt[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    pt[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    pt[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    pt[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    pt[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    pt[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    pt[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    pt[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    pt[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    pt[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    pt[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    pt[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    pt[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    pt[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    pt[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    pt[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    pt[300] = "Nie możesz dołączyć do tego serwera";
    pt[301] = "Wyrzucony: ";
    pt[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    pt[303] = "Twój klucz jest nieprawidłowy";
    pt[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    pt[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    pt[306] = "Przeżyłeś 1 dzień";
    pt[307] = "Przeżyłeś ";
    pt[308] = " dni";
    pt[309] = "Jesteś martwy ;-;";
    pt[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    pt[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    pt[312] = "Źródło jest puste";
    pt[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    pt[314] = " jest martwy";
    pt[315] = "To nie jest właściwe narzędzie";
    pt[316] = "Dołączyłeś do drużyny";
    pt[317] = "Jesteś martwy";
    pt[318] = " dołączył do drużyny";
    pt[319] = "Twoja drużyna została zniszczona";
    pt[320] = " Opuściłeś drużynę";
    pt[321] = " opuścił drużynę";
    pt[322] = "Ktoś ukradł twój żeton :>";
    pt[323] = "Wybierz serwer";
    pt[324] = "graczy";
    pt[325] = "wszystkich graczy";
    pt[326] = "graczy w tym trybie";
    pt[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    st[0] = ["Zostałeś zabity bez powodu"];
    st[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    st[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    st[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    st[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    st[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    st[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    st[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    st[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    st[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    st[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    st[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    st[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    st[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    st[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    st[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    st[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    st[17] = ["Twoja skóra odpada, słońce cię zabija."];
    st[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    st[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    st[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    st[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function it(b, c, d) {
    const e = ~(b & 29495) & 29495 | ~(b & 29495) & b;
    const f = (1 + (43291 + c) * 22695477) % 4294967296;
    const g = ((3519 + d) * 2147483629 + 2147483587) % 2147483647;
    const a = function (b, c, d, e) {
      const f = (2147483587 + (b + 46040) * 2147483629) % 2147483647;
      const g = ((59999 + c) * 2147483629 + 2147483587) % 2147483647;
      const a = (12345 + (195 + d) * 1103515245) % 2147483648;
      const i = (2531011 + (23535 + e) * 214013) % 4294967296;
      const j = Ys(f, g);
      dt(a, i, f, g);
      return ~(j & 11655) & (j | 11655);
    }(e, f, g, e);
    const h = Ys(f, g);
    return (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) & 255));
  }
  const jt = 13;
  const kt = 14;
  function mt() {
    pt[184] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    pt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    pt[328] = " RETOUR AU JEU";
    pt[329] = " Partage sur Twitter";
    pt[330] = " Partage sur Facebook";
    pt[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    pt[332] = "points";
    pt[333] = "Score";
    pt[334] = "Tués";
    pt[335] = "Jours survécus";
    pt[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    pt[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    pt[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    pt[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    pt[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    pt[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    pt[7] = ["Main"];
    pt[140] = ["Terre", "C'est sale!"];
    pt[126] = ["Sable", "J'en ai dans les yeux"];
    pt[109] = ["Bois", "Tu n'en auras jamais trop!"];
    pt[108] = ["Pierre", "Aussi appelée roche"];
    pt[111] = ["Or", "Sois généreux, donne en aux autres"];
    pt[112] = ["Diamant", "Comme tes yeux! wesh"];
    pt[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    pt[131] = ["Farine", "Utile pour la cuisine"];
    pt[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    pt[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    pt[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    pt[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    pt[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    pt[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    pt[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    pt[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    pt[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    pt[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    pt[201] = ["Guirlandes", "Utilisable sur les toits"];
    pt[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    pt[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    pt[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    pt[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    pt[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    pt[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    pt[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    pt[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    pt[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    pt[194] = ["Ronces", "Ça pique!"];
    pt[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    pt[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    pt[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    pt[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    pt[2] = ["Peau de lapin", "Vous êtes un monstre"];
    pt[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    pt[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    pt[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    pt[139] = ["Écailles", "Ça sent le poisson!"];
    pt[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    pt[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    pt[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    pt[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    pt[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    pt[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    pt[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    pt[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    pt[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    pt[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    pt[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    pt[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    pt[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    pt[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    pt[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    pt[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    pt[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    pt[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    pt[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    pt[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    pt[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    pt[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    pt[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    pt[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    pt[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    pt[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    pt[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    pt[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    pt[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    pt[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    pt[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    pt[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    pt[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    pt[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    pt[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    pt[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    pt[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    pt[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    pt[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    pt[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    pt[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    pt[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    pt[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    pt[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    pt[185] = ["Orbe du Dragon", "Donné en Quête"];
    pt[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    pt[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    pt[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    pt[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    pt[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    pt[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    pt[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    pt[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    pt[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    pt[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    pt[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    pt[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    pt[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    pt[29] = ["Sac", "Plus de place dans ton inventaire!"];
    pt[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    pt[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    pt[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    pt[148] = ["Cadenas", "Pour verrouiller un coffre"];
    pt[158] = ["Clé", "Pour déverrouiller un coffre"];
    pt[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    pt[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    pt[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    pt[190] = ["Toit", "Te cache un peu et te réchauffe"];
    pt[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    pt[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    pt[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    pt[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    pt[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    pt[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    pt[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    pt[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    pt[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    pt[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    pt[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    pt[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    pt[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    pt[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    pt[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    pt[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    pt[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    pt[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    pt[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    pt[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    pt[300] = "Tu ne peux pas rejoindre le serveur";
    pt[301] = "Expulsé: ";
    pt[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    pt[303] = "Ta clé est fausse";
    pt[304] = "Tu as une vieille version, rafraichis tes caches";
    pt[305] = "Il n'y a plus de nouvelles ressources";
    pt[306] = "Tu as survécu 1 jour";
    pt[307] = "Tu as survécu ";
    pt[308] = " jours";
    pt[309] = "Tu es mort ;-;";
    pt[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    pt[311] = "Le serveur est complet! Spam le bouton jouer";
    pt[312] = "Cette ressource est vide";
    pt[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    pt[314] = " est mort";
    pt[315] = "Ce n'est pas le bon outil";
    pt[316] = "Tu as rejoins une équipe";
    pt[317] = "Tu es mort";
    pt[318] = " a rejoint l'équipe";
    pt[319] = "Ton équipe a été détruite";
    pt[320] = "Tu as quitté l'équipe";
    pt[321] = " a quitté l'équipe";
    pt[322] = "Quelqu'un a volé ton token :>";
    pt[323] = "Choisis un serveur";
    pt[324] = "joueurs";
    pt[325] = "joueurs";
    pt[326] = "joueurs dans ce mode";
    pt[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    st[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    st[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    st[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    st[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    st[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    st[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    st[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    st[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    st[8] = ["Cet ours voulait juste un câlin."];
    st[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    st[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    st[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    st[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    st[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    st[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    st[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    st[16] = ["Un kraken a 'kraké' tes os."];
    st[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    st[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    st[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    st[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    st[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    Δᐃᐃᐃⵠ = "Uuunnnggg";
    ⲆΔⵠΔⵠᐃⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  const nt = 19;
  const ot = 1;
  ;
  var pt = [];
  for (var qt = 0; qt < 344; qt++) {
    pt[qt] = "";
  }
  const rt = 11;
  var st = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const tt = 13;
  const ut = 6;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Ls();
    } else if (a === "Français") {
      mt();
    } else if (a === "Deutsch") {
      ft();
    } else if (a === "Español") {
      Ts();
    } else if (a === "Português") {
      Os();
    } else if (a === "Русский") {
      Ns();
    } else if (a === "Polski") {
      ht();
    }
    ⵠⵠⲆΔᐃ = [];
    lx.ᐃΔⵠᐃ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const vt = 4;
  const wt = 9;
  Zq = "EN";
  const eb = Ig;
  var ib = navigator.language || navigator.userLanguage;
  const tb = 20;
  const nb = 16;
  const ob = 10;
  const ab = 18;
  switch (ib) {
    case "ru":
      Zq = "RU";
      break;
    case "en":
      Zq = "EN";
      break;
    case "es":
      Zq = "SP";
      break;
    case "fr":
      Zq = "FR";
      break;
    case "pl":
      Zq = "PL";
      break;
    case "de":
      Zq = "DE";
      break;
    case "pt":
      Zq = "PT";
  }
  const rb = 0;
  var sb;
  if (Zq === "FR") {
    $(".md-languages label button").text("Français");
    sb = mt;
  } else if (Zq === "PL") {
    $(".md-languages label button").text("Polski");
    sb = ht;
  } else if (Zq === "PT") {
    $(".md-languages label button").text("Português");
    sb = Os;
  } else if (Zq === "SP") {
    $(".md-languages label button").text("Español");
    sb = Ts;
  } else if (Zq === "RU") {
    $(".md-languages label button").text("Русский");
    sb = Ns;
  } else if (Zq === "DE") {
    $(".md-languages label button").text("Deutsch");
    sb = ft;
  } else {
    $(".md-languages label button").text("English");
    sb = Ls;
  }
  const xt = 5;
  function lb(a, b) {
    Le(Dw, a, b);
    const c = An(of[0], of[1], of[0], of[1], of[0]);
    (function (b, c, d, e, f, g) {
      Li(Dw, b, c, d, e, f, g);
      const a = function (b, c, d, e, f, g) {
        Vj(Dw, b, c, d, e, f, g);
        const a = In(of[0], of[1]);
        vb(of[2], of[3], of[4], of[5], of[0]);
        return a ^ 33182;
      }(of[0], of[1], of[2], of[3], of[4], of[5]);
      yw(of[0], of[1], of[2]);
    })(of[1], of[0], of[1], of[0], of[1], of[0]);
    return (c | 33869) & ~(c & 33869);
  }
  function gb(b, c, d) {
    const e = (b | 7473) & ~(b & 7473);
    const f = (8 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (24 << (c >> 8 & 255));
    const g = ((5773 + d) * 2147483629 + 2147483587) % 2147483647;
    return ((36230 + (Us(e, f, g, e, f, g) ^ Zf(e, f, g, e, f, g))) * 214013 + 2531011) % 4294967296;
  }
  Ⲇᐃ = {
    ᐃᐃⲆⵠⵠΔⵠⲆⲆ: "img/logo.png",
    ᐃⵠⵠⵠⲆⵠⵠ: "img/mapday.png",
    ᐃⵠᐃᐃⲆΔᐃ: "img/mapnight.png",
    ΔΔⲆⵠᐃΔΔⵠⵠ: "img/bigzday.png",
    ⵠⲆⲆᐃⲆΔⵠΔⵠ: "img/bigznight.png",
    ΔⵠⵠᐃⵠΔⵠ: "img/bigday-river1.png",
    ⵠΔⲆⵠⵠᐃⲆⵠᐃ: "img/bigday-lake.png",
    ⲆΔᐃⲆᐃⲆΔ: "img/bigday-berry.png",
    ⵠⵠⵠΔΔΔⲆ: "img/bigday-stone1.png",
    ⲆᐃⲆᐃⵠΔΔ: "img/bigday-stone2.png",
    ᐃⵠᐃⲆΔⲆᐃ: "img/bigday-gold1.png",
    ⵠⲆⲆⲆᐃᐃⵠ: "img/bigday-gold2.png",
    ⲆᐃⲆᐃΔΔᐃ: "img/bigday-emerald1.png",
    ⵠⵠΔⲆΔⵠΔ: "img/bigday-emerald2.png",
    ⲆⲆⲆΔᐃᐃⲆ: "img/bigday-amethyst.png",
    ⲆⲆᐃΔΔⵠᐃ: "img/bigday-bear.png",
    ⵠⵠⲆⵠᐃΔᐃ: "img/bigday-cave.png",
    ⲆⵠΔⵠΔⲆᐃ: "img/bigday-diamond.png",
    ΔᐃᐃⵠΔΔᐃ: "img/bigday-island.png",
    ⵠⲆⲆΔⵠΔⵠ: "img/bigday-reidite.png",
    ⲆᐃⲆⲆⲆᐃΔ: "img/bigday-spider.png",
    ΔⵠΔⵠⵠΔΔ: "img/bigday-wolf.png",
    ΔΔⵠΔΔⵠⵠ: "img/bigday-fir-tree.png",
    ᐃⵠⲆⲆΔⵠⲆ: "img/bigday-fox.png",
    ΔᐃᐃⲆⲆⵠΔ: "img/bigday-kraken.png",
    ΔⲆⲆᐃΔᐃᐃ: "img/bigday-piranha.png",
    ⵠᐃⲆᐃⵠᐃⲆ: "img/bigday-cactus.png",
    ᐃⵠⵠΔΔⵠⲆ: "img/bigday-magma.png",
    ΔΔΔⲆⵠⲆⲆ: "img/bigday-river1.png",
    ΔⵠⵠⵠⲆⵠΔⲆⲆ: "img/bignight-lake.png",
    ⵠᐃΔⲆⵠᐃⵠⵠⵠ: "img/bignight-berry.png",
    ⵠΔⲆᐃⲆⵠⲆ: "img/bignight-stone1.png",
    ⵠⲆⲆⵠΔⵠⵠ: "img/bignight-stone2.png",
    ⲆΔΔᐃΔᐃⲆ: "img/bignight-gold1.png",
    ᐃᐃΔⵠΔⲆΔ: "img/bignight-gold2.png",
    ⵠⵠⵠᐃᐃⲆᐃ: "img/bignight-emerald1.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/bignight-emerald2.png",
    ⵠΔⵠⲆΔΔᐃ: "img/bignight-amethyst.png",
    ΔⲆⵠⲆⲆⵠΔ: "img/bignight-bear.png",
    ⵠⲆⵠᐃΔᐃⵠ: "img/bignight-cave.png",
    ΔᐃⵠⲆⵠΔⲆ: "img/bignight-diamond.png",
    ᐃΔⵠⵠᐃⲆⵠ: "img/bignight-island.png",
    ᐃⲆⵠⵠΔⲆᐃ: "img/bignight-reidite.png",
    ⲆⵠᐃᐃΔⲆⲆ: "img/bignight-spider.png",
    ⲆⲆΔΔⵠⵠⵠ: "img/bignight-wolf.png",
    ⵠᐃᐃⲆᐃΔᐃ: "img/bignight-fir-tree.png",
    ⵠⲆΔᐃⲆⵠⲆ: "img/bignight-fox.png",
    ᐃΔⲆᐃᐃᐃΔ: "img/bignight-kraken.png",
    ⲆⵠⵠⲆⵠⵠᐃ: "img/bignight-piranha.png",
    ᐃᐃⵠⵠⵠΔⵠ: "img/bignight-cactus.png",
    ΔᐃⲆΔⲆⲆᐃ: "img/bignight-magma.png",
    ⲆⵠΔΔⵠΔᐃ: "img/bigday-desert.png",
    ⲆᐃⵠⲆⲆᐃⲆ: "img/bigday-winter.png",
    ΔᐃⲆⵠᐃΔᐃ: "img/bigday-lava.png",
    ΔⵠⲆΔΔⵠᐃ: "img/bigday-forest.png",
    ΔᐃᐃⲆⲆⵠⵠ: "img/bignight-desert.png",
    ⲆᐃΔⵠⵠΔⵠ: "img/bignight-winter.png",
    ⵠᐃⵠⲆⵠⲆⵠ: "img/bignight-lava.png",
    ⲆΔᐃⲆⲆΔᐃ: "img/bignight-forest.png",
    ᐃΔⲆᐃⵠⵠⵠ: "img/day-river-wave.png",
    ⵠᐃᐃᐃᐃⵠΔ: "img/night-river-wave.png",
    ⵠⲆⲆΔΔΔᐃ: "img/day-fog0.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/day-fog1.png",
    ᐃᐃΔⵠΔⲆⵠ: "img/day-fog2.png",
    ᐃᐃⵠΔᐃⲆᐃ: "img/night-fog0.png",
    ⵠΔⵠⲆᐃΔⲆ: "img/night-fog1.png",
    ⲆⲆⲆⲆΔⵠΔ: "img/night-fog2.png",
    ᐃⵠⲆⵠⵠⵠᐃ: "img/day-fogdesert0.png",
    ΔⵠⵠⲆⵠⵠᐃ: "img/day-fogdesert1.png",
    ΔⲆΔΔⲆΔᐃ: "img/day-fogdesert2.png",
    ᐃⵠⵠⲆⲆⲆⵠ: "img/night-fogdesert0.png",
    ᐃⲆⵠᐃⵠΔΔ: "img/night-fogdesert1.png",
    ᐃⵠᐃⵠΔΔⵠ: "img/night-fogdesert2.png",
    ⵠᐃⵠⲆᐃⵠᐃ: "img/day-cross-server.png",
    ⵠⲆᐃⲆᐃⲆⵠ: "img/day-here-server.png",
    ⲆᐃⵠΔᐃⵠⵠ: "img/day-finish-server.png",
    ⲆΔⵠⵠⵠⵠΔ: "img/day-item-server.png",
    ⵠᐃᐃⵠᐃΔⵠ: "img/day-skull-server.png",
    ᐃⲆⲆΔⲆⲆᐃ: "img/night-cross-server.png",
    ΔⲆᐃⲆᐃΔⵠ: "img/night-here-server.png",
    ⵠᐃΔᐃΔᐃΔ: "img/night-finish-server.png",
    ⵠⵠⵠⵠⵠⵠⲆ: "img/night-item-server.png",
    ⵠΔᐃΔⲆⵠᐃ: "img/night-skull-server.png",
    ΔⵠⲆΔᐃⵠᐃ: "img/day-reidite0.png",
    ⲆᐃⵠΔΔΔⵠ: "img/night-reidite0.png",
    ⵠⵠⲆΔⵠⲆⲆ: "img/day-reidite1.png",
    ⵠᐃΔΔⵠᐃᐃ: "img/night-reidite1.png",
    ⲆⵠᐃᐃΔᐃⵠ: "img/day-reidite2.png",
    ⲆΔⲆᐃⵠⲆᐃ: "img/night-reidite2.png",
    ⵠⲆΔⵠⵠⲆᐃ: "img/day-lava1.png",
    ᐃᐃᐃⲆⲆⵠΔ: "img/night-lava1.png",
    ᐃᐃΔΔΔⵠⵠ: "img/day-lava2.png",
    ΔⲆⵠⵠⵠΔⲆ: "img/night-lava2.png",
    ᐃᐃⲆⲆᐃⲆᐃ: "img/day-lava3.png",
    ⵠΔⲆⵠⲆΔⲆ: "img/night-lava3.png",
    ⵠⲆᐃⵠⵠΔᐃ: "img/day-lava4.png",
    ΔⲆⵠΔΔᐃⵠ: "img/night-lava4.png",
    ᐃΔᐃᐃⵠⵠᐃ: "img/day-lava5.png",
    ⲆⵠᐃΔⵠⵠⵠ: "img/night-lava5.png",
    ⵠᐃⵠⵠΔⵠⵠ: "img/day-lava6.png",
    ᐃᐃⲆᐃⵠⲆⵠ: "img/night-lava6.png",
    ΔⲆⲆⵠⲆΔΔ: "img/day-lava-ground1.png",
    ΔⲆⵠⵠΔⵠⲆ: "img/night-lava-ground1.png",
    ΔⲆᐃⵠᐃΔΔ: "img/day-lava-ground2.png",
    ⵠⵠⲆⵠΔΔᐃ: "img/night-lava-ground2.png",
    Δᐃᐃⵠᐃⵠᐃ: "img/day-lava-ground3.png",
    ⲆᐃΔⲆⲆⵠᐃ: "img/night-lava-ground3.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/day-lava-ground4.png",
    ⲆⵠⵠⵠᐃⵠⲆ: "img/night-lava-ground4.png",
    ⵠⲆᐃΔⲆᐃΔ: "img/day-lava-ground5.png",
    ᐃΔΔⲆΔΔⲆ: "img/night-lava-ground5.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/day-lava-ground6.png",
    ΔΔΔΔᐃΔⲆ: "img/night-lava-ground6.png",
    ΔⵠΔᐃⲆⲆΔ: "img/day-fire-mob.png",
    ᐃᐃΔᐃΔᐃΔ: "img/night-fire-mob.png",
    ⵠⲆΔΔⲆΔᐃ: "img/hurt-fire-mob.png",
    ΔⲆⵠΔᐃⵠⲆ: "img/day-diamond-protection.png",
    ⵠⵠⲆΔⲆⲆⲆ: "img/night-diamond-protection.png",
    ⲆⵠᐃΔⲆⲆⵠ: "img/day-hand-diamond-protection.png",
    ⲆⲆⲆⲆᐃⲆᐃ: "img/night-hand-diamond-protection.png",
    ΔΔⵠⲆⵠⲆⵠ: "img/inv-diamond-protection-out.png",
    ⵠⵠⵠΔΔᐃⲆ: "img/inv-diamond-protection-in.png",
    ⵠΔⲆᐃᐃΔᐃ: "img/inv-diamond-protection-click.png",
    ᐃⵠⲆⵠⲆⲆⵠ: "img/day-amethyst-protection.png",
    ᐃⵠᐃⵠⵠΔⲆ: "img/night-amethyst-protection.png",
    ⵠΔᐃᐃⵠⲆΔᐃᐃ: "img/day-hand-amethyst-protection.png",
    ⲆⲆΔⲆΔΔⵠᐃⲆ: "img/night-hand-amethyst-protection.png",
    ᐃⲆᐃⵠⲆⵠᐃ: "img/inv-amethyst-protection-out.png",
    ᐃⵠⵠΔⲆΔⲆ: "img/inv-amethyst-protection-in.png",
    ᐃΔΔΔᐃⵠⲆ: "img/inv-amethyst-protection-click.png",
    ⵠᐃΔᐃᐃⲆΔ: "img/day-reidite-sword.png",
    ⵠⲆⵠⵠΔⲆᐃ: "img/night-reidite-sword.png",
    ᐃⲆⲆᐃᐃⵠⵠ: "img/inv-reidite-sword-out.png",
    ⵠᐃΔⵠΔᐃⵠ: "img/inv-reidite-sword-in.png",
    ΔᐃᐃΔᐃΔΔ: "img/inv-reidite-sword-click.png",
    ⲆⲆΔᐃᐃⲆⵠ: "img/inv-reidite-out.png",
    ΔΔⲆᐃⲆⵠⲆ: "img/inv-reidite-in.png",
    ᐃᐃᐃⵠⲆⵠᐃ: "img/inv-reidite-click.png",
    ᐃΔᐃⲆⲆᐃᐃ: "img/inv-flame-out.png",
    ⲆⲆΔⵠᐃⲆᐃ: "img/inv-flame-in.png",
    ΔⲆΔⲆΔᐃⲆ: "img/inv-flame-click.png",
    ⲆⲆᐃⲆⵠΔⲆ: "img/day-magma-buble0.png",
    ᐃⲆᐃⵠΔΔᐃ: "img/night-magma-buble0.png",
    ⲆⲆⵠⵠⲆᐃⵠ: "img/day-magma-buble1.png",
    ᐃⲆΔⲆᐃⵠⵠ: "img/night-magma-buble1.png",
    ᐃⲆⲆⵠⵠᐃᐃ: "img/day-magma-buble2.png",
    ⵠΔᐃⲆΔⲆⵠ: "img/night-magma-buble2.png",
    ΔΔΔⵠⲆⵠΔ: "img/day-lava-dragon.png",
    ⵠⲆΔⲆⲆΔΔ: "img/night-lava-dragon.png",
    ⵠᐃⲆⲆΔᐃΔⲆⵠ: "img/day-fire-dragon.png",
    ᐃᐃⵠⲆΔⲆⲆⲆΔ: "img/night-fire-dragon.png",
    ΔⲆᐃΔΔⵠⵠ: "img/hurt-lava-dragon.png",
    ⵠᐃΔᐃⵠΔⲆ: "img/day-lava-wing-left.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/night-lava-wing-left.png",
    ⲆⲆⲆⵠᐃᐃⵠ: "img/day-lava-wing-right.png",
    ΔⵠΔⵠⲆⲆΔ: "img/night-lava-wing-right.png",
    ᐃⵠⲆⲆⵠⲆᐃ: "img/hurt-lava-wing-left.png",
    ᐃΔΔⵠⵠⲆΔ: "img/hurt-lava-wing-right.png",
    ᐃⵠⵠⲆΔⵠⵠ: "img/day-reidite-spear.png",
    ⵠᐃⵠⲆⵠⵠΔ: "img/night-reidite-spear.png",
    ⵠⲆΔᐃᐃΔᐃ: "img/inv-reidite-spear-out.png",
    ᐃΔⵠⲆᐃΔΔ: "img/inv-reidite-spear-in.png",
    ΔᐃⵠΔᐃᐃⵠ: "img/inv-reidite-spear-click.png",
    ⲆΔⲆⵠⲆⲆⵠ: "img/day-reidite-helmet.png",
    ⲆΔΔⲆⵠᐃⵠ: "img/night-reidite-helmet.png",
    ᐃⲆⵠⵠⵠᐃⵠ: "img/inv-reidite-helmet-out.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/inv-reidite-helmet-in.png",
    ⵠⵠΔᐃⲆⲆΔ: "img/inv-reidite-helmet-click.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/day-hand-reidite-protection.png",
    ⲆⵠΔᐃΔᐃⲆ: "img/night-hand-reidite-protection.png",
    ᐃΔⲆⵠⲆΔⲆ: "img/day-reidite-protection.png",
    ⵠⲆⲆᐃⵠΔⵠ: "img/night-reidite-protection.png",
    ΔⵠᐃᐃⲆᐃⲆ: "img/inv-reidite-protection-out.png",
    ᐃᐃΔⲆⵠᐃⲆ: "img/inv-reidite-protection-in.png",
    ᐃⲆΔⲆΔΔᐃ: "img/inv-reidite-protection-click.png",
    ⵠΔΔᐃΔᐃⲆ: "img/day-lava-dragon-sword.png",
    ⲆⵠⵠΔⲆᐃΔ: "img/night-lava-dragon-sword.png",
    ΔᐃⲆΔΔⵠⲆ: "img/inv-lava-dragon-sword-out.png",
    ⲆⵠⲆⲆⵠΔⲆ: "img/inv-lava-dragon-sword-in.png",
    ⲆⲆΔΔΔⲆⲆ: "img/inv-lava-dragon-sword-click.png",
    ⲆΔⵠⲆⵠⵠΔ: "img/day-lava-spear.png",
    ⵠᐃᐃⲆⵠΔᐃ: "img/night-lava-spear.png",
    ⲆⵠᐃᐃⲆᐃΔ: "img/inv-lava-spear-out.png",
    ᐃᐃΔΔⲆⲆΔ: "img/inv-lava-spear-in.png",
    ᐃΔΔⲆᐃⵠΔ: "img/inv-lava-spear-click.png",
    ⵠᐃᐃΔΔⵠΔ: "img/day-lava-helmet.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/night-lava-helmet.png",
    ΔⲆᐃⵠⲆⲆΔ: "img/inv-lava-helmet-out.png",
    ⲆⵠⲆⲆΔᐃⲆ: "img/inv-lava-helmet-in.png",
    ᐃⲆⵠᐃᐃᐃⲆ: "img/inv-lava-helmet-click.png",
    ΔⲆᐃⵠᐃⲆⲆ: "img/day-witch-hat.png",
    ΔⵠⲆᐃΔᐃΔ: "img/night-witch-hat.png",
    ⲆᐃⲆⲆⲆΔᐃ: "img/inv-witch-hat-out.png",
    ⵠⲆᐃᐃⵠⵠⲆ: "img/inv-witch-hat-in.png",
    ΔⲆΔᐃΔΔΔ: "img/inv-witch-hat-click.png",
    ⲆᐃᐃᐃⲆΔⲆ: "img/day-nimbus2000.png",
    ⵠΔⲆⲆⲆⲆᐃ: "img/night-nimbus2000.png",
    ⲆΔᐃΔⵠⵠΔ: "img/inv-nimbus2000-out.png",
    ΔΔⵠⵠΔᐃⵠ: "img/inv-nimbus2000-in.png",
    ΔᐃΔⵠΔΔⲆ: "img/inv-nimbus2000-click.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/day-accessory1-pacques.png",
    ᐃΔΔΔⲆⵠᐃ: "img/night-accessory1-pacques.png",
    ᐃᐃᐃΔⲆⲆⵠ: "img/day-accessory2-pacques.png",
    ΔⲆᐃⵠⵠᐃⲆ: "img/night-accessory2-pacques.png",
    ⲆⲆΔⲆᐃⲆΔ: "img/day-accessory3-pacques.png",
    ⲆⲆⲆⲆⵠⵠⲆ: "img/night-accessory3-pacques.png",
    ⵠⵠᐃΔΔⵠΔ: "img/day-accessory5-pacques.png",
    ΔⲆⲆᐃⵠΔΔ: "img/night-accessory5-pacques.png",
    ᐃᐃⵠΔᐃΔᐃ: "img/day-accessory6-pacques.png",
    ΔᐃΔΔᐃⲆᐃ: "img/night-accessory6-pacques.png",
    ⲆⲆΔⵠΔᐃⵠ: "img/day-accessory7-pacques.png",
    ΔⲆᐃⵠΔⲆⵠ: "img/night-accessory7-pacques.png",
    ΔΔΔᐃⵠⵠᐃ: "img/day-accessory8-pacques.png",
    ⵠΔΔⲆⵠᐃΔ: "img/night-accessory8-pacques.png",
    ΔΔᐃⲆΔᐃⵠ: "img/day-bag-pacques.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/night-bag-pacques.png",
    ΔⵠᐃⵠᐃⲆⲆ: "img/day-carrot.png",
    ΔΔⲆᐃᐃⲆᐃ: "img/night-carrot.png",
    ⲆⲆⲆⵠΔⵠᐃ: "img/day-carrot-dried.png",
    ⵠᐃΔᐃⲆⵠⵠ: "img/night-carrot-dried.png",
    ᐃᐃⵠΔᐃᐃᐃ: "img/day-tomato-herb.png",
    ᐃⲆⲆⵠΔΔΔ: "img/night-tomato-herb.png",
    ⵠᐃᐃⲆⲆΔᐃ: "img/day-tomato-herb-dried.png",
    ⲆΔⲆᐃⵠⵠⲆ: "img/night-tomato-herb-dried.png",
    ⵠⵠⵠⵠᐃΔᐃ: "img/day-tomato.png",
    ⵠⲆⲆⲆⲆⲆⵠ: "img/night-tomato.png",
    ⵠⲆΔΔᐃⲆᐃ: "img/inv-carrot-out.png",
    ΔⵠΔⵠⵠΔᐃ: "img/inv-carrot-in.png",
    ⵠᐃⲆΔᐃⵠΔ: "img/inv-carrot-click.png",
    ΔⲆᐃⲆⲆᐃⲆ: "img/inv-tomato-out.png",
    ⲆΔᐃⵠⵠᐃⲆ: "img/inv-tomato-in.png",
    ⵠΔⲆᐃᐃᐃⵠ: "img/inv-tomato-click.png",
    ΔΔⲆᐃⵠⲆᐃ: "img/day-player0.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/night-player0.png",
    ΔᐃΔⵠᐃⵠᐃ: "img/day-player1.png",
    ᐃⲆᐃᐃᐃⲆΔ: "img/night-player1.png",
    ⵠΔⲆΔⲆⵠΔ: "img/day-player2.png",
    ᐃΔⲆⲆΔᐃΔ: "img/night-player22.png",
    ⲆⲆⲆⲆᐃᐃᐃ: "img/day-player3.png",
    ΔⵠᐃⲆⵠⲆᐃ: "img/night-player33.png",
    ᐃᐃΔΔⵠⲆⲆ: "img/day-player4.png",
    ΔⵠⵠⲆⲆⵠⵠ: "img/night-player4.png",
    ⲆⵠΔΔⲆΔᐃ: "img/day-player5.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/night-player5.png",
    ᐃᐃⲆⵠⲆⲆⵠ: "img/day-player6.png",
    ⲆᐃⵠⲆΔΔⲆ: "img/night-player6.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/day-player7.png",
    ⵠⵠⵠΔⵠⵠⵠ: "img/night-player7.png",
    ᐃΔⵠⵠΔΔΔ: "img/day-player8.png",
    ΔᐃᐃΔᐃⲆᐃ: "img/night-player8.png",
    ⲆΔΔΔⲆⵠⲆ: "img/day-player9.png",
    ⲆᐃⲆΔⲆΔⵠ: "img/night-player9.png",
    ΔΔᐃⵠⲆⵠᐃ: "img/day-player10.png",
    ᐃΔᐃⵠⲆⵠⵠ: "img/night-player10.png",
    ⵠᐃⵠⲆⲆΔΔ: "img/day-player11.png",
    ⲆᐃⵠⲆΔᐃᐃ: "img/night-player11.png",
    ⲆⵠⵠⲆⵠⲆΔ: "img/day-player12.png",
    ΔΔᐃⲆⲆᐃⲆ: "img/night-player12.png",
    ᐃⲆᐃΔⵠΔⲆ: "img/day-player13.png",
    ⵠⲆⲆΔΔΔⲆ: "img/night-player13.png",
    ΔⲆΔᐃΔⲆᐃ: "img/day-player14.png",
    ΔⵠΔⵠᐃΔⵠ: "img/night-player14.png",
    ⲆΔⲆⵠΔΔΔ: "img/day-player15.png",
    ⵠⵠⲆⵠⵠⲆⵠ: "img/night-player15.png",
    ᐃⵠᐃᐃⵠⲆᐃ: "img/day-player16.png",
    ᐃⲆⲆΔⲆΔΔ: "img/night-player16.png",
    ΔΔⵠᐃᐃⵠᐃ: "img/day-player17.png",
    ΔⲆⲆⲆⵠᐃᐃ: "img/night-player17.png",
    ⲆⲆᐃᐃᐃⲆⵠ: "img/day-player18.png",
    ᐃⵠΔΔⵠΔⵠ: "img/night-player18.png",
    ᐃΔΔΔΔΔΔ: "img/day-player19.png",
    ᐃⵠⵠⲆᐃᐃᐃ: "img/night-player19.png",
    ⲆⲆⵠⲆΔⲆᐃ: "img/day-hand-player0.png",
    ⲆⵠⵠⲆⲆΔᐃ: "img/night-hand-player0.png",
    ΔᐃΔⵠⲆⵠᐃ: "img/day-hand-player1.png",
    ⲆᐃᐃⵠΔⲆⲆ: "img/night-hand-player1.png",
    ⵠⵠΔᐃⵠᐃⲆ: "img/day-hand-player2.png",
    ⲆᐃⵠⵠᐃⲆⲆ: "img/night-hand-player22.png",
    ΔΔΔⲆΔᐃⲆ: "img/day-hand-player3.png",
    ΔᐃΔⵠⵠᐃⲆ: "img/night-hand-player33.png",
    ⵠΔᐃⲆΔⵠΔ: "img/day-hand-player4.png",
    ᐃⲆᐃᐃΔⲆΔ: "img/night-hand-player4.png",
    ⲆⲆΔᐃΔΔᐃ: "img/day-hand-player5.png",
    ᐃⵠⵠⵠⲆⲆⲆ: "img/night-hand-player5.png",
    ⲆⲆΔⵠⲆΔᐃ: "img/day-hand-player6.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/night-hand-player6.png",
    ΔⲆᐃⲆᐃⲆⲆ: "img/day-hand-player7.png",
    ᐃⵠⵠⲆᐃⲆᐃ: "img/night-hand-player7.png",
    ᐃⵠΔⲆⵠᐃⲆ: "img/day-hand-player8.png",
    ᐃⲆⲆᐃᐃⲆⲆ: "img/night-hand-player8.png",
    ⵠⵠᐃΔΔⲆⲆ: "img/day-hand-player9.png",
    ⲆᐃⵠⲆᐃⵠⵠ: "img/night-hand-player9.png",
    ⲆⵠⲆⲆᐃΔⵠ: "img/day-hand-player10.png",
    ΔⵠΔΔⵠⵠⵠ: "img/night-hand-player10.png",
    ⲆᐃⲆΔⲆΔᐃ: "img/day-hand-player11.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/night-hand-player11.png",
    ⲆΔᐃᐃⵠᐃᐃ: "img/day-hand-player12.png",
    ⲆⲆⵠⵠᐃⲆⵠ: "img/night-hand-player12.png",
    ΔⲆᐃᐃᐃⲆⵠ: "img/day-hand-player13.png",
    ᐃΔᐃⵠᐃⲆⵠ: "img/night-hand-player13.png",
    ᐃⵠᐃⲆⵠΔΔ: "img/day-hand-player14.png",
    ᐃᐃⲆⵠᐃⵠⲆ: "img/night-hand-player14.png",
    ⲆΔΔΔⵠΔⲆ: "img/day-hand-player15.png",
    ⲆⲆᐃΔⲆⵠⵠ: "img/night-hand-player15.png",
    ⲆΔⵠΔⲆΔᐃ: "img/day-hand-player16.png",
    ⵠΔᐃⲆΔⵠᐃ: "img/night-hand-player16.png",
    ᐃᐃᐃⲆⵠⲆⵠ: "img/day-hand-player17.png",
    ᐃⵠⲆⲆⲆⲆᐃ: "img/night-hand-player17.png",
    ΔΔᐃΔᐃⲆⵠ: "img/day-hand-player18.png",
    ⲆⲆⵠᐃᐃⲆⲆ: "img/night-hand-player18.png",
    ⲆⲆⲆΔᐃᐃΔ: "img/day-hand-player19.png",
    ΔⲆΔᐃⲆᐃᐃ: "img/night-hand-player19.png",
    ⵠᐃⲆⲆⲆⲆΔ: "img/day-accessory4.png",
    ᐃᐃᐃⵠᐃΔΔ: "img/night-accessory4.png",
    ⵠᐃΔᐃΔΔⵠ: "img/day-accessory9.png",
    ΔΔᐃⲆΔᐃⲆ: "img/night-accessory9.png",
    ⲆⵠᐃᐃⲆΔΔ: "img/day-accessory10.png",
    ᐃⵠΔΔΔΔⵠ: "img/night-accessory10.png",
    ⲆⲆΔΔⵠⵠᐃ: "img/day-accessory11.png",
    ᐃΔᐃᐃⲆⲆΔ: "img/night-accessory11.png",
    ⵠᐃΔᐃΔⲆᐃ: "img/day-accessory12.png",
    ΔΔⵠⵠΔⵠᐃ: "img/night-accessory12.png",
    ⲆᐃᐃΔᐃⲆᐃ: "img/day-bag.png",
    ⲆᐃΔΔᐃΔⵠ: "img/night-bag.png",
    ⲆⲆⲆᐃᐃΔⲆ: "img/inv-bag-out.png",
    ᐃⵠⲆⵠⲆⲆΔ: "img/inv-bag-in.png",
    ΔᐃⵠⲆⲆᐃⵠ: "img/inv-bag-click.png",
    ΔⲆⲆᐃⲆⵠⲆ: "img/day-pitchfork.png",
    ⵠⵠᐃⲆᐃⵠⲆ: "img/night-pitchfork.png",
    ΔⵠΔⲆⲆⲆⲆ: "img/inv-pitchfork-out.png",
    Δᐃⵠᐃᐃᐃᐃ: "img/inv-pitchfork-in.png",
    ᐃⵠⵠⵠⵠᐃᐃ: "img/inv-pitchfork-click.png",
    ⲆⲆΔⵠⲆᐃⲆ: "img/inv-wood-spike-door-out.png",
    ᐃΔⲆΔΔⵠⲆ: "img/inv-wood-spike-door-in.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/inv-wood-spike-door-click.png",
    ⵠⵠᐃⵠᐃⲆᐃ: "img/inv-stone-spike-door-out.png",
    ᐃΔΔⲆⵠⲆᐃ: "img/inv-stone-spike-door-in.png",
    ⲆⵠΔᐃᐃᐃⵠ: "img/inv-stone-spike-door-click.png",
    ⲆⲆΔⵠᐃᐃᐃ: "img/inv-gold-spike-door-out.png",
    ᐃᐃⲆⲆᐃᐃΔ: "img/inv-gold-spike-door-in.png",
    ⲆⵠΔΔΔⵠⲆ: "img/inv-gold-spike-door-click.png",
    ᐃⵠⲆⵠⲆⵠΔ: "img/inv-diamond-spike-door-out.png",
    ΔⲆⵠΔⵠᐃⵠ: "img/inv-diamond-spike-door-in.png",
    ᐃᐃᐃⲆᐃᐃⲆ: "img/inv-diamond-spike-door-click.png",
    ⵠΔⲆⵠᐃΔⵠ: "img/inv-amethyst-spike-door-out.png",
    ᐃᐃᐃᐃⲆⲆΔ: "img/inv-amethyst-spike-door-in.png",
    ⵠⲆⵠΔᐃΔⲆ: "img/inv-amethyst-spike-door-click.png",
    ⲆⲆⵠⲆᐃⵠⲆ: "img/day-wood-spike-door.png",
    ΔⲆΔΔΔⵠᐃ: "img/night-wood-spike-door.png",
    ΔⲆⲆΔⵠᐃΔ: "img/day-stone-spike-door.png",
    ⵠΔⵠΔΔᐃΔ: "img/night-stone-spike-door.png",
    ΔⵠᐃᐃⲆΔⵠ: "img/day-gold-spike-door.png",
    ΔⲆⲆΔᐃⵠⵠ: "img/night-gold-spike-door.png",
    ⲆΔⲆⵠⵠⵠᐃ: "img/day-diamond-spike-door.png",
    ΔΔⲆᐃᐃΔⵠ: "img/night-diamond-spike-door.png",
    ΔᐃⵠⵠⲆΔᐃ: "img/day-amethyst-spike-door.png",
    ⲆⲆⲆΔΔΔΔ: "img/night-amethyst-spike-door.png",
    ⲆⵠⲆⲆⲆⲆᐃ: "img/inv-reidite-spike-door-out.png",
    ᐃⲆⲆⲆⲆᐃⲆ: "img/inv-reidite-spike-door-in.png",
    ⵠΔⵠⲆⲆᐃⲆ: "img/inv-reidite-spike-door-click.png",
    ⲆⲆⵠⲆⲆΔᐃ: "img/inv-reidite-door-out.png",
    ⲆΔΔᐃᐃᐃⲆ: "img/inv-reidite-door-in.png",
    ⵠⵠᐃⲆⲆⵠᐃ: "img/inv-reidite-door-click.png",
    ᐃΔΔⲆᐃⲆΔ: "img/inv-reidite-spike-out.png",
    ⵠⲆᐃⵠⵠⵠⲆ: "img/inv-reidite-spike-in.png",
    ΔᐃⵠᐃⵠⲆⲆ: "img/inv-reidite-spike-click.png",
    ⵠΔⵠᐃΔⵠΔ: "img/inv-reidite-wall-out.png",
    ⵠᐃⲆⵠᐃⲆΔ: "img/inv-reidite-wall-in.png",
    ⵠᐃⵠᐃⵠⵠᐃ: "img/inv-reidite-wall-click.png",
    ΔᐃᐃΔΔⵠⵠ: "img/day-reidite-wall.png",
    ⵠᐃΔΔΔⵠΔ: "img/night-reidite-wall.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/day-reidite-door.png",
    ΔⲆᐃΔⵠⲆⵠ: "img/night-reidite-door.png",
    ⲆΔⵠΔⵠⲆᐃ: "img/day-reidite-spike.png",
    ᐃⵠΔΔⲆᐃⲆ: "img/night-reidite-spike.png",
    ⲆΔⲆᐃⲆⲆⲆ: "img/day-reidite-spike-door.png",
    ⲆⲆᐃⵠᐃⵠᐃ: "img/night-reidite-spike-door.png",
    ΔⵠᐃⵠΔⲆΔ: "img/inv-reidite-pickaxe-out.png",
    ⲆⵠⲆⵠᐃⵠΔ: "img/inv-reidite-pickaxe-in.png",
    ⵠΔⲆⵠΔⲆᐃ: "img/inv-reidite-pickaxe-click.png",
    ⵠⵠⵠⲆΔⲆⲆ: "img/day-reidite-pickaxe.png",
    ⵠΔΔΔⲆΔⲆ: "img/night-reidite-pickaxe.png",
    ᐃⵠᐃΔΔⲆΔ: "img/inv-reidite-hammer-out.png",
    ᐃⵠⲆΔᐃᐃⲆ: "img/inv-reidite-hammer-in.png",
    ⵠⲆⵠΔΔΔⲆ: "img/inv-reidite-hammer-click.png",
    ⲆΔⵠⵠⵠΔΔ: "img/day-reidite-hammer.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/night-reidite-hammer.png",
    ⵠⵠᐃΔΔⲆⵠ: "img/day-watermelon1.png",
    ᐃΔⲆⲆⲆⵠⵠ: "img/night-watermelon1.png",
    ΔΔⵠⵠᐃⲆⲆ: "img/day-watermelon-dried1.png",
    ⵠᐃΔΔⲆⵠᐃ: "img/night-watermelon-dried1.png",
    ⵠΔⲆⲆΔᐃⵠ: "img/inv-watermelon-out.png",
    ⲆⵠⵠΔΔⵠᐃ: "img/inv-watermelon-in.png",
    ΔⵠᐃᐃⲆΔᐃ: "img/inv-watermelon-click.png",
    ΔΔᐃΔᐃⵠⲆ: "img/day-boat.png",
    ᐃΔⵠΔⲆΔⲆ: "img/night-boat.png",
    ΔⵠᐃΔⵠⵠⵠ: "img/day-boat-wave.png",
    ⵠⲆΔⵠΔⵠΔ: "img/night-boat-wave.png",
    ΔΔⵠΔⵠᐃⲆ: "img/inv-boat-out.png",
    ΔⵠⲆⵠⲆⵠⲆ: "img/inv-boat-in.png",
    ⲆᐃⲆΔⲆᐃᐃ: "img/inv-boat-click.png",
    ᐃᐃⲆⵠⲆᐃⵠ: "img/day-plane.png",
    ⲆᐃⵠΔⲆⵠΔ: "img/night-plane.png",
    ΔⵠⲆΔⲆᐃⵠ: "img/inv-plane-out.png",
    ⲆΔᐃⲆΔΔⲆ: "img/inv-plane-in.png",
    ᐃΔΔⵠΔᐃⵠ: "img/inv-plane-click.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/day-sled.png",
    ⵠⵠᐃΔⵠΔᐃ: "img/night-sled.png",
    ᐃᐃᐃⲆⵠᐃⵠ: "img/day-sled-wave.png",
    ΔⵠⲆᐃⵠᐃⵠ: "img/night-sled-wave.png",
    ⲆⵠⵠⵠΔᐃⵠ: "img/inv-sled-out.png",
    ᐃΔⲆᐃᐃⲆⵠ: "img/inv-sled-in.png",
    ⲆᐃⵠⵠⲆⲆΔ: "img/inv-sled-click.png",
    ⵠⵠⲆⲆⲆᐃᐃ: "img/day-pirate-hat.png",
    ΔᐃⵠΔⵠⲆⵠ: "img/night-pirate-hat.png",
    ᐃᐃᐃᐃⲆⲆⲆ: "img/inv-pirate-hat-out.png",
    ⵠⵠⵠⵠⵠΔᐃ: "img/inv-pirate-hat-in.png",
    ᐃᐃᐃΔΔΔΔ: "img/inv-pirate-hat-click.png",
    ⵠⵠᐃΔⵠⵠᐃ: "img/day-penguin.png",
    ΔⲆᐃᐃᐃΔⵠ: "img/night-penguin.png",
    ᐃΔⲆΔΔᐃᐃ: "img/hurt-penguin.png",
    ⲆⵠΔΔⵠ: "img/inv-penguin-feather-click.png",
    ΔᐃᐃⲆⲆ: "img/inv-hawk-feather-click.png",
    ΔᐃᐃⲆᐃⵠⵠ: "img/day-boar1.png",
    ⲆᐃⲆΔΔΔⵠ: "img/day-boar1-tamed.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/day-boar1-angry.png",
    ᐃᐃⲆΔⲆⲆⵠ: "img/night-boar1.png",
    ᐃᐃⵠⲆⲆⲆⵠ: "img/night-boar1-tamed.png",
    ⵠⲆⲆⲆⲆⲆΔ: "img/night-boar1-angry.png",
    ᐃᐃⲆᐃⲆᐃⵠ: "img/inv-mount-boar-out.png",
    ΔᐃΔⲆⵠⵠΔ: "img/inv-mount-boar-in.png",
    ⵠΔⵠⵠⲆⲆᐃ: "img/inv-mount-boar-click.png",
    ᐃΔΔΔⵠᐃⲆ: "img/day-hurt-boar1.png",
    ⲆⵠᐃᐃⵠⲆΔ: "img/boar1-step.png",
    ⲆⵠⲆΔΔᐃⲆ: "img/day-saddle1.png",
    ⵠΔΔⲆΔΔΔ: "img/night-saddle1.png",
    ⵠᐃᐃΔⵠᐃΔ: "img/inv-saddle-out.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/inv-saddle-in.png",
    ⲆᐃⲆⵠᐃΔᐃ: "img/inv-saddle-click.png",
    ΔᐃᐃᐃᐃᐃΔ: "img/day-magic-wand0.png",
    ⵠⲆⲆⲆᐃⵠⵠ: "img/night-magic-wand0.png",
    ΔⵠⵠΔᐃΔᐃ: "img/day-light-wand1.png",
    ⵠΔⵠΔᐃΔᐃ: "img/night-light-wand1.png",
    ⲆΔΔⲆΔⵠⲆ: "img/inv-magic-wand0-out.png",
    ⵠᐃⵠΔΔΔⵠ: "img/inv-magic-wand0-in.png",
    ΔⵠⵠΔᐃⵠⵠ: "img/inv-magic-wand0-click.png",
    ⲆⵠΔⲆⵠⵠΔ: "img/day-magic-wand1.png",
    ⵠⲆᐃΔΔΔᐃ: "img/night-magic-wand1.png",
    ⵠᐃⲆⵠⵠⲆⵠ: "img/day-light-wand0.png",
    ΔⵠΔⵠⵠⵠⵠ: "img/night-light-wand0.png",
    ᐃⲆⲆᐃΔⵠⵠ: "img/inv-magic-wand1-out.png",
    ⵠⲆⵠⵠΔⲆⲆ: "img/inv-magic-wand1-in.png",
    ᐃⵠΔⲆⵠⲆⲆ: "img/inv-magic-wand1-click.png",
    ᐃⲆⲆⵠⲆⲆⲆ: "img/day-firefly.png",
    ΔⲆΔⲆᐃⵠΔ: "img/night-firefly.png",
    ⲆⲆⵠⲆᐃᐃⲆ: "img/hurt-firefly.png",
    ᐃᐃΔᐃⵠΔⲆ: "img/inv-firefly-out.png",
    ᐃᐃΔⵠΔΔⲆ: "img/inv-firefly-in.png",
    ΔᐃⵠᐃⵠⲆⵠ: "img/inv-firefly-click.png",
    ⲆⵠᐃⲆᐃⵠⵠ: "img/day-baby-dragon.png",
    ᐃⵠⵠᐃⵠᐃⲆ: "img/night-baby-dragon.png",
    ⲆΔⲆᐃΔᐃΔ: "img/day-baby-dragon-angry.png",
    ΔⲆⵠⵠᐃΔⵠ: "img/night-baby-dragon-angry.png",
    ᐃⵠΔⵠΔⲆⲆ: "img/day-baby-dragon-tamed.png",
    ⵠᐃⵠᐃΔⲆⵠ: "img/night-baby-dragon-tamed.png",
    ᐃᐃᐃᐃᐃⵠᐃ: "img/day-wing-dragon-left-angry.png",
    ⲆᐃⲆⵠΔΔΔ: "img/night-dragon-wing-left-angry.png",
    ΔΔΔⵠⵠⲆⵠ: "img/day-wing-dragon-right-angry.png",
    ⵠᐃⵠᐃᐃⵠΔ: "img/night-dragon-wing-right-angry.png",
    ΔΔᐃⵠᐃΔⵠ: "img/day-wing-dragon-left-tamed.png",
    ⵠⵠᐃⵠᐃᐃΔ: "img/night-dragon-wing-left-tamed.png",
    ⲆᐃⵠⵠΔⲆⵠ: "img/day-wing-dragon-right-tamed.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/night-wing-dragon-right-tamed.png",
    ⲆᐃⵠⲆᐃᐃΔ: "img/day-wing-dragon-left.png",
    ᐃⵠᐃΔΔΔⵠ: "img/night-dragon-wing-left.png",
    ⵠⲆΔΔΔΔΔ: "img/day-wing-dragon-right.png",
    ⵠΔⵠⲆΔᐃᐃ: "img/night-wing-dragon-right.png",
    ᐃΔⵠᐃⵠⲆΔ: "img/hurt-baby-dragon.png",
    ΔᐃⲆᐃᐃⲆⵠ: "img/hurt-baby-dragon-wing-left.png",
    ᐃΔΔⵠΔΔᐃ: "img/hurt-baby-dragon-wing-right.png",
    ΔⵠⵠΔⲆⵠⲆ: "img/inv-baby-dragon-out.png",
    ᐃΔⲆᐃᐃΔᐃ: "img/inv-baby-dragon-in.png",
    ⵠⲆᐃᐃᐃᐃΔ: "img/inv-baby-dragon-click.png",
    ᐃΔᐃΔᐃᐃᐃ: "img/day-baby-lava.png",
    ⲆⵠⲆⵠⲆΔᐃ: "img/night-baby-lava.png",
    ᐃⵠᐃᐃⲆΔⵠ: "img/day-baby-lava-angry.png",
    ⵠΔᐃᐃΔᐃᐃ: "img/night-baby-lava-angry.png",
    ⲆᐃⵠⲆⵠΔΔ: "img/day-baby-lava-tamed.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/night-baby-lava-tamed.png",
    ⵠᐃⵠⵠⲆⲆⲆ: "img/day-wing-lava-left-angry.png",
    ⲆⲆᐃΔⵠᐃᐃ: "img/night-wing-lava-left-angry.png",
    ⵠⵠᐃᐃⲆᐃΔ: "img/day-wing-lava-right-angry.png",
    ⲆΔΔⲆⵠⲆΔ: "img/night-wing-lava-right-angry.png",
    ⵠⵠΔⲆΔⲆΔ: "img/day-wing-lava-left-tamed.png",
    ⲆᐃᐃⲆⵠΔᐃ: "img/night-wing-lava-left-tamed.png",
    ⲆⵠᐃΔΔⵠᐃ: "img/day-wing-lava-right-tamed.png",
    ᐃᐃᐃΔⵠⲆᐃ: "img/night-wing-lava-right-tamed.png",
    ⲆΔΔⵠⲆⲆΔ: "img/day-wing-lava-left.png",
    ⵠⵠⵠⵠⲆᐃΔ: "img/night-wing-lava-left.png",
    ᐃⲆᐃⵠⲆⲆᐃ: "img/day-wing-lava-right.png",
    ΔⵠⵠΔⵠΔⲆ: "img/night-wing-lava-right.png",
    ΔΔᐃⲆⲆⵠᐃ: "img/hurt-baby-lava.png",
    ΔⵠⲆⲆⵠⵠᐃ: "img/hurt-baby-lava-wing-left.png",
    ᐃᐃⵠⵠⲆⵠⵠ: "img/hurt-baby-lava-wing-right.png",
    ΔΔⵠⵠΔΔΔ: "img/inv-baby-lava-out.png",
    ⲆᐃΔᐃΔⵠⵠ: "img/inv-baby-lava-in.png",
    ᐃᐃΔⵠᐃᐃⵠ: "img/inv-baby-lava-click.png",
    ⵠⲆᐃᐃⲆⲆⲆ: "img/day-falcon.png",
    ᐃΔⵠⲆᐃᐃᐃ: "img/night-falcon.png",
    ΔΔᐃΔΔⲆᐃ: "img/day-falcon-angry.png",
    ΔⲆΔᐃᐃⲆⵠ: "img/night-falcon-angry.png",
    ΔΔΔᐃⵠⵠΔ: "img/day-falcon-ground.png",
    ᐃⲆᐃⵠᐃⲆⵠ: "img/night-falcon-ground.png",
    ᐃⵠΔΔΔΔΔ: "img/day-falcon-ground-angry.png",
    ᐃⲆⲆᐃⵠⵠᐃ: "img/night-falcon-ground-angry.png",
    ⵠⵠⵠΔⲆᐃΔ: "img/day-falcon-wings-left.png",
    ᐃⵠⲆⲆᐃᐃΔ: "img/night-falcon-wings-left.png",
    ⲆⵠⵠⵠⲆΔⲆ: "img/day-falcon-wings-right.png",
    ᐃⵠⲆⵠΔⲆᐃ: "img/night-falcon-wings-right.png",
    ᐃΔᐃⵠⲆᐃᐃ: "img/day-falcon-angry-wings-left.png",
    ΔᐃΔⲆⲆⵠⵠ: "img/night-falcon-angry-wings-left.png",
    ⲆᐃⵠᐃⵠᐃⲆ: "img/day-falcon-angry-wings-right.png",
    ⵠᐃᐃⵠΔΔⲆ: "img/night-falcon-angry-wings-right.png",
    ΔΔⵠᐃᐃᐃᐃ: "img/day-falcon-wings-left-tamed.png",
    ΔᐃΔᐃⵠᐃᐃ: "img/night-falcon-wings-left-tamed.png",
    ᐃΔⲆⲆᐃⵠΔ: "img/day-falcon-wings-right-tamed.png",
    ΔΔⲆΔΔⵠⵠ: "img/night-falcon-wings-right-tamed.png",
    ᐃᐃⵠⵠⵠⵠⲆ: "img/day-falcon-tamed.png",
    ΔᐃΔⵠΔΔΔ: "img/night-falcon-tamed.png",
    ΔᐃⲆⵠⵠᐃⵠ: "img/hurt-falcon-ground.png",
    ΔᐃᐃᐃⲆΔⵠ: "img/hurt-falcon.png",
    ⵠⲆⵠΔⲆΔⵠ: "img/hurt-falcon-wings-left.png",
    ⲆⲆⲆΔⵠⵠⵠ: "img/hurt-falcon-wings-right.png",
    ⵠᐃΔⲆᐃΔᐃ: "img/inv-falcon-out.png",
    ΔᐃᐃᐃᐃⲆⲆ: "img/inv-falcon-in.png",
    ᐃⵠΔⲆⲆⵠᐃ: "img/inv-falcon-click.png",
    ΔⵠᐃⲆᐃⲆⲆ: "img/day-crab-boss.png",
    ᐃΔⲆⲆΔⵠⵠ: "img/night-crab-boss.png",
    ⲆᐃⵠᐃΔᐃⵠ: "img/day-crab-boss-angry.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/night-crab-boss-angry.png",
    ⵠΔΔⵠⲆΔⲆ: "img/day-crab-boss-tamed.png",
    ΔᐃⵠΔᐃⲆΔ: "img/night-crab-boss-tamed.png",
    ⵠⲆᐃⵠⵠⲆᐃ: "img/day-crab-boss-claw-left-attack.png",
    ΔᐃΔΔⲆⲆᐃ: "img/night-crab-boss-claw-left-attack.png",
    ΔⵠΔⵠⵠᐃⲆ: "img/day-crab-boss-claw-right-attack.png",
    ΔⵠⵠⲆΔⲆⲆ: "img/night-crab-boss-claw-right-attack.png",
    ⵠΔᐃᐃΔᐃⲆΔⵠ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃΔᐃᐃᐃᐃΔᐃⵠ: "img/night-crab-boss-claw-left-tamed.png",
    ⵠΔΔⲆᐃᐃⵠᐃᐃ: "img/day-crab-boss-claw-right-tamed.png",
    ᐃΔⲆΔᐃΔⲆⵠᐃ: "img/night-crab-boss-claw-right-tamed.png",
    ⵠⲆΔⲆᐃⲆⵠ: "img/day-crab-boss-claw-left.png",
    ᐃΔΔΔⵠΔΔ: "img/night-crab-boss-claw-left.png",
    ᐃⵠⵠᐃⲆⲆΔ: "img/day-crab-boss-claw-right.png",
    ΔⵠⵠΔΔⵠᐃ: "img/night-crab-boss-claw-right.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/hurt-crab-boss.png",
    ⵠᐃᐃⲆⵠⵠⲆ: "img/hurt-crab-boss-claw-left.png",
    ⵠΔⵠⵠⲆΔⵠ: "img/hurt-crab-boss-claw-right.png",
    ⵠⵠⵠΔᐃⵠᐃ: "img/heal-crab-boss.png",
    ⵠⲆᐃⵠⵠⲆΔ: "img/heal-crab-boss-claw-left.png",
    ᐃᐃᐃΔΔᐃΔ: "img/heal-crab-boss-claw-right.png",
    ΔΔⲆᐃᐃᐃⲆ: "img/crab-step.png",
    ⲆⵠᐃⲆⵠΔⲆ: "img/inv-crab-boss-out.png",
    ⵠⲆΔⲆᐃⵠⵠ: "img/inv-crab-boss-in.png",
    ΔΔⵠⵠΔⲆⲆ: "img/inv-crab-boss-click.png",
    ᐃᐃΔΔⵠⵠᐃ: "img/day-cactus10.png",
    ᐃⲆⵠⲆᐃΔⲆ: "img/night-cactus10.png",
    ᐃᐃΔⵠΔⵠⵠ: "img/inv-cactus-out.png",
    ΔⲆΔⵠⲆΔΔ: "img/inv-cactus-in.png",
    ⵠᐃᐃⲆⲆⵠⵠ: "img/inv-cactus-click.png",
    ΔⲆⲆⲆⲆⵠⵠ: "img/day-scorpion.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/night-scorpion.png",
    ⵠⲆⵠΔⵠᐃⲆ: "img/day-scorpion-hand-left.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/night-scorpion-hand-left.png",
    ᐃᐃΔΔΔⲆⵠ: "img/day-scorpion-hand-right.png",
    ᐃΔⵠᐃᐃⵠⵠ: "img/night-scorpion-hand-right.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/hurt-scorpion.png",
    ᐃΔᐃⵠᐃΔⲆ: "img/hurt-scorpion-hand-left.png",
    ⵠᐃᐃΔᐃᐃᐃ: "img/hurt-scorpion-hand-right.png",
    ᐃⲆⲆΔᐃⵠⲆ: "img/day-vulture.png",
    ⵠᐃᐃⲆᐃΔⵠ: "img/night-vulture.png",
    ΔᐃᐃΔᐃⲆⲆ: "img/day-vulture-angry.png",
    ⵠΔΔᐃⵠⵠᐃ: "img/night-vulture-angry.png",
    ⵠᐃⲆᐃⲆΔⲆ: "img/day-vulture-ground.png",
    ᐃⲆⵠΔΔᐃⲆ: "img/night-vulture-ground.png",
    ΔΔⵠᐃⲆⵠⲆ: "img/day-vulture-ground-angry.png",
    ΔΔⲆⵠᐃⵠⲆ: "img/night-vulture-ground-angry.png",
    ᐃᐃᐃⵠΔΔⲆ: "img/day-vulture-wings-left.png",
    ⲆᐃⲆⲆΔᐃΔ: "img/night-vulture-wings-left.png",
    ΔΔⵠΔⵠᐃΔ: "img/day-vulture-wings-right.png",
    ᐃᐃΔⵠΔᐃⲆ: "img/night-vulture-wings-right.png",
    ΔΔᐃⲆᐃΔⲆ: "img/day-vulture-angry-wings-left.png",
    ΔⵠⲆⲆⵠΔⵠ: "img/night-vulture-angry-wings-left.png",
    ⲆΔⲆᐃᐃⵠⲆ: "img/day-vulture-angry-wings-right.png",
    ᐃⲆᐃᐃᐃΔᐃ: "img/night-vulture-angry-wings-right.png",
    ᐃⲆⵠⲆⲆᐃⵠ: "img/day-vulture-wings-left-tamed.png",
    ⵠⵠᐃΔⵠΔⵠ: "img/night-vulture-wings-left-tamed.png",
    ᐃΔΔᐃᐃᐃⵠ: "img/day-vulture-wings-right-tamed.png",
    ᐃΔΔⵠⲆⵠⵠ: "img/night-vulture-wings-right-tamed.png",
    ⵠⵠⵠᐃᐃⵠᐃ: "img/day-vulture-tamed.png",
    ᐃΔΔⲆᐃⲆⲆ: "img/night-vulture-tamed.png",
    ΔᐃΔⲆᐃⲆᐃ: "img/hurt-vulture-ground.png",
    ⲆⵠΔΔᐃⲆᐃ: "img/hurt-vulture.png",
    ᐃⲆⲆΔⲆⵠᐃ: "img/hurt-vulture-wings-left.png",
    ΔᐃⵠⵠᐃⵠΔ: "img/hurt-vulture-wings-right.png",
    ΔⵠⵠᐃᐃⲆΔ: "img/day-aloe-vera.png",
    ⲆᐃⵠᐃⲆᐃⲆ: "img/night-aloe-vera.png",
    ⵠᐃⵠᐃΔⵠⵠ: "img/inv-aloe-vera-out.png",
    ΔⵠΔⵠΔⲆⵠ: "img/inv-aloe-vera-in.png",
    ΔⵠΔΔᐃᐃᐃ: "img/inv-aloe-vera-click.png",
    ΔᐃⵠΔⵠᐃⲆ: "img/day-aloe-vera-grown.png",
    ⲆⲆΔⵠⵠⵠⲆ: "img/night-aloe-vera-grown.png",
    Ⲇⵠᐃᐃⵠᐃⵠ: "img/day-aloe-vera-dried.png",
    ⲆΔΔⵠᐃΔⲆ: "img/night-aloe-vera-dried.png",
    ΔⵠⵠΔⵠⵠΔ: "img/day-turban1.png",
    ⲆⲆᐃⵠᐃⲆⲆ: "img/night-turban1.png",
    ⲆΔᐃⲆΔⵠⵠ: "img/day-turban2.png",
    ΔᐃᐃⲆΔΔⵠ: "img/night-turban2.png",
    ⵠΔⲆⲆⵠᐃᐃ: "img/inv-turban2-out.png",
    ᐃΔᐃᐃⵠᐃⵠ: "img/inv-turban2-in.png",
    ᐃⵠⵠⲆⵠⲆⲆ: "img/inv-turban2-click.png",
    ᐃⲆⵠⵠΔΔᐃ: "img/inv-turban1-out.png",
    ⵠᐃⲆΔᐃⵠᐃ: "img/inv-turban1-in.png",
    ᐃΔᐃⲆΔᐃⵠ: "img/inv-turban1-click.png",
    ᐃᐃᐃⲆΔⲆⲆ: "img/day-pitchfork2.png",
    ᐃΔⵠᐃᐃⵠᐃ: "img/night-pitchfork2.png",
    ⲆᐃᐃⵠΔⵠΔ: "img/inv-pitchfork2-out.png",
    ᐃᐃⵠⵠⵠᐃᐃ: "img/inv-pitchfork2-in.png",
    ⲆⵠΔⲆⲆⲆΔ: "img/inv-pitchfork2-click.png",
    ⲆⵠⵠⲆⲆⵠΔ: "img/inv-gold-fork-click.png",
    ᐃᐃᐃᐃⵠⵠΔ: "img/inv-pilot-glasses-click.png",
    ⲆⵠⲆⵠᐃⲆⵠ: "img/day-pilot-helmet.png",
    ΔⲆΔᐃΔᐃΔ: "img/night-pilot-helmet.png",
    ᐃⵠᐃⵠⵠᐃᐃ: "img/inv-pilot-helmet-out.png",
    ⲆᐃⲆΔΔⵠⵠ: "img/inv-pilot-helmet-in.png",
    ⲆᐃΔⵠⲆᐃⲆ: "img/inv-pilot-helmet-click.png",
    ᐃⲆⲆᐃᐃⲆΔᐃΔ: "img/day-sandworm0.png",
    ΔΔΔⲆᐃⵠⲆ: "img/day-sandworm1.png",
    ᐃⵠΔΔⵠᐃⵠ: "img/day-sandworm2.png",
    ⲆᐃᐃⲆⵠΔⵠⲆⲆ: "img/night-sandworm0.png",
    ΔᐃⲆⲆᐃΔΔ: "img/night-sandworm1.png",
    ᐃΔᐃⲆᐃⲆⵠ: "img/night-sandworm2.png",
    ΔⵠᐃⵠΔᐃⲆ: "img/hurt-sandworm0.png",
    ᐃᐃᐃⲆⲆᐃᐃ: "img/hurt-sandworm1.png",
    ⲆΔΔΔⲆᐃΔ: "img/hurt-sandworm2.png",
    ⲆΔⵠⲆΔ: "img/inv-vulture-feather-click.png",
    ΔΔΔⵠᐃΔᐃ: "img/day-emerald0.png",
    ΔΔΔᐃⵠⲆᐃ: "img/night-emerald0.png",
    ⲆΔⵠⲆΔΔⵠ: "img/day-emerald1.png",
    ᐃΔᐃᐃⲆΔⵠ: "img/night-emerald1.png",
    ⲆⲆᐃᐃⲆⲆΔ: "img/day-emerald2.png",
    ΔⵠⲆᐃΔⲆᐃ: "img/night-emerald2.png",
    ⲆΔⵠⵠⲆ: "img/inv-emerald-click.png",
    ΔⲆⵠⵠΔᐃΔ: "img/inv-sworm-juice-out.png",
    ⵠⵠᐃⲆᐃᐃΔ: "img/inv-sworm-juice-in.png",
    ᐃΔⵠⵠⵠᐃⵠ: "img/inv-sworm-juice-click.png",
    ⲆΔⵠⲆΔⲆᐃ: "img/day-point-machine.png",
    ⵠᐃⵠΔΔΔᐃ: "img/night-point-machine.png",
    ⲆⲆⲆⵠⲆΔⲆ: "img/day-point-machine-hole.png",
    ⵠᐃᐃΔΔΔᐃ: "img/night-point-machine-hole.png",
    ⵠⲆΔΔⵠᐃΔ: "img/day-point-machine-ground.png",
    ΔⲆΔᐃᐃᐃΔ: "img/night-point-machine-ground.png",
    ΔⵠΔΔΔΔⵠ: "img/day-point-machine-rotate.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/night-point-machine-rotate.png",
    ᐃⵠᐃⵠᐃⲆⲆ: "img/inv-point-machine-out.png",
    ΔᐃⲆⲆᐃⲆΔ: "img/inv-point-machine-in.png",
    ᐃᐃΔᐃΔᐃⲆ: "img/inv-point-machine-click.png",
    ⲆⲆⲆⵠΔᐃⵠ: "img/day-extractor-machine0-stone.png",
    ᐃⲆⵠΔⲆᐃΔ: "img/night-extractor-machine0-stone.png",
    ᐃᐃΔⲆⵠΔᐃ: "img/day-extractor-machine-stone.png",
    ⵠᐃᐃΔΔΔΔ: "img/night-extractor-machine-stone.png",
    ΔⲆΔᐃⵠⵠⲆ: "img/inv-extractor-machine-stone-out.png",
    ⵠᐃᐃΔⲆⲆᐃ: "img/inv-extractor-machine-stone-in.png",
    ⲆⲆⵠⵠⵠⲆⵠ: "img/inv-extractor-machine-stone-click.png",
    ΔⲆⵠⲆⲆⲆᐃ: "img/day-extractor-machine0-gold.png",
    ΔⲆᐃΔⲆᐃᐃ: "img/night-extractor-machine0-gold.png",
    ⵠᐃⲆΔⲆⵠⵠ: "img/day-extractor-machine-gold.png",
    ᐃⲆᐃⲆⲆⵠⲆ: "img/night-extractor-machine-gold.png",
    ΔΔΔⲆΔⵠⵠ: "img/inv-extractor-machine-gold-out.png",
    ΔᐃᐃΔⲆΔΔ: "img/inv-extractor-machine-gold-in.png",
    ⵠᐃⲆⵠⲆⵠⵠ: "img/inv-extractor-machine-gold-click.png",
    ⲆⲆᐃⵠΔΔΔ: "img/day-extractor-machine0-diamond.png",
    ΔⲆⲆⵠⵠΔᐃ: "img/night-extractor-machine0-diamond.png",
    ⲆⵠⵠⲆᐃᐃᐃ: "img/day-extractor-machine-diamond.png",
    ᐃⵠΔᐃᐃⲆΔ: "img/night-extractor-machine-diamond.png",
    ⵠⵠΔᐃⵠⲆⵠ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⲆΔⵠⲆᐃⵠ: "img/inv-extractor-machine-diamond-in.png",
    ΔⲆΔⲆⵠⵠⵠ: "img/inv-extractor-machine-diamond-click.png",
    ⲆΔⲆⵠⵠΔⵠ: "img/day-extractor-machine0-amethyst.png",
    ΔΔⲆⲆΔᐃΔ: "img/night-extractor-machine0-amethyst.png",
    ᐃⲆΔⲆⲆΔⲆ: "img/day-extractor-machine-amethyst.png",
    ᐃⵠΔⲆᐃᐃᐃ: "img/night-extractor-machine-amethyst.png",
    ⲆⵠⲆⲆᐃⲆΔ: "img/inv-extractor-machine-amethyst-out.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/inv-extractor-machine-amethyst-in.png",
    ⵠᐃⲆⵠΔⵠⲆ: "img/inv-extractor-machine-amethyst-click.png",
    ⲆⲆΔⲆⲆⲆⲆ: "img/day-extractor-machine0-reidite.png",
    ΔΔⵠⲆᐃΔⲆ: "img/night-extractor-machine0-reidite.png",
    ᐃⲆⲆᐃΔΔΔ: "img/day-extractor-machine-reidite.png",
    ᐃᐃΔⵠⲆⲆⵠ: "img/night-extractor-machine-reidite.png",
    ⵠΔΔΔᐃⵠⲆ: "img/inv-extractor-machine-reidite-out.png",
    ⲆΔⲆΔᐃⲆⵠ: "img/inv-extractor-machine-reidite-in.png",
    ᐃᐃΔᐃᐃΔᐃ: "img/inv-extractor-machine-reidite-click.png",
    ⵠⲆⵠΔⲆⵠⵠ: "img/extractor-cases.png",
    ΔⲆⵠⲆΔⵠⲆ: "img/day-golden-hen.png",
    ⲆᐃⵠΔⵠᐃᐃ: "img/night-golden-hen.png",
    ⵠᐃⲆⵠⵠⵠⲆ: "img/day-golden-chicken.png",
    ᐃᐃΔⵠⲆⲆΔ: "img/night-golden-chicken.png",
    ⵠⲆᐃΔⵠᐃⵠ: "img/hurt-golden-hen.png",
    ΔⲆⵠΔⲆΔΔ: "img/hurt-golden-chicken.png",
    ᐃᐃⲆⵠΔᐃⲆ: "img/logo-interface.png",
    ⵠΔⵠᐃᐃᐃᐃ: "img/forest-mode-hover.png",
    ⲆⵠⵠΔᐃⲆⲆ: "img/normal-mode-hover.png",
    ᐃᐃᐃⵠᐃⲆΔ: "img/vampire-mode-hover.png",
    ᐃᐃⲆΔⵠⲆᐃ: "img/zombie-mode-hover.png",
    ᐃΔᐃΔⵠΔⲆ: "img/community-mode-hover2.png",
    ΔⵠΔⲆΔⲆΔ: "img/experimental-mode-hover.png",
    ⲆⵠⲆⵠᐃΔⵠ: "img/zombie-mode-out.png",
    ᐃⲆⵠᐃⲆⵠΔ: "img/zombie-mode-in.png",
    ᐃᐃΔΔⵠΔᐃ: "img/zombie-mode-click.png",
    ⵠᐃⵠⵠⵠⵠⵠ: "img/vampire-mode-out.png",
    ᐃᐃⵠⲆΔΔᐃ: "img/vampire-mode-in.png",
    ΔΔⲆⵠΔⲆᐃ: "img/vampire-mode-click.png",
    ⵠⲆΔᐃᐃⲆΔ: "img/normal-mode-out.png",
    ᐃᐃΔⵠⲆⵠᐃ: "img/normal-mode-in.png",
    ⵠΔᐃⲆᐃᐃⵠ: "img/normal-mode-click.png",
    ⵠⲆⵠᐃⵠⲆⵠ: "img/forest-mode-out.png",
    ᐃΔⲆΔⵠⵠⲆ: "img/forest-mode-in.png",
    ΔΔⲆΔⲆΔᐃ: "img/forest-mode-click.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/community-mode-out.png",
    ΔⵠⵠⵠⲆᐃⵠ: "img/community-mode-in.png",
    ᐃᐃⲆⲆⲆⵠᐃ: "img/community-mode-click.png",
    ⵠᐃᐃⲆⵠⵠΔ: "img/experimental-modes-out.png",
    Δⵠᐃᐃᐃᐃᐃ: "img/experimental-modes-in.png",
    ΔᐃᐃⲆⵠⲆΔ: "img/experimental-modes-click.png",
    ΔⵠⵠΔⲆⲆⵠ: "img/youtube-button-out.png",
    ⲆΔᐃᐃΔΔⲆ: "img/youtube-button-in.png",
    ΔΔᐃΔⵠᐃⵠ: "img/youtube-button-click.png",
    ΔᐃΔⵠⲆᐃⵠ: "img/wiki-button-out.png",
    ᐃΔⲆⲆⲆΔΔ: "img/wiki-button-in.png",
    ᐃⵠΔᐃΔΔⵠ: "img/wiki-button-click.png",
    ᐃⲆᐃⲆⲆΔΔ: "img/twitter-button-out.png",
    ⵠⲆᐃΔⵠᐃᐃ: "img/twitter-button-in.png",
    ᐃⲆⲆⲆⵠⲆΔ: "img/twitter-button-click.png",
    ᐃⵠΔᐃᐃΔⵠ: "img/facebook-button-out.png",
    ⵠΔⵠΔΔΔΔ: "img/facebook-button-in.png",
    ⵠΔᐃΔΔᐃΔ: "img/facebook-button-click.png",
    ᐃᐃⵠᐃⵠⲆΔ: "img/reddit-button-out.png",
    ΔΔⵠⵠᐃⲆⵠ: "img/reddit-button-in.png",
    ΔⵠⵠⲆΔⵠΔ: "img/reddit-button-click.png",
    ᐃᐃⲆⲆᐃΔᐃ: "img/discord-button-out.png",
    ᐃᐃⵠᐃⵠⲆⲆ: "img/discord-button-in.png",
    ᐃⲆⲆⲆᐃⲆⲆ: "img/discord-button-click.png",
    ⵠΔΔⲆⵠΔΔ: "img/merch-button-out.png",
    ⲆⵠⲆⵠᐃⲆᐃ: "img/merch-button-in.png",
    ⵠᐃⲆΔⵠⵠⵠ: "img/merch-button-click.png",
    ᐃᐃᐃᐃⲆᐃᐃⲆⵠ: "img/terminal-button-out.png",
    ⲆΔᐃⲆΔⵠⲆΔⲆ: "img/terminal-button-in.png",
    ⲆᐃⲆⲆᐃⲆᐃΔⲆ: "img/terminal-button-click.png",
    ⲆⵠΔⲆᐃᐃᐃ: "img/restart-out.png",
    ⲆⲆⲆΔⵠⵠΔ: "img/restart-in.png",
    ΔⵠΔⵠᐃⵠⵠ: "img/restart-click.png",
    ⵠᐃⲆΔΔⲆΔ: "img/guide-out.png",
    ⵠⵠⵠⵠΔᐃΔ: "img/guide-in.png",
    ⵠⵠⲆⵠΔΔⲆ: "img/guide-click.png",
    ⵠⵠⲆⵠᐃⲆᐃ: "img/copy-paste-out.png",
    ᐃⵠΔᐃΔⲆΔ: "img/copy-paste-in.png",
    ⵠᐃΔⲆⵠΔⵠ: "img/copy-paste-click.png",
    ᐃΔⲆⲆⵠⵠᐃ: "img/link-buttons-bg.png",
    ⵠⲆⵠᐃⲆⲆΔ: "img/changelog-box2.png",
    ᐃᐃᐃⵠⵠᐃᐃ: "img/changelog_31.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/banner-taming.png",
    ⲆᐃᐃᐃⲆⵠⵠ: "img/profile-button-out.png",
    ᐃᐃΔΔⲆᐃⲆ: "img/profile-button-in.png",
    ᐃⲆⵠᐃᐃᐃΔ: "img/profile-button-click.png",
    ᐃΔⲆⵠⲆⵠΔ: "img/login-button-out.png",
    ᐃⵠⵠΔⵠⵠⲆ: "img/login-button-in.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/login-button-click.png",
    ⵠᐃⵠᐃᐃΔᐃ: "img/login-google-out.png",
    ΔⲆᐃⵠⵠΔΔ: "img/login-google-in.png",
    ΔᐃΔⲆΔΔΔ: "img/login-google-click.png",
    ⵠⲆⲆⲆⲆᐃᐃ: "img/login-facebook-out.png",
    ΔⲆⵠΔⵠΔᐃ: "img/login-facebook-in.png",
    ᐃᐃᐃⵠⲆⵠⲆ: "img/login-facebook-click.png",
    ⵠⵠⵠΔⲆᐃᐃ: "img/account-box.png",
    ⲆΔⲆⵠᐃⵠᐃⲆΔ: "img/account-under-maintenance.png",
    ΔᐃⲆᐃⵠᐃⲆ: "img/close-button-account-out.png",
    ⲆΔΔΔᐃⲆⲆ: "img/close-button-account-in.png",
    ᐃΔΔᐃΔᐃⲆ: "img/close-button-account-click.png",
    ᐃᐃⲆᐃᐃⵠⵠ: "img/play-button-out.png",
    ᐃⲆⵠΔᐃⲆⵠ: "img/play-button-in.png",
    ΔⵠⲆᐃⵠΔⲆ: "img/play-button-click.png",
    ᐃⲆⲆⲆⵠⵠⲆⵠᐃ: "img/app-store-badge.png",
    ᐃᐃᐃⲆᐃⲆⲆⵠᐃ: "img/play-store-badge.png",
    ᐃᐃΔᐃΔⲆⵠΔⵠ: "img/mobile-boxad.png",
    ᐃΔᐃⲆᐃⲆᐃ: "img/modify-name-out.png",
    ᐃᐃΔⲆⵠΔⲆ: "img/modify-name-in.png",
    ⲆⵠⲆⵠⲆⲆⵠ: "img/modify-name-click.png",
    ΔΔᐃᐃΔᐃᐃ: "img/copy-id-button-out.png",
    ᐃΔⵠᐃⲆⲆᐃ: "img/copy-id-button-hover.png",
    ⵠⲆⵠⲆᐃⲆⵠ: "img/copy-id-button-active.png",
    ⵠᐃⵠⵠΔΔᐃ: "img/yes-button-out.png",
    ⲆⲆᐃⵠⵠᐃⲆ: "img/yes-button-in.png",
    ⵠΔᐃⵠΔᐃⲆ: "img/yes-button-click.png",
    ᐃⲆᐃΔΔⲆⵠ: "img/yes-300-button-out.png",
    ᐃⵠᐃΔΔⵠΔ: "img/yes-300-button-in.png",
    ⵠⲆⵠⲆⵠⵠΔ: "img/yes-300-button-click.png",
    ⲆⵠᐃⵠⲆⲆⲆ: "img/no-button-out.png",
    ᐃⲆⲆⵠⵠΔᐃ: "img/no-button-in.png",
    ⵠΔΔΔΔᐃⲆ: "img/no-button-click.png",
    ΔⵠᐃΔⲆᐃΔ: "img/no-thanks-button-out.png",
    ⵠⵠΔᐃΔᐃΔ: "img/no-thanks-button-in.png",
    ΔᐃⵠΔΔⵠΔ: "img/no-thanks-button-click.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/shop-button-out.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/shop-button-in.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/shop-button-click.png",
    ⵠⲆᐃⲆᐃⵠᐃ: "img/logout-out.png",
    ⲆᐃⲆΔⲆᐃΔ: "img/logout-in.png",
    ΔΔΔΔΔΔⲆ: "img/logout-click.png",
    ΔᐃᐃΔᐃⵠᐃ: "img/terms-button-out.png",
    ᐃᐃᐃΔⵠᐃΔ: "img/terms-button-in.png",
    ΔΔⲆΔΔΔᐃ: "img/terms-button-click.png",
    ᐃᐃᐃᐃⲆΔⲆ: "img/tutorial-icon.png",
    ⵠᐃⵠΔⵠⲆⲆ: "img/skins-icon.png",
    ⲆⵠⲆᐃⲆⵠⵠ: "img/shop-icon.png",
    ᐃΔⵠΔΔⲆⲆᐃΔ: "img/paint-icon.png",
    ΔΔᐃⵠΔΔⵠ: "img/leaderboard-icon.png",
    ⵠΔΔⲆΔⲆᐃ: "img/start-icon.png",
    ΔΔᐃᐃⵠᐃⲆ: "img/profile-icon.png",
    ⲆⲆⵠⲆⵠᐃⵠ: "img/server-access-icon2.png",
    ⵠⲆᐃⲆⲆⲆⲆ: "img/button-homepage-bg-out.png",
    ⲆΔⲆΔⵠⲆⵠ: "img/button-homepage-bg-in.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/button-homepage-bg-click.png",
    ΔⵠΔΔᐃᐃⵠ: "img/button-bottom-homepage-bg-out.png",
    ᐃⲆΔⲆⲆⵠᐃ: "img/button-bottom-homepage-bg-in.png",
    ⲆⵠⵠΔᐃⵠΔ: "img/button-bottom-homepage-bg-click.png",
    ᐃᐃΔᐃⲆᐃⲆ: "img/lvl-player.png",
    ᐃᐃⵠⵠⲆⵠᐃ: "img/avatar-player.png",
    ΔⵠⵠΔΔⲆⵠ: "img/avatar-player1.png",
    ᐃΔⵠΔᐃΔᐃ: "img/avatar-player2.png",
    ΔⵠΔΔᐃⵠⵠ: "img/avatar-player3.png",
    ⵠᐃⵠᐃΔΔΔ: "img/avatar-player4.png",
    ⵠⲆᐃⲆⵠⵠΔ: "img/avatar-player5.png",
    ⲆⲆΔΔⲆΔⵠ: "img/avatar-player6.png",
    ⲆⵠΔᐃΔⲆΔ: "img/avatar-player7.png",
    ⵠⲆⵠⲆΔΔᐃ: "img/avatar-player8.png",
    ΔⲆΔⲆᐃΔᐃ: "img/avatar-player9.png",
    ⵠᐃⵠⵠΔΔⲆ: "img/avatar-player10.png",
    ⲆΔΔⲆΔᐃⵠ: "img/avatar-player11.png",
    ⲆᐃⲆⵠᐃⲆᐃ: "img/avatar-player12.png",
    ᐃⲆⲆᐃΔⲆⲆ: "img/avatar-player13.png",
    ⵠⵠⵠΔⵠⵠⲆ: "img/avatar-player14.png",
    ⵠᐃΔⲆΔⲆΔ: "img/avatar-player14.png",
    ᐃⲆⵠΔⲆⲆᐃ: "img/avatar-player14.png",
    ⵠΔΔⲆΔⲆⲆ: "img/avatar-player14.png",
    ᐃΔⲆᐃⵠᐃⵠⲆᐃ: "img/golden-bread.png",
    ⵠⲆΔⲆᐃᐃⲆ: "img/buy-bread-out.png",
    ᐃΔᐃΔⵠᐃⵠ: "img/buy-bread-in.png",
    ⲆⵠⲆΔᐃᐃⲆ: "img/buy-bread-click.png",
    ⵠⲆⵠᐃⲆΔⵠ: "img/gauge.png",
    ⲆⵠΔᐃΔΔΔᐃΔ: "img/season-4-out.png",
    ⵠⲆⵠᐃⵠⲆⲆΔⲆ: "img/season-4-in.png",
    ᐃⲆⵠᐃᐃⵠⲆᐃⲆ: "img/season-4-click.png",
    ⵠΔΔᐃᐃⵠⵠᐃΔ: "img/season4-box.png",
    ᐃᐃᐃⲆⵠᐃΔⵠⵠ: "img/season-5-out.png",
    ΔᐃⵠⵠⲆⵠᐃᐃⲆ: "img/season-5-in.png",
    ᐃΔⵠᐃᐃⵠΔᐃⲆ: "img/season-5-click.png",
    ⵠⲆᐃⵠᐃᐃⲆΔⲆ: "img/season5-box.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/season-6-out.png",
    ΔΔᐃⲆⵠᐃⵠ: "img/season-6-in.png",
    ᐃΔⵠᐃΔⲆΔ: "img/season-6-click.png",
    ⲆᐃⲆⲆⲆᐃⵠ: "img/season6-box.png",
    ⵠⵠΔΔⲆⵠΔ: "img/profile3-box.png",
    ⵠᐃⲆⲆⵠⲆᐃ: "img/skins-box.png",
    ⵠΔⲆᐃⵠΔΔ: "img/shop-box.png",
    ΔⵠⵠᐃⲆⲆᐃᐃᐃ: "img/private-server-box.png",
    ᐃⲆⲆⵠΔⵠⲆ: "img/location-box.png",
    ΔᐃᐃΔΔᐃⲆ: "img/server-duration-box.png",
    ⲆΔⵠⵠᐃⲆⵠ: "img/tutorial-box.png",
    ⵠΔᐃΔⲆΔⲆ: "img/leaderboard2-box.png",
    ⵠⲆᐃᐃᐃⵠⲆ: "img/buy-breads-box.png",
    ⲆᐃΔⵠᐃᐃⲆ: "img/bag-box.png",
    ⲆⵠⵠⲆΔΔⵠ: "img/deadbox-box.png",
    ⲆΔⵠᐃⵠΔᐃ: "img/book-box.png",
    ΔΔᐃⲆⵠⲆⵠ: "img/accessories-box.png",
    ⲆΔⲆⲆⲆᐃⲆ: "img/customskin-box.png",
    ᐃⲆⵠᐃΔᐃΔ: "img/bag-lasts.png",
    ᐃⵠⵠⵠⲆΔΔ: "img/server-lasts.png",
    ᐃᐃΔⲆᐃⵠⵠ: "img/server-access-box3.png",
    ⲆⵠⲆᐃᐃⲆⲆ: "img/lootbox-box.png",
    ⲆⵠᐃⲆΔᐃⵠ: "img/change-nickname0.png",
    ΔⲆΔᐃⵠⲆⲆ: "img/change-nickname1.png",
    ⲆⲆΔⵠⵠΔⲆ: "img/cheating-box.png",
    ΔⵠΔΔⲆⲆΔⵠᐃ: "img/daily-quest-box.png",
    ⲆⲆⵠⲆᐃΔⲆⲆⲆ: "img/daily-5-bread.png",
    ⵠᐃⵠΔⵠᐃⲆᐃⵠ: "img/daily-10-bread.png",
    ⲆΔΔΔᐃᐃⵠⵠᐃ: "img/daily-valid.png",
    ⵠⵠᐃⵠᐃᐃᐃ: "img/normal-profile-out.png",
    ⲆΔⲆⵠᐃᐃᐃ: "img/normal-profile-in.png",
    ⵠⲆΔΔᐃⲆΔ: "img/normal-profile-click.png",
    ΔⵠᐃⵠᐃΔⲆ: "img/forest-profile-out.png",
    ΔⵠⲆⵠⵠⲆⵠ: "img/forest-profile-in.png",
    ᐃⵠⲆΔⵠΔⵠ: "img/forest-profile-click.png",
    ⵠⲆᐃΔΔⲆΔ: "img/zombie-profile-out.png",
    ΔⲆᐃⵠᐃⲆᐃ: "img/zombie-profile-in.png",
    ⵠⵠΔΔⵠΔⲆ: "img/zombie-profile-click.png",
    ᐃⵠⲆΔΔⲆⲆ: "img/vampire-profile-out.png",
    ΔⲆΔᐃⵠⵠᐃ: "img/vampire-profile-in.png",
    ᐃⵠΔⵠⲆⵠᐃ: "img/vampire-profile-click.png",
    ᐃⵠⲆⲆⵠᐃᐃ: "img/total-profile-out.png",
    ⲆΔΔⵠᐃᐃᐃ: "img/total-profile-in.png",
    ΔⲆⲆᐃᐃΔΔ: "img/total-profile-click.png",
    ⵠΔⵠΔⲆΔᐃ: "img/season1-out.png",
    ⲆⲆΔⲆⲆⵠⵠ: "img/season1-in.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/season1-click.png",
    ᐃᐃⲆᐃⵠⵠⵠ: "img/season2-out.png",
    ⲆᐃⵠΔΔⲆⵠ: "img/season2-in.png",
    ⵠⵠⵠᐃΔⲆᐃ: "img/season2-click.png",
    ᐃᐃΔᐃⵠⵠΔ: "img/season3-out.png",
    ⲆⵠΔᐃⲆΔᐃ: "img/season3-in.png",
    ᐃⵠⵠⵠⲆΔⲆ: "img/season3-click.png",
    ⲆΔⲆΔᐃⵠⲆ: "img/season4-out.png",
    ⵠᐃΔⲆⵠΔᐃ: "img/season4-in.png",
    ⲆᐃⵠⲆΔⵠᐃ: "img/season4-click.png",
    ⵠⵠⵠᐃΔⵠⲆ: "img/season5-out.png",
    ⲆΔⵠΔⵠᐃᐃ: "img/season5-in.png",
    ⵠΔⵠⵠΔᐃⲆ: "img/season5-click.png",
    ⵠⲆⲆΔΔⲆΔ: "img/season6-out.png",
    ⲆⵠⵠⵠⵠΔΔ: "img/season6-in.png",
    ⵠᐃΔⵠⲆΔΔ: "img/season6-click.png",
    ᐃⲆⲆΔΔᐃⲆ: "img/locked-skin-alert.png",
    ⲆᐃΔⵠᐃⵠⲆ: "img/locked-custom-alert.png",
    ΔΔⵠΔᐃΔᐃ: "img/bg-red-locked.png",
    ᐃΔᐃⵠⲆⵠΔ: "img/skin-button-out.png",
    ⲆⲆⵠΔᐃΔΔ: "img/skin-button-in.png",
    ΔⵠᐃΔΔⲆⲆ: "img/skin-button-click.png",
    ΔⲆⵠᐃⲆᐃⵠ: "img/accessory-button-out.png",
    ⵠᐃⲆᐃⲆⵠΔ: "img/accessory-button-in.png",
    ⵠΔᐃᐃⲆⵠⲆ: "img/accessory-button-click.png",
    ⲆΔⲆᐃⵠⲆⲆ: "img/bag-button-out.png",
    ⵠᐃⲆΔΔⵠⲆ: "img/bag-button-in.png",
    ΔⵠⲆᐃΔΔⵠ: "img/bag-button-click.png",
    ⵠΔⵠᐃⵠΔⲆ: "img/book-button-out.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/book-button-in.png",
    ⲆΔΔⵠᐃᐃⲆ: "img/book-button-click.png",
    ᐃⲆΔⵠⲆⲆⵠ: "img/deadbox-button-out.png",
    ᐃⵠᐃᐃᐃᐃⲆ: "img/deadbox-button-in.png",
    ΔᐃΔᐃⵠᐃⲆ: "img/deadbox-button-click.png",
    ⲆⲆⵠᐃⲆⲆⵠ: "img/loot-button-out.png",
    ΔⲆⵠⲆⵠΔⵠ: "img/loot-button-in.png",
    ΔⲆᐃⵠᐃⵠⲆ: "img/loot-button-click.png",
    ⵠᐃⵠⲆⲆⲆᐃ: "img/free-item-out.png",
    ᐃΔΔⵠᐃⲆⵠ: "img/free-item-in.png",
    ⲆⲆᐃᐃΔΔΔ: "img/free-item-click.png",
    ⲆⲆⵠΔ: "img/wood-item-out.png",
    ⵠⲆᐃⵠ: "img/wood-item-in.png",
    ΔΔᐃⵠ: "img/wood-item-click.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/stone-item.png",
    ΔⵠᐃᐃΔⵠᐃ: "img/stone-item-in.png",
    ᐃⲆᐃⲆⵠⲆⲆ: "img/stone-item-click.png",
    ⵠΔⵠⲆⲆΔΔ: "img/gold-item.png",
    ΔᐃⲆᐃΔⲆΔ: "img/gold-item-in.png",
    ΔΔⵠⲆⵠⵠⲆ: "img/gold-item-click.png",
    ⵠΔᐃⲆⵠⵠⲆ: "img/diamond-item.png",
    ⲆᐃΔᐃⲆΔᐃ: "img/diamond-item-in.png",
    ΔⵠᐃⵠᐃᐃΔ: "img/diamond-item-click.png",
    ⲆΔⵠⵠᐃΔⵠ: "img/amethyst-item.png",
    ⵠⵠΔⲆⵠΔΔ: "img/amethyst-item-in.png",
    ⲆⲆⲆⵠⵠᐃⵠ: "img/amethyst-item-click.png",
    ⵠⵠΔΔⲆᐃᐃ: "img/reidite-item.png",
    ΔᐃⲆⵠΔΔⵠ: "img/reidite-item-in.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/reidite-item-click.png",
    ⵠⵠᐃᐃᐃᐃΔ: "img/special-item-out.png",
    ΔᐃΔᐃⵠⲆΔ: "img/special-item-in.png",
    ΔΔⲆⵠᐃΔΔ: "img/special-item-click.png",
    ᐃᐃⵠⵠⲆⲆⲆ: "img/level-item-out.png",
    ᐃⵠΔⵠⲆⲆⵠ: "img/level-item-in.png",
    ⵠᐃΔΔᐃᐃⵠ: "img/level-item-click.png",
    ΔᐃⲆⲆΔᐃⲆ: "img/skin-previous-out.png",
    ᐃᐃⵠΔᐃᐃⲆ: "img/skin-previous-in.png",
    ⲆⵠΔᐃⲆΔΔ: "img/skin-previous-click.png",
    ⵠⲆΔᐃᐃᐃΔ: "img/skin-next-out.png",
    ⲆⵠΔⵠᐃΔⲆ: "img/skin-next-in.png",
    ΔΔⵠⲆΔⲆⵠ: "img/skin-next-click.png",
    ΔΔⵠΔⲆ: "img/back-button-out.png",
    ⵠᐃΔⲆⲆ: "img/back-button-in.png",
    ΔΔⵠⲆΔ: "img/back-button-click.png",
    ᐃⵠᐃᐃᐃⵠⲆ: "img/get-more-button-out.png",
    ⵠᐃᐃΔᐃᐃⲆ: "img/get-more-button-in.png",
    ΔⵠΔⵠᐃᐃⲆ: "img/get-more-button-click.png",
    ⲆⵠⵠⲆᐃⲆⲆ: "img/currency1-out.png",
    ᐃⲆᐃⲆⵠⵠΔ: "img/currency1-in.png",
    ᐃⵠΔⲆⲆᐃⲆ: "img/currency1-click.png",
    ⲆⲆⵠⵠΔⵠⲆ: "img/currency2-out.png",
    ⵠΔⲆΔᐃᐃᐃ: "img/currency2-in.png",
    ΔⲆᐃⵠᐃΔⵠ: "img/currency2-click.png",
    ΔᐃⲆⲆⵠΔⵠ: "img/currency3-out.png",
    ᐃⲆᐃᐃᐃᐃᐃ: "img/currency3-in.png",
    ⵠΔᐃⵠⲆΔⲆ: "img/currency3-click.png",
    ⲆⵠΔᐃⵠᐃⲆ: "img/currency4-out.png",
    ΔⵠⲆΔⵠⲆⵠ: "img/currency4-in.png",
    ⵠⵠⲆⵠⵠⲆᐃ: "img/currency4-click.png",
    ᐃⲆΔⲆⵠⲆᐃ: "img/currency5-out.png",
    ᐃⵠᐃΔᐃΔᐃ: "img/currency5-in.png",
    ⲆᐃⵠΔⲆΔΔ: "img/currency5-click.png",
    ΔᐃⵠⵠⲆⵠⲆ: "img/price1-out.png",
    ΔⵠΔⵠᐃⵠᐃ: "img/price1-in.png",
    ⵠᐃⵠⵠΔᐃΔ: "img/price1-click.png",
    ΔⲆⲆΔⲆᐃΔ: "img/price2-out.png",
    ⲆⵠᐃⲆⵠⵠⲆ: "img/price2-in.png",
    ᐃⲆᐃΔⲆΔⲆ: "img/price2-click.png",
    ⲆⲆⵠᐃⵠᐃΔ: "img/price3-out.png",
    ⵠᐃⵠΔⵠᐃΔ: "img/price3-in.png",
    ᐃⵠᐃΔᐃⵠΔ: "img/price3-click.png",
    Δⵠⵠⵠᐃᐃⵠ: "img/price4-out.png",
    ⲆΔΔⵠΔⲆᐃ: "img/price4-in.png",
    ⵠⲆⵠᐃⵠⵠⲆ: "img/price4-click.png",
    ΔᐃΔⵠᐃⲆⲆ: "img/price5-out.png",
    ΔⲆΔⲆⲆΔⲆ: "img/price5-in.png",
    ⵠⲆΔᐃΔⲆⵠ: "img/price5-click.png",
    ᐃΔⲆⲆⲆΔΔᐃⲆ: "img/buy-private-server-out.png",
    ΔⲆΔⵠⲆΔⵠⵠΔ: "img/buy-private-server-in.png",
    ΔᐃΔΔΔⲆᐃⲆⵠ: "img/buy-private-server-click.png",
    ⵠᐃⵠᐃⲆᐃᐃ: "img/atlanta-button-out.png",
    ⲆⲆᐃΔⲆᐃΔ: "img/atlanta-button-in.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/atlanta-button-click.png",
    ΔⵠᐃⵠⲆᐃᐃ: "img/los-angeles-button-out.png",
    ⲆⲆⵠⵠΔᐃⵠ: "img/los-angeles-button-in.png",
    ΔᐃⲆⲆⵠΔᐃ: "img/los-angeles-button-click.png",
    ⲆⵠΔⲆⲆΔΔ: "img/sydney-button-out.png",
    ΔΔΔⵠᐃΔⵠ: "img/sydney-button-in.png",
    ⲆⵠᐃⲆⵠΔⵠ: "img/sydney-button-click.png",
    ⲆⲆΔᐃⵠᐃᐃ: "img/frankfurt-button-out.png",
    ᐃᐃⵠΔⲆⵠΔ: "img/frankfurt-button-in.png",
    ᐃⵠⵠⲆⲆΔⵠ: "img/frankfurt-button-click.png",
    ⲆⲆᐃΔᐃᐃᐃ: "img/osaka-button-out.png",
    ᐃⵠΔᐃⵠᐃⵠ: "img/osaka-button-in.png",
    ⲆΔⵠⲆᐃⲆⲆ: "img/osaka-button-click.png",
    ΔⵠⲆᐃᐃΔⵠⲆⵠ: "img/yes-location-out.png",
    ⲆᐃⲆⲆᐃⵠⵠⲆⵠ: "img/yes-location-in.png",
    ᐃⲆⵠᐃΔⵠⵠᐃᐃ: "img/yes-location-click.png",
    ⵠⲆᐃⲆⵠΔΔ: "img/3days-button-out.png",
    ᐃΔᐃⵠᐃⵠΔ: "img/3days-button-in.png",
    ⵠΔΔΔⵠⲆΔ: "img/3days-button-click.png",
    ⵠΔᐃⲆᐃΔⲆ: "img/7days-button-out.png",
    ⲆΔⲆᐃΔᐃᐃ: "img/7days-button-in.png",
    ᐃⲆⵠᐃⵠⵠΔ: "img/7days-button-click.png",
    ᐃⲆΔᐃΔᐃⵠ: "img/30days-button-out.png",
    ΔⵠᐃΔⵠΔⵠ: "img/30days-button-in.png",
    ⵠⲆᐃΔⲆⵠΔ: "img/30days-button-click.png",
    ᐃⲆⵠᐃⵠᐃⲆ: "img/90days-button-out.png",
    ⲆΔᐃᐃⵠΔⵠ: "img/90days-button-in.png",
    ᐃᐃΔΔᐃⵠⲆ: "img/90days-button-click.png",
    ΔΔⲆΔᐃᐃⲆ: "img/spin1.png",
    ⲆⵠΔⲆⵠⲆⵠ: "img/spin2.png",
    ᐃⲆⵠⵠΔⲆⵠ: "img/spin3.png",
    ⵠⲆΔⵠⲆᐃⵠ: "img/spin4.png",
    ᐃⵠⵠΔᐃᐃᐃ: "img/spin5.png",
    ᐃⲆⲆⵠᐃⲆΔ: "img/spin6.png",
    ⲆΔⲆⲆᐃⲆΔ: "img/arrow-spin.png",
    ᐃⵠⵠᐃᐃⲆⲆ: "img/spin-button-1-out.png",
    ᐃᐃᐃΔⵠⵠᐃ: "img/spin-button-1-in.png",
    ⵠⵠⲆⵠΔⲆⵠ: "img/spin-button-1-click.png",
    ⲆⵠⵠΔΔᐃᐃ: "img/spin-button-2-out.png",
    ⵠΔΔᐃΔⲆᐃ: "img/spin-button-2-in.png",
    ᐃⲆΔⵠΔⵠᐃ: "img/spin-button-2-click.png",
    ΔᐃΔⲆⵠᐃⵠ: "img/spin-button-3-out.png",
    ⲆᐃΔΔⵠⲆⵠ: "img/spin-button-3-in.png",
    ᐃΔⵠᐃⲆΔᐃ: "img/spin-button-3-click.png",
    ⵠⵠⲆⲆⲆᐃⲆ: "img/spin-button-4-out.png",
    ΔΔᐃⲆⲆΔᐃ: "img/spin-button-4-in.png",
    ΔΔᐃᐃⵠⵠⲆ: "img/spin-button-4-click.png",
    ⲆᐃⲆΔᐃΔᐃ: "img/spin-button-5-out.png",
    ΔᐃᐃᐃΔᐃⲆ: "img/spin-button-5-in.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/spin-button-5-click.png",
    ΔᐃⵠⵠΔⵠⵠ: "img/spin-light.png",
    ΔᐃᐃΔΔᐃᐃ: "img/tuto-wiki-out.png",
    ΔⲆᐃΔΔⵠᐃ: "img/tuto-wiki-in.png",
    ⵠⲆⵠΔⵠⵠⵠ: "img/tuto-wiki-click.png",
    ᐃⲆΔⵠⵠⵠⲆ: "img/tuto-previous-out.png",
    ⵠΔⲆΔᐃⲆᐃ: "img/tuto-previous-in.png",
    ᐃᐃⵠΔⵠⵠΔ: "img/tuto-previous-click.png",
    ΔⵠⲆⵠᐃΔᐃ: "img/tuto-next-out.png",
    ⵠⲆⲆΔΔⲆⵠ: "img/tuto-next-in.png",
    ⲆⵠᐃΔⲆᐃᐃ: "img/tuto-next-click.png",
    ⲆΔⲆⲆΔΔᐃ: "img/time-leaderboard-out.png",
    ΔⵠΔⵠΔΔΔ: "img/time-leaderboard-in.png",
    ⲆΔⵠΔᐃᐃⲆ: "img/time-leaderboard-click.png",
    ⲆⵠⵠⵠᐃΔⵠ: "img/score-leaderboard-out.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/score-leaderboard-in.png",
    ᐃΔᐃΔⲆᐃⵠ: "img/score-leaderboard-click.png",
    ⲆΔᐃᐃⲆᐃᐃ: "img/lvl-leaderboard-out.png",
    ⲆⵠΔⵠⲆⲆⲆ: "img/lvl-leaderboard-in.png",
    ⵠⵠΔΔᐃⲆᐃ: "img/lvl-leaderboard-click.png",
    ΔⵠΔᐃᐃⲆⵠ: "img/kill-leaderboard-out.png",
    ⲆⲆᐃⲆⵠⵠⵠ: "img/kill-leaderboard-in.png",
    ᐃⵠⵠⵠᐃⲆᐃ: "img/kill-leaderboard-click.png",
    ⲆᐃΔΔⲆΔᐃ: "img/all-leaderboard-out.png",
    Δᐃⵠⵠᐃᐃᐃ: "img/all-leaderboard-in.png",
    ΔΔΔΔᐃᐃᐃ: "img/all-leaderboard-click.png",
    ⵠΔⲆⵠΔⲆΔ: "img/today-leaderboard-out.png",
    ᐃᐃΔΔⲆⲆⵠ: "img/today-leaderboard-in.png",
    ΔΔⲆΔⲆⵠⲆ: "img/today-leaderboard-click.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/week-leaderboard-out.png",
    ⲆⵠᐃⵠⲆⲆΔ: "img/week-leaderboard-in.png",
    ⲆΔⵠⵠᐃⲆⲆ: "img/week-leaderboard-click.png",
    ⲆΔⲆⲆᐃⲆᐃ: "img/season1-out.png",
    ΔⵠᐃⲆᐃⲆᐃ: "img/season1-in.png",
    ⵠⲆᐃᐃΔⲆⲆ: "img/season1-click.png",
    ᐃⲆᐃΔⵠⵠⲆ: "img/season2-out.png",
    ᐃᐃᐃⵠΔᐃΔ: "img/season2-in.png",
    ⲆΔⲆᐃΔΔⵠ: "img/season2-click.png",
    ⲆⵠᐃᐃⵠΔⲆ: "img/season3-out.png",
    ΔΔᐃⵠⵠᐃⲆ: "img/season3-in.png",
    ΔⵠᐃⲆⲆⵠᐃ: "img/season3-click.png",
    ΔⵠⲆⵠᐃᐃΔ: "img/season4-out.png",
    ᐃᐃⲆⲆⵠⲆΔ: "img/season4-in.png",
    ⵠⲆΔⲆⵠΔΔ: "img/season4-click.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/season5-out.png",
    ⲆΔᐃᐃⲆⵠΔ: "img/season5-in.png",
    ΔΔΔⵠⵠᐃⵠ: "img/season5-click.png",
    ⲆᐃⲆΔⲆⲆΔ: "img/season6-out.png",
    ΔᐃⲆᐃⲆⵠⲆ: "img/season6-in.png",
    ⲆⵠⲆΔⲆⵠᐃ: "img/season6-click.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/total-lead-out.png",
    ΔᐃⵠⵠΔⲆⲆ: "img/total-lead-in.png",
    ⵠⲆΔΔᐃΔⲆ: "img/total-lead-click.png",
    Δᐃᐃᐃⵠⵠⵠ: "img/normal-lead-out.png",
    ⵠⲆⲆᐃᐃᐃⵠ: "img/normal-lead-in.png",
    ⵠᐃⲆᐃⲆⵠᐃ: "img/normal-lead-click.png",
    ᐃΔΔⲆᐃΔⵠ: "img/forest-lead-out.png",
    ⵠⲆᐃᐃΔᐃⲆ: "img/forest-lead-in.png",
    ⲆΔⵠⲆΔᐃⵠ: "img/forest-lead-click.png",
    ⵠΔᐃᐃΔⵠᐃ: "img/vampire-lead-out.png",
    ΔᐃΔⵠᐃᐃᐃ: "img/vampire-lead-in.png",
    ⲆⲆᐃⵠⲆⵠᐃ: "img/vampire-lead-click.png",
    ᐃⲆΔᐃⲆⵠⵠ: "img/zombie-lead-out.png",
    ΔⲆⲆⵠⵠⲆⵠ: "img/zombie-lead-in.png",
    ⵠΔⲆΔΔⵠⵠ: "img/zombie-lead-click.png",
    ⲆᐃⲆⲆᐃⵠᐃ: "img/day-level5.png",
    ⵠᐃΔⲆⲆⵠⲆ: "img/night-level5.png",
    ⲆⵠⲆΔᐃⵠᐃ: "img/day-level10.png",
    ΔᐃΔᐃᐃΔΔ: "img/night-level10.png",
    ⵠⲆΔⵠΔⲆΔ: "img/day-level15.png",
    ᐃⲆⲆⵠⲆⵠⲆ: "img/night-level15.png",
    ⲆⲆΔⵠⲆΔΔ: "img/day-level20.png",
    ΔⲆΔⵠⲆⵠⲆ: "img/night-level20.png",
    ΔⲆΔⵠᐃⲆᐃ: "img/day-level25.png",
    ΔΔⲆΔⲆⲆΔ: "img/night-level25.png",
    ΔⵠᐃⲆⲆⲆⵠ: "img/day-level30.png",
    ⲆΔᐃⲆᐃᐃΔ: "img/night-level30.png",
    ᐃΔⲆᐃᐃⵠΔ: "img/day-level35.png",
    ⵠᐃᐃΔᐃⵠⵠ: "img/night-level35.png",
    ⲆᐃΔⵠⵠΔᐃ: "img/day-level40.png",
    ⲆⵠⵠᐃΔᐃᐃ: "img/night-level40.png",
    ⵠΔᐃⵠⵠᐃⵠ: "img/day-level45.png",
    ⵠⵠⲆⵠᐃΔⵠ: "img/night-level45.png",
    ΔⵠΔΔⲆⵠⵠ: "img/day-level50.png",
    ᐃⵠⵠΔⲆᐃΔ: "img/night-level50.png",
    ⵠⲆᐃΔΔΔΔ: "img/day-level55.png",
    ⲆΔΔᐃⲆΔⲆ: "img/night-level55.png",
    ΔᐃΔΔⵠΔⵠ: "img/day-level60.png",
    ΔᐃΔΔⵠᐃⲆ: "img/night-level60.png",
    ᐃΔᐃᐃᐃᐃⲆ: "img/day-skin-devast0.png",
    ⵠⲆⵠⲆⲆᐃⲆ: "img/night-skin-devast0.png",
    ⵠⲆⲆΔΔᐃᐃ: "img/day-hand-devaster.png",
    ᐃΔⲆⲆΔᐃᐃ: "img/night-hand-devaster.png",
    ⲆΔΔⵠᐃⲆⵠ: "img/day-skin-star0.png",
    ⲆⲆⵠΔΔⲆΔ: "img/night-skin-star0.png",
    ⲆᐃⲆⲆⵠΔᐃ: "img/day-hand-star0.png",
    ᐃⵠΔⵠⲆΔΔ: "img/night-hand-star0.png",
    ⲆᐃⲆΔᐃΔΔ: "img/day-vampire.png",
    ⲆΔΔᐃⲆΔᐃ: "img/night-vampire.png",
    ᐃⵠⲆⵠᐃΔⵠ: "img/day-hand-vampire.png",
    ᐃᐃⵠᐃⵠⵠΔ: "img/night-hand-vampire.png",
    ⲆᐃᐃᐃⲆⵠᐃ: "img/day-zombie.png",
    ⵠᐃΔΔΔⲆΔ: "img/night-zombie.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/day-hand-zombie.png",
    ΔᐃᐃΔⵠⲆᐃ: "img/night-hand-zombie.png",
    ᐃⲆᐃⵠⵠⲆΔ: "img/day-skin113.png",
    ⲆΔᐃⲆᐃΔⲆ: "img/night-skin113.png",
    ⲆᐃⲆⵠⵠⵠᐃ: "img/day-hand-skin113.png",
    ⲆⲆⵠΔⵠᐃⵠ: "img/night-hand-skin113.png",
    ⲆΔⵠΔᐃΔⵠ: "img/day-skin0.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/night-skin0.png",
    ᐃⵠⲆⲆΔΔⵠ: "img/day-skin1.png",
    ⵠᐃⵠΔⵠⲆΔ: "img/night-skin1.png",
    ⲆΔⵠΔᐃᐃᐃ: "img/day-skin2.png",
    ΔⲆΔΔⵠⲆΔ: "img/night-skin2.png",
    ΔΔⵠⲆⲆⵠᐃ: "img/day-skin3.png",
    ᐃⵠⵠⲆᐃⵠΔ: "img/night-skin3.png",
    ᐃⵠⲆᐃⲆⲆⵠ: "img/day-skin4.png",
    ⲆⲆⵠⵠΔⲆⵠ: "img/night-skin4.png",
    ⲆⲆⵠᐃᐃⵠⲆ: "img/day-skin5.png",
    ΔⲆⲆⵠᐃⵠⲆ: "img/night-skin5.png",
    ⵠΔᐃᐃᐃΔᐃ: "img/day-skin6.png",
    ⲆⲆⲆⵠᐃⲆᐃ: "img/night-skin6.png",
    ᐃΔΔΔᐃΔⵠ: "img/day-skin7.png",
    ⵠΔᐃΔᐃⲆⵠ: "img/night-skin7.png",
    ⵠⵠΔΔᐃᐃⲆ: "img/day-skin8.png",
    ᐃΔᐃⵠᐃᐃⵠ: "img/night-skin8.png",
    ΔⵠⲆᐃΔΔΔ: "img/day-skin9.png",
    ΔΔⵠΔΔⲆΔ: "img/night-skin9.png",
    ΔⲆⲆⲆⵠⲆⲆ: "img/day-skin10.png",
    ⵠⲆΔΔᐃᐃᐃ: "img/night-skin10.png",
    ᐃΔᐃΔᐃⲆᐃ: "img/day-skin11.png",
    ⵠᐃⲆⲆⲆⲆⵠ: "img/night-skin11.png",
    ΔᐃⲆᐃΔΔᐃ: "img/day-skin12.png",
    ⵠΔΔⵠⵠⵠΔ: "img/night-skin12.png",
    ΔΔⲆⵠⲆΔⵠ: "img/day-skin13.png",
    ΔⲆⵠⵠⵠᐃᐃ: "img/night-skin13.png",
    ᐃᐃΔᐃΔⲆⲆ: "img/day-skin14.png",
    ᐃⵠⵠⲆⵠⲆᐃ: "img/night-skin14.png",
    ΔⵠΔⲆΔᐃᐃ: "img/day-skin15.png",
    ΔⲆᐃΔᐃⲆΔ: "img/night-skin15.png",
    ⲆΔᐃᐃΔⵠΔ: "img/day-skin16.png",
    ⵠⵠⲆⵠᐃⵠⲆ: "img/night-skin16.png",
    ⲆⲆᐃⵠᐃⲆⵠ: "img/day-skin17.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/night-skin17.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/day-skin18.png",
    ᐃᐃᐃΔᐃᐃⵠ: "img/night-skin18.png",
    ᐃΔⲆⵠⵠΔⵠ: "img/day-skin19.png",
    ᐃⵠⵠⵠⵠΔⲆ: "img/night-skin19.png",
    ⵠⵠΔⲆΔᐃΔ: "img/day-skin20.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-skin20.png",
    ΔᐃΔⵠⵠⲆΔ: "img/day-skin21.png",
    ⲆⵠΔΔⲆⵠⵠ: "img/night-skin21.png",
    ΔⲆⲆᐃΔⵠⵠ: "img/day-skin22.png",
    ΔⲆᐃΔⵠΔⲆ: "img/night-skin22.png",
    ⵠᐃⲆᐃΔⵠᐃ: "img/day-skin23.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/night-skin23.png",
    ᐃⲆⵠΔⲆΔᐃ: "img/day-skin24.png",
    ⲆⲆⲆⵠᐃΔᐃ: "img/night-skin24.png",
    ⵠⵠⲆΔⲆᐃⵠ: "img/day-skin25.png",
    ⲆⲆᐃⵠⵠⲆⵠ: "img/night-skin25.png",
    ⵠⲆᐃⵠⵠΔⲆ: "img/day-skin26.png",
    ⵠⵠᐃⲆⲆⲆⵠ: "img/night-skin26.png",
    ᐃΔⲆΔᐃⲆᐃ: "img/day-skin27.png",
    ΔΔΔⵠⵠΔⵠ: "img/night-skin27.png",
    ΔΔᐃᐃᐃⵠᐃ: "img/day-skin28.png",
    ᐃⵠΔⲆⲆΔᐃ: "img/night-skin28.png",
    ⵠⵠⵠᐃⵠⲆⵠ: "img/day-skin29.png",
    ⵠΔΔⲆᐃⵠⲆ: "img/night-skin29.png",
    ΔᐃⲆΔΔⲆⲆ: "img/day-skin30.png",
    ᐃⲆᐃΔΔΔᐃ: "img/night-skin30.png",
    ⲆⵠⵠⵠΔⲆᐃ: "img/day-skin31.png",
    ΔⲆⵠΔᐃΔΔ: "img/night-skin31.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/day-skin32.png",
    ᐃᐃⵠⲆⵠⲆⲆ: "img/night-skin32.png",
    ⲆⵠᐃⲆⵠⲆⵠ: "img/day-skin33.png",
    ⲆⵠᐃΔⵠⲆΔ: "img/night-skin33.png",
    ⲆⲆᐃⵠⲆⵠΔ: "img/day-skin34.png",
    ΔⲆᐃⲆΔᐃᐃ: "img/night-skin34.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/day-skin35.png",
    ⲆⲆᐃⲆⵠⵠᐃ: "img/night-skin35.png",
    Ⲇⵠⵠᐃᐃⵠⵠ: "img/day-skin36.png",
    ΔⵠⲆᐃⵠΔΔ: "img/night-skin36.png",
    ᐃᐃⵠⵠⵠᐃⲆ: "img/day-skin37.png",
    ΔⵠⲆⵠⵠⵠⲆ: "img/night-skin37.png",
    ⲆⲆᐃᐃΔⵠᐃ: "img/day-skin38.png",
    ΔΔᐃᐃΔⲆΔ: "img/night-skin38.png",
    ⲆⲆΔᐃⵠⵠᐃ: "img/day-skin39.png",
    ΔΔⵠⲆⲆΔⲆ: "img/night-skin39.png",
    ⲆΔⲆⲆΔⲆᐃ: "img/day-skin40.png",
    ⵠⲆⵠⵠⵠᐃᐃ: "img/night-skin40.png",
    ΔⵠⲆⵠΔᐃⵠ: "img/day-skin41.png",
    ᐃΔᐃⵠⲆΔΔ: "img/night-skin41.png",
    ᐃΔⵠΔⵠᐃΔ: "img/day-skin42.png",
    ⵠⵠⲆⲆⲆⵠⲆ: "img/night-skin42.png",
    ⲆᐃᐃⲆΔⲆⲆ: "img/day-skin43.png",
    ⲆᐃᐃᐃⲆᐃⵠ: "img/night-skin43.png",
    ⲆᐃᐃᐃΔΔᐃ: "img/day-skin44.png",
    ⲆⲆⲆⲆΔⵠⲆ: "img/night-skin44.png",
    ⲆΔᐃⲆⵠᐃⵠ: "img/day-skin45.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/night-skin45.png",
    ᐃᐃΔⵠⵠΔⲆ: "img/day-skin46.png",
    ⲆⵠⵠⲆⵠΔᐃ: "img/night-skin46.png",
    ΔᐃⲆᐃⵠⵠΔ: "img/day-skin47.png",
    ⲆⲆⲆⵠⲆⵠΔ: "img/night-skin47.png",
    ⵠⲆᐃΔᐃᐃᐃ: "img/day-skin48.png",
    ΔΔⲆΔᐃΔⲆ: "img/night-skin48.png",
    ⵠⵠᐃⲆⲆⲆΔ: "img/day-skin49.png",
    ⵠⵠⵠⲆΔΔᐃ: "img/night-skin49.png",
    ⲆⵠⲆᐃΔⵠΔ: "img/day-skin50.png",
    ⲆⲆΔⲆᐃⲆⲆ: "img/night-skin50.png",
    ⵠΔᐃⵠⲆⵠᐃ: "img/day-skin51.png",
    ⵠⲆΔⵠⵠⵠⵠ: "img/night-skin51.png",
    ⲆᐃᐃᐃᐃΔⵠ: "img/day-skin52.png",
    ᐃⵠⲆᐃⲆⵠⲆ: "img/night-skin52.png",
    ΔⲆⲆⲆⲆᐃⵠ: "img/day-skin53.png",
    ΔᐃᐃᐃΔΔⵠ: "img/night-skin53.png",
    ⲆΔⲆⵠⵠⵠⵠ: "img/day-skin54.png",
    ΔΔΔⲆⵠΔⲆ: "img/night-skin54.png",
    ᐃⵠⵠΔΔⲆΔ: "img/day-skin55.png",
    ᐃⲆⲆᐃⵠΔᐃ: "img/night-skin55.png",
    ⲆⵠΔⲆⲆᐃᐃ: "img/day-skin56.png",
    ⲆᐃⵠΔᐃⵠΔ: "img/night-skin56.png",
    ⵠⵠⲆⲆⵠΔⲆ: "img/day-skin57.png",
    ᐃᐃΔⲆΔᐃⵠ: "img/night-skin57.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/day-skin58.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/night-skin58.png",
    ⵠᐃⲆⲆⲆⵠⲆ: "img/day-skin59.png",
    ΔᐃⲆⲆⵠⵠⵠ: "img/night-skin59.png",
    ᐃⲆΔⵠⲆΔΔ: "img/day-skin60.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/night-skin60.png",
    ⵠⵠΔⵠΔᐃⵠ: "img/day-skin61.png",
    ⲆⲆⲆⲆⲆΔΔ: "img/night-skin61.png",
    ⵠΔⲆΔⲆᐃΔ: "img/day-skin62.png",
    ⵠΔᐃΔᐃᐃⵠ: "img/night-skin62.png",
    ⲆⵠⵠΔᐃᐃⵠ: "img/day-skin63.png",
    ΔⲆΔᐃᐃⵠΔ: "img/night-skin63.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/day-skin64.png",
    ⲆΔΔᐃΔΔⲆ: "img/night-skin64.png",
    ⲆⵠΔΔᐃΔΔ: "img/day-skin65.png",
    ⵠⵠΔᐃⵠⵠᐃ: "img/night-skin65.png",
    ΔΔᐃⵠᐃⲆⲆ: "img/day-skin66.png",
    ᐃΔⲆᐃⲆᐃᐃ: "img/night-skin66.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/day-skin67.png",
    ⵠⵠⲆⵠⵠᐃⲆ: "img/night-skin67.png",
    ⲆᐃⲆᐃⵠᐃᐃ: "img/day-skin68.png",
    ΔᐃⲆΔᐃΔⲆ: "img/night-skin68.png",
    ⲆⲆΔⵠΔΔΔ: "img/day-skin69.png",
    ⵠⵠᐃΔⵠᐃⲆ: "img/night-skin69.png",
    ⵠⵠⲆᐃⲆⵠⲆ: "img/day-skin70.png",
    ⲆΔⵠⵠⲆᐃⲆ: "img/night-skin70.png",
    ⲆⲆⵠΔᐃⵠΔ: "img/day-skin71.png",
    ΔΔⲆⲆⵠⲆᐃ: "img/night-skin71.png",
    ᐃᐃΔᐃⲆⵠΔ: "img/day-skin72.png",
    ⲆⲆⲆⵠΔⲆΔ: "img/night-skin72.png",
    ⲆΔΔΔⲆⲆⵠ: "img/day-skin73.png",
    ΔⲆΔΔΔⲆᐃ: "img/night-skin73.png",
    ⲆⲆΔᐃⵠⵠⲆ: "img/day-skin74.png",
    ΔΔⵠᐃᐃⲆⵠ: "img/night-skin74.png",
    ⲆⵠⲆΔⵠΔΔ: "img/day-skin75.png",
    ᐃΔᐃΔΔᐃⵠ: "img/night-skin75.png",
    ⵠⲆᐃⲆΔΔⵠ: "img/day-skin76.png",
    ᐃⲆΔⲆΔⲆⲆ: "img/night-skin76.png",
    ⵠⲆᐃⲆΔⵠⲆ: "img/day-skin77.png",
    ⲆΔⵠⵠΔⲆΔ: "img/night-skin77.png",
    ΔⲆⲆⲆⵠⵠⲆ: "img/day-skin78.png",
    ⲆΔⵠᐃΔᐃΔ: "img/night-skin78.png",
    ΔⲆΔᐃⲆᐃⲆ: "img/day-skin79.png",
    ⲆΔⲆⲆⲆⲆⲆ: "img/night-skin79.png",
    ⵠΔᐃᐃΔΔΔ: "img/day-skin80.png",
    ΔΔⲆᐃⲆᐃΔ: "img/night-skin80.png",
    ⵠΔΔⲆⵠⲆⵠ: "img/day-skin81.png",
    ⵠΔΔⵠⵠΔⲆ: "img/night-skin81.png",
    ⲆⵠⲆⲆΔⲆᐃ: "img/day-skin82.png",
    ⵠⵠᐃⵠⲆⵠᐃ: "img/night-skin82.png",
    ⲆⲆΔᐃΔⲆΔ: "img/day-skin83.png",
    Ⲇᐃⵠᐃᐃⵠᐃ: "img/night-skin83.png",
    ᐃΔⵠᐃⵠᐃⵠ: "img/day-skin84.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/night-skin84.png",
    ΔⵠⲆⲆⲆⲆⲆ: "img/day-skin85.png",
    ᐃᐃⵠᐃᐃⲆⲆ: "img/night-skin85.png",
    ᐃⵠⲆⲆΔᐃΔ: "img/day-skin86.png",
    ⲆᐃⵠⵠΔΔⵠ: "img/night-skin86.png",
    ⲆᐃΔⲆⵠΔᐃ: "img/day-skin87.png",
    ⵠᐃⵠΔⵠΔᐃ: "img/night-skin87.png",
    ⲆⵠΔⵠᐃⲆᐃ: "img/day-skin88.png",
    ⵠⵠᐃⲆⲆᐃᐃ: "img/night-skin88.png",
    ᐃΔᐃᐃⵠⲆⵠ: "img/day-skin89.png",
    ᐃᐃΔⲆⲆⲆΔ: "img/night-skin89.png",
    ΔⲆⲆΔⲆⵠᐃ: "img/day-skin90.png",
    ⵠⵠⲆⲆⲆΔΔ: "img/night-skin90.png",
    ᐃᐃΔⵠⲆΔⲆ: "img/day-skin91.png",
    ΔⲆᐃᐃΔⲆⵠ: "img/night-skin91.png",
    ᐃⲆⵠⲆᐃⲆΔ: "img/day-skin92.png",
    ΔⲆⵠΔⵠᐃᐃ: "img/night-skin92.png",
    ᐃΔΔⵠⵠΔΔ: "img/day-skin93.png",
    ᐃⲆⲆⵠⲆΔⲆ: "img/night-skin93.png",
    ⲆⵠⵠⲆⲆᐃⵠ: "img/day-skin94.png",
    ΔΔΔⵠΔᐃᐃ: "img/night-skin94.png",
    ⵠⵠⲆᐃΔⲆⲆ: "img/day-skin95.png",
    ᐃᐃᐃⵠΔⵠᐃ: "img/night-skin95.png",
    ⲆᐃⵠⵠⵠⲆᐃ: "img/day-skin96.png",
    ΔⲆΔⲆᐃⵠⵠ: "img/night-skin96.png",
    ᐃⲆᐃᐃⵠⲆΔ: "img/day-skin97.png",
    ⲆⵠᐃᐃᐃΔⲆ: "img/night-skin97.png",
    ⲆᐃᐃΔᐃᐃⲆ: "img/day-skin98.png",
    ᐃΔᐃᐃᐃΔᐃ: "img/night-skin98.png",
    ⲆΔΔⵠⲆⵠΔ: "img/day-skin99.png",
    ⵠⵠⵠⵠᐃⵠᐃ: "img/night-skin99.png",
    ⵠⲆⵠⵠⵠⲆⲆ: "img/day-skin100.png",
    ᐃΔⲆⵠⵠⵠⵠ: "img/night-skin100.png",
    ⵠᐃⵠⲆⵠᐃⲆ: "img/day-skin101.png",
    ⵠΔΔⲆᐃᐃⲆ: "img/night-skin101.png",
    ᐃⲆⲆΔΔⲆⵠ: "img/day-skin102.png",
    ᐃᐃⵠᐃΔΔΔ: "img/night-skin102.png",
    ΔΔᐃΔⵠΔⵠ: "img/day-skin103.png",
    ⲆᐃⵠΔᐃⵠᐃ: "img/night-skin103.png",
    ᐃΔᐃⵠⲆⲆᐃ: "img/day-skin104.png",
    ΔᐃⵠΔΔᐃΔ: "img/night-skin104.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/day-skin105.png",
    ᐃⲆⲆⵠⲆΔΔ: "img/night-skin105.png",
    ⵠΔⵠⲆΔⵠⵠ: "img/day-skin106.png",
    ⵠⲆᐃᐃⵠⲆΔ: "img/night-skin106.png",
    ⵠⲆⲆᐃΔΔΔ: "img/day-skin107.png",
    ⵠΔᐃⵠⲆΔᐃ: "img/night-skin107.png",
    ΔⵠᐃⲆΔⲆᐃ: "img/day-skin108.png",
    ᐃⲆⲆᐃⲆΔⲆ: "img/night-skin108.png",
    ΔΔⲆΔᐃⲆᐃ: "img/day-skin109.png",
    ΔⵠΔⲆᐃΔΔ: "img/night-skin109.png",
    ᐃⲆᐃⲆΔⵠⲆ: "img/day-skin110.png",
    ᐃⵠΔⲆⵠΔᐃ: "img/night-skin110.png",
    ⲆᐃΔᐃⵠᐃⵠ: "img/day-skin111.png",
    ΔᐃΔⲆⵠⲆᐃ: "img/night-skin111.png",
    ⲆⲆᐃⵠⵠᐃΔ: "img/day-skin112.png",
    ⲆⵠⲆΔⲆΔᐃ: "img/night-skin112.png",
    ΔⵠΔⵠΔΔⲆΔⵠ: "img/day-skin113.png",
    ⵠⲆΔⲆᐃΔΔⵠⵠ: "img/night-skin113.png",
    ⵠΔⲆᐃᐃΔΔ: "img/day-skin114.png",
    ⵠΔⲆΔⲆⵠⵠ: "img/night-skin114.png",
    ᐃΔᐃⵠΔⵠΔ: "img/day-skin115.png",
    ⲆΔᐃΔᐃⵠᐃ: "img/night-skin115.png",
    ⵠΔΔⲆΔᐃⲆ: "img/day-skin116.png",
    ⲆⵠᐃΔⲆᐃΔ: "img/night-skin116.png",
    ⲆΔᐃΔΔⲆⲆ: "img/day-skin117.png",
    ⲆᐃᐃⲆⵠΔⲆ: "img/night-skin117.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/day-skin118.png",
    ᐃᐃⲆⵠⵠΔᐃ: "img/night-skin118.png",
    ᐃⵠᐃΔⵠⵠⲆ: "img/day-skin119.png",
    ⵠⲆⲆΔΔⵠⵠ: "img/night-skin119.png",
    ⵠΔᐃΔⵠⲆⲆ: "img/day-skin120.png",
    ⲆⵠⵠΔΔΔΔ: "img/night-skin120.png",
    ᐃⵠⲆᐃᐃⲆΔ: "img/day-skin121.png",
    ⵠⲆⵠΔᐃᐃⵠ: "img/night-skin121.png",
    ΔⵠΔᐃᐃⵠⵠ: "img/day-skin122.png",
    ΔᐃΔΔΔⵠΔ: "img/night-skin122.png",
    ⵠⵠᐃᐃΔⲆⵠ: "img/day-skin123.png",
    ΔⲆᐃᐃΔᐃⵠ: "img/night-skin123.png",
    ᐃⵠⵠⵠΔᐃΔ: "img/day-skin124.png",
    ᐃⵠᐃᐃⵠⲆⲆ: "img/night-skin124.png",
    ᐃⵠΔᐃⵠⵠⲆ: "img/day-skin125.png",
    ⲆⵠⲆⵠⵠⵠⵠ: "img/night-skin125.png",
    ᐃΔΔⵠΔΔⲆ: "img/day-skin126.png",
    ⲆᐃᐃⵠⲆΔⲆ: "img/night-skin126.png",
    ΔΔΔΔⲆᐃΔ: "img/day-skin127.png",
    ᐃΔᐃΔΔΔΔ: "img/night-skin127.png",
    ᐃⲆⲆⵠⲆⲆⵠ: "img/day-skin128.png",
    ᐃᐃⲆΔⵠⵠⵠ: "img/night-skin128.png",
    ⲆⲆⵠⲆⵠᐃΔ: "img/day-skin129.png",
    ΔⲆⵠⲆⵠⵠⲆ: "img/night-skin129.png",
    ⵠⲆⵠⵠᐃΔᐃ: "img/day-skin130-1.png",
    ᐃⲆΔΔⵠΔⵠ: "img/night-skin130-1.png",
    ⵠᐃΔⵠΔⵠᐃ: "img/day-skin131.png",
    ⵠⵠΔΔΔⵠᐃ: "img/night-skin131.png",
    ΔΔⵠᐃΔΔΔ: "img/day-skin132.png",
    ⲆΔΔⵠⲆⵠⲆ: "img/night-skin132.png",
    ΔⲆΔⲆⵠΔᐃ: "img/day-skin133.png",
    ⲆⵠⲆΔΔⲆⵠ: "img/night-skin133.png",
    ᐃⵠᐃᐃΔⵠⲆ: "img/day-skin134.png",
    ᐃⵠΔᐃⲆΔΔ: "img/night-skin134.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/day-skin135.png",
    ⵠⲆⲆᐃⵠⲆΔ: "img/night-skin135.png",
    ⲆⲆᐃⲆⲆΔⲆ: "img/day-skin136.png",
    ΔⲆΔⵠⲆᐃⲆ: "img/night-skin136.png",
    ᐃᐃⵠᐃᐃᐃⵠ: "img/day-skin137.png",
    ΔᐃⲆΔΔⵠΔ: "img/night-skin137.png",
    ᐃⲆΔᐃⵠⵠⲆ: "img/day-skin138.png",
    ⲆᐃΔᐃⲆᐃⵠ: "img/night-skin138.png",
    ⲆᐃᐃΔΔΔᐃ: "img/day-skin139.png",
    ΔᐃⲆⵠⲆⲆⵠ: "img/night-skin139.png",
    ⵠⵠⵠᐃⲆᐃΔ: "img/day-skin140.png",
    ⵠⵠⵠⲆᐃⵠⲆ: "img/night-skin140.png",
    ᐃᐃⵠⲆᐃⲆᐃ: "img/day-skin141.png",
    ⵠⲆⲆⲆⲆΔⲆ: "img/night-skin141.png",
    ᐃΔⲆΔⲆᐃΔ: "img/day-skin142.png",
    ΔⵠΔⲆⵠⵠᐃ: "img/night-skin142.png",
    ᐃⲆΔⲆⵠⵠᐃ: "img/day-skin143.png",
    ᐃΔᐃⲆⲆΔⵠ: "img/night-skin143.png",
    ⲆⵠⵠΔⲆⲆⲆ: "img/day-skin144.png",
    ᐃΔᐃⲆΔⵠΔ: "img/night-skin144.png",
    ΔᐃΔᐃⵠⵠΔ: "img/day-skin145.png",
    ᐃΔΔΔᐃΔⲆ: "img/night-skin145.png",
    ᐃΔΔᐃⵠⵠⲆ: "img/day-skin146.png",
    ⲆΔΔⲆⵠⵠⲆ: "img/night-skin146.png",
    ΔΔᐃΔΔᐃⵠ: "img/day-skin147.png",
    ᐃᐃⵠⵠⵠⲆⵠ: "img/night-skin147.png",
    ΔΔⲆΔΔΔⲆ: "img/day-skin148.png",
    ᐃⵠⵠᐃΔⲆΔ: "img/night-skin148.png",
    ΔⲆΔⵠⲆⵠⵠ: "img/day-skin149.png",
    ᐃΔⵠᐃⵠΔⲆ: "img/night-skin149.png",
    ᐃΔⲆᐃᐃⲆΔ: "img/day-skin150.png",
    ⲆᐃΔⲆΔᐃΔ: "img/night-skin150.png",
    ⲆⲆⵠⲆᐃᐃᐃ: "img/day-skin151.png",
    ᐃⵠΔΔⲆΔΔ: "img/night-skin151.png",
    ᐃⵠⵠⲆⵠᐃⵠ: "img/day-skin152.png",
    ⵠⲆⲆⵠᐃⲆⲆ: "img/night-skin152.png",
    ⲆⲆΔⵠΔⵠΔ: "img/day-skin153.png",
    ⲆⲆᐃᐃᐃᐃⲆ: "img/night-skin153.png",
    ᐃⵠⲆᐃⵠᐃⵠ: "img/day-skin154.png",
    ⵠⵠΔⲆΔⵠⵠ: "img/night-skin154.png",
    ⲆᐃⵠᐃⵠⲆⲆ: "img/day-skin155.png",
    ᐃᐃⵠⵠΔⵠᐃ: "img/night-skin155.png",
    ᐃᐃᐃⵠΔⲆᐃ: "img/day-skin156.png",
    ΔⲆⵠΔⲆⵠⲆ: "img/night-skin156.png",
    ᐃⵠⵠᐃΔⵠⵠ: "img/day-skin157.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/night-skin157.png",
    ⲆⵠᐃⵠⵠΔᐃ: "img/day-skin158.png",
    ⵠᐃΔⵠⵠⲆᐃ: "img/night-skin158.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/day-skin159.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/night-skin159.png",
    ΔΔΔⵠΔⲆⲆ: "img/day-skin160.png",
    ΔⵠᐃⵠⵠΔⲆ: "img/night-skin160.png",
    ΔΔⲆⵠᐃΔⲆ: "img/day-skin161.png",
    ⵠᐃΔⲆΔΔᐃ: "img/night-skin161.png",
    ⵠᐃΔⲆⲆⲆⵠ: "img/day-skin162.png",
    ᐃᐃⵠΔⲆⲆΔ: "img/night-skin162.png",
    ΔᐃΔᐃᐃΔⲆ: "img/day-skin163.png",
    ⵠⵠΔΔⲆⲆⲆ: "img/night-skin163.png",
    ⲆⲆⵠᐃᐃΔᐃ: "img/day-skin164.png",
    ⵠᐃⵠΔΔΔΔ: "img/night-skin164.png",
    ᐃΔⲆⵠⲆⵠᐃ: "img/day-skin165.png",
    ΔᐃⵠⵠᐃΔⵠ: "img/night-skin165.png",
    ᐃᐃⵠⲆⵠΔΔ: "img/day-skin166.png",
    ⵠⵠⲆⵠΔⵠΔ: "img/night-skin166.png",
    ⵠᐃⵠᐃᐃⲆΔ: "img/day-skin167.png",
    ⵠⵠⵠᐃᐃⵠΔ: "img/night-skin167.png",
    ΔⲆⵠᐃΔⲆΔ: "img/day-skin168.png",
    ⵠⲆΔᐃⵠΔΔ: "img/night-skin168.png",
    ᐃᐃᐃⵠΔΔΔ: "img/day-skin169.png",
    ⲆⲆⲆᐃΔⵠΔ: "img/night-skin169.png",
    ΔⲆⵠⲆΔⲆΔ: "img/day-skin170.png",
    ΔⵠⵠⵠⲆⵠΔ: "img/night-skin170.png",
    ⵠΔⲆΔΔᐃᐃ: "img/day-skin171.png",
    ⵠⵠᐃⲆⵠⲆᐃ: "img/night-skin171.png",
    ⵠᐃⵠᐃⲆⵠⵠ: "img/day-skin172.png",
    ᐃᐃΔⲆΔⵠⵠ: "img/night-skin172.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/day-skin173.png",
    ΔᐃΔᐃᐃᐃⲆ: "img/night-skin173.png",
    ⵠⵠΔⲆⲆᐃⲆ: "img/day-skin174.png",
    ΔΔΔⵠⵠⵠΔ: "img/night-skin174.png",
    ᐃΔΔᐃⲆⲆⵠ: "img/day-skin175.png",
    ⵠⵠⲆΔΔᐃᐃ: "img/night-skin175.png",
    ⵠⲆΔⵠⲆⲆᐃ: "img/day-skin176.png",
    ⲆΔⲆᐃⵠⲆⵠ: "img/night-skin176.png",
    ⲆⵠⵠⵠΔᐃΔ: "img/day-skin177.png",
    ΔΔⲆⵠΔᐃᐃ: "img/night-skin177.png",
    ᐃᐃΔⲆⲆΔΔ: "img/day-skin178.png",
    ⲆⲆᐃⵠⵠΔΔ: "img/night-skin178.png",
    ᐃᐃⲆᐃⲆⲆⵠ: "img/day-skin179.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/night-skin179.png",
    ⵠⵠⵠᐃΔᐃⲆ: "img/day-skin180.png",
    ⵠⵠΔᐃΔᐃⲆ: "img/night-skin180.png",
    ΔⵠⲆᐃᐃⲆⵠ: "img/day-skin181.png",
    ᐃⲆⲆⵠⵠⵠΔ: "img/night-skin181.png",
    ⵠⲆⲆⵠΔᐃΔ: "img/day-skin182.png",
    ᐃⲆⲆᐃᐃᐃⵠ: "img/night-skin182.png",
    ᐃⲆⵠⵠΔΔΔ: "img/day-skin183.png",
    ᐃΔΔΔΔΔⵠ: "img/night-skin183.png",
    ⵠᐃΔᐃⵠΔᐃ: "img/day-skin184.png",
    ΔⵠⵠⲆⲆᐃᐃ: "img/night-skin184.png",
    Δⵠⵠᐃⵠᐃⵠ: "img/day-skin185.png",
    ⵠⲆΔⵠⵠⲆⲆ: "img/night-skin185.png",
    ΔᐃΔΔⵠΔᐃ: "img/day-skin186.png",
    ΔⵠᐃⲆⲆΔᐃ: "img/night-skin186.png",
    ⲆΔⵠⵠⲆⲆⵠ: "img/day-skin187.png",
    ᐃΔΔᐃΔⲆΔ: "img/night-skin187.png",
    ᐃⵠΔⲆΔⲆΔ: "img/day-skin188.png",
    ΔᐃⲆᐃᐃⲆⲆ: "img/night-skin188.png",
    ΔⲆᐃᐃⵠⵠᐃ: "img/day-skin189.png",
    ⵠᐃⲆⲆⲆⲆᐃ: "img/night-skin189.png",
    ᐃⵠⵠΔᐃⵠⵠ: "img/day-skin190.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/night-skin190.png",
    ⵠΔⲆⲆⲆⵠΔ: "img/day-skin191.png",
    Δᐃⵠⵠᐃⵠᐃ: "img/night-skin191.png",
    ΔⵠᐃⲆΔΔΔ: "img/day-skin192.png",
    ᐃⲆΔⲆⲆⵠΔ: "img/night-skin192.png",
    ΔΔⲆᐃⲆⵠᐃ: "img/day-skin193.png",
    ᐃΔΔⲆⵠⵠⲆ: "img/night-skin193.png",
    ΔΔⵠΔᐃⵠⲆ: "img/day-skin194.png",
    ⲆᐃΔⲆⵠᐃⵠ: "img/night-skin194.png",
    ΔⵠΔⵠⵠⵠⲆ: "img/day-skin195.png",
    ᐃⵠᐃᐃⵠᐃⲆ: "img/night-skin195.png",
    ⵠⲆΔᐃⲆΔᐃ: "img/day-skin196.png",
    ⲆⲆΔΔᐃⲆⵠ: "img/night-skin196.png",
    ᐃΔⲆᐃⵠⵠᐃ: "img/day-skin197.png",
    ⲆⵠΔⲆΔⲆᐃ: "img/night-skin197.png",
    ⲆⲆΔΔΔⲆⵠ: "img/day-skin198.png",
    ⵠᐃⲆⲆΔΔⲆ: "img/night-skin198.png",
    ⵠΔΔⲆᐃⵠΔ: "img/day-skin199.png",
    ⲆⲆᐃⲆⵠⵠⲆ: "img/night-skin199.png",
    ⲆΔΔᐃⲆᐃⲆ: "img/day-skin200.png",
    ⲆⲆΔⵠⵠΔⵠ: "img/night-skin200.png",
    ⲆΔΔΔΔⵠⵠ: "img/day-skin201.png",
    ⵠⵠⲆΔⵠⵠⵠ: "img/night-skin201.png",
    ⲆⵠⲆⵠΔΔΔ: "img/day-skin202.png",
    ᐃᐃⵠⵠⵠⵠΔ: "img/night-skin202.png",
    ⲆΔⵠⲆᐃⵠΔ: "img/day-skin203.png",
    ᐃⲆⲆⲆⵠⵠΔ: "img/night-skin203.png",
    ⲆᐃⲆⲆⵠⲆⲆ: "img/day-skin204.png",
    ΔⲆᐃⲆⲆⲆΔ: "img/night-skin204.png",
    ⵠⲆΔⵠΔⵠⵠ: "img/day-skin205.png",
    ΔᐃⲆⵠᐃⵠᐃ: "img/night-skin205.png",
    ΔⵠᐃⵠΔⵠⲆ: "img/day-skin206.png",
    ΔᐃΔΔⲆⲆⵠ: "img/night-skin206.png",
    ΔⵠΔⲆⲆᐃΔ: "img/day-skin207.png",
    ⲆΔΔᐃᐃⲆΔ: "img/night-skin207.png",
    ⵠΔΔⲆᐃΔⵠ: "img/day-skin208.png",
    ⲆΔⲆΔⲆᐃᐃ: "img/night-skin208.png",
    ⵠᐃΔᐃⵠⲆᐃ: "img/day-skin209.png",
    ΔΔⲆⲆⲆⵠⵠ: "img/night-skin209.png",
    ΔⵠᐃⲆⲆᐃᐃ: "img/day-skin210.png",
    ⵠⵠⲆⵠⵠⲆⲆ: "img/night-skin210.png",
    ᐃⵠⵠᐃⲆᐃᐃ: "img/day-skin211.png",
    ᐃΔᐃΔᐃΔⵠ: "img/night-skin211.png",
    ⵠᐃᐃᐃΔΔⵠ: "img/day-skin212.png",
    ⲆⵠⲆⲆΔΔⵠ: "img/night-skin212.png",
    ᐃⵠⵠⵠⲆᐃⲆ: "img/day-hand-skin0.png",
    ΔⵠΔⵠⵠⲆΔ: "img/night-hand-skin0.png",
    ΔⵠΔⲆⵠⲆⵠ: "img/day-hand-skin1.png",
    ᐃⵠΔⲆᐃⵠⵠ: "img/night-hand-skin1.png",
    ⲆᐃᐃⲆⵠⵠᐃ: "img/day-hand-skin2.png",
    ᐃΔⲆΔᐃⵠΔ: "img/night-hand-skin2.png",
    ΔᐃᐃⲆⵠⲆᐃ: "img/day-hand-skin3.png",
    ΔᐃᐃⵠΔΔⲆ: "img/night-hand-skin3.png",
    ᐃⲆᐃΔᐃⲆᐃ: "img/day-hand-skin4.png",
    ⵠΔⵠⵠΔⲆⲆ: "img/night-hand-skin4.png",
    ⵠⵠΔΔΔⲆᐃ: "img/day-hand-skin5.png",
    ⵠᐃᐃΔⵠⵠᐃ: "img/night-hand-skin5.png",
    ⵠᐃⲆⲆⲆⵠᐃ: "img/day-hand-skin6.png",
    ⵠΔⵠΔⵠⵠⵠΔⲆ: "img/night-hand-skin6.png",
    ⵠⵠⵠⵠᐃⲆΔ: "img/day-hand-skin6.png",
    ⲆⲆΔⲆⲆᐃⵠ: "img/night-hand-skin6.png",
    ΔΔⲆⵠᐃᐃⵠ: "img/day-hand-skin8.png",
    ⵠΔΔⲆΔᐃᐃ: "img/night-hand-skin8.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/day-hand-skin9.png",
    ᐃΔⵠⲆⵠΔᐃ: "img/night-hand-skin9.png",
    ᐃᐃⲆⵠⲆᐃᐃ: "img/day-hand-skin10.png",
    Δᐃᐃᐃⵠⵠᐃ: "img/night-hand-skin10.png",
    ᐃΔⵠⵠⲆΔⵠ: "img/day-hand-skin11.png",
    ΔⲆⲆᐃⲆⲆᐃ: "img/night-hand-skin11.png",
    ⵠᐃⵠⲆΔⵠᐃ: "img/day-hand-skin12.png",
    ⵠΔᐃΔᐃᐃⲆ: "img/night-hand-skin12.png",
    ⵠᐃⵠⲆΔⲆΔ: "img/day-hand-skin13.png",
    ᐃⲆΔΔⵠΔᐃ: "img/night-hand-skin13.png",
    ΔⵠΔᐃΔΔᐃ: "img/day-hand-skin14.png",
    ⲆⵠⵠᐃⲆⲆⵠ: "img/night-hand-skin14.png",
    ⵠΔⵠⲆⲆᐃΔ: "img/day-hand-skin15.png",
    ΔᐃⲆⲆⲆⵠΔ: "img/night-hand-skin15.png",
    ⲆⵠⲆⵠⲆᐃΔ: "img/day-hand-skin16.png",
    ⲆᐃⲆᐃⲆⲆⲆ: "img/night-hand-skin16.png",
    ΔᐃΔᐃΔᐃⲆ: "img/day-hand-skin17.png",
    ΔⲆᐃΔⵠᐃΔ: "img/night-hand-skin17.png",
    ᐃⲆΔⲆⵠᐃⵠ: "img/day-hand-skin18.png",
    ⲆᐃⵠᐃᐃⵠΔ: "img/night-hand-skin18.png",
    ΔⵠΔⲆⵠΔᐃ: "img/day-hand-skin19.png",
    ⲆⵠΔᐃᐃΔΔ: "img/night-hand-skin19.png",
    ⲆⵠᐃᐃⲆⲆⵠ: "img/day-hand-skin20.png",
    ⲆⲆΔΔⲆⵠⵠ: "img/night-hand-skin20.png",
    ΔⲆⵠⵠⲆⵠⲆ: "img/day-hand-skin21.png",
    ᐃΔᐃⵠΔⵠⵠ: "img/night-hand-skin21.png",
    ΔⲆΔΔᐃⲆⵠ: "img/day-hand-skin22.png",
    ⵠΔΔⲆᐃᐃΔ: "img/night-hand-skin22.png",
    ᐃⲆᐃⵠⵠᐃᐃ: "img/day-hand-skin23.png",
    ΔⲆᐃⵠᐃⲆΔ: "img/night-hand-skin23.png",
    ⵠΔᐃᐃⵠΔΔ: "img/day-hand-skin24.png",
    ᐃᐃⵠⵠⵠΔⲆ: "img/night-hand-skin24.png",
    ⵠⲆΔⲆⲆⵠᐃ: "img/day-hand-skin25.png",
    ΔᐃⲆⵠⵠΔⲆ: "img/night-hand-skin25.png",
    ⵠⲆΔⲆᐃⲆᐃ: "img/day-hand-skin26.png",
    ⲆⲆⵠᐃΔⲆΔ: "img/night-hand-skin26.png",
    ⵠᐃⵠᐃΔⵠΔ: "img/day-hand-skin27.png",
    ΔⲆⵠΔΔⲆΔ: "img/night-hand-skin27.png",
    ΔⲆⵠᐃⵠⵠⲆ: "img/day-hand-skin28.png",
    ΔᐃⲆᐃⵠΔⲆ: "img/night-hand-skin28.png",
    ᐃⵠᐃⲆᐃᐃᐃ: "img/day-hand-skin29.png",
    ΔΔᐃᐃⵠᐃᐃ: "img/night-hand-skin29.png",
    ⲆⵠⲆᐃⲆⵠⲆ: "img/day-hand-skin30.png",
    ⲆⲆⵠⵠᐃΔⲆ: "img/night-hand-skin30.png",
    ⵠΔᐃᐃⵠⵠⲆ: "img/day-hand-skin31.png",
    ΔⲆⲆΔΔⲆⲆ: "img/night-hand-skin31.png",
    ᐃⲆⲆⲆᐃⵠⵠ: "img/day-hand-skin32.png",
    ⵠⲆⵠⵠⵠᐃⲆ: "img/night-hand-skin32.png",
    ΔΔᐃΔⵠⵠⲆ: "img/day-hand-skin33.png",
    ⲆⲆᐃⵠⲆΔⵠ: "img/night-hand-skin33.png",
    ᐃᐃⲆⲆΔⲆᐃ: "img/day-hand-skin34.png",
    ⵠΔᐃⵠⵠⵠΔ: "img/night-hand-skin34.png",
    ᐃⵠⲆΔⵠⵠᐃ: "img/day-hand-skin35.png",
    ᐃⲆΔⲆⲆᐃⲆ: "img/night-hand-skin35.png",
    ⵠⵠΔⵠᐃᐃΔ: "img/day-hand-skin36.png",
    ⲆⲆΔᐃΔⲆⲆ: "img/night-hand-skin36.png",
    ⲆⵠⲆΔᐃⲆⲆ: "img/day-hand-skin37.png",
    ᐃⵠⵠᐃⵠⲆΔ: "img/night-hand-skin37.png",
    ⵠΔⵠⵠᐃΔΔ: "img/day-hand-skin38.png",
    ΔᐃᐃⲆⲆᐃⵠ: "img/night-hand-skin38.png",
    ⲆΔΔⲆⵠⵠⵠ: "img/day-hand-skin39.png",
    ᐃᐃⵠᐃⵠΔⲆ: "img/night-hand-skin39.png",
    ⵠⲆⲆΔᐃΔⲆ: "img/day-hand-skin40.png",
    ⲆⵠᐃⲆΔⵠⵠ: "img/night-hand-skin40.png",
    ᐃⵠⵠΔΔΔᐃ: "img/day-hand-skin41.png",
    ᐃⲆⲆⵠΔⵠΔ: "img/night-hand-skin41.png",
    ᐃΔⲆΔΔΔΔ: "img/day-hand-skin42.png",
    ⵠⲆⲆⵠⵠⵠᐃ: "img/night-hand-skin42.png",
    ΔⲆⲆⲆⲆΔΔ: "img/day-hand-skin43.png",
    ⲆΔΔΔᐃⵠⲆ: "img/night-hand-skin43.png",
    ΔΔΔᐃΔⲆᐃ: "img/day-hand-skin16.png",
    ΔⵠᐃΔᐃᐃΔ: "img/night-hand-skin16.png",
    ᐃⲆⵠⲆΔᐃⵠ: "img/day-hand-skin45.png",
    ⵠⲆⵠⲆⲆⵠᐃ: "img/night-hand-skin45.png",
    ⵠᐃᐃⲆⲆᐃⵠ: "img/day-hand-skin46.png",
    ΔⲆΔᐃΔΔⲆ: "img/night-hand-skin46.png",
    ⵠΔᐃⲆᐃᐃⲆ: "img/day-hand-skin47.png",
    ᐃᐃΔⲆⲆᐃⵠ: "img/night-hand-skin47.png",
    ΔᐃΔΔⵠᐃᐃ: "img/day-hand-skin48.png",
    ᐃΔᐃΔⵠⲆⲆ: "img/night-hand-skin48.png",
    ᐃⵠᐃⲆᐃⵠΔ: "img/day-hand-skin49.png",
    ᐃΔΔⵠΔⵠᐃ: "img/night-hand-skin49.png",
    ⵠⵠⲆᐃⲆΔᐃ: "img/day-hand-skin49.png",
    ⵠᐃᐃΔⲆⲆΔ: "img/night-hand-skin49.png",
    ⵠΔⵠᐃᐃᐃⵠ: "img/day-hand-skin51.png",
    ⵠᐃᐃⲆⲆᐃᐃ: "img/night-hand-skin51.png",
    ΔᐃΔᐃΔⲆⵠ: "img/day-hand-skin52.png",
    ᐃⵠⵠᐃΔᐃⵠ: "img/night-hand-skin52.png",
    ⲆΔΔⵠⲆᐃᐃ: "img/day-hand-skin53.png",
    ⲆΔⵠᐃⵠᐃⵠ: "img/night-hand-skin53.png",
    Δⵠᐃⵠⵠⵠᐃ: "img/day-hand-skin53.png",
    ⲆᐃᐃᐃⲆⵠΔ: "img/night-hand-skin53.png",
    ⵠΔᐃΔΔΔᐃ: "img/day-hand-skin55.png",
    ⲆΔⵠᐃΔⲆΔ: "img/night-hand-skin55.png",
    ΔⲆⲆⵠⵠⲆⲆ: "img/day-hand-skin56.png",
    ⵠΔᐃᐃⲆᐃᐃ: "img/night-hand-skin56.png",
    ΔⲆΔᐃⵠⲆᐃ: "img/day-hand-skin57.png",
    ⵠⲆⲆᐃⲆΔΔ: "img/night-hand-skin57.png",
    ΔΔΔⲆⲆⵠⵠ: "img/day-hand-skin58.png",
    ⵠⲆΔⵠΔⲆⲆ: "img/night-hand-skin58.png",
    ΔᐃΔΔⲆᐃΔ: "img/day-hand-skin59.png",
    ⵠᐃⲆⵠⲆⲆΔ: "img/night-hand-skin59.png",
    ᐃΔΔⲆΔᐃⵠ: "img/day-hand-skin61.png",
    ᐃΔΔⵠΔⲆΔ: "img/night-hand-skin61.png",
    ⵠΔᐃᐃⵠⲆΔ: "img/day-hand-skin61.png",
    ⵠⵠᐃΔⵠᐃᐃ: "img/night-hand-skin61.png",
    ΔΔⵠΔⲆΔⲆ: "img/day-hand-skin62.png",
    ⲆⵠⵠᐃⲆΔⵠ: "img/night-hand-skin62.png",
    ⵠⲆⵠΔⵠⲆⵠ: "img/day-hand-skin63.png",
    Δᐃᐃᐃⵠᐃᐃ: "img/night-hand-skin63.png",
    ⲆᐃⵠΔⲆΔᐃ: "img/day-hand-skin64.png",
    ⵠᐃⲆᐃᐃⵠΔ: "img/night-hand-skin64.png",
    ᐃᐃΔΔᐃᐃⵠ: "img/day-hand-skin65.png",
    ΔᐃⲆᐃⵠⲆΔ: "img/night-hand-skin65.png",
    ⵠᐃΔⵠᐃᐃᐃ: "img/day-hand-skin66.png",
    ΔⲆⵠⵠⵠΔⵠ: "img/night-hand-skin66.png",
    ⵠΔᐃⲆᐃⲆⲆ: "img/day-hand-skin67.png",
    ⲆᐃᐃᐃⲆⲆΔ: "img/night-hand-skin67.png",
    ΔⵠⲆⵠΔᐃΔ: "img/day-hand-skin68.png",
    ᐃⵠᐃΔΔΔΔ: "img/night-hand-skin68.png",
    ᐃⵠᐃⲆⲆⲆⲆ: "img/day-hand-skin69.png",
    ᐃᐃᐃⲆⲆΔⲆ: "img/night-hand-skin69.png",
    ΔⵠᐃⲆΔΔⲆ: "img/day-hand-skin70.png",
    ⲆⲆᐃⵠᐃΔΔ: "img/night-hand-skin70.png",
    ᐃΔⵠⵠᐃᐃⵠ: "img/day-hand-skin71.png",
    ᐃᐃΔⲆⵠⲆΔ: "img/night-hand-skin71.png",
    ⲆᐃᐃᐃΔᐃΔ: "img/day-hand-skin72.png",
    ᐃⵠⵠⲆⲆᐃⵠ: "img/night-hand-skin72.png",
    ⲆⲆⵠⲆΔⲆΔ: "img/day-hand-skin73.png",
    ⲆⵠΔΔⵠΔⵠ: "img/night-hand-skin73.png",
    ⵠⲆⲆⲆⵠⲆᐃ: "img/day-hand-skin74.png",
    ⵠᐃⵠⲆΔΔΔ: "img/night-hand-skin74.png",
    ⵠⲆⲆⲆⲆⵠⵠ: "img/day-hand-skin75.png",
    ΔⲆᐃⵠⲆᐃⲆ: "img/night-hand-skin75.png",
    ΔᐃⵠⲆⲆΔΔ: "img/day-hand-skin76.png",
    ⵠⵠΔΔᐃᐃᐃ: "img/night-hand-skin76.png",
    ⵠᐃᐃΔⵠⲆⵠ: "img/day-hand-skin77.png",
    ⵠΔⲆᐃᐃΔⵠ: "img/night-hand-skin77.png",
    ⲆⲆΔⲆᐃΔⵠ: "img/day-hand-skin78.png",
    ΔⲆⵠᐃᐃⵠᐃ: "img/night-hand-skin78.png",
    ΔᐃⵠⲆΔⲆⵠ: "img/day-hand-skin79.png",
    ⲆⵠᐃⲆᐃᐃᐃ: "img/night-hand-skin79.png",
    ΔᐃᐃⲆᐃⵠⲆ: "img/day-hand-skin80.png",
    ⵠΔᐃⵠⵠΔⵠ: "img/night-hand-skin80.png",
    ⵠⵠⲆΔΔΔΔ: "img/day-hand-skin81.png",
    ᐃⲆⲆΔⲆΔⵠ: "img/night-hand-skin81.png",
    ᐃᐃⲆΔⵠⵠⲆ: "img/day-hand-skin82.png",
    ᐃᐃⵠΔⵠⵠⲆ: "img/night-hand-skin82.png",
    ΔΔⵠⵠᐃⵠᐃ: "img/day-hand-skin83.png",
    ΔⲆⲆⵠⲆⵠᐃ: "img/night-hand-skin83.png",
    ΔⲆΔⵠⵠΔᐃ: "img/day-hand-skin84.png",
    ⵠᐃΔΔⲆΔⵠ: "img/night-hand-skin84.png",
    ΔⲆᐃΔᐃᐃⵠ: "img/day-hand-skin85.png",
    ⲆⵠⵠⵠⲆⵠⲆ: "img/night-hand-skin85.png",
    ⵠΔᐃᐃⲆⲆⵠ: "img/day-hand-skin86.png",
    ᐃⲆᐃⲆⲆᐃⲆ: "img/night-hand-skin86.png",
    ⲆⵠⲆⲆⲆΔⵠ: "img/day-hand-skin87.png",
    ΔΔⲆⵠᐃⵠⵠ: "img/night-hand-skin87.png",
    ᐃⲆⵠⵠΔᐃⵠ: "img/day-hand-skin88.png",
    ⵠⵠᐃᐃΔΔΔ: "img/night-hand-skin88.png",
    ⵠΔᐃᐃⲆᐃⲆ: "img/day-hand-skin89.png",
    ⵠᐃΔⵠⵠⲆⵠ: "img/night-hand-skin89.png",
    ΔⵠⵠᐃΔΔⵠ: "img/day-hand-skin90.png",
    ⵠⲆᐃΔΔᐃᐃ: "img/night-hand-skin90.png",
    ⲆⵠΔᐃΔⵠΔ: "img/day-hand-skin91.png",
    ⲆⲆⲆᐃⵠⵠΔ: "img/night-hand-skin91.png",
    ᐃᐃΔᐃⲆΔᐃ: "img/day-hand-skin92.png",
    ⵠⵠⲆⲆⵠⵠⵠ: "img/night-hand-skin92.png",
    ΔⲆⵠⵠⲆΔᐃ: "img/day-hand-skin93.png",
    ⲆΔᐃⲆⵠᐃⲆ: "img/night-hand-skin93.png",
    ⲆⵠⵠⲆⲆΔⲆ: "img/day-hand-skin94.png",
    ΔᐃᐃΔⵠᐃᐃ: "img/night-hand-skin94.png",
    ᐃⵠᐃᐃΔⲆⵠ: "img/day-hand-skin95.png",
    ΔⵠΔᐃⵠⲆΔ: "img/night-hand-skin95.png",
    ᐃⵠⲆⲆⲆⲆⲆ: "img/day-hand-skin96.png",
    ᐃᐃᐃⲆⲆᐃⲆ: "img/night-hand-skin96.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/day-hand-skin97.png",
    ⲆⵠⵠΔⵠⵠᐃ: "img/night-hand-skin97.png",
    ⵠⵠΔⵠⵠᐃΔ: "img/day-hand-skin98.png",
    ⲆΔⲆᐃᐃΔⵠ: "img/night-hand-skin98.png",
    ᐃⵠᐃⲆⲆⲆΔ: "img/day-hand-skin99.png",
    ⵠᐃΔⵠⲆⵠⲆ: "img/night-hand-skin99.png",
    ⲆᐃΔⲆⲆⵠⲆ: "img/day-hand-skin100.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/night-hand-skin100.png",
    ⲆⵠⲆᐃⲆⲆⲆ: "img/day-hand-skin101.png",
    ⵠᐃΔⵠⵠⲆⲆ: "img/night-hand-skin101.png",
    ΔᐃΔΔΔⲆⲆ: "img/day-hand-skin102.png",
    ᐃᐃΔⲆᐃⲆᐃ: "img/night-hand-skin102.png",
    ⲆΔⲆⵠⵠΔⲆ: "img/day-hand-skin103.png",
    ᐃⲆᐃⵠΔⵠⵠ: "img/night-hand-skin103.png",
    ΔⲆⵠⵠΔᐃⵠ: "img/day-hand-skin104.png",
    ᐃΔⲆⵠⵠΔΔ: "img/night-hand-skin104.png",
    ΔⲆΔⲆⵠⲆᐃ: "img/day-hand-skin105.png",
    ⲆⵠⲆⵠⲆΔⵠ: "img/night-hand-skin105.png",
    ᐃⲆⲆᐃᐃⲆⵠ: "img/day-hand-skin106.png",
    ᐃΔᐃⵠⵠⵠⵠ: "img/night-hand-skin106.png",
    ᐃⵠⵠΔΔᐃᐃ: "img/day-hand-skin107.png",
    ᐃΔΔⲆⲆΔᐃ: "img/night-hand-skin107.png",
    ΔⵠᐃⲆⵠᐃⲆ: "img/day-hand-skin108.png",
    ⵠⲆΔᐃΔᐃⲆ: "img/night-hand-skin108.png",
    ⲆⵠⲆⵠⵠⵠΔ: "img/day-hand-skin109.png",
    ⵠᐃⵠΔⵠⵠⲆ: "img/night-hand-skin109.png",
    ᐃⲆⲆΔⵠⵠᐃ: "img/day-hand-skin110.png",
    ⲆⲆΔᐃⲆᐃⵠ: "img/night-hand-skin110.png",
    ⵠᐃᐃⵠⲆⵠⲆ: "img/day-hand-skin111.png",
    ΔᐃΔᐃᐃΔᐃ: "img/night-hand-skin111.png",
    ⵠᐃⲆⵠⵠΔΔ: "img/day-hand-skin112.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/night-hand-skin112.png",
    ⲆⵠΔⲆᐃᐃΔΔΔ: "img/day-hand-skin113.png",
    ᐃⵠᐃⵠⲆⵠᐃⵠⵠ: "img/night-hand-skin113.png",
    ᐃΔᐃΔᐃΔΔ: "img/day-hand-skin114.png",
    ⵠᐃⲆΔΔΔⲆ: "img/night-hand-skin114.png",
    ⵠΔᐃΔⵠⲆᐃ: "img/day-hand-skin115.png",
    ⲆΔᐃΔΔⲆᐃ: "img/night-hand-skin115.png",
    ⵠᐃⲆΔΔᐃΔ: "img/day-hand-skin116.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/night-hand-skin116.png",
    ⵠᐃᐃⲆⵠΔΔ: "img/day-hand-skin117.png",
    ᐃⲆⵠᐃⲆᐃᐃ: "img/night-hand-skin117.png",
    ⲆΔⵠΔⵠᐃⲆ: "img/day-hand-skin118.png",
    ⲆⵠⵠΔΔⵠΔ: "img/night-hand-skin118.png",
    ⲆᐃⲆᐃⵠⲆⵠ: "img/day-hand-skin119.png",
    ΔⲆᐃΔⲆΔⵠ: "img/night-hand-skin119.png",
    ⵠⲆΔⵠᐃⲆΔ: "img/day-hand-skin120.png",
    ⲆⲆⲆΔⵠⵠᐃ: "img/night-hand-skin120.png",
    ⵠⲆⲆᐃⵠⵠΔ: "img/day-hand-skin122.png",
    ⲆᐃᐃⲆᐃⵠⵠ: "img/night-hand-skin122.png",
    ᐃⵠⵠⲆΔᐃΔ: "img/day-hand-skin122.png",
    ⲆΔᐃᐃᐃᐃⲆ: "img/night-hand-skin122.png",
    ΔΔΔⵠᐃᐃⵠ: "img/day-hand-skin122.png",
    ΔⵠᐃⲆΔⲆⲆ: "img/night-hand-skin122.png",
    ᐃΔⲆⲆΔⲆᐃ: "img/day-hand-skin124.png",
    ⵠⲆⵠⲆⵠⵠⵠ: "img/night-hand-skin124.png",
    ᐃᐃⵠΔΔᐃΔ: "img/day-hand-skin125.png",
    ᐃΔΔⲆⲆⲆᐃ: "img/night-hand-skin125.png",
    ΔⵠⵠⵠΔΔⵠ: "img/day-hand-skin126.png",
    ⲆᐃⲆᐃΔⵠⲆ: "img/night-hand-skin126.png",
    ⲆⲆⵠᐃⵠΔⲆ: "img/day-hand-skin127.png",
    ᐃⵠΔⵠᐃᐃᐃ: "img/night-hand-skin127.png",
    ΔᐃⵠᐃⲆⵠᐃ: "img/day-hand-skin128.png",
    Ⲇᐃⵠᐃⵠⵠᐃ: "img/night-hand-skin128.png",
    ⵠᐃΔᐃΔⵠΔ: "img/day-hand-skin129.png",
    ⲆᐃⲆⵠΔᐃΔ: "img/night-hand-skin129.png",
    ⵠⲆᐃᐃΔΔⲆ: "img/day-hand-skin130.png",
    ⵠᐃᐃΔⵠᐃⵠ: "img/night-hand-skin130.png",
    ⲆᐃⲆⲆⵠᐃⲆ: "img/day-hand-skin131.png",
    ⵠΔΔⵠⵠΔᐃ: "img/night-hand-skin131.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/day-hand-skin130.png",
    ᐃⲆⲆΔΔⵠᐃ: "img/night-hand-skin130.png",
    ᐃᐃᐃᐃⵠᐃⲆ: "img/day-hand-skin133.png",
    ΔᐃΔⲆΔⲆⲆ: "img/night-hand-skin133.png",
    ΔᐃΔⵠΔᐃⵠ: "img/day-hand-skin134.png",
    ᐃⲆᐃᐃⲆⵠⵠ: "img/night-hand-skin134.png",
    ΔⲆⲆⵠⲆΔⵠ: "img/day-hand-skin135.png",
    ᐃⲆⵠⵠΔΔⲆ: "img/night-hand-skin135.png",
    ⲆⵠⲆⵠΔΔⵠ: "img/day-hand-skin136.png",
    ⵠⵠⲆⵠⵠᐃΔ: "img/night-hand-skin136.png",
    ΔⲆⵠⲆᐃᐃⵠ: "img/day-hand-skin137.png",
    ΔⵠⵠⵠΔⵠΔ: "img/night-hand-skin137.png",
    ΔᐃⲆⲆᐃⵠⲆ: "img/day-hand-skin138.png",
    ΔΔⵠⵠⵠΔⵠ: "img/night-hand-skin138.png",
    ⵠⲆⵠⲆΔⵠᐃ: "img/day-hand-skin139.png",
    ⲆᐃⲆⵠΔᐃⲆ: "img/night-hand-skin139.png",
    ᐃⲆⵠⵠⲆⵠⲆ: "img/day-hand-skin140.png",
    ᐃⵠⵠⵠⵠⵠⲆ: "img/night-hand-skin140.png",
    ᐃᐃⲆⲆⲆΔΔ: "img/day-hand-skin141.png",
    ᐃᐃᐃⵠΔⵠⲆ: "img/night-hand-skin141.png",
    ⲆⵠᐃⲆⵠᐃᐃ: "img/day-hand-skin142.png",
    ⵠᐃⲆⵠⲆᐃᐃ: "img/night-hand-skin142.png",
    ⵠⲆⵠⵠⵠⲆᐃ: "img/day-hand-skin143.png",
    ⲆⲆⵠᐃΔΔΔ: "img/night-hand-skin143.png",
    ⲆⵠΔⲆⵠΔⲆ: "img/day-hand-skin144.png",
    ΔⲆΔⵠΔΔᐃ: "img/night-hand-skin144.png",
    ᐃⲆⲆΔⵠⵠⲆ: "img/day-hand-skin145.png",
    ᐃΔᐃⵠΔΔᐃ: "img/night-hand-skin145.png",
    ᐃᐃᐃⲆⵠⲆⲆ: "img/day-hand-skin146.png",
    ΔᐃⲆᐃΔⲆⲆ: "img/night-hand-skin146.png",
    ᐃᐃΔΔⵠⵠⲆ: "img/day-hand-skin147.png",
    ΔⵠΔⲆⵠⵠⲆ: "img/night-hand-skin147.png",
    ⵠⲆᐃΔΔⲆᐃ: "img/day-hand-skin148.png",
    ΔⵠΔΔΔΔⲆ: "img/night-hand-skin148.png",
    ΔᐃᐃⵠⲆᐃⲆ: "img/day-hand-skin149.png",
    ⵠⵠⲆⵠᐃⲆⲆ: "img/night-hand-skin149.png",
    ΔᐃⵠⲆⵠⵠⵠ: "img/day-hand-skin150.png",
    ΔⵠΔⵠᐃⲆᐃ: "img/night-hand-skin150.png",
    ΔᐃⲆΔΔᐃᐃ: "img/day-hand-skin151.png",
    ⵠⲆΔᐃᐃⵠᐃ: "img/night-hand-skin151.png",
    ⲆᐃⲆᐃⲆᐃΔ: "img/day-hand-skin152.png",
    ⵠᐃⲆⲆⲆΔΔ: "img/night-hand-skin152.png",
    ⵠⲆΔⵠᐃΔⵠ: "img/day-hand-skin153.png",
    ᐃΔⵠⵠⲆⵠⵠ: "img/night-hand-skin153.png",
    ⲆΔΔⵠΔΔᐃ: "img/day-hand-skin154.png",
    ⲆΔΔΔⵠᐃᐃ: "img/night-hand-skin154.png",
    ΔᐃⲆᐃⲆΔΔ: "img/day-hand-skin155.png",
    ᐃᐃᐃⵠΔⵠΔ: "img/night-hand-skin155.png",
    ⵠΔΔᐃΔⵠΔ: "img/day-hand-skin156.png",
    ᐃΔᐃᐃⵠⲆᐃ: "img/night-hand-skin156.png",
    ⵠⵠⵠᐃΔΔΔ: "img/day-hand-skin157.png",
    ⲆᐃⵠᐃΔⵠⵠ: "img/night-hand-skin157.png",
    ΔΔⵠⲆΔⵠΔ: "img/day-hand-skin158.png",
    ⲆⵠⲆⵠᐃᐃⲆ: "img/night-hand-skin158.png",
    ⲆⲆΔᐃΔᐃΔ: "img/day-hand-skin159.png",
    ΔᐃⵠⵠΔⲆΔ: "img/night-hand-skin159.png",
    ⲆⲆΔⵠΔⲆⲆ: "img/day-hand-skin160.png",
    ᐃᐃΔⵠᐃⲆΔ: "img/night-hand-skin160.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/day-hand-skin161.png",
    ⲆᐃⵠⲆⵠⵠⲆ: "img/night-hand-skin161.png",
    ΔΔᐃΔⵠⲆΔ: "img/day-hand-skin162.png",
    ⲆᐃΔⲆᐃⲆⲆ: "img/night-hand-skin162.png",
    ⲆⲆᐃΔⲆᐃⵠ: "img/day-hand-skin163.png",
    ΔΔᐃⵠΔⲆⵠ: "img/night-hand-skin163.png",
    ⲆᐃΔΔΔΔᐃ: "img/day-hand-skin164.png",
    ᐃⵠΔᐃΔᐃΔ: "img/night-hand-skin164.png",
    ⵠᐃⲆⲆᐃΔⵠ: "img/day-hand-skin165.png",
    ΔᐃⲆᐃᐃᐃⲆ: "img/night-hand-skin165.png",
    ⲆⲆⵠⲆⵠⲆⵠ: "img/day-hand-skin166.png",
    ⲆᐃⲆΔΔᐃΔ: "img/night-hand-skin166.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/day-hand-skin167.png",
    ΔⲆⵠⵠΔⲆⲆ: "img/night-hand-skin167.png",
    ⲆᐃⲆᐃΔᐃⵠ: "img/day-hand-skin168.png",
    ΔΔΔΔⵠⵠⲆ: "img/night-hand-skin168.png",
    ΔⲆⲆⲆⵠⵠΔ: "img/day-hand-skin169.png",
    ⲆⲆΔⵠΔⲆΔ: "img/night-hand-skin169.png",
    ᐃΔΔᐃᐃᐃⲆ: "img/day-hand-skin170.png",
    ᐃⲆⵠⲆΔⲆⲆ: "img/night-hand-skin170.png",
    ⵠⵠⵠΔⲆⲆⲆ: "img/day-hand-skin171.png",
    ᐃⵠⲆΔⵠⵠⵠ: "img/night-hand-skin171.png",
    ΔⲆᐃᐃⵠⲆΔ: "img/day-hand-skin172.png",
    ⵠΔᐃᐃⵠⵠΔ: "img/night-hand-skin172.png",
    ᐃΔⲆⵠΔᐃⲆ: "img/day-hand-skin173.png",
    ΔⲆᐃⵠΔΔⵠ: "img/night-hand-skin173.png",
    ⵠⵠΔᐃᐃⵠΔ: "img/day-hand-skin174.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/night-hand-skin174.png",
    ⲆⵠΔᐃⲆΔⲆ: "img/day-hand-skin175.png",
    ⲆΔⲆΔᐃΔⲆ: "img/night-hand-skin175.png",
    ᐃⲆᐃⵠⲆΔⲆ: "img/day-hand-skin176.png",
    ΔⲆᐃⵠⲆᐃⵠ: "img/night-hand-skin176.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/day-hand-skin177.png",
    ⲆΔⵠΔⲆⲆΔ: "img/night-hand-skin177.png",
    ᐃⲆⲆⲆᐃᐃⵠ: "img/day-hand-skin178.png",
    ᐃΔⵠⵠⲆⲆⵠ: "img/night-hand-skin178.png",
    ⲆᐃⲆΔᐃⲆⵠ: "img/day-hand-skin179.png",
    ᐃΔᐃⲆⵠⵠⲆ: "img/night-hand-skin179.png",
    Ⲇᐃᐃᐃᐃᐃⵠ: "img/day-hand-skin180.png",
    ΔᐃⲆⲆᐃΔⵠ: "img/night-hand-skin180.png",
    ᐃΔⵠⲆᐃⲆⵠ: "img/day-hand-skin181.png",
    ⲆᐃΔΔⵠⲆΔ: "img/night-hand-skin181.png",
    ⲆᐃⲆⵠᐃΔⵠ: "img/day-hand-skin182.png",
    ΔΔⵠΔⵠᐃᐃ: "img/night-hand-skin182.png",
    ⵠⵠⲆⵠΔᐃΔ: "img/day-hand-skin183.png",
    ΔⵠᐃΔⲆΔⲆ: "img/night-hand-skin183.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/day-hand-skin184.png",
    ⵠᐃⵠΔᐃⲆⲆ: "img/night-hand-skin184.png",
    ΔⲆⵠⲆⵠⵠⵠ: "img/day-hand-skin185.png",
    ᐃⵠᐃⵠⵠⲆᐃ: "img/night-hand-skin185.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/day-hand-skin186.png",
    ᐃΔⲆⵠᐃⵠⵠ: "img/night-hand-skin186.png",
    ⵠᐃⲆᐃᐃⲆᐃ: "img/day-hand-skin187.png",
    ΔΔᐃⵠⲆⲆⵠ: "img/night-hand-skin187.png",
    ΔⵠΔⵠΔⲆΔ: "img/day-hand-skin188.png",
    ΔᐃΔΔⲆΔⵠ: "img/night-hand-skin188.png",
    ⲆⵠᐃⵠⲆᐃΔ: "img/day-hand-skin189.png",
    ΔᐃΔΔΔΔⵠ: "img/night-hand-skin189.png",
    ᐃⵠΔΔᐃⲆᐃ: "img/day-hand-skin190.png",
    ᐃⲆⵠΔᐃᐃΔ: "img/night-hand-skin190.png",
    ⲆⵠⲆⵠⵠⲆᐃ: "img/day-hand-skin191.png",
    ᐃΔΔⲆΔⵠⲆ: "img/night-hand-skin191.png",
    ᐃᐃΔⵠⵠⵠᐃ: "img/day-hand-skin192.png",
    ᐃΔᐃᐃᐃᐃⵠ: "img/night-hand-skin192.png",
    ⲆΔᐃⲆΔⲆΔ: "img/day-hand-skin193.png",
    ΔᐃΔⵠᐃⵠⲆ: "img/night-hand-skin193.png",
    ᐃⵠⵠⵠⵠⲆⵠ: "img/day-hand-skin194.png",
    ⲆⵠᐃᐃᐃΔⵠ: "img/night-hand-skin194.png",
    ᐃᐃⲆⲆⲆⲆⵠ: "img/day-hand-skin195.png",
    ⲆⲆⵠⲆⵠⵠⲆ: "img/night-hand-skin195.png",
    ⵠΔΔⲆⵠᐃⵠ: "img/day-hand-skin196.png",
    ᐃΔΔΔⵠⵠΔ: "img/night-hand-skin196.png",
    ⵠⵠΔΔΔᐃⵠ: "img/day-hand-skin197.png",
    ⲆΔᐃⲆΔᐃⵠ: "img/night-hand-skin197.png",
    ⵠⲆᐃᐃⵠⲆⵠ: "img/day-hand-skin198.png",
    ΔᐃⵠⲆⲆⵠᐃ: "img/night-hand-skin198.png",
    ΔⵠⲆⵠⵠΔΔ: "img/day-hand-skin199.png",
    ⲆⵠΔⲆⵠⲆᐃ: "img/night-hand-skin199.png",
    ⲆⲆΔⲆⵠⲆⵠ: "img/day-hand-skin200.png",
    ⲆⵠⵠΔΔⲆΔ: "img/night-hand-skin200.png",
    ⲆⲆⵠᐃΔᐃΔ: "img/day-hand-skin201.png",
    ⲆⵠΔⵠΔⵠᐃ: "img/night-hand-skin201.png",
    ⵠᐃΔΔⵠⵠΔ: "img/day-hand-skin202.png",
    ⲆᐃⲆΔⲆᐃⵠ: "img/night-hand-skin202.png",
    ⵠΔΔᐃΔⵠⵠ: "img/day-hand-skin203.png",
    ⵠᐃΔⲆⵠⵠΔ: "img/night-hand-skin203.png",
    ᐃΔᐃᐃΔⲆΔ: "img/day-hand-skin204.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/night-hand-skin204.png",
    ⲆⲆⵠⲆΔⲆⵠ: "img/day-hand-skin205.png",
    ΔᐃⲆⲆᐃᐃⲆ: "img/night-hand-skin205.png",
    ⵠⵠⲆΔᐃⲆⲆ: "img/day-hand-skin206.png",
    ⲆⲆᐃᐃⵠⵠᐃ: "img/night-hand-skin206.png",
    ⲆᐃᐃⲆΔⲆΔ: "img/day-hand-skin207.png",
    ΔΔᐃⲆⵠⵠΔ: "img/night-hand-skin207.png",
    ᐃⲆΔⲆⲆᐃΔ: "img/day-hand-skin208.png",
    ⲆⲆᐃⲆᐃΔᐃ: "img/night-hand-skin208.png",
    ΔⲆⲆΔⵠΔᐃ: "img/day-hand-skin209.png",
    ⲆⵠⵠⵠΔᐃᐃ: "img/night-hand-skin209.png",
    ᐃΔⵠⲆⲆᐃᐃ: "img/day-hand-skin210.png",
    ᐃᐃⵠΔⵠⵠⵠ: "img/night-hand-skin210.png",
    ᐃⲆΔᐃⵠᐃΔ: "img/day-hand-skin211.png",
    ᐃΔΔⵠΔⲆⲆ: "img/night-hand-skin211.png",
    ⵠⵠⲆΔⲆⵠᐃ: "img/day-hand-skin212.png",
    ⲆᐃⲆⲆΔᐃⲆ: "img/night-hand-skin212.png",
    ⲆᐃⲆⲆᐃΔⵠ: "img/day-bag-star0.png",
    ΔⵠᐃⵠⲆΔⵠ: "img/night-bag-star0.png",
    ᐃⵠᐃΔⵠᐃⵠ: "img/day-bag0.png",
    ᐃⵠᐃΔⲆᐃΔ: "img/night-bag0.png",
    ᐃⲆᐃⲆⲆΔᐃ: "img/day-bag1.png",
    ᐃⲆᐃⲆⵠΔⵠ: "img/night-bag1.png",
    ⵠᐃΔᐃⵠΔⵠ: "img/day-bag2.png",
    ⵠΔⲆⲆⲆᐃᐃ: "img/night-bag2.png",
    ᐃΔᐃΔⵠΔΔ: "img/day-bag3.png",
    ⲆⵠⵠΔΔⲆⲆ: "img/night-bag3.png",
    ᐃᐃΔⲆΔⵠⲆ: "img/day-bag4.png",
    ⵠⲆⲆᐃΔⲆⵠ: "img/night-bag4.png",
    ΔⲆᐃΔⵠⲆⲆ: "img/day-bag5.png",
    ⲆⲆᐃΔΔⵠⵠ: "img/night-bag5.png",
    ⵠᐃⵠⵠⵠΔΔ: "img/day-bag6.png",
    ΔⲆᐃⲆⵠⲆⲆ: "img/night-bag6.png",
    ⲆΔⵠᐃΔⵠΔ: "img/day-bag7.png",
    ΔᐃⲆΔⵠⲆᐃ: "img/night-bag7.png",
    ΔΔⲆᐃΔⲆⲆ: "img/day-bag8.png",
    ᐃᐃⵠⵠⵠᐃⵠ: "img/night-bag8.png",
    ΔΔΔΔᐃⲆΔ: "img/day-bag9.png",
    ΔⲆᐃΔΔΔΔ: "img/night-bag9.png",
    ⵠᐃⲆΔⲆⵠΔ: "img/day-bag10.png",
    ⵠⲆΔΔⲆⵠⲆ: "img/night-bag10.png",
    ᐃⲆΔⲆΔΔⵠ: "img/day-bag11.png",
    ΔᐃⵠⲆᐃᐃᐃ: "img/night-bag11.png",
    ⵠⲆⲆᐃᐃΔᐃ: "img/day-bag13.png",
    ⵠᐃⲆᐃᐃᐃⵠ: "img/night-bag13.png",
    ⲆⲆⲆᐃⲆⵠⵠ: "img/day-bag14.png",
    ⲆⵠΔⵠᐃⲆⵠ: "img/night-bag14.png",
    ΔⲆᐃⲆⲆᐃᐃ: "img/day-bag16.png",
    ⲆΔΔⵠΔᐃᐃ: "img/night-bag16.png",
    ⲆΔΔᐃᐃᐃⵠ: "img/day-bag17.png",
    ⵠΔΔΔᐃⵠΔ: "img/night-bag17.png",
    ⵠⲆΔⵠΔΔᐃ: "img/day-bag18.png",
    ᐃᐃΔᐃᐃⵠᐃ: "img/night-bag18.png",
    ⵠΔᐃᐃᐃᐃⵠ: "img/day-bag19.png",
    ΔⲆΔΔⲆᐃⵠ: "img/night-bag19.png",
    ᐃᐃᐃⵠᐃⲆⵠ: "img/day-bag20.png",
    ΔⲆⲆΔΔᐃⵠ: "img/night-bag20.png",
    ⵠⵠⵠΔᐃⲆΔ: "img/day-bag21.png",
    ᐃΔⵠᐃⲆⵠⵠ: "img/night-bag21.png",
    ᐃΔᐃⵠΔⲆⲆ: "img/day-bag22.png",
    ⲆⲆΔᐃⵠΔⵠ: "img/night-bag22.png",
    ⵠΔⲆᐃΔⲆⲆ: "img/day-bag23.png",
    ⲆⵠⲆΔⵠⵠⵠ: "img/night-bag23.png",
    ⲆᐃΔᐃᐃⵠⵠ: "img/day-bag24.png",
    ⵠΔⵠⵠⲆΔⲆ: "img/night-bag24.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/day-bag25.png",
    ΔⵠᐃⲆΔΔⵠ: "img/night-bag25.png",
    ΔⲆᐃⵠⵠΔᐃ: "img/day-bag26.png",
    ᐃᐃΔΔⲆⵠᐃ: "img/night-bag26.png",
    ΔⲆᐃΔⲆΔᐃ: "img/day-bag27.png",
    ⲆΔΔᐃⵠΔⲆ: "img/night-bag27.png",
    ᐃᐃᐃⵠⵠⲆⲆ: "img/day-bag28.png",
    ᐃᐃⲆⵠᐃΔⲆ: "img/night-bag28.png",
    ΔᐃⵠⵠΔⵠΔ: "img/day-bag29.png",
    ᐃⲆΔᐃⵠⲆⵠ: "img/night-bag29.png",
    ᐃⵠⵠⵠⲆⵠᐃ: "img/day-bag30.png",
    ⵠᐃⵠΔᐃᐃⵠ: "img/night-bag30.png",
    ⵠᐃⵠⵠⵠᐃⵠ: "img/day-bag31.png",
    ⵠΔΔᐃΔΔᐃ: "img/night-bag31.png",
    ⵠᐃⲆⵠΔⲆᐃ: "img/day-bag32.png",
    ⲆΔⲆⵠⵠᐃⵠ: "img/night-bag32.png",
    ΔⲆᐃⲆⵠᐃᐃ: "img/day-bag33.png",
    ⵠⵠΔᐃⵠⲆⲆ: "img/night-bag33.png",
    ΔⲆΔᐃᐃΔΔ: "img/day-bag34.png",
    ᐃⵠⲆⵠⲆᐃᐃ: "img/night-bag34.png",
    ⲆⲆᐃΔⲆⵠΔ: "img/day-bag35.png",
    ᐃΔᐃⲆⵠΔⲆ: "img/night-bag35.png",
    ᐃⵠⵠΔⵠΔᐃ: "img/day-bag36.png",
    ⵠᐃᐃΔⵠΔΔ: "img/night-bag36.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/day-bag37.png",
    ⲆΔⲆⵠΔᐃⲆ: "img/night-bag37.png",
    ⵠⵠΔⲆᐃⲆⲆ: "img/day-bag38.png",
    ⵠΔⲆᐃΔΔᐃ: "img/night-bag38.png",
    ᐃⲆᐃᐃᐃⵠΔ: "img/day-bag39.png",
    ᐃΔⵠⵠΔΔᐃ: "img/night-bag39.png",
    ᐃⲆⵠᐃⲆⲆᐃ: "img/day-bag40.png",
    ᐃΔⵠΔⲆⵠΔ: "img/night-bag40.png",
    ΔⵠⵠⵠⵠⲆⲆ: "img/day-bag41.png",
    ᐃΔᐃⲆᐃΔⵠ: "img/night-bag41.png",
    ᐃᐃᐃⵠⵠΔⵠ: "img/day-bag42.png",
    ⵠⵠΔΔΔΔⵠ: "img/night-bag42.png",
    ΔⵠᐃⲆⵠᐃΔ: "img/day-bag43.png",
    ᐃᐃᐃᐃⲆΔΔ: "img/night-bag43.png",
    ᐃⲆⵠᐃᐃᐃⵠ: "img/day-bag44.png",
    ⲆⲆᐃΔΔᐃⲆ: "img/night-bag44.png",
    ⵠⵠⲆⵠΔⲆᐃ: "img/day-bag45.png",
    ⲆᐃⵠⲆΔΔⵠ: "img/night-bag45.png",
    ᐃᐃᐃⵠᐃΔᐃ: "img/day-bag46.png",
    ᐃⵠⲆⵠⵠⲆΔ: "img/night-bag46.png",
    ⵠΔⲆⵠᐃᐃᐃ: "img/day-bag47.png",
    ⲆᐃΔⵠⵠⵠᐃ: "img/night-bag47.png",
    ⵠᐃΔΔⵠⵠᐃ: "img/day-bag48.png",
    ΔⲆΔᐃΔⵠᐃ: "img/night-bag48.png",
    ᐃⲆᐃⵠᐃᐃⵠ: "img/day-bag49.png",
    ⵠΔⵠⲆⵠΔᐃ: "img/night-bag49.png",
    ⲆⲆᐃΔⵠⵠⵠ: "img/day-bag50.png",
    ΔᐃΔᐃΔⲆᐃ: "img/night-bag50.png",
    ᐃⵠΔΔΔΔⲆ: "img/day-bag51.png",
    ΔⲆΔⵠⵠⲆⵠ: "img/night-bag51.png",
    ΔⵠⵠⵠᐃΔΔ: "img/day-bag52.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/night-bag52.png",
    ΔᐃΔΔᐃⵠΔ: "img/day-bag53.png",
    ΔΔΔᐃᐃᐃᐃ: "img/night-bag53.png",
    ⵠᐃᐃⲆⲆⵠᐃ: "img/day-bag54.png",
    ⵠᐃⲆⵠΔᐃᐃ: "img/night-bag54.png",
    ᐃᐃⵠⲆⲆᐃⲆ: "img/day-bag55.png",
    ⵠᐃᐃΔΔⵠⲆ: "img/night-bag55.png",
    ΔᐃⲆᐃⵠᐃΔ: "img/day-bag56.png",
    ΔΔΔⲆΔᐃⵠ: "img/night-bag56.png",
    ⲆᐃⲆᐃⲆΔⵠ: "img/day-bag57.png",
    ᐃᐃⲆᐃⵠⲆᐃ: "img/night-bag57.png",
    ⲆⵠΔᐃΔΔΔ: "img/day-bag58.png",
    ᐃᐃⲆᐃᐃⲆⵠ: "img/night-bag58.png",
    ⵠⵠⲆᐃᐃⲆᐃ: "img/day-bag59.png",
    ⲆΔⲆΔᐃⲆΔ: "img/night-bag59.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/day-bag60.png",
    ΔⵠᐃⲆⵠΔΔ: "img/night-bag60.png",
    ⵠᐃΔᐃⲆΔΔ: "img/day-bag61.png",
    ᐃⲆⲆΔΔⵠⲆ: "img/night-bag61.png",
    ⲆⵠⲆⲆᐃⵠⲆ: "img/day-bag62.png",
    Ⲇⵠⵠᐃᐃⵠᐃ: "img/night-bag62.png",
    ⵠΔΔⲆᐃⲆⵠ: "img/day-bag63.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/night-bag63.png",
    ᐃᐃⵠΔᐃⵠⲆ: "img/day-bag64.png",
    ⲆⲆΔⵠᐃΔⲆ: "img/night-bag64.png",
    ⲆⵠⲆⵠⵠᐃΔ: "img/day-bag65.png",
    ⵠⵠᐃᐃⵠⲆⲆ: "img/night-bag65.png",
    ᐃⵠΔⲆⲆᐃᐃ: "img/day-bag66.png",
    ⵠᐃⵠᐃᐃⵠⵠ: "img/night-bag66.png",
    ⵠⲆⵠᐃᐃⵠⲆ: "img/day-bag67.png",
    ΔᐃⲆⲆⲆⲆⲆ: "img/night-bag67.png",
    ⲆⲆᐃⲆΔⲆᐃ: "img/day-bag68.png",
    ᐃᐃᐃⲆⲆᐃΔ: "img/night-bag68.png",
    ΔᐃᐃⲆⵠΔᐃ: "img/day-bag69.png",
    ⵠᐃᐃΔᐃⲆΔ: "img/night-bag69.png",
    ΔᐃΔᐃⵠΔⵠ: "img/day-bag70.png",
    ΔᐃᐃᐃⲆⲆΔ: "img/night-bag70.png",
    ᐃΔΔⲆⵠⵠᐃ: "img/day-bag71.png",
    ⲆⵠΔΔⲆⲆΔ: "img/night-bag71.png",
    ΔΔⵠⵠⵠΔⲆ: "img/day-bag72.png",
    ΔᐃΔⲆΔⲆⵠ: "img/night-bag72.png",
    ⵠⲆΔⵠΔΔΔ: "img/day-bag73.png",
    ᐃᐃᐃⲆΔᐃⲆ: "img/night-bag73.png",
    ΔᐃΔⲆΔⵠⲆ: "img/day-bag74.png",
    ⲆⵠᐃΔⲆᐃⲆ: "img/night-bag74.png",
    ᐃⲆΔⲆⵠⲆⲆ: "img/day-bag75.png",
    ᐃⲆᐃΔΔⵠᐃ: "img/night-bag75.png",
    ⵠⵠⵠⵠⵠⵠᐃ: "img/day-bag76.png",
    ΔᐃⵠⵠⵠᐃⲆ: "img/night-bag76.png",
    ΔⲆⲆⲆᐃⵠⵠ: "img/day-bag77.png",
    ⲆᐃΔⲆⲆΔⵠ: "img/night-bag77.png",
    ⵠΔⵠᐃᐃⲆⵠ: "img/day-bag78.png",
    Δⵠᐃⵠᐃᐃᐃ: "img/night-bag78.png",
    ΔΔᐃⲆᐃⵠᐃ: "img/day-bag79.png",
    ᐃⵠⵠⵠᐃᐃΔ: "img/night-bag79.png",
    ⲆⲆᐃⲆΔⵠⲆ: "img/day-bag80.png",
    ⲆᐃⲆΔⵠᐃᐃ: "img/night-bag80.png",
    ᐃⵠᐃΔΔᐃⲆ: "img/day-accessory0.png",
    ⲆⵠᐃⲆⵠΔΔ: "img/day-accessory0-pacques.png",
    ⵠᐃΔΔΔⲆⵠ: "img/night-accessory0-pacques.png",
    ΔΔᐃΔᐃΔⵠ: "img/day-accessory13.png",
    ᐃᐃΔᐃΔᐃⵠ: "img/night-accessory13.png",
    ⵠᐃᐃᐃΔⲆⲆ: "img/day-accessory14.png",
    ⲆΔᐃⵠⲆⵠⲆ: "img/night-accessory14.png",
    ᐃᐃΔᐃⵠⵠⵠ: "img/day-accessory15.png",
    ⵠΔⲆⲆᐃᐃⲆ: "img/night-accessory15.png",
    ⵠΔⵠⵠⵠΔᐃ: "img/day-accessory16.png",
    ΔΔΔⲆⵠᐃⲆ: "img/night-accessory16.png",
    ⲆⵠᐃⲆⵠⲆⲆ: "img/day-accessory17.png",
    ᐃᐃΔᐃⲆᐃΔ: "img/day-accessory17.png",
    ΔⲆⵠⵠⵠᐃⵠ: "img/day-accessory19.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/night-accessory19.png",
    ΔⵠᐃΔⵠΔΔ: "img/day-accessory20.png",
    ⲆⵠⲆⵠΔᐃΔ: "img/night-accessory20.png",
    ΔΔΔᐃᐃΔⲆ: "img/day-accessory21.png",
    ΔⵠⲆᐃΔⵠⲆ: "img/night-accessory21.png",
    ᐃΔⵠⲆⵠᐃΔ: "img/day-accessory22.png",
    ⵠⵠⵠⵠᐃⵠⲆ: "img/night-accessory22.png",
    ⲆΔⵠⲆⵠⲆⵠ: "img/day-accessory23.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/night-accessory23.png",
    ΔΔⵠΔⲆⲆⵠ: "img/day-accessory24.png",
    ᐃΔⲆⵠΔΔΔ: "img/night-accessory24.png",
    ⵠΔⵠⵠⲆΔᐃ: "img/day-accessory25.png",
    ⵠⵠⲆΔΔⵠⲆ: "img/night-accessory25.png",
    ᐃⲆⵠΔⲆⲆⵠ: "img/day-accessory26.png",
    ⵠΔⵠⲆⵠⵠⲆ: "img/night-accessory26.png",
    ⲆⵠⲆᐃᐃⲆΔ: "img/day-accessory27.png",
    ᐃⲆⵠΔᐃΔⲆ: "img/night-accessory27.png",
    ᐃⲆⲆⵠⵠᐃΔ: "img/day-accessory18.png",
    ⵠΔΔᐃΔⵠⲆ: "img/night-accessory18.png",
    ⲆⵠⵠΔⵠᐃᐃ: "img/day-accessory29.png",
    ⲆΔᐃⲆⲆⲆᐃ: "img/night-accessory29.png",
    ᐃᐃⲆᐃⲆᐃΔ: "img/day-accessory30.png",
    ΔⵠⵠΔⵠΔⵠ: "img/night-accessory30.png",
    ⲆⲆⵠΔᐃΔⲆ: "img/day-accessory31.png",
    ⲆΔⵠΔΔⵠᐃ: "img/night-accessory31.png",
    ᐃⵠⵠⵠᐃⲆⵠ: "img/day-accessory32.png",
    ΔⲆⲆᐃⵠΔⲆ: "img/night-accessory32.png",
    ΔⲆΔⲆⵠΔⲆ: "img/day-accessory33.png",
    ⲆᐃΔΔΔᐃⵠ: "img/night-accessory33.png",
    ⲆΔⲆΔⵠⵠⲆ: "img/day-accessory34.png",
    ⵠⲆⵠᐃΔⲆᐃ: "img/night-accessory34.png",
    ⲆⲆᐃΔᐃⲆΔ: "img/day-accessory35.png",
    ΔⵠᐃᐃᐃⵠΔ: "img/night-accessory35.png",
    ⲆᐃΔⵠΔⵠΔ: "img/day-accessory28.png",
    ⵠⵠⵠⵠΔΔΔ: "img/night-accessory28.png",
    ΔⵠΔⵠΔᐃᐃ: "img/day-accessory36.png",
    ⵠᐃⵠΔⵠⲆᐃ: "img/night-accessory36.png",
    ᐃⵠⲆᐃⲆᐃⲆ: "img/day-accessory37.png",
    ⲆⲆⵠᐃΔⵠᐃ: "img/night-accessory37.png",
    ᐃⲆⲆΔᐃⲆΔ: "img/day-accessory39.png",
    ⵠᐃΔⵠΔⲆⵠ: "img/night-accessory39.png",
    ᐃΔⵠᐃⲆⲆⵠ: "img/day-accessory40.png",
    ⵠⲆΔᐃⲆⲆⲆ: "img/night-accessory40.png",
    ΔⵠΔΔⵠⲆⲆ: "img/day-accessory41.png",
    ᐃⲆⲆᐃⵠⲆΔ: "img/night-accessory41.png",
    ⵠᐃⵠⲆⲆΔⵠ: "img/day-accessory42.png",
    ⵠⲆⲆⵠΔΔᐃ: "img/night-accessory42.png",
    ΔⵠⲆⵠΔᐃⲆ: "img/day-accessory43.png",
    ᐃⵠᐃΔΔⲆⲆ: "img/night-accessory43.png",
    ᐃⵠⲆΔΔᐃΔ: "img/day-accessory44.png",
    ⲆⵠⲆΔΔⲆᐃ: "img/night-accessory44.png",
    ⲆΔᐃⲆⵠΔΔ: "img/day-accessory38.png",
    ᐃⵠⵠᐃⵠΔⲆ: "img/night-accessory38.png",
    ᐃΔᐃⵠΔΔΔ: "img/day-accessory46.png",
    ΔⲆᐃᐃⲆⵠᐃ: "img/night-accessory46.png",
    ⵠΔΔⵠᐃᐃΔ: "img/day-accessory47.png",
    ᐃⲆΔⲆⵠⲆΔ: "img/night-accessory47.png",
    ⲆΔΔᐃⵠΔⵠ: "img/day-accessory48.png",
    ⲆⵠᐃⲆΔΔⵠ: "img/night-accessory48.png",
    ⲆⲆⵠᐃᐃΔΔ: "img/day-accessory49.png",
    ᐃⵠᐃᐃᐃⲆΔ: "img/night-accessory49.png",
    ⲆᐃⲆᐃⲆΔΔ: "img/day-accessory45.png",
    ΔⵠⵠΔΔⲆⲆ: "img/night-accessory45.png",
    ⲆΔᐃᐃⲆⲆⵠ: "img/day-accessory50.png",
    ΔⲆᐃⵠᐃΔⲆ: "img/night-accessory50.png",
    ⲆᐃΔⲆᐃΔΔ: "img/day-accessory51.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/night-accessory51.png",
    ΔⵠⲆⲆΔΔⵠ: "img/day-accessory52.png",
    ᐃⵠΔᐃⲆⲆⲆ: "img/night-accessory52.png",
    ⵠⲆⲆⲆⲆᐃⲆ: "img/day-accessory53.png",
    ⵠⲆⲆⲆⵠᐃⲆ: "img/night-accessory53.png",
    ΔⲆⲆⵠⵠⵠΔ: "img/day-accessory54.png",
    ΔⲆⵠΔⲆᐃΔ: "img/night-accessory54.png",
    ⲆΔΔⵠⲆᐃΔ: "img/day-accessory55.png",
    ᐃⲆⵠΔᐃⵠᐃ: "img/night-accessory55.png",
    ⲆⲆᐃΔᐃⵠⲆ: "img/day-accessory56.png",
    ᐃᐃΔⲆⲆΔᐃ: "img/night-accessory56.png",
    ᐃΔⵠΔⵠⵠᐃ: "img/day-accessory57.png",
    ⲆⲆΔⲆⲆⵠᐃ: "img/night-accessory57.png",
    ⵠⵠᐃᐃᐃⲆⲆ: "img/day-accessory58.png",
    ⵠᐃᐃⲆΔⵠⲆ: "img/night-accessory58.png",
    ΔᐃⲆᐃⵠⲆⲆ: "img/day-accessory59.png",
    ΔⵠⵠⵠⲆᐃⲆ: "img/night-accessory59.png",
    ᐃΔΔᐃⲆΔᐃ: "img/day-accessory60.png",
    ⵠᐃⲆΔᐃΔⲆ: "img/night-accessory60.png",
    ⲆΔⵠᐃⵠᐃⲆ: "img/day-accessory61.png",
    ΔⵠΔⵠⵠⲆᐃ: "img/night-accessory61.png",
    ᐃⲆⵠⲆΔⲆΔ: "img/day-accessory62.png",
    ⵠⲆΔᐃᐃⲆⵠ: "img/night-accessory62.png",
    ⲆⵠⲆᐃⵠΔΔ: "img/day-accessory63.png",
    ⲆⲆⵠⲆⲆⲆᐃ: "img/night-accessory63.png",
    ⵠΔΔⲆⵠᐃⲆ: "img/day-accessory64.png",
    ΔⵠⲆΔⵠΔᐃ: "img/night-accessory64.png",
    ΔⲆᐃᐃⵠⵠⵠ: "img/day-accessory65.png",
    ΔⲆΔⵠᐃΔⵠ: "img/night-accessory65.png",
    ⲆᐃᐃⵠⵠΔⵠ: "img/day-accessory66.png",
    ΔΔⲆᐃⲆΔⵠ: "img/night-accessory66.png",
    ᐃᐃᐃᐃⵠⵠⵠ: "img/day-accessory67.png",
    ⲆΔⵠΔⲆⵠᐃ: "img/night-accessory67.png",
    ⲆΔΔᐃΔⲆⲆ: "img/day-accessory68.png",
    ⵠᐃᐃⲆⲆⵠⲆ: "img/night-accessory68.png",
    ᐃᐃⵠⵠᐃⲆᐃ: "img/day-accessory69.png",
    ⵠⵠⵠⵠᐃⲆⵠ: "img/night-accessory69.png",
    ᐃⵠΔᐃΔΔᐃ: "img/day-accessory70.png",
    ⵠⵠᐃᐃⵠᐃⲆ: "img/night-accessory70.png",
    ΔΔⵠⵠⲆⲆⲆ: "img/day-accessory71.png",
    ΔⲆⲆᐃⲆΔⵠ: "img/night-accessory71.png",
    ᐃᐃⲆⲆⲆᐃⵠ: "img/day-accessory72.png",
    ᐃᐃᐃⵠΔⵠⵠ: "img/night-accessory72.png",
    ⲆⵠⲆⵠΔᐃᐃ: "img/day-accessory73.png",
    ᐃⲆⵠⲆΔⵠᐃ: "img/night-accessory73.png",
    ⵠⵠΔⵠⲆΔⵠ: "img/day-accessory74.png",
    ⵠᐃΔΔᐃⲆⲆ: "img/night-accessory74.png",
    ⲆⲆᐃᐃⵠΔⲆ: "img/day-accessory75.png",
    ΔΔΔⲆⵠⵠⲆ: "img/night-accessory75.png",
    ⵠⲆⲆⵠΔᐃⵠ: "img/day-accessory76.png",
    ᐃΔⵠⵠⵠⵠⲆ: "img/night-accessory76.png",
    ΔΔⵠⲆᐃⵠΔ: "img/day-accessory77.png",
    ΔΔⵠΔΔΔⵠ: "img/night-accessory77.png",
    ⲆⵠᐃⵠΔⵠⵠ: "img/day-accessory78.png",
    ᐃΔⵠᐃⲆΔⲆ: "img/night-accessory78.png",
    ⲆᐃⲆᐃᐃⵠⲆ: "img/day-accessory79.png",
    ⵠᐃⲆΔⵠΔΔ: "img/night-accessory79.png",
    ⲆⲆⲆΔⲆΔⲆ: "img/day-accessory80.png",
    ΔⲆⲆⲆᐃⲆᐃ: "img/night-accessory80.png",
    ΔᐃⲆᐃΔⵠΔ: "img/day-accessory81.png",
    ᐃᐃⵠⵠᐃᐃΔ: "img/night-accessory81.png",
    ΔⵠΔⵠⵠⲆⲆ: "img/day-accessory83.png",
    ΔΔⲆⲆⵠΔᐃ: "img/night-accessory83.png",
    ⲆⲆΔᐃᐃΔᐃ: "img/day-accessory84.png",
    ⵠᐃΔᐃⵠⵠⵠ: "img/night-accessory84.png",
    ⵠᐃᐃⲆΔⵠΔ: "img/day-accessory85.png",
    ⵠⲆⵠⵠΔⵠⲆ: "img/night-accessory85.png",
    ⲆⲆΔᐃΔⲆⵠ: "img/day-accessory86.png",
    ᐃⵠⵠΔΔΔΔ: "img/night-accessory86.png",
    ⵠᐃΔΔΔΔⲆ: "img/day-accessory87.png",
    ⲆⲆⵠⵠⲆⵠᐃ: "img/night-accessory87.png",
    ᐃⵠΔᐃⲆΔᐃ: "img/day-accessory88.png",
    ᐃΔᐃΔⲆⲆⵠ: "img/night-accessory88.png",
    ⲆΔⵠⲆΔⵠⵠ: "img/day-accessory89.png",
    ΔⵠᐃⵠⲆⲆΔ: "img/night-accessory89.png",
    ⵠᐃΔᐃᐃΔⵠ: "img/day-accessory90.png",
    ΔⵠⲆᐃᐃᐃᐃ: "img/night-accessory90.png",
    ⲆΔⲆΔΔⵠΔ: "img/day-accessory91.png",
    ⲆⵠᐃᐃΔΔⵠ: "img/night-accessory91.png",
    ᐃⲆⲆᐃⲆᐃᐃ: "img/day-accessory92.png",
    ⵠⲆᐃⲆⵠⲆⲆ: "img/night-accessory92.png",
    ΔⲆᐃΔᐃΔⵠ: "img/day-accessory93.png",
    ⵠⲆᐃⵠⲆⵠⵠ: "img/night-accessory93.png",
    ΔΔΔⲆᐃⵠᐃ: "img/day-accessory94.png",
    ⲆΔᐃⲆⲆⲆⵠ: "img/night-accessory94.png",
    ⲆⲆΔᐃΔⵠΔ: "img/day-accessory95.png",
    ⲆⲆᐃΔΔⵠⲆ: "img/night-accessory95.png",
    ⵠᐃΔⲆⵠⲆΔ: "img/day-accessory96.png",
    ⵠⵠᐃⵠᐃⵠᐃ: "img/night-accessory96.png",
    ⵠΔⲆᐃΔᐃᐃ: "img/day-accessory97.png",
    ΔΔⲆᐃⲆⲆᐃ: "img/night-accessory97.png",
    ⲆⵠΔⲆᐃⲆⵠ: "img/day-accessory98.png",
    ΔⵠⲆΔⲆⵠᐃ: "img/night-accessory98.png",
    ᐃᐃⵠΔᐃⲆⲆ: "img/day-accessory99.png",
    ΔⵠⲆⵠⵠᐃⲆ: "img/night-accessory99.png",
    ⵠⵠΔⵠⵠⲆⲆ: "img/day-accessory100.png",
    ⲆΔΔⲆᐃᐃΔ: "img/night-accessory100.png",
    ΔΔⵠᐃⲆΔⵠ: "img/day-accessory101.png",
    ᐃᐃⵠⲆⵠⵠⵠ: "img/night-accessory101.png",
    ᐃⲆᐃᐃⲆᐃⲆ: "img/day-accessory102.png",
    ⵠΔᐃⵠⲆᐃⲆ: "img/night-accessory102.png",
    ΔⲆⲆⲆΔᐃⲆ: "img/day-accessory103.png",
    ΔⵠⲆᐃⲆΔᐃ: "img/night-accessory103.png",
    ΔᐃⵠⲆᐃⵠⵠ: "img/day-accessory104.png",
    ΔⲆᐃⲆᐃᐃᐃ: "img/night-accessory104.png",
    ⵠΔⲆᐃᐃⵠⲆ: "img/day-accessory105.png",
    ᐃⵠⵠᐃΔΔΔ: "img/night-accessory105.png",
    ΔⵠΔᐃΔΔΔᐃⲆ: "img/day-accessory106.png",
    ᐃΔᐃⵠΔⲆⲆΔⲆ: "img/night-accessory106.png",
    ΔⲆΔΔⲆⵠⵠⵠⲆ: "img/day-accessory107.png",
    ᐃΔΔⵠᐃᐃᐃⲆᐃ: "img/night-accessory107.png",
    ⲆⲆΔⲆᐃᐃΔ: "img/day-accessory82.png",
    ΔⵠⵠⵠΔⲆⵠ: "img/night-accessory82.png",
    ᐃⵠΔⲆⲆⲆⲆ: "img/day-book0.png",
    ΔⲆⵠⲆᐃᐃΔ: "img/night-book0.png",
    ᐃⵠΔⵠⵠⵠⲆ: "img/day-book1.png",
    ᐃⵠⵠⲆⵠΔⲆ: "img/night-book1.png",
    ⵠΔᐃⵠᐃᐃⵠ: "img/day-book2.png",
    ΔⵠⲆⵠᐃᐃⵠ: "img/night-book2.png",
    ⲆⵠⲆΔⵠⵠᐃ: "img/day-book3.png",
    ⵠⲆᐃᐃⵠᐃⲆ: "img/night-book3.png",
    ᐃⲆΔⵠΔΔⲆ: "img/day-book4.png",
    ᐃᐃΔⲆⲆⵠᐃ: "img/night-book4.png",
    ⲆⲆⲆᐃⲆⲆⵠ: "img/day-book5.png",
    ⲆᐃⲆᐃᐃⲆⵠ: "img/night-book5.png",
    ⲆⵠⲆᐃⲆⲆΔ: "img/day-book6.png",
    ᐃⵠᐃᐃᐃⲆⲆ: "img/night-book6.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/day-book7.png",
    ΔⲆⵠⲆΔᐃᐃ: "img/night-book7.png",
    ⲆΔⵠⵠⲆΔⲆ: "img/day-book8.png",
    ⲆᐃⲆⵠᐃⵠᐃ: "img/night-book8.png",
    ⲆᐃⵠⲆΔⵠⵠ: "img/day-book9.png",
    ⵠⵠᐃⲆⲆᐃⲆ: "img/night-book9.png",
    ⲆⵠᐃⲆⵠⵠᐃ: "img/day-book10.png",
    ⵠΔⵠⵠⵠⲆⵠ: "img/night-book10.png",
    ⲆΔᐃⲆⵠⵠⲆ: "img/day-book11.png",
    ⵠᐃⲆⲆΔⲆⵠ: "img/night-book11.png",
    ΔΔⵠᐃᐃⲆᐃ: "img/day-book12.png",
    ⲆⲆⵠⲆΔΔᐃ: "img/night-book12.png",
    ⲆⵠᐃΔⵠᐃⵠ: "img/day-book13.png",
    ⵠᐃⲆᐃΔᐃΔ: "img/night-book13.png",
    ΔᐃⲆⵠᐃᐃΔ: "img/day-book14.png",
    ΔᐃᐃᐃΔⲆᐃ: "img/night-book14.png",
    ⲆᐃⵠⲆΔⲆⲆ: "img/day-book15.png",
    ⵠⲆΔⲆⵠⲆᐃ: "img/night-book15.png",
    ⵠⵠⵠᐃᐃⵠⲆ: "img/day-book16.png",
    ⵠΔⵠⲆⲆΔⵠ: "img/night-book16.png",
    ᐃᐃⵠΔΔᐃᐃ: "img/day-book17.png",
    ⲆⲆⵠᐃⵠⲆΔ: "img/night-book17.png",
    ⵠⵠⲆⲆΔᐃⲆ: "img/day-book18.png",
    ⲆΔΔⵠᐃⵠᐃ: "img/night-book18.png",
    ΔⵠᐃΔⵠⲆᐃ: "img/day-book19.png",
    ⲆⲆΔΔΔΔΔ: "img/night-book19.png",
    ⵠⲆΔⲆⵠⵠⵠ: "img/day-book20.png",
    ᐃΔᐃⲆΔΔⲆ: "img/night-book20.png",
    ⲆᐃΔᐃΔⲆⵠ: "img/day-book21.png",
    ⲆⲆⲆⲆⲆᐃⵠ: "img/night-book21.png",
    ⲆᐃΔΔΔᐃΔ: "img/day-book22.png",
    ⲆⵠⲆⵠΔⵠΔ: "img/night-book22.png",
    ⲆⲆΔⵠΔᐃᐃ: "img/day-book23.png",
    ᐃᐃᐃⲆⲆⲆΔ: "img/night-book23.png",
    ᐃΔᐃᐃΔΔᐃ: "img/day-book24.png",
    ᐃⵠⲆᐃⵠᐃᐃ: "img/night-book24.png",
    ΔᐃΔⲆᐃΔⲆ: "img/day-book25.png",
    ΔⵠΔᐃᐃⵠᐃ: "img/night-book25.png",
    ΔⵠΔⲆΔᐃⵠ: "img/day-book26.png",
    ΔⲆᐃᐃⲆΔΔ: "img/night-book26.png",
    ᐃᐃΔⵠᐃⵠⲆ: "img/day-book27.png",
    ⲆᐃΔᐃΔⲆΔ: "img/night-book27.png",
    ⲆᐃΔⵠᐃΔΔ: "img/day-book28.png",
    ⲆⲆΔⲆΔⲆΔ: "img/night-book28.png",
    ⲆΔᐃⵠⵠΔⵠ: "img/day-book29.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/night-book29.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/day-book30.png",
    ⲆΔΔᐃᐃⲆⲆ: "img/night-book30.png",
    ⵠΔΔΔⵠⲆⵠ: "img/day-book31.png",
    ᐃᐃᐃᐃᐃΔᐃ: "img/night-book31.png",
    ᐃᐃΔⵠᐃΔᐃ: "img/day-book32.png",
    ⲆΔΔⵠΔᐃⲆ: "img/night-book32.png",
    ᐃⵠᐃⵠⲆΔΔ: "img/day-book33.png",
    ΔᐃⲆⲆᐃⲆⲆ: "img/night-book33.png",
    ΔⲆⵠᐃⵠⵠⵠ: "img/day-book34.png",
    ⲆᐃᐃᐃᐃΔⲆ: "img/night-book34.png",
    ᐃⲆⵠΔΔΔᐃ: "img/day-book35.png",
    ⵠⵠΔⲆⲆⲆⲆ: "img/night-book35.png",
    ⵠⲆΔΔᐃⵠᐃ: "img/day-book36.png",
    ΔᐃᐃΔᐃᐃΔ: "img/night-book36.png",
    ⵠⵠⲆⵠᐃᐃΔᐃⲆ: "img/day-book37.png",
    ⵠΔⲆⲆⲆᐃⲆᐃⵠ: "img/night-book37.png",
    ΔΔⲆᐃⲆᐃⲆ: "img/day-book38.png",
    ⵠⵠⵠᐃΔⵠⵠ: "img/night-book38.png",
    ᐃᐃᐃᐃΔⵠᐃ: "img/day-book39.png",
    ᐃⵠᐃⲆⵠΔⲆ: "img/night-book39.png",
    ᐃⲆⵠᐃᐃⲆⲆ: "img/day-book40.png",
    ΔΔᐃΔᐃΔⲆ: "img/night-book40.png",
    ᐃᐃᐃΔΔⲆⲆ: "img/day-book41.png",
    ⲆΔᐃⵠᐃⵠΔ: "img/night-book41.png",
    ⵠⲆⲆⲆΔΔⵠ: "img/day-book42.png",
    ⵠΔᐃⲆᐃⵠᐃ: "img/night-book42.png",
    ⲆΔⲆⵠΔΔᐃ: "img/day-book43.png",
    ⲆΔΔⲆΔᐃΔ: "img/night-book43.png",
    ΔⲆᐃᐃⵠᐃⲆ: "img/day-book44.png",
    ᐃⲆⵠᐃΔⵠᐃ: "img/night-book44.png",
    ⵠΔⲆⲆᐃᐃᐃ: "img/day-book45.png",
    ᐃⵠⲆᐃⵠⵠⵠ: "img/night-book45.png",
    ⲆⵠΔᐃᐃᐃΔ: "img/day-book46.png",
    ΔΔⵠΔⲆΔⵠ: "img/night-book46.png",
    ⵠΔⵠⵠⲆⵠΔ: "img/day-book47.png",
    ΔΔⲆⵠΔΔⲆ: "img/night-book47.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/day-book48.png",
    ᐃΔⲆⲆΔΔᐃ: "img/night-book48.png",
    ᐃΔΔΔⵠΔᐃ: "img/day-book49.png",
    ᐃⵠⵠΔᐃⵠΔ: "img/night-book49.png",
    ΔΔᐃⲆⵠΔⵠ: "img/day-book50.png",
    ⵠⲆᐃΔⵠᐃⲆ: "img/night-book50.png",
    ⵠⵠΔᐃΔᐃⵠ: "img/day-crate1.png",
    ⵠᐃⲆΔⵠⵠᐃ: "img/night-crate1.png",
    ⲆΔᐃΔΔⵠΔ: "img/day-crate2.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/night-crate2.png",
    ᐃΔⵠΔⲆⲆᐃ: "img/day-crate3.png",
    ᐃⵠᐃⵠᐃⵠⵠ: "img/night-crate3.png",
    ᐃⵠᐃⵠΔᐃᐃ: "img/day-crate4.png",
    ⲆⲆⲆⵠⲆⲆⵠ: "img/night-crate4.png",
    ᐃᐃⲆⵠΔᐃᐃ: "img/day-crate5.png",
    ΔᐃᐃᐃⲆᐃΔ: "img/night-crate5.png",
    ⵠⵠⵠⲆΔΔⵠ: "img/day-crate6.png",
    ᐃⵠⲆᐃΔⵠᐃ: "img/night-crate6.png",
    ⵠⵠⵠᐃⲆⲆᐃ: "img/day-crate7.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/night-crate7.png",
    ⵠᐃᐃΔᐃᐃΔ: "img/day-crate8.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/night-crate8.png",
    ΔΔⵠᐃΔᐃⲆ: "img/day-crate9.png",
    ᐃⲆⵠⵠⵠⵠΔ: "img/night-crate9.png",
    Δⵠⵠⵠⵠᐃⵠ: "img/day-crate10.png",
    ⲆΔΔⵠⵠⵠⲆ: "img/night-crate10.png",
    ⲆᐃΔⲆΔⲆⲆ: "img/day-crate11.png",
    ⵠᐃⵠⵠⲆᐃΔ: "img/night-crate11.png",
    ⲆⲆⲆᐃΔᐃⵠ: "img/day-crate12.png",
    ΔΔᐃⲆⲆⵠⵠ: "img/night-crate12.png",
    ᐃᐃᐃΔⲆⵠΔ: "img/day-crate13.png",
    ⲆᐃⵠⲆⲆⵠⵠ: "img/night-crate13.png",
    ⵠⲆΔΔⵠᐃⲆ: "img/day-crate14.png",
    ⵠᐃΔᐃⲆᐃᐃ: "img/night-crate14.png",
    ΔⲆΔᐃᐃⵠⵠ: "img/day-crate15.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/night-crate15.png",
    ᐃᐃΔⲆᐃⲆⵠ: "img/day-crate16.png",
    ᐃⲆᐃⲆⵠⵠⵠ: "img/night-crate16.png",
    ⵠⲆⲆⵠᐃΔⲆ: "img/day-crate17.png",
    ΔⲆᐃⵠⲆᐃᐃ: "img/night-crate17.png",
    ⲆΔⵠⲆΔⵠΔ: "img/day-crate18.png",
    ΔⵠⵠⵠΔΔᐃ: "img/night-crate18.png",
    ΔΔᐃⵠᐃᐃⵠ: "img/day-crate19.png",
    ⵠᐃᐃⵠⲆⲆᐃ: "img/night-crate19.png",
    ⵠᐃᐃᐃⵠⵠⵠ: "img/day-crate20.png",
    ⲆⵠᐃΔⵠⲆⵠ: "img/night-crate20.png",
    ΔⲆᐃᐃΔΔΔ: "img/day-crate21.png",
    ΔⵠⲆΔᐃΔⲆ: "img/night-crate21.png",
    ⵠⵠⵠⲆⲆⲆⵠ: "img/day-crate22.png",
    ⲆΔΔⲆⵠᐃΔ: "img/night-crate22.png",
    ᐃᐃⵠⲆΔⲆⵠ: "img/day-crate23.png",
    ΔⵠΔⲆⲆΔⲆ: "img/night-crate23.png",
    ᐃΔⲆᐃⲆΔΔ: "img/day-crate24.png",
    ⵠⵠⲆⲆⵠᐃⲆ: "img/night-crate24.png",
    ΔᐃⲆⵠΔΔⲆ: "img/day-crate25.png",
    ⲆⵠΔⵠᐃᐃΔ: "img/night-crate25.png",
    ᐃᐃⲆⲆᐃⲆΔ: "img/day-crate26.png",
    ΔⲆⵠᐃⵠᐃΔ: "img/night-crate26.png",
    ⵠⲆΔⲆⲆⵠⲆ: "img/day-crate27.png",
    ⲆΔⲆᐃⲆⵠᐃ: "img/night-crate27.png",
    ⲆⲆⵠⲆⵠⲆᐃ: "img/day-crate28.png",
    ⲆΔΔᐃⵠⲆⲆ: "img/night-crate28.png",
    ⲆᐃⲆⵠⲆΔΔ: "img/day-crate29.png",
    ⲆΔᐃⲆΔΔΔ: "img/night-crate29.png",
    ⵠΔⵠⲆΔΔⵠ: "img/day-crate30.png",
    ⵠᐃⲆⲆⲆΔⲆ: "img/night-crate30.png",
    ᐃΔⵠⲆᐃΔⲆ: "img/day-crate31.png",
    ⲆⵠᐃΔᐃΔⵠ: "img/night-crate31.png",
    ᐃᐃⲆᐃⲆᐃᐃ: "img/day-crate32.png",
    ⵠᐃΔΔⲆΔⲆ: "img/night-crate32.png",
    ⲆⵠⲆⲆⲆⵠⵠ: "img/day-crate33.png",
    ᐃΔⲆᐃᐃᐃᐃ: "img/night-crate33.png",
    ⲆᐃΔΔⲆⵠⵠ: "img/day-crate34.png",
    ⵠᐃⲆⲆᐃⵠᐃ: "img/night-crate34.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/day-crate35.png",
    ΔⲆⵠⵠⵠᐃΔ: "img/night-crate35.png",
    ᐃᐃᐃΔⲆᐃΔ: "img/day-crate36.png",
    ⲆᐃᐃᐃᐃᐃⲆ: "img/night-crate36.png",
    ΔⲆⵠᐃⲆΔⵠ: "img/day-crate37.png",
    Δᐃᐃⵠᐃⵠⵠ: "img/night-crate37.png",
    ᐃΔᐃᐃᐃᐃᐃ: "img/day-crate38.png",
    Δᐃⵠᐃᐃᐃⵠ: "img/night-crate38.png",
    ⵠⵠᐃⲆᐃⵠΔ: "img/day-crate39.png",
    ⲆΔΔΔᐃⵠᐃ: "img/night-crate39.png",
    ᐃⲆⵠΔΔⵠⲆ: "img/day-crate40.png",
    ᐃᐃΔᐃᐃΔΔ: "img/night-crate40.png",
    ⵠΔᐃⵠⵠᐃᐃ: "img/day-crate41.png",
    ⵠⲆᐃᐃⵠⲆⲆ: "img/night-crate41.png",
    ⲆⲆΔΔⵠΔⲆ: "img/day-crate42.png",
    ⲆⵠⲆᐃᐃⵠⵠ: "img/night-crate42.png",
    ⵠΔⵠⵠⵠᐃᐃ: "img/day-crate43.png",
    ⲆΔⵠⲆΔΔⲆ: "img/night-crate43.png",
    ⲆᐃᐃⲆⲆⲆⲆ: "img/day-crate44.png",
    ᐃⵠⲆⵠⵠⵠⲆ: "img/night-crate44.png",
    ⵠᐃⲆΔΔⲆⲆ: "img/day-crate45.png",
    ⵠⲆᐃΔⲆΔΔ: "img/night-crate45.png",
    ⲆⲆΔⵠⲆΔⲆ: "img/day-crate46.png",
    ΔⲆⵠᐃⵠᐃⵠ: "img/night-crate46.png",
    ⵠᐃⲆⵠᐃΔⲆ: "img/day-crate47.png",
    ᐃΔᐃᐃⵠᐃᐃ: "img/night-crate47.png",
    ⲆⵠᐃΔΔⵠΔ: "img/day-crate48.png",
    ⵠⵠᐃΔⵠⲆΔ: "img/night-crate48.png",
    ᐃⲆᐃΔⲆᐃᐃ: "img/day-crate49.png",
    ᐃΔⲆΔΔⵠⵠ: "img/night-crate49.png",
    ⵠΔⲆⵠᐃⲆⵠ: "img/day-crate50.png",
    ᐃⵠᐃⲆΔⲆⵠ: "img/night-crate50.png",
    ⵠΔⲆᐃΔⵠΔ: "img/day-crate51.png",
    ⵠⵠᐃⲆΔΔⵠ: "img/night-crate51.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/day-crate52.png",
    ⲆⲆⲆᐃΔΔⵠ: "img/night-crate52.png",
    ⵠΔⲆΔᐃᐃΔ: "img/day-crate53.png",
    ΔⲆΔⲆΔⵠⲆ: "img/night-crate53.png",
    ⲆᐃΔᐃⵠΔⲆ: "img/day-crate54.png",
    ⲆⲆΔΔⵠᐃᐃ: "img/night-crate54.png",
    ΔᐃΔᐃⵠᐃΔ: "img/day-crate55.png",
    ⲆᐃΔΔⵠⲆⲆ: "img/night-crate55.png",
    ⵠⵠⵠᐃⲆΔⵠ: "img/day-crate56.png",
    ᐃⲆⲆⲆⲆⵠΔ: "img/night-crate56.png",
    ⵠΔⲆᐃⲆΔⲆ: "img/day-crate57.png",
    ΔΔᐃⵠⵠⵠᐃ: "img/night-crate57.png",
    ⵠⲆⲆΔᐃⵠⲆ: "img/day-crate58.png",
    ᐃⲆⵠΔΔΔΔ: "img/night-crate58.png",
    ΔΔᐃⵠΔⲆΔ: "img/day-crate59.png",
    ΔⲆⲆΔΔⵠᐃ: "img/night-crate59.png",
    ᐃᐃⲆⵠΔᐃⵠ: "img/day-crate60.png",
    ⲆⵠⵠᐃᐃⲆΔ: "img/night-crate60.png",
    ᐃᐃⵠᐃⲆᐃⵠ: "img/day-crate61.png",
    ᐃⵠⲆⵠⵠⲆⲆ: "img/night-crate61.png",
    ᐃΔΔΔᐃⲆⲆ: "img/day-crate62.png",
    ΔᐃΔΔᐃᐃᐃ: "img/night-crate62.png",
    ᐃⵠⲆⵠᐃⲆΔ: "img/day-crate63.png",
    ΔΔⲆΔⲆΔⲆ: "img/night-crate63.png",
    ΔΔⲆⲆⵠᐃᐃ: "img/day-crate64.png",
    ⲆⲆⲆⵠⲆⵠⵠ: "img/night-crate64.png",
    ΔᐃᐃⲆⵠΔΔ: "img/day-crate65.png",
    ΔΔⲆⵠᐃΔⵠ: "img/night-crate65.png",
    ΔᐃⲆᐃⵠᐃⵠ: "img/day-crate66.png",
    ⵠⲆᐃΔⵠⵠΔ: "img/night-crate66.png",
    ⵠΔᐃᐃΔⲆᐃ: "img/day-crate67.png",
    ᐃⲆⵠⵠᐃⵠⵠ: "img/night-crate67.png",
    ᐃⵠⲆⵠⲆⲆⲆ: "img/day-crate68.png",
    ΔᐃⲆΔΔΔᐃ: "img/night-crate68.png",
    ⵠΔΔΔΔᐃⵠ: "img/day-crate69.png",
    ᐃᐃΔⵠⵠΔⵠ: "img/night-crate69.png",
    ᐃΔⵠⲆⵠⲆᐃ: "img/day-crate70.png",
    ⵠΔΔⵠⵠᐃΔ: "img/night-crate70.png",
    ⲆⲆΔⲆⲆᐃΔ: "img/day-crate71.png",
    ⲆᐃⲆΔΔⲆⲆ: "img/night-crate71.png",
    ⵠΔⲆⲆⵠⲆᐃ: "img/day-crate72.png",
    ᐃΔΔⲆΔⲆⵠ: "img/night-crate72.png",
    ⵠⵠⲆⲆᐃΔΔ: "img/day-crate73.png",
    ⵠᐃⲆᐃΔΔᐃ: "img/night-crate73.png",
    ᐃⵠⵠⵠΔⵠᐃ: "img/day-crate74.png",
    ⵠΔⵠΔⲆᐃⵠ: "img/night-crate74.png",
    ⲆⲆⵠⵠⲆⲆⲆ: "img/day-crate75.png",
    ᐃⵠᐃⵠᐃᐃⲆ: "img/night-crate75.png",
    ᐃⲆᐃᐃΔΔᐃ: "img/day-crate76.png",
    ΔⵠⲆᐃᐃⵠΔ: "img/night-crate76.png",
    ᐃⲆᐃΔᐃᐃⲆ: "img/day-crate77.png",
    ᐃΔΔΔΔΔᐃ: "img/night-crate77.png",
    ⵠΔΔⲆᐃΔⲆ: "img/day-crate78.png",
    ⲆΔᐃΔᐃⲆⲆ: "img/night-crate78.png",
    ᐃⵠΔᐃΔᐃⵠ: "img/day-crate79.png",
    ΔᐃΔⵠⵠΔⲆ: "img/night-crate79.png",
    ⲆᐃΔⲆⵠⵠⵠ: "img/day-herb0.png",
    ⵠⲆᐃΔⲆΔⵠ: "img/day-herb1.png",
    ΔᐃᐃᐃᐃΔⵠ: "img/day-herb2.png",
    ᐃⵠⲆⵠⵠΔⲆ: "img/day-herb3.png",
    ΔⲆⲆᐃⲆΔⲆ: "img/day-herb4.png",
    ⵠᐃⵠⲆΔⵠⲆ: "img/day-herb5.png",
    ᐃΔⵠⵠΔⵠⲆ: "img/day-herb6.png",
    ⵠⲆᐃⵠⲆⵠⲆ: "img/day-herb7.png",
    ⵠᐃⲆⲆⲆᐃⵠ: "img/day-herb8.png",
    ᐃΔΔⵠⵠⵠⵠ: "img/day-herb9.png",
    ΔⵠⵠⲆΔⲆᐃ: "img/day-herb10.png",
    ⲆⵠⵠⵠⵠⲆΔ: "img/day-herb11.png",
    ᐃΔᐃⵠᐃⵠⲆ: "img/day-herb12.png",
    ⲆⲆΔᐃⲆⲆᐃ: "img/day-herb13.png",
    ⵠⲆᐃᐃⲆⲆᐃ: "img/day-herb14.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/day-herb15.png",
    ᐃⵠᐃⲆⲆΔⲆ: "img/day-shell0.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/day-shell1.png",
    ᐃᐃΔⵠⲆΔᐃ: "img/day-shell2.png",
    ⲆⲆⲆⵠΔΔᐃ: "img/day-leaf1.png",
    ᐃⵠⲆᐃᐃⲆᐃ: "img/day-leaf2.png",
    ᐃΔⵠᐃΔⲆⵠ: "img/day-leaf3.png",
    ⵠⲆⵠᐃⵠⵠⵠ: "img/day-leaf4.png",
    ΔⵠΔⲆⵠⲆΔ: "img/day-leaf5.png",
    ⵠΔⵠΔΔΔᐃ: "img/day-leaf6.png",
    ΔᐃᐃⲆᐃᐃⵠ: "img/day-leaf7.png",
    ⵠΔⵠᐃΔΔⵠ: "img/day-leaf8.png",
    ΔⲆΔⵠⲆΔⲆ: "img/day-rock0.png",
    ⵠᐃᐃⲆⲆΔⲆ: "img/day-rock1.png",
    ᐃΔᐃⲆⵠⲆⵠ: "img/day-rock2.png",
    ᐃⵠⲆⲆᐃⵠⵠ: "img/day-rock3.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/day-rock4.png",
    ⵠⵠΔⵠⲆⵠⵠ: "img/day-rock5.png",
    ⲆⲆΔΔⲆⵠⲆ: "img/day-rock6.png",
    ⵠᐃᐃᐃⲆⲆΔ: "img/day-rock7.png",
    ⲆᐃᐃΔᐃᐃⵠ: "img/day-rock8.png",
    ᐃⲆΔⵠⲆΔᐃ: "img/day-rock9.png",
    ⵠⲆᐃᐃⲆΔⵠ: "img/day-rock10.png",
    ⵠΔΔᐃⲆᐃᐃ: "img/day-rock11.png",
    ΔⵠᐃⵠⲆⵠⲆ: "img/day-rock12.png",
    ⵠΔΔΔΔⲆΔ: "img/day-rock13.png",
    ΔᐃⲆⲆᐃΔᐃ: "img/day-flower1.png",
    ⵠΔⲆⲆᐃΔᐃ: "img/day-flower2.png",
    ΔᐃΔΔⵠΔΔ: "img/day-flower3.png",
    ΔⵠᐃⲆⵠΔⵠ: "img/day-flower4.png",
    ⵠΔΔΔΔΔⵠ: "img/day-flower5.png",
    ⲆⵠⲆΔᐃΔⲆ: "img/day-flower6.png",
    ⵠⲆΔΔⵠⲆΔ: "img/day-flower7.png",
    ᐃⲆΔⲆΔᐃᐃ: "img/day-flower8.png",
    ΔⲆᐃΔᐃⲆⵠ: "img/day-flower9.png",
    ΔΔⲆⲆⵠΔⵠ: "img/day-herb16.png",
    ΔᐃⲆⵠⵠΔΔ: "img/day-herb17.png",
    ⵠᐃΔΔⲆᐃⲆ: "img/day-herb18.png",
    ⵠᐃᐃⵠⲆΔᐃ: "img/day-herb19.png",
    ⵠⵠⵠᐃᐃΔⲆ: "img/day-herb20.png",
    ⵠⵠΔⲆᐃΔⲆ: "img/day-herb21.png",
    ᐃΔⲆΔᐃⲆⲆ: "img/night-herb0.png",
    ⲆΔⵠⲆᐃᐃᐃ: "img/night-herb1.png",
    ⲆⵠⵠᐃΔᐃΔ: "img/night-herb2.png",
    ⵠⵠᐃⵠⵠᐃᐃ: "img/night-herb3.png",
    ᐃᐃᐃΔⵠⲆΔ: "img/night-herb4.png",
    ⵠⵠᐃⲆⲆΔᐃ: "img/night-herb5.png",
    ⲆⲆⵠᐃⵠΔᐃ: "img/night-herb6.png",
    ΔᐃⵠⲆⲆΔⵠ: "img/night-herb7.png",
    ⵠΔΔⵠΔⲆⲆ: "img/night-herb8.png",
    ⵠⵠᐃᐃⲆⲆⲆ: "img/night-herb9.png",
    ⵠΔΔⵠᐃⲆΔ: "img/night-herb10.png",
    ⲆΔᐃΔⵠⲆⵠ: "img/night-herb11.png",
    ⵠΔΔⲆᐃΔΔ: "img/night-herb12.png",
    ΔᐃΔⵠⵠⲆᐃ: "img/night-herb13.png",
    ⲆᐃⲆΔΔⵠᐃ: "img/night-herb14.png",
    ⵠⲆᐃⲆᐃⵠⲆ: "img/night-herb15.png",
    ΔⲆΔΔᐃΔⵠ: "img/night-shell0.png",
    ΔᐃⵠΔⵠⵠⵠ: "img/night-shell1.png",
    ⵠⲆⲆⲆⵠᐃⵠ: "img/night-shell2.png",
    ⲆⲆᐃⵠΔᐃⲆ: "img/night-leaf1.png",
    ⲆⵠⲆⵠⵠⲆΔ: "img/night-leaf2.png",
    ΔᐃⵠⵠᐃΔᐃ: "img/night-leaf3.png",
    ΔΔⲆᐃⲆΔΔ: "img/night-leaf4.png",
    ⲆᐃⵠⲆⲆΔᐃ: "img/night-leaf5.png",
    ⲆᐃⲆⲆⲆᐃᐃ: "img/night-leaf6.png",
    ᐃⲆⲆⵠᐃᐃΔ: "img/night-leaf7.png",
    ⵠⵠᐃⲆⲆⲆⲆ: "img/night-leaf8.png",
    ⵠᐃᐃⵠΔᐃᐃ: "img/night-rock0.png",
    ⵠⵠᐃⵠᐃᐃⵠ: "img/night-rock1.png",
    ⲆⵠⲆΔΔⲆΔ: "img/night-rock2.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/night-rock3.png",
    ⵠᐃⵠᐃⵠΔⲆ: "img/night-rock4.png",
    ΔⲆΔΔⲆΔⲆ: "img/night-rock5.png",
    ⲆⵠΔΔⵠⵠᐃ: "img/night-rock6.png",
    ᐃⲆᐃΔⲆΔΔ: "img/night-rock7.png",
    ⲆᐃⵠᐃᐃⲆᐃ: "img/night-rock8.png",
    ⵠΔᐃⲆⲆᐃᐃ: "img/night-rock9.png",
    ⵠΔⵠᐃⵠΔⵠ: "img/night-rock10.png",
    ΔⵠΔⵠⲆᐃⵠ: "img/night-rock11.png",
    ⵠΔⵠΔΔᐃⲆ: "img/night-rock12.png",
    ΔⵠᐃⲆᐃⵠᐃ: "img/night-rock13.png",
    ΔⲆᐃⲆΔⲆⲆ: "img/night-flower1.png",
    ⵠⵠⵠⵠⲆⲆⲆ: "img/night-flower2.png",
    ΔᐃⲆΔΔᐃⲆ: "img/night-flower3.png",
    ⵠᐃΔᐃᐃⲆⲆ: "img/night-flower4.png",
    ⵠΔᐃⲆΔΔⲆ: "img/night-flower5.png",
    ⲆⵠⵠᐃⲆⵠΔ: "img/night-flower6.png",
    ᐃⲆΔⵠⵠΔⵠ: "img/night-flower7.png",
    ⵠΔⲆⲆᐃⲆᐃ: "img/night-flower8.png",
    ΔᐃΔᐃᐃⵠⲆ: "img/night-flower9.png",
    ΔⵠΔᐃⲆᐃⲆ: "img/night-herb16.png",
    ⲆΔΔΔⵠⲆᐃ: "img/night-herb17.png",
    ⲆⲆΔⲆᐃΔⲆ: "img/night-herb18.png",
    ᐃΔᐃⵠⲆⲆⵠ: "img/night-herb19.png",
    ⵠⲆΔⵠᐃⵠΔ: "img/night-herb20.png",
    ⵠΔᐃᐃⲆΔΔ: "img/night-herb21.png",
    ⵠⲆⵠⵠᐃᐃⲆ: "img/day-river000-010-000.png",
    ᐃᐃⲆᐃΔΔᐃ: "img/day-river000-010-010.png",
    Δᐃⵠᐃⵠᐃⵠ: "img/day-river000-011-000.png",
    ᐃΔΔΔⵠⲆⲆ: "img/day-river000-011-010.png",
    ΔᐃⵠΔⵠᐃΔ: "img/day-river000-011-011.png",
    ᐃⲆⲆⵠⲆᐃⲆ: "img/day-river000-110-000.png",
    ΔΔⲆᐃΔΔⲆ: "img/day-river000-110-010.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/day-river000-110-110.png",
    ᐃⲆΔⵠⵠΔⲆ: "img/day-river000-111-000.png",
    ΔΔⲆⲆΔⲆᐃ: "img/day-river000-111-010.png",
    ΔⵠⲆⲆⲆⲆᐃ: "img/day-river000-111-011.png",
    ΔΔⲆᐃⵠⵠⲆ: "img/day-river000-111-110.png",
    ᐃᐃᐃᐃⲆΔᐃ: "img/day-river000-111-111.png",
    ⲆΔᐃⵠⵠⵠΔ: "img/day-river010-010-000.png",
    ΔⲆᐃᐃΔⲆⲆ: "img/day-river010-010-010.png",
    ⲆΔⵠⵠⲆΔᐃ: "img/day-river010-011-000.png",
    ᐃⲆⲆⲆΔⲆᐃ: "img/day-river010-011-010.png",
    ᐃΔᐃⲆⲆΔᐃ: "img/day-river010-011-011.png",
    ⵠⲆⵠⵠΔΔⵠ: "img/day-river010-110-000.png",
    ⲆᐃΔᐃⲆΔⵠ: "img/day-river010-110-010.png",
    ΔᐃⵠᐃΔⵠⲆ: "img/day-river010-110-110.png",
    ᐃΔΔⵠⲆΔⵠ: "img/day-river010-111-000.png",
    ⲆᐃⵠΔⲆᐃⵠ: "img/day-river010-111-010.png",
    ᐃⵠΔⲆΔⵠⵠ: "img/day-river010-111-011.png",
    ⵠⵠⲆⲆⵠᐃΔ: "img/day-river010-111-110.png",
    ᐃᐃⵠᐃΔᐃᐃ: "img/day-river010-111-111.png",
    ᐃⲆⵠΔⵠᐃⲆ: "img/day-river011-011-000.png",
    ⵠΔΔⵠⵠⲆΔ: "img/day-river011-011-010.png",
    ΔᐃⲆⵠΔᐃΔ: "img/day-river011-011-011.png",
    ⵠⲆⲆᐃⵠᐃⵠ: "img/day-river011-111-000.png",
    ⲆⲆⵠⲆᐃΔⲆ: "img/day-river011-111-010.png",
    ΔᐃΔⵠΔⲆΔ: "img/day-river011-111-011.png",
    ⲆΔᐃΔᐃᐃⲆ: "img/day-river011-111-110.png",
    ΔⲆⲆⲆΔⲆᐃ: "img/day-river011-111-111.png",
    ⲆΔᐃΔⵠⵠᐃ: "img/day-river110-110-000.png",
    ΔΔΔΔΔΔⵠ: "img/day-river110-110-010.png",
    ⵠᐃⵠΔᐃⵠΔ: "img/day-river110-110-110.png",
    ΔᐃᐃᐃⵠⲆⲆ: "img/day-river110-111-000.png",
    ⵠΔⲆΔᐃⲆΔ: "img/day-river110-111-010.png",
    ⲆΔΔᐃⵠᐃⵠ: "img/day-river110-111-011.png",
    ⲆΔⲆⵠᐃᐃⲆ: "img/day-river110-111-110.png",
    ⵠᐃᐃⵠᐃⵠⲆ: "img/day-river110-111-111.png",
    ᐃᐃⵠᐃⵠΔᐃ: "img/day-river111-111-011.png",
    ⵠΔᐃΔᐃᐃΔ: "img/day-river111-111-110.png",
    ᐃᐃⵠᐃⵠΔᐃ: "img/day-river111-111-011.png",
    ⲆⲆⵠⲆⲆⵠΔ: "img/day-river111-111-000.png",
    ᐃⲆΔᐃⵠⲆΔ: "img/day-river111-111-111.png",
    ⵠᐃⲆΔᐃⵠⲆ: "img/day-river111-111-010.png",
    ⲆΔᐃⵠⲆⲆᐃ: "img/night-river000-010-000.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/night-river000-010-010.png",
    ΔⵠⵠⵠⵠⵠΔ: "img/night-river000-011-000.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/night-river000-011-010.png",
    ⲆⵠΔⲆⲆⲆⲆ: "img/night-river000-011-011.png",
    ΔΔⵠΔᐃᐃᐃ: "img/night-river000-110-000.png",
    ᐃᐃΔᐃⲆΔΔ: "img/night-river000-110-010.png",
    ⵠⲆΔⲆⲆⲆᐃ: "img/night-river000-110-110.png",
    ⲆᐃΔᐃΔᐃⲆ: "img/night-river000-111-000.png",
    ⲆⲆⵠΔⲆⲆⵠ: "img/night-river000-111-010.png",
    ΔⵠⵠⵠⲆⲆⲆ: "img/night-river000-111-011.png",
    ⲆⲆΔⵠⵠⲆⲆ: "img/night-river000-111-110.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/night-river000-111-111.png",
    ⵠⵠⲆⵠⲆⲆᐃ: "img/night-river010-010-000.png",
    ⵠᐃⵠⲆⵠⲆⲆ: "img/night-river010-010-010.png",
    ⲆⵠⵠⵠⲆΔΔ: "img/night-river010-011-000.png",
    ⵠΔᐃΔᐃΔⲆ: "img/night-river010-011-010.png",
    ⲆΔΔⲆΔⵠΔ: "img/night-river010-011-011.png",
    ΔΔⲆᐃᐃⵠⵠ: "img/night-river010-110-000.png",
    ⲆⲆΔΔⲆⲆΔ: "img/night-river010-110-010.png",
    ᐃΔⲆΔΔⲆⲆ: "img/night-river010-110-110.png",
    ⲆᐃⲆⲆΔΔⵠ: "img/night-river010-111-000.png",
    ⵠᐃΔⵠΔΔⲆ: "img/night-river010-111-010.png",
    ⲆΔⵠΔΔⲆΔ: "img/night-river010-111-011.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/night-river010-111-110.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/night-river010-111-111.png",
    ΔᐃⵠΔᐃᐃΔ: "img/night-river011-011-000.png",
    ΔⵠⲆᐃⲆΔⵠ: "img/night-river011-011-010.png",
    ⵠⲆΔⲆⵠᐃΔ: "img/night-river011-011-011.png",
    ⲆᐃⵠᐃⵠⲆᐃ: "img/night-river011-111-000.png",
    ⲆⵠᐃⵠⲆᐃⲆ: "img/night-river011-111-010.png",
    ⵠⲆΔⵠⲆΔⲆ: "img/night-river011-111-011.png",
    ⲆΔⵠΔᐃⲆⲆ: "img/night-river011-111-110.png",
    ⵠⲆΔⲆΔᐃᐃ: "img/night-river011-111-111.png",
    ᐃⵠⲆⲆᐃᐃⵠ: "img/night-river110-110-000.png",
    ⵠⲆᐃΔⲆⲆΔ: "img/night-river110-110-010.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/night-river110-110-110.png",
    ᐃΔⲆⲆᐃᐃⵠ: "img/night-river110-111-000.png",
    ΔⲆⵠΔᐃⲆⵠ: "img/night-river110-111-010.png",
    ⵠΔΔΔⲆⵠⵠ: "img/night-river110-111-011.png",
    ⲆᐃᐃᐃΔⵠᐃ: "img/night-river110-111-110.png",
    ⲆⵠⲆⲆΔᐃΔ: "img/night-river110-111-111.png",
    ᐃΔⲆΔΔⵠᐃ: "img/night-river111-111-011.png",
    ⵠⵠᐃΔⵠᐃⵠ: "img/night-river111-111-110.png",
    ᐃΔⲆΔΔⵠᐃ: "img/night-river111-111-011.png",
    ⵠⲆⵠⵠⲆΔᐃ: "img/night-river111-111-000.png",
    ⵠΔΔΔⲆᐃⲆ: "img/night-river111-111-111.png",
    ᐃᐃᐃᐃΔⲆⵠ: "img/night-river111-111-010.png",
    ⵠᐃⲆΔⵠΔⵠ: "img/day-pebblecompo1.png",
    ⵠⵠⲆⵠΔ: "img/day-pebblecompo2.png",
    ⲆⲆⵠⲆΔ: "img/day-pebblecompo3.png",
    ⵠΔΔⲆᐃⲆᐃ: "img/day-pebblecompo4.png",
    ⵠᐃⲆⲆⲆ: "img/day-pebblecompo5.png",
    ᐃⵠⵠⲆⵠ: "img/day-pebblecompo6.png",
    ᐃⵠⲆⵠᐃ: "img/day-pebblecompo7.png",
    ⲆΔⵠᐃΔⲆᐃ: "img/day-pebblecompo8.png",
    ᐃᐃⲆᐃΔΔⲆ: "img/day-pebblecompo9.png",
    ᐃⲆΔᐃΔᐃⲆ: "img/day-pebblecompo10.png",
    ΔΔᐃᐃⵠ: "img/day-pebblecompo11.png",
    ⵠⲆⵠᐃⵠᐃⵠ: "img/day-pebblecompo12.png",
    ᐃⵠⵠⲆⵠᐃⲆ: "img/day-pebblecompo13.png",
    ⵠΔᐃᐃⲆⵠᐃ: "img/day-pebblecompo14.png",
    ᐃⵠⵠᐃⵠⲆⵠ: "img/day-pebblecompo15.png",
    ᐃⵠᐃⲆⵠᐃⲆ: "img/day-pebblecompo16.png",
    ΔΔΔⵠⵠ: "img/day-pebblecompo17.png",
    ᐃⲆⲆⵠᐃᐃⵠ: "img/day-pebblecompo18.png",
    ΔⲆᐃⵠΔⵠⲆ: "img/day-pebblecompo19.png",
    ᐃΔᐃΔⲆ: "img/day-pebblecompo20.png",
    ⵠⵠⲆᐃⵠ: "img/day-pebblecompo21.png",
    ΔⲆⲆⵠᐃΔⵠ: "img/day-pebblecompo22.png",
    ⵠⵠΔⲆⵠⲆΔ: "img/day-pebblecompo23.png",
    ΔᐃᐃᐃΔⲆⵠ: "img/day-pebblecompo24.png",
    Δᐃⵠᐃᐃ: "img/day-pebblecompo25.png",
    ΔⵠᐃⲆⲆ: "img/day-pebblecompo26.png",
    Ⲇᐃⵠⵠᐃⵠᐃ: "img/day-pebblecompo27.png",
    ΔⲆᐃⵠΔ: "img/day-pebblecompo28.png",
    ⲆΔⲆᐃᐃⵠᐃ: "img/night-pebblecompo1.png",
    ΔⵠᐃΔⵠ: "img/night-pebblecompo2.png",
    ΔⵠΔⵠᐃ: "img/night-pebblecompo3.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/night-pebblecompo4.png",
    ᐃⵠⲆⵠⵠ: "img/night-pebblecompo5.png",
    ΔⲆΔΔᐃ: "img/night-pebblecompo6.png",
    ΔⲆⲆΔΔ: "img/night-pebblecompo7.png",
    ⵠⲆⲆⲆⲆΔᐃ: "img/night-pebblecompo8.png",
    ᐃΔⵠⵠⲆᐃΔ: "img/night-pebblecompo9.png",
    ⵠⵠⲆΔᐃⵠⵠ: "img/night-pebblecompo10.png",
    ⵠᐃΔⵠᐃ: "img/night-pebblecompo11.png",
    ⲆᐃΔⲆᐃᐃΔ: "img/night-pebblecompo12.png",
    ⲆᐃΔΔΔⵠⲆ: "img/night-pebblecompo13.png",
    ᐃΔᐃⲆᐃΔᐃ: "img/night-pebblecompo14.png",
    ᐃΔᐃⲆᐃΔΔ: "img/night-pebblecompo15.png",
    ΔⲆΔⵠΔΔⲆ: "img/night-pebblecompo16.png",
    ΔΔΔⲆⵠ: "img/night-pebblecompo17.png",
    ΔᐃⵠᐃΔᐃΔ: "img/night-pebblecompo18.png",
    ΔᐃⲆΔΔᐃⵠ: "img/night-pebblecompo19.png",
    ⲆⵠΔⲆᐃ: "img/night-pebblecompo20.png",
    ⵠⲆᐃᐃⵠ: "img/night-pebblecompo21.png",
    ᐃᐃΔᐃⲆΔⵠ: "img/night-pebblecompo22.png",
    ΔᐃΔΔΔΔΔ: "img/night-pebblecompo23.png",
    ᐃΔⲆⲆⲆⲆⲆ: "img/night-pebblecompo24.png",
    ⵠΔⲆᐃⲆ: "img/night-pebblecompo25.png",
    ⵠⵠΔΔⲆ: "img/night-pebblecompo26.png",
    ΔΔΔⵠⵠΔᐃ: "img/night-pebblecompo27.png",
    ⵠᐃΔΔⲆ: "img/night-pebblecompo28.png",
    ᐃᐃⵠᐃΔⵠⵠ: "img/day-baby-mammoth.png",
    ⵠⲆⲆΔᐃΔⵠ: "img/day-baby-mammoth-tamed.png",
    ΔᐃΔⵠⵠⵠⲆ: "img/day-baby-mammoth-angry.png",
    ⲆⵠⵠΔⲆᐃⲆ: "img/night-baby-mammoth.png",
    ΔⲆᐃᐃᐃᐃⲆ: "img/night-baby-mammoth-tamed.png",
    ⲆⲆΔⲆⵠⵠⵠ: "img/night-baby-mammoth-angry.png",
    ΔᐃΔⲆᐃΔΔ: "img/inv-mammoth-out.png",
    ⲆⲆⵠⵠᐃⵠⲆ: "img/inv-mammoth-in.png",
    ᐃΔΔⲆⲆΔⵠ: "img/inv-mammoth-click.png",
    ᐃⵠΔⵠΔΔⵠ: "img/hurt-baby-mammoth.png",
    ⲆⵠⵠⲆΔⲆΔ: "img/baby-mammoth-step.png",
    ⲆᐃⲆΔⲆⵠᐃ: "img/day-flower-hat.png",
    ΔΔΔΔⵠⲆΔ: "img/night-flower-hat.png",
    ⲆΔⵠᐃⵠᐃΔ: "img/inv-flower-hat-out.png",
    ⵠᐃⵠⵠⵠᐃΔ: "img/inv-flower-hat-in.png",
    ⲆᐃⵠⵠΔⵠⵠ: "img/inv-flower-hat-click.png",
    ᐃⵠⲆⵠⵠᐃᐃ: "img/day-fur-hat.png",
    ΔᐃⵠⵠⵠⲆΔ: "img/night-fur-hat.png",
    ⲆΔΔⵠᐃᐃΔ: "img/inv-fur-hat-out.png",
    ⵠΔⵠΔⵠᐃᐃ: "img/inv-fur-hat-in.png",
    ⵠΔᐃⵠΔⵠⲆ: "img/inv-fur-hat-click.png",
    ⲆΔΔΔΔΔᐃ: "img/day-mammoth.png",
    ᐃⵠΔᐃⵠⵠΔ: "img/night-mammoth.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/hurt-mammoth.png",
    ᐃᐃᐃᐃᐃⵠⵠ: "img/inv-mammoth-fur-out.png",
    ⲆⲆΔΔΔᐃⲆ: "img/inv-mammoth-fur-in.png",
    ⲆⵠΔⵠᐃΔⵠ: "img/inv-mammoth-fur-click.png",
    ᐃΔΔⵠᐃᐃᐃ: "img/inv-wood-bow-out.png",
    ᐃⵠᐃᐃᐃΔᐃ: "img/inv-wood-bow-in.png",
    ⵠᐃⵠΔᐃⲆᐃ: "img/inv-wood-bow-click.png",
    ⵠⲆⲆⵠⲆⵠⵠ: "img/inv-wood-arrow-out.png",
    ΔᐃᐃΔΔΔⵠ: "img/inv-wood-arrow-in.png",
    ⵠⲆⲆⲆⵠΔΔ: "img/inv-wood-arrow-click.png",
    ⲆΔⲆⵠᐃⵠΔ: "img/day-wood-bow2.png",
    ᐃᐃⵠΔΔᐃⲆ: "img/night-wood-bow2.png",
    ΔⵠⵠⲆΔΔⵠ: "img/day-wood-arrow.png",
    ᐃⵠΔᐃΔΔΔ: "img/night-wood-arrow.png",
    ⲆΔᐃΔᐃⵠΔ: "img/inv-stone-bow-out.png",
    ᐃⲆᐃᐃⵠᐃΔ: "img/inv-stone-bow-in.png",
    ⲆΔⵠΔᐃΔᐃ: "img/inv-stone-bow-click.png",
    ⲆΔᐃᐃⵠⵠⲆ: "img/inv-stone-arrow-out.png",
    ⲆΔⲆⵠΔᐃⵠ: "img/inv-stone-arrow-in.png",
    ⵠⲆᐃⲆΔⲆⲆ: "img/inv-stone-arrow-click.png",
    ΔⲆⵠΔΔⲆⲆ: "img/day-stone-bow.png",
    ᐃᐃΔⲆᐃⲆΔ: "img/night-stone-bow.png",
    ᐃⵠⲆᐃⵠᐃΔ: "img/day-stone-arrow.png",
    ᐃⲆΔⲆⲆⲆⲆ: "img/night-stone-arrow.png",
    ΔⲆⵠᐃΔᐃΔ: "img/inv-gold-bow-out.png",
    ΔΔΔⲆⲆΔᐃ: "img/inv-gold-bow-in.png",
    ᐃⵠⵠΔΔᐃⲆ: "img/inv-gold-bow-click.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/inv-gold-arrow-out.png",
    ⲆⵠⵠⵠᐃΔⲆ: "img/inv-gold-arrow-in.png",
    ᐃⵠⵠᐃⲆⵠᐃ: "img/inv-gold-arrow-click.png",
    ΔΔⲆⵠΔΔᐃ: "img/day-gold-bow.png",
    ᐃⵠᐃⲆⵠⵠᐃ: "img/night-gold-bow.png",
    ᐃᐃΔᐃⵠⲆⵠ: "img/day-gold-arrow.png",
    ⲆᐃᐃⵠⵠⲆᐃ: "img/night-gold-arrow.png",
    ΔⲆᐃⲆⲆᐃΔ: "img/inv-diamond-bow-out.png",
    ΔⵠⵠⲆⵠΔΔ: "img/inv-diamond-bow-in.png",
    ΔΔⲆΔⵠⲆΔ: "img/inv-diamond-bow-click.png",
    ⲆⵠΔᐃᐃΔᐃ: "img/inv-diamond-arrow-out.png",
    ΔᐃⵠⲆⲆΔⲆ: "img/inv-diamond-arrow-in.png",
    ΔⲆⲆᐃΔⲆᐃ: "img/inv-diamond-arrow-click.png",
    ᐃⲆΔⲆⵠⵠⵠ: "img/day-diamond-bow.png",
    ΔΔΔΔΔⲆⵠ: "img/night-diamond-bow.png",
    ⲆᐃⲆᐃᐃⲆⲆ: "img/day-diamond-arrow.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/night-diamond-arrow.png",
    ⲆΔⵠᐃⵠⲆΔ: "img/inv-amethyst-bow-out.png",
    ⵠⵠⵠᐃᐃⲆⲆ: "img/inv-amethyst-bow-in.png",
    ⵠⵠⲆᐃⲆⵠΔ: "img/inv-amethyst-bow-click.png",
    ⲆΔⲆⵠᐃΔᐃ: "img/inv-amethyst-arrow-out.png",
    ⲆⲆΔᐃⲆⲆΔ: "img/inv-amethyst-arrow-in.png",
    ⲆⵠᐃⲆᐃΔΔ: "img/inv-amethyst-arrow-click.png",
    ΔᐃⲆΔⵠᐃΔ: "img/day-amethyst-bow.png",
    ΔⲆⵠⲆⲆⲆⲆ: "img/night-amethyst-bow.png",
    ΔⵠΔΔΔⵠᐃ: "img/day-amethyst-arrow.png",
    ⲆⵠᐃΔⵠⲆᐃ: "img/night-amethyst-arrow.png",
    ⵠⵠᐃⲆⲆⲆᐃ: "img/inv-dragon-bow-out.png",
    ΔⲆΔᐃᐃⵠᐃ: "img/inv-dragon-bow-in.png",
    ΔΔΔᐃⲆᐃᐃ: "img/inv-dragon-bow-click.png",
    ⲆⵠⵠⵠΔᐃⲆ: "img/inv-dragon-arrow-out.png",
    ΔᐃᐃⲆⵠⵠⲆ: "img/inv-dragon-arrow-in.png",
    ᐃⲆΔⵠⲆⲆΔ: "img/inv-dragon-arrow-click.png",
    ᐃⲆⵠⵠⵠᐃΔ: "img/day-dragon-bow.png",
    ΔᐃΔᐃⵠᐃⵠ: "img/night-dragon-bow.png",
    ⵠᐃⲆⵠΔΔᐃ: "img/day-dragon-arrow.png",
    ⲆᐃᐃΔⵠᐃⵠ: "img/night-dragon-arrow.png",
    ⲆⲆᐃᐃᐃⵠⵠ: "img/inv-reidite-bow-out.png",
    ᐃᐃΔⵠⲆᐃᐃ: "img/inv-reidite-bow-in.png",
    ΔᐃⵠⵠⵠΔΔ: "img/inv-reidite-bow-click.png",
    ⵠⵠΔΔᐃᐃΔ: "img/inv-reidite-arrow-out.png",
    ⵠⲆⲆᐃΔΔᐃ: "img/inv-reidite-arrow-in.png",
    ⵠΔᐃⲆᐃⵠⲆ: "img/inv-reidite-arrow-click.png",
    ᐃⲆᐃᐃᐃⲆᐃ: "img/day-reidite-bow.png",
    ⲆⲆᐃᐃᐃⲆᐃ: "img/night-reidite-bow.png",
    ᐃⵠⲆⲆΔⲆᐃ: "img/day-reidite-arrow.png",
    ᐃⵠᐃⲆⵠⲆⵠ: "img/night-reidite-arrow.png",
    ᐃΔⲆΔⵠΔΔ: "img/inv-wooden-axe-out.png",
    ⵠΔΔⵠⲆⲆΔᐃΔ: "img/inv-wooden-axe-in.png",
    ᐃⲆΔⲆⲆⵠΔΔᐃ: "img/inv-wooden-axe-click.png",
    ΔⵠᐃⲆⲆΔΔⲆΔ: "img/day-wooden-axe.png",
    ⲆⵠΔⲆⲆΔⵠⲆⵠ: "img/night-wooden-axe.png",
    ᐃΔⵠⵠΔΔⵠⲆⲆ: "img/inv-stone-axe-out.png",
    ᐃᐃΔᐃⲆᐃⲆⵠΔ: "img/inv-stone-axe-in.png",
    ᐃⲆⲆⲆⵠᐃΔΔᐃ: "img/inv-stone-axe-click.png",
    ⲆⵠⲆⵠΔⵠⵠᐃⵠ: "img/day-stone-axe.png",
    ᐃᐃⵠΔⵠΔᐃΔⵠ: "img/night-stone-axe.png",
    ᐃᐃΔΔⲆⵠⵠᐃⲆ: "img/inv-golden-axe-out.png",
    ⲆᐃⲆᐃⵠᐃⵠΔᐃ: "img/inv-golden-axe-in.png",
    ⲆΔᐃᐃΔᐃΔⵠᐃ: "img/inv-golden-axe-click.png",
    ⵠⲆⲆᐃⲆΔⵠᐃⲆ: "img/day-golden-axe.png",
    ᐃⵠⲆⲆΔᐃⵠΔⵠ: "img/night-golden-axe.png",
    ΔⲆᐃⵠᐃΔⵠᐃⵠ: "img/inv-diamond-axe-out.png",
    ⵠⵠⲆᐃΔⵠΔⲆⵠ: "img/inv-diamond-axe-in.png",
    ᐃⵠΔᐃᐃⲆΔⵠᐃ: "img/inv-diamond-axe-click.png",
    ΔΔⵠΔΔⵠⵠᐃⲆ: "img/day-diamond-axe.png",
    ᐃⵠⵠⵠᐃⲆⲆᐃⲆ: "img/night-diamond-axe.png",
    ΔⵠⲆΔᐃⵠᐃΔᐃ: "img/inv-amethyst-axe-out.png",
    ΔⵠΔᐃᐃⵠⲆᐃᐃ: "img/inv-amethyst-axe-in.png",
    ⵠᐃᐃΔⲆΔΔⵠⲆ: "img/inv-amethyst-axe-click.png",
    ⲆᐃᐃⵠⵠΔⲆⵠⲆ: "img/day-amethyst-axe.png",
    ΔⵠⵠⵠᐃⵠⲆⲆΔ: "img/night-amethyst-axe.png",
    ⲆⲆΔⵠΔᐃⲆΔᐃ: "img/inv-reidite-axe-out.png",
    ᐃᐃⵠᐃᐃⲆΔⵠⲆ: "img/inv-reidite-axe-in.png",
    ⲆᐃΔⲆΔΔᐃᐃⵠ: "img/inv-reidite-axe-click.png",
    ⵠⲆΔΔᐃⵠᐃⲆⵠ: "img/day-reidite-axe.png",
    ⵠᐃⲆⲆⲆᐃⲆⵠⵠ: "img/night-reidite-axe.png",
    ᐃⲆⵠΔⵠⲆᐃ: "img/bandage-activated.png",
    ᐃⲆᐃⲆΔᐃΔ: "img/auto-feed.png",
    ᐃⵠᐃⲆⲆⲆⵠ: "img/stop-regeneration.png",
    ᐃⲆᐃΔᐃⵠᐃ: "img/stop-regeneration2.png",
    ᐃⵠⵠᐃᐃⵠⵠⵠⲆ: "img/day-wood-platform.png",
    ΔᐃᐃⵠⵠⵠΔΔΔ: "img/night-wood-platform.png",
    ⵠⲆΔΔΔᐃᐃⲆⵠ: "img/inv-wood-platform-in.png",
    ⵠⵠⲆᐃⲆⵠᐃᐃⵠ: "img/inv-wood-platform-out.png",
    ⵠⵠⲆⵠⲆⲆⵠⲆⲆ: "img/inv-wood-platform-click.png",
    ᐃᐃⵠⲆⲆΔⵠΔⲆ: "img/day-wood-shield.png",
    ΔΔΔΔⲆⵠᐃⲆᐃ: "img/night-wood-shield.png",
    ΔⲆⵠΔᐃΔⵠⲆΔ: "img/day-stone-shield.png",
    ⲆᐃⵠⵠΔΔⲆΔⵠ: "img/night-stone-shield.png",
    ΔⲆⲆⵠᐃⲆⵠⵠⲆ: "img/day-gold-shield.png",
    ⵠⲆⵠᐃⵠΔⵠᐃΔ: "img/night-gold-shield.png",
    ⵠᐃⵠⲆΔⲆᐃⵠᐃ: "img/day-diamond-shield.png",
    ᐃⲆΔⲆᐃⲆᐃΔᐃ: "img/night-diamond-shield.png",
    ⵠΔᐃⵠⵠᐃⲆᐃΔ: "img/day-amethyst-shield.png",
    ΔᐃΔᐃⲆᐃⲆⵠⵠ: "img/night-amethyst-shield.png",
    ⵠΔⵠΔᐃⵠΔⵠΔ: "img/day-reidite-shield.png",
    ᐃⵠΔⵠΔⵠⵠⲆᐃ: "img/night-reidite-shield.png",
    ⲆΔⵠⵠⲆΔⵠⲆᐃ: "img/inv-wood-shield-in.png",
    ⵠⲆⵠⲆⵠΔⵠΔⲆ: "img/inv-wood-shield-out.png",
    ⵠⲆΔⲆᐃⵠⵠᐃⵠ: "img/inv-wood-shield-click.png",
    ⲆⲆᐃⵠᐃΔΔⲆΔ: "img/inv-stone-shield-in.png",
    ᐃⲆⵠΔΔΔΔᐃᐃ: "img/inv-stone-shield-out.png",
    ⵠΔⵠᐃⲆΔⲆᐃΔ: "img/inv-stone-shield-click.png",
    ⵠᐃⵠᐃΔΔⵠⲆⲆ: "img/inv-gold-shield-in.png",
    ΔⵠᐃⲆⵠΔΔⲆΔ: "img/inv-gold-shield-out.png",
    ⵠΔⵠⲆⵠᐃⲆΔᐃ: "img/inv-gold-shield-click.png",
    ᐃⵠⲆΔⵠᐃⵠΔⵠ: "img/inv-diamond-shield-in.png",
    ᐃΔᐃᐃⲆⲆⵠΔⲆ: "img/inv-diamond-shield-out.png",
    ᐃⲆΔΔᐃⲆΔⵠᐃ: "img/inv-diamond-shield-click.png",
    ⵠΔᐃΔΔΔᐃΔⲆ: "img/inv-amethyst-shield-in.png",
    ᐃⵠᐃⵠⲆⵠᐃΔΔ: "img/inv-amethyst-shield-out.png",
    ⵠⵠᐃⲆᐃⵠⲆⲆⲆ: "img/inv-amethyst-shield-click.png",
    ᐃᐃᐃΔΔᐃⲆⲆⲆ: "img/inv-reidite-shield-in.png",
    ⵠⲆⵠΔⲆΔⲆΔⵠ: "img/inv-reidite-shield-out.png",
    ⲆⲆⲆⲆᐃⲆⲆⵠⲆ: "img/inv-reidite-shield-click.png",
    ΔᐃⵠᐃⲆⲆⵠⲆᐃ: "img/day-machete.png",
    ΔⵠΔᐃⲆⵠᐃᐃΔ: "img/night-machete.png",
    ⵠⲆᐃⵠⲆⵠⵠⲆⵠ: "img/inv-machete-in.png",
    ΔᐃᐃⲆᐃᐃᐃᐃᐃ: "img/inv-machete-out.png",
    ΔᐃΔΔⲆΔⵠⵠⵠ: "img/inv-machete-click.png"
  };
  ⲆΔⵠΔⲆⲆⲆ = [{}];
  ⲆΔⵠΔⲆⲆⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ⲆᐃⵠᐃⲆΔΔ = {};
  ⲆΔΔᐃⲆᐃᐃⲆΔ = {};
  const ub = 1;
  for (var qt in Ⲇᐃ) {
    ⲆᐃⵠᐃⲆΔΔ[qt] = Ⲇᐃ[qt];
  }
  if (Ya.ΔᐃᐃΔᐃⵠⲆ) {
    var bb = Ya.Math.acos;
    Ya.Math.acos = Ya.Math.asin;
    Ya.Math.asin = bb;
    var db = Ya.Math.acos;
    Ya.Math.acos = Ya.Math.asin;
    Ya.Math.asin = db;
  }
  function vb(b, c, d, e, f) {
    Ij(Dw, b, c, d, e, f);
    const g = Xf(of[0], of[1], of[2], of[3]);
    Ww(of[4], of[0], of[1], of[2], of[3], of[4]);
    return ~(g & 29301) & g | ~(g & 29301) & 29301;
  }
  const cb = 6;
  ⵠΔ = [];
  const mb = 19;
  ΔⲆᐃ = {};
  const pb = 19;
  ΔⲆᐃ.ⲆᐃⲆΔᐃ = 0;
  const Cb = 100;
  ΔⲆᐃ.ᐃᐃⲆⵠ = 1;
  ΔⲆᐃ.ⵠⵠⲆⵠ = 2;
  ΔⲆᐃ.ⵠⵠΔΔ = 3;
  ΔⲆᐃ.ⲆᐃⲆⲆ = 4;
  ΔⲆᐃ.ⵠⵠⲆⲆ = 5;
  const Tb = 13;
  ΔⲆᐃ.ⲆⲆⲆⲆ = 6;
  const fb = 2;
  const zb = 11;
  const yb = 19;
  ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ = 7;
  const wb = 4;
  ΔⲆᐃ.ᐃⵠⲆⵠΔ = 8;
  ⵠᐃᐃⵠ = {};
  ⲆⲆΔⲆ = [];
  const Pb = 5;
  const kb = 255;
  ⵠⵠⵠΔⵠᐃᐃ = function (a, b) {
    for (var c = 0; a.length > c; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -1;
  };
  var Ab = [];
  function zt(a, b) {
    for (var c = 0; Ab.length > c; c += b) {
      var d = Ab[c];
      if (a === d[0]) {
        Mb(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const Jb = 3;
  function Mb(b, c, d, e) {
    var f = ⲆⲆΔⲆ[b];
    if (Sh !== f) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / kx.ᐃΔⲆⲆᐃ;
        var m = d * 193 / kx.ⲆⲆᐃⲆᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ⵠΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / kx.ᐃΔⲆⲆᐃ;
        m = d * 600 / kx.ⲆⲆᐃⲆᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ⵠΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  ΔⲆᐃⵠΔΔⵠⵠΔ = function () {
    for (var b = 0; b < 2; b++) {
      ⵠΔ[818][b].clearRect(0, 0, 193, 193);
      ⵠΔ[818][b].drawImage(ⲆⲆΔⲆ.MAP[b], 0, 0, 193, 193);
      ⵠΔ[819][b].clearRect(0, 0, 600, 600);
      ⵠΔ[819][b].drawImage(ⲆⲆΔⲆ.MAP[b], 0, 0, 600, 600);
      for (var c = kx.ᐃΔⲆⲆ.length - 1; c >= 0; c--) {
        var d = kx.ᐃΔⲆⲆ[c];
        var f = d.x1 * 193 / (kx.ᐃΔⲆⲆᐃ * 100);
        var j = d.y1 * 193 / (kx.ⲆⲆᐃⲆᐃ * 100);
        var k = d.w * 193 / (kx.ᐃΔⲆⲆᐃ * 100);
        var m = d.ᐃⵠⲆ * 193 / (kx.ⲆⲆᐃⲆᐃ * 100);
        var p = d.x1 * 600 / (kx.ᐃΔⲆⲆᐃ * 100);
        var q = d.y1 * 600 / (kx.ⲆⲆᐃⲆᐃ * 100);
        var u = d.w * 600 / (kx.ᐃΔⲆⲆᐃ * 100);
        var v = d.ᐃⵠⲆ * 600 / (kx.ⲆⲆᐃⲆᐃ * 100);
        if (kx.ᐃᐃⲆᐃΔ === d.ᐃᐃⵠ) {
          ⵠΔ[818][b].drawImage(ⲆⲆΔⲆ.FOREST[b], f, j, k, m);
          ⵠΔ[819][b].drawImage(ⲆⲆΔⲆ.FOREST[b], p, q, u, v);
        }
        if (kx.ᐃᐃΔΔⲆⵠⵠ === d.ᐃᐃⵠ) {
          ⵠΔ[818][b].drawImage(ⲆⲆΔⲆ.WINTER[b], f, j, k, m);
          ⵠΔ[819][b].drawImage(ⲆⲆΔⲆ.WINTER[b], p, q, u, v);
        }
        if (d.ᐃᐃⵠ === kx.ΔⲆⲆΔΔΔᐃ) {
          ⵠΔ[818][b].drawImage(ⲆⲆΔⲆ.LAVA[b], f, j, k, m);
          ⵠΔ[819][b].drawImage(ⲆⲆΔⲆ.LAVA[b], p, q, u, v);
        }
        if (kx.ᐃΔΔΔⵠΔⵠ === d.ᐃᐃⵠ) {
          ⵠΔ[818][b].drawImage(ⲆⲆΔⲆ.CAVE[b], f, j, k, m);
          ⵠΔ[819][b].drawImage(ⲆⲆΔⲆ.CAVE[b], p, q, u, v);
        }
        if (kx.ⵠⲆⵠⵠᐃΔⲆ === d.ᐃᐃⵠ) {
          ⵠΔ[818][b].drawImage(ⲆⲆΔⲆ.DESERT[b], f, j, k, m);
          ⵠΔ[819][b].drawImage(ⲆⲆΔⲆ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  const Bb = 8;
  const Eb = 255;
  const Db = 14;
  const Ib = 12;
  function Sb(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var g = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var i = 1; c > i; i++) {
      g.push({
        x: Math.sin(i * f) * d,
        y: Math.cos(i * f) * d
      });
      var j = g.length;
      a.push(ⲆᐃΔ.ⵠᐃⲆΔᐃⲆⲆ(g[j - 2], g[j - 1]));
    }
    a.push(ⲆᐃΔ.ⵠᐃⲆΔᐃⲆⲆ(g[g.length - 1], g[0]));
    var k = a[a.length - 1];
    b.moveTo(k.x, k.y);
    for (i = 0; i < c; i++) {
      b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
    }
    b.closePath();
  }
  function Qb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  function _b(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  function Fb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    Lb(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    Rb(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  function Rb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function jb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, e * (Math.PI * 2));
  }
  function Gb(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var l = c * 82;
    var g = h / 2;
    var b = l / 2;
    var d = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    Lb(i, -g, -b, h, l, n);
    Rb(i, e, e, d);
    return f;
  }
  function Lb(b, c, d, e, f, g) {
    if (g * 2 > e) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  ᐃΔΔΔⲆΔΔⲆⵠ = function () {
    ⵠᐃᐃⵠ = {
      ⵠⵠⲆᐃⲆ: [{
        id: 0,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆᐃⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆᐃⵠⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⵠⲆΔⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠⲆⲆΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⲆⲆᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⲆⵠⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔΔⲆΔᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃΔⵠⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆΔⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆⲆΔᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠΔᐃⵠᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⵠⵠᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔΔⲆⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⲆΔⲆΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠᐃΔΔⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⵠⲆᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔⵠᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃᐃᐃⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔⵠⲆⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃᐃⵠΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔΔⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠⲆⲆⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃⲆΔⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆᐃᐃΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔΔⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⵠⲆᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆΔᐃΔΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⵠⵠⲆⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆⵠⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠⲆΔΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆΔⵠⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⲆⲆᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃⲆᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠΔⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆᐃⲆᐃⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⵠⲆᐃⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃᐃΔᐃⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠΔⲆⵠᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⲆᐃᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⵠⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⵠⲆⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆⲆᐃΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔΔⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠⲆⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠⲆΔᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆΔⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠΔᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠⲆⵠⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔᐃⲆⲆᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔᐃᐃⵠᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠⵠᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃΔⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆΔΔΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆᐃᐃᐃⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃⵠᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔᐃΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠΔⵠᐃΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠᐃⲆⵠΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃⲆⵠᐃⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⲆⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⵠⵠⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔΔΔⵠΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆᐃΔⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃᐃⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆΔⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔⵠΔⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔᐃⲆΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠᐃᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆⲆⵠᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃᐃⲆⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⲆⲆⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃᐃᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔΔⵠΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔᐃΔᐃⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠᐃᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔΔΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⲆᐃᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⲆΔᐃᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆΔᐃⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔΔᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔᐃΔᐃⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⵠⵠᐃⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆΔⲆⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠΔᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⵠⵠⲆᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔⵠⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⲆⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⵠᐃΔᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆΔⲆᐃΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⵠᐃᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃᐃΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆᐃⲆᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃᐃⲆᐃⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔᐃⵠⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆⵠⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔⵠⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⲆΔΔΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⲆΔⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆᐃⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠΔⲆΔⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠΔΔΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔᐃⲆΔᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔᐃⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆⲆⲆⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⵠⲆΔⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠᐃⲆᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆΔᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃⲆΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⲆⵠᐃΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃⵠᐃⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃᐃⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔΔΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⲆΔᐃⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃᐃΔⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃᐃᐃᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⵠⲆⲆᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⲆΔΔᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⲆⲆΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⵠⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃᐃΔⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠΔᐃΔⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⲆᐃⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆⵠⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⵠⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠΔⲆⵠΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠΔᐃᐃΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔⲆΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃᐃΔΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠᐃᐃⲆⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆΔΔⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠΔⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⵠᐃΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃᐃⵠΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃⵠⵠⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃⵠⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⲆΔᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃⲆⲆΔⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔᐃⵠⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃΔⵠⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔᐃΔⵠⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆᐃⵠⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃΔⵠᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠᐃⲆⲆⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃᐃⲆⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠᐃⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔᐃⲆⲆⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆΔⵠⵠΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃΔΔⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃᐃⵠⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔⲆⲆⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃᐃⲆᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃΔⵠⵠⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆᐃΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃⵠΔⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠᐃᐃΔⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔᐃⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆΔᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠΔⲆᐃΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆⵠⵠⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⵠΔⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃⲆΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔⲆⵠΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⲆΔⵠⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆΔᐃⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔᐃⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔⲆⵠⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃᐃⵠⲆⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃΔᐃᐃΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃⵠⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆΔⲆΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⲆⵠⵠΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆΔΔᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆᐃᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⲆΔⲆⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔᐃΔᐃΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⲆΔΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃⵠΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃΔᐃⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃΔⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔᐃΔΔⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃΔⲆᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⲆΔΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⲆⲆⲆⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃΔΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃᐃⲆⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃᐃⲆⵠΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⵠᐃⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆⵠΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⲆⵠⵠΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔⵠΔⵠᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠΔΔⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠⵠΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃᐃⵠⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⲆⲆΔⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆⵠⲆⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔᐃⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆⵠⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃⵠΔΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔⲆⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔⵠΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃᐃⵠⲆΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠⵠⵠΔΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆᐃΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ΔⵠΔ: Ⲇᐃ.ΔΔΔΔⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃΔΔΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⵠᐃⵠΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠΔⵠᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆⵠⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⲆΔⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⵠᐃⲆⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.Ⲇᐃⵠᐃⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠⲆⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠⲆⵠⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃΔᐃΔⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆⵠΔᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⵠⵠᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆΔΔⵠΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆᐃᐃΔΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃᐃΔⵠᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔⵠΔⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔΔΔⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆⲆⵠᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔΔⵠⵠΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠᐃΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⵠⲆⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆᐃΔⵠᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⲆΔΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ΔⵠΔ: Ⲇᐃ.Ⲇⵠⵠᐃⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆᐃⵠⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⲆⵠⲆΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⵠⵠΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆΔⲆⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⲆⲆΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⵠⵠⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠᐃΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔᐃⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⲆⵠⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃᐃⲆⵠⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆᐃΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃΔΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⵠⵠⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃΔΔⵠⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔⵠⲆⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⵠᐃⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃᐃⵠⲆᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠⲆⵠᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ΔⵠΔ: Ⲇᐃ.ΔΔΔⵠΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⵠⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆΔⵠΔⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃΔⵠᐃⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔΔΔΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⲆⵠΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠᐃΔⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔΔⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⲆⲆΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⵠⲆᐃⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⲆⵠᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔⲆⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃᐃⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃᐃⲆΔⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔᐃⲆⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆΔⲆᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆΔⲆⲆᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆᐃⲆᐃΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆⲆⲆⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⲆΔⵠΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠⵠΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃᐃᐃΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⵠⵠⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⵠⲆⲆᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃⵠΔⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠΔᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔΔⵠⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃᐃⲆⵠⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⲆΔᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠⲆⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⲆᐃⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃᐃⲆⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃᐃⵠΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆᐃⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠⵠΔⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆᐃΔᐃⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔⵠⵠΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠᐃᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆⵠᐃⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠΔΔΔⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃᐃΔⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔΔᐃᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⵠᐃᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔⲆⵠᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔΔⲆΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⲆᐃΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⵠΔΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃᐃΔᐃⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⵠⲆⵠΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⲆⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔΔᐃᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃⲆⵠⲆᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.Δᐃᐃᐃⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃⵠᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⲆⲆⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔᐃΔᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆᐃΔⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆΔᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⵠⵠΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⵠᐃΔⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⵠΔΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃᐃᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔⲆⲆΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⵠᐃⵠⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆᐃⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠᐃⲆⲆⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⲆΔΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠᐃⲆᐃⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔⵠΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆᐃΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔⲆᐃⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⲆᐃⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃᐃΔⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠⲆΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃⲆⵠⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⲆΔⵠⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆΔⲆⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ΔⵠΔ: Ⲇᐃ.Ⲇⵠⵠᐃᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆᐃⵠΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠΔⵠᐃᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆΔᐃΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃⲆⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⵠᐃᐃⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⵠⲆΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆⵠⲆⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⵠⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⵠⲆⵠΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃᐃⲆⲆᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆΔᐃΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃᐃᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆᐃⲆⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔᐃΔⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⵠᐃΔᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆΔⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔᐃΔᐃᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔⵠΔⲆΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠᐃⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⲆⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃᐃᐃΔΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔΔⵠⲆᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔⵠᐃⵠᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⲆⵠⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⲆⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.Δⵠᐃⵠⵠⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃᐃᐃⲆⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠΔᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆⲆⵠⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⵠⵠᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃΔⲆⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆᐃⲆΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⵠⵠΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃᐃΔⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔⲆᐃᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⲆΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⵠⲆⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃⲆΔⵠⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃⵠΔⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆᐃΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔᐃⵠⲆΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⵠΔΔᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔⲆⲆΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆⲆΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠⵠΔΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃᐃⲆⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆᐃⲆⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔⵠᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⲆⲆᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⵠⵠΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠᐃᐃΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠⲆᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠΔⵠᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃΔᐃⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠⲆⲆⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔⵠⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆⵠⲆΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⵠⵠⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔᐃⲆⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠⲆⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⵠΔᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⵠⲆⲆΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃᐃΔⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃᐃⵠⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃᐃᐃΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⲆⵠᐃΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠΔⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆΔΔⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠᐃΔΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔΔΔⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃΔⲆᐃⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃⲆⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔⵠⲆᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆⵠΔΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠⲆⵠⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆΔᐃⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔᐃⲆᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⲆⲆᐃⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔⵠⵠⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆΔⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠΔⲆⵠⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠᐃⲆⵠᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⲆⵠⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔᐃⵠⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔΔᐃΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⲆΔⵠⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃⵠΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆΔΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠᐃΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆᐃΔΔⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔΔΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆᐃⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔⲆΔⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔΔⵠΔΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔΔΔⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⵠᐃⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⵠΔⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⲆᐃⲆΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃᐃⵠΔⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠᐃΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃᐃΔⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⵠᐃΔΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⵠᐃΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠᐃᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠᐃᐃⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆΔⵠⲆⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⵠⵠΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔⲆⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⵠⵠⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠΔᐃᐃⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆⵠΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⵠⲆⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆᐃⵠⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆᐃⵠⲆΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆᐃⵠⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆᐃⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆΔᐃⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠᐃΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔᐃΔᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.Ⲇᐃᐃᐃᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆⲆᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔⲆΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆᐃᐃⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠΔⵠΔⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃΔΔⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠΔᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠⵠⲆⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠΔΔᐃⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⵠΔᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔᐃⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔΔᐃⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔΔⲆⵠᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔΔⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔΔΔⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⲆΔΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆᐃᐃⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⵠⲆⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃⲆⵠⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠⲆⵠⵠΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠΔⲆⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔᐃⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔⵠⵠΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆΔⲆⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠΔΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⵠΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆⵠᐃⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⵠⲆΔⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆⲆᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⵠΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔΔⲆⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⲆΔᐃⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆᐃᐃⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆⲆⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⲆⲆⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔᐃᐃΔⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆⵠΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃᐃᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⵠᐃⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⲆⲆⲆⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔⵠⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔⵠᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠΔΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆⲆⵠΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠΔⵠⲆΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃΔᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⲆⲆⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⵠⵠⲆΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⲆᐃⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠΔᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔᐃᐃⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⵠΔⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.Δᐃᐃᐃⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⵠⵠⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔⲆᐃⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⲆⲆⲆⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃᐃⲆⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆᐃΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃΔⵠΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆΔΔᐃⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔΔⲆᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆᐃΔⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔᐃⵠᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆᐃⵠⵠᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆᐃⵠᐃⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃᐃΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⵠᐃⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆⵠⲆᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆᐃⲆⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃᐃΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⲆΔⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔΔᐃΔⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠᐃΔᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆᐃⵠⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⲆⲆⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆΔⲆᐃⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠᐃΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⲆΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆᐃⲆΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠᐃⲆⵠᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆΔᐃΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆΔΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃΔΔΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆᐃⲆⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠⵠᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃⲆΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃᐃᐃⲆᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⲆⲆⲆΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔΔΔᐃⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠⵠⵠᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆⵠⵠⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆΔᐃⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⵠᐃⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠⵠΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠΔᐃΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃᐃⵠⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⲆΔΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆᐃⵠⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⵠⲆⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃⲆᐃᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃΔⲆⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆᐃΔᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆΔᐃΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔΔⵠᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃΔⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆᐃⵠᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠⲆⵠΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠᐃΔΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆⲆⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔⲆΔᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆΔᐃⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆⲆᐃⲆΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃᐃᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃⵠΔᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔΔⲆⲆⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆΔⵠΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆⲆⲆⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆⲆⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔΔⲆᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⲆⵠⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆΔⵠⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆΔⲆⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔΔⲆΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔⵠΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔⵠΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⲆⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃᐃⵠⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠᐃΔⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔᐃⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⵠΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃᐃᐃΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⵠⲆⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔΔⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔΔΔⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⵠⲆΔⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠΔΔⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠⲆⵠᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔⲆᐃᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆᐃⲆⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃΔⵠⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆᐃᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⵠΔᐃᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⲆᐃⵠⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃᐃⲆᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔᐃᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔΔΔⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⵠⲆΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔᐃᐃᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠᐃᐃΔⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃᐃΔᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔΔⵠᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠᐃⲆΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃᐃΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔᐃⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃΔⵠΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆᐃᐃⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃΔΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆⵠⲆⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⵠⲆΔⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆⵠΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠᐃⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⲆᐃⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⵠⵠⲆⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⵠⵠⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠᐃᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆΔΔⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⵠⲆᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠⵠⵠΔⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠΔⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⲆΔⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠΔⲆⵠΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆΔⵠΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆᐃᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔⲆΔᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⵠⲆⵠⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⵠΔⵠᐃⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠⲆᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔΔⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⲆΔΔᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆΔᐃᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆⵠᐃⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆᐃⲆᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⲆⲆⲆΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃᐃᐃᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆΔⵠᐃΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⵠⵠⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃⵠⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔⵠⵠⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔⵠⲆΔⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⲆⵠᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆⵠᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔⲆΔΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔⲆⲆⵠⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⵠⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔⲆⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠΔⲆⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔᐃΔⵠⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃΔⲆᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔᐃᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔΔⲆⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆᐃΔⲆᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔᐃⵠΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠᐃᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠΔΔΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃΔΔΔΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠΔᐃΔᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆⵠⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⵠⵠᐃΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⲆⲆᐃΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆᐃᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠⲆⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⵠΔⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⵠⲆⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆΔΔᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠᐃⲆⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔⲆΔⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆᐃᐃⵠⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔᐃᐃⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⲆⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃⵠⵠΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⲆⲆᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⵠⵠⲆⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠⲆⲆᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔⲆⵠᐃⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⵠΔᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃᐃⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⲆⲆⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠᐃⵠⲆᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃΔΔΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔⵠⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃᐃⵠᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃⲆⲆⲆⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔΔΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆΔⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆⵠᐃΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠΔⵠΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⵠⵠⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃΔΔⵠⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆΔⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⲆⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆⲆΔΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⲆΔⲆⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⲆⲆΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠᐃⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃΔᐃΔⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆΔᐃⵠᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔⵠΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔᐃΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⲆⵠⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠΔᐃΔΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠᐃⲆⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⵠᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆᐃⲆᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃΔⵠᐃᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⵠⵠⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔⲆΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃΔᐃⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔⵠⲆⲆᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆⲆⲆⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃᐃᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃΔᐃᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆΔⲆⵠᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃⵠᐃᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆΔⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃⵠⵠⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆΔⲆⲆⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆⵠⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠᐃⵠⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔⲆᐃⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠᐃⲆᐃᐃᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔᐃᐃⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃⵠⲆⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⲆⵠⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⲆⲆᐃⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆⵠⵠⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔᐃⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⵠⲆⲆΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔΔⲆⵠⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃⵠᐃⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⲆⲆΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⵠⵠⵠᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⲆΔᐃΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠᐃⲆΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠⵠⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⵠⵠᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃⲆᐃⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃᐃᐃⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⲆⵠΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⵠⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⵠΔΔΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⲆⵠΔⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠΔΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆᐃⵠΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔᐃΔΔΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔⵠᐃΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔⲆⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠΔᐃⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⲆⵠⵠⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔᐃᐃⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔᐃⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⵠᐃᐃⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⲆⲆⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⵠⲆΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆΔⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃΔΔᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆⲆⲆⲆⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆᐃⵠⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆΔⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⲆⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠⵠᐃΔΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆᐃΔΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆᐃⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆΔⲆΔⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔᐃⵠⲆⲆΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠΔΔᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠⲆΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃᐃⵠⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⲆⲆᐃᐃⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃⵠⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃΔⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆΔΔⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆᐃⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆᐃΔⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃΔⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⵠΔΔΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⲆΔⵠᐃⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⲆΔⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃⵠΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠΔⲆⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔΔᐃΔⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃᐃⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆᐃΔⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⲆⲆⵠⵠΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆΔⵠΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆΔΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⲆⵠⲆᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠⵠΔⲆⲆⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠⲆΔⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃⲆⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔᐃᐃᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⲆⵠΔᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆᐃⵠΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔᐃⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆΔΔᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠΔᐃⲆΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔⲆΔᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠⵠΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆⵠΔᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃᐃⵠⵠⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔⵠΔⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⲆᐃᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆⵠⵠⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⵠⲆᐃⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆᐃΔΔⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠⵠⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔᐃΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⲆᐃᐃⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔᐃⵠⲆⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆⲆⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.Δᐃⵠⵠᐃⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆⵠⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔΔⲆΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⲆΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆΔⲆⲆⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃΔⵠⵠⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃᐃᐃᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠΔᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔⲆⵠᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠⵠⵠⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠᐃᐃᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆᐃⲆⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⵠⵠⲆᐃⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠᐃⲆΔΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆᐃⵠᐃΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃⵠⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔⵠⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔⵠᐃᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃᐃⲆⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠΔⵠⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⵠΔⲆⵠⲆⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠΔⲆᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔΔᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔᐃⵠⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃΔΔᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⲆᐃⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔⵠⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⵠᐃⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃⵠᐃⲆⲆⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃΔⵠⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆᐃΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔⵠⵠⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⵠⲆΔⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠΔᐃΔᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆⵠⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠⵠⵠᐃᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠᐃⵠⲆΔⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆΔΔⵠΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔᐃΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.Ⲇᐃⵠᐃᐃⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔΔⵠⵠᐃⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔⲆⲆⵠⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃΔᐃᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃᐃᐃΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠⵠΔⵠⵠᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆΔⲆᐃᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃΔⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠΔᐃⵠᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔⲆⵠⵠΔⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆᐃⵠΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⵠⵠⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆⵠⵠⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃΔⲆⲆⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⵠΔⵠⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔⵠⵠⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠΔΔⲆⵠⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⵠⵠⲆⵠⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔᐃⵠΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃⵠⲆⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⵠΔΔᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⵠⵠΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃΔⲆⵠⵠΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃᐃΔⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔᐃᐃΔⲆΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔⵠⵠᐃΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃᐃⲆⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠΔⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⲆⲆⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔⲆΔΔΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠⲆⲆⵠⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔⵠᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆⵠⲆΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆΔⲆⵠⲆᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⲆⵠⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃΔⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃΔΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⵠΔⲆΔᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃⲆᐃᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔⲆⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠΔⵠΔᐃ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⵠⲆⲆⲆΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔⲆⵠᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆⵠⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔᐃⵠᐃΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆⲆΔᐃΔᐃΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃⵠⵠΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠᐃΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔᐃⵠΔΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆᐃΔᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔΔΔⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠⲆΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠⵠⲆⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃΔΔᐃᐃᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⲆⵠⲆΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆⵠΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆᐃᐃᐃⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆⵠᐃΔⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔΔⵠΔⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ΔⵠΔ: Ⲇᐃ.Δⵠⵠᐃⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔⵠⵠⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆⵠⲆⵠⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃⵠᐃⵠⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆᐃⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔⲆⵠⵠⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆΔᐃⲆΔⲆΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃΔⵠᐃⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠⲆᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆⲆⵠⵠΔ,
        ᐃΔΔⵠ: Ⲇᐃ.ⵠΔΔᐃΔⵠⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⵠᐃΔⲆⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃⵠⵠⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⲆᐃΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ⲆᐃⲆⵠⵠⵠᐃ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⲆⵠΔⵠᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⲆⲆⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠᐃᐃⲆⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ΔⲆᐃΔᐃᐃⵠ,
        ᐃⲆΔᐃ: Ⲇᐃ.ⲆⵠⵠⵠⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔⲆⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆΔΔⲆⵠ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃᐃᐃⵠᐃⲆ,
        ᐃⲆΔᐃ: Ⲇᐃ.ΔᐃΔⲆΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠⲆᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆⲆⲆΔⲆ,
        ᐃΔΔⵠ: Ⲇᐃ.ᐃᐃⲆⲆⲆΔΔ,
        ᐃⲆΔᐃ: Ⲇᐃ.ᐃᐃᐃⵠΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ,
        ⲆⵠⲆ: "OmarJr13",
        name: "Blob Skin"
      }],
      ⵠⵠⲆᐃ: [{
        id: 0,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃΔᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔΔᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃΔⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃΔⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⲆΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆᐃΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃΔⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃΔΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠⵠⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⲆⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠᐃΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆΔⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆᐃΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆΔⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃⲆⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⵠΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠΔⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃΔⵠΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔⲆᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⲆᐃΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⲆⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃᐃⲆΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⲆᐃⲆⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠΔⵠᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⲆΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃⲆΔⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆⲆᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⵠⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ΔⵠΔ: Ⲇᐃ.ΔΔΔΔᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃΔΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔᐃᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔΔᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔᐃᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⵠⵠⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆᐃᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆᐃᐃᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃΔⵠⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆⵠΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔΔᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔᐃᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔᐃΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⲆᐃᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆΔΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔᐃⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃᐃᐃⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⲆᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔⲆⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆΔⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔΔⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⵠΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔᐃᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⲆⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⲆΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠⵠⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔᐃΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠᐃⲆⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⵠΔⲆⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃⵠᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆⵠⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃΔⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔᐃΔⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⵠⵠᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃᐃⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆᐃⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⲆᐃⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆᐃᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⲆⵠΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠⵠⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆΔᐃⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆΔⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃⲆΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃⲆⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ΔⵠΔ: Ⲇᐃ.ΔᐃᐃⲆⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃΔᐃⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔⲆⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠΔΔⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠⵠⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔⲆΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃⲆΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆΔⲆⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃΔΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃⲆⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃⲆⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⲆⲆⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃΔⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⵠΔΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆᐃΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⵠⵠᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃᐃᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔΔⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃⵠΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔᐃⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃⵠⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔΔⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃᐃᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⵠⵠΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠᐃᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃΔΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆⵠΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠⲆΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔΔΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔⵠⵠⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠΔᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔⵠᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔⲆⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠᐃᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠⵠⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⵠⵠⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⲆᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⵠᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃⲆΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⲆΔⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆⵠᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔⵠⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃⵠᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆΔΔᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃΔⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠⵠⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠΔᐃᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆⵠΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆⵠⵠᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃⵠⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔΔΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔᐃᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆⵠⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃⵠᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⵠⲆⵠΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠⲆⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃΔΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆᐃⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⲆΔᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⵠⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃᐃⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⵠᐃᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆⲆⲆⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔⲆΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃΔⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠᐃᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.Δⵠᐃⵠᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠΔᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⵠᐃⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆΔⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⵠⲆᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔΔⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔᐃΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃΔⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⲆⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃᐃⲆⲆⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⵠΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃⵠⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⲆⵠᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⵠⵠΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆΔᐃⵠⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃⲆⵠᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔᐃⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⵠⵠⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⲆᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⲆᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.Ⲇⵠⵠᐃᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ᐃⲆⲆⲆⵠ: [{
        id: 0,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠᐃⲆⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⲆΔⵠⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆᐃΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔᐃΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆΔⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃΔΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⵠⵠⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃⵠᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃⵠΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⵠⲆⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆⵠΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃᐃᐃⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃᐃΔᐃᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔⲆⲆΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠᐃΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠⵠⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ΔⵠΔ: Ⲇᐃ.Δⵠⵠⵠⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⵠⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔⲆΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠⵠⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⲆᐃΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔᐃⲆⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠᐃⲆᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔΔᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃΔⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⵠⲆⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⵠᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃⵠⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃᐃᐃⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃΔⵠⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆⵠⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⲆΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆⵠᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃᐃⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃᐃΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆᐃᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃᐃΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆΔᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔΔⵠᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔᐃⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠⲆⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⲆⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆⲆᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠᐃⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⲆⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆΔⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠⵠⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃΔⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃᐃᐃᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⲆⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⲆΔΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠⵠⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃⵠᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃΔᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔᐃᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆⵠⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠⲆΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠⵠΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⲆⲆⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⲆᐃⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆᐃⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔΔⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⲆⲆⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆᐃᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔΔⲆⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⲆᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠᐃⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.Δᐃᐃⵠᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠⵠⵠᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⵠⲆΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆⲆᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆᐃΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠⲆΔⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠΔⲆⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⲆᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃⲆⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆⵠΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠΔⵠᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠⲆⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃⵠⵠᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃᐃⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔΔⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆᐃᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠΔΔⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔᐃᐃΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃⲆⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆⵠⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃΔΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃΔⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃΔⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆΔΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔᐃΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔⵠⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠᐃⵠᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆΔΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃΔⲆΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆⵠᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⵠⲆᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆᐃⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⲆⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠⲆᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃΔᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃᐃᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.Δᐃⵠᐃᐃᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆⵠᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃⲆΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆᐃΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⲆΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠΔⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆᐃΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆΔᐃᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔⲆΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔᐃⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔΔⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔᐃⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔΔⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠᐃⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆⲆⲆⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆᐃⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔᐃⵠⵠⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆΔᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠΔΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⵠΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆΔΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆⵠΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⵠᐃᐃⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠᐃⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆⵠⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔΔᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔΔᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆⵠᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆΔⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆⲆⵠᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⵠⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ΔⵠΔ: Ⲇᐃ.ΔᐃᐃⲆⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆⵠᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆᐃⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃΔⵠⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃᐃΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠⵠᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆⵠⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆΔΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔΔΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔⵠⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠⲆⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔⵠⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆⲆⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔⲆΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠⵠΔⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⵠΔⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃΔᐃᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔΔΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ⲆⲆⵠⲆⵠ: [{
        id: 0,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔⲆⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠⲆᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆΔⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃᐃⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆΔⵠΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔⲆⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⲆᐃⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⲆᐃᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆᐃⲆⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃᐃᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⲆⲆΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⵠᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔⵠⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⲆⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃⵠᐃᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆⵠᐃᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⵠⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠⲆΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⲆⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃⲆΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃᐃΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆᐃⵠᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⵠⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆⲆΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃΔⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆᐃΔᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⵠⲆΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⲆⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⵠⲆΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔⲆⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠΔΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠᐃⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔⲆᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠΔᐃᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⵠᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⵠΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃᐃΔⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃⲆⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ΔⵠΔ: Ⲇᐃ.ΔΔⲆᐃⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠᐃΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠᐃᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔᐃΔᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⵠⵠⵠⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠⵠⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃⲆⵠᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠⵠᐃᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⵠⲆⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔΔΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆⵠΔⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃⲆⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠⲆⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔΔⵠⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃᐃᐃΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔΔⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠΔᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃⲆⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃΔⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃⲆⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆⲆΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔⵠᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔⲆΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃⵠⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠⲆΔⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔⵠᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔᐃΔⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠΔΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠΔⲆⲆⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔΔᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃᐃΔᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃΔΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⵠᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔᐃⲆᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔᐃᐃᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⵠΔⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃⵠⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃⲆⲆᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠᐃⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃᐃᐃᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠᐃᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠⲆΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆⵠᐃᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃᐃᐃΔⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔⲆΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃᐃⲆΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃΔⵠⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔΔΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔᐃΔⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⲆⲆᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⲆⵠΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⲆΔᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃᐃⵠᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠᐃΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆⲆᐃᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⲆᐃⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠⵠⲆⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆⵠΔΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Cursed Book"
      }],
      ⵠΔᐃⵠΔ: [{
        id: 0,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠᐃΔΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃΔΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⲆⲆⲆⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃⵠᐃΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠᐃΔΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆᐃⵠΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⲆᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⲆⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠΔᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔΔᐃⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ΔⵠΔ: Ⲇᐃ.ΔΔΔᐃⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔⲆⵠᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔᐃⲆΔᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃΔᐃⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⲆⲆᐃᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃᐃⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔΔΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔⵠΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⵠΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⵠᐃᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆΔⲆⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⵠⵠⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⵠΔⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔⵠⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠΔᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃΔᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔⲆⲆΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃᐃⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔΔΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⵠΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ΔⵠΔ: Ⲇᐃ.ΔΔᐃΔᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔᐃΔᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔΔⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃᐃⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆΔΔᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆΔΔⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠⲆⵠⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃᐃᐃΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃΔⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⵠⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆᐃⲆᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠΔⵠΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⲆᐃⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠᐃΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠᐃⵠᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠΔⵠⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠⲆΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔᐃᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃᐃⵠⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆᐃⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆⵠΔᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⵠⵠⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠⲆᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⵠΔΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔΔΔΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠⵠⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⲆΔΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃᐃΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃΔᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃⵠⲆⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔⲆⵠⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃⵠᐃⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠΔⲆᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆΔⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠⵠⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⲆⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ΔⵠΔ: Ⲇᐃ.ΔΔΔᐃᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆᐃΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠΔⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⲆⵠΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠⲆⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⵠᐃⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃᐃᐃΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⵠⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⵠΔⵠᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⲆⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠΔᐃΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⵠΔΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠᐃⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆΔᐃⲆⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆᐃⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠΔΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ΔⵠΔ: Ⲇᐃ.ᐃΔᐃⵠΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃᐃⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆᐃᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆΔⵠΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⲆΔⲆΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆⲆᐃⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆᐃΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⵠᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⲆᐃᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠⵠΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔⵠⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆⲆⵠΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⵠⲆΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⵠⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃᐃΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆᐃᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔᐃΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆᐃΔΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⵠⲆᐃⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⲆᐃᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆᐃᐃⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠᐃΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔⵠⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔΔΔⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⵠⵠⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆΔΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃΔᐃΔⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⵠⵠΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⵠⵠⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆᐃΔΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆⵠⵠᐃΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔΔᐃΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔⵠΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⵠΔⵠⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆΔᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔⵠΔⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⲆⵠΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃΔΔⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆⵠᐃᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠᐃᐃᐃⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃᐃⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆᐃⵠᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ΔⵠΔ: Ⲇᐃ.ΔⵠⲆⲆΔΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠΔᐃⲆⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆⲆⲆⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆⲆⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⵠΔⵠⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆΔⲆⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠᐃᐃᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃⲆΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ΔⵠΔ: Ⲇᐃ.ΔᐃⲆᐃⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⵠⵠⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ΔⵠΔ: Ⲇᐃ.ᐃΔΔᐃⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃⲆΔᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆᐃⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⲆⵠⲆⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ΔⵠΔ: Ⲇᐃ.ⵠΔΔⲆⵠᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆΔⵠΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ΔⵠΔ: Ⲇᐃ.ΔⲆᐃᐃⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔⵠᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃᐃᐃⵠⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔⵠΔⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔᐃΔⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃⲆⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠⵠᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⵠⵠᐃⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔᐃΔΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠᐃᐃⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠⵠⲆⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆᐃⲆΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃⵠΔⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔⵠᐃⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠΔᐃⲆΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃΔᐃΔⲆⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⲆᐃⲆᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆᐃⲆⵠⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔⵠⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔⲆᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ΔⵠΔ: Ⲇᐃ.ΔΔⵠᐃⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃⵠⲆⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆᐃᐃⲆᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔᐃⵠⲆᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆᐃⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆᐃᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠΔᐃΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃΔⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⲆⵠΔᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ΔⵠΔ: Ⲇᐃ.ᐃⵠⵠⵠᐃⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆⲆᐃⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔⲆⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆᐃΔΔΔᐃⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ΔⵠΔ: Ⲇᐃ.ⲆΔⲆΔⵠⵠⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⵠᐃΔⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔΔⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆᐃⵠⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃⵠⲆⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⲆⵠΔΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⲆⲆⲆᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃᐃⵠΔⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ΔⵠΔ: Ⲇᐃ.ⵠΔⲆᐃΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆᐃⲆⲆᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⵠⵠⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ΔⵠΔ: Ⲇᐃ.ⲆΔΔᐃⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠᐃⲆΔΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ΔⵠΔ: Ⲇᐃ.ᐃⲆⵠΔⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠΔⵠⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃᐃΔᐃⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃΔᐃⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃᐃᐃⵠΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔⲆᐃΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠᐃⵠⲆⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ΔⵠΔ: Ⲇᐃ.ⲆΔᐃⲆⵠΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠᐃⵠΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆⵠΔᐃᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⵠⲆΔⵠᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ΔⵠΔ: Ⲇᐃ.ⵠⵠΔⵠⲆΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔΔᐃⲆⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆᐃᐃⵠΔⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔΔⲆⵠⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔᐃᐃΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔᐃⵠⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ΔⵠΔ: Ⲇᐃ.ⵠᐃᐃⲆΔⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⲆⵠⵠΔⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔᐃΔⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠΔΔΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ΔⵠΔ: Ⲇᐃ.ΔΔΔⲆᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⲆⲆⲆⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ΔⵠΔ: Ⲇᐃ.ᐃᐃⵠΔᐃⲆⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆⵠⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ΔⵠΔ: Ⲇᐃ.ΔⲆⲆⲆΔᐃⲆ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⵠⲆᐃⲆΔᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ⲆⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃⲆⲆᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃΔⲆⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ΔⵠΔ: Ⲇᐃ.ⲆⵠⲆΔᐃⵠᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔᐃᐃΔΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆΔⵠΔⲆΔ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⲆⲆⵠⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ΔⵠΔ: Ⲇᐃ.ⲆⲆΔⵠⲆΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ΔⲆΔⵠⲆⵠⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ΔⵠΔ: Ⲇᐃ.ΔⲆΔⵠᐃⲆᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ΔΔⲆΔⲆⲆΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ΔⵠΔ: Ⲇᐃ.ΔⵠᐃⲆⲆⲆⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔᐃⲆᐃᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ΔⵠΔ: Ⲇᐃ.ᐃΔⲆᐃᐃⵠΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠᐃᐃΔᐃⵠⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ΔⵠΔ: Ⲇᐃ.ⲆᐃΔⵠⵠΔᐃ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆⵠⵠᐃΔᐃᐃ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ΔⵠΔ: Ⲇᐃ.ⵠΔᐃⵠⵠᐃⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ⵠⵠⲆⵠᐃΔⵠ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ΔⵠΔ: Ⲇᐃ.ΔⵠΔΔⲆⵠⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ᐃⵠⵠΔⲆᐃΔ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ΔⵠΔ: Ⲇᐃ.ⵠⲆᐃΔΔΔΔ,
        ᐃᐃᐃ: Ⲇᐃ.ⲆΔΔᐃⲆΔⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ΔⵠΔ: Ⲇᐃ.ΔᐃΔΔⵠΔⵠ,
        ᐃᐃᐃ: Ⲇᐃ.ΔᐃΔΔⵠᐃⲆ,
        ᐃⲆΔ: ΔⲆᐃ.ᐃⵠⲆⵠΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    wf.ⵠⲆⵠΔⲆᐃⲆ = ⵠⵠⵠΔⵠᐃᐃ(ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ, 21);
    wf.ⲆⵠⲆⵠⵠᐃᐃ = ⵠⵠⵠΔⵠᐃᐃ(ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ, 20);
    ⵠΔ[255] = [];
    ⵠΔ[7] = [];
    ⵠΔ[250] = [];
    ⵠΔ[28] = [];
    ⵠΔ[29] = [];
    ⵠΔ[796] = [];
    for (var a = 0; a < ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ.length; a++) {
      ⵠΔ[255][a] = [ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[a].ΔⵠΔ, ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[a].ᐃᐃᐃ];
      ⵠΔ[7][a] = [ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[a].ᐃΔΔⵠ, ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[a].ᐃⲆΔᐃ];
    }
    for (a = 0; ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ.length > a; a++) {
      ⵠΔ[28][a] = [ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ[a].ΔⵠΔ, ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ[a].ᐃᐃᐃ];
    }
    for (a = 0; ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ.length > a; a++) {
      ⵠΔ[250][a] = [ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ[a].ΔⵠΔ, ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ[a].ᐃᐃᐃ];
    }
    for (a = 0; a < ⵠᐃᐃⵠ.ⵠⵠⲆᐃ.length; a++) {
      ⵠΔ[29][a] = [ⵠᐃᐃⵠ.ⵠⵠⲆᐃ[a].ΔⵠΔ, ⵠᐃᐃⵠ.ⵠⵠⲆᐃ[a].ᐃᐃᐃ];
    }
    for (a = 0; a < ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ.length; a++) {
      ⵠΔ[796][a] = [ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ[a].ΔⵠΔ, ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ[a].ᐃᐃᐃ];
    }
  };
  const Wb = 7;
  function Ob(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  const qb = 6;
  const Nb = 0;
  function Hb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    _b(e, a * 26, a * 26, a * 9);
    Rb(e, c[0]);
    _b(e, a * 56, a * 36, a * 9);
    Rb(e, c[1]);
    _b(e, a * 40, a * 50, a * 9);
    Rb(e, c[2]);
    e.globalAlpha = 1;
    _b(e, a * 26, a * 26, a * 5);
    Rb(e, c[0]);
    _b(e, a * 56, a * 36, a * 5);
    Rb(e, c[1]);
    _b(e, a * 40, a * 50, a * 5);
    Rb(e, c[2]);
    return d;
  }
  const Ub = 3;
  function Yb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    _b(e, a * 11, a * 11, a * 10);
    Rb(e, c[0]);
    e.globalAlpha = 0.7;
    _b(e, a * 11, a * 11, a * 7);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    _b(e, a * 11, a * 11, a * 4);
    Rb(e, c[0]);
    return d;
  }
  const Kb = 255;
  function Vb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    Lb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    Lb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    Lb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    Lb(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    Lb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    Rb(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    Rb(e, c[1]);
    return d;
  }
  function Xb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    Lb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    Lb(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    Lb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    Lb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    Rb(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    Lb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    Rb(e, c[1]);
    return d;
  }
  const Zb = 12;
  function $b(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Lb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    Lb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  function ed(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    Lb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    Rb(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    Rb(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    Lb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    Rb(d, b[0], b[0], a * 4);
    return c;
  }
  function id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    Lb(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    Lb(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    Lb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    Rb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    Rb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    Rb(e, c[3], c[1], a * 6);
    return d;
  }
  function td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Lb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    Lb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    Rb(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    _b(e, a * 68, a * 111.29513549804688, a * 15);
    Rb(e, c[7], c[8], a * 4);
    _b(e, a * 123, a * 111.29510498046875, a * 15);
    Rb(e, c[7], c[8], a * 4);
    _b(e, a * 63, a * 106, a * 5);
    Rb(e, c[9]);
    _b(e, a * 118, a * 106, a * 5);
    Rb(e, c[9]);
    return d;
  }
  const nd = 1;
  const od = 10;
  function ad(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var a = b * 40;
    e.width = g;
    e.height = a;
    var i = g * b / 2;
    var j = b * a / 2;
    var k = b * 15;
    f.save();
    f.translate(i, j);
    f.globalAlpha = 1;
    _b(f, 0, 0, k);
    Rb(f, d[0]);
    k = b * 5;
    i = b * 2;
    j = b * 1;
    f.translate(i, j);
    f.globalAlpha = 1;
    _b(f, 0, 0, k);
    Rb(f, d[1]);
    f.restore();
    return e;
  }
  const rd = 8;
  const sd = 4;
  const hd = 16;
  function ld(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    Rb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    Rb(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      Rb(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      Rb(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      Rb(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    Rb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    Rb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    Rb(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    Rb(g, nh, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    Rb(g, Ur, d[2], b * 4);
    _b(g, b * 63, b * 180, b * 15.231546211727817);
    Rb(g, d[4]);
    _b(g, b * 121, b * 181, b * 15.652475842498529);
    Rb(g, d[4]);
    _b(g, b * 58, b * 175, b * 5.656854249492381);
    Rb(g, d[2]);
    _b(g, b * 116, b * 175, b * 5.656854249492381);
    Rb(g, d[2]);
    return f;
  }
  const gd = 19;
  function ud(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 100;
    var k = c * 100;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var n = c * 5;
    var h = c * 28;
    var l = n / 2;
    var g = h / 2;
    i.translate(a, m);
    for (var b = 0; b < 4; b++) {
      Lb(i, -l, -g, n, h, c * 2);
      i.rotate(Math.PI / 4);
      Rb(i, e);
    }
    i.arc(0, 0, c * 10, 0, Math.PI * 2);
    Rb(i, e);
    i.globalCompositeOperation = "destination-out";
    _b(i, 0, 0, c * 4);
    i.fill();
    return f;
  }
  function bd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 85;
    var k = c * 115;
    var a = c * 6;
    f.width = j;
    f.height = k;
    i.translate(c * -130, c * -60 + a);
    i.globalAlpha = 0.5;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    Rb(i, e[0]);
    i.translate(0, -a);
    i.globalAlpha = 1;
    i.beginPath();
    i.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    i.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    i.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    i.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    i.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    i.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    i.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    i.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    i.closePath();
    Rb(i, e[1], e[2], 4);
    var m = c * 155;
    var n = c * 133;
    var h = c * 10;
    var l = c * 3;
    var g = m + c * -3;
    var b = n + c * -5;
    i.save();
    i.translate(m, n);
    i.globalAlpha = 1;
    _b(i, 0, 0, h);
    Rb(i, e[3]);
    i.restore();
    i.save();
    i.translate(g, b);
    i.globalAlpha = 1;
    _b(i, 0, 0, l);
    Rb(i, e[4]);
    i.restore();
    i.save();
    i.translate(m + c * 27, n);
    i.globalAlpha = 1;
    _b(i, 0, 0, h);
    Rb(i, e[3]);
    i.restore();
    i.save();
    i.translate(c * 27 + g, b);
    i.globalAlpha = 1;
    _b(i, 0, 0, l);
    Rb(i, e[4]);
    return f;
  }
  function dd(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = fu(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = Yt(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = Yt(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = Yt(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = Yt(0.9, hh, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function vd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / 2;
    var a = (t = f * 95) / 2;
    var o = f * 10;
    var q = f * 8;
    var h = f * 112;
    var l = f * 82;
    var g = h / 2;
    var b = l / 2;
    var d = f * 4;
    j.width = r;
    j.height = t;
    k.translate(n - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    Lb(k, -g, -b, h, l, o);
    Rb(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -q);
    Lb(k, -g, -b, h, l, o);
    Rb(k, i[1], i[2], d);
    var r = f * 55;
    var t = f * 45;
    o = 5;
    k.translate(f * -40, f * -30);
    Lb(k, 0, 0, r, t, o);
    Rb(k, i[3]);
    var u = ud(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * -25);
    u = ud(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * 15);
    u = ud(f * 1.2, i[3]);
    k.drawImage(u, f * 28, f * -30);
    r = f * 15;
    t = f * 70;
    o = f * 5;
    k.translate(f * 78, f * -5);
    Lb(k, 0, 0, r, t, o);
    Rb(k, i[4]);
    r = f * 9;
    t = f * 50;
    o = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    Lb(k, 0, 0, r, t, o);
    Rb(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    Rb(k, null, i[5], f * 8);
    return j;
  }
  function cd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 5;
    var l = c * 28;
    var g = h / 2;
    var b = l / 2;
    j.translate(c * 0, c * 0);
    j.translate(m, n);
    if (f == 1) {
      _b(j, 0, 0, c * 10);
      Rb(j, e[2], e[2], c * 3);
      for (var d = 0; d < 4; d++) {
        Lb(j, -g, -b, h, l, c * 2);
        j.rotate(Math.PI / 4);
        Rb(j, e[2], e[2], c * 4);
      }
    }
    _b(j, 0, 0, c * 10);
    Rb(j, e[0], e[1], c * 1.5);
    for (d = 0; d < 4; d++) {
      Lb(j, -g, -b, h, l, c * 2);
      j.rotate(Math.PI / 4);
      Rb(j, e[0], e[1], c * 1.5);
    }
    _b(j, 0, 0, c * 10);
    Rb(j, e[0]);
    _b(j, 0, 0, c * 4);
    Rb(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    _b(j, 0, 0, c * 4);
    Rb(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    _b(j, 0, 0, c * 4);
    Rb(j, Ds, e[1], c * 2);
    return i;
  }
  function md(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  const pd = 7;
  const Cd = 8;
  const Td = 10;
  function fd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    _b(d, a * 213.5, a * 256.75, a * 75);
    Rb(d, b[5]);
    _b(d, a * 213.5, a * 175.75, a * 25);
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    _b(d, a * 213.5, a * 256.75, a * 75);
    Rb(d, b[3]);
    _b(d, a * 213.5, a * 175.75, a * 25);
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    _b(d, a * 213.5, a * 256.75, a * 70);
    Rb(d, b[0]);
    _b(d, a * 213.5, a * 175.75, a * 20);
    Rb(d, b[0]);
    _b(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    _b(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    _b(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    _b(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    Lb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    Lb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    Lb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    Rb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    Lb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    Rb(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    Lb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    Lb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    Rb(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    Lb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    Lb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    Lb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    Lb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    Lb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    Rb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    Lb(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    Rb(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    Lb(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    Rb(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    Rb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    Rb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    Rb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    Rb(e, undefined, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      Rb(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      Rb(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      Rb(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      Rb(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      Rb(e, undefined, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      Rb(e, Lg, b[0], a * 20);
      _b(e, a * 142, a * 221, a * 16.1245154965971);
      Rb(e, b[0]);
    }
    return d;
  }
  function yd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    Rb(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    Rb(f, d[2], d[3], 3);
    return e;
  }
  function wd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Rb(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Rb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    Rb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    Rb(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Rb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    Rb(d, bj, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    Rb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    Rb(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    Rb(d, b[3]);
    _b(d, a * 77, a * 107, a * 6);
    Rb(d, b[2]);
    _b(d, a * 110, a * 107, a * 6);
    Rb(d, b[2]);
    _b(d, a * 75, a * 105, a * 3);
    Rb(d, b[4]);
    _b(d, a * 108, a * 105, a * 3);
    Rb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    Rb(d, b[1]);
    return c;
  }
  const Pd = 12;
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    Rb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    Rb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    Rb(e, undefined, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    Rb(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    Rb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    Rb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    Rb(e, undefined, c[1], a * 14);
    _b(e, a * 161, a * 201, a * 13);
    Rb(e, c[5]);
    _b(e, a * 216, a * 205, a * 8.06225774829855);
    Rb(e, c[5]);
    _b(e, a * 216, a * 175, a * 6.708203932499369);
    Rb(e, c[5]);
    _b(e, a * 271, a * 191, a * 5.0990195135927845);
    Rb(e, c[5]);
    _b(e, a * 206, a * 180, a * 11.180339887498949);
    Rb(e, c[5]);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Sb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Sb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Sb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Sb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    _b(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    _b(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    Rb(e, c[5], c[6], a * 4);
    return d;
  }
  function xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    Rb(e, Cn, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    Rb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    Rb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    Rb(e, undefined, c[1], a * 2);
    return d;
  }
  function Jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 50, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 54, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Sb(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    Sb(e, 6, a * 30, a * 15);
    e.restore();
    Rb(e, c[3]);
    return d;
  }
  const Md = 2;
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    Rb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    Rb(e, Wa, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    Rb(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    Rb(e, go, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    Rb(e, Ds, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    Rb(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    Rb(e, mr, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    Rb(e, undefined, c[6], a * 4);
    return d;
  }
  const Ed = 11;
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, undefined, c[2], a * 4);
    _b(e, a * 18, a * 38, a * 14.866068747318506);
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Rb(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    return d;
  }
  function Id(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var a = b * 145;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    var h = b * 70;
    f.translate(i, j);
    f.globalAlpha = 0.4;
    _b(f, 0, 0, h);
    Rb(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    _b(f, 0, 0, h);
    Rb(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    _b(f, 0, 0, h);
    Rb(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    _b(f, 0, 0, h);
    Rb(f, d[2]);
    return e;
  }
  function Sd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = f * 193;
    var a = f * 198;
    var n = f * 140;
    var o = f * 90;
    j.width = m;
    j.height = a;
    var h = f * 10;
    var l = f * 25;
    var g = f * 180;
    var b = l / 2;
    var d = g / 2;
    var p = f * 4;
    k.translate(f * -25, f * 1);
    k.translate(n, o);
    k.rotate(-Math.PI / 5);
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    k.translate(f * -30, f * -25);
    k.rotate(Math.PI / 3);
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    k.translate(f * 35, f * 30);
    k.rotate(Math.PI / 3);
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    return j;
  }
  function Qd(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var a = n.getContext("2d");
    var o = f * 70;
    var q = f * 70;
    var h = f * 10;
    var l = f * 5;
    n.width = o;
    n.height = q + l;
    for (var g = 0; g < e.length; g++) {
      var r = e[g];
      a.globalAlpha = r.a;
      var s = r.f(i, false, r.c);
      a.save();
      a.translate(o / 2 + f * r.x, q / 2 + r.y * f);
      a.rotate(r.r);
      a.drawImage(s, -s.width / 2, -s.height / 2);
      a.restore();
    }
    var t = [];
    for (g = 0; g < j.length; g++) {
      var c = document.createElement("canvas");
      var u = c.getContext("2d");
      c.width = o;
      c.height = q + l;
      u.globalAlpha = k / 2;
      if (g == 2) {
        Lb(u, 0, l, o, q, h);
      } else {
        Lb(u, 0, 0, o, q + l, h);
      }
      Rb(u, "#081a19");
      u.globalAlpha = k;
      if (g == 2) {
        Lb(u, 0, l, o, q, h);
      } else {
        Lb(u, 0, 0, o, q, h);
      }
      Rb(u, j[g]);
      u.globalAlpha = 1;
      if (g == 2) {
        u.drawImage(n, 0, l);
      } else {
        u.drawImage(n, 0, 0);
      }
      t.push(Oa(c));
    }
    return t;
  }
  function _d(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var a = b * 205;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    var h = b * 100;
    f.translate(i, j);
    f.globalAlpha = 1;
    _b(f, 0, 0, h);
    Rb(f, d[0]);
    return e;
  }
  function Fd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = f * 195;
    var a = f * 190;
    var n = m / 2;
    var o = a / 2;
    j.width = m;
    j.height = a;
    var h = f * 10;
    var l = f * 35;
    var g = f * 150;
    var b = l / 2;
    var d = g / 2;
    var p = f * 4;
    k.translate(n - f * 5, o - f * 5);
    k.rotate(-Math.PI / 1.25);
    k.globalAlpha = 1;
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    k.translate(0, 0);
    k.rotate(Math.PI / 3);
    k.globalAlpha = 1;
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    k.translate(0, 5);
    Lb(k, -b / 2, -d / 2, l / 2, g / 3, h - 2);
    Rb(k, i[1]);
    return j;
  }
  function Rd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    Rb(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    Rb(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    Rb(f, false, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    Rb(f, d[2]);
    return e;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    Rb(e, Ur, c[2], a * 4);
    _b(e, a * 18, a * 38, a * 14.866068747318506);
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    Rb(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    Rb(e, c[6], c[7], a * 6);
    return d;
  }
  function Gd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    _b(e, 0, 0, a);
    Rb(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    _b(e, 0, 0, a);
    Rb(e, c[1], c[2], h);
    return d;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Sb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Sb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    Rb(e, c[8], c[9], a * 4);
    return d;
  }
  function Wd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = f * 135;
    var a = f * 190;
    var n = m / 2;
    var o = a / 2;
    j.width = m;
    j.height = a;
    var h = f * 10;
    var l = f * 25;
    var g = f * 180;
    var b = l / 2;
    var d = g / 2;
    var p = f * 4;
    k.translate(n, o);
    k.rotate(-Math.PI / 5);
    k.globalAlpha = 1;
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    k.translate(0, 0);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 1;
    Lb(k, -b, -d, l, g, h);
    Rb(k, i[0], i[1], p);
    return j;
  }
  function Od(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var a = b * 370;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    _b(f, i, j, h);
    Rb(f, d[0]);
    return e;
  }
  const qd = 2;
  function Nd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (b = c * 450) / 2;
    var a = (o = c * 145) / 2;
    var m = c * 10;
    var n = c * 300;
    var h = c * 30;
    var l = n / 2;
    var g = h / 2;
    if (f) {
      var b = c * 145;
      var o = c * 450;
      i.width = b;
      i.height = o;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      Lb(j, c * 100, c * -110, n, h, m);
      Rb(j, e[0]);
      j.translate(c * 178, c * -98);
      Lb(j, -l, -g - c * 6, c * 100, c * 100, m);
      Rb(j, e[0]);
      j.translate(c * -50, c * 5);
      Lb(j, c * 220, c * -15, c * 90, c * 90, m);
      Rb(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      Lb(j, -l - c * 20, -g, n, h, m);
      Rb(j, e[1], e[2], 4);
      j.translate(c * -70, c * -40);
      Lb(j, -l - c * 20, -g, c * 100, c * 100, m);
      Rb(j, e[3], e[4], 4);
      j.translate(c * -70, c * 15);
      Lb(j, c * 220, c * -22, c * 90, c * 90, m);
      Rb(j, e[3], e[4], 4);
      Lb(j, c * 230, c * -12, c * 55, c * 55, m);
      Rb(j, e[5]);
      j.translate(c * -70, 0);
      Lb(j, c * -15, c * -2, c * 60, c * 60, m);
      Rb(j, e[5]);
      j.restore();
    } else {
      i.width = b;
      i.height = o;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      Lb(j, -l, -g, n, h, m);
      Rb(j, e[0]);
      j.translate(c * -65, c * -25);
      Lb(j, -l, -g - c * 6, c * 100, c * 100, c * 15);
      Rb(j, e[0]);
      j.translate(c * -35, c * -5);
      Lb(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      Rb(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      Lb(j, -l, -g, n, h, m);
      Rb(j, e[1], e[2], 4);
      j.translate(c * -60, c * -40);
      Lb(j, -l - c * 20, -g, c * 100, c * 100, c * 15);
      Rb(j, e[3], e[4], 4);
      j.translate(c * -55, c * 10);
      Lb(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      Rb(j, e[3], e[4], 4);
      Lb(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      Rb(j, e[5]);
      j.translate(c * 45, c * 0);
      Lb(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      Rb(j, e[5]);
      j.restore();
    }
    return i;
  }
  function Hd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    _b(e, 0, 0, a);
    Rb(e, c[0], c[1], h);
    return d;
  }
  function Ud(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    _b(e, 0, 0, a);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  function Yd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      Rb(g, Lg, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    Rb(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Rb(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Rb(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Rb(g, Ej, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        Rb(g, nh, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        Rb(g, Ig, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        Rb(g, undefined, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      Rb(g, Lg, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      Rb(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      Rb(g, undefined, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        Rb(g, eb, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        Rb(g, undefined, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        Rb(g, Ej, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        Rb(g, undefined, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      Rb(g, undefined, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      Rb(g, undefined, c[2], b * 7);
    }
    return f;
  }
  function Kd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function Vd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var l = c * 10;
    var g = c * 110;
    var b = l / 2;
    var d = g / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    Lb(j, -b, -d, l, g, n);
    Rb(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    Rb(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    Lb(j, -b, -d, l, g, n);
    Rb(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    Rb(j, f[5], f[6], m);
    return i;
  }
  function Xd(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var l = c * 200;
    var g = c * 180;
    var b = l / 2;
    var d = g / 2;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      Rb(k, Sh, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      Rb(k, Bk, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      Rb(k, Cn, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      Rb(k, undefined, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      Rb(k, bj, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      Rb(k, Oh, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      Rb(k, Ja, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      Rb(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      Rb(k, Fl, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      Lb(k, -b, -d, l, g + h, n);
      Rb(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      Lb(k, -b, -d, l, g, n);
      Rb(k, e[1], e[2], 4);
      k.globalAlpha = 1;
      Lb(k, c * 35 - b, c * 20 - d, l - c * 50, g - c * 50, n - c * 10);
      Rb(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      Rb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      Rb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      Rb(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      Rb(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      Rb(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      Rb(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      Rb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      Rb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      Rb(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      Rb(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      Rb(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      Rb(k, e[4]);
    }
    return j;
  }
  const Zd = 0;
  function $d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    Rb(e, c[0]);
    _b(e, a * 160.5, a * 243.03125, a * 7);
    Rb(e, c[0]);
    _b(e, a * 227.5, a * 242.03125, a * 7);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    Rb(e, c[0], c[0], a * 5);
    _b(e, a * 194, a * 298, a * 9);
    Rb(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    _b(e, a * 160.5, a * 243.03125, a * 7);
    Rb(e, c[1], c[2], a * 5);
    _b(e, a * 227.5, a * 242.03125, a * 7);
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    _b(e, a * 194, a * 298, a * 9);
    Rb(e, c[1], c[2], a * 7);
    return d;
  }
  function At(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Lb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    Rb(e, c[0]);
    _b(e, a * 204, a * 693, a * 36.013886210738214);
    Rb(e, c[0]);
    _b(e, a * 105, a * 518, a * 30);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    Lb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    Rb(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    Rb(e, c[6], c[4], a * 16);
    _b(e, a * 204, a * 693, a * 36.013886210738214);
    Rb(e, c[6], c[4], a * 16);
    _b(e, a * 105, a * 518, a * 30);
    Rb(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    Rb(e, c[6]);
    _b(e, a * 204, a * 693, a * 17.029386365926403);
    Rb(e, c[7]);
    _b(e, a * 106, a * 518, a * 12);
    Rb(e, c[7]);
    return d;
  }
  function Bt(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Rb(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Rb(g, Ds, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Rb(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Rb(g, Wa, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    Rb(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    Rb(g, Ja, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    Rb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    Rb(g, nl, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    Rb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    Rb(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    Rb(g, undefined, d[1], b * 20);
    _b(g, b * 101, b * 155, b * 20.591260281974);
    Rb(g, d[3]);
    _b(g, b * 180, b * 155, b * 20.591260281974);
    Rb(g, d[3]);
    _b(g, b * 95, b * 148, b * 7.211102550927978);
    Rb(g, d[4]);
    _b(g, b * 173, b * 148, b * 7.211102550927978);
    Rb(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      Rb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      Rb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      Rb(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      Rb(g, d[2]);
    }
    return f;
  }
  function Ct(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Lb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    Rb(e, c[0]);
    _b(e, a * 122, a * 480, a * 18.439088914585774);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    Lb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    _b(e, a * 122, a * 480, a * 18.439088914585774);
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Dt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Lb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    Rb(e, Bk, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    Rb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    Rb(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    Lb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    Rb(e, c[6]);
    return d;
  }
  const Et = 0;
  function Ft(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    Rb(d, Pn, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    Rb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function Gt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Rb(e, undefined, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Rb(e, Ig, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    Rb(e, nh, c[4], a * 4);
    return d;
  }
  function Ht(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    return d;
  }
  function It(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    return d;
  }
  const Jt = 3;
  function Kt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Lb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    Rb(e, c[0]);
    _b(e, a * 121, a * 480, a * 20.396078054371138);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    Lb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    _b(e, a * 121, a * 480, a * 20.396078054371138);
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    return d;
  }
  const Lt = 7;
  const Mt = 8;
  function Nt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Lb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    Lb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Ot(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Lb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Sb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    Lb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    Rb(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Sb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    Rb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Pt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    Rb(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    Rb(e, c[0], c[1], a * 8);
    _b(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    Rb(e, c[2]);
    _b(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    Rb(e, c[2]);
    _b(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    Rb(e, c[2]);
    _b(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    Rb(e, c[2]);
    _b(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    Rb(e, c[2]);
    _b(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  function Qt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    Rb(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    _b(e, a * 107, a * 152, a * 9);
    Rb(e, c[6]);
    _b(e, a * 105, a * 173, a * 9);
    Rb(e, c[6]);
    _b(e, a * 87, a * 161, a * 9);
    Rb(e, c[6]);
    _b(e, a * 106, a * 147, a * 4);
    Rb(e, c[7]);
    _b(e, a * 104, a * 167, a * 4);
    Rb(e, c[7]);
    _b(e, a * 86, a * 154, a * 4);
    Rb(e, c[7]);
    return d;
  }
  const Rt = 4;
  function St(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var a = b * 230;
    var i = b * 100;
    var j = i / 4;
    var h = b * 20;
    e.width = g;
    e.height = a;
    f.translate(g / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    Sb(f, 7, i, j);
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    Sb(f, 7, i, j);
    Rb(f, d[1]);
    Sb(f, 6, i * 0.65, j * 0.65);
    Rb(f, d[2]);
    return e;
  }
  function Tt(f, e, i, j, k, n, o, p, q, h, l) {
    if (Wa === l) {
      l = 0;
    }
    var r = document.createElement("canvas");
    var b = r.getContext("2d");
    n = n ? f * n : 0;
    var d = Math.floor(i * f);
    b.font = d + "px Baloo Paaji";
    b.lineJoin = "round";
    p *= f;
    var t = o ? p * 2 : 0;
    if (q) {
      var c = Math.min(b.measureText(e).width + f * 2 + t, q);
    } else {
      c = b.measureText(e).width + f * 2 + t + f * l * 2;
    }
    d = f * (d + n + l) + t;
    r.width = c;
    r.height = d;
    if (o) {
      b.fillStyle = o;
      Lb(b, 0, 0, c, d, p * 2);
      b.fill();
      b.translate(p, p);
    }
    b.textBaseline = "middle";
    b.font = i + "px Baloo Paaji";
    b.lineJoin = "round";
    if (k) {
      b.beginPath();
      b.fillStyle = k;
      b.fillText(e, 0, d / 2 + n - t / 2, c);
    }
    b.beginPath();
    if (h) {
      b.strokeStyle = h;
      b.lineWidth = l;
      b.strokeText(e, l, (d - t) / 2, c);
    }
    b.fillStyle = j;
    b.fillText(e, l, (d - t) / 2, c);
    return r;
  }
  function Ut(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    _b(e, a * 42, a * 43, a * 24.758836806279895);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    _b(e, a * 42, a * 43, a * 24.758836806279895);
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    Rb(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    Rb(e, c[7], c[8], a * 5);
    return d;
  }
  function Vt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    Rb(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    Rb(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    Rb(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    Rb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    Rb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    Rb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    Rb(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    Rb(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    Rb(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    Rb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    Rb(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    Rb(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    Rb(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    Rb(e, Wa, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    Rb(e, undefined, c[3], a * 4);
    return d;
  }
  const Xt = 10;
  function Yt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 18;
    var a = b * 18;
    e.width = g;
    e.height = a;
    var i = b * 9;
    var j = b * 9;
    var k = b * 8;
    f.save();
    f.translate(i, j);
    f.globalAlpha = 1;
    _b(f, 0, 0, k);
    Rb(f, d[0]);
    k = b * 3;
    i = 0;
    j = b * -3;
    f.translate(i, j);
    f.globalAlpha = 1;
    _b(f, 0, 0, k);
    Rb(f, d[1]);
    f.restore();
    return e;
  }
  const Zt = 6672030;
  const $t = 6672030 .ᐃΔΔᐃⵠᐃΔ;
  const _t = `const ⵠⲆᐃᐃⲆΔΔⵠⲆ = (typeof ⲆᐃᐃΔ === "${$t}") ? 1 : 0; return ⵠⲆᐃᐃⲆΔΔⵠⲆ;`;
  function au(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var a = b * 150;
    var i = b * 60;
    var j = i / 4;
    var h = b * 15;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    Sb(f, 8, i, j);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    Sb(f, 8, i, j);
    Rb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    Sb(f, 5, i * 0.5, j * 0.4);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    Sb(f, 5, i * 0.5, j * 0.4);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    Sb(f, 5, i * 0.5, j * 0.4);
    Rb(f, d[2]);
    f.restore();
    return e;
  }
  function cu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Rb(d, Ig, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    Rb(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    Rb(d, Pn, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    Rb(d, mr, b[2], a * 8);
    return c;
  }
  function cu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    Rb(d, b[0], b[0], a * 4);
    return c;
  }
  function du(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var a = b * 220;
    var i = b * 220;
    var j = b * 100;
    var h = j / 4;
    f.width = a;
    f.height = i;
    g.translate(a / 2, i / 2);
    g.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      g.translate(b * 0, b * -8);
    }
    Sb(g, 7, j, h);
    Rb(g, c ? d[0] : d[1]);
    g.globalAlpha = 1;
    if (e == 0) {
      Sb(g, 6, j * 0.65, h * 0.65);
      Rb(g, d[2]);
    } else if (e == 1) {
      g.translate(b * 20, b * 20);
      Sb(g, 6, j * 0.45, h * 0.4);
      Rb(g, d[2]);
    }
    return f;
  }
  function eu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 180;
    var a = b * 210;
    var i = (h = b * 60) / 4;
    var j = b * 20;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[1]);
    f.restore();
    var h;
    i = (h = b * 30) / 4;
    f.save();
    f.translate(g / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    Sb(f, 5, h, i);
    Rb(f, d[2]);
    f.restore();
    _b(f, g / 2 - b * 7, a / 2 + b * 7, 5);
    Rb(f, d[2]);
    return e;
  }
  function fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    Rb(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    Rb(f, d[1], d[2], j);
    return e;
  }
  const gu = 8;
  function hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = c * b * 2;
    var a = b * c * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    _b(f, 0, 0, b * c);
    Rb(f, d);
    return e;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    Rb(e, nh, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    Rb(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    Rb(e, c[5], c[6], a * 12);
    _b(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    Rb(e, c[7]);
    _b(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    Rb(e, c[8]);
    return d;
  }
  function ju(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    Rb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    Rb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    Rb(e, Lg, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    Rb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    Rb(e, nl, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    Rb(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    Rb(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    Rb(e, Ej, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    Rb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    Rb(e, Ds, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    Rb(e, Pn, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    Rb(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    Rb(e, undefined, c[1], a * 2);
    return d;
  }
  function ku(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      Rb(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      Rb(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      Rb(a, d[0]);
    }
    return g;
  }
  function lu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Lb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    Rb(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Lb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Lb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Lb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Lb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Rb(e, c[0], c[0], a * 6);
    _b(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Rb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    Lb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    Rb(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    Lb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    Rb(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    Lb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    Lb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    Rb(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Lb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Rb(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    Lb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    Rb(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    _b(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    Rb(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    Rb(e, c[1], c[2], a * 7);
    return d;
  }
  function nu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    _b(f, 0, 0, b * 60);
    Rb(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    _b(f, 0, 0, b * 60);
    Rb(f, d[1], d[2], b * 4);
    _b(f, 0, 0, b * 40);
    Rb(f, d[3]);
    _b(f, 0, 0, b * 25);
    Rb(f, d[4], d[5], b * 8);
    return e;
  }
  function ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    Rb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    Rb(e, c[4]);
    _b(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    Rb(e, c[5]);
    _b(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    Rb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    Rb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    Rb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    Rb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    Rb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    Rb(e, Fl, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    Rb(e, Oh, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    Rb(e, mr, c[9], a * 3);
    return d;
  }
  const pu = 12;
  function qu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    Rb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    Rb(d, Wa, b[2], a * 4);
    return c;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    Sb(e, 9, a * 60, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    Sb(e, 9, a * 60, a * 10);
    Rb(e, c[1], c[2], 4);
    e.rotate(-0.32);
    Sb(e, 9, a * 38, a * 10);
    Rb(e, c[3], c[4], 4);
    e.rotate(0.68);
    Sb(e, 9, a * 20, a * 8);
    Rb(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    Rb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    Rb(e, c[2], c[3], a * 1);
    return d;
  }
  const tu = 2;
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    Sb(e, 8, a * 60, a * 10);
    Rb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    Sb(e, 8, a * 60, a * 10);
    Rb(e, c[1], c[2], 4);
    e.rotate(0.56);
    Sb(e, 8, a * 40, a * 10);
    Rb(e, c[3], c[4], 4);
    e.rotate(0.28);
    Sb(e, 8, a * 28, a * 8);
    Rb(e, c[5]);
    e.restore();
    return d;
  }
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    Sb(e, 7, a * 60, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    Sb(e, 7, a * 60, a * 10);
    Rb(e, c[1], c[2], 4);
    e.rotate(0.64);
    Sb(e, 7, a * 40, a * 10);
    Rb(e, c[3], c[4], 4);
    e.rotate(0.12);
    Sb(e, 7, a * 23, a * 5);
    e.restore();
    Rb(e, c[5]);
    return d;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (qt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      _b(e, a * 44, a * 55, a * 41);
      Rb(e, c[0]);
    }
    e.globalAlpha = 1;
    _b(e, a * 44, a * 45, a * 41);
    Rb(e, c[1], c[2], a * 4);
    _b(e, a * 44, a * 45, a * 31);
    Rb(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    Lb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    Lb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    _b(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    _b(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    _b(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    _b(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  const yu = 11;
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    Rb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    Rb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    Rb(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    Rb(e, c[2], c[3], a * 7);
    return d;
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Sb(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Sb(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Sb(e, 6, a * 105, a * 30);
    e.restore();
    Rb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Sb(e, 6, a * 66, a * 30);
    e.restore();
    Rb(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Sb(e, 6, a * 31, a * 30);
    e.restore();
    Rb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    Rb(e, Fl, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    Rb(e, mr, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    return d;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    Rb(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    Rb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Lb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Lb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    return d;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    Lb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    Lb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    Rb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    Rb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    Rb(e, c[3], c[4], a * 15);
    return d;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Lb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    Lb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    Rb(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    Rb(e, Fl, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    Rb(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    Rb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    return d;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    Rb(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    Rb(e, undefined, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    Rb(e, undefined, c[5], a * 8);
    return d;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    Lb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    Lb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    Rb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    Lb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    Lb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function rc(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 8035; a++) {
        c.push(a);
      }
      return b();
    };
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Lb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    Lb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    Rb(e, undefined, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    Rb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    Rb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    Rb(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    Rb(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    Rb(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    Rb(e, c[10]);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Sb(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Sb(e, 6, a * 146, a * 30);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Sb(e, 6, a * 105, a * 30);
    e.restore();
    Rb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Sb(e, 6, a * 66, a * 30);
    e.restore();
    Rb(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    Sb(e, 7, a * 17, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    Sb(e, 7, a * 25, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    Sb(e, 7, a * 11, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    Sb(e, 7, a * 12, a * 8);
    e.restore();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    Rb(e, Ej, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    Rb(e, undefined, c[2], a * 8);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (qt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      Sb(e, 8, a * 41, a * 10);
      Rb(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    Sb(e, 8, a * 41, a * 10);
    Rb(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    Sb(e, 8, a * 33, a * 10);
    Rb(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    Sb(e, 8, a * 24, a * 8);
    Rb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Lb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Lb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    _b(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    _b(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    _b(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    _b(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  ;
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (qt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      Sb(e, 7, a * 41, a * 10);
      e.restore();
      Rb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    Sb(e, 7, a * 41, a * 10);
    Rb(e, c[1], c[2], a * 4);
    Sb(e, 7, a * 35, a * 10);
    Rb(e, c[3], c[4], a * 4);
    Sb(e, 7, a * 23, a * 5);
    e.restore();
    Rb(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Lb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Lb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    _b(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    _b(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    _b(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    _b(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Lb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    Lb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    Rb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    Rb(e, c[8]);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    Lb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    Lb(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    Rb(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    Lb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    Lb(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    Rb(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    Rb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    Lb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    Lb(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    Rb(e, c[1], c[2], a * 5);
    return d;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (qt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      Sb(e, 9, a * 41, a * 10);
      e.restore();
      Rb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    Sb(e, 9, a * 41, a * 10);
    Rb(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    Sb(e, 9, a * 32, a * 10);
    Rb(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    Sb(e, 9, a * 23, a * 8);
    Rb(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Lb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    Lb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    Rb(e, c[4], c[4], a * 2);
    _b(e, a * 45, a * 29, a * 7);
    Rb(e, c[5]);
    _b(e, a * 45, a * 61, a * 7);
    Rb(e, c[5]);
    _b(e, a * 28, a * 45, a * 7);
    Rb(e, c[5]);
    _b(e, a * 62, a * 45, a * 7);
    Rb(e, c[5]);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    Rb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    Rb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    Rb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    Rb(e, c[3], c[2], a * 10);
    return d;
  }
  const pc = 4;
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    Lb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    Lb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    Rb(e, c[0]);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    Lb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    Lb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    Rb(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    Lb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    Rb(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    Lb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    Rb(e, Ur, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    Rb(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    Rb(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    Rb(e, undefined, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    Rb(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    Lb(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    Rb(e, Ig, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    Lb(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    Rb(e, c[8]);
    return d;
  }
  const fc = 3;
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    Rb(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    return d;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    Rb(e, c[0], c[1], 4);
    return d;
  }
  const wc = 0;
  function Pc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var a = b * 172;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    _b(f, 0, 0, b * 60);
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Sb(f, 3, b * 20, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    _b(f, 0, 0, b * 60);
    Rb(f, d[3], d[4], b * 4);
    _b(f, 0, 0, b * 40);
    Rb(f, d[5]);
    _b(f, 0, 0, b * 25);
    Rb(f, d[6], d[7], b * 8);
    return e;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    Rb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    Rb(e, Ig, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    return d;
  }
  const Ac = 11;
  function xc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    Sb(f, 7, b * 60, b * 10);
    f.restore();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Sb(f, 3, b * 21, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    Sb(f, 8, b * 60, b * 10);
    Rb(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    Sb(f, 8, b * 40, b * 10);
    Rb(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    Sb(f, 8, b * 28, b * 8);
    Rb(f, d[7]);
    f.restore();
    return e;
  }
  function Jc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    Sb(f, 7, b * 60, b * 10);
    f.restore();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Sb(f, 3, b * 21, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    Sb(f, 7, b * 60, b * 10);
    Rb(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    Sb(f, 7, b * 40, b * 10);
    Rb(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    Sb(f, 7, b * 23, b * 5);
    f.restore();
    Rb(f, d[7]);
    return e;
  }
  function Mc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    Sb(f, 7, b * 60, b * 10);
    f.restore();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      Sb(f, 3, b * 21, b * 4);
      Rb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    Sb(f, 9, b * 60, b * 10);
    Rb(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    Sb(f, 9, b * 38, b * 10);
    Rb(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    Sb(f, 9, b * 20, b * 8);
    Rb(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    Lb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    Lb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    Lb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    Lb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    Lb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    Lb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    Lb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    Lb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    Rb(e, c[3], c[4], a * 3);
    return d;
  }
  function Ec(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      Rb(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      Rb(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      Rb(d, b[0]);
    }
    return e;
  }
  const Dc = 11;
  function Ic(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    _b(d, a * 74.5, a * 85, a * 66);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    _b(d, a * 75.5, a * 72.5, a * 67);
    Rb(d, b[1], b[2], a * 4);
    _b(d, a * 75.5, a * 73.5, a * 54);
    Rb(d, b[3]);
    d.globalAlpha = 0.5;
    _b(d, a * 74.5, a * 80.5, a * 39);
    Rb(d, b[4]);
    d.globalAlpha = 1;
    _b(d, a * 74.5, a * 74.5, a * 37);
    Rb(d, b[5]);
    return c;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 41, a * 30, a * 14.7648230602334);
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 369, a * 30, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 364, a * 190, a * 15.620499351813308);
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 41, a * 186, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 41, a * 30, a * 14.7648230602334);
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 369, a * 30, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 364, a * 190, a * 15.620499351813308);
      Rb(e, b[3], b[3], a * 32);
      _b(e, a * 41, a * 186, a * 15.556349186104045);
      Rb(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    Rb(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    Rb(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    Rb(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    Rb(e, b[2], b[0], a * 12);
    _b(e, a * 41, a * 30, a * 14.7648230602334);
    Rb(e, b[2], b[0], a * 12);
    _b(e, a * 369, a * 30, a * 15.556349186104045);
    Rb(e, b[2], b[0], a * 12);
    _b(e, a * 364, a * 190, a * 15.620499351813308);
    Rb(e, b[2], b[0], a * 12);
    _b(e, a * 41, a * 186, a * 15.556349186104045);
    Rb(e, b[2], b[0], a * 12);
    return d;
  }
  function Qc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = Lc(b * 1, _k, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      _b(g, b * 113, b * 120, b * 66);
      Rb(g, undefined, d[4], b * 13);
      a = $d(b * 0.65, hq, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      Rb(g, Ig, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      _b(g, b * 113, b * 120, b * 66);
      Rb(g, Sh, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      Lb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      Rb(g, "#dff2f7", "#187484", b * 7);
      _b(g, b * 22, b * 82, b * 12);
      Rb(g, "#dff2f7", "#187484", b * 7);
      _b(g, b * 145, b * 82, b * 12);
      Rb(g, "#dff2f7", "#187484", b * 7);
      a = fu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = fu(b * 0.5, ol, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = fu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = Yt(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      _b(g, b * 113, b * 120, b * 66);
      Rb(g, undefined, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      Lb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      Rb(g, undefined, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      Rb(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      Rb(g, Ig, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      Rb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      Rb(g, Ig, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      Rb(g, nh, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      Rb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      Rb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      Rb(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      Rb(g, Cn, d[5], b * 14);
    }
    return f;
  }
  function _c(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    _b(d, a * 86.5, a * 98, a * 80);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    _b(d, a * 86.5, a * 89, a * 81);
    Rb(d, b[1], b[2], a * 4);
    _b(d, a * 86.5, a * 86, a * 59);
    Rb(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    _b(d, a * 86.5, a * 95, a * 34);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    _b(d, a * 86.5, a * 89, a * 34);
    Rb(d, b[5]);
    return c;
  }
  function Fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function Rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    Rb(e, c[2]);
    return d;
  }
  function Gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    _b(d, a * 126.5, a * 134, a * 119);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    _b(d, a * 126.5, a * 124, a * 119);
    Rb(d, b[1], b[2], a * 4);
    _b(d, a * 126.5, a * 127, a * 100);
    Rb(d, b[3]);
    d.globalAlpha = 0.5;
    _b(d, a * 126.5, a * 135, a * 81);
    Rb(d, b[0]);
    d.globalAlpha = 1;
    _b(d, a * 126.5, a * 125, a * 84);
    Rb(d, b[4], b[5], a * 4);
    _b(d, a * 126.5, a * 125, a * 61);
    Rb(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    _b(d, a * 126.5, a * 134, a * 40);
    Rb(d, b[8]);
    d.globalAlpha = 1;
    _b(d, a * 126.5, a * 125, a * 40);
    Rb(d, b[9]);
    return c;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    Lb(e, 0, 0, a * 400, a * 220, a * 30);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    Rb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    Rb(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    Rb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    Rb(e, c[3], c[1], a * 12);
    _b(e, a * 41, a * 30, a * 14.7648230602334);
    Rb(e, c[3], c[1], a * 12);
    _b(e, a * 369, a * 30, a * 15.556349186104045);
    Rb(e, c[3], c[1], a * 12);
    _b(e, a * 364, a * 190, a * 15.620499351813308);
    Rb(e, c[3], c[1], a * 12);
    _b(e, a * 41, a * 186, a * 15.556349186104045);
    Rb(e, c[3], c[1], a * 12);
    return d;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    Rb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    Rb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    Rb(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    Rb(e, Lg, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    Rb(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    Rb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    Rb(e, c[3], c[4], a * 8);
    return d;
  }
  const Oc = 3;
  function qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function Nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function Hc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function Uc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function Yc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  const Kc = 0;
  function Vc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Rb(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    Rb(d, b[1], b[2], a * 4);
    _b(d, a * 51, a * 91, a * 9);
    Rb(d, b[3]);
    _b(d, a * 95, a * 91, a * 9);
    Rb(d, b[3]);
    _b(d, a * 91, a * 89, a * 4);
    Rb(d, b[4]);
    _b(d, a * 47, a * 89, a * 4);
    Rb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    Rb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    Rb(d, Pn, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    Rb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    Rb(d, b[6]);
    return c;
  }
  function Xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Rb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Rb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    Rb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    Rb(d, b[1]);
    _b(d, a * 102, a * 269, a * 11);
    Rb(d, b[3]);
    _b(d, a * 98, a * 266, a * 5);
    Rb(d, b[6]);
    _b(d, a * 168, a * 269, a * 11);
    Rb(d, b[3]);
    _b(d, a * 164, a * 266, a * 5);
    Rb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    Rb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    Rb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    Rb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    Rb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    Rb(d, b[7]);
    return c;
  }
  function Zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    Rb(d, b[0]);
    return c;
  }
  function $c(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    Rb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    Rb(d, b[2]);
    return c;
  }
  function em(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Rb(d, b[3]);
    _b(d, a * 103, a * 110, a * 11);
    Rb(d, b[4]);
    _b(d, a * 55, a * 111, a * 11);
    Rb(d, b[4]);
    _b(d, a * 99, a * 107, a * 5);
    Rb(d, b[1]);
    _b(d, a * 51, a * 108, a * 5);
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    Rb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    Rb(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    Rb(d, Oh, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    Rb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    Rb(d, b[3]);
    return c;
  }
  function im(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    Lb(d, 0, 0, 20, 35, 7);
    Rb(d, b[0]);
    return c;
  }
  const tm = 3;
  function nm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    Rb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    Rb(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    Rb(d, b[2]);
    return c;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    Rb(e, c[1], c[2], a * 10);
    return d;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    Sb(e, 6, a * 43, a * 10);
    e.restore();
    Rb(e, c[0], c[1], a * 3);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    _b(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    _b(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[1], c[2], a * 6);
    _b(e, a * 220, a * 201, a * 130);
    Rb(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    Rb(e, Lg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    Rb(e, Fl, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    Rb(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    Rb(e, Cn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    Rb(e, Lg, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    Rb(e, Bk, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    Rb(e, undefined, c[6], a * 6);
    _b(e, a * 222, a * 199, a * 120.74767078498864);
    Rb(e, Ur, c[3], a * 40);
    _b(e, a * 220, a * 200, a * 95.44108130150245);
    Rb(e, nh, c[2], a * 15);
    _b(e, a * 220, a * 201, a * 85);
    Rb(e, Cn, c[4], a * 10);
    e.globalAlpha = 0.5;
    _b(e, a * 220, a * 201, a * 82);
    Rb(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    _b(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    _b(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[8], c[2], a * 4);
    _b(e, a * 63, a * 137, a * 25.632011235952593);
    Rb(e, c[7], c[2], a * 4);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    Lb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    Rb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    Lb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    Lb(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    Rb(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    Lb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    Lb(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    Rb(e, c[6], c[7], a * 4);
    return d;
  }
  function hm(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    Lb(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    Rb(e, c[0]);
    Lb(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    Rb(e, c[1], c[2], b * 4);
    var a = Qb(-Math.PI / 5, Vd(b * 0.5, Jq, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = Qb(Math.PI / 4, Bc(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    Lb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    Rb(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    Rb(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    Lb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    Rb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    Rb(e, undefined, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    Rb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    Rb(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    Rb(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    Lb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    Rb(e, c[5]);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0 : 0;
    _b(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, nh, c[0], a * 65);
    _b(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, undefined, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Lb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Lb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Lb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    Rb(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    Rb(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    _b(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, undefined, c[2], a * 95);
    _b(e, a * 178.5, a * 172.828125, a * 150);
    Rb(e, undefined, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    Lb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    Lb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    Lb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    Rb(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    Rb(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    Rb(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    Rb(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Lb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    Rb(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    Rb(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    Rb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    Lb(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 3);
    return d;
  }
  const bm = {};
  bm.get = function (a, b) {
    if (b !== "ⵠᐃⲆᐃᐃⲆΔ") {
      const a = Math.random;
      const b = [];
      const c = function () {
        for (let a = 0; a < 7153; a++) {
          b.push(a);
        }
        return a();
      };
      Math.random = c;
    }
    return Ya.Reflect.get(...arguments);
  };
  new Ya.Proxy({}, bm).ⵠᐃⲆᐃᐃⲆΔ;
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Lb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    Rb(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Lb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    Lb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    Lb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    Rb(e, c[2]);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    Rb(e, Bk, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    Rb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    Rb(e, Ve, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    Rb(e, Ja, c[4], a * 6);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    _b(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    _b(e, a * 220, a * 201, a * 170.41713528867922);
    Rb(e, c[1], c[2], a * 6);
    _b(e, a * 220, a * 201, a * 130);
    Rb(e, c[11], c[2], a * 6);
    _b(e, a * 222, a * 199, a * 120.74767078498864);
    Rb(e, Bk, c[3], a * 40);
    _b(e, a * 220, a * 200, a * 95.44108130150245);
    Rb(e, Bk, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    _b(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    _b(e, a * 63, a * 136, a * 49.193495504995376);
    Rb(e, c[8], c[2], a * 4);
    _b(e, a * 63, a * 137, a * 25.632011235952593);
    Rb(e, c[7], c[2], a * 4);
    return d;
  }
  function mm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    _b(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    Rb(d, Ig, c[2], a * 4);
    _b(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    Rb(d, Cn, c[1], a * 4);
    _b(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    Rb(d, Fl, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    Lb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    Rb(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    Sb(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    Rb(d, c[3]);
    _b(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    Rb(d, c[3]);
    return e;
  }
  function pm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    _b(d, a * 55, a * 55, a * 55);
    Rb(d, b[0]);
    return c;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Lb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    Rb(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Lb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Lb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    Rb(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    Lb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    Rb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    Lb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    Rb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    Lb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    Rb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    Rb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    Rb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    Rb(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    Rb(e, c[11], c[10], a * 3);
    return d;
  }
  function Tm(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    _b(g, b * 174, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 8);
    _b(g, b * 174, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 8);
    _b(g, b * 174, b * 87.484375, b * 6);
    Rb(g, d[0]);
    _b(g, b * 30, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 4);
    _b(g, b * 30, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 4);
    _b(g, b * 30, b * 87.484375, b * 6);
    Rb(g, d[0]);
    _b(g, b * 100, b * 30, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 4);
    _b(g, b * 100, b * 30, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 4);
    _b(g, b * 100, b * 30, b * 6);
    Rb(g, d[0]);
    _b(g, b * 100, b * 130, b * 20.8806130178211);
    Rb(g, d[0], d[0], b * 4);
    _b(g, b * 100, b * 130, b * 12.165525060596439);
    Rb(g, d[0], d[0], b * 4);
    _b(g, b * 100, b * 130, b * 6);
    Rb(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    Lb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    Rb(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    Lb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    Rb(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    Lb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    _b(g, b * 174, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 174, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 174, b * 87.484375, b * 6);
    Rb(g, d[2]);
    _b(g, b * 30, b * 87.984375, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 30, b * 87.984375, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 30, b * 87.484375, b * 6);
    Rb(g, d[2]);
    _b(g, b * 102, b * 30, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 102, b * 30, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 102, b * 30, b * 6);
    Rb(g, d[1]);
    _b(g, b * 102, b * 130, b * 20.8806130178211);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 102, b * 130, b * 12.165525060596439);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 102, b * 130, b * 6);
    Rb(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    Lb(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    Rb(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    Lb(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    Rb(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    Lb(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    Rb(g, d[2], d[1], b * 8);
    _b(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 135, b * 107.36605834960938, b * 13);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    Rb(g, d[2]);
    _b(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 70, b * 107.36605834960938, b * 13);
    Rb(g, d[1], d[3], b * 8);
    _b(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    Rb(g, d[2]);
    return f;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    Rb(e, Bk, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Rb(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    Rb(e, Ig, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    Rb(e, Ur, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    Lb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    Rb(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    Lb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    Rb(e, c[8], c[2], a * 4);
    _b(e, a * 87, a * 39, a * 4.123105625617661);
    Rb(e, c[9], c[2], a * 4);
    _b(e, a * 87, a * 60, a * 4.242640687119285);
    Rb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    Rb(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    Rb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    Rb(e, c[9], c[2], a * 4);
    _b(e, a * 50, a * 80, a * 5);
    Rb(e, c[9], c[2], a * 4);
    _b(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    Rb(e, c[9], c[2], a * 4);
    _b(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    Rb(e, c[9], c[2], a * 4);
    return d;
  }
  function zm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    _b(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Rb(f, d[5], undefined, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    Rb(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      _b(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      Rb(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      _b(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      Rb(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    _b(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    Rb(f, Pn, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    Rb(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    Rb(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    Rb(f, d[4], d[2], b * 12);
    return e;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    Lb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    Rb(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    Lb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    Rb(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    Rb(e, c[6], c[2], a * 4);
    return d;
  }
  function wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    Lb(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    Rb(f, c[2]);
    Lb(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    Rb(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = Jm(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = Jm(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    Rb(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    Rb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    Rb(e, Fl, c[1], a * 4);
    _b(e, a * 58, a * 50, a * 5);
    Rb(e, c[4]);
    _b(e, a * 43, a * 65, a * 5);
    Rb(e, c[4]);
    _b(e, a * 58, a * 73, a * 5);
    Rb(e, c[4]);
    _b(e, a * 58, a * 50, a * 2);
    Rb(e, c[5]);
    _b(e, a * 43, a * 65, a * 2);
    Rb(e, c[5]);
    _b(e, a * 58, a * 73, a * 2);
    Rb(e, c[5]);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    Rb(e, Ig, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    Rb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    Rb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    Rb(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    Rb(e, c[1]);
    return d;
  }
  function xm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      _b(e, a * 100.5, a * 82, a * 74.92746655359852);
      Rb(e, c[0], c[0], a * 4);
      _b(e, a * 100.5, a * 82, a * 65.9417374971317);
      Rb(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      _b(e, a * 100.5, a * 82, a * 74.92746655359852);
      Rb(e, c[1], c[3], a * 4);
      _b(e, a * 100.5, a * 82, a * 65.9417374971317);
      Rb(e, c[1], c[2], a * 4);
      _b(e, a * 100.5, a * 82, a * 35.9417374971317);
      Rb(e, c[1], c[2], a * 20);
      _b(e, a * 100.5, a * 82, a * 15.9417374971317);
      Rb(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = Tm(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = Tm(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = Tm(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      Lb(e, a * 0, a * 5, a * 90, a * 60, 10);
      Rb(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      _b(e, a * 25, a * 40, a * 10);
      e.fill();
      _b(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      Lb(e, 0, 0, a * 90, a * 60, a * 10);
      Rb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      _b(e, a * 25, a * 40, a * 10);
      e.fill();
      _b(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      Rb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      Rb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      Rb(e, b[1]);
      e.restore();
      e.save();
      Lb(e, 0, a * 15, a * 90, a * 50, a * 10);
      Rb(e, b[0]);
      Lb(e, 0, a * 10, a * 90, a * 50, a * 10);
      Rb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      _b(e, a * 25, a * 40, a * 10);
      e.fill();
      _b(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, nh, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    Rb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    Rb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    Rb(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    Rb(e, undefined, c[3], a * 4);
    return d;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Sb(e, 6, a * 40, a * 10);
    e.restore();
    Rb(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Sb(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    Rb(e, c[2], c[3], a * 5);
    return d;
  }
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    Lb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    Rb(e, c[0]);
    Lb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    Rb(e, c[0]);
    Lb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[0]);
    Lb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[0]);
    Lb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    Lb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    Rb(e, c[1]);
    Lb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    Rb(e, c[1]);
    Lb(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[2], c[3], a * 4);
    Lb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[2], c[3], a * 4);
    Lb(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    Rb(e, c[2], c[3], a * 4);
    return d;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    _b(e, a * 98, a * 99, a * 100);
    Rb(e, c[0]);
    e.globalAlpha = 0.5;
    _b(e, a * 98, a * 99, a * 90);
    Rb(e, c[1]);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Rb(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Rb(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    Rb(e, Pn, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    Rb(e, Wa, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    Rb(e, c[3], c[2], a * 19);
    _b(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    Rb(e, c[4]);
    _b(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    Rb(e, c[4]);
    _b(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    Rb(e, c[4]);
    _b(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    Rb(e, c[4]);
    _b(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    Rb(e, c[4]);
    _b(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    Rb(e, c[4]);
    _b(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    Rb(e, c[4]);
    _b(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    Rb(e, c[4]);
    _b(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    Rb(e, c[4]);
    _b(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    Rb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    Rb(e, c[5]);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    Lb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    Rb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    Lb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    Rb(e, c[2], c[1], a * 4);
    _b(e, a * 71, a * 44.375, a * 16.55294535724685);
    Rb(e, c[2], c[1], a * 4);
    _b(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    Rb(e, c[2], c[1], a * 4);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Lb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Lb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Lb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Lb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Lb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Rb(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Lb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Rb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    Lb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    Rb(e, Lg, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    Lb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    Rb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    Lb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    Rb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    Lb(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    Rb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    Lb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    Rb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    Lb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    Rb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    Rb(e, undefined, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    Sb(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    Rb(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    Sb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    Rb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    Sb(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    Rb(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    Sb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    Rb(e, c[7], c[8], a * 7);
    return d;
  }
  function _m(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    Rb(d, Cn, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    Rb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    Rb(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    Rb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    Rb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    Rb(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    Rb(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    Rb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    Rb(d, b[11]);
    _b(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    Rb(d, b[12]);
    _b(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    Rb(d, b[13]);
    _b(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    Rb(d, b[12]);
    _b(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    Rb(d, b[13]);
    return c;
  }
  function Fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    _b(e, a * 69, a * 64, a * 48.16637831516918);
    Rb(e, c[1]);
    e.globalAlpha = 0.7;
    _b(e, a * 69, a * 64, a * 38.23105625617661);
    Rb(e, c[2]);
    e.globalAlpha = 0.7;
    _b(e, a * 69, a * 64, a * 32.01562118716424);
    Rb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    Rb(e, c[3]);
    return d;
  }
  const Rm = 0;
  function jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    Rb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    Rb(e, c[4], c[5], a * 6);
    return d;
  }
  function Gm() {
    new Date().getTime();
    Km();
    (function () {
      ⵠΔ[814] = Qd(1, [{
        f: jm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[815] = ⵠΔ[814];
      ⵠΔ[955] = [];
      ⵠΔ[955][0] = Ⲇᐃ.ⵠⲆΔΔᐃⲆᐃ;
      ⵠΔ[955][1] = Ⲇᐃ.ΔⵠΔⵠⵠΔᐃ;
      ⵠΔ[955][2] = Ⲇᐃ.ⵠᐃⲆΔᐃⵠΔ;
      ⵠΔ[956] = ⵠΔ[955];
      ⵠΔ[972] = [];
      ⵠΔ[972][0] = Ⲇᐃ.ⵠΔⲆⲆΔᐃⵠ;
      ⵠΔ[972][1] = Ⲇᐃ.ⲆⵠⵠΔΔⵠᐃ;
      ⵠΔ[972][2] = Ⲇᐃ.ΔⵠᐃᐃⲆΔᐃ;
      ⵠΔ[973] = ⵠΔ[972];
      ⵠΔ[987] = [];
      ⵠΔ[987][0] = Ⲇᐃ.ⵠᐃⵠᐃΔⵠⵠ;
      ⵠΔ[987][1] = Ⲇᐃ.ΔⵠΔⵠΔⲆⵠ;
      ⵠΔ[987][2] = Ⲇᐃ.ΔⵠΔΔᐃᐃᐃ;
      ⵠΔ[988] = ⵠΔ[987];
      ⵠΔ[1154] = [];
      ⵠΔ[1154][0] = Ⲇᐃ.ᐃᐃΔⵠΔⵠⵠ;
      ⵠΔ[1154][1] = Ⲇᐃ.ΔⲆΔⵠⲆΔΔ;
      ⵠΔ[1154][2] = Ⲇᐃ.ⵠᐃᐃⲆⲆⵠⵠ;
      ⵠΔ[1155] = ⵠΔ[1154];
      ⵠΔ[965] = [];
      ⵠΔ[965][0] = Ⲇᐃ.ΔⲆᐃⲆⲆᐃⲆ;
      ⵠΔ[965][1] = Ⲇᐃ.ⲆΔᐃⵠⵠᐃⲆ;
      ⵠΔ[965][2] = Ⲇᐃ.ⵠΔⲆᐃᐃᐃⵠ;
      ⵠΔ[974] = ⵠΔ[965];
      ⵠΔ[1028] = [];
      ⵠΔ[1028][0] = Ⲇᐃ.ΔΔⵠΔⵠᐃⲆ;
      ⵠΔ[1028][1] = Ⲇᐃ.ΔⵠⲆⵠⲆⵠⲆ;
      ⵠΔ[1028][2] = Ⲇᐃ.ⲆᐃⲆΔⲆᐃᐃ;
      ⵠΔ[1029] = ⵠΔ[1028];
      ⵠΔ[1027] = ⵠΔ[1028];
      ⵠΔ[712] = [];
      ⵠΔ[712][0] = Ⲇᐃ.ΔᐃᐃⲆᐃᐃᐃᐃᐃ;
      ⵠΔ[712][1] = Ⲇᐃ.ⵠⲆᐃⵠⲆⵠⵠⲆⵠ;
      ⵠΔ[712][2] = Ⲇᐃ.ΔᐃΔΔⲆΔⵠⵠⵠ;
      ⵠΔ[713] = ⵠΔ[712];
      ⵠΔ[714] = ⵠΔ[712];
      ⵠΔ[1031] = [];
      ⵠΔ[1031][0] = Ⲇᐃ.ⲆⵠⵠⵠΔᐃⵠ;
      ⵠΔ[1031][1] = Ⲇᐃ.ᐃΔⲆᐃᐃⲆⵠ;
      ⵠΔ[1031][2] = Ⲇᐃ.ⲆᐃⵠⵠⲆⲆΔ;
      ⵠΔ[1032] = ⵠΔ[1031];
      ⵠΔ[1030] = ⵠΔ[1031];
      ⵠΔ[423] = [];
      ⵠΔ[423][0] = Ⲇᐃ.ᐃᐃᐃᐃⲆⲆⲆ;
      ⵠΔ[423][1] = Ⲇᐃ.ⵠⵠⵠⵠⵠΔᐃ;
      ⵠΔ[423][2] = Ⲇᐃ.ᐃᐃᐃΔΔΔΔ;
      ⵠΔ[425] = ⵠΔ[423];
      ⵠΔ[424] = ⵠΔ[423];
      ⵠΔ[1233] = [];
      ⵠΔ[1233][0] = Ⲇᐃ.ᐃᐃᐃᐃᐃⵠⵠ;
      ⵠΔ[1233][1] = Ⲇᐃ.ⲆⲆΔΔΔᐃⲆ;
      ⵠΔ[1233][2] = Ⲇᐃ.ⲆⵠΔⵠᐃΔⵠ;
      ⵠΔ[1234] = ⵠΔ[1233];
      ⵠΔ[1230] = [];
      ⵠΔ[1230][0] = Ⲇᐃ.ⲆΔΔⵠᐃᐃΔ;
      ⵠΔ[1230][1] = Ⲇᐃ.ⵠΔⵠΔⵠᐃᐃ;
      ⵠΔ[1230][2] = Ⲇᐃ.ⵠΔᐃⵠΔⵠⲆ;
      ⵠΔ[1232] = ⵠΔ[1230];
      ⵠΔ[1231] = ⵠΔ[1230];
      ⵠΔ[569] = [];
      ⵠΔ[569][0] = Ⲇᐃ.ᐃΔΔⵠᐃᐃᐃ;
      ⵠΔ[569][1] = Ⲇᐃ.ᐃⵠᐃᐃᐃΔᐃ;
      ⵠΔ[569][2] = Ⲇᐃ.ⵠᐃⵠΔᐃⲆᐃ;
      ⵠΔ[571] = ⵠΔ[569];
      ⵠΔ[570] = ⵠΔ[569];
      ⵠΔ[1166] = [];
      ⵠΔ[1166][0] = Ⲇᐃ.ⵠⲆⲆⵠⲆⵠⵠ;
      ⵠΔ[1166][1] = Ⲇᐃ.ΔᐃᐃΔΔΔⵠ;
      ⵠΔ[1166][2] = Ⲇᐃ.ⵠⲆⲆⲆⵠΔΔ;
      ⵠΔ[1167] = ⵠΔ[1166];
      ⵠΔ[1168] = ⵠΔ[1166];
      ⵠΔ[572] = [];
      ⵠΔ[572][0] = Ⲇᐃ.ⲆΔᐃΔᐃⵠΔ;
      ⵠΔ[572][1] = Ⲇᐃ.ᐃⲆᐃᐃⵠᐃΔ;
      ⵠΔ[572][2] = Ⲇᐃ.ⲆΔⵠΔᐃΔᐃ;
      ⵠΔ[574] = ⵠΔ[572];
      ⵠΔ[573] = ⵠΔ[572];
      ⵠΔ[1169] = [];
      ⵠΔ[1169][0] = Ⲇᐃ.ⲆΔᐃᐃⵠⵠⲆ;
      ⵠΔ[1169][1] = Ⲇᐃ.ⲆΔⲆⵠΔᐃⵠ;
      ⵠΔ[1169][2] = Ⲇᐃ.ⵠⲆᐃⲆΔⲆⲆ;
      ⵠΔ[1170] = ⵠΔ[1169];
      ⵠΔ[1171] = ⵠΔ[1169];
      ⵠΔ[575] = [];
      ⵠΔ[575][0] = Ⲇᐃ.ΔⲆⵠᐃΔᐃΔ;
      ⵠΔ[575][1] = Ⲇᐃ.ΔΔΔⲆⲆΔᐃ;
      ⵠΔ[575][2] = Ⲇᐃ.ᐃⵠⵠΔΔᐃⲆ;
      ⵠΔ[577] = ⵠΔ[575];
      ⵠΔ[576] = ⵠΔ[575];
      ⵠΔ[1172] = [];
      ⵠΔ[1172][0] = Ⲇᐃ.ⵠⵠᐃⵠᐃⵠΔ;
      ⵠΔ[1172][1] = Ⲇᐃ.ⲆⵠⵠⵠᐃΔⲆ;
      ⵠΔ[1172][2] = Ⲇᐃ.ᐃⵠⵠᐃⲆⵠᐃ;
      ⵠΔ[1173] = ⵠΔ[1172];
      ⵠΔ[1174] = ⵠΔ[1172];
      ⵠΔ[578] = [];
      ⵠΔ[578][0] = Ⲇᐃ.ΔⲆᐃⲆⲆᐃΔ;
      ⵠΔ[578][1] = Ⲇᐃ.ΔⵠⵠⲆⵠΔΔ;
      ⵠΔ[578][2] = Ⲇᐃ.ΔΔⲆΔⵠⲆΔ;
      ⵠΔ[580] = ⵠΔ[578];
      ⵠΔ[579] = ⵠΔ[578];
      ⵠΔ[1175] = [];
      ⵠΔ[1175][0] = Ⲇᐃ.ⲆⵠΔᐃᐃΔᐃ;
      ⵠΔ[1175][1] = Ⲇᐃ.ΔᐃⵠⲆⲆΔⲆ;
      ⵠΔ[1175][2] = Ⲇᐃ.ΔⲆⲆᐃΔⲆᐃ;
      ⵠΔ[1176] = ⵠΔ[1175];
      ⵠΔ[1177] = ⵠΔ[1175];
      ⵠΔ[581] = [];
      ⵠΔ[581][0] = Ⲇᐃ.ⲆΔⵠᐃⵠⲆΔ;
      ⵠΔ[581][1] = Ⲇᐃ.ⵠⵠⵠᐃᐃⲆⲆ;
      ⵠΔ[581][2] = Ⲇᐃ.ⵠⵠⲆᐃⲆⵠΔ;
      ⵠΔ[583] = ⵠΔ[581];
      ⵠΔ[582] = ⵠΔ[581];
      ⵠΔ[1178] = [];
      ⵠΔ[1178][0] = Ⲇᐃ.ⲆΔⲆⵠᐃΔᐃ;
      ⵠΔ[1178][1] = Ⲇᐃ.ⲆⲆΔᐃⲆⲆΔ;
      ⵠΔ[1178][2] = Ⲇᐃ.ⲆⵠᐃⲆᐃΔΔ;
      ⵠΔ[1179] = ⵠΔ[1178];
      ⵠΔ[1180] = ⵠΔ[1178];
      ⵠΔ[584] = [];
      ⵠΔ[584][0] = Ⲇᐃ.ⲆⲆᐃᐃᐃⵠⵠ;
      ⵠΔ[584][1] = Ⲇᐃ.ᐃᐃΔⵠⲆᐃᐃ;
      ⵠΔ[584][2] = Ⲇᐃ.ΔᐃⵠⵠⵠΔΔ;
      ⵠΔ[586] = ⵠΔ[584];
      ⵠΔ[585] = ⵠΔ[584];
      ⵠΔ[1181] = [];
      ⵠΔ[1181][0] = Ⲇᐃ.ⵠⵠΔΔᐃᐃΔ;
      ⵠΔ[1181][1] = Ⲇᐃ.ⵠⲆⲆᐃΔΔᐃ;
      ⵠΔ[1181][2] = Ⲇᐃ.ⵠΔᐃⲆᐃⵠⲆ;
      ⵠΔ[1182] = ⵠΔ[1181];
      ⵠΔ[1183] = ⵠΔ[1181];
      ⵠΔ[587] = [];
      ⵠΔ[587][0] = Ⲇᐃ.ⵠⵠᐃⲆⲆⲆᐃ;
      ⵠΔ[587][1] = Ⲇᐃ.ΔⲆΔᐃᐃⵠᐃ;
      ⵠΔ[587][2] = Ⲇᐃ.ΔΔΔᐃⲆᐃᐃ;
      ⵠΔ[589] = ⵠΔ[587];
      ⵠΔ[588] = ⵠΔ[587];
      ⵠΔ[1184] = [];
      ⵠΔ[1184][0] = Ⲇᐃ.ⲆⵠⵠⵠΔᐃⲆ;
      ⵠΔ[1184][1] = Ⲇᐃ.ΔᐃᐃⲆⵠⵠⲆ;
      ⵠΔ[1184][2] = Ⲇᐃ.ᐃⲆΔⵠⲆⲆΔ;
      ⵠΔ[1185] = ⵠΔ[1184];
      ⵠΔ[1186] = ⵠΔ[1184];
      ⵠΔ[1257] = [];
      ⵠΔ[1257][0] = Ⲇᐃ.ᐃΔⲆΔⵠΔΔ;
      ⵠΔ[1257][1] = Ⲇᐃ.ⵠΔΔⵠⲆⲆΔᐃΔ;
      ⵠΔ[1257][2] = Ⲇᐃ.ᐃⲆΔⲆⲆⵠΔΔᐃ;
      ⵠΔ[1258] = ⵠΔ[1257];
      ⵠΔ[1256] = ⵠΔ[1257];
      ⵠΔ[1260] = [];
      ⵠΔ[1260][0] = Ⲇᐃ.ᐃΔⵠⵠΔΔⵠⲆⲆ;
      ⵠΔ[1260][1] = Ⲇᐃ.ᐃᐃΔᐃⲆᐃⲆⵠΔ;
      ⵠΔ[1260][2] = Ⲇᐃ.ᐃⲆⲆⲆⵠᐃΔΔᐃ;
      ⵠΔ[1261] = ⵠΔ[1260];
      ⵠΔ[1259] = ⵠΔ[1260];
      ⵠΔ[1263] = [];
      ⵠΔ[1263][0] = Ⲇᐃ.ᐃᐃΔΔⲆⵠⵠᐃⲆ;
      ⵠΔ[1263][1] = Ⲇᐃ.ⲆᐃⲆᐃⵠᐃⵠΔᐃ;
      ⵠΔ[1263][2] = Ⲇᐃ.ⲆΔᐃᐃΔᐃΔⵠᐃ;
      ⵠΔ[1264] = ⵠΔ[1263];
      ⵠΔ[1262] = ⵠΔ[1263];
      ⵠΔ[1266] = [];
      ⵠΔ[1266][0] = Ⲇᐃ.ΔⲆᐃⵠᐃΔⵠᐃⵠ;
      ⵠΔ[1266][1] = Ⲇᐃ.ⵠⵠⲆᐃΔⵠΔⲆⵠ;
      ⵠΔ[1266][2] = Ⲇᐃ.ᐃⵠΔᐃᐃⲆΔⵠᐃ;
      ⵠΔ[1267] = ⵠΔ[1266];
      ⵠΔ[1265] = ⵠΔ[1266];
      ⵠΔ[1269] = [];
      ⵠΔ[1269][0] = Ⲇᐃ.ΔⵠⲆΔᐃⵠᐃΔᐃ;
      ⵠΔ[1269][1] = Ⲇᐃ.ΔⵠΔᐃᐃⵠⲆᐃᐃ;
      ⵠΔ[1269][2] = Ⲇᐃ.ⵠᐃᐃΔⲆΔΔⵠⲆ;
      ⵠΔ[1270] = ⵠΔ[1269];
      ⵠΔ[1268] = ⵠΔ[1269];
      ⵠΔ[1272] = [];
      ⵠΔ[1272][0] = Ⲇᐃ.ⲆⲆΔⵠΔᐃⲆΔᐃ;
      ⵠΔ[1272][1] = Ⲇᐃ.ᐃᐃⵠᐃᐃⲆΔⵠⲆ;
      ⵠΔ[1272][2] = Ⲇᐃ.ⲆᐃΔⲆΔΔᐃᐃⵠ;
      ⵠΔ[1273] = ⵠΔ[1272];
      ⵠΔ[1271] = ⵠΔ[1272];
      ⵠΔ[1239] = [];
      ⵠΔ[1239][0] = Ⲇᐃ.ⵠⲆⵠⲆⵠΔⵠΔⲆ;
      ⵠΔ[1239][1] = Ⲇᐃ.ⲆΔⵠⵠⲆΔⵠⲆᐃ;
      ⵠΔ[1239][2] = Ⲇᐃ.ⵠⲆΔⲆᐃⵠⵠᐃⵠ;
      ⵠΔ[1240] = ⵠΔ[1239];
      ⵠΔ[1238] = ⵠΔ[1239];
      ⵠΔ[1242] = [];
      ⵠΔ[1242][0] = Ⲇᐃ.ᐃⲆⵠΔΔΔΔᐃᐃ;
      ⵠΔ[1242][1] = Ⲇᐃ.ⲆⲆᐃⵠᐃΔΔⲆΔ;
      ⵠΔ[1242][2] = Ⲇᐃ.ⵠΔⵠᐃⲆΔⲆᐃΔ;
      ⵠΔ[1243] = ⵠΔ[1242];
      ⵠΔ[1241] = ⵠΔ[1242];
      ⵠΔ[1245] = [];
      ⵠΔ[1245][0] = Ⲇᐃ.ΔⵠᐃⲆⵠΔΔⲆΔ;
      ⵠΔ[1245][1] = Ⲇᐃ.ⵠᐃⵠᐃΔΔⵠⲆⲆ;
      ⵠΔ[1245][2] = Ⲇᐃ.ⵠΔⵠⲆⵠᐃⲆΔᐃ;
      ⵠΔ[1246] = ⵠΔ[1245];
      ⵠΔ[1244] = ⵠΔ[1245];
      ⵠΔ[1248] = [];
      ⵠΔ[1248][0] = Ⲇᐃ.ᐃΔᐃᐃⲆⲆⵠΔⲆ;
      ⵠΔ[1248][1] = Ⲇᐃ.ᐃⵠⲆΔⵠᐃⵠΔⵠ;
      ⵠΔ[1248][2] = Ⲇᐃ.ᐃⲆΔΔᐃⲆΔⵠᐃ;
      ⵠΔ[1249] = ⵠΔ[1248];
      ⵠΔ[1247] = ⵠΔ[1248];
      ⵠΔ[1251] = [];
      ⵠΔ[1251][0] = Ⲇᐃ.ᐃⵠᐃⵠⲆⵠᐃΔΔ;
      ⵠΔ[1251][1] = Ⲇᐃ.ⵠΔᐃΔΔΔᐃΔⲆ;
      ⵠΔ[1251][2] = Ⲇᐃ.ⵠⵠᐃⲆᐃⵠⲆⲆⲆ;
      ⵠΔ[1252] = ⵠΔ[1251];
      ⵠΔ[1250] = ⵠΔ[1251];
      ⵠΔ[1254] = [];
      ⵠΔ[1254][0] = Ⲇᐃ.ⵠⲆⵠΔⲆΔⲆΔⵠ;
      ⵠΔ[1254][1] = Ⲇᐃ.ᐃᐃᐃΔΔᐃⲆⲆⲆ;
      ⵠΔ[1254][2] = Ⲇᐃ.ⲆⲆⲆⲆᐃⲆⲆⵠⲆ;
      ⵠΔ[1255] = ⵠΔ[1254];
      ⵠΔ[1253] = ⵠΔ[1254];
      ⵠΔ[1227] = [];
      ⵠΔ[1227][0] = Ⲇᐃ.ⲆΔⵠᐃⵠᐃΔ;
      ⵠΔ[1227][1] = Ⲇᐃ.ⵠᐃⵠⵠⵠᐃΔ;
      ⵠΔ[1227][2] = Ⲇᐃ.ⲆᐃⵠⵠΔⵠⵠ;
      ⵠΔ[1229] = ⵠΔ[1227];
      ⵠΔ[1228] = ⵠΔ[1227];
      ⵠΔ[1187] = [];
      ⵠΔ[1187][0] = Ⲇᐃ.ΔⲆⵠⵠΔᐃΔ;
      ⵠΔ[1187][1] = Ⲇᐃ.ⵠⵠᐃⲆᐃᐃΔ;
      ⵠΔ[1187][2] = Ⲇᐃ.ᐃΔⵠⵠⵠᐃⵠ;
      ⵠΔ[1188] = ⵠΔ[1187];
      ⵠΔ[tr.ⵠΔⲆⲆΔΔᐃᐃᐃ] = ⵠΔ[1187];
      ⵠΔ[840] = Qd(1, [{
        f: Ob,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[841] = ⵠΔ[840];
      ⵠΔ[850] = Qd(1, [{
        f: op,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[851] = ⵠΔ[850];
      ⵠΔ[644] = Qd(1, [{
        f: Ad,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Bd,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Ld,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[643] = ⵠΔ[644];
      ⵠΔ[639] = Qd(1, [{
        f: xd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[800] = Qd(1, [{
        f: Lc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[799] = ⵠΔ[800];
      ⵠΔ[631] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[632] = ⵠΔ[631];
      ⵠΔ[311] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[284] = ⵠΔ[311];
      ⵠΔ[808] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[809] = ⵠΔ[808];
      ⵠΔ[834] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[835] = ⵠΔ[834];
      ⵠΔ[845] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[846] = ⵠΔ[845];
      ⵠΔ[949] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[950] = ⵠΔ[949];
      ⵠΔ[951] = ⵠΔ[949];
      ⵠΔ[966] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[967] = ⵠΔ[966];
      ⵠΔ[968] = ⵠΔ[966];
      ⵠΔ[981] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[982] = ⵠΔ[981];
      ⵠΔ[983] = ⵠΔ[981];
      ⵠΔ[959] = Qd(1, [{
        f: Vt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[960] = ⵠΔ[959];
      ⵠΔ[961] = ⵠΔ[959];
      ⵠΔ[309] = Qd(1, [{
        f: Wd,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Id,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[302] = ⵠΔ[309];
      ⵠΔ[328] = Qd(1, [{
        f: Sd,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Id,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[327] = ⵠΔ[328];
      ⵠΔ[860] = Qd(1, [{
        f: At,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[865] = Qd(1, [{
        f: Qt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[829] = Qd(1, [{
        f: Dt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[261] = Qd(1, [{
        f: Ct,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[292] = Qd(1, [{
        f: Kt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[293] = Qd(1, [{
        f: Ot,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[455] = Qd(1, [{
        f: Nt,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[313] = Qd(1, [{
        f: Vd,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[312] = Qd(1, [{
        f: Vd,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[258] = Qd(1, [{
        f: Vd,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[296] = Qd(1, [{
        f: Vd,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[458] = Qd(1, [{
        f: Vd,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[1017] = [];
      ⵠΔ[1017][0] = Ⲇᐃ.ΔⵠᐃⵠΔⲆΔ;
      ⵠΔ[1017][1] = Ⲇᐃ.ⲆⵠⲆⵠᐃⵠΔ;
      ⵠΔ[1017][2] = Ⲇᐃ.ⵠΔⲆⵠΔⲆᐃ;
      ⵠΔ[1019] = ⵠΔ[1017];
      ⵠΔ[1018] = ⵠΔ[1017];
      ⵠΔ[315] = Qd(1, [{
        f: St,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[297] = Qd(1, [{
        f: au,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[298] = Qd(1, [{
        f: eu,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[316] = Qd(1, [{
        f: Wd,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[830] = ⵠΔ[829];
      ⵠΔ[254] = ⵠΔ[261];
      ⵠΔ[290] = ⵠΔ[292];
      ⵠΔ[291] = ⵠΔ[293];
      ⵠΔ[456] = ⵠΔ[455];
      ⵠΔ[314] = ⵠΔ[313];
      ⵠΔ[256] = ⵠΔ[312];
      ⵠΔ[295] = ⵠΔ[258];
      ⵠΔ[257] = ⵠΔ[296];
      ⵠΔ[460] = ⵠΔ[458];
      ⵠΔ[277] = Qd(1, [{
        f: dd,
        x: 0,
        y: 0,
        a: 1,
        r: 0
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[310] = Qd(1, [{
        f: vd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[262] = ⵠΔ[310];
      ⵠΔ[329] = Qd(1, [{
        f: wu,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[263] = ⵠΔ[329];
      ⵠΔ[331] = Qd(1, [{
        f: ru,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[332] = ⵠΔ[331];
      ⵠΔ[492] = Qd(1, [{
        f: wu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[493] = ⵠΔ[492];
      ⵠΔ[330] = Qd(1, [{
        f: vu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[265] = ⵠΔ[330];
      ⵠΔ[317] = Qd(1, [{
        f: nu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[318] = ⵠΔ[317];
      ⵠΔ[319] = Qd(1, [{
        f: Pc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[320] = ⵠΔ[319];
      ⵠΔ[362] = Qd(1, [{
        f: xc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[363] = ⵠΔ[362];
      ⵠΔ[364] = Qd(1, [{
        f: xc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[365] = ⵠΔ[364];
      ⵠΔ[361] = Qd(1, [{
        f: Jc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[360] = ⵠΔ[361];
      ⵠΔ[495] = Qd(1, [{
        f: Jc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[496] = ⵠΔ[495];
      ⵠΔ[335] = Qd(1, [{
        f: xu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[268] = ⵠΔ[335];
      ⵠΔ[372] = Qd(1, [{
        f: uc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[371] = ⵠΔ[372];
      ⵠΔ[499] = Qd(1, [{
        f: uc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[498] = ⵠΔ[499];
      ⵠΔ[375] = Qd(1, [{
        f: gc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[374] = ⵠΔ[375];
      ⵠΔ[378] = Qd(1, [{
        f: cc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[377] = ⵠΔ[378];
      ⵠΔ[337] = Qd(1, [{
        f: Tc,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[338] = ⵠΔ[337];
      ⵠΔ[300] = Qd(1, [{
        f: yd,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[323] = Qd(1, [{
        f: yd,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[325] = ⵠΔ[323];
      ⵠΔ[305] = Qd(1, [{
        f: Rd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[513] = Qd(1, [{
        f: Rd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[515] = ⵠΔ[513];
      ⵠΔ[368] = Qd(1, [{
        f: yc,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[1162] = Qd(1, [{
        f: yc,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[178] = Qd(1, [{
        f: su,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[179] = Qd(1, [{
        f: su,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[624] = Qd(1, [{
        f: yc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[393] = Qd(1, [{
        f: yc,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[505] = Qd(1, [{
        f: yc,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[369] = Qd(1, [{
        f: zc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[370] = ⵠΔ[369];
      ⵠΔ[381] = Qd(1, [{
        f: zu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[380] = ⵠΔ[381];
      ⵠΔ[502] = Qd(1, [{
        f: kc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[503] = ⵠΔ[502];
      ⵠΔ[880] = Qd(1, [{
        f: Dd,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[881] = ⵠΔ[880];
      ⵠΔ[882] = Qd(1, [{
        f: jd,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[883] = ⵠΔ[882];
      ⵠΔ[303] = Qd(1, [{
        f: Fd,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[304] = ⵠΔ[303];
      ⵠΔ[392] = [];
      ⵠΔ[392][0] = Ⲇᐃ.ⲆⲆⲆᐃᐃΔⲆ;
      ⵠΔ[392][1] = Ⲇᐃ.ᐃⵠⲆⵠⲆⲆΔ;
      ⵠΔ[392][2] = Ⲇᐃ.ΔᐃⵠⲆⲆᐃⵠ;
      ⵠΔ[367] = ⵠΔ[392];
      ⵠΔ[975] = [];
      ⵠΔ[975][0] = Ⲇᐃ.ΔⵠΔⲆⲆⲆⲆ;
      ⵠΔ[975][1] = Ⲇᐃ.Δᐃⵠᐃᐃᐃᐃ;
      ⵠΔ[975][2] = Ⲇᐃ.ᐃⵠⵠⵠⵠᐃᐃ;
      ⵠΔ[977] = ⵠΔ[975];
      ⵠΔ[976] = ⵠΔ[975];
      ⵠΔ[978] = [];
      ⵠΔ[978][0] = Ⲇᐃ.ⲆᐃᐃⵠΔⵠΔ;
      ⵠΔ[978][1] = Ⲇᐃ.ᐃᐃⵠⵠⵠᐃᐃ;
      ⵠΔ[978][2] = Ⲇᐃ.ⲆⵠΔⲆⲆⲆΔ;
      ⵠΔ[980] = ⵠΔ[978];
      ⵠΔ[979] = ⵠΔ[978];
      ⵠΔ[1158] = [];
      ⵠΔ[1158][0] = Ⲇᐃ.ⲆⵠⵠⲆⲆⵠΔ;
      ⵠΔ[1158][1] = Ⲇᐃ.ⲆⵠⵠⲆⲆⵠΔ;
      ⵠΔ[1158][2] = Ⲇᐃ.ⲆⵠⵠⲆⲆⵠΔ;
      ⵠΔ[1159] = ⵠΔ[1158];
      ⵠΔ[426] = [];
      ⵠΔ[426][0] = Ⲇᐃ.ᐃⵠᐃⵠⵠᐃᐃ;
      ⵠΔ[426][1] = Ⲇᐃ.ⲆᐃⲆΔΔⵠⵠ;
      ⵠΔ[426][2] = Ⲇᐃ.ⲆᐃΔⵠⲆᐃⲆ;
      ⵠΔ[427] = ⵠΔ[426];
      ⵠΔ[428] = ⵠΔ[426];
      ⵠΔ[1160] = [];
      ⵠΔ[1160][0] = Ⲇᐃ.ᐃᐃᐃᐃⵠⵠΔ;
      ⵠΔ[1160][1] = Ⲇᐃ.ᐃᐃᐃᐃⵠⵠΔ;
      ⵠΔ[1160][2] = Ⲇᐃ.ᐃᐃᐃᐃⵠⵠΔ;
      ⵠΔ[1161] = ⵠΔ[1160];
      ⵠΔ[1236] = [];
      ⵠΔ[1236][0] = Ⲇᐃ.ⵠⵠⲆᐃⲆⵠᐃᐃⵠ;
      ⵠΔ[1236][1] = Ⲇᐃ.ⵠⲆΔΔΔᐃᐃⲆⵠ;
      ⵠΔ[1236][2] = Ⲇᐃ.ⵠⵠⲆⵠⲆⲆⵠⲆⲆ;
      ⵠΔ[1235] = ⵠΔ[1236];
      ⵠΔ[1237] = ⵠΔ[1236];
      ⵠΔ[991] = [];
      ⵠΔ[991][0] = Ⲇᐃ.ⲆⲆΔⵠⲆᐃⲆ;
      ⵠΔ[991][1] = Ⲇᐃ.ᐃΔⲆΔΔⵠⲆ;
      ⵠΔ[991][2] = Ⲇᐃ.ⲆⲆⲆΔⲆⲆᐃ;
      ⵠΔ[990] = ⵠΔ[991];
      ⵠΔ[992] = ⵠΔ[991];
      ⵠΔ[994] = [];
      ⵠΔ[994][0] = Ⲇᐃ.ⵠⵠᐃⵠᐃⲆᐃ;
      ⵠΔ[994][1] = Ⲇᐃ.ᐃΔΔⲆⵠⲆᐃ;
      ⵠΔ[994][2] = Ⲇᐃ.ⲆⵠΔᐃᐃᐃⵠ;
      ⵠΔ[993] = ⵠΔ[994];
      ⵠΔ[995] = ⵠΔ[994];
      ⵠΔ[997] = [];
      ⵠΔ[997][0] = Ⲇᐃ.ⲆⲆΔⵠᐃᐃᐃ;
      ⵠΔ[997][1] = Ⲇᐃ.ᐃᐃⲆⲆᐃᐃΔ;
      ⵠΔ[997][2] = Ⲇᐃ.ⲆⵠΔΔΔⵠⲆ;
      ⵠΔ[996] = ⵠΔ[997];
      ⵠΔ[998] = ⵠΔ[997];
      ⵠΔ[1000] = [];
      ⵠΔ[1000][0] = Ⲇᐃ.ᐃⵠⲆⵠⲆⵠΔ;
      ⵠΔ[1000][1] = Ⲇᐃ.ΔⲆⵠΔⵠᐃⵠ;
      ⵠΔ[1000][2] = Ⲇᐃ.ᐃᐃᐃⲆᐃᐃⲆ;
      ⵠΔ[999] = ⵠΔ[1000];
      ⵠΔ[1001] = ⵠΔ[1000];
      ⵠΔ[1003] = [];
      ⵠΔ[1003][0] = Ⲇᐃ.ⵠΔⲆⵠᐃΔⵠ;
      ⵠΔ[1003][1] = Ⲇᐃ.ᐃᐃᐃᐃⲆⲆΔ;
      ⵠΔ[1003][2] = Ⲇᐃ.ⵠⲆⵠΔᐃΔⲆ;
      ⵠΔ[1002] = ⵠΔ[1003];
      ⵠΔ[1004] = ⵠΔ[1003];
      ⵠΔ[1006] = [];
      ⵠΔ[1006][0] = Ⲇᐃ.ⲆⵠⲆⲆⲆⲆᐃ;
      ⵠΔ[1006][1] = Ⲇᐃ.ᐃⲆⲆⲆⲆᐃⲆ;
      ⵠΔ[1006][2] = Ⲇᐃ.ⵠΔⵠⲆⲆᐃⲆ;
      ⵠΔ[1005] = ⵠΔ[1006];
      ⵠΔ[1007] = ⵠΔ[1006];
      ⵠΔ[1009] = [];
      ⵠΔ[1009][0] = Ⲇᐃ.ⲆⲆⵠⲆⲆΔᐃ;
      ⵠΔ[1009][1] = Ⲇᐃ.ⲆΔΔᐃᐃᐃⲆ;
      ⵠΔ[1009][2] = Ⲇᐃ.ⵠⵠᐃⲆⲆⵠᐃ;
      ⵠΔ[1008] = ⵠΔ[1009];
      ⵠΔ[1010] = ⵠΔ[1009];
      ⵠΔ[1012] = [];
      ⵠΔ[1012][0] = Ⲇᐃ.ᐃΔΔⲆᐃⲆΔ;
      ⵠΔ[1012][1] = Ⲇᐃ.ⵠⲆᐃⵠⵠⵠⲆ;
      ⵠΔ[1012][2] = Ⲇᐃ.ΔᐃⵠᐃⵠⲆⲆ;
      ⵠΔ[1011] = ⵠΔ[1012];
      ⵠΔ[1013] = ⵠΔ[1012];
      ⵠΔ[1015] = [];
      ⵠΔ[1015][0] = Ⲇᐃ.ⵠΔⵠᐃΔⵠΔ;
      ⵠΔ[1015][1] = Ⲇᐃ.ⵠᐃⲆⵠᐃⲆΔ;
      ⵠΔ[1015][2] = Ⲇᐃ.ⵠᐃⵠᐃⵠⵠᐃ;
      ⵠΔ[1014] = ⵠΔ[1015];
      ⵠΔ[1016] = ⵠΔ[1015];
      ⵠΔ[1035] = [];
      ⵠΔ[1035][0] = Ⲇᐃ.ⲆⵠΔΔⵠ;
      ⵠΔ[1035][1] = Ⲇᐃ.ⲆⵠΔΔⵠ;
      ⵠΔ[1035][2] = Ⲇᐃ.ⲆⵠΔΔⵠ;
      ⵠΔ[tr.ΔⲆⵠⲆⵠᐃⲆᐃⲆ] = ⵠΔ[1035];
      ⵠΔ[1036] = ⵠΔ[1035];
      ⵠΔ[1037] = [];
      ⵠΔ[1037][0] = Ⲇᐃ.ΔᐃᐃⲆⲆ;
      ⵠΔ[1037][1] = Ⲇᐃ.ΔᐃᐃⲆⲆ;
      ⵠΔ[1037][2] = Ⲇᐃ.ΔᐃᐃⲆⲆ;
      ⵠΔ[tr.ⵠⲆΔΔΔⲆⵠⵠᐃ] = ⵠΔ[1037];
      ⵠΔ[1038] = ⵠΔ[1037];
      ⵠΔ[1039] = [];
      ⵠΔ[1039][0] = Ⲇᐃ.ⲆΔⵠⲆΔ;
      ⵠΔ[1039][1] = Ⲇᐃ.ⲆΔⵠⲆΔ;
      ⵠΔ[1039][2] = Ⲇᐃ.ⲆΔⵠⲆΔ;
      ⵠΔ[tr.ⵠⵠⲆᐃᐃⵠⵠⲆⲆ] = ⵠΔ[1039];
      ⵠΔ[1040] = ⵠΔ[1039];
      ⵠΔ[1156] = [];
      ⵠΔ[1156][0] = Ⲇᐃ.ⲆΔⵠⵠⲆ;
      ⵠΔ[1156][1] = Ⲇᐃ.ⲆΔⵠⵠⲆ;
      ⵠΔ[1156][2] = Ⲇᐃ.ⲆΔⵠⵠⲆ;
      ⵠΔ[1157] = ⵠΔ[1156];
      ⵠΔ[1046] = [];
      ⵠΔ[1046][0] = Ⲇᐃ.ⵠᐃᐃΔⵠᐃΔ;
      ⵠΔ[1046][1] = Ⲇᐃ.ᐃⵠΔᐃΔⵠⲆ;
      ⵠΔ[1046][2] = Ⲇᐃ.ⲆᐃⲆⵠᐃΔᐃ;
      ⵠΔ[1048] = ⵠΔ[1046];
      ⵠΔ[1047] = ⵠΔ[1046];
      ⵠΔ[744] = [];
      ⵠΔ[744][0] = Ⲇᐃ.ⲆΔΔⲆΔⵠⲆ;
      ⵠΔ[744][1] = Ⲇᐃ.ⵠᐃⵠΔΔΔⵠ;
      ⵠΔ[744][2] = Ⲇᐃ.ΔⵠⵠΔᐃⵠⵠ;
      ⵠΔ[746] = ⵠΔ[744];
      ⵠΔ[745] = ⵠΔ[744];
      ⵠΔ[747] = [];
      ⵠΔ[747][0] = Ⲇᐃ.ᐃⲆⲆᐃΔⵠⵠ;
      ⵠΔ[747][1] = Ⲇᐃ.ⵠⲆⵠⵠΔⲆⲆ;
      ⵠΔ[747][2] = Ⲇᐃ.ᐃⵠΔⲆⵠⲆⲆ;
      ⵠΔ[749] = ⵠΔ[747];
      ⵠΔ[748] = ⵠΔ[747];
      ⵠΔ[1049] = [];
      ⵠΔ[1049][0] = Ⲇᐃ.ᐃᐃⲆᐃⲆᐃⵠ;
      ⵠΔ[1049][1] = Ⲇᐃ.ΔᐃΔⲆⵠⵠΔ;
      ⵠΔ[1049][2] = Ⲇᐃ.ⵠΔⵠⵠⲆⲆᐃ;
      ⵠΔ[1051] = ⵠΔ[1049];
      ⵠΔ[1050] = ⵠΔ[1049];
      ⵠΔ[1189] = [];
      ⵠΔ[1189][0] = Ⲇᐃ.ⲆⵠᐃⲆⵠΔⲆ;
      ⵠΔ[1189][1] = Ⲇᐃ.ⵠⲆΔⲆᐃⵠⵠ;
      ⵠΔ[1189][2] = Ⲇᐃ.ΔΔⵠⵠΔⲆⲆ;
      ⵠΔ[1191] = ⵠΔ[1189];
      ⵠΔ[1190] = ⵠΔ[1189];
      ⵠΔ[1110] = [];
      ⵠΔ[1110][0] = Ⲇᐃ.ⵠᐃΔⲆᐃΔᐃ;
      ⵠΔ[1110][1] = Ⲇᐃ.ΔᐃᐃᐃᐃⲆⲆ;
      ⵠΔ[1110][2] = Ⲇᐃ.ᐃⵠΔⲆⲆⵠᐃ;
      ⵠΔ[1112] = ⵠΔ[1110];
      ⵠΔ[1111] = ⵠΔ[1110];
      ⵠΔ[1131] = [];
      ⵠΔ[1131][0] = Ⲇᐃ.ᐃΔᐃⲆⵠⵠⵠⵠⵠ;
      ⵠΔ[1131][1] = Ⲇᐃ.ⲆⵠⵠᐃᐃΔⵠⲆⵠ;
      ⵠΔ[1131][2] = Ⲇᐃ.ⵠΔΔᐃᐃΔᐃΔⲆ;
      ⵠΔ[1133] = ⵠΔ[1131];
      ⵠΔ[1132] = ⵠΔ[1131];
      ⵠΔ[1137] = [];
      ⵠΔ[1137][0] = Ⲇᐃ.ᐃⲆⵠⵠΔΔᐃ;
      ⵠΔ[1137][1] = Ⲇᐃ.ⵠᐃⲆΔᐃⵠᐃ;
      ⵠΔ[1137][2] = Ⲇᐃ.ᐃΔᐃⲆΔᐃⵠ;
      ⵠΔ[1138] = ⵠΔ[1137];
      ⵠΔ[1139] = ⵠΔ[1137];
      ⵠΔ[1140] = [];
      ⵠΔ[1140][0] = Ⲇᐃ.ⵠΔⲆⲆⵠᐃᐃ;
      ⵠΔ[1140][1] = Ⲇᐃ.ᐃΔᐃᐃⵠᐃⵠ;
      ⵠΔ[1140][2] = Ⲇᐃ.ᐃⵠⵠⲆⵠⲆⲆ;
      ⵠΔ[1141] = ⵠΔ[1140];
      ⵠΔ[1142] = ⵠΔ[1140];
      ⵠΔ[1117] = [];
      ⵠΔ[1117][0] = Ⲇᐃ.ΔⵠⲆΔⲆᐃⵠ;
      ⵠΔ[1117][1] = Ⲇᐃ.ⲆΔᐃⲆΔΔⲆ;
      ⵠΔ[1117][2] = Ⲇᐃ.ᐃΔΔⵠΔᐃⵠ;
      ⵠΔ[1116] = ⵠΔ[1117];
      ⵠΔ[1118] = ⵠΔ[1117];
      ⵠΔ[1080] = [];
      ⵠΔ[1080][0] = Ⲇᐃ.ΔⵠⵠΔⲆⵠⲆ;
      ⵠΔ[1080][1] = Ⲇᐃ.ᐃΔⲆᐃᐃΔᐃ;
      ⵠΔ[1080][2] = Ⲇᐃ.ⵠⲆᐃᐃᐃᐃΔ;
      ⵠΔ[1082] = ⵠΔ[1080];
      ⵠΔ[1081] = ⵠΔ[1080];
      ⵠΔ[1224] = [];
      ⵠΔ[1224][0] = Ⲇᐃ.ΔᐃΔⲆᐃΔΔ;
      ⵠΔ[1224][1] = Ⲇᐃ.ⲆⲆⵠⵠᐃⵠⲆ;
      ⵠΔ[1224][2] = Ⲇᐃ.ᐃΔΔⲆⲆΔⵠ;
      ⵠΔ[1226] = ⵠΔ[1224];
      ⵠΔ[1225] = ⵠΔ[1224];
      ⵠΔ[1095] = [];
      ⵠΔ[1095][0] = Ⲇᐃ.ΔΔⵠⵠΔΔΔ;
      ⵠΔ[1095][1] = Ⲇᐃ.ⲆᐃΔᐃΔⵠⵠ;
      ⵠΔ[1095][2] = Ⲇᐃ.ᐃᐃΔⵠᐃᐃⵠ;
      ⵠΔ[1097] = ⵠΔ[1095];
      ⵠΔ[1096] = ⵠΔ[1095];
      ⵠΔ[717] = Qd(1, [{
        f: rm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: pm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[718] = ⵠΔ[717];
      ⵠΔ[408] = Qd(1, [{
        f: Au,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[409] = ⵠΔ[408];
      ⵠΔ[907] = Qd(1, [{
        f: vc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[909] = ⵠΔ[907];
      ⵠΔ[908] = ⵠΔ[907];
      ⵠΔ[197] = Qd(1, [{
        f: ic,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[906] = ⵠΔ[197];
      ⵠΔ[901] = Qd(1, [{
        f: tc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[900] = ⵠΔ[901];
      ⵠΔ[899] = ⵠΔ[901];
      ⵠΔ[401] = Qd(1, [{
        f: nc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[402] = ⵠΔ[401];
      ⵠΔ[395] = Qd(1, [{
        f: sc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[396] = ⵠΔ[395];
      ⵠΔ[398] = Qd(1, [{
        f: ec,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[399] = ⵠΔ[398];
      ⵠΔ[404] = Qd(1, [{
        f: dc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[405] = ⵠΔ[404];
      ⵠΔ[472] = Qd(1, [{
        f: oc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[473] = ⵠΔ[472];
      ⵠΔ[874] = Qd(1, [{
        f: ac,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[876] = ⵠΔ[874];
      ⵠΔ[875] = ⵠΔ[874];
      ⵠΔ[477] = Qd(1, [{
        f: Bc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[478] = ⵠΔ[477];
      ⵠΔ[709] = Qd(1, [{
        f: Zm,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[711] = ⵠΔ[709];
      ⵠΔ[550] = Qd(1, [{
        f: Cm,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[551] = ⵠΔ[550];
      ⵠΔ[480] = Qd(1, [{
        f: Bc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[481] = ⵠΔ[480];
      ⵠΔ[483] = Qd(1, [{
        f: Bc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[484] = ⵠΔ[483];
      ⵠΔ[486] = Qd(1, [{
        f: Bc,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[487] = ⵠΔ[486];
      ⵠΔ[489] = [];
      ⵠΔ[489][0] = Ⲇᐃ.ᐃⵠᐃΔΔⲆΔ;
      ⵠΔ[489][1] = Ⲇᐃ.ᐃⵠⲆΔᐃᐃⲆ;
      ⵠΔ[489][2] = Ⲇᐃ.ⵠⲆⵠΔΔΔⲆ;
      ⵠΔ[491] = ⵠΔ[489];
      ⵠΔ[490] = ⵠΔ[489];
      ⵠΔ[1195] = [];
      ⵠΔ[1195][0] = Ⲇᐃ.ᐃⵠᐃⵠᐃⲆⲆ;
      ⵠΔ[1195][1] = Ⲇᐃ.ΔᐃⲆⲆᐃⲆΔ;
      ⵠΔ[1195][2] = Ⲇᐃ.ᐃᐃΔᐃΔᐃⲆ;
      ⵠΔ[1197] = ⵠΔ[1195];
      ⵠΔ[1196] = ⵠΔ[1195];
      ⵠΔ[1199] = [];
      ⵠΔ[1199][0] = Ⲇᐃ.ΔⲆΔᐃⵠⵠⲆ;
      ⵠΔ[1199][1] = Ⲇᐃ.ⵠᐃᐃΔⲆⲆᐃ;
      ⵠΔ[1199][2] = Ⲇᐃ.ⲆⲆⵠⵠⵠⲆⵠ;
      ⵠΔ[1201] = ⵠΔ[1199];
      ⵠΔ[1200] = ⵠΔ[1199];
      ⵠΔ[1203] = [];
      ⵠΔ[1203][0] = Ⲇᐃ.ΔΔΔⲆΔⵠⵠ;
      ⵠΔ[1203][1] = Ⲇᐃ.ΔᐃᐃΔⲆΔΔ;
      ⵠΔ[1203][2] = Ⲇᐃ.ⵠᐃⲆⵠⲆⵠⵠ;
      ⵠΔ[1205] = ⵠΔ[1203];
      ⵠΔ[1204] = ⵠΔ[1203];
      ⵠΔ[1207] = [];
      ⵠΔ[1207][0] = Ⲇᐃ.ⵠⵠΔᐃⵠⲆⵠ;
      ⵠΔ[1207][1] = Ⲇᐃ.ⲆⲆΔⵠⲆᐃⵠ;
      ⵠΔ[1207][2] = Ⲇᐃ.ΔⲆΔⲆⵠⵠⵠ;
      ⵠΔ[1209] = ⵠΔ[1207];
      ⵠΔ[1208] = ⵠΔ[1207];
      ⵠΔ[1211] = [];
      ⵠΔ[1211][0] = Ⲇᐃ.ⲆⵠⲆⲆᐃⲆΔ;
      ⵠΔ[1211][1] = Ⲇᐃ.ⵠΔΔᐃⲆᐃⵠ;
      ⵠΔ[1211][2] = Ⲇᐃ.ⵠᐃⲆⵠΔⵠⲆ;
      ⵠΔ[1213] = ⵠΔ[1211];
      ⵠΔ[1212] = ⵠΔ[1211];
      ⵠΔ[1215] = [];
      ⵠΔ[1215][0] = Ⲇᐃ.ⵠΔΔΔᐃⵠⲆ;
      ⵠΔ[1215][1] = Ⲇᐃ.ⲆΔⲆΔᐃⲆⵠ;
      ⵠΔ[1215][2] = Ⲇᐃ.ᐃᐃΔᐃᐃΔᐃ;
      ⵠΔ[1217] = ⵠΔ[1215];
      ⵠΔ[1216] = ⵠΔ[1215];
      ⵠΔ[518] = Qd(1, [{
        f: mm,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[519] = ⵠΔ[518];
      ⵠΔ[532] = Qd(1, [{
        f: gm,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[533] = ⵠΔ[532];
      ⵠΔ[521] = Qd(1, [{
        f: km,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ⵠΔ[523] = Qd(1, [{
        f: km,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ⵠΔ[529] = Qd(1, [{
        f: Dm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: Qm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: Bm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[530] = ⵠΔ[529];
      ⵠΔ[553] = Qd(1, [{
        f: Tm,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[555] = ⵠΔ[553];
      ⵠΔ[541] = Qd(1, [{
        f: ym,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[542] = ⵠΔ[541];
      ⵠΔ[779] = Qd(1, [{
        f: Xm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[780] = ⵠΔ[779];
      ⵠΔ[767] = Qd(1, [{
        f: hp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[768] = ⵠΔ[767];
      ⵠΔ[776] = Qd(1, [{
        f: tp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[777] = ⵠΔ[776];
      ⵠΔ[771] = Qd(1, [{
        f: tp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[772] = ⵠΔ[771];
      ⵠΔ[756] = Qd(1, [{
        f: Um,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[758] = ⵠΔ[756];
      ⵠΔ[760] = Qd(1, [{
        f: Um,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[762] = ⵠΔ[760];
      ⵠΔ[764] = Qd(1, [{
        f: Um,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[770] = ⵠΔ[764];
      ⵠΔ[910] = Qd(1, [{
        f: mc,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[912] = ⵠΔ[910];
      ⵠΔ[911] = ⵠΔ[910];
      ⵠΔ[732] = Qd(1, [{
        f: Wc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[734] = ⵠΔ[732];
      ⵠΔ[563] = Qd(1, [{
        f: um,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[564] = ⵠΔ[563];
      ⵠΔ[751] = Qd(1, [{
        f: Mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[252] = Qd(1, [{
        f: Fm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[753] = Qd(1, [{
        f: Mm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[253] = Qd(1, [{
        f: Fm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[176] = Qd(1, [{
        f: vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[177] = Qd(1, [{
        f: vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[175] = Qd(1, [{
        f: vm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[616] = Qd(1, [{
        f: np,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[618] = ⵠΔ[616];
      ⵠΔ[699] = Qd(1, [{
        f: np,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[700] = ⵠΔ[699];
      ⵠΔ[702] = Qd(1, [{
        f: np,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[704] = ⵠΔ[702];
      ⵠΔ[705] = Qd(1, [{
        f: np,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[706] = ⵠΔ[705];
      ⵠΔ[420] = Qd(1, [{
        f: Pm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[421] = ⵠΔ[420];
      ⵠΔ[826] = Qd(1, [{
        f: dm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[827] = ⵠΔ[826];
      ⵠΔ[429] = Qd(1, [{
        f: fm,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[430] = ⵠΔ[429];
      ⵠΔ[432] = Qd(1, [{
        f: Sm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[433] = ⵠΔ[432];
      ⵠΔ[435] = Qd(1, [{
        f: sm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[436] = ⵠΔ[435];
      ⵠΔ[438] = Qd(1, [{
        f: lm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[439] = ⵠΔ[438];
      ⵠΔ[441] = Qd(1, [{
        f: om,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[442] = ⵠΔ[441];
      ⵠΔ[418] = Qd(1, [{
        f: jc,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[609] = Qd(1, [{
        f: Am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[142] = Qd(1, [{
        f: qm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[140] = Qd(1, [{
        f: Am,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[180] = Qd(1, [{
        f: gp,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[181] = Qd(1, [{
        f: Nm,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[784] = ⵠΔ[180];
      ⵠΔ[785] = ⵠΔ[181];
      ⵠΔ[789] = Qd(1, [{
        f: zm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[791] = ⵠΔ[789];
      ⵠΔ[613] = Qd(1, [{
        f: lp,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[612] = Qd(1, [{
        f: ap,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[715] = ⵠΔ[613];
      ⵠΔ[611] = ⵠΔ[612];
      ⵠΔ[634] = Qd(1, [{
        f: Pt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[635] = ⵠΔ[634];
      ⵠΔ[200] = Qd(1, [{
        f: Wt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[866] = Qd(1, [{
        f: Ut,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[143] = Qd(1, [{
        f: Im,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[690] = ⵠΔ[143];
      ⵠΔ[662] = Qd(1, [{
        f: ou,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[664] = Qd(1, [{
        f: mu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[666] = ⵠΔ[664];
      ⵠΔ[649] = Qd(1, [{
        f: lu,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[650] = ⵠΔ[649];
      ⵠΔ[674] = Qd(1, [{
        f: Jd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[646] = Qd(1, [{
        f: ju,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ⵠΔ[647] = ⵠΔ[646];
      ⵠΔ[685] = Qd(1, [{
        f: ip,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[684] = ⵠΔ[685];
      ⵠΔ[870] = Qd(1, [{
        f: Hb,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[871] = ⵠΔ[870];
      ⵠΔ[605] = Qd(1, [{
        f: Em,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[604] = ⵠΔ[605];
      ⵠΔ[842] = Qd(1, [{
        f: Xb,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[843] = ⵠΔ[842];
      ⵠΔ[652] = Qd(1, [{
        f: sp,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ⵠΔ[654] = ⵠΔ[652];
      ⵠΔ[626] = Qd(1, [{
        f: sp,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[627] = ⵠΔ[626];
      ⵠΔ[629] = Qd(1, [{
        f: Hm,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ⵠΔ[196] = Qd(1, [{
        f: Gt,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[898] = ⵠΔ[196];
      ⵠΔ[659] = Qd(1, [{
        f: iu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[660] = ⵠΔ[659];
      ⵠΔ[145] = Qd(1, [{
        f: kd,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ⵠΔ[730] = ⵠΔ[145];
      ⵠΔ[566] = [];
      ⵠΔ[566][0] = Ⲇᐃ.ΔᐃⲆΔΔⵠⲆ;
      ⵠΔ[566][1] = Ⲇᐃ.ⲆⵠⲆⲆⵠΔⲆ;
      ⵠΔ[566][2] = Ⲇᐃ.ⲆⲆΔΔΔⲆⲆ;
      ⵠΔ[567] = ⵠΔ[566];
      ⵠΔ[568] = ⵠΔ[566];
      ⵠΔ[877] = [];
      ⵠΔ[877][0] = Ⲇᐃ.ⲆⵠᐃᐃⲆᐃΔ;
      ⵠΔ[877][1] = Ⲇᐃ.ᐃᐃΔΔⲆⲆΔ;
      ⵠΔ[877][2] = Ⲇᐃ.ᐃΔΔⲆᐃⵠΔ;
      ⵠΔ[879] = ⵠΔ[877];
      ⵠΔ[878] = ⵠΔ[877];
      ⵠΔ[933] = ⵠΔ[932];
      ⵠΔ[934] = ⵠΔ[932];
      ⵠΔ[932] = [];
      ⵠΔ[932][0] = Ⲇᐃ.ᐃⲆⲆᐃᐃⵠⵠ;
      ⵠΔ[932][1] = Ⲇᐃ.ⵠᐃΔⵠΔᐃⵠ;
      ⵠΔ[932][2] = Ⲇᐃ.ΔᐃᐃΔᐃΔΔ;
      ⵠΔ[933] = ⵠΔ[932];
      ⵠΔ[934] = ⵠΔ[932];
      ⵠΔ[943] = [];
      ⵠΔ[943][0] = Ⲇᐃ.ⵠⲆΔᐃᐃΔᐃ;
      ⵠΔ[943][1] = Ⲇᐃ.ᐃΔⵠⲆᐃΔΔ;
      ⵠΔ[943][2] = Ⲇᐃ.ΔᐃⵠΔᐃᐃⵠ;
      ⵠΔ[944] = ⵠΔ[943];
      ⵠΔ[945] = ⵠΔ[943];
      ⵠΔ[921] = [];
      ⵠΔ[921][0] = Ⲇᐃ.ΔΔⵠⲆⵠⲆⵠ;
      ⵠΔ[921][1] = Ⲇᐃ.ⵠⵠⵠΔΔᐃⲆ;
      ⵠΔ[921][2] = Ⲇᐃ.ⵠΔⲆᐃᐃΔᐃ;
      ⵠΔ[922] = ⵠΔ[921];
      ⵠΔ[923] = ⵠΔ[921];
      ⵠΔ[925] = [];
      ⵠΔ[925][0] = Ⲇᐃ.ᐃⲆᐃⵠⲆⵠᐃ;
      ⵠΔ[925][1] = Ⲇᐃ.ᐃⵠⵠΔⲆΔⲆ;
      ⵠΔ[925][2] = Ⲇᐃ.ᐃΔΔΔᐃⵠⲆ;
      ⵠΔ[926] = ⵠΔ[925];
      ⵠΔ[927] = ⵠΔ[925];
      ⵠΔ[929] = [];
      ⵠΔ[929][0] = Ⲇᐃ.ΔⵠᐃᐃⲆᐃⲆ;
      ⵠΔ[929][1] = Ⲇᐃ.ᐃᐃΔⲆⵠᐃⲆ;
      ⵠΔ[929][2] = Ⲇᐃ.ᐃⲆΔⲆΔΔᐃ;
      ⵠΔ[930] = ⵠΔ[929];
      ⵠΔ[931] = ⵠΔ[929];
      ⵠΔ[946] = [];
      ⵠΔ[946][0] = Ⲇᐃ.ᐃⲆⵠⵠⵠᐃⵠ;
      ⵠΔ[946][1] = Ⲇᐃ.ᐃⲆᐃΔΔⵠⵠ;
      ⵠΔ[946][2] = Ⲇᐃ.ⵠⵠΔᐃⲆⲆΔ;
      ⵠΔ[947] = ⵠΔ[946];
      ⵠΔ[948] = ⵠΔ[946];
      ⵠΔ[735] = [];
      ⵠΔ[735][0] = Ⲇᐃ.ΔⲆᐃⵠⲆⲆΔ;
      ⵠΔ[735][1] = Ⲇᐃ.ⲆⵠⲆⲆΔᐃⲆ;
      ⵠΔ[735][2] = Ⲇᐃ.ᐃⲆⵠᐃᐃᐃⲆ;
      ⵠΔ[737] = ⵠΔ[735];
      ⵠΔ[736] = ⵠΔ[735];
      ⵠΔ[1164] = [];
      ⵠΔ[1164][0] = Ⲇᐃ.ᐃᐃΔᐃⵠΔⲆ;
      ⵠΔ[1164][1] = Ⲇᐃ.ᐃᐃΔⵠΔΔⲆ;
      ⵠΔ[1164][2] = Ⲇᐃ.ΔᐃⵠᐃⵠⲆⵠ;
      ⵠΔ[tr.ᐃⵠᐃⲆᐃⲆⲆᐃᐃ] = ⵠΔ[1164];
      ⵠΔ[1165] = ⵠΔ[1164];
      ⵠΔ[738] = [];
      ⵠΔ[738][0] = Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ;
      ⵠΔ[738][1] = Ⲇᐃ.ⵠⲆᐃᐃⵠⵠⲆ;
      ⵠΔ[738][2] = Ⲇᐃ.ΔⲆΔᐃΔΔΔ;
      ⵠΔ[740] = ⵠΔ[738];
      ⵠΔ[739] = ⵠΔ[738];
      ⵠΔ[741] = [];
      ⵠΔ[741][0] = Ⲇᐃ.ⲆΔᐃΔⵠⵠΔ;
      ⵠΔ[741][1] = Ⲇᐃ.ΔΔⵠⵠΔᐃⵠ;
      ⵠΔ[741][2] = Ⲇᐃ.ΔᐃΔⵠΔΔⲆ;
      ⵠΔ[743] = ⵠΔ[741];
      ⵠΔ[742] = ⵠΔ[741];
      ⵠΔ[938] = [];
      ⵠΔ[938][0] = Ⲇᐃ.ⲆⲆΔᐃᐃⲆⵠ;
      ⵠΔ[938][1] = Ⲇᐃ.ΔΔⲆᐃⲆⵠⲆ;
      ⵠΔ[938][2] = Ⲇᐃ.ᐃᐃᐃⵠⲆⵠᐃ;
      ⵠΔ[939] = ⵠΔ[938];
      ⵠΔ[936] = [];
      ⵠΔ[936][0] = Ⲇᐃ.ᐃΔᐃⲆⲆᐃᐃ;
      ⵠΔ[936][1] = Ⲇᐃ.ⲆⲆΔⵠᐃⲆᐃ;
      ⵠΔ[936][2] = Ⲇᐃ.ΔⲆΔⲆΔᐃⲆ;
      ⵠΔ[937] = ⵠΔ[936];
      ⵠΔ[617] = ⵠΔ[616];
      ⵠΔ[701] = ⵠΔ[699];
      ⵠΔ[703] = ⵠΔ[702];
      ⵠΔ[707] = ⵠΔ[705];
      ⵠΔ[348] = ⵠΔ[311];
      ⵠΔ[633] = ⵠΔ[631];
      ⵠΔ[645] = ⵠΔ[644];
      ⵠΔ[640] = ⵠΔ[639];
      ⵠΔ[273] = ⵠΔ[309];
      ⵠΔ[590] = ⵠΔ[252];
      ⵠΔ[752] = ⵠΔ[751];
      ⵠΔ[591] = ⵠΔ[253];
      ⵠΔ[754] = ⵠΔ[753];
      ⵠΔ[276] = ⵠΔ[328];
      ⵠΔ[863] = ⵠΔ[865];
      ⵠΔ[862] = ⵠΔ[860];
      ⵠΔ[831] = ⵠΔ[829];
      ⵠΔ[340] = ⵠΔ[261];
      ⵠΔ[596] = ⵠΔ[594];
      ⵠΔ[345] = ⵠΔ[292];
      ⵠΔ[346] = ⵠΔ[293];
      ⵠΔ[457] = ⵠΔ[455];
      ⵠΔ[274] = ⵠΔ[313];
      ⵠΔ[341] = ⵠΔ[312];
      ⵠΔ[272] = ⵠΔ[258];
      ⵠΔ[344] = ⵠΔ[296];
      ⵠΔ[459] = ⵠΔ[458];
      ⵠΔ[342] = ⵠΔ[315];
      ⵠΔ[270] = ⵠΔ[297];
      ⵠΔ[271] = ⵠΔ[298];
      ⵠΔ[343] = ⵠΔ[316];
      ⵠΔ[269] = ⵠΔ[277];
      ⵠΔ[358] = ⵠΔ[310];
      ⵠΔ[354] = ⵠΔ[329];
      ⵠΔ[356] = ⵠΔ[331];
      ⵠΔ[355] = ⵠΔ[330];
      ⵠΔ[494] = ⵠΔ[492];
      ⵠΔ[349] = ⵠΔ[317];
      ⵠΔ[350] = ⵠΔ[319];
      ⵠΔ[275] = ⵠΔ[300];
      ⵠΔ[351] = ⵠΔ[323];
      ⵠΔ[353] = ⵠΔ[305];
      ⵠΔ[514] = ⵠΔ[513];
      ⵠΔ[352] = ⵠΔ[303];
      ⵠΔ[520] = ⵠΔ[518];
      ⵠΔ[534] = ⵠΔ[532];
      ⵠΔ[531] = ⵠΔ[529];
      ⵠΔ[522] = ⵠΔ[521];
      ⵠΔ[524] = ⵠΔ[523];
      ⵠΔ[565] = ⵠΔ[563];
      ⵠΔ[554] = ⵠΔ[553];
      ⵠΔ[357] = ⵠΔ[335];
      ⵠΔ[359] = ⵠΔ[337];
      ⵠΔ[339] = Oa(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        Lb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        Rb(e, c[0], c[1], 4);
        e.save();
        Lb(e, a * 30, a * 115, a * 60, a * 5, a * 15);
        e.restore();
        Rb(e, c[2], c[3], 4);
        e.save();
        Lb(e, a * 50, a * 117, a * 20, a * 10, a * 15);
        e.restore();
        Rb(e, c[2]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ⵠΔ[366] = Qd(0.5, [{
        f: Cc,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ⵠΔ[382] = ⵠΔ[361];
      ⵠΔ[383] = ⵠΔ[362];
      ⵠΔ[384] = ⵠΔ[364];
      ⵠΔ[497] = ⵠΔ[495];
      ⵠΔ[385] = ⵠΔ[392];
      ⵠΔ[774] = ⵠΔ[178];
      ⵠΔ[775] = ⵠΔ[179];
      ⵠΔ[386] = ⵠΔ[368];
      ⵠΔ[625] = ⵠΔ[624];
      ⵠΔ[394] = ⵠΔ[393];
      ⵠΔ[1163] = ⵠΔ[1162];
      ⵠΔ[506] = ⵠΔ[505];
      ⵠΔ[387] = ⵠΔ[369];
      ⵠΔ[504] = ⵠΔ[502];
      ⵠΔ[388] = ⵠΔ[372];
      ⵠΔ[389] = ⵠΔ[375];
      ⵠΔ[390] = ⵠΔ[378];
      ⵠΔ[501] = ⵠΔ[499];
      ⵠΔ[391] = ⵠΔ[381];
      ⵠΔ[403] = ⵠΔ[401];
      ⵠΔ[397] = ⵠΔ[395];
      ⵠΔ[400] = ⵠΔ[398];
      ⵠΔ[406] = ⵠΔ[404];
      ⵠΔ[474] = ⵠΔ[472];
      ⵠΔ[875] = ⵠΔ[874];
      ⵠΔ[552] = ⵠΔ[550];
      ⵠΔ[710] = ⵠΔ[709];
      ⵠΔ[479] = ⵠΔ[477];
      ⵠΔ[482] = ⵠΔ[480];
      ⵠΔ[485] = ⵠΔ[483];
      ⵠΔ[488] = ⵠΔ[486];
      ⵠΔ[410] = ⵠΔ[408];
      ⵠΔ[719] = ⵠΔ[717];
      ⵠΔ[422] = ⵠΔ[420];
      ⵠΔ[431] = ⵠΔ[429];
      ⵠΔ[434] = ⵠΔ[432];
      ⵠΔ[437] = ⵠΔ[435];
      ⵠΔ[543] = ⵠΔ[541];
      ⵠΔ[733] = ⵠΔ[732];
      ⵠΔ[440] = ⵠΔ[438];
      ⵠΔ[443] = ⵠΔ[441];
      ⵠΔ[446] = ⵠΔ[418];
      ⵠΔ[606] = ⵠΔ[605];
      ⵠΔ[844] = ⵠΔ[842];
      ⵠΔ[683] = ⵠΔ[685];
      ⵠΔ[610] = ⵠΔ[609];
      ⵠΔ[689] = ⵠΔ[143];
      ⵠΔ[686] = ⵠΔ[142];
      ⵠΔ[682] = ⵠΔ[140];
      ⵠΔ[615] = ⵠΔ[613];
      ⵠΔ[614] = ⵠΔ[612];
      ⵠΔ[628] = ⵠΔ[626];
      ⵠΔ[630] = ⵠΔ[629];
      ⵠΔ[636] = ⵠΔ[634];
      ⵠΔ[868] = ⵠΔ[200];
      ⵠΔ[867] = ⵠΔ[866];
      ⵠΔ[648] = ⵠΔ[646];
      ⵠΔ[651] = ⵠΔ[649];
      ⵠΔ[653] = ⵠΔ[652];
      ⵠΔ[661] = ⵠΔ[659];
      ⵠΔ[898] = ⵠΔ[196];
      ⵠΔ[663] = ⵠΔ[662];
      ⵠΔ[665] = ⵠΔ[664];
      ⵠΔ[675] = ⵠΔ[674];
      ⵠΔ[731] = ⵠΔ[145];
      ⵠΔ[757] = ⵠΔ[756];
      ⵠΔ[759] = ⵠΔ[176];
      ⵠΔ[761] = ⵠΔ[760];
      ⵠΔ[763] = ⵠΔ[177];
      ⵠΔ[765] = ⵠΔ[764];
      ⵠΔ[766] = ⵠΔ[175];
      ⵠΔ[769] = ⵠΔ[767];
      ⵠΔ[773] = ⵠΔ[771];
      ⵠΔ[778] = ⵠΔ[776];
      ⵠΔ[781] = ⵠΔ[779];
      ⵠΔ[787] = ⵠΔ[181];
      ⵠΔ[786] = ⵠΔ[180];
      ⵠΔ[790] = ⵠΔ[789];
      ⵠΔ[801] = ⵠΔ[800];
      ⵠΔ[810] = ⵠΔ[808];
      ⵠΔ[836] = ⵠΔ[834];
      ⵠΔ[847] = ⵠΔ[845];
      ⵠΔ[828] = ⵠΔ[826];
    })();
    ⵠΔ[540] = [];
    ⵠΔ[540][0] = [];
    ⵠΔ[540][1] = [];
    for (var a = 0; a < 5; a++) {
      ⵠΔ[540][0].push(Oa(hu(1, 4 + a, "#59B8CE")));
      ⵠΔ[540][1].push(Oa(hu(1, 4 + a, "#90DDD9")));
    }
    ⵠΔ[470] = [];
    ⵠΔ[470][0] = [];
    ⵠΔ[470][1] = [];
    for (a = 0; a < 5; a++) {
      ⵠΔ[470][0].push(Oa(hu(1, 4 + a, "#fff")));
      ⵠΔ[470][1].push(Oa(hu(1, 4 + a, "#fff")));
    }
    ⵠΔ[471] = [];
    ⵠΔ[471][0] = [];
    ⵠΔ[471][1] = [];
    for (a = 0; a < 5; a++) {
      ⵠΔ[471][0].push(Oa(hu(1, 6 + a, "#DDCD8A")));
      ⵠΔ[471][1].push(Oa(hu(1, 6 + a, "#155E57")));
    }
    ⵠΔ[942] = [];
    ⵠΔ[942][0] = [];
    ⵠΔ[942][1] = [];
    for (a = 0; a < 5; a++) {
      ⵠΔ[942][0].push(Oa(hu(1, 4 + a, "#353326")));
      ⵠΔ[942][1].push(Oa(hu(1, 4 + a, "#1D2526")));
    }
    ⵠΔ[201] = [];
    ⵠΔ[201][0] = Oa(Yb(1.5, 0, ["#ee71a9"]));
    ⵠΔ[201][1] = Oa(Yb(1.5, 0, ["#ee71a9"]));
    ⵠΔ[872] = [ⵠΔ[201]];
    ⵠΔ[872][1] = [];
    ⵠΔ[872][2] = [];
    ⵠΔ[872][3] = [];
    ⵠΔ[872][4] = [];
    ⵠΔ[872][1][0] = Oa(Yb(1.5, 0, ["#e2d63b"]));
    ⵠΔ[872][1][1] = Oa(Yb(1.5, 0, ["#e2d63b"]));
    ⵠΔ[872][2][0] = Oa(Yb(1.5, 0, ["#309cbd"]));
    ⵠΔ[872][2][1] = Oa(Yb(1.5, 0, ["#309cbd"]));
    ⵠΔ[872][3][0] = Oa(Yb(1.5, 0, ["#cd232d"]));
    ⵠΔ[872][3][1] = Oa(Yb(1.5, 0, ["#cd232d"]));
    ⵠΔ[872][4][0] = Oa(Yb(1.5, 0, ["#42b672"]));
    ⵠΔ[872][4][1] = Oa(Yb(1.5, 0, ["#42b672"]));
    if (ⲆᐃΔ.ΔΔⵠᐃⵠᐃΔ("cti", Ya.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Oa = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ⵠΔ[797] = Oa(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ⵠΔ[108] = [];
    ⵠΔ[108][0] = [];
    ⵠΔ[108][1] = [];
    ⵠΔ[108][0].push(Oa(St(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠΔ[108][0].push(Oa(St(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠΔ[108][0].push(Oa(St(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠΔ[108][1].push(Oa(St(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠΔ[108][1].push(Oa(St(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠΔ[108][1].push(Oa(St(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠΔ[111] = [];
    ⵠΔ[111][0] = [];
    ⵠΔ[111][1] = [];
    ⵠΔ[111][0].push(Oa(au(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠΔ[111][0].push(Oa(au(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠΔ[111][0].push(Oa(au(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠΔ[111][1].push(Oa(au(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠΔ[111][1].push(Oa(au(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠΔ[111][1].push(Oa(au(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠΔ[112] = [];
    ⵠΔ[112][0] = [];
    ⵠΔ[112][1] = [];
    ⵠΔ[112][0].push(Oa(eu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠΔ[112][0].push(Oa(eu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠΔ[112][0].push(Oa(eu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠΔ[112][1].push(Oa(eu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠΔ[112][1].push(Oa(eu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠΔ[112][1].push(Oa(eu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠΔ[239] = [];
    ⵠΔ[239][0] = Ⲇᐃ.ΔⵠⵠᐃᐃⲆΔ;
    ⵠΔ[239][1] = Ⲇᐃ.ⲆᐃⵠᐃⲆᐃⲆ;
    ⵠΔ[286] = [];
    ⵠΔ[286][0] = Oa(Ud(0.6, ["#0d1b1c"]));
    ⵠΔ[286][1] = Oa(Ud(0.6, ["#030d14"]));
    ⵠΔ[793] = [];
    ⵠΔ[793][0] = Oa(Hd(0.6, ["#2a2938", "#242330"]));
    ⵠΔ[793][1] = Oa(Hd(0.6, ["#1b1e30", "#161921"]));
    ⵠΔ[820] = [];
    ⵠΔ[820][0] = Oa($b(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ⵠΔ[820][1] = Oa($b(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ⵠΔ[821] = [];
    ⵠΔ[821][0] = Oa(td(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ⵠΔ[821][1] = Oa(td(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ⵠΔ[822] = [];
    ⵠΔ[822][0] = Oa(Gd(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ⵠΔ[822][1] = Oa(Gd(0.4, ["#030d14", "#11635e", "#02373e"]));
    ⵠΔ[823] = Oa(ed(0.6, ["#BB0000"]));
    ⵠΔ[824] = Oa(ed(0.6, ["#DBE71C"]));
    ⵠΔ[825] = Oa(ed(0.6, ["#00BB00"]));
    ⵠΔ[109] = [];
    ⵠΔ[109][0] = [];
    ⵠΔ[109][1] = [];
    ⵠΔ[109][0].push(Xd(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], zh, 0));
    ⵠΔ[109][0].push(Xd(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], ns, 0));
    ⵠΔ[109][0].push(Xd(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], mk, 0));
    ⵠΔ[109][0].push(Xd(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], jn, 0));
    ⵠΔ[109][0].push(Xd(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
    ⵠΔ[109][0].push(Xd(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], T, 0));
    ⵠΔ[109][1].push(Xd(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], Xa, 0));
    ⵠΔ[109][1].push(Xd(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], ag, 0));
    ⵠΔ[109][1].push(Xd(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
    ⵠΔ[109][1].push(Xd(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    ⵠΔ[109][1].push(Xd(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], zh, 0));
    ⵠΔ[109][1].push(Xd(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ⵠΔ[307] = [];
    ⵠΔ[307][0] = [];
    ⵠΔ[307][1] = [];
    ⵠΔ[307][0].push(Oa(Kd(Nd(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ⵠΔ[109][0][0])));
    ⵠΔ[307][0].push(Oa(Kd(Nd(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], hq), ⵠΔ[109][0][1])));
    ⵠΔ[307][1].push(Oa(Kd(Nd(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], _e), ⵠΔ[109][1][0])));
    ⵠΔ[307][1].push(Oa(Kd(Nd(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ⵠΔ[109][1][1])));
    ⵠΔ[307][0].push(Oa(Kd(Nd(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], hh), ⵠΔ[109][0][2])));
    ⵠΔ[307][0].push(Oa(Kd(Nd(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], ag), ⵠΔ[109][0][2])));
    ⵠΔ[307][1].push(Oa(Kd(Nd(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ⵠΔ[109][1][2])));
    ⵠΔ[307][1].push(Oa(Kd(Nd(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), ⵠΔ[109][1][3])));
    ⵠΔ[109][0][5] = Oa(ⵠΔ[109][0][5]);
    ⵠΔ[109][0][4] = Oa(ⵠΔ[109][0][4]);
    ⵠΔ[109][0][3] = Oa(ⵠΔ[109][0][3]);
    ⵠΔ[109][0][2] = Oa(ⵠΔ[109][0][2]);
    ⵠΔ[109][0][1] = Oa(ⵠΔ[109][0][1]);
    ⵠΔ[109][0][0] = Oa(ⵠΔ[109][0][0]);
    ⵠΔ[109][1][5] = Oa(ⵠΔ[109][1][5]);
    ⵠΔ[109][1][4] = Oa(ⵠΔ[109][1][4]);
    ⵠΔ[109][1][3] = Oa(ⵠΔ[109][1][3]);
    ⵠΔ[109][1][2] = Oa(ⵠΔ[109][1][2]);
    ⵠΔ[109][1][1] = Oa(ⵠΔ[109][1][1]);
    ⵠΔ[109][1][0] = Oa(ⵠΔ[109][1][0]);
    ⵠΔ[8] = [];
    ⵠΔ[8][0] = Oa(Qb(4, Vd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ⵠΔ[8][1] = Oa(Qb(4, Vd(0.75, ns, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ⵠΔ[1] = [];
    ⵠΔ[1][0] = Oa(Qb(4, Vd(0.75, jn, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⵠΔ[1][1] = Oa(Qb(4, Vd(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ⵠΔ[3] = [];
    ⵠΔ[3][0] = Oa(Qb(4, Vd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⵠΔ[3][1] = Oa(Qb(4, Vd(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ⵠΔ[4] = [];
    ⵠΔ[4][0] = Oa(Qb(4, Vd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⵠΔ[4][1] = Oa(Qb(4, Vd(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⵠΔ[31] = [];
    ⵠΔ[31][0] = Oa(Qb(4, Vd(0.75, Xg, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⵠΔ[31][1] = Oa(Qb(4, Vd(0.75, ns, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⵠΔ[9] = [];
    ⵠΔ[9][0] = Oa(Qb(3, At(0.17, _k, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ⵠΔ[9][1] = Oa(Qb(3, At(0.17, fs, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ⵠΔ[199] = [];
    ⵠΔ[199][0] = Oa(Qb(3, Qt(0.32, ag, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ⵠΔ[199][1] = Oa(Qb(3, Qt(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ⵠΔ[57] = [];
    ⵠΔ[57][0] = Oa(Qb(3, Dt(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ⵠΔ[57][1] = Oa(Qb(3, Dt(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ⵠΔ[0] = [];
    ⵠΔ[0][0] = Oa(Qb(3, Ct(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ⵠΔ[0][1] = Oa(Qb(3, Ct(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ⵠΔ[5] = [];
    ⵠΔ[5][0] = Oa(Qb(3, Kt(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ⵠΔ[5][1] = Oa(Qb(3, Kt(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ⵠΔ[6] = [];
    ⵠΔ[6][0] = Oa(Qb(3, Ot(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ⵠΔ[6][1] = Oa(Qb(3, Ot(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ⵠΔ[30] = [];
    ⵠΔ[30][0] = Oa(Qb(3, Nt(0.4, Jq, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ⵠΔ[30][1] = Oa(Qb(3, Nt(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ⵠΔ[285] = [];
    ⵠΔ[285][0] = [];
    ⵠΔ[285][1] = [];
    ⵠΔ[285][0].push(Oa(ku(0.9, 0, ["#0d4f35"], 0)));
    ⵠΔ[285][0].push(Oa(ku(0.9, 0, ["#0d4f35"], 1)));
    ⵠΔ[285][0].push(Oa(ku(0.9, 0, ["#0d4f35"], 2)));
    ⵠΔ[285][1].push(Oa(ku(0.9, 0, ["#053339"], 0)));
    ⵠΔ[285][1].push(Oa(ku(0.9, 0, ["#053339"], 1)));
    ⵠΔ[285][1].push(Oa(ku(0.9, 0, ["#053339"], 2)));
    ⵠΔ[285][0].push(Oa(cu(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ⵠΔ[285][0].push(Oa(cu(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ⵠΔ[285][1].push(Oa(cu(0.9, ["#052919", "#0a4738", "#06321f"])));
    ⵠΔ[285][1].push(Oa(cu(0.8, ["#052918", "#08491c", "#063417"])));
    ⵠΔ[183] = [];
    ⵠΔ[183][0] = Oa(Qb(Math.PI / 2, Lc(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ⵠΔ[183][1] = Oa(Qb(Math.PI / 2, Lc(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ⵠΔ[803] = [];
    ⵠΔ[803].push(Oa(Sc(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ⵠΔ[803].push(Oa(Sc(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ⵠΔ[803].push(Oa(Sc(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ⵠΔ[802] = [];
    ⵠΔ[802][0] = [];
    ⵠΔ[802][1] = [];
    ⵠΔ[802][0].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ⵠΔ[802][1].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ⵠΔ[802][0].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ⵠΔ[802][1].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ⵠΔ[802][0].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ⵠΔ[802][1].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ⵠΔ[802][0].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ⵠΔ[802][1].push(Oa(Qb(Math.PI / 2, Qc(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ⵠΔ[110] = [];
    ⵠΔ[110][0] = [Oa(fu(1.2, ns, ["#0e3022", "#0b8052", "#077b49"]))];
    ⵠΔ[110][1] = [Oa(fu(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
    ⵠΔ[623] = [];
    ⵠΔ[623][0] = Oa(fu(0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ⵠΔ[623][1] = Oa(fu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ⵠΔ[189] = [];
    ⵠΔ[189][0] = Oa(jm(0.5, fs, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ⵠΔ[189][1] = Oa(jm(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ⵠΔ[192] = [];
    ⵠΔ[192][0] = Oa(Ob(0.5, wn, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ⵠΔ[192][1] = Oa(Ob(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ⵠΔ[194] = [];
    ⵠΔ[194][0] = Oa(op(0.5, jn, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ⵠΔ[194][1] = Oa(op(0.5, hq, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ⵠΔ[287] = [];
    ⵠΔ[287][0] = Oa(fu(0.8, Jq, ["#1b170c", "#0b8052", "#077b49"]));
    ⵠΔ[287][1] = Oa(fu(0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ⵠΔ[813] = [];
    ⵠΔ[813][0] = Oa(jm(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ⵠΔ[813][1] = Oa(jm(0.5, ol, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ⵠΔ[839] = [];
    ⵠΔ[839][0] = Oa(Ob(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ⵠΔ[839][1] = Oa(Ob(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ⵠΔ[869] = [];
    ⵠΔ[869][0] = Oa(op(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ⵠΔ[869][1] = Oa(op(0.5, ag, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ⵠΔ[854] = [];
    ⵠΔ[854][0] = Oa(rp(0.45, Xg, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ⵠΔ[854][1] = Oa(rp(0.45, gr, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ⵠΔ[859] = Oa(rp(0.65, za, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ⵠΔ[294] = [];
    ⵠΔ[294][0] = Oa(Yt(1.4, 0, ["#ac222a", "#e6636a"]));
    ⵠΔ[294][1] = Oa(Yt(1.4, 0, ["#46195e", "#744188"]));
    ⵠΔ[288] = [];
    ⵠΔ[288][0] = Oa(Id(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ⵠΔ[288][1] = Oa(Id(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ⵠΔ[118] = [];
    ⵠΔ[118][0] = Oa(Sd(0.9, 0, ["#4d2d14", "#432516"]));
    ⵠΔ[118][1] = Oa(Sd(0.9, 0, ["#282404", "#0a0a01"]));
    ⵠΔ[113] = [];
    ⵠΔ[113][0] = Oa(Wd(0.9, 0, ["#4d2d14", "#432516"]));
    ⵠΔ[113][1] = Oa(Wd(0.9, 0, ["#282404", "#0a0a01"]));
    ⵠΔ[289] = [];
    ⵠΔ[289][0] = Oa(Od(0.9, 0, ["#efd435"]));
    ⵠΔ[289][1] = Oa(Od(0.9, 0, ["#fffabb"]));
    ⵠΔ[282] = [];
    ⵠΔ[282][0] = Oa(_d(0.9, 0, ["#efd435"]));
    ⵠΔ[282][1] = Oa(_d(0.9, 0, ["#fffabb"]));
    ⵠΔ[816] = [];
    ⵠΔ[816][0] = Oa(Od(0.9, 0, ["#efd435"]));
    ⵠΔ[816][1] = Oa(Od(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ⵠΔ[817] = [];
    ⵠΔ[817][0] = Oa(_d(0.9, 0, ["#efd435"]));
    ⵠΔ[817][1] = Oa(_d(0.9, 0, ["#ff5704"]));
    ⵠΔ[324] = Oa(ud(1, "#ffffff"));
    ⵠΔ[301] = Oa(ud(1.5, "#ffffff"));
    ⵠΔ[306] = Oa(Tt(1, "Your score:", 15, "#FFF"));
    ⵠΔ[655] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      _b(d, a * 119.5, a * 140.125, a * 19);
      Rb(d, Fl, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      Rb(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      Rb(d, Ds, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      Rb(d, Ig, b[3], a * 10);
      _b(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      Rb(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      Rb(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      Rb(d, undefined, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      Lb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      Rb(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      Lb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      Rb(d, b[9]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ⵠΔ[656] = Ⲇᐃ.ⵠⲆⵠΔⲆⵠⵠ;
    ⵠΔ[135] = [];
    ⵠΔ[135][0] = Oa(Ad(1.5, ns, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠΔ[135][1] = Oa(Ad(1.5, Wh, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠΔ[641] = [];
    ⵠΔ[641][0] = Oa(Bd(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠΔ[641][1] = Oa(Bd(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠΔ[642] = [];
    ⵠΔ[642][0] = Oa(Ld(1.5, ol, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠΔ[642][1] = Oa(Ld(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠΔ[134] = [];
    ⵠΔ[134][0] = Oa(xd(2.2, 0, ["#A89F67", "#9E8456"]));
    ⵠΔ[134][1] = Oa(xd(2.2, 0, ["#0B4049", "#08383D"]));
    ⵠΔ[638] = [];
    ⵠΔ[638][0] = Oa(xd(2.2, 0, ["#68622D", "#665329"]));
    ⵠΔ[638][1] = Oa(xd(2.2, 0, ["#0F3A24", "#083326"]));
    ⵠΔ[321] = [];
    ⵠΔ[321][0] = Oa(Vt(0.8, 0, ["#A89F67", "#9E8456"]));
    ⵠΔ[321][1] = Oa(Vt(0.8, 0, ["#15514F", "#0F3F3D"]));
    ⵠΔ[811] = [];
    ⵠΔ[811][0] = Oa(Vt(0.8, 0, ["#c67933", "#b17238"]));
    ⵠΔ[811][1] = Oa(Vt(0.8, 0, ["#043c37", "#032b23"]));
    ⵠΔ[984] = [];
    ⵠΔ[984][0] = Oa(Vt(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ⵠΔ[984][1] = Oa(Vt(0.8, 0, ["#032d29", "#044640"]));
    ⵠΔ[837] = [];
    ⵠΔ[837][0] = Oa(Vt(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ⵠΔ[837][1] = Oa(Vt(0.8, 0, ["#1c6161", "#07413f"]));
    ⵠΔ[848] = [];
    ⵠΔ[848][0] = Oa(Vt(0.8, 0, ["#328a56", "#449573"]));
    ⵠΔ[848][1] = Oa(Vt(0.8, 0, ["#043c37", "#032b23"]));
    ⵠΔ[952] = [];
    ⵠΔ[952][0] = Oa(Vt(0.8, 0, ["#c98e2f", "#a36b11"]));
    ⵠΔ[952][1] = Oa(Vt(0.8, 0, ["#043c37", "#032b23"]));
    ⵠΔ[962] = [];
    ⵠΔ[962][0] = Oa(Vt(0.8, 0, ["#b22419", "#99110e"]));
    ⵠΔ[962][1] = Oa(Vt(0.8, 0, ["#04323c", "#03222b"]));
    ⵠΔ[969] = [];
    ⵠΔ[969][0] = Oa(Vt(0.8, 0, ["#13a56d", "#098a58"]));
    ⵠΔ[969][1] = Oa(Vt(0.8, 0, ["#043c37", "#032b23"]));
    ⵠΔ[657] = Qd(1, [{
      f: xd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠΔ[723] = Qd(1, [{
      f: Wd,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠΔ[724] = Qd(1, [{
      f: Im,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠΔ[334] = Qd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠΔ[115] = [];
    ⵠΔ[115][0] = Oa(ad(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ⵠΔ[115][1] = Oa(ad(0.9, 0, ["#084442", "#125e5a"]));
    ⵠΔ[132] = [];
    ⵠΔ[132][0] = Oa(ad(0.9, 0, ["#9E8456", "#A89F67"]));
    ⵠΔ[132][1] = Oa(ad(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ⵠΔ[668] = [];
    ⵠΔ[668][0] = Oa(ad(0.9, 0, ["#665329", "#68622D"]));
    ⵠΔ[668][1] = Oa(ad(0.9, 0, ["#083326", "#0F3A24"]));
    ⵠΔ[188] = [];
    ⵠΔ[188][0] = Oa(ad(0.9, 0, ["#c67933", "#ec952d"]));
    ⵠΔ[188][1] = Oa(ad(0.9, 0, ["#0e6553", "#094437"]));
    ⵠΔ[210] = [];
    ⵠΔ[210][0] = Oa(ad(0.9, 0, ["#375809", "#4b770e"]));
    ⵠΔ[210][1] = Oa(ad(0.9, 0, ["#09542d", "#0d5d2f"]));
    ⵠΔ[985] = [];
    ⵠΔ[985][0] = Oa(ad(0.9, 0, ["#585809", "#72770e"]));
    ⵠΔ[985][1] = Oa(ad(0.9, 0, ["#295209", "#305d0d"]));
    ⵠΔ[191] = [];
    ⵠΔ[191][0] = Oa(ad(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ⵠΔ[191][1] = Oa(ad(0.9, 0, ["#126366", "#0d484b"]));
    ⵠΔ[193] = [];
    ⵠΔ[193][0] = Oa(ad(0.9, 0, ["#3f8662", "#30915d"]));
    ⵠΔ[193][1] = Oa(ad(0.9, 0, ["#0e6553", "#094437"]));
    ⵠΔ[812] = [];
    ⵠΔ[812][0] = Oa(ad(0.9, 0, ["#c79153", "#dfa868"]));
    ⵠΔ[812][1] = Oa(ad(0.9, 0, ["#073927", "#075040"]));
    ⵠΔ[838] = [];
    ⵠΔ[838][0] = Oa(ad(0.9, 0, ["#768b5b", "#819984"]));
    ⵠΔ[838][1] = Oa(ad(0.9, 0, ["#0c4540", "#0e5153"]));
    ⵠΔ[849] = [];
    ⵠΔ[849][0] = Oa(ad(0.9, 0, ["#567465", "#627c6e"]));
    ⵠΔ[849][1] = Oa(ad(0.9, 0, ["#073927", "#075040"]));
    ⵠΔ[204] = [];
    ⵠΔ[204][0] = Oa(ad(0.9, 0, ["#996b3a", "#bf956b"]));
    ⵠΔ[204][1] = Oa(ad(0.9, 0, ["#0e6553", "#094437"]));
    ⵠΔ[953] = [];
    ⵠΔ[953][0] = Oa(ad(0.9, 0, ["#7a634a", "#a68f77"]));
    ⵠΔ[953][1] = Oa(ad(0.9, 0, ["#1e4d43", "#113c32"]));
    ⵠΔ[206] = [];
    ⵠΔ[206][0] = Oa(ad(0.9, 0, ["#99403c", "#bc796c"]));
    ⵠΔ[206][1] = Oa(ad(0.9, 0, ["#1e434d", "#11303c"]));
    ⵠΔ[963] = [];
    ⵠΔ[963][0] = Oa(ad(0.9, 0, ["#88504e", "#b3857c"]));
    ⵠΔ[963][1] = Oa(ad(0.9, 0, ["#253b41", "#162930"]));
    ⵠΔ[208] = [];
    ⵠΔ[208][0] = Oa(ad(0.9, 0, ["#0f8870", "#23af93"]));
    ⵠΔ[208][1] = Oa(ad(0.9, 0, ["#032829", "#083233"]));
    ⵠΔ[970] = [];
    ⵠΔ[970][0] = Oa(ad(0.9, 0, ["#618a20", "#84a74e"]));
    ⵠΔ[970][1] = Oa(ad(0.9, 0, ["#1f4632", "#335d47"]));
    ⵠΔ[114] = [];
    ⵠΔ[114][0] = Oa(vd(1.2, za, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ⵠΔ[114][1] = Oa(vd(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ⵠΔ[162] = [];
    ⵠΔ[162][0] = Oa(nu(1, hj, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⵠΔ[162][1] = Oa(nu(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠΔ[165] = [];
    ⵠΔ[165][0] = Oa(ru(1, Xj, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠΔ[165][1] = Oa(ru(1, hq, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠΔ[122] = [];
    ⵠΔ[122][0] = Oa(wu(1, Wh, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⵠΔ[122][1] = Oa(wu(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠΔ[163] = [];
    ⵠΔ[163][0] = Oa(wu(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⵠΔ[163][1] = Oa(wu(1, _k, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⵠΔ[164] = [];
    ⵠΔ[164][0] = Oa(vu(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⵠΔ[164][1] = Oa(vu(1, hj, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⵠΔ[160] = [];
    ⵠΔ[160][0] = Oa(Pc(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ⵠΔ[160][1] = Oa(Pc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠΔ[169] = [];
    ⵠΔ[169][0] = Oa(xc(0.8, Qs, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⵠΔ[169][1] = Oa(xc(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⵠΔ[170] = [];
    ⵠΔ[170][0] = Oa(Mc(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠΔ[170][1] = Oa(Mc(0.8, Vl, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠΔ[168] = [];
    ⵠΔ[168][0] = Oa(Jc(0.8, xg, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⵠΔ[168][1] = Oa(Jc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⵠΔ[123] = [];
    ⵠΔ[123][0] = Oa(Jc(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⵠΔ[123][1] = Oa(Jc(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠΔ[166] = [];
    ⵠΔ[166][0] = Oa(xu(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ⵠΔ[166][1] = Oa(xu(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠΔ[336] = [];
    ⵠΔ[336][0] = Oa(xu(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠΔ[336][1] = Oa(xu(1, Ao, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ⵠΔ[171] = [];
    ⵠΔ[171][0] = Oa(uc(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ⵠΔ[171][1] = Oa(uc(1.5, hq, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ⵠΔ[373] = [];
    ⵠΔ[373][0] = Oa(uc(1, kq, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠΔ[373][1] = Oa(uc(1, vg, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠΔ[124] = [];
    ⵠΔ[124][0] = Oa(uc(1.5, Xj, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ⵠΔ[124][1] = Oa(uc(1.5, xg, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠΔ[500] = [];
    ⵠΔ[500][0] = Oa(uc(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠΔ[500][1] = Oa(uc(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠΔ[172] = [];
    ⵠΔ[172][0] = Oa(gc(1.5, Qs, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ⵠΔ[172][1] = Oa(gc(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ⵠΔ[376] = [];
    ⵠΔ[376][0] = Oa(gc(1, Xa, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠΔ[376][1] = Oa(gc(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠΔ[173] = [];
    ⵠΔ[173][0] = Oa(cc(1.5, wn, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠΔ[173][1] = Oa(cc(1.5, hj, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠΔ[379] = [];
    ⵠΔ[379][0] = Oa(cc(1, Ah, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠΔ[379][1] = Oa(cc(1, cj, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠΔ[167] = [];
    ⵠΔ[167][0] = Oa(Tc(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⵠΔ[167][1] = Oa(Tc(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ⵠΔ[691] = [];
    ⵠΔ[691][0] = Oa(Vm(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ⵠΔ[691][1] = Oa(Vm(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ⵠΔ[264] = [];
    ⵠΔ[264][0] = Oa(bd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ⵠΔ[264][1] = Oa(bd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ⵠΔ[260] = [];
    ⵠΔ[260][0] = Oa(Qb(Math.PI, fd(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ⵠΔ[260][1] = Oa(Qb(Math.PI, fd(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ⵠΔ[266] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      Rb(d, Ve, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      Rb(d, Ja, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      Rb(d, mr, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      Rb(d, Cn, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      Rb(d, Fl, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      Rb(d, Wa, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      Rb(d, Lg, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      Rb(d, undefined, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ⵠΔ[299] = [];
    ⵠΔ[299][0] = Oa(wd(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ⵠΔ[299][1] = Oa(wd(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ⵠΔ[10] = [];
    ⵠΔ[10][0] = Oa(zc(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ⵠΔ[10][1] = Oa(zc(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ⵠΔ[11] = [];
    ⵠΔ[11][0] = Oa(zu(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ⵠΔ[11][1] = Oa(zu(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ⵠΔ[40] = [];
    ⵠΔ[40][0] = Oa(kc(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ⵠΔ[40][1] = Oa(kc(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ⵠΔ[41] = [];
    ⵠΔ[41][0] = Oa(Dd(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ⵠΔ[41][1] = Oa(Dd(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ⵠΔ[42] = [];
    ⵠΔ[42][0] = Oa(jd(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ⵠΔ[42][1] = Oa(jd(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ⵠΔ[716] = [];
    ⵠΔ[716][0] = Oa(rm(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ⵠΔ[716][1] = Oa(rm(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ⵠΔ[720] = [];
    ⵠΔ[720][0] = Oa(pm(0.9, ["#e4c027"]));
    ⵠΔ[720][1] = Oa(pm(0.9, ["#D8E57F"]));
    ⵠΔ[144] = [];
    ⵠΔ[144][0] = Oa(cm(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ⵠΔ[144][1] = Oa(cm(0.42, bh, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ⵠΔ[722] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Lb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      Rb(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      Lb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      Rb(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      Rb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      Rb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      Rb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      Rb(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      Lb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      Rb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      Lb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      Rb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      Lb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      Rb(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      Rb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      Rb(d, b[3], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ⵠΔ[407] = [];
    ⵠΔ[407][0] = Oa(Au(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ⵠΔ[407][1] = Oa(Au(0.5, Wh, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ⵠΔ[119] = [];
    ⵠΔ[119][0] = Oa(lc(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ⵠΔ[119][1] = Oa(lc(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ⵠΔ[411] = Oa(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      Lb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      Rb(e, c[0], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ⵠΔ[412] = Qd(1, [{
      f: Wd,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ⵠΔ[198] = [];
    ⵠΔ[198][0] = Oa(vc(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⵠΔ[198][1] = Oa(vc(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⵠΔ[913] = [];
    ⵠΔ[913][0] = Oa(Bu(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⵠΔ[913][1] = Oa(Bu(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⵠΔ[18] = [];
    ⵠΔ[18][0] = Oa(Qb(3, tc(0.7, wn, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ⵠΔ[18][1] = Oa(Qb(3, tc(0.7, Vl, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ⵠΔ[12] = [];
    ⵠΔ[12][0] = Oa(Qb(3, nc(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ⵠΔ[12][1] = Oa(Qb(3, nc(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ⵠΔ[13] = [];
    ⵠΔ[13][0] = Oa(Qb(3, sc(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ⵠΔ[13][1] = Oa(Qb(3, sc(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ⵠΔ[14] = [];
    ⵠΔ[14][0] = Oa(Qb(3, ec(0.67, za, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ⵠΔ[14][1] = Oa(Qb(3, ec(0.67, fs, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ⵠΔ[15] = [];
    ⵠΔ[15][0] = Oa(Qb(3, dc(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ⵠΔ[15][1] = Oa(Qb(3, dc(0.67, T, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ⵠΔ[33] = [];
    ⵠΔ[33][0] = Oa(Qb(3, oc(0.67, Vl, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ⵠΔ[33][1] = Oa(Qb(3, oc(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ⵠΔ[16] = [];
    ⵠΔ[16][0] = Oa(Qb(3, ac(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ⵠΔ[16][1] = Oa(Qb(3, ac(1, Jq, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ⵠΔ[35] = [];
    ⵠΔ[35][0] = Oa(Qb(3, Bc(1, Qs, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⵠΔ[35][1] = Oa(Qb(3, Bc(1, za, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ⵠΔ[55] = [];
    ⵠΔ[55][0] = Oa(Qb(3, Zm(0.5, T, ["#0d1b1c", "#939393", "#5f6061"])));
    ⵠΔ[55][1] = Oa(Qb(3, Zm(0.5, hq, ["#030d14", "#485e66", "#1f343f"])));
    ⵠΔ[45] = [];
    ⵠΔ[45][0] = Oa(Qb(3, Cm(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ⵠΔ[45][1] = Oa(Qb(3, Cm(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ⵠΔ[36] = [];
    ⵠΔ[36][0] = Oa(Qb(3, Bc(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⵠΔ[36][1] = Oa(Qb(3, Bc(1, Xj, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ⵠΔ[37] = [];
    ⵠΔ[37][0] = Oa(Qb(3, Bc(1, Vl, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⵠΔ[37][1] = Oa(Qb(3, Bc(1, Jq, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⵠΔ[38] = [];
    ⵠΔ[38][0] = Oa(Qb(3, Bc(1, Vl, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⵠΔ[38][1] = Oa(Qb(3, Bc(1, bh, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⵠΔ[148] = [];
    ⵠΔ[148][0] = Oa(mm(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ⵠΔ[148][1] = Oa(mm(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ⵠΔ[536] = [];
    ⵠΔ[536].push(Oa(mm(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ⵠΔ[536].push(Oa(mm(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ⵠΔ[536].push(Oa(mm(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ⵠΔ[538] = [];
    ⵠΔ[538].push(ⵠΔ[536][0]);
    ⵠΔ[538].push(ⵠΔ[536][0]);
    ⵠΔ[538].push(ⵠΔ[536][0]);
    ⵠΔ[158] = [];
    ⵠΔ[158][0] = Oa(gm(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ⵠΔ[158][1] = Oa(gm(0.06, Qr, ["#030d14", "#2b6664", "#133d3c"]));
    ⵠΔ[535] = [];
    ⵠΔ[535].push(Oa(gm(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ⵠΔ[535].push(Oa(gm(0.08, hs, ["#141414", "#e2bd4e", "#a38018"])));
    ⵠΔ[535].push(Oa(gm(0.08, _e, ["#141414", "#b0902e", "#634d09"])));
    ⵠΔ[149] = Qd(1.5, [{
      f: km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⵠΔ[526] = [];
    ⵠΔ[526][0] = Oa(Dm(0.8, 0, ["#347f93", "#54a4ba"]));
    ⵠΔ[526][1] = Oa(Dm(0.8, 0, ["#98ede3", "#94f2e7"]));
    ⵠΔ[527] = [];
    ⵠΔ[527][0] = Oa(Bm(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ⵠΔ[527][1] = Oa(Bm(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ⵠΔ[528] = [];
    ⵠΔ[528][0] = Oa(am(0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ⵠΔ[528][1] = Oa(am(0.8, 0, ["#83ddd4", "#485e66"]));
    ⵠΔ[151] = [];
    ⵠΔ[151][0] = Oa(Qm(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ⵠΔ[151][1] = Oa(Qm(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ⵠΔ[1192] = [];
    ⵠΔ[1192][0] = Ⲇᐃ.ⵠⲆΔΔⵠᐃΔ;
    ⵠΔ[1192][1] = Ⲇᐃ.ΔⲆΔᐃᐃᐃΔ;
    ⵠΔ[1193] = [];
    ⵠΔ[1193][0] = Ⲇᐃ.ⲆⲆⲆⵠⲆΔⲆ;
    ⵠΔ[1193][1] = Ⲇᐃ.ⵠᐃᐃΔΔΔᐃ;
    ⵠΔ[1194] = [];
    ⵠΔ[1194][0] = Ⲇᐃ.ΔⵠΔΔΔΔⵠ;
    ⵠΔ[1194][1] = Ⲇᐃ.ⲆⵠΔΔᐃⲆⵠ;
    ⵠΔ[152] = [];
    ⵠΔ[152][0] = Ⲇᐃ.ⲆΔⵠⲆΔⲆᐃ;
    ⵠΔ[152][1] = Ⲇᐃ.ⵠᐃⵠΔΔΔᐃ;
    ⵠΔ[1198] = [];
    ⵠΔ[1198][0] = Ⲇᐃ.ⲆⲆⲆⵠΔᐃⵠ;
    ⵠΔ[1198][1] = Ⲇᐃ.ᐃⲆⵠΔⲆᐃΔ;
    ⵠΔ[153] = [];
    ⵠΔ[153][0] = Ⲇᐃ.ᐃᐃΔⲆⵠΔᐃ;
    ⵠΔ[153][1] = Ⲇᐃ.ⵠᐃᐃΔΔΔΔ;
    ⵠΔ[1202] = [];
    ⵠΔ[1202][0] = Ⲇᐃ.ΔⲆⵠⲆⲆⲆᐃ;
    ⵠΔ[1202][1] = Ⲇᐃ.ΔⲆᐃΔⲆᐃᐃ;
    ⵠΔ[154] = [];
    ⵠΔ[154][0] = Ⲇᐃ.ⵠᐃⲆΔⲆⵠⵠ;
    ⵠΔ[154][1] = Ⲇᐃ.ᐃⲆᐃⲆⲆⵠⲆ;
    ⵠΔ[1206] = [];
    ⵠΔ[1206][0] = Ⲇᐃ.ⲆⲆᐃⵠΔΔΔ;
    ⵠΔ[1206][1] = Ⲇᐃ.ΔⲆⲆⵠⵠΔᐃ;
    ⵠΔ[155] = [];
    ⵠΔ[155][0] = Ⲇᐃ.ⲆⵠⵠⲆᐃᐃᐃ;
    ⵠΔ[155][1] = Ⲇᐃ.ᐃⵠΔᐃᐃⲆΔ;
    ⵠΔ[1210] = [];
    ⵠΔ[1210][0] = Ⲇᐃ.ⲆΔⲆⵠⵠΔⵠ;
    ⵠΔ[1210][1] = Ⲇᐃ.ΔΔⲆⲆΔᐃΔ;
    ⵠΔ[156] = [];
    ⵠΔ[156][0] = Ⲇᐃ.ᐃⲆΔⲆⲆΔⲆ;
    ⵠΔ[156][1] = Ⲇᐃ.ᐃⵠΔⲆᐃᐃᐃ;
    ⵠΔ[1214] = [];
    ⵠΔ[1214][0] = Ⲇᐃ.ⲆⲆΔⲆⲆⲆⲆ;
    ⵠΔ[1214][1] = Ⲇᐃ.ΔΔⵠⲆᐃΔⲆ;
    ⵠΔ[157] = [];
    ⵠΔ[157][0] = Ⲇᐃ.ᐃⲆⲆᐃΔΔΔ;
    ⵠΔ[157][1] = Ⲇᐃ.ᐃᐃΔⵠⲆⲆⵠ;
    ⵠΔ[245] = [];
    ⵠΔ[245][0] = Ⲇᐃ.ᐃⲆⲆⵠⲆⲆⲆ;
    ⵠΔ[245][1] = Ⲇᐃ.ΔⲆΔⲆᐃⵠΔ;
    ⵠΔ[246] = Ⲇᐃ.ⲆⲆⵠⲆᐃᐃⲆ;
    ⵠΔ[159] = [];
    ⵠΔ[159][0] = Oa(xm(0.75, hq, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ⵠΔ[159][1] = Oa(xm(0.75, Qs, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ⵠΔ[558] = Oa(Jm(0.3, ["#092813", "#1f773d"], 0));
    ⵠΔ[559] = Oa(Jm(0.3, ["#092813", "#1f773d"], 1));
    ⵠΔ[885] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Rb(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      Rb(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ⵠΔ[556] = [];
    ⵠΔ[556].push(Oa(wm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ⵠΔ[556].push(Oa(wm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ⵠΔ[556].push(Oa(wm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ⵠΔ[560] = [];
    var b = Oa(wm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ⵠΔ[560].push(b);
    ⵠΔ[560].push(b);
    ⵠΔ[560].push(b);
    ⵠΔ[557] = [];
    ⵠΔ[557].push(Oa(wm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ⵠΔ[557].push(Oa(wm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ⵠΔ[557].push(Oa(wm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ⵠΔ[681] = Oa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        Sb(e, 3, b * 18, b * 4);
        Rb(e, c[0]);
        e.restore();
      }
      e.restore();
      _b(e, 0, 0, b * 40);
      Rb(e, go, c[0], b * 6);
      _b(e, 0, 0, b * 20);
      Rb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ⵠΔ[794] = Oa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      _b(e, a, h, b * 40);
      Rb(e, Bk, c[0], b * 7);
      _b(e, a, h, b * 30);
      Rb(e, undefined, c[0], b * 7);
      _b(e, a, h, b * 20);
      Rb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ⵠΔ[562] = Oa(Jm(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ⵠΔ[667] = Oa(Qb(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      Lb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      Rb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      Rb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      Rb(d, b[0], b[0], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ⵠΔ[43] = [];
    ⵠΔ[43][0] = Oa(ym(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ⵠΔ[43][1] = Oa(ym(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ⵠΔ[561] = [];
    ⵠΔ[561].push(Oa(wm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ⵠΔ[561].push(Oa(wm(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ⵠΔ[561].push(Oa(wm(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ⵠΔ[83] = [];
    ⵠΔ[83][0] = Oa(hp(0.37, true, ["#2a2938", "#242330", "#313041"]));
    ⵠΔ[83][1] = Oa(hp(0.37, ol, ["#1b1e30", "#161921", "#252f3e"]));
    ⵠΔ[85] = [];
    ⵠΔ[85][0] = Oa(Xm(0.17, ol, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ⵠΔ[85][1] = Oa(Xm(0.17, ol, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ⵠΔ[86] = [];
    ⵠΔ[86][0] = Oa(tp(0.55, Wh, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ⵠΔ[86][1] = Oa(tp(0.55, Xj, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ⵠΔ[84] = [];
    ⵠΔ[84][0] = Oa(tp(0.55, za, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ⵠΔ[84][1] = Oa(tp(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ⵠΔ[77] = [];
    ⵠΔ[77][0] = Oa(Um(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ⵠΔ[77][1] = Oa(Um(0.2, hq, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ⵠΔ[78] = [];
    ⵠΔ[78][0] = Oa(Um(0.2, Xj, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ⵠΔ[78][1] = Oa(Um(0.2, Jq, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ⵠΔ[79] = [];
    ⵠΔ[79][0] = Oa(Um(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ⵠΔ[79][1] = Oa(Um(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ⵠΔ[61] = [];
    ⵠΔ[61][0] = Oa(mc(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ⵠΔ[61][1] = Oa(mc(0.24, hj, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ⵠΔ[59] = [];
    ⵠΔ[59][0] = Oa(Wc(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ⵠΔ[59][1] = Oa(Wc(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ⵠΔ[62] = [];
    ⵠΔ[62][0] = Oa(Qb(3, um(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ⵠΔ[62][1] = Oa(Qb(3, um(0.9, ns, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ⵠΔ[750] = [];
    ⵠΔ[750][0] = Oa(Qb(3, um(1, true, [undefined, mr, Pn, "#c8efef", "#c8efef"])));
    ⵠΔ[750][1] = Oa(Qb(3, um(1, true, [Lg, Lg, undefined, "#87d2e6", "#87d2e6"])));
    ⵠΔ[755] = [];
    ⵠΔ[755].push(Oa(ep(0.3, jn, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ⵠΔ[755].push(Oa(ep(0.3, hq, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ⵠΔ[755].push(Oa(ep(0.3, bh, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ⵠΔ[795] = [];
    ⵠΔ[795].push(Oa(Ym(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ⵠΔ[795].push(Oa(Ym(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⵠΔ[795].push(Oa(Ym(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ⵠΔ[782] = [];
    ⵠΔ[782].push(Oa(Yd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ⵠΔ[782].push(Oa(Yd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ⵠΔ[782].push(Oa(Yd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ⵠΔ[783] = [];
    ⵠΔ[783].push(Oa(Yd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ⵠΔ[783].push(Oa(Yd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ⵠΔ[783].push(Oa(Yd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ⵠΔ[46] = [];
    ⵠΔ[46][0] = Oa(Qb(3, np(0.7, Xj, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ⵠΔ[46][1] = Oa(Qb(3, np(0.7, za, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ⵠΔ[50] = [];
    ⵠΔ[50][0] = Oa(Qb(3, np(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ⵠΔ[50][1] = Oa(Qb(3, np(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ⵠΔ[51] = [];
    ⵠΔ[51][0] = Oa(Qb(3, np(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ⵠΔ[51][1] = Oa(Qb(3, np(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ⵠΔ[52] = [];
    ⵠΔ[52][0] = Oa(Qb(3, np(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ⵠΔ[52][1] = Oa(Qb(3, np(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ⵠΔ[592] = [];
    ⵠΔ[592].push(Oa(hm(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ⵠΔ[592].push(Oa(hm(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ⵠΔ[592].push(Oa(hm(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ⵠΔ[326] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      Rb(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      Rb(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      Rb(d, b[0], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ⵠΔ[333] = Oa(Qb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      _b(d, a * 213.5, a * 256.75, a * 75);
      Rb(d, b);
      _b(d, a * 213.5, a * 175.75, a * 25);
      Rb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ⵠΔ[23] = [];
    ⵠΔ[23][0] = Oa(Pm(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ⵠΔ[23][1] = Oa(Pm(0.55, hj, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ⵠΔ[58] = [];
    ⵠΔ[58][0] = Oa(dm(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ⵠΔ[58][1] = Oa(dm(0.55, T, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ⵠΔ[25] = [];
    ⵠΔ[25][0] = Oa(fm(0.6, Wh, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ⵠΔ[25][1] = Oa(fm(0.6, fs, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ⵠΔ[26] = [];
    ⵠΔ[26][0] = Oa(Sm(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ⵠΔ[26][1] = Oa(Sm(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ⵠΔ[27] = [];
    ⵠΔ[27][0] = Oa(sm(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ⵠΔ[27][1] = Oa(sm(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ⵠΔ[413] = [];
    ⵠΔ[413][0] = [];
    ⵠΔ[413][1] = [];
    ⵠΔ[413][0].push(Oa(Gc(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ⵠΔ[413][0].push(Oa(_c(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ⵠΔ[413][0].push(Oa(Ic(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ⵠΔ[413][1].push(Oa(Gc(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ⵠΔ[413][1].push(Oa(_c(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ⵠΔ[413][1].push(Oa(Ic(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ⵠΔ[449] = [];
    ⵠΔ[449][0] = Oa(Xc(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ⵠΔ[449][1] = Oa(Xc(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ⵠΔ[451] = [];
    ⵠΔ[451][0] = Oa($c(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⵠΔ[451][1] = Oa($c(1, ["#050505", "#327570", "#021724", "#200333"]));
    ⵠΔ[452] = [];
    ⵠΔ[452][0] = Oa(nm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⵠΔ[452][1] = Oa(nm(1, ["#050505", "#327570", "#021724", "#200333"]));
    ⵠΔ[243] = [];
    ⵠΔ[243][0] = [];
    ⵠΔ[243][1] = [];
    ⵠΔ[243][0] = [Ⲇᐃ.ⲆᐃΔⲆⵠⵠⵠ, Ⲇᐃ.ⵠⲆᐃΔⲆΔⵠ, Ⲇᐃ.ΔᐃᐃᐃᐃΔⵠ, Ⲇᐃ.ᐃⵠⲆⵠⵠΔⲆ, Ⲇᐃ.ΔⲆⲆᐃⲆΔⲆ, Ⲇᐃ.ⵠᐃⵠⲆΔⵠⲆ, Ⲇᐃ.ᐃΔⵠⵠΔⵠⲆ, Ⲇᐃ.ⵠⲆᐃⵠⲆⵠⲆ, Ⲇᐃ.ⵠᐃⲆⲆⲆᐃⵠ, Ⲇᐃ.ᐃΔΔⵠⵠⵠⵠ, Ⲇᐃ.ΔⵠⵠⲆΔⲆᐃ, Ⲇᐃ.ⲆⵠⵠⵠⵠⲆΔ, Ⲇᐃ.ᐃΔᐃⵠᐃⵠⲆ, Ⲇᐃ.ⲆⲆΔᐃⲆⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⲆⲆᐃ, Ⲇᐃ.ⵠᐃᐃΔⲆᐃⵠ, Ⲇᐃ.ᐃⵠᐃⲆⲆΔⲆ, Ⲇᐃ.ⵠⵠⲆΔⵠⲆⵠ, Ⲇᐃ.ᐃᐃΔⵠⲆΔᐃ, Ⲇᐃ.ⲆⲆⲆⵠΔΔᐃ, Ⲇᐃ.ᐃⵠⲆᐃᐃⲆᐃ, Ⲇᐃ.ᐃΔⵠᐃΔⲆⵠ, Ⲇᐃ.ⵠⲆⵠᐃⵠⵠⵠ, Ⲇᐃ.ΔⵠΔⲆⵠⲆΔ, Ⲇᐃ.ⵠΔⵠΔΔΔᐃ, Ⲇᐃ.ΔᐃᐃⲆᐃᐃⵠ, Ⲇᐃ.ⵠΔⵠᐃΔΔⵠ, Ⲇᐃ.ΔⲆΔⵠⲆΔⲆ, Ⲇᐃ.ⵠᐃᐃⲆⲆΔⲆ, Ⲇᐃ.ᐃΔᐃⲆⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆⲆᐃⵠⵠ, Ⲇᐃ.ⵠⵠᐃᐃΔⵠΔ, Ⲇᐃ.ⵠⵠΔⵠⲆⵠⵠ, Ⲇᐃ.ⲆⲆΔΔⲆⵠⲆ, Ⲇᐃ.ⵠᐃᐃᐃⲆⲆΔ, Ⲇᐃ.ⲆᐃᐃΔᐃᐃⵠ, Ⲇᐃ.ᐃⲆΔⵠⲆΔᐃ, Ⲇᐃ.ⵠⲆᐃᐃⲆΔⵠ, Ⲇᐃ.ⵠΔΔᐃⲆᐃᐃ, Ⲇᐃ.ΔⵠᐃⵠⲆⵠⲆ, Ⲇᐃ.ⵠΔΔΔΔⲆΔ, Ⲇᐃ.ΔᐃⲆⲆᐃΔᐃ, Ⲇᐃ.ⵠΔⲆⲆᐃΔᐃ, Ⲇᐃ.ΔᐃΔΔⵠΔΔ, Ⲇᐃ.ΔⵠᐃⲆⵠΔⵠ, Ⲇᐃ.ⵠΔΔΔΔΔⵠ, Ⲇᐃ.ⲆⵠⲆΔᐃΔⲆ, Ⲇᐃ.ⵠⲆΔΔⵠⲆΔ, Ⲇᐃ.ᐃⲆΔⲆΔᐃᐃ, Ⲇᐃ.ΔⲆᐃΔᐃⲆⵠ, Ⲇᐃ.ΔΔⲆⲆⵠΔⵠ, Ⲇᐃ.ΔᐃⲆⵠⵠΔΔ, Ⲇᐃ.ⵠᐃΔΔⲆᐃⲆ, Ⲇᐃ.ⵠᐃᐃⵠⲆΔᐃ, Ⲇᐃ.ⵠⵠⵠᐃᐃΔⲆ, Ⲇᐃ.ⵠⵠΔⲆᐃΔⲆ];
    ⵠΔ[243][1] = [Ⲇᐃ.ᐃΔⲆΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⵠⲆᐃᐃᐃ, Ⲇᐃ.ⲆⵠⵠᐃΔᐃΔ, Ⲇᐃ.ⵠⵠᐃⵠⵠᐃᐃ, Ⲇᐃ.ᐃᐃᐃΔⵠⲆΔ, Ⲇᐃ.ⵠⵠᐃⲆⲆΔᐃ, Ⲇᐃ.ⲆⲆⵠᐃⵠΔᐃ, Ⲇᐃ.ΔᐃⵠⲆⲆΔⵠ, Ⲇᐃ.ⵠΔΔⵠΔⲆⲆ, Ⲇᐃ.ⵠⵠᐃᐃⲆⲆⲆ, Ⲇᐃ.ⵠΔΔⵠᐃⲆΔ, Ⲇᐃ.ⲆΔᐃΔⵠⲆⵠ, Ⲇᐃ.ⵠΔΔⲆᐃΔΔ, Ⲇᐃ.ΔᐃΔⵠⵠⲆᐃ, Ⲇᐃ.ⲆᐃⲆΔΔⵠᐃ, Ⲇᐃ.ⵠⲆᐃⲆᐃⵠⲆ, Ⲇᐃ.ΔⲆΔΔᐃΔⵠ, Ⲇᐃ.ΔᐃⵠΔⵠⵠⵠ, Ⲇᐃ.ⵠⲆⲆⲆⵠᐃⵠ, Ⲇᐃ.ⲆⲆᐃⵠΔᐃⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠⲆΔ, Ⲇᐃ.ΔᐃⵠⵠᐃΔᐃ, Ⲇᐃ.ΔΔⲆᐃⲆΔΔ, Ⲇᐃ.ⲆᐃⵠⲆⲆΔᐃ, Ⲇᐃ.ⲆᐃⲆⲆⲆᐃᐃ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃΔ, Ⲇᐃ.ⵠⵠᐃⲆⲆⲆⲆ, Ⲇᐃ.ⵠᐃᐃⵠΔᐃᐃ, Ⲇᐃ.ⵠⵠᐃⵠᐃᐃⵠ, Ⲇᐃ.ⲆⵠⲆΔΔⲆΔ, Ⲇᐃ.ⲆΔᐃΔⵠᐃⲆ, Ⲇᐃ.ⵠᐃⵠᐃⵠΔⲆ, Ⲇᐃ.ΔⲆΔΔⲆΔⲆ, Ⲇᐃ.ⲆⵠΔΔⵠⵠᐃ, Ⲇᐃ.ᐃⲆᐃΔⲆΔΔ, Ⲇᐃ.ⲆᐃⵠᐃᐃⲆᐃ, Ⲇᐃ.ⵠΔᐃⲆⲆᐃᐃ, Ⲇᐃ.ⵠΔⵠᐃⵠΔⵠ, Ⲇᐃ.ΔⵠΔⵠⲆᐃⵠ, Ⲇᐃ.ⵠΔⵠΔΔᐃⲆ, Ⲇᐃ.ΔⵠᐃⲆᐃⵠᐃ, Ⲇᐃ.ΔⲆᐃⲆΔⲆⲆ, Ⲇᐃ.ⵠⵠⵠⵠⲆⲆⲆ, Ⲇᐃ.ΔᐃⲆΔΔᐃⲆ, Ⲇᐃ.ⵠᐃΔᐃᐃⲆⲆ, Ⲇᐃ.ⵠΔᐃⲆΔΔⲆ, Ⲇᐃ.ⲆⵠⵠᐃⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⵠⵠΔⵠ, Ⲇᐃ.ⵠΔⲆⲆᐃⲆᐃ, Ⲇᐃ.ΔᐃΔᐃᐃⵠⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⲆ, Ⲇᐃ.ⲆΔΔΔⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⲆᐃΔⲆ, Ⲇᐃ.ᐃΔᐃⵠⲆⲆⵠ, Ⲇᐃ.ⵠⲆΔⵠᐃⵠΔ, Ⲇᐃ.ⵠΔᐃᐃⲆΔΔ];
    ⵠΔ[676] = [];
    ⵠΔ[676][0] = [];
    ⵠΔ[676][1] = [];
    ⵠΔ[676][0].push(Oa(du(1.1, hh, ["#252B28", "#747471", "#83827e"], 0)));
    ⵠΔ[676][0].push(Oa(du(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
    ⵠΔ[676][0].push(Oa(du(1, Qr, ["#252B28", "#747471", "#83827e"], 2)));
    ⵠΔ[676][0].push(Oa(du(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ⵠΔ[676][1].push(Oa(du(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
    ⵠΔ[676][1].push(Oa(du(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ⵠΔ[676][1].push(Oa(du(1, Cl, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠΔ[676][1].push(Oa(du(0.9, En, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠΔ[679] = [];
    ⵠΔ[679][0] = [];
    ⵠΔ[679][1] = [];
    ⵠΔ[679][0].push(Oa(du(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠΔ[679][0].push(Oa(du(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠΔ[679][0].push(Oa(du(1, wn, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠΔ[679][0].push(Oa(du(0.9, _k, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠΔ[679][1].push(Oa(du(1.1, ag, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠΔ[679][1].push(Oa(du(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠΔ[679][1].push(Oa(du(1, jn, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠΔ[679][1].push(Oa(du(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠΔ[415] = [];
    ⵠΔ[415][0] = [];
    ⵠΔ[415][1] = [];
    ⵠΔ[415][0].push(Oa(au(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠΔ[415][0].push(Oa(au(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠΔ[415][0].push(Oa(au(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠΔ[415][1].push(Oa(au(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠΔ[415][1].push(Oa(au(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠΔ[415][1].push(Oa(au(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠΔ[416] = [];
    ⵠΔ[416][0] = [];
    ⵠΔ[416][1] = [];
    ⵠΔ[416][0].push(Oa(eu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠΔ[416][0].push(Oa(eu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠΔ[416][0].push(Oa(eu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠΔ[416][1].push(Oa(eu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠΔ[416][1].push(Oa(eu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠΔ[416][1].push(Oa(eu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠΔ[121] = [];
    ⵠΔ[121][0] = [];
    ⵠΔ[121][1] = [];
    ⵠΔ[121][0].push(Oa(jc(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠΔ[121][0].push(Oa(jc(1.5, fs, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠΔ[121][0].push(Oa(jc(1.3, ns, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠΔ[121][1].push(Oa(jc(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠΔ[121][1].push(Oa(jc(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠΔ[121][1].push(Oa(jc(1.3, Xg, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠΔ[678] = [];
    ⵠΔ[678][0] = [];
    ⵠΔ[678][1] = [];
    ⵠΔ[678][0].push(Oa(Fc(1, ["#2d53c4"])));
    ⵠΔ[678][1].push(Oa(Fc(1, ["#2d53c4"])));
    ⵠΔ[696] = [];
    ⵠΔ[696][0] = [];
    ⵠΔ[696][1] = [];
    ⵠΔ[696][0].push(Oa(Fc(1, ["#c4912d"])));
    ⵠΔ[696][1].push(Oa(Fc(1, ["#c4912d"])));
    ⵠΔ[680] = [];
    ⵠΔ[680][0] = Oa(im(1, ["#414040"]));
    ⵠΔ[680][1] = Oa(im(1, ["#153635"]));
    ⵠΔ[508] = [];
    ⵠΔ[508][0] = Oa(xu(1, kq, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠΔ[508][1] = Oa(xu(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠΔ[509] = [];
    ⵠΔ[509][0] = Oa(uc(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠΔ[509][1] = Oa(uc(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠΔ[512] = [];
    ⵠΔ[512][0] = Oa(uc(1, En, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠΔ[512][1] = Oa(uc(1, mk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠΔ[511] = [];
    ⵠΔ[511][0] = Oa(cc(1, Zh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠΔ[511][1] = Oa(cc(1, cr, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠΔ[510] = [];
    ⵠΔ[510][0] = Oa(gc(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠΔ[510][1] = Oa(gc(1, Ao, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠΔ[419] = [];
    ⵠΔ[419][0] = Oa(em(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ⵠΔ[419][1] = Oa(em(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ⵠΔ[445] = [];
    ⵠΔ[445][0] = Oa(Vc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ⵠΔ[445][1] = Oa(Vc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ⵠΔ[259] = [];
    ⵠΔ[818] = [];
    ⵠΔ[516] = [];
    ⵠΔ[819] = [];
    for (a = 0; a < 2; a++) {
      ⵠΔ[259][a] = document.createElement("canvas");
      ⵠΔ[259][a].width = 193;
      ⵠΔ[259][a].height = 193;
      ⵠΔ[818][a] = ⵠΔ[259][a].getContext("2d");
      ⵠΔ[516][a] = document.createElement("canvas");
      ⵠΔ[516][a].width = 600;
      ⵠΔ[516][a].height = 600;
      ⵠΔ[819][a] = ⵠΔ[516][a].getContext("2d");
    }
    ⵠΔ[475] = [];
    ⵠΔ[475][0] = Oa(im(1, ["#c8e0de"]));
    ⵠΔ[475][1] = Oa(im(1, ["#147071"]));
    ⵠΔ[476] = [];
    ⵠΔ[476][0] = Oa(im(1, ["#231912"]));
    ⵠΔ[476][1] = Oa(im(1, ["#021719"]));
    ⵠΔ[697] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      Lb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      Rb(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      Lb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      Rb(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      Lb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      Rb(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      Lb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      Rb(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ⵠΔ[461] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      Rb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ⵠΔ[462] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      Rb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ⵠΔ[463] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      Rb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      Rb(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    ⵠΔ[466] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      Rb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      Rb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ⵠΔ[467] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      Rb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      Rb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      Rb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ⵠΔ[322] = Oa(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      Rb(e, c, c, a);
      return d;
    }(0.9, "#BB0000"));
    ⵠΔ[279] = Oa(Gb(0.6, "#BB0000"));
    ⵠΔ[280] = Oa(Gb(0.6, "#1CE7E0"));
    ⵠΔ[281] = Oa(Gb(0.6, "#DBE71C"));
    ⵠΔ[308] = Oa(Gb(0.6, "#00BB00"));
    ⵠΔ[602] = [];
    ⵠΔ[602][0] = Oa(im(1, ["#dac291"]));
    ⵠΔ[602][1] = Oa(im(1, ["#0D423D"]));
    ⵠΔ[698] = [];
    ⵠΔ[698][0] = Oa(im(1, ["#dac291"]));
    ⵠΔ[698][1] = Oa(im(1, ["#0D423D"]));
    ⵠΔ[788] = [];
    ⵠΔ[788][0] = Oa(zm(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ⵠΔ[788][1] = Oa(zm(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ⵠΔ[182] = [];
    ⵠΔ[182][0] = Oa(zm(0.3, jn, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ⵠΔ[182][1] = Oa(zm(0.3, ns, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ⵠΔ[127] = [Oa(lp(1, wn, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⵠΔ[128] = [Oa(lp(1, gr, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⵠΔ[603] = [];
    ⵠΔ[603][0] = [];
    ⵠΔ[603][1] = [];
    ⵠΔ[603][0].push(Oa(Rc(1, ["#0B6A84"])));
    ⵠΔ[603][0].push(Oa(Hc(1, ["#0B6A84"])));
    ⵠΔ[603][0].push(Oa(Yc(1, ["#0B6A84"])));
    ⵠΔ[603][0].push(Oa(Nc(1, ["#0B6A84"])));
    ⵠΔ[603][0].push(Oa(Uc(1, ["#0B6A84"])));
    ⵠΔ[603][0].push(Oa(qc(1, ["#0B6A84"])));
    ⵠΔ[603][0].push(Oa(Zc(1, ["#0B6A84"])));
    ⵠΔ[603][1].push(Oa(Rc(1, ["#09373F"])));
    ⵠΔ[603][1].push(Oa(Hc(1, ["#09373F"])));
    ⵠΔ[603][1].push(Oa(Yc(1, ["#09373F"])));
    ⵠΔ[603][1].push(Oa(Nc(1, ["#09373F"])));
    ⵠΔ[603][1].push(Oa(Uc(1, ["#09373F"])));
    ⵠΔ[603][1].push(Oa(qc(1, ["#09373F"])));
    ⵠΔ[603][1].push(Oa(Zc(1, ["#09373F"])));
    ⵠΔ[692] = [];
    ⵠΔ[692][0] = [];
    ⵠΔ[692][1] = [];
    ⵠΔ[692][0].push(Oa(Ec(1.7, ["#FBEFBC"], 0)));
    ⵠΔ[692][0].push(Oa(Ec(1.9, ["#FBEFBC"], 1)));
    ⵠΔ[692][0].push(Oa(Ec(1.7, ["#FBEFBC"], 2)));
    ⵠΔ[692][1].push(Oa(Ec(1.7, ["#0F4C48"], 0)));
    ⵠΔ[692][1].push(Oa(Ec(1.9, ["#0F4C48"], 1)));
    ⵠΔ[692][1].push(Oa(Ec(1.7, ["#0F4C48"], 2)));
    ⵠΔ[694] = [];
    ⵠΔ[694][0] = [];
    ⵠΔ[694][1] = [];
    ⵠΔ[694][0].push(Oa(Ec(1.8, ["#A9D6D3"], 0)));
    ⵠΔ[694][0].push(Oa(Ec(2, ["#A9D6D3"], 1)));
    ⵠΔ[694][0].push(Oa(Ec(1.8, ["#A9D6D3"], 2)));
    ⵠΔ[694][1].push(Oa(Ec(1.8, ["#115E60"], 0)));
    ⵠΔ[694][1].push(Oa(Ec(2, ["#115E60"], 1)));
    ⵠΔ[694][1].push(Oa(Ec(1.8, ["#115E60"], 2)));
    ⵠΔ[695] = [];
    ⵠΔ[695][0] = [];
    ⵠΔ[695][1] = [];
    ⵠΔ[695][0].push(Oa(Ec(1.9, ["#2A8B9B"], 0)));
    ⵠΔ[695][0].push(Oa(Ec(2.1, ["#2A8B9B"], 1)));
    ⵠΔ[695][0].push(Oa(Ec(1.9, ["#2A8B9B"], 2)));
    ⵠΔ[695][1].push(Oa(Ec(1.9, ["#0F464C"], 0)));
    ⵠΔ[695][1].push(Oa(Ec(2.1, ["#0F464C"], 1)));
    ⵠΔ[695][1].push(Oa(Ec(1.9, ["#0F464C"], 2)));
    ⵠΔ[693] = [];
    ⵠΔ[693][0] = [];
    ⵠΔ[693][1] = [];
    ⵠΔ[693][0].push(Oa(qu(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠΔ[693][0].push(Oa(qu(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠΔ[693][0].push(Oa(qu(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠΔ[693][1].push(Oa(qu(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠΔ[693][1].push(Oa(qu(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠΔ[693][1].push(Oa(qu(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠΔ[637] = [];
    ⵠΔ[637][0] = Oa(_m(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ⵠΔ[637][1] = Oa(_m(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ⵠΔ[687] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      Rb(d, b[0], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ⵠΔ[673] = [];
    ⵠΔ[673][0] = Oa(Wm(0.8, wn, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ⵠΔ[673][1] = Oa(Wm(0.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ⵠΔ[688] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      Rb(d, b[0], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ⵠΔ[902] = [];
    ⵠΔ[902][0] = Oa(ld(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ⵠΔ[902][1] = Oa(ld(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⵠΔ[903] = [];
    ⵠΔ[903][0] = Oa(ld(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ⵠΔ[903][1] = Oa(ld(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ⵠΔ[tr.ⲆᐃᐃⲆⲆᐃᐃ] = [];
    ⵠΔ[tr.ⲆᐃᐃⲆⲆᐃᐃ][0] = Oa(ld(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ⵠΔ[tr.ⲆᐃᐃⲆⲆᐃᐃ][1] = Oa(ld(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ⵠΔ[904] = Oa(md(0.4, ["#B6222A"]));
    ⵠΔ[905] = Oa(md(0.4, ["#B6222A"]));
    ⵠΔ[tr.ⵠΔᐃΔᐃⵠⵠᐃᐃ] = Oa(md(0.4, ["#B6222A"]));
    ⵠΔ[230] = Oa(ic(0.35, jn, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ⵠΔ[229] = Oa(Gt(0.35, Xg, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ⵠΔ[886] = [];
    ⵠΔ[886][0] = Oa(Bt(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ⵠΔ[886][1] = Oa(Bt(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ⵠΔ[887] = [];
    ⵠΔ[887][0] = Oa(Bt(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ⵠΔ[887][1] = Oa(Bt(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ⵠΔ[894] = [];
    ⵠΔ[894][0] = Oa(It(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⵠΔ[894][1] = Oa(It(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⵠΔ[895] = [];
    ⵠΔ[895][0] = Oa(Ht(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⵠΔ[895][1] = Oa(Ht(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⵠΔ[896] = [];
    ⵠΔ[896][0] = Oa(It(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⵠΔ[896][1] = Oa(It(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⵠΔ[897] = [];
    ⵠΔ[897][0] = Oa(Ht(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⵠΔ[897][1] = Oa(Ht(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⵠΔ[888] = Oa(Ft(0.35, ["#B6222A"]));
    ⵠΔ[889] = Oa(It(0.35, 0, [undefined, "#B6222A"]));
    ⵠΔ[890] = Oa(Ht(0.35, 0, [Ur, "#B6222A"]));
    ⵠΔ[891] = Oa(Ft(0.35, ["#22E066"]));
    ⵠΔ[892] = Oa(It(0.35, 0, [undefined, "#22E066"]));
    ⵠΔ[893] = Oa(Ht(0.35, 0, [undefined, "#22E066"]));
    ⵠΔ[48] = [];
    ⵠΔ[48][0] = Oa(lu(0.3, ol, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ⵠΔ[48][1] = Oa(lu(0.3, fs, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ⵠΔ[47] = [];
    ⵠΔ[47][0] = Oa(ju(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ⵠΔ[47][1] = Oa(ju(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ⵠΔ[141] = [];
    ⵠΔ[141][0] = Oa(ip(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ⵠΔ[141][1] = Oa(ip(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⵠΔ[125] = [];
    ⵠΔ[125][0] = Oa(Em(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ⵠΔ[125][1] = Oa(Em(1, fs, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⵠΔ[221] = [];
    ⵠΔ[221][0] = Ⲇᐃ.ᐃⵠⵠᐃᐃⵠⵠⵠⲆ;
    ⵠΔ[221][1] = Ⲇᐃ.ΔᐃᐃⵠⵠⵠΔΔΔ;
    ⵠΔ[190] = [];
    ⵠΔ[190][0] = Oa(Xb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠΔ[190][1] = Oa(Xb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠΔ[853] = [ⵠΔ[190]];
    ⵠΔ[853][1] = [];
    ⵠΔ[853][2] = [];
    ⵠΔ[853][1][0] = Oa(Vb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠΔ[853][1][1] = Oa(Vb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠΔ[853][2][0] = Oa(id(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠΔ[853][2][1] = Oa(id(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠΔ[49] = [];
    ⵠΔ[49][0] = Oa(Qb(3 - Math.PI / 2, sp(0.6, hj, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ⵠΔ[49][1] = Oa(Qb(3 - Math.PI / 2, sp(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ⵠΔ[728] = [];
    ⵠΔ[728][0] = Oa(zd(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ⵠΔ[728][1] = Oa(zd(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ⵠΔ[798] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Lb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      Rb(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Lb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Lb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      Lb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Lb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      Lb(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      Rb(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      Lb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      Rb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      Rb(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      Rb(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      Rb(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      Rb(d, undefined, b[1], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ⵠΔ[729] = Oa(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      Lb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      Lb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      Lb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      Lb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      Lb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      Lb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      Lb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      Lb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      Rb(d, b[0], b[0], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ⵠΔ[658] = Qd(1, [{
      f: Hm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠΔ[150] = Qd(1.5, [{
      f: km,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⵠΔ[669] = up(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ⵠΔ[670] = up(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ⵠΔ[671] = up(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ⵠΔ[672] = up(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ⲆⲆⲆᐃⵠⵠⲆ) {
      ⵠΔ[278] = Oa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        Lb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        Rb(d, "#1D6055");
        d.globalAlpha = 1;
        var a = Tt(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ⵠΔ[278] = Oa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        Lb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        Rb(d, "#1D6055");
        d.globalAlpha = 1;
        var a = Tt(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    }
    if (ⲆⲆⲆᐃⵠⵠⲆ) {
      ⵠΔ[267] = Oa(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var l = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        Lb(d, k, 0, f, a, h);
        Rb(d, null, "#69A148", l);
        d.translate(0, j);
        Lb(d, k, 0, f, a, h);
        Rb(d, null, "#AF352A", l);
        d.translate(0, j);
        Lb(d, k, 0, f, a, h);
        Rb(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ⵠΔ[267] = Oa(function (c) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 950;
        var j = c * 180;
        var k = c * 50;
        var a = c * 20;
        var m = c * 240;
        var n = c * 35;
        var h = c * 1;
        var l = c * 4;
        var g = c * 4;
        e.width = i;
        e.height = k;
        f.translate(0, c * 15);
        Lb(f, n, h, j, a, l);
        Rb(f, null, "#69A148", g);
        var b = ⵠΔ[669];
        f.drawImage(b, 17, -8);
        f.translate(m, 0);
        Lb(f, n, h, j, a, l);
        Rb(f, null, "#AF352A", g);
        b = ⵠΔ[671];
        f.drawImage(b, 17, -9);
        f.translate(m, 0);
        Lb(f, n, h, j, a, l);
        Rb(f, null, "#669BB1", g);
        b = ⵠΔ[670];
        f.drawImage(b, 17, -8);
        f.translate(m, 0);
        Lb(f, n, h, j, a, l);
        Rb(f, null, "#074A87", g);
        b = ⵠΔ[672];
        f.drawImage(b, 17, -8);
        return e;
      }(1));
    }
    if (ⲆⲆⲆᐃⵠⵠⲆ) {
      ⵠΔ[608] = Oa(Lm(0.75));
    } else {
      ⵠΔ[608] = Oa(Lm(1));
    }
    ⵠΔ[792] = Oa(fm(0.16, Wh, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ⵠΔ[537] = Oa(Qb(5.8, $d(0.15, ol, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ⵠΔ[283] = [];
    ⵠΔ[465] = [];
    for (a = 0; a < 18; a++) {
      ⵠΔ[465][a] = Tt(1, "" + (a + 1), 12, "#FFF");
    }
    ⵠΔ[708] = [];
    ⵠΔ[708].push(Oa(Om(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ⵠΔ[708].push(Oa(Om(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ⵠΔ[708].push(Oa(Om(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ⵠΔ[725] = [];
    ⵠΔ[725].push(Oa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      _b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      _b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Rb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Rb(c, "#3A2A0D");
      _b(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Rb(c, eb, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Rb(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, nl, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, Ds, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, bj, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, Cn, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, nh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, nl, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, eb, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, Sh, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, Ve, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, Ve, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, Wa, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, mr, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, Pn, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, Ve, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, mr, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Rb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Rb(c, "#ECBE35", "#EDCE4F", a * 8);
      _b(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ⵠΔ[725].push(Oa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      _b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      _b(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      Rb(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      Rb(c, "#071A1B");
      _b(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      Rb(c, Ej, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      Rb(c, mr, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, Pn, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, Sh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, Ja, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, Cn, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      Rb(c, Fl, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      Rb(c, Lg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      Rb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      Rb(c, go, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      Rb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      Rb(c, eb, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      Rb(c, Oh, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      Rb(c, Ve, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      Rb(c, Ja, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      Rb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      Rb(c, "#E1DDD5", "#EAE7E4", a * 8);
      _b(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      Rb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ⵠΔ[726] = Oa(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      _b(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      Rb(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      Rb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      Lb(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      Rb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      Lb(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      Rb(c, "#C09D6F");
      _b(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      Rb(c, "#C09D6F");
      return b;
    }(0.22));
    ⵠΔ[727] = [];
    ⵠΔ[727].push(Oa(cd(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ⵠΔ[727].push(Oa(cd(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ⵠΔ[727].push(Oa(cd(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ⵠΔ[546] = Ⲇᐃ.ᐃⲆᐃⲆΔᐃΔ;
    ⵠΔ[547] = Ⲇᐃ.ᐃⲆⵠΔⵠⲆᐃ;
    ⵠΔ[548] = Ⲇᐃ.ᐃⲆᐃΔᐃⵠᐃ;
    ⵠΔ[549] = Ⲇᐃ.ᐃⵠᐃⲆⲆⲆⵠ;
    ⵠΔ[517] = Tt(1, "Show spectators", 25, "#FFF", undefined, Sh, "#000", 5, 220);
    ⵠΔ[525] = Tt(1, "Reconnecting...", 30, "#FFF");
    console.log(undefined, undefined);
  }
  function Lm(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    Lb(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    Rb(d, null, "#BBE8EF", a);
    return c;
  }
  function Wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Rb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    _b(e, a * 108.5, a * 148.421875, a * 9);
    Rb(e, c[5]);
    _b(e, a * 106.5, a * 144.421875, a * 3);
    Rb(e, c[6]);
    _b(e, a * 46.5, a * 148.421875, a * 9);
    Rb(e, c[5]);
    _b(e, a * 44.5, a * 144.421875, a * 3);
    Rb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    Rb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    Rb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    Rb(e, c[3], c[2], a * 4);
    return d;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      Rb(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    Rb(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    Rb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    Rb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    Rb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    Rb(e, b[3], b[3], a * 12);
    return d;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Lb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    Lb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, undefined, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Lb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    Lb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    Rb(e, Ve, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    Rb(e, undefined, c[1], a * 10);
    return d;
  }
  function Nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Rb(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    Rb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, undefined, c[2], a * 11);
    return d;
  }
  function Hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    Rb(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    Rb(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    Rb(e, c[2], c[3], a * 12);
    return d;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    Rb(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    Rb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    Rb(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    Rb(e, c[2], c[3], a * 10);
    _b(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    Rb(e, c[4], c[5], a * 1);
    _b(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    Rb(e, c[4], c[5], a * 1);
    _b(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    Rb(e, c[4], c[5], a * 1);
    _b(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    Rb(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    Rb(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    Rb(e, c[6]);
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      Rb(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    Rb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    Rb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    Rb(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    Rb(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    Rb(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      Rb(e, eb, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      Rb(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Rb(e, undefined, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    Rb(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    Rb(e, Lg, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    Rb(e, b[2], b[2], a * 10);
    return d;
  }
  function Km() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      var c = 0;
      for (var d = 0; d < a.length; d++) {
        var e = a.charAt(d);
        if (e !== "_" && d !== 5) {
          if (e === "1") {
            b += Math.pow(2, c);
          }
          c++;
        }
      }
      return b;
    }
    ᐃΔΔΔⲆΔΔⲆⵠ();
    ⵠΔ[1026] = [Ⲇᐃ.ᐃΔⲆᐃⵠⵠⵠ, Ⲇᐃ.ⵠᐃᐃᐃᐃⵠΔ];
    ⵠΔ[1025] = [];
    ⵠΔ[1025][0] = [];
    ⵠΔ[1025][0][b("000_010_000")] = [Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ];
    ⵠΔ[1025][0][b("000_010_010")] = ⵠΔ[1025][0][b("000_010_000")];
    ⵠΔ[1025][0][b("000_011_000")] = ⵠΔ[1025][0][b("000_010_000")];
    ⵠΔ[1025][0][b("000_011_010")] = [Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ];
    ⵠΔ[1025][0][b("000_011_011")] = [Ⲇᐃ.ⵠΔΔⲆᐃⲆᐃ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ];
    ⵠΔ[1025][0][b("000_110_000")] = [Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ];
    ⵠΔ[1025][0][b("000_110_010")] = [Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.Ⲇᐃⵠⵠᐃⵠᐃ];
    ⵠΔ[1025][0][b("000_110_110")] = [Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ⲆΔⵠᐃΔⲆᐃ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.Ⲇᐃⵠⵠᐃⵠᐃ];
    ⵠΔ[1025][0][b("000_111_000")] = [Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ];
    ⵠΔ[1025][0][b("000_111_111")] = [Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ⵠΔΔⲆᐃⲆᐃ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ];
    ⵠΔ[1025][0][b("010_010_000")] = [Ⲇᐃ.ᐃΔᐃΔⲆ];
    ⵠΔ[1025][0][b("010_010_010")] = [Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ];
    ⵠΔ[1025][0][b("010_011_000")] = [Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⵠᐃⲆⲆ];
    ⵠΔ[1025][0][b("010_110_000")] = [Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("010_110_110")] = [Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("010_011_010")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_011_011")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("000_111_011")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_110_010")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_111_000")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_111_010")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_111_011")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_111_110")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("010_111_111")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("000_111_110")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("000_111_010")] = ⵠΔ[1025][0][b("010_110_110")];
    ⵠΔ[1025][0][b("011_011_000")] = [Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⵠᐃⲆⲆ];
    ⵠΔ[1025][0][b("011_011_010")] = [Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("011_011_011")] = [Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ⵠΔΔⲆᐃⲆᐃ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ];
    ⵠΔ[1025][0][b("011_111_000")] = ⵠΔ[1025][0][b("011_011_010")];
    ⵠΔ[1025][0][b("011_111_010")] = [Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("011_111_011")] = ⵠΔ[1025][0][b("011_111_010")];
    ⵠΔ[1025][0][b("011_111_110")] = ⵠΔ[1025][0][b("011_111_010")];
    ⵠΔ[1025][0][b("011_111_111")] = [Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠΔΔⲆᐃⲆᐃ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("110_110_000")] = [Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ⵠⲆⵠᐃⵠᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("110_110_010")] = [Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("110_110_110")] = [Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("110_111_000")] = [Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ⵠⲆⵠᐃⵠᐃⵠ, Ⲇᐃ.ⵠΔᐃᐃⲆⵠᐃ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("110_111_110")] = [Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ, Ⲇᐃ.ⵠΔᐃᐃⲆⵠᐃ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("110_111_111")] = ⵠΔ[1025][0][b("110_111_110")];
    ⵠΔ[1025][0][b("110_111_011")] = ⵠΔ[1025][0][b("110_111_110")];
    ⵠΔ[1025][0][b("110_111_010")] = ⵠΔ[1025][0][b("110_111_110")];
    ⵠΔ[1025][0][b("111_111_110")] = [Ⲇᐃ.ΔⲆᐃⵠΔ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ, Ⲇᐃ.ⵠΔᐃᐃⲆⵠᐃ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ];
    ⵠΔ[1025][0][b("111_111_011")] = ⵠΔ[1025][0][b("111_111_110")];
    ⵠΔ[1025][0][b("111_111_000")] = [Ⲇᐃ.ⵠⲆⵠᐃⵠᐃⵠ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ⵠΔᐃᐃⲆⵠᐃ];
    ⵠΔ[1025][0][b("111_111_111")] = [Ⲇᐃ.ⵠᐃⲆΔⵠΔⵠ, Ⲇᐃ.ⵠⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠΔΔⲆᐃⲆᐃ, Ⲇᐃ.ⵠᐃⲆⲆⲆ, Ⲇᐃ.ᐃⵠⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆⵠᐃ, Ⲇᐃ.ᐃᐃⲆᐃΔΔⲆ, Ⲇᐃ.ᐃⲆΔᐃΔᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⲆ, Ⲇᐃ.ᐃⵠⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃⵠᐃⲆⵠᐃⲆ, Ⲇᐃ.ΔΔΔⵠⵠ, Ⲇᐃ.ᐃⲆⲆⵠᐃᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠΔⵠⲆ, Ⲇᐃ.ᐃΔᐃΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⵠ, Ⲇᐃ.ΔⲆⲆⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠⲆΔ, Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ, Ⲇᐃ.Δᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆᐃⵠΔ];
    ⵠΔ[1025][0][b("111_111_010")] = ⵠΔ[1025][0][b("111_111_110")];
    ⵠΔ[1025][1] = [];
    ⵠΔ[1025][1][b("000_010_000")] = [Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ];
    ⵠΔ[1025][1][b("000_010_010")] = ⵠΔ[1025][1][b("000_010_000")];
    ⵠΔ[1025][1][b("000_011_000")] = ⵠΔ[1025][1][b("000_010_000")];
    ⵠΔ[1025][1][b("000_011_010")] = [Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ];
    ⵠΔ[1025][1][b("000_011_011")] = [Ⲇᐃ.ⲆᐃᐃⲆΔᐃⲆ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ];
    ⵠΔ[1025][1][b("000_110_000")] = [Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆⵠΔⲆᐃ];
    ⵠΔ[1025][1][b("000_110_010")] = [Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⵠⵠΔᐃ];
    ⵠΔ[1025][1][b("000_110_110")] = [Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ⵠⲆⲆⲆⲆΔᐃ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⵠⵠΔᐃ];
    ⵠΔ[1025][1][b("000_111_000")] = [Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ];
    ⵠΔ[1025][1][b("000_111_111")] = [Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ⲆᐃᐃⲆΔᐃⲆ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ];
    ⵠΔ[1025][1][b("010_010_000")] = [Ⲇᐃ.ⲆⵠΔⲆᐃ];
    ⵠΔ[1025][1][b("010_010_010")] = [Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ];
    ⵠΔ[1025][1][b("010_011_000")] = [Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⵠⵠΔΔⲆ];
    ⵠΔ[1025][1][b("010_110_000")] = [Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("010_110_110")] = [Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("010_011_010")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_011_011")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("000_111_011")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_110_010")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_111_000")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_111_010")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_111_011")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_111_110")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("010_111_111")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("000_111_110")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("000_111_010")] = ⵠΔ[1025][1][b("010_110_110")];
    ⵠΔ[1025][1][b("011_011_000")] = [Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⵠⵠΔΔⲆ];
    ⵠΔ[1025][1][b("011_011_010")] = [Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("011_011_011")] = [Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ⲆᐃᐃⲆΔᐃⲆ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ];
    ⵠΔ[1025][1][b("011_111_000")] = ⵠΔ[1025][1][b("011_011_010")];
    ⵠΔ[1025][1][b("011_111_010")] = [Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("011_111_011")] = ⵠΔ[1025][1][b("011_111_010")];
    ⵠΔ[1025][1][b("011_111_110")] = ⵠΔ[1025][1][b("011_111_010")];
    ⵠΔ[1025][1][b("011_111_111")] = [Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ⲆᐃᐃⲆΔᐃⲆ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("110_110_000")] = [Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔⲆᐃᐃΔ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("110_110_010")] = [Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("110_110_110")] = [Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("110_111_000")] = [Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔⲆᐃᐃΔ, Ⲇᐃ.ᐃΔᐃⲆᐃΔᐃ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("110_111_110")] = [Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ, Ⲇᐃ.ᐃΔᐃⲆᐃΔᐃ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("110_111_111")] = ⵠΔ[1025][1][b("110_111_110")];
    ⵠΔ[1025][1][b("110_111_011")] = ⵠΔ[1025][1][b("110_111_110")];
    ⵠΔ[1025][1][b("110_111_010")] = ⵠΔ[1025][1][b("110_111_110")];
    ⵠΔ[1025][1][b("111_111_110")] = [Ⲇᐃ.ⵠᐃΔΔⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ, Ⲇᐃ.ᐃΔᐃⲆᐃΔᐃ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ];
    ⵠΔ[1025][1][b("111_111_011")] = ⵠΔ[1025][1][b("111_111_110")];
    ⵠΔ[1025][1][b("111_111_000")] = [Ⲇᐃ.ⲆᐃΔⲆᐃᐃΔ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ᐃΔᐃⲆᐃΔᐃ];
    ⵠΔ[1025][1][b("111_111_111")] = [Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ, Ⲇᐃ.ΔⵠᐃΔⵠ, Ⲇᐃ.ΔⵠΔⵠᐃ, Ⲇᐃ.ⲆᐃᐃⲆΔᐃⲆ, Ⲇᐃ.ᐃⵠⲆⵠⵠ, Ⲇᐃ.ΔⲆΔΔᐃ, Ⲇᐃ.ΔⲆⲆΔΔ, Ⲇᐃ.ᐃΔⵠⵠⲆᐃΔ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠⵠ, Ⲇᐃ.ⵠᐃΔⵠᐃ, Ⲇᐃ.ⲆᐃΔΔΔⵠⲆ, Ⲇᐃ.ᐃΔᐃⲆᐃΔΔ, Ⲇᐃ.ΔⲆΔⵠΔΔⲆ, Ⲇᐃ.ΔΔΔⲆⵠ, Ⲇᐃ.ΔᐃⵠᐃΔᐃΔ, Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔᐃⲆΔⵠ, Ⲇᐃ.ΔᐃΔΔΔΔΔ, Ⲇᐃ.ᐃΔⲆⲆⲆⲆⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆ, Ⲇᐃ.ⵠⵠΔΔⲆ, Ⲇᐃ.ⵠᐃΔΔⲆ];
    ⵠΔ[1025][1][b("111_111_010")] = ⵠΔ[1025][1][b("111_111_110")];
    ⵠΔ[1024] = [];
    ⵠΔ[1024][0] = [];
    ⵠΔ[1024][0][b("000_010_000")] = Ⲇᐃ.ⵠⲆⵠⵠᐃᐃⲆ;
    ⵠΔ[1024][0][b("000_010_010")] = Ⲇᐃ.ᐃᐃⲆᐃΔΔᐃ;
    ⵠΔ[1024][0][b("000_011_000")] = Ⲇᐃ.Δᐃⵠᐃⵠᐃⵠ;
    ⵠΔ[1024][0][b("000_011_010")] = Ⲇᐃ.ᐃΔΔΔⵠⲆⲆ;
    ⵠΔ[1024][0][b("000_011_011")] = Ⲇᐃ.ΔᐃⵠΔⵠᐃΔ;
    ⵠΔ[1024][0][b("000_110_000")] = Ⲇᐃ.ᐃⲆⲆⵠⲆᐃⲆ;
    ⵠΔ[1024][0][b("000_110_010")] = Ⲇᐃ.ΔΔⲆᐃΔΔⲆ;
    ⵠΔ[1024][0][b("000_110_110")] = Ⲇᐃ.ⵠⲆᐃⲆⵠⵠᐃ;
    ⵠΔ[1024][0][b("000_111_000")] = Ⲇᐃ.ᐃⲆΔⵠⵠΔⲆ;
    ⵠΔ[1024][0][b("000_111_010")] = Ⲇᐃ.ΔΔⲆⲆΔⲆᐃ;
    ⵠΔ[1024][0][b("000_111_011")] = Ⲇᐃ.ΔⵠⲆⲆⲆⲆᐃ;
    ⵠΔ[1024][0][b("000_111_110")] = Ⲇᐃ.ΔΔⲆᐃⵠⵠⲆ;
    ⵠΔ[1024][0][b("000_111_111")] = Ⲇᐃ.ᐃᐃᐃᐃⲆΔᐃ;
    ⵠΔ[1024][0][b("010_010_000")] = Ⲇᐃ.ⲆΔᐃⵠⵠⵠΔ;
    ⵠΔ[1024][0][b("010_010_010")] = Ⲇᐃ.ΔⲆᐃᐃΔⲆⲆ;
    ⵠΔ[1024][0][b("010_011_000")] = Ⲇᐃ.ⲆΔⵠⵠⲆΔᐃ;
    ⵠΔ[1024][0][b("010_011_010")] = Ⲇᐃ.ᐃⲆⲆⲆΔⲆᐃ;
    ⵠΔ[1024][0][b("010_011_011")] = Ⲇᐃ.ᐃΔᐃⲆⲆΔᐃ;
    ⵠΔ[1024][0][b("010_110_000")] = Ⲇᐃ.ⵠⲆⵠⵠΔΔⵠ;
    ⵠΔ[1024][0][b("010_110_010")] = Ⲇᐃ.ⲆᐃΔᐃⲆΔⵠ;
    ⵠΔ[1024][0][b("010_110_110")] = Ⲇᐃ.ΔᐃⵠᐃΔⵠⲆ;
    ⵠΔ[1024][0][b("010_111_000")] = Ⲇᐃ.ᐃΔΔⵠⲆΔⵠ;
    ⵠΔ[1024][0][b("010_111_010")] = Ⲇᐃ.ⲆᐃⵠΔⲆᐃⵠ;
    ⵠΔ[1024][0][b("010_111_011")] = Ⲇᐃ.ᐃⵠΔⲆΔⵠⵠ;
    ⵠΔ[1024][0][b("010_111_110")] = Ⲇᐃ.ⵠⵠⲆⲆⵠᐃΔ;
    ⵠΔ[1024][0][b("010_111_111")] = Ⲇᐃ.ᐃᐃⵠᐃΔᐃᐃ;
    ⵠΔ[1024][0][b("011_011_000")] = Ⲇᐃ.ᐃⲆⵠΔⵠᐃⲆ;
    ⵠΔ[1024][0][b("011_011_010")] = Ⲇᐃ.ⵠΔΔⵠⵠⲆΔ;
    ⵠΔ[1024][0][b("011_011_011")] = Ⲇᐃ.ΔᐃⲆⵠΔᐃΔ;
    ⵠΔ[1024][0][b("011_111_000")] = Ⲇᐃ.ⵠⲆⲆᐃⵠᐃⵠ;
    ⵠΔ[1024][0][b("011_111_010")] = Ⲇᐃ.ⲆⲆⵠⲆᐃΔⲆ;
    ⵠΔ[1024][0][b("011_111_011")] = Ⲇᐃ.ΔᐃΔⵠΔⲆΔ;
    ⵠΔ[1024][0][b("011_111_110")] = Ⲇᐃ.ⲆΔᐃΔᐃᐃⲆ;
    ⵠΔ[1024][0][b("011_111_111")] = Ⲇᐃ.ΔⲆⲆⲆΔⲆᐃ;
    ⵠΔ[1024][0][b("110_110_000")] = Ⲇᐃ.ⲆΔᐃΔⵠⵠᐃ;
    ⵠΔ[1024][0][b("110_110_010")] = Ⲇᐃ.ΔΔΔΔΔΔⵠ;
    ⵠΔ[1024][0][b("110_110_110")] = Ⲇᐃ.ⵠᐃⵠΔᐃⵠΔ;
    ⵠΔ[1024][0][b("110_111_000")] = Ⲇᐃ.ΔᐃᐃᐃⵠⲆⲆ;
    ⵠΔ[1024][0][b("110_111_010")] = Ⲇᐃ.ⵠΔⲆΔᐃⲆΔ;
    ⵠΔ[1024][0][b("110_111_011")] = Ⲇᐃ.ⲆΔΔᐃⵠᐃⵠ;
    ⵠΔ[1024][0][b("110_111_110")] = Ⲇᐃ.ⲆΔⲆⵠᐃᐃⲆ;
    ⵠΔ[1024][0][b("110_111_111")] = Ⲇᐃ.ⵠᐃᐃⵠᐃⵠⲆ;
    ⵠΔ[1024][0][b("111_111_011")] = Ⲇᐃ.ᐃᐃⵠᐃⵠΔᐃ;
    ⵠΔ[1024][0][b("111_111_110")] = Ⲇᐃ.ⵠΔᐃΔᐃᐃΔ;
    ⵠΔ[1024][0][b("111_111_011")] = Ⲇᐃ.ᐃᐃⵠᐃⵠΔᐃ;
    ⵠΔ[1024][0][b("111_111_000")] = Ⲇᐃ.ⲆⲆⵠⲆⲆⵠΔ;
    ⵠΔ[1024][0][b("111_111_111")] = Ⲇᐃ.ᐃⲆΔᐃⵠⲆΔ;
    ⵠΔ[1024][0][b("111_111_010")] = Ⲇᐃ.ⵠᐃⲆΔᐃⵠⲆ;
    ⵠΔ[1024][1] = [];
    ⵠΔ[1024][1][b("000_010_000")] = Ⲇᐃ.ⲆΔᐃⵠⲆⲆᐃ;
    ⵠΔ[1024][1][b("000_010_010")] = Ⲇᐃ.ᐃⲆⵠⵠⲆᐃⵠ;
    ⵠΔ[1024][1][b("000_011_000")] = Ⲇᐃ.ΔⵠⵠⵠⵠⵠΔ;
    ⵠΔ[1024][1][b("000_011_010")] = Ⲇᐃ.ⵠⵠᐃᐃΔⵠᐃ;
    ⵠΔ[1024][1][b("000_011_011")] = Ⲇᐃ.ⲆⵠΔⲆⲆⲆⲆ;
    ⵠΔ[1024][1][b("000_110_000")] = Ⲇᐃ.ΔΔⵠΔᐃᐃᐃ;
    ⵠΔ[1024][1][b("000_110_010")] = Ⲇᐃ.ᐃᐃΔᐃⲆΔΔ;
    ⵠΔ[1024][1][b("000_110_110")] = Ⲇᐃ.ⵠⲆΔⲆⲆⲆᐃ;
    ⵠΔ[1024][1][b("000_111_000")] = Ⲇᐃ.ⲆᐃΔᐃΔᐃⲆ;
    ⵠΔ[1024][1][b("000_111_010")] = Ⲇᐃ.ⲆⲆⵠΔⲆⲆⵠ;
    ⵠΔ[1024][1][b("000_111_011")] = Ⲇᐃ.ΔⵠⵠⵠⲆⲆⲆ;
    ⵠΔ[1024][1][b("000_111_110")] = Ⲇᐃ.ⲆⲆΔⵠⵠⲆⲆ;
    ⵠΔ[1024][1][b("000_111_111")] = Ⲇᐃ.ᐃⲆⵠΔⲆⵠⲆ;
    ⵠΔ[1024][1][b("010_010_000")] = Ⲇᐃ.ⵠⵠⲆⵠⲆⲆᐃ;
    ⵠΔ[1024][1][b("010_010_010")] = Ⲇᐃ.ⵠᐃⵠⲆⵠⲆⲆ;
    ⵠΔ[1024][1][b("010_011_000")] = Ⲇᐃ.ⲆⵠⵠⵠⲆΔΔ;
    ⵠΔ[1024][1][b("010_011_010")] = Ⲇᐃ.ⵠΔᐃΔᐃΔⲆ;
    ⵠΔ[1024][1][b("010_011_011")] = Ⲇᐃ.ⲆΔΔⲆΔⵠΔ;
    ⵠΔ[1024][1][b("010_110_000")] = Ⲇᐃ.ΔΔⲆᐃᐃⵠⵠ;
    ⵠΔ[1024][1][b("010_110_010")] = Ⲇᐃ.ⲆⲆΔΔⲆⲆΔ;
    ⵠΔ[1024][1][b("010_110_110")] = Ⲇᐃ.ᐃΔⲆΔΔⲆⲆ;
    ⵠΔ[1024][1][b("010_111_000")] = Ⲇᐃ.ⲆᐃⲆⲆΔΔⵠ;
    ⵠΔ[1024][1][b("010_111_010")] = Ⲇᐃ.ⵠᐃΔⵠΔΔⲆ;
    ⵠΔ[1024][1][b("010_111_011")] = Ⲇᐃ.ⲆΔⵠΔΔⲆΔ;
    ⵠΔ[1024][1][b("010_111_110")] = Ⲇᐃ.ⵠⲆᐃⲆⵠΔⵠ;
    ⵠΔ[1024][1][b("010_111_111")] = Ⲇᐃ.ⵠⵠΔⵠΔⲆⲆ;
    ⵠΔ[1024][1][b("011_011_000")] = Ⲇᐃ.ΔᐃⵠΔᐃᐃΔ;
    ⵠΔ[1024][1][b("011_011_010")] = Ⲇᐃ.ΔⵠⲆᐃⲆΔⵠ;
    ⵠΔ[1024][1][b("011_011_011")] = Ⲇᐃ.ⵠⲆΔⲆⵠᐃΔ;
    ⵠΔ[1024][1][b("011_111_000")] = Ⲇᐃ.ⲆᐃⵠᐃⵠⲆᐃ;
    ⵠΔ[1024][1][b("011_111_010")] = Ⲇᐃ.ⲆⵠᐃⵠⲆᐃⲆ;
    ⵠΔ[1024][1][b("011_111_011")] = Ⲇᐃ.ⵠⲆΔⵠⲆΔⲆ;
    ⵠΔ[1024][1][b("011_111_110")] = Ⲇᐃ.ⲆΔⵠΔᐃⲆⲆ;
    ⵠΔ[1024][1][b("011_111_111")] = Ⲇᐃ.ⵠⲆΔⲆΔᐃᐃ;
    ⵠΔ[1024][1][b("110_110_000")] = Ⲇᐃ.ᐃⵠⲆⲆᐃᐃⵠ;
    ⵠΔ[1024][1][b("110_110_010")] = Ⲇᐃ.ⵠⲆᐃΔⲆⲆΔ;
    ⵠΔ[1024][1][b("110_110_110")] = Ⲇᐃ.ᐃᐃⵠΔⲆΔⵠ;
    ⵠΔ[1024][1][b("110_111_000")] = Ⲇᐃ.ᐃΔⲆⲆᐃᐃⵠ;
    ⵠΔ[1024][1][b("110_111_010")] = Ⲇᐃ.ΔⲆⵠΔᐃⲆⵠ;
    ⵠΔ[1024][1][b("110_111_011")] = Ⲇᐃ.ⵠΔΔΔⲆⵠⵠ;
    ⵠΔ[1024][1][b("110_111_110")] = Ⲇᐃ.ⲆᐃᐃᐃΔⵠᐃ;
    ⵠΔ[1024][1][b("110_111_111")] = Ⲇᐃ.ⲆⵠⲆⲆΔᐃΔ;
    ⵠΔ[1024][1][b("111_111_011")] = Ⲇᐃ.ᐃΔⲆΔΔⵠᐃ;
    ⵠΔ[1024][1][b("111_111_110")] = Ⲇᐃ.ⵠⵠᐃΔⵠᐃⵠ;
    ⵠΔ[1024][1][b("111_111_011")] = Ⲇᐃ.ᐃΔⲆΔΔⵠᐃ;
    ⵠΔ[1024][1][b("111_111_000")] = Ⲇᐃ.ⵠⲆⵠⵠⲆΔᐃ;
    ⵠΔ[1024][1][b("111_111_111")] = Ⲇᐃ.ⵠΔΔΔⲆᐃⲆ;
    ⵠΔ[1024][1][b("111_111_010")] = Ⲇᐃ.ᐃᐃᐃᐃΔⲆⵠ;
    ⵠΔ[32] = [];
    ⵠΔ[32][0] = Ⲇᐃ.ⵠⵠⵠⲆΔⲆⲆ;
    ⵠΔ[32][1] = Ⲇᐃ.ⵠΔΔΔⲆΔⲆ;
    ⵠΔ[205] = [];
    ⵠΔ[205][0] = Ⲇᐃ.ΔⵠᐃⵠᐃⲆⲆ;
    ⵠΔ[205][1] = Ⲇᐃ.ΔΔⲆᐃᐃⲆᐃ;
    ⵠΔ[957] = [];
    ⵠΔ[957][0] = Ⲇᐃ.ᐃᐃⵠΔᐃᐃᐃ;
    ⵠΔ[957][1] = Ⲇᐃ.ᐃⲆⲆⵠΔΔΔ;
    ⵠΔ[207] = [];
    ⵠΔ[207][0] = Ⲇᐃ.ⵠⵠⵠⵠᐃΔᐃ;
    ⵠΔ[207][1] = Ⲇᐃ.ⵠⲆⲆⲆⲆⲆⵠ;
    ⵠΔ[954] = [];
    ⵠΔ[954][0] = Ⲇᐃ.ⲆⲆⲆⵠΔⵠᐃ;
    ⵠΔ[954][1] = Ⲇᐃ.ⵠᐃΔᐃⲆⵠⵠ;
    ⵠΔ[958] = [];
    ⵠΔ[958][0] = Ⲇᐃ.ⵠᐃᐃⲆⲆΔᐃ;
    ⵠΔ[958][1] = Ⲇᐃ.ⲆΔⲆᐃⵠⵠⲆ;
    ⵠΔ[209] = [];
    ⵠΔ[209][0] = Ⲇᐃ.ⵠⵠᐃΔΔⲆⵠ;
    ⵠΔ[209][1] = Ⲇᐃ.ᐃΔⲆⲆⲆⵠⵠ;
    ⵠΔ[971] = [];
    ⵠΔ[971][0] = Ⲇᐃ.ΔΔⵠⵠᐃⲆⲆ;
    ⵠΔ[971][1] = Ⲇᐃ.ⵠᐃΔΔⲆⵠᐃ;
    ⵠΔ[211] = [];
    ⵠΔ[211][0] = Ⲇᐃ.ΔᐃⵠΔⵠᐃⲆ;
    ⵠΔ[211][1] = Ⲇᐃ.ⲆⲆΔⵠⵠⵠⲆ;
    ⵠΔ[986] = [];
    ⵠΔ[986][0] = Ⲇᐃ.Ⲇⵠᐃᐃⵠᐃⵠ;
    ⵠΔ[986][1] = Ⲇᐃ.ⲆΔΔⵠᐃΔⲆ;
    ⵠΔ[989] = [];
    ⵠΔ[989][0] = [Ⲇᐃ.ᐃᐃΔΔⵠⵠᐃ];
    ⵠΔ[989][1] = [Ⲇᐃ.ᐃⲆⵠⲆᐃΔⲆ];
    ⵠΔ[217] = [];
    ⵠΔ[217][0] = Ⲇᐃ.ΔᐃᐃΔΔⵠⵠ;
    ⵠΔ[217][1] = Ⲇᐃ.ⵠᐃΔΔΔⵠΔ;
    ⵠΔ[219] = [];
    ⵠΔ[219][0] = Ⲇᐃ.ⲆΔⵠΔⵠⲆᐃ;
    ⵠΔ[219][1] = Ⲇᐃ.ᐃⵠΔΔⲆᐃⲆ;
    ⵠΔ[218] = [];
    ⵠΔ[218][0] = Ⲇᐃ.ⲆⵠⵠⵠⲆⲆⵠ;
    ⵠΔ[218][1] = Ⲇᐃ.ΔⲆᐃΔⵠⲆⵠ;
    ⵠΔ[212] = [];
    ⵠΔ[212][0] = Ⲇᐃ.ⲆⲆⵠⲆᐃⵠⲆ;
    ⵠΔ[212][1] = Ⲇᐃ.ΔⲆΔΔΔⵠᐃ;
    ⵠΔ[213] = [];
    ⵠΔ[213][0] = Ⲇᐃ.ΔⲆⲆΔⵠᐃΔ;
    ⵠΔ[213][1] = Ⲇᐃ.ⵠΔⵠΔΔᐃΔ;
    ⵠΔ[214] = [];
    ⵠΔ[214][0] = Ⲇᐃ.ΔⵠᐃᐃⲆΔⵠ;
    ⵠΔ[214][1] = Ⲇᐃ.ΔⲆⲆΔᐃⵠⵠ;
    ⵠΔ[215] = [];
    ⵠΔ[215][0] = Ⲇᐃ.ⲆΔⲆⵠⵠⵠᐃ;
    ⵠΔ[215][1] = Ⲇᐃ.ΔΔⲆᐃᐃΔⵠ;
    ⵠΔ[216] = [];
    ⵠΔ[216][0] = Ⲇᐃ.ΔᐃⵠⵠⲆΔᐃ;
    ⵠΔ[216][1] = Ⲇᐃ.ⲆⲆⲆΔΔΔΔ;
    ⵠΔ[220] = [];
    ⵠΔ[220][0] = Ⲇᐃ.ⲆΔⲆᐃⲆⲆⲆ;
    ⵠΔ[220][1] = Ⲇᐃ.ⲆⲆᐃⵠᐃⵠᐃ;
    ⵠΔ[1020] = [];
    ⵠΔ[1020][0] = Ⲇᐃ.ΔⲆⵠⲆΔⵠⲆ;
    ⵠΔ[1020][1] = Ⲇᐃ.ⲆᐃⵠΔⵠᐃᐃ;
    ⵠΔ[1021] = [];
    ⵠΔ[1021][0] = Ⲇᐃ.ⵠᐃⲆⵠⵠⵠⲆ;
    ⵠΔ[1021][1] = Ⲇᐃ.ᐃᐃΔⵠⲆⲆΔ;
    ⵠΔ[39] = [];
    ⵠΔ[39][0] = Ⲇᐃ.ⲆΔⵠⵠⵠΔΔ;
    ⵠΔ[39][1] = Ⲇᐃ.ⲆⵠⵠⵠⲆᐃⲆ;
    ⵠΔ[1022] = Ⲇᐃ.ⵠⲆᐃΔⵠᐃⵠ;
    ⵠΔ[1023] = Ⲇᐃ.ΔⲆⵠΔⲆΔΔ;
    ⵠΔ[1041] = [];
    ⵠΔ[1041][0] = [];
    ⵠΔ[1041][1] = [];
    ⵠΔ[1041][0].push(Ⲇᐃ.ⵠⲆⲆΔΔΔᐃ);
    ⵠΔ[1041][0].push(Ⲇᐃ.ⲆᐃⵠⵠᐃⲆᐃ);
    ⵠΔ[1041][0].push(Ⲇᐃ.ᐃᐃΔⵠΔⲆⵠ);
    ⵠΔ[1041][1].push(Ⲇᐃ.ᐃᐃⵠΔᐃⲆᐃ);
    ⵠΔ[1041][1].push(Ⲇᐃ.ⵠΔⵠⲆᐃΔⲆ);
    ⵠΔ[1041][1].push(Ⲇᐃ.ⲆⲆⲆⲆΔⵠΔ);
    ⵠΔ[244] = [];
    ⵠΔ[244][0] = [];
    ⵠΔ[244][1] = [];
    ⵠΔ[244][0].push(Ⲇᐃ.ᐃⵠⲆⵠⵠⵠᐃ);
    ⵠΔ[244][0].push(Ⲇᐃ.ΔⵠⵠⲆⵠⵠᐃ);
    ⵠΔ[244][0].push(Ⲇᐃ.ΔⲆΔΔⲆΔᐃ);
    ⵠΔ[244][1].push(Ⲇᐃ.ᐃⵠⵠⲆⲆⲆⵠ);
    ⵠΔ[244][1].push(Ⲇᐃ.ᐃⲆⵠᐃⵠΔΔ);
    ⵠΔ[244][1].push(Ⲇᐃ.ᐃⵠᐃⵠΔΔⵠ);
    ⵠΔ[1052] = [];
    ⵠΔ[1052][0] = [];
    ⵠΔ[1052][1] = [];
    ⵠΔ[1052][0].push(Ⲇᐃ.ⵠᐃⵠⲆᐃⵠᐃ);
    ⵠΔ[1052][0].push(Ⲇᐃ.ⵠⲆᐃⲆᐃⲆⵠ);
    ⵠΔ[1052][0].push(Ⲇᐃ.ⲆᐃⵠΔᐃⵠⵠ);
    ⵠΔ[1052][0].push(Ⲇᐃ.ⲆΔⵠⵠⵠⵠΔ);
    ⵠΔ[1052][0].push(Ⲇᐃ.ⵠᐃᐃⵠᐃΔⵠ);
    ⵠΔ[1052][1].push(Ⲇᐃ.ᐃⲆⲆΔⲆⲆᐃ);
    ⵠΔ[1052][1].push(Ⲇᐃ.ΔⲆᐃⲆᐃΔⵠ);
    ⵠΔ[1052][1].push(Ⲇᐃ.ⵠᐃΔᐃΔᐃΔ);
    ⵠΔ[1052][1].push(Ⲇᐃ.ⵠⵠⵠⵠⵠⵠⲆ);
    ⵠΔ[1052][1].push(Ⲇᐃ.ⵠΔᐃΔⲆⵠᐃ);
    ⵠΔ[450] = [];
    ⵠΔ[450][0] = Ⲇᐃ.ΔΔΔⵠⲆⵠΔ;
    ⵠΔ[450][1] = Ⲇᐃ.ⵠⲆΔⲆⲆΔΔ;
    ⵠΔ[453] = [];
    ⵠΔ[453][0] = Ⲇᐃ.ⵠᐃΔᐃⵠΔⲆ;
    ⵠΔ[453][1] = Ⲇᐃ.ΔⵠⲆⲆⲆΔᐃ;
    ⵠΔ[454] = [];
    ⵠΔ[454][0] = Ⲇᐃ.ⲆⲆⲆⵠᐃᐃⵠ;
    ⵠΔ[454][1] = Ⲇᐃ.ΔⵠΔⵠⲆⲆΔ;
    ⵠΔ[464] = Ⲇᐃ.ΔⲆᐃΔΔⵠⵠ;
    ⵠΔ[468] = Ⲇᐃ.ᐃⵠⲆⲆⵠⲆᐃ;
    ⵠΔ[469] = Ⲇᐃ.ᐃΔΔⵠⵠⲆΔ;
    ⵠΔ[20] = [];
    ⵠΔ[20][0] = Ⲇᐃ.ΔⲆⵠΔᐃⵠⲆ;
    ⵠΔ[20][1] = Ⲇᐃ.ⵠⵠⲆΔⲆⲆⲆ;
    ⵠΔ[920] = [];
    ⵠΔ[920][0] = Ⲇᐃ.ⲆⵠᐃΔⲆⲆⵠ;
    ⵠΔ[920][1] = Ⲇᐃ.ⲆⲆⲆⲆᐃⲆᐃ;
    ⵠΔ[21] = [];
    ⵠΔ[21][0] = Ⲇᐃ.ᐃⵠⲆⵠⲆⲆⵠ;
    ⵠΔ[21][1] = Ⲇᐃ.ᐃⵠᐃⵠⵠΔⲆ;
    ⵠΔ[924] = [];
    ⵠΔ[924][0] = Ⲇᐃ.ⲆⵠᐃΔⲆⲆⵠ;
    ⵠΔ[924][1] = Ⲇᐃ.ⲆⲆⲆⲆᐃⲆᐃ;
    ⵠΔ[44] = [];
    ⵠΔ[44][0] = Ⲇᐃ.ⲆΔⲆⵠⲆⲆⵠ;
    ⵠΔ[44][1] = Ⲇᐃ.ⲆΔΔⲆⵠᐃⵠ;
    ⵠΔ[19] = [];
    ⵠΔ[19][0] = Ⲇᐃ.ⵠᐃΔᐃᐃⲆΔ;
    ⵠΔ[19][1] = Ⲇᐃ.ⵠⲆⵠⵠΔⲆᐃ;
    ⵠΔ[34] = [];
    ⵠΔ[34][0] = Ⲇᐃ.ᐃⵠⵠⲆΔⵠⵠ;
    ⵠΔ[34][1] = Ⲇᐃ.ⵠᐃⵠⲆⵠⵠΔ;
    ⵠΔ[17] = [];
    ⵠΔ[17][0] = Ⲇᐃ.ⲆΔⵠⲆⵠⵠΔ;
    ⵠΔ[17][1] = Ⲇᐃ.ⵠᐃᐃⲆⵠΔᐃ;
    ⵠΔ[63] = [];
    ⵠΔ[63][0] = Ⲇᐃ.ⵠΔΔᐃΔᐃⲆ;
    ⵠΔ[63][1] = Ⲇᐃ.ⲆⵠⵠΔⲆᐃΔ;
    ⵠΔ[60] = [];
    ⵠΔ[60][0] = Ⲇᐃ.ⵠᐃᐃΔΔⵠΔ;
    ⵠΔ[60][1] = Ⲇᐃ.ⲆᐃⲆΔᐃΔⵠ;
    ⵠΔ[94] = [];
    ⵠΔ[94][0] = Ⲇᐃ.ΔⵠᐃⲆⲆΔΔⲆΔ;
    ⵠΔ[94][1] = Ⲇᐃ.ⲆⵠΔⲆⲆΔⵠⲆⵠ;
    ⵠΔ[95] = [];
    ⵠΔ[95][0] = Ⲇᐃ.ⲆⵠⲆⵠΔⵠⵠᐃⵠ;
    ⵠΔ[95][1] = Ⲇᐃ.ᐃᐃⵠΔⵠΔᐃΔⵠ;
    ⵠΔ[96] = [];
    ⵠΔ[96][0] = Ⲇᐃ.ⵠⲆⲆᐃⲆΔⵠᐃⲆ;
    ⵠΔ[96][1] = Ⲇᐃ.ᐃⵠⲆⲆΔᐃⵠΔⵠ;
    ⵠΔ[97] = [];
    ⵠΔ[97][0] = Ⲇᐃ.ΔΔⵠΔΔⵠⵠᐃⲆ;
    ⵠΔ[97][1] = Ⲇᐃ.ᐃⵠⵠⵠᐃⲆⲆᐃⲆ;
    ⵠΔ[98] = [];
    ⵠΔ[98][0] = Ⲇᐃ.ⲆᐃᐃⵠⵠΔⲆⵠⲆ;
    ⵠΔ[98][1] = Ⲇᐃ.ΔⵠⵠⵠᐃⵠⲆⲆΔ;
    ⵠΔ[99] = [];
    ⵠΔ[99][0] = Ⲇᐃ.ⵠⲆΔΔᐃⵠᐃⲆⵠ;
    ⵠΔ[99][1] = Ⲇᐃ.ⵠᐃⲆⲆⲆᐃⲆⵠⵠ;
    ⵠΔ[90] = [];
    ⵠΔ[90][0] = Ⲇᐃ.ΔⲆᐃⵠᐃⲆⲆ;
    ⵠΔ[90][1] = Ⲇᐃ.ΔⵠⲆᐃΔᐃΔ;
    ⵠΔ[91] = [];
    ⵠΔ[91][0] = Ⲇᐃ.ⲆᐃᐃᐃⲆΔⲆ;
    ⵠΔ[91][1] = Ⲇᐃ.ⵠΔⲆⲆⲆⲆᐃ;
    ⵠΔ[71] = [];
    ⵠΔ[71][0] = Ⲇᐃ.ᐃᐃⵠⲆⲆΔⵠΔⲆ;
    ⵠΔ[71][1] = Ⲇᐃ.ΔΔΔΔⲆⵠᐃⲆᐃ;
    ⵠΔ[72] = [];
    ⵠΔ[72][0] = Ⲇᐃ.ΔⲆⵠΔᐃΔⵠⲆΔ;
    ⵠΔ[72][1] = Ⲇᐃ.ⲆᐃⵠⵠΔΔⲆΔⵠ;
    ⵠΔ[73] = [];
    ⵠΔ[73][0] = Ⲇᐃ.ΔⲆⲆⵠᐃⲆⵠⵠⲆ;
    ⵠΔ[73][1] = Ⲇᐃ.ⵠⲆⵠᐃⵠΔⵠᐃΔ;
    ⵠΔ[74] = [];
    ⵠΔ[74][0] = Ⲇᐃ.ⵠᐃⵠⲆΔⲆᐃⵠᐃ;
    ⵠΔ[74][1] = Ⲇᐃ.ᐃⲆΔⲆᐃⲆᐃΔᐃ;
    ⵠΔ[75] = [];
    ⵠΔ[75][0] = Ⲇᐃ.ⵠΔᐃⵠⵠᐃⲆᐃΔ;
    ⵠΔ[75][1] = Ⲇᐃ.ΔᐃΔᐃⲆᐃⲆⵠⵠ;
    ⵠΔ[76] = [];
    ⵠΔ[76][0] = Ⲇᐃ.ⵠΔⵠΔᐃⵠΔⵠΔ;
    ⵠΔ[76][1] = Ⲇᐃ.ᐃⵠΔⵠΔⵠⵠⲆᐃ;
    ⵠΔ[101] = [];
    ⵠΔ[101][0] = Ⲇᐃ.ΔⵠⵠⲆΔΔⵠ;
    ⵠΔ[101][1] = Ⲇᐃ.ᐃⵠΔᐃΔΔΔ;
    ⵠΔ[64] = [];
    ⵠΔ[64][0] = Ⲇᐃ.ⲆΔⲆⵠᐃⵠΔ;
    ⵠΔ[64][1] = Ⲇᐃ.ᐃᐃⵠΔΔᐃⲆ;
    ⵠΔ[102] = [];
    ⵠΔ[102][0] = Ⲇᐃ.ᐃⵠⲆᐃⵠᐃΔ;
    ⵠΔ[102][1] = Ⲇᐃ.ᐃⲆΔⲆⲆⲆⲆ;
    ⵠΔ[65] = [];
    ⵠΔ[65][0] = Ⲇᐃ.ΔⲆⵠΔΔⲆⲆ;
    ⵠΔ[65][1] = Ⲇᐃ.ᐃᐃΔⲆᐃⲆΔ;
    ⵠΔ[103] = [];
    ⵠΔ[103][0] = Ⲇᐃ.ᐃᐃΔᐃⵠⲆⵠ;
    ⵠΔ[103][1] = Ⲇᐃ.ⲆᐃᐃⵠⵠⲆᐃ;
    ⵠΔ[66] = [];
    ⵠΔ[66][0] = Ⲇᐃ.ΔΔⲆⵠΔΔᐃ;
    ⵠΔ[66][1] = Ⲇᐃ.ᐃⵠᐃⲆⵠⵠᐃ;
    ⵠΔ[104] = [];
    ⵠΔ[104][0] = Ⲇᐃ.ⲆᐃⲆᐃᐃⲆⲆ;
    ⵠΔ[104][1] = Ⲇᐃ.ⵠᐃⲆⵠⲆΔⲆ;
    ⵠΔ[67] = [];
    ⵠΔ[67][0] = Ⲇᐃ.ᐃⲆΔⲆⵠⵠⵠ;
    ⵠΔ[67][1] = Ⲇᐃ.ΔΔΔΔΔⲆⵠ;
    ⵠΔ[105] = [];
    ⵠΔ[105][0] = Ⲇᐃ.ΔⵠΔΔΔⵠᐃ;
    ⵠΔ[105][1] = Ⲇᐃ.ⲆⵠᐃΔⵠⲆᐃ;
    ⵠΔ[68] = [];
    ⵠΔ[68][0] = Ⲇᐃ.ΔᐃⲆΔⵠᐃΔ;
    ⵠΔ[68][1] = Ⲇᐃ.ΔⲆⵠⲆⲆⲆⲆ;
    ⵠΔ[106] = [];
    ⵠΔ[106][0] = Ⲇᐃ.ᐃⵠⲆⲆΔⲆᐃ;
    ⵠΔ[106][1] = Ⲇᐃ.ᐃⵠᐃⲆⵠⲆⵠ;
    ⵠΔ[69] = [];
    ⵠΔ[69][0] = Ⲇᐃ.ᐃⲆᐃᐃᐃⲆᐃ;
    ⵠΔ[69][1] = Ⲇᐃ.ⲆⲆᐃᐃᐃⲆᐃ;
    ⵠΔ[107] = [];
    ⵠΔ[107][0] = Ⲇᐃ.ⵠᐃⲆⵠΔΔᐃ;
    ⵠΔ[107][1] = Ⲇᐃ.ⲆᐃᐃΔⵠᐃⵠ;
    ⵠΔ[70] = [];
    ⵠΔ[70][0] = Ⲇᐃ.ᐃⲆⵠⵠⵠᐃΔ;
    ⵠΔ[70][1] = Ⲇᐃ.ΔᐃΔᐃⵠᐃⵠ;
    ⵠΔ[80] = [];
    ⵠΔ[80][0] = Ⲇᐃ.ΔⵠⵠΔⵠⵠΔ;
    ⵠΔ[80][1] = Ⲇᐃ.ⲆⲆᐃⵠᐃⲆⲆ;
    ⵠΔ[81] = [];
    ⵠΔ[81][0] = Ⲇᐃ.ⲆΔᐃⲆΔⵠⵠ;
    ⵠΔ[81][1] = Ⲇᐃ.ΔᐃᐃⲆΔΔⵠ;
    ⵠΔ[22] = [];
    ⵠΔ[22][0] = Ⲇᐃ.ᐃΔⲆⵠⲆΔⲆ;
    ⵠΔ[22][1] = Ⲇᐃ.ⵠⲆⲆᐃⵠΔⵠ;
    ⵠΔ[928] = [];
    ⵠΔ[928][0] = Ⲇᐃ.ᐃᐃⵠⲆⲆΔⵠ;
    ⵠΔ[928][1] = Ⲇᐃ.ⲆⵠΔᐃΔᐃⲆ;
    ⵠΔ[935] = [];
    ⵠΔ[935][0] = [];
    ⵠΔ[935][1] = [];
    ⵠΔ[935][0].push(Ⲇᐃ.ΔⵠΔⵠⲆⵠΔⵠᐃ);
    ⵠΔ[935][0].push(Ⲇᐃ.ΔᐃⵠⲆⲆΔᐃΔΔ);
    ⵠΔ[935][1].push(Ⲇᐃ.ΔᐃⵠⲆⲆΔᐃΔΔ);
    ⵠΔ[935][1].push(Ⲇᐃ.ΔΔⲆⲆΔΔΔⵠⲆ);
    ⵠΔ[941] = [];
    ⵠΔ[941][0] = [];
    ⵠΔ[941][1] = [];
    ⵠΔ[941][0].push(Ⲇᐃ.ⲆⲆᐃⲆⵠΔⲆ);
    ⵠΔ[941][0].push(Ⲇᐃ.ⲆⲆⵠⵠⲆᐃⵠ);
    ⵠΔ[941][0].push(Ⲇᐃ.ᐃⲆⲆⵠⵠᐃᐃ);
    ⵠΔ[941][1].push(Ⲇᐃ.ᐃⲆᐃⵠΔΔᐃ);
    ⵠΔ[941][1].push(Ⲇᐃ.ᐃⲆΔⲆᐃⵠⵠ);
    ⵠΔ[941][1].push(Ⲇᐃ.ⵠΔᐃⲆΔⲆⵠ);
    ⵠΔ[53] = [];
    ⵠΔ[53][0] = Ⲇᐃ.ΔⲆⲆᐃⲆⵠⲆ;
    ⵠΔ[53][1] = Ⲇᐃ.ⵠⵠᐃⲆᐃⵠⲆ;
    ⵠΔ[54] = [];
    ⵠΔ[54][0] = Ⲇᐃ.ᐃᐃᐃⲆΔⲆⲆ;
    ⵠΔ[54][1] = Ⲇᐃ.ᐃΔⵠᐃᐃⵠᐃ;
    ⵠΔ[241] = [];
    ⵠΔ[241][0] = [];
    ⵠΔ[241][1] = [];
    ⵠΔ[241][0].push(Ⲇᐃ.ΔΔΔⵠᐃΔᐃ);
    ⵠΔ[241][0].push(Ⲇᐃ.ⲆΔⵠⲆΔΔⵠ);
    ⵠΔ[241][0].push(Ⲇᐃ.ⲆⲆᐃᐃⲆⲆΔ);
    ⵠΔ[241][1].push(Ⲇᐃ.ΔΔΔᐃⵠⲆᐃ);
    ⵠΔ[241][1].push(Ⲇᐃ.ᐃΔᐃᐃⲆΔⵠ);
    ⵠΔ[241][1].push(Ⲇᐃ.ΔⵠⲆᐃΔⲆᐃ);
    ⵠΔ[202] = [];
    ⵠΔ[202][0] = [];
    ⵠΔ[202][1] = [];
    ⵠΔ[202][0].push(Ⲇᐃ.ΔⵠⲆΔᐃⵠᐃ);
    ⵠΔ[202][0].push(Ⲇᐃ.ⵠⵠⲆΔⵠⲆⲆ);
    ⵠΔ[202][0].push(Ⲇᐃ.ⲆⵠᐃᐃΔᐃⵠ);
    ⵠΔ[202][1].push(Ⲇᐃ.ⲆᐃⵠΔΔΔⵠ);
    ⵠΔ[202][1].push(Ⲇᐃ.ⵠᐃΔΔⵠᐃᐃ);
    ⵠΔ[202][1].push(Ⲇᐃ.ⲆΔⲆᐃⵠⲆᐃ);
    ⵠΔ[203] = [];
    ⵠΔ[203][0] = [];
    ⵠΔ[203][1] = [];
    ⵠΔ[203][0].push(Ⲇᐃ.ⵠⲆΔⵠⵠⲆᐃ);
    ⵠΔ[203][0].push(Ⲇᐃ.ᐃᐃΔΔΔⵠⵠ);
    ⵠΔ[203][0].push(Ⲇᐃ.ᐃᐃⲆⲆᐃⲆᐃ);
    ⵠΔ[203][0].push(Ⲇᐃ.ⵠⲆᐃⵠⵠΔᐃ);
    ⵠΔ[203][0].push(Ⲇᐃ.ᐃΔᐃᐃⵠⵠᐃ);
    ⵠΔ[203][0].push(Ⲇᐃ.ⵠᐃⵠⵠΔⵠⵠ);
    ⵠΔ[203][1].push(Ⲇᐃ.ᐃᐃᐃⲆⲆⵠΔ);
    ⵠΔ[203][1].push(Ⲇᐃ.ΔⲆⵠⵠⵠΔⲆ);
    ⵠΔ[203][1].push(Ⲇᐃ.ⵠΔⲆⵠⲆΔⲆ);
    ⵠΔ[203][1].push(Ⲇᐃ.ΔⲆⵠΔΔᐃⵠ);
    ⵠΔ[203][1].push(Ⲇᐃ.ⲆⵠᐃΔⵠⵠⵠ);
    ⵠΔ[203][1].push(Ⲇᐃ.ᐃᐃⲆᐃⵠⲆⵠ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ] = [];
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0] = [];
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1] = [];
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0].push(Ⲇᐃ.ΔⲆⲆⵠⲆΔΔ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0].push(Ⲇᐃ.ΔⲆᐃⵠᐃΔΔ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0].push(Ⲇᐃ.Δᐃᐃⵠᐃⵠᐃ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0].push(Ⲇᐃ.ⲆⲆΔΔᐃⵠᐃ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0].push(Ⲇᐃ.ⵠⲆᐃΔⲆᐃΔ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][0].push(Ⲇᐃ.ᐃⲆⵠᐃΔᐃⵠ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1].push(Ⲇᐃ.ΔⲆⵠⵠΔⵠⲆ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1].push(Ⲇᐃ.ⵠⵠⲆⵠΔΔᐃ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1].push(Ⲇᐃ.ⲆᐃΔⲆⲆⵠᐃ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1].push(Ⲇᐃ.ⲆⵠⵠⵠᐃⵠⲆ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1].push(Ⲇᐃ.ᐃΔΔⲆΔΔⲆ);
    ⵠΔ[tr.ΔᐃΔᐃⲆ][1].push(Ⲇᐃ.ΔΔΔΔᐃΔⲆ);
    ⵠΔ[918] = [];
    ⵠΔ[918][0] = Ⲇᐃ.ΔⵠΔᐃⲆⲆΔ;
    ⵠΔ[918][1] = Ⲇᐃ.ᐃᐃΔᐃΔᐃΔ;
    ⵠΔ[919] = Ⲇᐃ.ⵠⲆΔΔⲆΔᐃ;
    ⵠΔ[56] = [];
    ⵠΔ[56][0] = Ⲇᐃ.ΔᐃⵠᐃⲆⲆⵠⲆᐃ;
    ⵠΔ[56][1] = Ⲇᐃ.ΔⵠΔᐃⲆⵠᐃᐃΔ;
    ⵠΔ[223] = [];
    ⵠΔ[223][0] = Ⲇᐃ.ΔΔᐃΔᐃⵠⲆ;
    ⵠΔ[223][1] = Ⲇᐃ.ᐃΔⵠΔⲆΔⲆ;
    ⵠΔ[224] = [];
    ⵠΔ[224][0] = Ⲇᐃ.ΔⵠⲆⵠΔⵠᐃ;
    ⵠΔ[224][1] = Ⲇᐃ.ⵠⵠᐃΔⵠΔᐃ;
    ⵠΔ[236] = [];
    ⵠΔ[236][0] = Ⲇᐃ.ᐃᐃⲆⵠⲆᐃⵠ;
    ⵠΔ[236][1] = Ⲇᐃ.ⲆᐃⵠΔⲆⵠΔ;
    ⵠΔ[1033] = [];
    ⵠΔ[1033][0] = Ⲇᐃ.ⵠⵠᐃΔⵠⵠᐃ;
    ⵠΔ[1033][1] = Ⲇᐃ.ΔⲆᐃᐃᐃΔⵠ;
    ⵠΔ[1034] = Ⲇᐃ.ᐃΔⲆΔΔᐃᐃ;
    ⵠΔ[1150] = [];
    ⵠΔ[1150][0] = Ⲇᐃ.ΔΔΔⲆᐃⵠⲆ;
    ⵠΔ[1150][1] = Ⲇᐃ.ΔᐃⲆⲆᐃΔΔ;
    ⵠΔ[1152] = [];
    ⵠΔ[1152][0] = Ⲇᐃ.ᐃⵠΔΔⵠᐃⵠ;
    ⵠΔ[1152][1] = Ⲇᐃ.ᐃΔᐃⲆᐃⲆⵠ;
    ⵠΔ[1149] = Ⲇᐃ.ΔⵠᐃⵠΔᐃⲆ;
    ⵠΔ[1151] = Ⲇᐃ.ᐃᐃᐃⲆⲆᐃᐃ;
    ⵠΔ[1153] = Ⲇᐃ.ⲆΔΔΔⲆᐃΔ;
    ⵠΔ[1143] = [];
    ⵠΔ[1143][0] = Ⲇᐃ.ΔⲆⲆⲆⲆⵠⵠ;
    ⵠΔ[1143][1] = Ⲇᐃ.ΔⲆΔⲆᐃⵠᐃ;
    ⵠΔ[1145] = [];
    ⵠΔ[1145][0] = Ⲇᐃ.ⵠⲆⵠΔⵠᐃⲆ;
    ⵠΔ[1145][1] = Ⲇᐃ.ⵠᐃᐃΔᐃⲆⵠ;
    ⵠΔ[1146] = [];
    ⵠΔ[1146][0] = Ⲇᐃ.ᐃᐃΔΔΔⲆⵠ;
    ⵠΔ[1146][1] = Ⲇᐃ.ᐃΔⵠᐃᐃⵠⵠ;
    ⵠΔ[1144] = Ⲇᐃ.ᐃⲆⲆΔⲆⵠⲆ;
    ⵠΔ[1148] = Ⲇᐃ.ⵠᐃᐃΔᐃᐃᐃ;
    ⵠΔ[1147] = Ⲇᐃ.ᐃΔᐃⵠᐃΔⲆ;
    ⵠΔ[1053] = [];
    ⵠΔ[1053][0] = Ⲇᐃ.ⲆᐃⵠᐃΔᐃⵠ;
    ⵠΔ[1053][1] = Ⲇᐃ.ⲆΔᐃᐃⲆⲆΔ;
    ⵠΔ[1055] = [];
    ⵠΔ[1055][0] = Ⲇᐃ.ⵠΔΔⵠⲆΔⲆ;
    ⵠΔ[1055][1] = Ⲇᐃ.ΔᐃⵠΔᐃⲆΔ;
    ⵠΔ[231] = [];
    ⵠΔ[231][0] = Ⲇᐃ.ΔⵠᐃⲆᐃⲆⲆ;
    ⵠΔ[231][1] = Ⲇᐃ.ᐃΔⲆⲆΔⵠⵠ;
    ⵠΔ[1060] = [];
    ⵠΔ[1060][0] = Ⲇᐃ.ⵠⲆΔⲆᐃⲆⵠ;
    ⵠΔ[1060][1] = Ⲇᐃ.ᐃΔΔΔⵠΔΔ;
    ⵠΔ[1063] = [];
    ⵠΔ[1063][0] = Ⲇᐃ.ᐃⵠⵠᐃⲆⲆΔ;
    ⵠΔ[1063][1] = Ⲇᐃ.ΔⵠⵠΔΔⵠᐃ;
    ⵠΔ[1059] = [];
    ⵠΔ[1059][0] = Ⲇᐃ.ⵠⲆᐃⵠⵠⲆᐃ;
    ⵠΔ[1059][1] = Ⲇᐃ.ΔᐃΔΔⲆⲆᐃ;
    ⵠΔ[1062] = [];
    ⵠΔ[1062][0] = Ⲇᐃ.ΔⵠΔⵠⵠᐃⲆ;
    ⵠΔ[1062][1] = Ⲇᐃ.ΔⵠⵠⲆΔⲆⲆ;
    ⵠΔ[1056] = Ⲇᐃ.ⲆⵠᐃⲆⲆⵠⵠ;
    ⵠΔ[1057] = Ⲇᐃ.ⵠᐃᐃⲆⵠⵠⲆ;
    ⵠΔ[1058] = Ⲇᐃ.ⵠΔⵠⵠⲆΔⵠ;
    ⵠΔ[1065] = Ⲇᐃ.ⵠⵠⵠΔᐃⵠᐃ;
    ⵠΔ[1066] = Ⲇᐃ.ⵠⲆᐃⵠⵠⲆΔ;
    ⵠΔ[1067] = Ⲇᐃ.ᐃᐃᐃΔΔᐃΔ;
    ⵠΔ[1222] = [];
    ⵠΔ[1222][0] = Ⲇᐃ.ΔᐃΔⵠⵠⵠⲆ;
    ⵠΔ[1222][1] = Ⲇᐃ.ⲆⲆΔⲆⵠⵠⵠ;
    ⵠΔ[248] = [];
    ⵠΔ[248][0] = Ⲇᐃ.ᐃᐃⵠᐃΔⵠⵠ;
    ⵠΔ[248][1] = Ⲇᐃ.ⲆⵠⵠΔⲆᐃⲆ;
    ⵠΔ[1218] = [];
    ⵠΔ[1218][0] = Ⲇᐃ.ⲆΔΔΔΔΔᐃ;
    ⵠΔ[1218][1] = Ⲇᐃ.ᐃⵠΔᐃⵠⵠΔ;
    ⵠΔ[1221] = [];
    ⵠΔ[1221][0] = Ⲇᐃ.ⵠⲆⲆΔᐃΔⵠ;
    ⵠΔ[1221][1] = Ⲇᐃ.ΔⲆᐃᐃᐃᐃⲆ;
    ⵠΔ[1223] = Ⲇᐃ.ᐃⵠΔⵠΔΔⵠ;
    ⵠΔ[1219] = Ⲇᐃ.ᐃᐃⵠⵠΔⲆΔ;
    ⵠΔ[1068] = [];
    ⵠΔ[1068][0] = Ⲇᐃ.ⲆΔⲆᐃΔᐃΔ;
    ⵠΔ[1068][1] = Ⲇᐃ.ΔⲆⵠⵠᐃΔⵠ;
    ⵠΔ[232] = [];
    ⵠΔ[232][0] = Ⲇᐃ.ⲆⵠᐃⲆᐃⵠⵠ;
    ⵠΔ[232][1] = Ⲇᐃ.ᐃⵠⵠᐃⵠᐃⲆ;
    ⵠΔ[1070] = [];
    ⵠΔ[1070][0] = Ⲇᐃ.ᐃⵠΔⵠΔⲆⲆ;
    ⵠΔ[1070][1] = Ⲇᐃ.ⵠᐃⵠᐃΔⲆⵠ;
    ⵠΔ[1072] = [];
    ⵠΔ[1072][0] = Ⲇᐃ.ⲆᐃⵠⲆᐃᐃΔ;
    ⵠΔ[1072][1] = Ⲇᐃ.ᐃⵠᐃΔΔΔⵠ;
    ⵠΔ[1075] = [];
    ⵠΔ[1075][0] = Ⲇᐃ.ⵠⲆΔΔΔΔΔ;
    ⵠΔ[1075][1] = Ⲇᐃ.ⵠΔⵠⲆΔᐃᐃ;
    ⵠΔ[1071] = [];
    ⵠΔ[1071][0] = Ⲇᐃ.ᐃᐃᐃᐃᐃⵠᐃ;
    ⵠΔ[1071][1] = Ⲇᐃ.ⲆᐃⲆⵠΔΔΔ;
    ⵠΔ[1074] = [];
    ⵠΔ[1074][0] = Ⲇᐃ.ΔΔΔⵠⵠⲆⵠ;
    ⵠΔ[1074][1] = Ⲇᐃ.ⵠᐃⵠᐃᐃⵠΔ;
    ⵠΔ[1073] = [];
    ⵠΔ[1073][0] = Ⲇᐃ.ΔΔᐃⵠᐃΔⵠ;
    ⵠΔ[1073][1] = Ⲇᐃ.ⵠⵠᐃⵠᐃᐃΔ;
    ⵠΔ[1076] = [];
    ⵠΔ[1076][0] = Ⲇᐃ.ⲆᐃⵠⵠΔⲆⵠ;
    ⵠΔ[1076][1] = Ⲇᐃ.ᐃⲆⲆᐃΔᐃⵠ;
    ⵠΔ[1077] = Ⲇᐃ.ᐃΔⵠᐃⵠⲆΔ;
    ⵠΔ[1078] = Ⲇᐃ.ΔᐃⲆᐃᐃⲆⵠ;
    ⵠΔ[1079] = Ⲇᐃ.ᐃΔΔⵠΔΔᐃ;
    ⵠΔ[1083] = [];
    ⵠΔ[1083][0] = Ⲇᐃ.ᐃⵠᐃᐃⲆΔⵠ;
    ⵠΔ[1083][1] = Ⲇᐃ.ⵠΔᐃᐃΔᐃᐃ;
    ⵠΔ[233] = [];
    ⵠΔ[233][0] = Ⲇᐃ.ᐃΔᐃΔᐃᐃᐃ;
    ⵠΔ[233][1] = Ⲇᐃ.ⲆⵠⲆⵠⲆΔᐃ;
    ⵠΔ[1085] = [];
    ⵠΔ[1085][0] = Ⲇᐃ.ⲆᐃⵠⲆⵠΔΔ;
    ⵠΔ[1085][1] = Ⲇᐃ.ⵠᐃⲆᐃⲆⲆⵠ;
    ⵠΔ[1087] = [];
    ⵠΔ[1087][0] = Ⲇᐃ.ⲆΔΔⵠⲆⲆΔ;
    ⵠΔ[1087][1] = Ⲇᐃ.ⵠⵠⵠⵠⲆᐃΔ;
    ⵠΔ[1090] = [];
    ⵠΔ[1090][0] = Ⲇᐃ.ᐃⲆᐃⵠⲆⲆᐃ;
    ⵠΔ[1090][1] = Ⲇᐃ.ΔⵠⵠΔⵠΔⲆ;
    ⵠΔ[1086] = [];
    ⵠΔ[1086][0] = Ⲇᐃ.ⵠᐃⵠⵠⲆⲆⲆ;
    ⵠΔ[1086][1] = Ⲇᐃ.ⲆⲆᐃΔⵠᐃᐃ;
    ⵠΔ[1089] = [];
    ⵠΔ[1089][0] = Ⲇᐃ.ⵠⵠᐃᐃⲆᐃΔ;
    ⵠΔ[1089][1] = Ⲇᐃ.ⲆΔΔⲆⵠⲆΔ;
    ⵠΔ[1088] = [];
    ⵠΔ[1088][0] = Ⲇᐃ.ⵠⵠΔⲆΔⲆΔ;
    ⵠΔ[1088][1] = Ⲇᐃ.ⲆᐃᐃⲆⵠΔᐃ;
    ⵠΔ[1091] = [];
    ⵠΔ[1091][0] = Ⲇᐃ.ⲆⵠᐃΔΔⵠᐃ;
    ⵠΔ[1091][1] = Ⲇᐃ.ᐃᐃᐃΔⵠⲆᐃ;
    ⵠΔ[1092] = Ⲇᐃ.ΔΔᐃⲆⲆⵠᐃ;
    ⵠΔ[1093] = Ⲇᐃ.ΔⵠⲆⲆⵠⵠᐃ;
    ⵠΔ[1094] = Ⲇᐃ.ᐃᐃⵠⵠⲆⵠⵠ;
    ⵠΔ[1098] = [];
    ⵠΔ[1098][0] = Ⲇᐃ.ΔΔᐃΔΔⲆᐃ;
    ⵠΔ[1098][1] = Ⲇᐃ.ΔⲆΔᐃᐃⲆⵠ;
    ⵠΔ[235] = [];
    ⵠΔ[235][0] = Ⲇᐃ.ⵠⲆᐃᐃⲆⲆⲆ;
    ⵠΔ[235][1] = Ⲇᐃ.ᐃΔⵠⲆᐃᐃᐃ;
    ⵠΔ[1115] = Ⲇᐃ.ΔᐃⲆⵠⵠᐃⵠ;
    ⵠΔ[1113] = [];
    ⵠΔ[1113][0] = Ⲇᐃ.ΔΔΔᐃⵠⵠΔ;
    ⵠΔ[1113][1] = Ⲇᐃ.ᐃⲆᐃⵠᐃⲆⵠ;
    ⵠΔ[1114] = [];
    ⵠΔ[1114][0] = Ⲇᐃ.ᐃⵠΔΔΔΔΔ;
    ⵠΔ[1114][1] = Ⲇᐃ.ᐃⲆⲆᐃⵠⵠᐃ;
    ⵠΔ[1100] = [];
    ⵠΔ[1100][0] = Ⲇᐃ.ᐃᐃⵠⵠⵠⵠⲆ;
    ⵠΔ[1100][1] = Ⲇᐃ.ΔᐃΔⵠΔΔΔ;
    ⵠΔ[1102] = [];
    ⵠΔ[1102][0] = Ⲇᐃ.ⵠⵠⵠΔⲆᐃΔ;
    ⵠΔ[1102][1] = Ⲇᐃ.ᐃⵠⲆⲆᐃᐃΔ;
    ⵠΔ[1105] = [];
    ⵠΔ[1105][0] = Ⲇᐃ.ⲆⵠⵠⵠⲆΔⲆ;
    ⵠΔ[1105][1] = Ⲇᐃ.ᐃⵠⲆⵠΔⲆᐃ;
    ⵠΔ[1101] = [];
    ⵠΔ[1101][0] = Ⲇᐃ.ᐃΔᐃⵠⲆᐃᐃ;
    ⵠΔ[1101][1] = Ⲇᐃ.ΔᐃΔⲆⲆⵠⵠ;
    ⵠΔ[1104] = [];
    ⵠΔ[1104][0] = Ⲇᐃ.ⲆᐃⵠᐃⵠᐃⲆ;
    ⵠΔ[1104][1] = Ⲇᐃ.ⵠᐃᐃⵠΔΔⲆ;
    ⵠΔ[1103] = [];
    ⵠΔ[1103][0] = Ⲇᐃ.ΔΔⵠᐃᐃᐃᐃ;
    ⵠΔ[1103][1] = Ⲇᐃ.ΔᐃΔᐃⵠᐃᐃ;
    ⵠΔ[1106] = [];
    ⵠΔ[1106][0] = Ⲇᐃ.ᐃΔⲆⲆᐃⵠΔ;
    ⵠΔ[1106][1] = Ⲇᐃ.ΔΔⲆΔΔⵠⵠ;
    ⵠΔ[1107] = Ⲇᐃ.ΔᐃᐃᐃⲆΔⵠ;
    ⵠΔ[1108] = Ⲇᐃ.ⵠⲆⵠΔⲆΔⵠ;
    ⵠΔ[1109] = Ⲇᐃ.ⲆⲆⲆΔⵠⵠⵠ;
    ⵠΔ[1119] = [];
    ⵠΔ[1119][0] = Ⲇᐃ.ΔᐃᐃΔᐃⲆⲆ;
    ⵠΔ[1119][1] = Ⲇᐃ.ⵠΔΔᐃⵠⵠᐃ;
    ⵠΔ[238] = [];
    ⵠΔ[238][0] = Ⲇᐃ.ᐃⲆⲆΔᐃⵠⲆ;
    ⵠΔ[238][1] = Ⲇᐃ.ⵠᐃᐃⲆᐃΔⵠ;
    ⵠΔ[1136] = Ⲇᐃ.ΔᐃΔⲆᐃⲆᐃ;
    ⵠΔ[1134] = [];
    ⵠΔ[1134][0] = Ⲇᐃ.ⵠᐃⲆᐃⲆΔⲆ;
    ⵠΔ[1134][1] = Ⲇᐃ.ᐃⲆⵠΔΔᐃⲆ;
    ⵠΔ[1135] = [];
    ⵠΔ[1135][0] = Ⲇᐃ.ΔΔⵠᐃⲆⵠⲆ;
    ⵠΔ[1135][1] = Ⲇᐃ.ΔΔⲆⵠᐃⵠⲆ;
    ⵠΔ[1121] = [];
    ⵠΔ[1121][0] = Ⲇᐃ.ⵠⵠⵠᐃᐃⵠᐃ;
    ⵠΔ[1121][1] = Ⲇᐃ.ᐃΔΔⲆᐃⲆⲆ;
    ⵠΔ[1123] = [];
    ⵠΔ[1123][0] = Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ;
    ⵠΔ[1123][1] = Ⲇᐃ.ⲆᐃⲆⲆΔᐃΔ;
    ⵠΔ[1126] = [];
    ⵠΔ[1126][0] = Ⲇᐃ.ΔΔⵠΔⵠᐃΔ;
    ⵠΔ[1126][1] = Ⲇᐃ.ᐃᐃΔⵠΔᐃⲆ;
    ⵠΔ[1122] = [];
    ⵠΔ[1122][0] = Ⲇᐃ.ΔΔᐃⲆᐃΔⲆ;
    ⵠΔ[1122][1] = Ⲇᐃ.ΔⵠⲆⲆⵠΔⵠ;
    ⵠΔ[1125] = [];
    ⵠΔ[1125][0] = Ⲇᐃ.ⲆΔⲆᐃᐃⵠⲆ;
    ⵠΔ[1125][1] = Ⲇᐃ.ᐃⲆᐃᐃᐃΔᐃ;
    ⵠΔ[1124] = [];
    ⵠΔ[1124][0] = Ⲇᐃ.ᐃⲆⵠⲆⲆᐃⵠ;
    ⵠΔ[1124][1] = Ⲇᐃ.ⵠⵠᐃΔⵠΔⵠ;
    ⵠΔ[1127] = [];
    ⵠΔ[1127][0] = Ⲇᐃ.ᐃΔΔᐃᐃᐃⵠ;
    ⵠΔ[1127][1] = Ⲇᐃ.ᐃΔΔⵠⲆⵠⵠ;
    ⵠΔ[1128] = Ⲇᐃ.ⲆⵠΔΔᐃⲆᐃ;
    ⵠΔ[1129] = Ⲇᐃ.ᐃⲆⲆΔⲆⵠᐃ;
    ⵠΔ[1130] = Ⲇᐃ.ΔᐃⵠⵠᐃⵠΔ;
    ⵠΔ[1042] = [];
    ⵠΔ[1042][0] = Ⲇᐃ.ΔᐃᐃⲆᐃⵠⵠ;
    ⵠΔ[1042][1] = Ⲇᐃ.ᐃᐃⲆΔⲆⲆⵠ;
    ⵠΔ[1043] = [];
    ⵠΔ[1043][0] = Ⲇᐃ.ⲆᐃⲆΔΔΔⵠ;
    ⵠΔ[1043][1] = Ⲇᐃ.ᐃᐃⵠⲆⲆⲆⵠ;
    ⵠΔ[1044] = [];
    ⵠΔ[1044][0] = Ⲇᐃ.ⵠᐃⲆⲆᐃⵠⲆ;
    ⵠΔ[1044][1] = Ⲇᐃ.ⵠⲆⲆⲆⲆⲆΔ;
    ⵠΔ[228] = [];
    ⵠΔ[228][0] = Ⲇᐃ.ⲆⵠᐃᐃⵠⲆΔ;
    ⵠΔ[228][1] = Ⲇᐃ.ⲆⵠᐃᐃⵠⲆΔ;
    ⵠΔ[234] = [];
    ⵠΔ[234][0] = Ⲇᐃ.ΔΔⲆᐃᐃᐃⲆ;
    ⵠΔ[234][1] = Ⲇᐃ.ΔΔⲆᐃᐃᐃⲆ;
    ⵠΔ[249] = [];
    ⵠΔ[249][0] = Ⲇᐃ.ⲆⵠⵠⲆΔⲆΔ;
    ⵠΔ[249][1] = Ⲇᐃ.ⲆⵠⵠⲆΔⲆΔ;
    ⵠΔ[1045] = Ⲇᐃ.ᐃΔΔΔⵠᐃⲆ;
    ⵠΔ[89] = [];
    ⵠΔ[89][0] = Ⲇᐃ.ⲆⵠⲆΔΔᐃⲆ;
    ⵠΔ[89][1] = Ⲇᐃ.ⵠΔΔⲆΔΔΔ;
    ⵠΔ[92] = [];
    ⵠΔ[92][0] = Ⲇᐃ.ΔᐃᐃᐃᐃᐃΔ;
    ⵠΔ[92][1] = Ⲇᐃ.ⵠⲆⲆⲆᐃⵠⵠ;
    ⵠΔ[247] = [];
    ⵠΔ[247][0] = [Ⲇᐃ.ⵠᐃⲆⵠⵠⲆⵠ, Ⲇᐃ.ΔⵠⵠΔᐃΔᐃ, Ⲇᐃ.ΔⵠⵠⲆΔΔⵠ, Ⲇᐃ.ᐃⵠⲆᐃⵠᐃΔ, Ⲇᐃ.ᐃᐃΔᐃⵠⲆⵠ, Ⲇᐃ.ⲆᐃⲆᐃᐃⲆⲆ, Ⲇᐃ.ΔⵠΔΔΔⵠᐃ, Ⲇᐃ.ᐃⵠⲆⲆΔⲆᐃ, Ⲇᐃ.ⵠᐃⲆⵠΔΔᐃ];
    ⵠΔ[247][1] = [Ⲇᐃ.ΔⵠΔⵠⵠⵠⵠ, Ⲇᐃ.ⵠΔⵠΔᐃΔᐃ, Ⲇᐃ.ᐃⵠΔᐃΔΔΔ, Ⲇᐃ.ᐃⲆΔⲆⲆⲆⲆ, Ⲇᐃ.ⲆᐃᐃⵠⵠⲆᐃ, Ⲇᐃ.ⵠᐃⲆⵠⲆΔⲆ, Ⲇᐃ.ⲆⵠᐃΔⵠⲆᐃ, Ⲇᐃ.ᐃⵠⲆⲆΔⲆᐃ, Ⲇᐃ.ⲆᐃᐃΔⵠᐃⵠ];
    ⵠΔ[93] = [];
    ⵠΔ[93][0] = Ⲇᐃ.ⲆⵠΔⲆⵠⵠΔ;
    ⵠΔ[93][1] = Ⲇᐃ.ⵠⲆᐃΔΔΔᐃ;
    ⵠΔ[225] = [];
    ⵠΔ[225][0] = Ⲇᐃ.ΔⵠᐃΔⵠⵠⵠ;
    ⵠΔ[225][1] = Ⲇᐃ.ⵠⲆΔⵠΔⵠΔ;
    ⵠΔ[226] = [];
    ⵠΔ[226][0] = Ⲇᐃ.ᐃᐃᐃⲆⵠᐃⵠ;
    ⵠΔ[226][1] = Ⲇᐃ.ΔⵠⲆᐃⵠᐃⵠ;
    ⵠΔ[24] = [];
    ⵠΔ[24][0] = Ⲇᐃ.ⵠⵠⲆⲆⲆᐃᐃ;
    ⵠΔ[24][1] = Ⲇᐃ.ΔᐃⵠΔⵠⲆⵠ;
    ⵠΔ[88] = [];
    ⵠΔ[88][0] = Ⲇᐃ.ᐃⵠⲆⵠⵠᐃᐃ;
    ⵠΔ[88][1] = Ⲇᐃ.ΔᐃⵠⵠⵠⲆΔ;
    ⵠΔ[87] = [];
    ⵠΔ[87][0] = Ⲇᐃ.ⲆᐃⲆΔⲆⵠᐃ;
    ⵠΔ[87][1] = Ⲇᐃ.ΔΔΔΔⵠⲆΔ;
    ⵠΔ[82] = [];
    ⵠΔ[82][0] = Ⲇᐃ.ⲆⵠⲆⵠᐃⲆⵠ;
    ⵠΔ[82][1] = Ⲇᐃ.ΔⲆΔᐃΔᐃΔ;
    ⵠΔ[621] = [];
    ⵠΔ[621][0] = [];
    ⵠΔ[621][1] = [];
    ⵠΔ[621][0].push(Ⲇᐃ.ΔᐃⵠᐃΔⲆᐃⵠⲆ);
    ⵠΔ[621][0].push(Ⲇᐃ.ⵠᐃⵠⵠᐃΔⲆⲆⲆ);
    ⵠΔ[621][0].push(Ⲇᐃ.ΔΔΔⲆΔᐃⲆⵠΔ);
    ⵠΔ[621][1].push(Ⲇᐃ.ⵠⲆᐃᐃⵠᐃⲆⲆΔ);
    ⵠΔ[621][1].push(Ⲇᐃ.ΔⲆⲆⵠΔᐃᐃΔᐃ);
    ⵠΔ[621][1].push(Ⲇᐃ.ᐃⵠΔⲆᐃΔⲆⵠᐃ);
    ⵠΔ[619] = [];
    ⵠΔ[619][0] = [];
    ⵠΔ[619][1] = [];
    ⵠΔ[619][0].push(Ⲇᐃ.ᐃᐃⵠⵠᐃⲆΔᐃΔ);
    ⵠΔ[619][0].push(Ⲇᐃ.ⵠΔᐃᐃⲆᐃⲆⲆᐃ);
    ⵠΔ[619][0].push(Ⲇᐃ.ⲆⲆⵠⵠᐃΔΔΔⲆ);
    ⵠΔ[619][1].push(Ⲇᐃ.ⵠΔΔᐃⵠⵠⵠΔⲆ);
    ⵠΔ[619][1].push(Ⲇᐃ.ⲆⲆⲆⲆⵠᐃⲆⵠⲆ);
    ⵠΔ[619][1].push(Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃⵠᐃ);
    ⵠΔ[620] = [];
    ⵠΔ[620][0] = [];
    ⵠΔ[620][1] = [];
    ⵠΔ[620][0].push(Ⲇᐃ.ᐃΔᐃⲆⵠᐃᐃᐃΔ);
    ⵠΔ[620][0].push(Ⲇᐃ.ⲆΔᐃⲆⲆⲆⵠⵠⲆ);
    ⵠΔ[620][0].push(Ⲇᐃ.ⵠⲆⲆⵠΔⲆᐃΔⵠ);
    ⵠΔ[620][1].push(Ⲇᐃ.ᐃⲆⵠΔᐃⵠⲆᐃᐃ);
    ⵠΔ[620][1].push(Ⲇᐃ.ⲆⵠⲆᐃⲆⵠⵠΔⵠ);
    ⵠΔ[620][1].push(Ⲇᐃ.ᐃᐃΔΔΔⲆᐃΔⲆ);
    ⲆⲆΔⲆ.g = [];
    ⲆⲆΔⲆ.g[0] = [Ⲇᐃ.ᐃⵠᐃⲆΔⲆᐃ, Ⲇᐃ.ⲆΔΔᐃΔᐃⲆ];
    ⲆⲆΔⲆ.g[1] = ⲆⲆΔⲆ.g[0];
    ⲆⲆΔⲆ.g[2] = [Ⲇᐃ.ⵠⲆⲆⲆᐃᐃⵠ, Ⲇᐃ.ᐃᐃΔⵠΔⲆΔ];
    ⲆⲆΔⲆ.m = [];
    ⲆⲆΔⲆ.m[0] = [Ⲇᐃ.ⲆᐃⲆᐃΔΔᐃ, Ⲇᐃ.ⵠⵠⵠᐃᐃⲆᐃ];
    ⲆⲆΔⲆ.m[1] = ⲆⲆΔⲆ.m[0];
    ⲆⲆΔⲆ.m[2] = [Ⲇᐃ.ⵠⵠΔⲆΔⵠΔ, Ⲇᐃ.ⵠⲆⲆⲆΔᐃⵠ];
    ⲆⲆΔⲆ.la = [];
    ⲆⲆΔⲆ.la[0] = [Ⲇᐃ.ᐃⵠⵠΔΔⵠⲆ, Ⲇᐃ.ΔᐃⲆΔⲆⲆᐃ];
    ⲆⲆΔⲆ.la[1] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[2] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[3] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[4] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[5] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.s = [];
    ⲆⲆΔⲆ.s[0] = [Ⲇᐃ.ⵠⵠⵠΔΔΔⲆ, Ⲇᐃ.ⵠΔⲆᐃⲆⵠⲆ];
    ⲆⲆΔⲆ.s[1] = ⲆⲆΔⲆ.s[0];
    ⲆⲆΔⲆ.s[2] = [Ⲇᐃ.ⲆᐃⲆᐃⵠΔΔ, Ⲇᐃ.ⵠⲆⲆⵠΔⵠⵠ];
    ⲆⲆΔⲆ.p = [];
    ⲆⲆΔⲆ.p[0] = [Ⲇᐃ.ⲆΔᐃⲆᐃⲆΔ, Ⲇᐃ.ⲆΔᐃⲆᐃⲆΔ];
    ⲆⲆΔⲆ.a = [];
    ⲆⲆΔⲆ.a[0] = [Ⲇᐃ.ⲆⲆⲆΔᐃᐃⲆ, Ⲇᐃ.ⵠΔⵠⲆΔΔᐃ];
    ⲆⲆΔⲆ.a[1] = ⲆⲆΔⲆ.a[0];
    ⲆⲆΔⲆ.a[2] = ⲆⲆΔⲆ.a[0];
    ⲆⲆΔⲆ.d = [];
    ⲆⲆΔⲆ.d[0] = [Ⲇᐃ.ⲆⵠΔⵠΔⲆᐃ, Ⲇᐃ.ΔᐃⵠⲆⵠΔⲆ];
    ⲆⲆΔⲆ.d[1] = ⲆⲆΔⲆ.d[0];
    ⲆⲆΔⲆ.d[2] = ⲆⲆΔⲆ.d[0];
    ⲆⲆΔⲆ.re = [];
    ⲆⲆΔⲆ.re[0] = [Ⲇᐃ.ⵠⲆⲆΔⵠΔⵠ, Ⲇᐃ.ᐃⲆⵠⵠΔⲆᐃ];
    ⲆⲆΔⲆ.re[1] = ⲆⲆΔⲆ.re[0];
    ⲆⲆΔⲆ.re[2] = ⲆⲆΔⲆ.re[0];
    ⲆⲆΔⲆ.f = [];
    ⲆⲆΔⲆ.f[0] = [Ⲇᐃ.ΔΔⵠΔΔⵠⵠ, Ⲇᐃ.ⵠᐃᐃⲆᐃΔᐃ];
    ⲆⲆΔⲆ.f[1] = ⲆⲆΔⲆ.f[0];
    ⲆⲆΔⲆ.f[2] = ⲆⲆΔⲆ.f[0];
    ⲆⲆΔⲆ.isl = [];
    ⲆⲆΔⲆ.isl[0] = [Ⲇᐃ.ΔᐃᐃⵠΔΔᐃ, Ⲇᐃ.ᐃΔⵠⵠᐃⲆⵠ];
    ⲆⲆΔⲆ.isl[1] = ⲆⲆΔⲆ.isl[0];
    ⲆⲆΔⲆ.isl[2] = ⲆⲆΔⲆ.isl[0];
    ⲆⲆΔⲆ.c = [];
    ⲆⲆΔⲆ.c[0] = [Ⲇᐃ.ⵠᐃⲆᐃⵠᐃⲆ, Ⲇᐃ.ᐃᐃⵠⵠⵠΔⵠ];
    ⲆⲆΔⲆ.c[1] = ⲆⲆΔⲆ.c[0];
    ⲆⲆΔⲆ.c[2] = ⲆⲆΔⲆ.c[0];
    ⲆⲆΔⲆ.wtb = [];
    ⲆⲆΔⲆ.wtb[0] = [Ⲇᐃ.ΔⵠⵠᐃⵠΔⵠ, Ⲇᐃ.ΔΔΔⲆⵠⲆⲆ];
    ⲆⲆΔⲆ.PIRANHA = [Ⲇᐃ.ΔⲆⲆᐃΔᐃᐃ, Ⲇᐃ.ⲆⵠⵠⲆⵠⵠᐃ];
    ⲆⲆΔⲆ.KRAKEN = [Ⲇᐃ.ΔᐃᐃⲆⲆⵠΔ, Ⲇᐃ.ᐃΔⲆᐃᐃᐃΔ];
    ⲆⲆΔⲆ.FOX = [Ⲇᐃ.ᐃⵠⲆⲆΔⵠⲆ, Ⲇᐃ.ⵠⲆΔᐃⲆⵠⲆ];
    ⲆⲆΔⲆ.WOLF = [Ⲇᐃ.ΔⵠΔⵠⵠΔΔ, Ⲇᐃ.ⲆⲆΔΔⵠⵠⵠ];
    ⲆⲆΔⲆ.SPIDER = [Ⲇᐃ.ⲆᐃⲆⲆⲆᐃΔ, Ⲇᐃ.ⲆⵠᐃᐃΔⲆⲆ];
    ⲆⲆΔⲆ.BEAR = [Ⲇᐃ.ⲆⲆᐃΔΔⵠᐃ, Ⲇᐃ.ΔⲆⵠⲆⲆⵠΔ];
    ⲆⲆΔⲆ.CAVE = [Ⲇᐃ.ⵠⵠⲆⵠᐃΔᐃ, Ⲇᐃ.ⵠⲆⵠᐃΔᐃⵠ];
    ⲆⲆΔⲆ.MAP = [Ⲇᐃ.ᐃⵠⵠⵠⲆⵠⵠ, Ⲇᐃ.ᐃⵠᐃᐃⲆΔᐃ];
    ⲆⲆΔⲆ.FOREST = [Ⲇᐃ.ΔⵠⲆΔΔⵠᐃ, Ⲇᐃ.ⲆΔᐃⲆⲆΔᐃ];
    ⲆⲆΔⲆ.WINTER = [Ⲇᐃ.ⲆᐃⵠⲆⲆᐃⲆ, Ⲇᐃ.ⲆᐃΔⵠⵠΔⵠ];
    ⲆⲆΔⲆ.DESERT = [Ⲇᐃ.ⲆⵠΔΔⵠΔᐃ, Ⲇᐃ.ΔᐃᐃⲆⲆⵠⵠ];
    ⲆⲆΔⲆ.LAVA = [Ⲇᐃ.ΔᐃⲆⵠᐃΔᐃ, Ⲇᐃ.ⵠᐃⵠⲆⵠⲆⵠ];
    for (var c in ⲆⲆΔⲆ) {
      for (var d = ⲆⲆΔⲆ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ᐃⲆΔⵠⵠᐃΔ !== undefined) {
          f.ᐃⲆΔⵠⵠᐃΔ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ᐃⲆΔⵠⵠᐃΔ !== Ja) {
              f[g].ᐃⲆΔⵠⵠᐃΔ();
            }
          }
        }
      }
    }
    console.log(Lg, undefined);
  }
  function Vm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    Lb(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    Lb(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    Rb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    Lb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Rb(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    Lb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    Rb(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    Lb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    Rb(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    Lb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    Rb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    Lb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    Rb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    Lb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    Rb(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    Lb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    Lb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    Rb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    Lb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    Lb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    Rb(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    Lb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Rb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    Lb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    Rb(d, b[2]);
    return c;
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    Rb(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    Rb(e, nl, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    Rb(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    Rb(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    Rb(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    Rb(e, c[0], c[1], a * 20);
    return d;
  }
  function Zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    Rb(e, c[1], c[2], a * 6);
    return d;
  }
  function $m() {
    var b = jx.time;
    if (ⵠΔ[285]) {
      Gn.drawImage(ⵠΔ[285][b][1], Sn + 480, Tn + 190);
      Gn.drawImage(ⵠΔ[285][b][2], Sn + 180, Tn - 430);
      Gn.drawImage(ⵠΔ[285][b][1], Sn - 855, Tn + 100);
      Gn.drawImage(ⵠΔ[285][b][0], Sn - 550, Tn - 300);
      Gn.drawImage(ⵠΔ[285][b][0], Sn - 1020, Tn - 520);
    }
    if (ⵠΔ[108]) {
      Gn.drawImage(ⵠΔ[108][b][1], Sn - 80, Tn - 640);
      Gn.drawImage(ⵠΔ[108][b][1], Sn + 80, Tn + 490);
      Gn.drawImage(ⵠΔ[108][b][2], Sn - 180, Tn - 700);
      Gn.drawImage(ⵠΔ[108][b][0], Sn + 550, Tn + 100);
      Gn.drawImage(ⵠΔ[108][b][1], Sn + 450, Tn + 300);
      Gn.drawImage(ⵠΔ[108][b][1], Sn + 780, Tn + 300);
      Gn.drawImage(ⵠΔ[108][b][2], Sn + 980, Tn + 200);
      Gn.drawImage(ⵠΔ[108][b][2], Sn + 680, Tn + 600);
      Gn.drawImage(ⵠΔ[108][b][2], Sn - 380, Tn + 100);
      Gn.drawImage(ⵠΔ[108][b][2], Sn + 280, Tn + 250);
    }
    if (ⵠΔ[110]) {
      Gn.drawImage(ⵠΔ[110][b][0], Sn - 590, Tn);
      Gn.drawImage(ⵠΔ[110][b][0], Sn + 120, Tn - 390);
      Gn.drawImage(ⵠΔ[110][b][0], Sn - 270, Tn + 340);
    }
    if (ⵠΔ[109]) {
      Gn.drawImage(ⵠΔ[109][b][4], Sn - 700, Tn - 600);
      Gn.drawImage(ⵠΔ[109][b][2], Sn - 970, Tn - 250);
      Gn.drawImage(ⵠΔ[109][b][5], Sn - 720, Tn - 200);
      Gn.drawImage(ⵠΔ[109][b][2], Sn - 1020, Tn + 340);
      Gn.drawImage(ⵠΔ[109][b][0], Sn - 1120, Tn - 0);
      Gn.drawImage(ⵠΔ[109][b][1], Sn - 650, Tn - 330);
      Gn.drawImage(ⵠΔ[109][b][4], Sn - 495, Tn - 90);
      Gn.drawImage(ⵠΔ[109][b][3], Sn - 520, Tn + 340);
      Gn.drawImage(ⵠΔ[109][b][2], Sn + 830, Tn - 520);
    }
    ⵠΔ[413];
    if (lx && kx) {
      var c = lx.ⲆⲆⵠ.x;
      var d = lx.ⲆⲆⵠ.y;
      lx.ⲆⲆⵠ.x = Sn;
      lx.ⲆⲆⵠ.y = Tn;
      var e = kx.time;
      kx.time = jx.time;
      var f;
      var g = jx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ΔΔⲆⲆ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ΔⵠΔΔ[0].x = f.x - 20.5;
      f.ΔⵠΔΔ[0].y = f.y - 22.5;
      f.ΔⵠΔΔ[1].x = f.x - 35.5;
      f.ΔⵠΔΔ[1].y = f.y + 7.5;
      f.ΔⵠΔΔ[2].x = f.x + 7.5;
      f.ΔⵠΔΔ[2].y = f.y - 30;
      f.ΔⵠΔΔ[3].x = f.x + 22.5;
      f.ΔⵠΔΔ[3].y = f.y;
      f.ΔⵠΔΔ[4].x = f.x - 7.5;
      f.ΔⵠΔΔ[4].y = f.y + 14.5;
      for (var a = 0; f.info > a; a++) {
        f.ΔⵠΔΔ[a].ΔΔⲆⲆ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ΔⵠΔΔ[0].x = f.x - 20.5;
      f.ΔⵠΔΔ[0].y = f.y - 22.5;
      f.ΔⵠΔΔ[1].x = f.x - 35.5;
      f.ΔⵠΔΔ[1].y = f.y + 7.5;
      f.ΔⵠΔΔ[2].x = f.x + 7.5;
      f.ΔⵠΔΔ[2].y = f.y - 30;
      f.ΔⵠΔΔ[3].x = f.x + 22.5;
      f.ΔⵠΔΔ[3].y = f.y;
      f.ΔⵠΔΔ[4].x = f.x - 7.5;
      f.ΔⵠΔΔ[4].y = f.y + 14.5;
      for (a = 0; a < f.info; a++) {
        f.ΔⵠΔΔ[a].ΔΔⲆⲆ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ᐃⲆⲆΔᐃ(113);
      g[0].ΔⵠΔⵠⲆ();
      lx.ⲆⲆⵠ.x = c;
      lx.ⲆⲆⵠ.y = d;
      kx.time = e;
    }
  }
  function ep(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      _b(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      Rb(g, d[1], d[5], b * 20);
      _b(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      Rb(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      Lb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      Rb(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      Lb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      Rb(g, d[1], d[5], b * 20);
    }
    _b(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    Rb(g, d[1], d[2], b * 7);
    _b(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    Rb(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    Rb(g, d[1], d[2], b * 8);
    _b(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    Rb(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    Rb(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    Rb(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    Rb(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    Rb(g, d[3], d[2], b * 4);
    _b(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    Rb(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    Lb(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    Rb(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    Lb(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    Rb(g, d[1], d[2], b * 7);
    return f;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    Lb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    Rb(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Lb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    Lb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Lb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    Lb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Lb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    Lb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Lb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    Lb(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Lb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    Lb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Lb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    Lb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Lb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    Lb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Lb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    Lb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    Rb(e, c[2], c[3], a * 3);
    return d;
  }
  function tp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    Rb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    Rb(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    Rb(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    Rb(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    Rb(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    Rb(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    Rb(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    Rb(g, Ds, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    Rb(g, bj, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    Rb(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    Rb(g, Sh, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    Rb(g, mr, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    Rb(g, Ve, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    Rb(g, Cn, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    Rb(g, mr, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      Rb(g, nh, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      Rb(g, eb, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      Rb(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      Rb(g, undefined, d[5], b * 6);
      _b(g, b * 86, b * 114.39999389648438, b * 4.5);
      Rb(g, d[1], d[5], b * 6);
      _b(g, b * 121, b * 114.39999389648438, b * 4.5);
      Rb(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function np(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    Lb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    Rb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    Lb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    Rb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    Rb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    Rb(e, c[5]);
    e.restore();
    return d;
  }
  function op(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Rb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    Rb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Rb(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    Rb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    Rb(e, Ej, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    Rb(e, c[4], c[5], a * 5);
    return d;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Lb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    Rb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    Rb(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    Rb(e, undefined, c[6], a * 15);
    return d;
  }
  function rp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Lb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    Lb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    Rb(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    Lb(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    Lb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    Lb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    Rb(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    Lb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    Lb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    Rb(e, c[3], c[4], a * 6);
    return d;
  }
  function sp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Lb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Rb(e, c[0]);
    _b(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Rb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Lb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Rb(e, Bk, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Rb(e, bj, c[3], a * 6);
    _b(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    Rb(e, undefined, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    Lb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    Rb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    Rb(e, c[1]);
    _b(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    Rb(e, c[2], c[1], a * 4);
    _b(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    Rb(e, c[3], c[1], a * 4);
    _b(e, a * 78, a * 44, a * 20);
    Rb(e, c[4]);
    return d;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    Rb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    Rb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    Rb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    Rb(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    Rb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    Rb(e, c[2]);
    return d;
  }
  function lp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    Lb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    Rb(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    Rb(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    Rb(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    Rb(e, Wa, c[6], a * 15);
    return d;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Rb(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    Rb(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    Rb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    Rb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    Rb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    Rb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    Rb(e, Ds, c[2], a * 11);
    return d;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    _b(e, a * 54.5, a * 55, a * 48.038209575038294);
    Rb(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      Rb(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      Lb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      Rb(e, b[2], b[3], a * 4);
      _b(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      Rb(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      Lb(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      Rb(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      Rb(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      Rb(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      Rb(e, undefined, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      Rb(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      Rb(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      Rb(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      Rb(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      Rb(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      Rb(e, b[3]);
    }
    return d;
  }
  function bp(b, c, d, e, f, g, a, i, j, h) {
    if (c.ᐃⲆΔⵠⵠᐃΔ === undefined || c.ᐃⲆΔⵠⵠᐃΔ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
      } else if (Ds !== g) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function dp() {
    if (!lx.ⲆᐃⲆᐃ.open && !lx.ⲆⲆⲆᐃⲆ.open && !lx.ⵠⵠΔᐃ.open && !lx.ⲆⲆᐃᐃ.open) {
      lx.ΔⲆⵠΔ.open = false;
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; kx.ⵠⵠⵠ[34].length > d; d++) {
          var e = kx.ⵠⵠⵠ[34][d];
          var f = ⲆᐃΔ.ᐃᐃⵠΔ(e, b);
          if (f < c) {
            c = f;
            lx.ΔⲆⵠΔ.open = Wh;
            lx.ΔⲆⵠΔ.ⲆΔⲆⲆᐃᐃᐃ = e.info & 31;
            lx.ΔⲆⵠΔ.ᐃⲆΔⵠᐃ = (e.info & 992) >> 5;
            lx.ΔⲆⵠΔ.ΔⲆⲆⲆⵠᐃⲆ = (e.info & 31744) >> 10;
            lx.ΔⲆⵠΔ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            lx.ΔⲆⵠΔ.ᐃⵠᐃⵠΔ = e.id;
          }
        }
        if (c < 100) {
          var g = ⵠΔ[722];
          var a = (j = nx.ΔᐃⲆⵠᐃΔΔ).info.translate.x - 32;
          bp(Gn, g, a, 0);
          if (lx.ΔⲆⵠΔ.ⲆΔⲆⲆᐃᐃᐃ > 0) {
            j.ΔΔⲆⲆ(Gn);
            if ((k = lx.ΔⲆⵠΔ.ⲆΔⲆⲆᐃᐃᐃ) > 1) {
              wp(k, j);
            }
          }
          var j = nx.ᐃⲆᐃⲆΔᐃⲆ;
          if (lx.ΔⲆⵠΔ.ΔⲆⲆⲆⵠᐃⲆ > 0) {
            j.ΔΔⲆⲆ(Gn);
            if ((k = lx.ΔⲆⵠΔ.ΔⲆⲆⲆⵠᐃⲆ) > 1) {
              wp(k, j);
            }
          }
          var k;
          j = nx.ΔΔΔⲆⵠⲆᐃ;
          if (lx.ΔⲆⵠΔ.ᐃⲆΔⵠᐃ > 0) {
            j.ΔΔⲆⲆ(Gn);
            if ((k = lx.ΔⲆⵠΔ.ᐃⲆΔⵠᐃ) > 1) {
              wp(k, j);
            }
          }
        }
      }
    }
  }
  function vp() {
    lx.ⲆᐃⲆᐃ.id = -1;
    lx.ⲆᐃⲆᐃ.lock = false;
    lx.ⲆᐃⲆᐃ.locked = lg;
    lx.ⲆᐃⲆᐃ.ⲆⵠᐃΔⲆⵠⲆ = false;
    lx.ⲆᐃⲆᐃ.ⵠⵠᐃⲆⵠⵠᐃ = false;
    lx.ⲆᐃⲆᐃ.open = false;
    var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
    var c = 100;
    if (b) {
      for (var d = 0; d < kx.ⵠⵠⵠ[11].length; d++) {
        var e = kx.ⵠⵠⵠ[11][d];
        var f = ⲆᐃΔ.ᐃᐃⵠΔ(e, b);
        if (c > f) {
          c = f;
          lx.ⲆᐃⲆᐃ.open = true;
          lx.ⲆᐃⲆᐃ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          lx.ⲆᐃⲆᐃ.ⵠΔᐃⵠ = e.info;
          lx.ⲆᐃⲆᐃ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
          lx.ⲆᐃⲆᐃ.ᐃⵠᐃⵠΔ = e.id;
          lx.ⲆᐃⲆᐃ.locked = e.lock;
          lx.ⲆᐃⲆᐃ.lock = e.lock && lx.id != e.ΔⲆᐃΔ && !lx.ΔᐃⲆΔⵠΔⵠ(e.ΔⲆᐃΔ) ? gr : mk;
          lx.ⲆᐃⲆᐃ.ⵠⵠᐃⲆⵠⵠᐃ = lx.id !== e.ΔⲆᐃΔ || lx.ⲆᐃⲆᐃ.locked || lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(148) == -1 ? mk : ol;
          if (lx.ⲆᐃⲆᐃ.locked && lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(158) != -1) {
            lx.ⲆᐃⲆᐃ.ⲆⵠᐃΔⲆⵠⲆ = true;
          }
        }
      }
      if (c < 100) {
        var g = ⵠΔ[339];
        var a = nx.Ⲇⵠᐃ[0];
        var j = Math.floor(a.info.translate.x + (a.info.ⵠᐃ[0].width - g.width) / 2);
        var k = Math.floor(a.info.translate.y + (a.info.ⵠᐃ[0].height - g.height) / 2) + 3;
        bp(Gn, g, j, k);
        if ((!lx.ⲆᐃⲆᐃ.lock || lx.ⲆᐃⲆᐃ.ΔⲆᐃΔ === lx.id) && lx.ⲆᐃⲆᐃ.id >= 0) {
          (a = nx.Ⲇⵠᐃ[lx.ⲆᐃⲆᐃ.id]).ΔΔⲆⲆ(Gn);
          var h = lx.ⲆᐃⲆᐃ.ⵠΔᐃⵠ;
          if (h > 1) {
            wp(h, a);
          }
        }
        if (lx.ⲆᐃⲆᐃ.lock) {
          nx.ΔⲆⲆⲆⲆⲆᐃ.ΔΔⲆⲆ(Gn);
        } else if (lx.ⲆᐃⲆᐃ.ⵠⵠᐃⲆⵠⵠᐃ) {
          nx.ΔⲆⲆⲆΔⵠΔ.ΔΔⲆⲆ(Gn);
        }
        if (lx.ⲆᐃⲆᐃ.ⲆⵠᐃΔⲆⵠⲆ) {
          nx.ⲆⲆⲆᐃⵠᐃᐃ.ΔΔⲆⲆ(Gn);
        }
      }
    }
  }
  function cp() {
    if (!lx.ⲆᐃⲆᐃ.open && !lx.ⲆⲆⲆᐃⲆ.open) {
      lx.ⵠⵠΔᐃ.open = false;
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; kx.ⵠⵠⵠ[32].length > d; d++) {
          var e = kx.ⵠⵠⵠ[32][d];
          var f = ⲆᐃΔ.ᐃᐃⵠΔ(e, b);
          if (f < c) {
            c = f;
            lx.ⵠⵠΔᐃ.open = ol;
            lx.ⵠⵠΔᐃ.ᐃⵠΔΔⲆΔⲆ = e.info & 255;
            lx.ⵠⵠΔᐃ.ᐃⲆΔⵠᐃ = (e.info & 65280) >> 8;
            lx.ⵠⵠΔᐃ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            lx.ⵠⵠΔᐃ.ᐃⵠᐃⵠΔ = e.id;
          }
        }
        if (c < 100) {
          var g = ⵠΔ[655];
          var a = (j = nx.ΔᐃⲆⵠⵠᐃᐃ).info.translate.x - 33;
          bp(Gn, g, a, 0);
          if (lx.ⵠⵠΔᐃ.ᐃⵠΔΔⲆΔⲆ > 0) {
            j.ΔΔⲆⲆ(Gn);
            if ((k = lx.ⵠⵠΔᐃ.ᐃⵠΔΔⲆΔⲆ) > 1) {
              wp(k, j);
            }
          }
          var j = nx.ⵠⵠⲆⵠΔΔΔ;
          if (lx.ⵠⵠΔᐃ.ᐃⲆΔⵠᐃ > 0) {
            j.ΔΔⲆⲆ(Gn);
            var k = lx.ⵠⵠΔᐃ.ᐃⲆΔⵠᐃ;
            if (k > 1) {
              wp(k, j);
            }
          }
        }
      }
    }
  }
  function mp() {
    if (lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length > 0) {
      var b = {
        x: nx.ⵠⲆᐃⵠΔ.translate.x,
        y: nx.ⵠⲆᐃⵠΔ.translate.y - eo * 120
      };
    } else {
      b = {
        x: nx.ⵠⲆᐃⵠΔ.translate.x,
        y: nx.ⵠⲆᐃⵠΔ.translate.y - eo * 50
      };
    }
    Gn.globalAlpha = 0.8;
    var c = ⵠΔ[259][kx.time];
    bp(Gn, c, b.x, b.y);
    Gn.globalAlpha = 1;
    if (nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.x > -1) {
      Gn.fillStyle = "#660000";
      _b(Gn, b.x + nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.x * eo, b.y + nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.y * eo, eo * 5);
      Gn.fill();
    }
    var d = eo;
    for (var f = nx.ⵠⲆᐃⵠΔ.ⲆⲆⲆᐃ, g = 0; g < f.length; g++) {
      var h = f[g];
      kx.time;
      Gn.fillStyle = "#ff0000";
      _b(Gn, b.x + eo * (h.x / (kx.ᐃΔⲆⲆᐃ * 100) * 193), b.y + eo * (h.y / (kx.ⲆⲆᐃⲆᐃ * 100) * 193), eo * 2);
      Gn.fill();
    }
    var i = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
    if (i) {
      Gn.fillStyle = kx.time ? "#fff" : "#e39716";
      _b(Gn, b.x + eo * (i.x / (kx.ᐃΔⲆⲆᐃ * 100) * 193), b.y + eo * (i.y / (kx.ⲆⲆᐃⲆᐃ * 100) * 193), eo * 4);
      Gn.fill();
    }
    eo = d;
  }
  function pp() {
    if (lx.reconnect.enabled) {
      Gn.globalAlpha = 0.9;
      Gn.fillStyle = "#000";
      Lb(Gn, Sn - 150, Tn - 90, 300, 180, 15);
      Gn.fill();
      Gn.globalAlpha = 1;
      var a = ⵠΔ[301];
      Gn.save();
      lx.reconnect.rotate = (lx.reconnect.rotate + rx * 2) % (Math.PI * 2);
      Gn.translate(Ln / 2, qn / 2 - 25);
      Gn.rotate(lx.reconnect.rotate);
      bp(Gn, a, -a.width / 2, -a.height / 2);
      Gn.restore();
      a = ⵠΔ[525];
      bp(Gn, a, (Ln - a.width) / 2, (qn - a.height) / 2 + 25);
    }
  }
  function Cp() {
    if (!lx.ⲆᐃⲆᐃ.open) {
      lx.ⲆⲆⲆᐃⲆ.ⵠΔᐃⵠ = 0;
      lx.ⲆⲆⲆᐃⲆ.open = false;
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; kx.ⵠⵠⵠ[18].length > d; d++) {
          var e = kx.ⵠⵠⵠ[18][d];
          var f = ⲆᐃΔ.ᐃᐃⵠΔ(e, b);
          if (c > f) {
            c = f;
            lx.ⲆⲆⲆᐃⲆ.open = Wh;
            lx.ⲆⲆⲆᐃⲆ.ⵠΔᐃⵠ = e.info;
            lx.ⲆⲆⲆᐃⲆ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            lx.ⲆⲆⲆᐃⲆ.ᐃⵠᐃⵠΔ = e.id;
          }
        }
        if (c < 100) {
          var g = ⵠΔ[411];
          var a = nx.ᐃⵠⵠⲆΔⲆΔ;
          var j = Math.floor(a.info.translate.x + (a.info.ⵠᐃ[0].width - g.width) / 2);
          var k = Math.floor(a.info.translate.y + (a.info.ⵠᐃ[0].height - g.height) / 2) + 3;
          bp(Gn, g, j, k);
          if (lx.ⲆⲆⲆᐃⲆ.ⵠΔᐃⵠ > 0) {
            a.ΔΔⲆⲆ(Gn);
            var h = lx.ⲆⲆⲆᐃⲆ.ⵠΔᐃⵠ;
            if (h > 1) {
              wp(h, a);
            }
          }
        }
      }
    }
  }
  function Tp(b, c, d) {
    var e = ⵠΔ[465][b];
    var f = c.info.translate.x + eo * 5;
    var g = c.info.translate.y + eo * 5;
    if (vw == c.info.state || d) {
      g += eo * 5;
    }
    bp(Gn, e, f, g);
  }
  function fp() {
    if (lx.ᐃᐃᐃⵠᐃⵠⲆ) {
      Gn.globalAlpha = 0.5;
      Gn.fillStyle = "#000";
      Gn.fillRect(0, 0, Ln, qn);
      Gn.globalAlpha = 0.8;
      var b = ⵠΔ[516][kx.time];
      var c = Sn - b.width / 2;
      var d = Tn - b.height / 2;
      bp(Gn, b, c, d);
      Gn.globalAlpha = 1;
      if (nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.x > -1) {
        Gn.fillStyle = "#660000";
        _b(Gn, c + eo * (nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.x * 3), d + nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.y * 3 * eo, eo * 14);
        Gn.fill();
      }
      for (var e = nx.ⵠⲆᐃⵠΔ.ⲆⲆⲆᐃ, f = 0; e.length > f; f++) {
        var g = e[f];
        kx.time;
        Gn.fillStyle = "#ff0000";
        _b(Gn, c + g.x / (kx.ᐃΔⲆⲆᐃ * 100) * 600 * eo, d + eo * (g.y / (kx.ⲆⲆᐃⲆᐃ * 100) * 600), eo * 6);
        Gn.fill();
      }
      var h = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      if (h) {
        Gn.fillStyle = kx.time ? "#fff" : "#e39716";
        _b(Gn, c + eo * (h.x / (kx.ᐃΔⲆⲆᐃ * 100) * 600), d + eo * (h.y / (kx.ⲆⲆᐃⲆᐃ * 100) * 600), eo * 12);
        Gn.fill();
      }
    }
  }
  function zp() {
    if (!lx.ⲆᐃⲆᐃ.open && !lx.ⲆⲆⲆᐃⲆ.open) {
      lx.ⲆⲆᐃᐃ.open = hi;
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; d < xf.length; d++) {
          for (var e = xf[d][0], f = xf[d][1], j = 0; j < kx.ⵠⵠⵠ[e].length; j++) {
            var k = kx.ⵠⵠⵠ[e][j];
            var m = ⲆᐃΔ.ᐃᐃⵠΔ(k, b);
            if (m < c) {
              c = m;
              lx.ⲆⲆᐃᐃ.ᐃᐃᐃⲆⵠⲆᐃ = f;
              lx.ⲆⲆᐃᐃ.type = e;
              lx.ⲆⲆᐃᐃ.open = true;
              lx.ⲆⲆᐃᐃ.ⲆΔⲆⲆᐃᐃᐃ = k.info & 255;
              lx.ⲆⲆᐃᐃ.ⵠΔⵠⵠᐃΔⵠ = (k.info & 65280) >> 8;
              lx.ⲆⲆᐃᐃ.ΔⲆᐃΔ = k.ΔⲆᐃΔ;
              lx.ⲆⲆᐃᐃ.ᐃⵠᐃⵠΔ = k.id;
            }
          }
        }
        if (c < 100) {
          var p;
          var q = ⵠΔ[656];
          var l = (g = nx.ᐃⲆΔΔⲆΔⲆ).info.translate.x - 33;
          bp(Gn, q, l, 0);
          if (lx.ⲆⲆᐃᐃ.ⲆΔⲆⲆᐃᐃᐃ > 0) {
            g.ΔΔⲆⲆ(Gn);
            if ((p = lx.ⲆⲆᐃᐃ.ⲆΔⲆⲆᐃᐃᐃ) > 1) {
              wp(p, g);
            }
          }
          switch (lx.ⲆⲆᐃᐃ.ᐃᐃᐃⲆⵠⲆᐃ) {
            case 108:
              var g = nx.ⲆΔⵠⲆⵠⲆⲆ;
              break;
            case 111:
              g = nx.ⵠⵠᐃΔⵠᐃΔ;
              break;
            case 112:
              g = nx.ⵠⵠⲆᐃⵠⵠⲆ;
              break;
            case 121:
              g = nx.ⲆⵠΔⲆᐃⵠᐃ;
              break;
            case 202:
              g = nx.ΔⵠⲆᐃᐃΔⵠ;
          }
          if (lx.ⲆⲆᐃᐃ.ⵠΔⵠⵠᐃΔⵠ > 0) {
            g.ΔΔⲆⲆ(Gn);
            if ((p = lx.ⲆⲆᐃᐃ.ⵠΔⵠⵠᐃΔⵠ) > 1) {
              wp(p, g);
            }
          }
        }
      }
    }
  }
  function yp() {
    lx.ΔᐃᐃΔᐃ.id = -1;
    lx.ΔᐃᐃΔᐃ.ΔⲆᐃΔ = -1;
    if (!lx.ⲆⲆᐃⲆΔᐃΔ && !lx.ΔᐃᐃΔᐃ.wait && !lx.ΔᐃⲆᐃⲆ) {
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var c = 100;
      if (b) {
        for (var d = 0; kx.ⵠⵠⵠ[29].length > d; d++) {
          var e = kx.ⵠⵠⵠ[29][d];
          var f = ⲆᐃΔ.ᐃᐃⵠΔ(e, b);
          if (c > f) {
            c = f;
            lx.ΔᐃᐃΔᐃ.id = e.id;
            lx.ΔᐃᐃΔᐃ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            lx.ΔᐃᐃΔᐃ.info = e.info;
            lx.ΔᐃᐃΔᐃ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = nx.ᐃⲆΔᐃⵠ;
      nx.ᐃⲆΔᐃⵠ = -1;
      if (lx.ΔᐃᐃΔᐃ.ΔⲆᐃΔ == -1 || lx.ⲆⲆⲆΔⵠ.length != 0 && lx.id != lx.ΔᐃᐃΔᐃ.ΔⲆᐃΔ) {
        if (lx.ⲆⲆⲆΔⵠ.length != 0 && lx.ⲆⲆⲆΔⵠ[0] != lx.id) {
          nx.ᐃⲆΔᐃⵠ = 2;
        } else if (lx.ⲆⲆⲆΔⵠ.length != 0 && lx.id == lx.ⲆⲆⲆΔⵠ[0]) {
          nx.ᐃⲆΔᐃⵠ = 1;
        } else if (lx.ⲆⲆⲆΔⵠ.length != 0) {
          nx.ᐃⲆΔᐃⵠ = 3;
        }
      } else if (lx.ⲆⲆⲆΔⵠ.length == 0 && lx.ΔᐃᐃΔᐃ.info >= 8) {
        nx.ᐃⲆΔᐃⵠ = 4;
      } else if (lx.ⲆⲆⲆΔⵠ.length == 0) {
        nx.ᐃⲆΔᐃⵠ = 3;
      } else {
        nx.ᐃⲆΔᐃⵠ = 0;
      }
      if (nx.ᐃⲆΔᐃⵠ != -1) {
        nx.ⲆⲆᐃⵠᐃ[nx.ᐃⲆΔᐃⵠ].button.ΔΔⲆⲆ(Gn);
      }
      var a = document.getElementById("team_box").style;
      if (nx.ᐃⲆΔᐃⵠ != -1 && nx.ᐃⲆΔᐃⵠ != g && a.display == "inline-block") {
        nx.ⲆⲆᐃⵠᐃ[nx.ᐃⲆΔᐃⵠ].action();
      }
    }
  }
  function wp(a, b) {
    if (!ⵠΔ[283][a]) {
      ⵠΔ[283][a] = Tt(eo, "x" + a, 17, "#FFF");
    }
    var c = ⵠΔ[283][a];
    var d = b.info.translate.x + b.info.ⵠᐃ[0].width - c.width - eo * 14;
    var e = b.info.translate.y + b.info.ⵠᐃ[0].height - c.height - eo * 19;
    if (b.info.state == vw) {
      e += eo * 5;
    }
    bp(Gn, c, d, e);
  }
  function Pp() {
    var a = nx.ⵠᐃⲆⵠΔ;
    var b = a.id;
    if (a.ⲆⲆΔΔⵠ === 1 && a.display === 1) {
      if (ⵠⵠⲆΔᐃ[b] === undefined) {
        ⵠⵠⲆΔᐃ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = pt[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          qt = 2;
          for (; qt < e.length; qt++) {
            f = Math.max(f, d.measureText(e[qt]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          Lb(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            qt = 2;
            for (; e.length > qt; qt++) {
              d.fillText(e[qt], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ᐃΔⵠᐃ === 1) {
        bp(Gn, ⵠⵠⲆΔᐃ[b], a.x, a.y);
      } else if (a.x - 80 + ⵠⵠⲆΔᐃ[b].width > Ln) {
        bp(Gn, ⵠⵠⲆΔᐃ[b], Ln - ⵠⵠⲆΔᐃ[b].width - 10, a.y - ⵠⵠⲆΔᐃ[b].height - 10);
      } else {
        bp(Gn, ⵠⵠⲆΔᐃ[b], a.x - 80, a.y - ⵠⵠⲆΔᐃ[b].height - 10);
      }
    }
  }
  function kp() {
    lx.ⵠᐃⵠⲆᐃ.open = false;
    var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
    var b = 100;
    if (a) {
      for (var c = 0; kx.ⵠⵠⵠ[22].length > c; c++) {
        var d = kx.ⵠⵠⵠ[22][c];
        var e = ⲆᐃΔ.ᐃᐃⵠΔ(d, a);
        if (e < b) {
          b = e;
          lx.ⵠᐃⵠⲆᐃ.open = true;
          lx.ⵠᐃⵠⲆᐃ.ΔⲆᐃΔ = d.ΔⲆᐃΔ;
          lx.ⵠᐃⵠⲆᐃ.ᐃⵠᐃⵠΔ = d.id;
        }
      }
      if (b < 100) {
        nx.ⵠᐃⵠⲆᐃ.ΔΔⲆⲆ(Gn);
      }
    }
  }
  function Ap() {
    if (!lx.ⲆᐃⲆᐃ.open && !lx.ⲆⲆⲆᐃⲆ.open && !lx.ⵠⵠΔᐃ.open && !lx.ΔⲆⵠΔ.open && !lx.ⲆⲆᐃᐃ.open) {
      lx.sign.open = false;
      var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var b = 100;
      if (a) {
        for (var c = 0; c < kx.ⵠⵠⵠ[36].length; c++) {
          var d = kx.ⵠⵠⵠ[36][c];
          var e = ⲆᐃΔ.ᐃᐃⵠΔ(d, a);
          if (e < b && d.info === 0 && d.ΔⲆᐃΔ === lx.id) {
            lx.sign.open = Jq;
            b = e;
            lx.sign.ᐃⵠᐃⵠΔ = d.id;
          }
        }
        if (b < 100) {
          nx.sign.button.ΔΔⲆⲆ(Gn);
        }
      }
    }
  }
  ⵠⵠⲆΔᐃ = [];
  ᐃΔⵠΔᐃᐃⵠ = [];
  var xp = [];
  function Jp() {
    var a = lx.ᐃⵠΔⵠᐃ;
    if (a.wait) {
      var b = a.timeout.ⵠⵠᐃ();
      Gn.save();
      var c = ⵠΔ[794];
      Gn.translate(c.width - eo * 12, nx.ᐃⲆᐃⵠ.translate.y - eo * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      bp(Gn, c, d, e);
      Gn.beginPath();
      Gn.lineWidth = eo * 5;
      Gn.strokeStyle = tr.ΔⵠⲆᐃᐃΔⲆ[kx.time];
      Gn.lineCap = "round";
      Gn.arc(9, e + c.height / 2, eo * 25, 0, a.timeout.ⲆⵠΔ * (Math.PI * 2));
      Gn.stroke();
      Gn.restore();
      if (b) {
        a.wait = lg;
        a.timeout.ⲆⵠΔ = 0;
        a.timeout.ᐃⲆᐃ = ra;
      }
    }
  }
  function Mp() {
    var b = lx.ΔΔΔΔΔ;
    var c = nx.ΔⵠⲆⵠ;
    if (b.ⵠⵠᐃ) {
      b.ⵠⵠᐃ = false;
      var d = b.Δᐃᐃᐃᐃ;
      var e = c.ⵠⲆ.width;
      var f = c.ⵠⲆ.height;
      var g = c.Δ;
      var a = kx.ⲆⲆⲆᐃ;
      var i = Ao;
      g.clearRect(0, 0, e, f);
      g.drawImage(c.ⵠᐃ, 0, 0);
      for (var j = 0; d.length > j; j++) {
        var k = a[d[j]];
        if ((kx.mode !== 1 || k.ⵠⲆⲆΔΔ !== "spectator") && (kx.mode !== 2 || k.Δⵠⵠⵠ !== 0)) {
          if (lx.id == d[j]) {
            i = true;
            if (kx.mode === 3 && k.Δⵠⵠⵠ === 0) {
              Ⲇⵠ = "#FF0000";
            } else {
              Ⲇⵠ = "#FFF";
            }
          } else if (kx.mode === 3 && k.Δⵠⵠⵠ === 0) {
            Ⲇⵠ = "#990000";
          } else {
            Ⲇⵠ = "#A1BDCD";
          }
          g.drawImage(Tt(eo, "" + (j + 1), eo * 15, Ⲇⵠ), eo * 20, eo * (40 + j * 22));
          k.ΔΔᐃΔΔᐃⲆ ||= Tt(eo, k.ⵠⲆⲆΔΔ, eo * 15, Ⲇⵠ, undefined, Oh, undefined, undefined, eo * 110);
          g.drawImage(k.ΔΔᐃΔΔᐃⲆ, eo * 39, eo * (40 + j * 22));
          g.drawImage(Tt(eo, ⲆᐃΔ.ⲆᐃⵠⵠᐃⲆΔ(k.ⵠᐃⲆΔⵠ), eo * 15, Ⲇⵠ), eo * 156, eo * (40 + j * 22));
        }
      }
      if (!i) {
        if (kx.mode === 0 || kx.mode === 3 || kx.mode === 4 || kx.mode === 5 || kx.mode === 7 || kx.mode === 1 && !lx.ⲆⲆᐃⲆΔᐃΔ || kx.mode === 2 && !lx.ΔᐃⲆᐃⲆ) {
          g.drawImage(ⵠΔ[306], eo * 15, (46 + j * 22) * eo);
          g.drawImage(Tt(eo, ⲆᐃΔ.ⲆᐃⵠⵠᐃⲆΔ(kx.ⲆⲆⲆᐃ[lx.id].ⵠᐃⲆΔⵠ), eo * 15, "#FFF"), eo * 100, eo * (46 + j * 22));
        }
      }
    }
    bp(Gn, c.ⵠⲆ, c.translate.x, c.translate.y);
  }
  function Bp() {
    var b = lx.ΔᐃᐃΔᐃ;
    if (b.wait) {
      var c = b.timeout.ⵠⵠᐃ();
      Gn.save();
      var d = ⵠΔ[562];
      var e = ⵠΔ[537].height + eo * 25;
      Gn.translate(d.width, nx.ᐃⲆᐃⵠ.translate.y - eo * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      bp(Gn, d, f + 2, g);
      Gn.beginPath();
      Gn.lineWidth = eo * 5;
      Gn.strokeStyle = tr.ᐃⲆⲆΔᐃΔⲆ[kx.time];
      Gn.lineCap = "round";
      Gn.arc(0, g + d.height / 2, eo * 25, 0, b.timeout.ⲆⵠΔ * (Math.PI * 2));
      Gn.stroke();
      Gn.restore();
      if (c) {
        b.wait = false;
        b.timeout.ⲆⵠΔ = 0;
        b.timeout.ᐃⲆᐃ = false;
      }
    }
  }
  function Ep() {
    var a = -8;
    if (lx.ⲆⲆⲆΔΔ.enabled) {
      var b = ⵠΔ[546];
      bp(Gn, b, lx.ⲆⲆⲆΔΔ.translate.x, lx.ⲆⲆⲆΔΔ.translate.y + a);
      a += 70;
    }
    if (lx.ⲆᐃⵠᐃΔΔΔ === 1) {
      b = ⵠΔ[549];
      bp(Gn, b, lx.ⲆⲆⲆΔΔ.translate.x, lx.ⲆⲆⲆΔΔ.translate.y + a);
      a += 70;
    } else if (lx.ᐃⲆᐃⵠ.ⵠⲆΔᐃⵠ.x < 0.25 || lx.ᐃⲆᐃⵠ.ΔⲆᐃᐃΔΔⵠ.x < 0.25 || lx.ᐃⲆᐃⵠ.ⵠⵠⵠᐃⵠᐃⲆ.x < 0.25 || lx.ᐃⲆᐃⵠ.ᐃⵠᐃⲆⵠⲆᐃ.x < 0.25 || lx.ᐃⲆᐃⵠ.ᐃΔᐃⲆⵠ.x < 0.25) {
      b = ⵠΔ[548];
      bp(Gn, b, lx.ⲆⲆⲆΔΔ.translate.x, lx.ⲆⲆⲆΔΔ.translate.y + a);
      a += 70;
    }
    if (lx.ⲆⵠΔⲆⲆ > 0) {
      b = ⵠΔ[547];
      bp(Gn, b, lx.ⲆⲆⲆΔΔ.translate.x, lx.ⲆⲆⲆΔΔ.translate.y + a);
      var c = xp[lx.ⲆⵠΔⲆⲆ];
      if (c === undefined) {
        c = Tt(eo, lx.ⲆⵠΔⲆⲆ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        xp[lx.ⲆⵠΔⲆⲆ] = c;
      }
      if (lx.ⲆⵠΔⲆⲆ < 9) {
        bp(Gn, c, lx.ⲆⲆⲆΔΔ.translate.x - 39, lx.ⲆⲆⲆΔΔ.translate.y + a + 20);
      } else {
        bp(Gn, c, lx.ⲆⲆⲆΔΔ.translate.x - 46, lx.ⲆⲆⲆΔΔ.translate.y + a + 20);
      }
    }
  }
  function Dp() {
    var a = kx.ΔⲆᐃΔⵠ;
    var b = ⵠΔ[725][kx.time];
    bp(Gn, b, a.translate.x, a.translate.y);
    Gn.save();
    Gn.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    kx.ΔⲆᐃΔⵠ.now = (new Date().getTime() - a.ΔⵠΔΔⵠ + a.ⵠⲆᐃⵠⲆ) % 480000;
    var c = Math.PI * 2 * kx.ΔⲆᐃΔⵠ.now / 480000 - Math.PI / 2;
    Gn.rotate(c);
    bp(Gn, ⵠΔ[726], -b.width / 2, -b.height / 2);
    Gn.restore();
  }
  function Ip() {
    var a = lx.ⲆⵠⲆⲆᐃ;
    if (a.wait) {
      var b = a.timeout.ⵠⵠᐃ();
      Gn.save();
      var c = ⵠΔ[792];
      Gn.translate(c.width - eo * 2, nx.ᐃⲆᐃⵠ.translate.y - eo * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      bp(Gn, c, d, e);
      Gn.beginPath();
      Gn.lineWidth = eo * 5;
      Gn.strokeStyle = tr.ΔⵠⲆᐃᐃΔⲆ[kx.time];
      Gn.lineCap = "round";
      Gn.arc(9, e + c.height / 2, eo * 25, 0, a.timeout.ⲆⵠΔ * (Math.PI * 2));
      Gn.stroke();
      Gn.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆⵠΔ = 0;
        a.timeout.ᐃⲆᐃ = false;
      }
    }
  }
  const Sp = 0;
  function Qp() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = Xa;
      }
      var a = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    ⵠᐃ = ⵠΔ[167][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2 + b, -ᐃⵠⲆ / 2 + c, ΔΔⵠ, ᐃⵠⲆ);
    if (this.lock) {
      ⵠᐃ = ⵠΔ[148][kx.time];
      ΔΔⵠ = -ⵠᐃ.width;
      ᐃⵠⲆ = -ⵠᐃ.height;
      bp(Gn, ⵠᐃ, -ΔΔⵠ / 2 + b - eo * 1, -ᐃⵠⲆ / 2 + c, ΔΔⵠ, ᐃⵠⲆ);
    }
    Gn.restore();
  }
  function _p(a) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
      var c = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = ⵠΔ[a][kx.time];
    ΔΔⵠ = -e.width;
    ᐃⵠⲆ = -e.height;
    bp(Gn, e, -ΔΔⵠ / 2 + c, -ᐃⵠⲆ / 2 + d, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Fp() {
    var b = lx.ᐃΔⵠᐃ;
    if (!b.ⵠΔⲆⵠΔ && b.ΔᐃΔⵠ > 0) {
      var c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      if (!c) {
        return;
      }
      Gn.save();
      if (Br[b.ΔᐃΔⵠ].ⵠΔⵠΔ === 0 && b.mode === 0) {
        Gn.translate(lx.ⲆⲆⵠ.x + c.x, lx.ⲆⲆⵠ.y + c.y);
        Gn.rotate(c.angle);
        Gn.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = lx.ⲆⲆⵠ.x + (d - d % 100 + 50);
        e = lx.ⲆⲆⵠ.y + (e - e % 100 + 50);
        Gn.translate(d, e);
      }
      var f = ⵠΔ[b.ΔᐃΔⵠ][kx.time];
      Gn.globalAlpha = 0.5;
      bp(Gn, f, -f.width / 2, -f.height / 2);
      Gn.globalAlpha = 1;
      Gn.restore();
      if (Br[b.ΔᐃΔⵠ].ⵠΔⵠΔ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = Tt(eo, pt[336], 20, "#e2c340");
          } else {
            b.label[1] = Tt(eo, pt[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        bp(Gn, f, Sn + -f.width / 2, nx.ᐃⲆᐃⵠ.y - 26);
      }
    }
    if (b.ⵠΔⲆⵠΔ) {
      var g = b.timeout.ⵠⵠᐃ();
      for (var a = 0; a < b.ⵠⵠⵠⵠΔ.length; a++) {
        var i = b.ⵠⵠⵠⵠΔ[a];
        if (i.id == b.id) {
          var j = eo * 42;
          var k = eo * 17;
          Lb(Gn, i.info.translate.x, i.info.translate.y + (1 - b.timeout.ⲆⵠΔ) * j, i.info.width, j * b.timeout.ⲆⵠΔ + k, eo * 10);
          Gn.fillStyle = "#55B973";
          Gn.fill();
          Gn.globalAlpha = 0.8;
          i.ΔΔⲆⲆ(Gn);
        } else {
          Gn.globalAlpha = 0.5;
          i.ΔΔⲆⲆ(Gn);
        }
        Gn.globalAlpha = 1;
      }
      if (g) {
        b.ⵠΔⲆⵠΔ = Ah;
        b.timeout.ⲆⵠΔ = 0;
        b.timeout.ᐃⲆᐃ = false;
      }
      return jn;
    }
    for (a = 0; b.ⵠⵠⵠⵠΔ.length > a; a++) {
      b.ⵠⵠⵠⵠΔ[a].ΔΔⲆⲆ(Gn);
    }
    return Qr;
  }
  function Rp() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[321][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function jp() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[837][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Gp(b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == mk) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var c = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var d = c * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var e = c * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    var f = ⵠΔ[853].length;
    ⵠᐃ = ⵠΔ[853][(this.ΔᐃⲆ + this.ⵠⵠ % 2) % f][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    var g = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
    if (g && (lx.id === this.ΔⲆᐃΔ || lx.ΔᐃⲆΔⵠΔⵠ(this.ΔⲆᐃΔ))) {
      if (ⲆᐃΔ.ᐃᐃⵠΔ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - rx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + rx, 1);
      }
    } else if (g && ⲆᐃΔ.ᐃᐃⵠΔ(this, kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ]) < 150) {
      this.opacity = Math.max(this.opacity - rx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + rx, 1);
    }
    var a = Gn.globalAlpha;
    Gn.globalAlpha *= this.opacity;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2 + d, -ᐃⵠⲆ / 2 + e, ΔΔⵠ, ᐃⵠⲆ);
    Gn.globalAlpha = a;
    Gn.restore();
  }
  function Lp(a) {
    if ((a = a / 100) <= 0.95) {
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.angle);
      if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
        if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && cr == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
          this.ᐃᐃⲆ.ⵠⵠᐃ = Ao;
        }
        var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
        var c = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * b;
        var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      Gn.globalAlpha = 0.5;
      jb(Gn, c, d, eo * 28, a);
      Rb(Gn, null, "#000000", eo * 18);
      Gn.globalAlpha = 1;
      jb(Gn, c, d, eo * 28, a);
      Rb(Gn, null, tr.ⵠΔᐃⲆⲆⲆᐃ[kx.time], eo * 6);
      Gn.restore();
    }
  }
  function Wp() {
    for (var b = lx.ᐃΔᐃⲆ, c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ], d = 0; d < b.ⲆΔⵠΔⲆ.length; d++) {
      var e = b.ⲆΔⵠΔⲆ[d];
      var f = zh;
      if ((c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ]) && (e.id == c.right || c.ᐃⵠⲆⲆⵠ == e.id && c.ᐃⵠⲆⲆⵠ > 0)) {
        f = Vl;
        bp(Gn, e.info.ⵠᐃ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ΔΔⲆⲆ(Gn);
      }
      var g = lx.ᐃΔᐃⲆ.Δᐃⵠ[e.id];
      if (g > 1) {
        wp(g, e);
      }
      if (g > 0) {
        Tp(d, e, f);
      }
      var h = lx.ⲆᐃⲆᐃ;
      if (h.open && (h.id < 0 || e.id == h.id) && (!h.lock || h.ΔⲆᐃΔ == lx.id)) {
        nx.ᐃᐃⵠⵠᐃ[e.id].ΔΔⲆⲆ(Gn);
      }
      if (lx.ⲆⲆⲆᐃⲆ.open && e.id == 109) {
        nx.ᐃᐃⵠⵠᐃ[e.id].ΔΔⲆⲆ(Gn);
      }
      if (lx.ΔⲆΔⲆΔ.open && e.id == 180) {
        nx.ᐃᐃⵠⵠᐃ[e.id].ΔΔⲆⲆ(Gn);
      }
      if (lx.ⵠⵠΔᐃ.open && e.id == 134) {
        nx.ᐃᐃⵠⵠᐃ[e.id].ΔΔⲆⲆ(Gn);
      }
      if (lx.ⲆⲆᐃᐃ.open && e.id == 109) {
        nx.ᐃᐃⵠⵠᐃ[e.id].ΔΔⲆⲆ(Gn);
      }
      if (lx.ΔⲆⵠΔ.open && (e.id == 109 || e.id == 131)) {
        nx.ᐃᐃⵠⵠᐃ[e.id].ΔΔⲆⲆ(Gn);
      }
    }
    if (e && d < b.max) {
      var j = ⵠΔ[334][2];
      Δⵠ = e.info.translate.x;
      Ⲇⵠⵠ = e.info.translate.y;
      ΔᐃⲆ = 1;
      for (; b.max > d; d++, ΔᐃⲆ++) {
        bp(Gn, j, Δⵠ + (j.width + 5) * ΔᐃⲆ, Ⲇⵠⵠ);
      }
    }
  }
  function Op() {
    var a = lx.ᐃΔⵠᐃ;
    if (a.ⵠΔⲆⵠΔ) {
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + b.x, lx.ⲆⲆⵠ.y + b.y);
      var c = ⵠΔ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - eo * 125;
      bp(Gn, c, d, e);
      Gn.beginPath();
      Gn.lineWidth = eo * 5;
      Gn.strokeStyle = tr.ⵠΔᐃⲆⲆⲆᐃ[kx.time];
      Gn.lineCap = "round";
      Gn.arc(0, e + c.height / 2, eo * 25, 0, a.timeout.ⲆⵠΔ * (Math.PI * 2));
      Gn.stroke();
      Gn.restore();
    }
  }
  function qp(a) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && ra == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var b = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ΔΔΔⵠΔ.ⵠⵠᐃ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠᐃ = ⵠΔ[872][Math.floor(this.id + this.color) % 5][kx.time];
    ΔΔⵠ = this.ΔΔΔⵠΔ.ⲆⵠΔ * -ⵠᐃ.width;
    ᐃⵠⲆ = this.ΔΔΔⵠΔ.ⲆⵠΔ * -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2 + c, -ᐃⵠⲆ / 2 + d, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Np(b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && zh == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = Qr;
      }
      var c = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var d = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * c;
      var e = c * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !kx.transition) {
      var f = 0;
      for (var g = kx.ⵠⵠⵠ[0], a = 0; g.length > a; a++) {
        var h = ⲆᐃΔ.ᐃᐃⵠΔ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - rx / 1.5) : Math.min(1, this.opacity + rx / 1.5);
      Gn.globalAlpha = this.opacity;
    }
    ⵠᐃ = ⵠΔ[b][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2 + d, -ᐃⵠⲆ / 2 + e, ΔΔⵠ, ᐃⵠⲆ);
    Gn.globalAlpha = 1;
    Gn.restore();
  }
  function Hp(a) {
    if ((a = a / 100) <= 0.8) {
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.angle);
      if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
        if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && Zh == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
          this.ᐃᐃⲆ.ⵠⵠᐃ = false;
        }
        var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
        var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
        var d = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Gn.globalAlpha = 0.5;
      jb(Gn, c, d, eo * 18, a);
      Rb(Gn, null, "#000000", eo * 18);
      Gn.globalAlpha = 1;
      jb(Gn, c, d, eo * 18, a);
      Rb(Gn, null, tr.ⲆⲆᐃⲆⲆⲆⲆ[kx.time], eo * 6);
      Gn.restore();
    }
  }
  function Up() {
    Gn.save();
    var a = eo;
    if (lx.ᐃⲆᐃⵠ.ΔᐃⲆⵠⵠ.x < 0.25) {
      Gn.globalAlpha = lx.ᐃⲆᐃⵠ.ⵠᐃΔⲆⲆⲆᐃ.ⲆⵠΔ;
    }
    var b = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length > 0 ? -70 : 0;
    if (lx.ⲆᐃⲆᐃ.open || lx.ⲆⲆⲆᐃⲆ.open && lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(109) != -1 || lx.ⵠⵠΔᐃ.open && lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(134) != -1 || lx.ⲆⲆᐃᐃ.open && lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(109) != -1 || lx.ΔⲆΔⲆΔ.open && lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(180) != -1 || lx.ΔⲆⵠΔ.open && (lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(109) != -1 || lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(131) != -1)) {
      b -= eo * 50;
    }
    Gn.translate((Ln - eo * 950) / 2, b);
    Gn.fillStyle = "#69A148";
    Gn.fillRect(this.translate.x + eo * 37, this.translate.y + eo * 17, eo * (lx.ᐃⲆᐃⵠ.ΔᐃⲆⵠⵠ.x * 178), eo * 18);
    Gn.globalAlpha = 1;
    if (lx.ᐃⲆᐃⵠ.ΔⲆᐃᐃΔΔⵠ.x < 0.35) {
      Gn.fillStyle = "#8F050A";
      Gn.globalAlpha = lx.ᐃⲆᐃⵠ.ΔᐃΔⵠⲆⵠⲆ.ⲆⵠΔ;
      Gn.fillRect(this.translate.x + eo * 277, this.translate.y + eo * 17, eo * 178, eo * 18);
      Gn.globalAlpha = 1;
    }
    Gn.fillStyle = "#AF352A";
    Gn.fillRect(this.translate.x + eo * 277, this.translate.y + eo * 17, lx.ᐃⲆᐃⵠ.ΔⲆᐃᐃΔΔⵠ.x * 178 * eo, eo * 18);
    if (lx.ᐃⲆᐃⵠ.ⵠⲆΔᐃⵠ.x < 0.35) {
      Gn.fillStyle = "#366B91";
      Gn.globalAlpha = lx.ᐃⲆᐃⵠ.ⵠᐃⵠⲆⲆⲆΔ.ⲆⵠΔ;
      Gn.fillRect(this.translate.x + eo * 517, this.translate.y + eo * 17, eo * 178, eo * 18);
      Gn.globalAlpha = 1;
    }
    Gn.fillStyle = "#669BB1";
    Gn.fillRect(this.translate.x + eo * 517, this.translate.y + eo * 17, eo * (lx.ᐃⲆᐃⵠ.ⵠⲆΔᐃⵠ.x * 178), eo * 18);
    if (lx.ᐃⲆᐃⵠ.ⵠⲆΔᐃⵠ.x > 0.99) {
      if (lx.ᐃⲆᐃⵠ.ᐃΔᐃⲆⵠ.x < 0.35) {
        Gn.fillStyle = "#6C4036";
        Gn.globalAlpha = lx.ᐃⲆᐃⵠ.ⲆᐃΔᐃΔⲆⲆ.ⲆⵠΔ;
        Gn.fillRect(this.translate.x + eo * 517, this.translate.y + eo * 17, eo * 178, eo * 18);
        Gn.globalAlpha = 1;
      }
      Gn.fillStyle = "#9C4036";
      Gn.fillRect(this.translate.x + eo * 517, this.translate.y + eo * 17, (1 - lx.ᐃⲆᐃⵠ.ᐃΔᐃⲆⵠ.x) * 178 * eo, eo * 18);
    }
    if (lx.ᐃⲆᐃⵠ.ⵠⵠⵠᐃⵠᐃⲆ.x < 0.35) {
      Gn.fillStyle = "#001A57";
      Gn.globalAlpha = lx.ᐃⲆᐃⵠ.ⵠᐃΔⲆⲆΔᐃ.ⲆⵠΔ;
      Gn.fillRect(this.translate.x + eo * 757, this.translate.y + eo * 17, eo * 178, eo * 18);
      Gn.globalAlpha = 1;
    }
    Gn.fillStyle = "#074A87";
    Gn.fillRect(this.translate.x + eo * 757, this.translate.y + eo * 17, eo * (lx.ᐃⲆᐃⵠ.ⵠⵠⵠᐃⵠᐃⲆ.x * 178), eo * 18);
    eo = a;
    bp(Gn, this.ⵠᐃ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Gn.restore();
    if (lx.ᐃⲆᐃⵠ.ᐃⵠᐃⲆⵠⲆᐃ.x < 0.99) {
      var c = Math.floor(Sn - ⵠΔ[608].width / 2);
      b += this.translate.y - ⵠΔ[608].height - eo * 5;
      Gn.fillStyle = "#BBE8EF";
      Gn.fillRect(c + 5, b + eo * 5, eo * 588 * lx.ᐃⲆᐃⵠ.ᐃⵠᐃⲆⵠⲆᐃ.x, eo * 10);
      if (lx.ᐃⲆᐃⵠ.ᐃⵠᐃⲆⵠⲆᐃ.x < 0.35) {
        Gn.fillStyle = "#9BA8AF";
        Gn.globalAlpha = lx.ᐃⲆᐃⵠ.ΔⵠΔⵠⵠⲆⵠ.ⲆⵠΔ;
        Gn.fillRect(c + 5, b + 5, eo * 588, eo * 10);
        Gn.globalAlpha = 1;
      }
      bp(Gn, ⵠΔ[608], c, b);
      this.y = b;
    }
  }
  function Yp(a) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == ce) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var b = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var c = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    ⵠᐃ = ⵠΔ[a][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2 + c, -ᐃⵠⲆ / 2 + d, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Kp() {
    var a = lx.ᐃΔⲆΔⲆ;
    if (a.wait) {
      var b = a.timeout.ⵠⵠᐃ();
      Gn.save();
      var c = ⵠΔ[537];
      Gn.translate(c.width - eo * 2, nx.ᐃⲆᐃⵠ.translate.y - eo * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      bp(Gn, c, d, e);
      Gn.beginPath();
      Gn.lineWidth = eo * 5;
      Gn.strokeStyle = tr.ᐃⲆⲆΔᐃΔⲆ[kx.time];
      Gn.lineCap = "round";
      Gn.arc(0, e + c.height / 2, eo * 25, 0, Math.PI * 2 * a.timeout.ⲆⵠΔ);
      Gn.stroke();
      Gn.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆⵠΔ = 0;
        a.timeout.ᐃⲆᐃ = Ao;
      }
    }
  }
  function Vp() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[848][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Xp() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[239][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Zp() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[811][kx.time];
    ΔΔⵠ = -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  var $p = 0;
  function Cu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == Qr) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = hh;
      }
      var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[849][kx.time];
      } else {
        f = ⵠΔ[193][kx.time];
      }
      var g = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.width;
      var a = -f.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠΔ[869][kx.time];
      } else {
        f = ⵠΔ[194][kx.time];
      }
      Gn.translate(0, f.height / 2);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function Du() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ⵠⵠΔⵠΔ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[288][kx.time];
    ΔΔⵠ = this.ⵠⵠΔⵠΔ.ⲆⵠΔ * -ⵠᐃ.width;
    ᐃⵠⲆ = -ⵠᐃ.height * this.ⵠⵠΔⵠΔ.ⲆⵠΔ;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    this.ΔΔΔⵠΔ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[289][kx.time];
    ΔΔⵠ = -ⵠᐃ.width * this.ΔΔΔⵠΔ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ΔΔΔⵠΔ.ⲆⵠΔ * -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Eu(b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.Δⵠⵠᐃ.ⵠⵠᐃ();
    Gn.globalAlpha = 0.3;
    var c = ⵠΔ[282][kx.time];
    var d = this.Δⵠⵠᐃ.ⲆⵠΔ * -c.width;
    var e = -c.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
    bp(Gn, c, -d / 2, -e / 2, d, e);
    Gn.globalAlpha = 1;
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && cr == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = cr;
      }
      var f = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
      var g = f * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var h = f * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      g = 0;
      h = 0;
    }
    c = ⵠΔ[b][kx.time];
    bp(Gn, c, -c.width / 2 + g, -c.height / 2 + h);
    Gn.restore();
  }
  function Fu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    var a = ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + rx / 2, 1.8) : Math.max(this.scale - rx, 1);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    this.ᐃᐃᐃΔ = a < 350 ? Math.max(0, this.ᐃᐃᐃΔ - rx * 2.2) : Math.min(1, this.ᐃᐃᐃΔ + rx * 2.2);
    b = (this.info & 1) === 0 ? ⵠΔ[1113][kx.time] : ⵠΔ[1114][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width);
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.height * this.scale;
    Gn.globalAlpha = 1 - this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    b = this.info & 1 ? ⵠΔ[1098][kx.time] : ⵠΔ[235][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width);
    ᐃⵠⲆ = -b.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ * this.scale;
    Gn.globalAlpha = this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == kq) {
        this.action -= 2;
      }
      Gn.globalAlpha = (1 - this.ᐃᐃᐃΔ) * (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ);
      var b = ⵠΔ[1115];
      ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width);
      ᐃⵠⲆ = this.scale * (-b.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
      bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ) * this.ᐃᐃᐃΔ;
      b = ⵠΔ[1107];
      ΔΔⵠ = this.scale * (-b.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
      ᐃⵠⲆ = -b.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ * this.scale;
      bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    b = this.info & 1 ? ⵠΔ[1101][kx.time] : ⵠΔ[1102][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width);
    ᐃⵠⲆ = this.scale * (-b.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
    Gn.save();
    Gn.translate(eo * -20, eo * 0);
    Gn.rotate(this.rotate.ⲆⵠΔ);
    Gn.globalAlpha = this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ * eo / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = this.ᐃᐃᐃΔ * (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ);
      b = ⵠΔ[1108];
      bp(Gn, b, -ΔΔⵠ * eo / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    b = (this.info & 1) === 0 ? ⵠΔ[1105][kx.time] : ⵠΔ[1104][kx.time];
    Gn.save();
    Gn.translate(eo * 20, eo * 0);
    Gn.rotate(-this.rotate.ⲆⵠΔ);
    Gn.globalAlpha = this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ * eo / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = this.ᐃᐃᐃΔ * (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ);
      b = ⵠΔ[1109];
      bp(Gn, b, eo * -ΔΔⵠ / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.globalAlpha = 1;
    Gn.restore();
    Gn.restore();
  }
  function Gu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ΔΔΔⵠΔ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[526][kx.time];
    ΔΔⵠ = -ⵠᐃ.width * this.ΔΔΔⵠΔ.ⲆⵠΔ;
    ᐃⵠⲆ = -ⵠᐃ.height * this.ΔΔΔⵠΔ.ⲆⵠΔ;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Hu(a, b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠᐃ = ⵠΔ[a][this.info][kx.time];
    ΔΔⵠ = -ⵠᐃ.width / 2;
    ᐃⵠⲆ = -ⵠᐃ.height / 2;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == En) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var c = Ev(this.info, ⵠᐃ, ⵠⵠⵠⵠᐃⲆΔⲆⲆ);
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function Iu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && cj == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = Cl;
      }
      var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
      var c = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[838][kx.time];
      } else {
        f = ⵠΔ[191][kx.time];
      }
      var g = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.width;
      var a = -f.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠΔ[839][kx.time];
      } else {
        f = ⵠΔ[192][kx.time];
      }
      Gn.translate(0, f.height / 2);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function Ju() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == Cl) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[970][kx.time];
      } else {
        f = ⵠΔ[208][kx.time];
      }
      var g = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.width;
      var a = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.height;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠΔ[971][kx.time];
      } else {
        f = ⵠΔ[209][kx.time];
      }
      Gn.translate(0, f.height / 2);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function Ku() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃΔⲆⲆΔ.length == 0 || this.ᐃΔⲆⲆΔ[this.ᐃΔⲆⲆΔ.length - 1] <= 0.6)) {
      this.ᐃΔⲆⲆΔ.push(1);
    }
    for (var a = 0; this.ᐃΔⲆⲆΔ.length > a; a++) {
      this.ᐃΔⲆⲆΔ[a] = Math.max(0, this.ᐃΔⲆⲆΔ[a] - rx * 0.25);
      Gn.globalAlpha = this.ᐃΔⲆⲆΔ[a] / 1.3;
      var b = (1 - this.ᐃΔⲆⲆΔ[a]) * 40;
      var c = (1 - this.ᐃΔⲆⲆΔ[a]) * 35 + 10;
      _b(Gn, eo * -68 + b * Math.sin(-this.angle - Math.PI / 2), eo * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
      Rb(Gn, "#333333");
    }
    Gn.globalAlpha = 1;
    if (this.ᐃΔⲆⲆΔ.length > 0 && this.ᐃΔⲆⲆΔ[0] === 0) {
      this.ᐃΔⲆⲆΔ.shift();
    }
    Gn.restore();
  }
  function Lu() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var a = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    this.ⵠⵠⲆΔⵠᐃΔ = (this.ⵠⵠⲆΔⵠᐃΔ + rx * 3) % (Math.PI * 2);
    this.ⵠⲆⲆⲆⵠⲆⵠ = (this.ⵠⲆⲆⲆⵠⲆⵠ - rx * 3) % (Math.PI * 2);
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.save();
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[151][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.save();
    Gn.rotate(this.ⵠⵠⲆΔⵠᐃΔ);
    ⵠᐃ = ⵠΔ[528][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.save();
    Gn.rotate(this.ⵠⲆⲆⲆⵠⲆⵠ);
    ⵠᐃ = ⵠΔ[527][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.restore();
  }
  function Mu() {
    var a = undefined;
    var b = undefined;
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    if (this.ⵠⲆΔⵠΔ >= 0.1 && this.ⵠⲆΔⵠΔ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ⵠⲆΔⵠΔ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ⵠΔ[1150][kx.time];
      ΔΔⵠ = -a.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
      ᐃⵠⲆ = -a.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
      Gn.globalAlpha = c;
      bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      b = ⵠΔ[1151];
    }
    if (this.ⵠⲆΔⵠΔ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ⵠⲆΔⵠΔ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ⵠΔ[1152][kx.time];
      ΔΔⵠ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.width;
      ᐃⵠⲆ = -a.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
      Gn.globalAlpha = c;
      bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      b = ⵠΔ[1153];
    }
    if (this.action & 2 && b !== bj) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && Qr == this.ᐃᐃⲆ.ᐃⲆᐃ) {
        this.action -= 2;
      }
      Gn.globalAlpha = c * (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ);
      ΔΔⵠ = -b.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
      ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.height;
      bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    }
    Gn.globalAlpha = 1;
    Gn.restore();
  }
  function Nu() {
    if (this.info !== 10) {
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.angle);
      if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
        if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
          this.ᐃᐃⲆ.ⵠⵠᐃ = false;
        }
        var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
        var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
        var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ⵠΔ[623][kx.time];
      } else {
        e = ⵠΔ[287][kx.time];
      }
      bp(Gn, e, -e.width / 2 + c, -e.width / 2 + d);
      Gn.restore();
      for (var f = this.info & 15, g = 0; g < f; g++) {
        this.ΔⵠΔΔ[g].ΔΔⲆⲆ(294);
      }
    }
  }
  function Ou() {
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    a = this.info === 0 ? ⵠΔ[248][kx.time] : ⵠΔ[1222][kx.time];
    ΔΔⵠ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.width;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height;
    bp(Gn, a, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == Zh) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var a = ⵠΔ[1223];
      bp(Gn, a, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function Pu(a) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[a][kx.time];
    ΔΔⵠ = -ⵠᐃ.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Qu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + rx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - rx, 1);
    }
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = this.info === 0 ? ⵠΔ[232][kx.time] : ⵠΔ[1068][kx.time];
    ΔΔⵠ = -a.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ * this.scale;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height * this.scale;
    bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var a = ⵠΔ[1077];
      bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    a = this.info === 0 ? ⵠΔ[1072][kx.time] : ⵠΔ[1071][kx.time];
    ΔΔⵠ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.width * this.scale;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height * this.scale;
    Gn.save();
    Gn.translate(eo * -40, eo * 10);
    Gn.rotate(this.rotate.ⲆⵠΔ);
    bp(Gn, a, -ΔΔⵠ * eo / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[1078];
      bp(Gn, a, eo * -ΔΔⵠ / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    a = this.info === 0 ? ⵠΔ[1075][kx.time] : ⵠΔ[1074][kx.time];
    Gn.save();
    Gn.translate(eo * 40, eo * 10);
    Gn.rotate(-this.rotate.ⲆⵠΔ);
    bp(Gn, a, -ΔΔⵠ * eo / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[1079];
      bp(Gn, a, -ΔΔⵠ * eo / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.restore();
  }
  function Ru() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == cr) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = zh;
      }
      var a = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[135][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
  }
  function Su() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == _e) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = hi;
      }
      var a = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var b = a * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Gn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[154][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + rx * 3) % (Math.PI * 2);
    }
    Gn.rotate(this.rotate);
    ⵠᐃ = ⵠΔ[1202][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
  }
  function Tu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ΔΔΔⵠΔ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[1192][kx.time];
    ΔΔⵠ = -ⵠᐃ.width * this.ΔΔΔⵠΔ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ΔΔΔⵠΔ.ⲆⵠΔ * -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Uu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ΔΔΔⵠΔ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[289][kx.time];
    ΔΔⵠ = -ⵠᐃ.width * this.ΔΔΔⵠΔ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ΔΔΔⵠΔ.ⲆⵠΔ * -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function Vu() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.Δⵠⵠᐃ.ⵠⵠᐃ();
    Gn.globalAlpha = 0.3;
    var a = ⵠΔ[282][kx.time];
    var b = -a.width * this.Δⵠⵠᐃ.ⲆⵠΔ;
    var c = -a.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
    bp(Gn, a, -b / 2, -c / 2, b, c);
    Gn.globalAlpha = 1;
    Gn.restore();
  }
  function Wu() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      var a = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + rx * 0.5) % (Math.PI * 2);
    }
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.save();
    Gn.rotate(this.rotate);
    ⵠᐃ = ⵠΔ[641][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.save();
    Gn.rotate(this.ΔΔΔΔᐃᐃⵠΔⵠ);
    ⵠᐃ = ⵠΔ[642][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.restore();
  }
  function Xu() {
    if (this.info >= 10) {
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.angle);
      if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
        if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == Zh) {
          this.ᐃᐃⲆ.ⵠⵠᐃ = Qr;
        }
        var b = eo * (rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600);
        var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
        var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      var e = ⵠΔ[206][kx.time];
      var f = -e.width * this.Δⵠⵠᐃ.ⲆⵠΔ;
      var g = -e.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, e, -f / 2 + c, -g / 2 + d, f, g);
      Gn.restore();
    }
  }
  function Zu() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var a = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Gn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[157][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + rx * 3) % (Math.PI * 2);
    }
    Gn.rotate(this.rotate);
    ⵠᐃ = ⵠΔ[1214][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
  }
  function $u() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.ΔⵠΔΔ[c].ΔΔⲆⲆ(207, this.x, this.y);
      }
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.angle);
      if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
        if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
          this.ᐃᐃⲆ.ⵠⵠᐃ = false;
        }
        var d = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
        var e = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * d;
        var f = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * d;
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ⵠΔ[958][kx.time];
      } else {
        g = ⵠΔ[957][kx.time];
      }
      bp(Gn, g, -g.width / 2 + e, -g.width / 2 + f);
      Gn.restore();
    }
  }
  function _u(a, b, c) {
    if (a >= 0) {
      ⵠᐃ = ⵠΔ[a][kx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (0 + b), -ⵠᐃ.height / 4 + eo * (c + 35));
          break;
        case 74:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (1 + b) * eo, -ⵠᐃ.height / 4 + (c + 45) * eo);
          break;
        case 75:
        case 76:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (1 + b), -ⵠᐃ.height / 4 + (c + 40) * eo);
      }
    }
  }
  function av() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.ΔⲆⵠΔⵠⵠⲆ.ⵠⵠᐃ();
    this.ΔⵠΔⲆⲆᐃⲆ.ⵠⵠᐃ();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    c = this.info === 0 ? ⵠΔ[231][kx.time] : ⵠΔ[1053][kx.time];
    ΔΔⵠ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -c.width;
    ᐃⵠⲆ = -c.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var c = ⵠΔ[1056];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ΔⲆⲆⵠⲆ.ⵠⵠᐃ() && this.ΔⲆⲆⵠⲆ.ᐃⲆᐃ == Cl) {
        this.action -= 4;
      }
      Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
      c = ⵠΔ[1065];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle + b);
    Gn.translate(100, 0);
    Gn.rotate(a);
    c = this.info === 0 ? ⵠΔ[1060][kx.time] : ⵠΔ[1059][kx.time];
    ΔΔⵠ = this.ΔⲆⵠΔⵠⵠⲆ.ⲆⵠΔ * -c.width;
    ᐃⵠⲆ = this.ΔⲆⵠΔⵠⵠⲆ.ⲆⵠΔ * -c.height;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      c = ⵠΔ[1057];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
      c = ⵠΔ[1066];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle + a + b);
    Gn.translate(100, 0);
    Gn.rotate(a);
    c = this.info === 0 ? ⵠΔ[1063][kx.time] : ⵠΔ[1062][kx.time];
    ΔΔⵠ = -c.width * this.ΔⵠΔⲆⲆᐃⲆ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ΔⵠΔⲆⲆᐃⲆ.ⲆⵠΔ * -c.height;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      c = ⵠΔ[1058];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
      c = ⵠΔ[1067];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function bv() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == hi) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = Cl;
      }
      var a = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var b = a * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⵠⵠⲆΔⵠᐃΔ = (this.ⵠⵠⲆΔⵠᐃΔ + rx * 3) % (Math.PI * 2);
    this.ⵠⲆⲆⲆⵠⲆⵠ = (this.ⵠⲆⲆⲆⵠⲆⵠ - rx * 3) % (Math.PI * 2);
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.save();
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[152][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.save();
    Gn.rotate(this.ⵠⵠⲆΔⵠᐃΔ);
    ⵠᐃ = ⵠΔ[1194][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.save();
    Gn.rotate(this.ⵠⲆⲆⲆⵠⲆⵠ);
    ⵠᐃ = ⵠΔ[1193][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
    Gn.restore();
  }
  function cv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && lg == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = hi;
      }
      var b = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[812][kx.time];
      } else {
        f = ⵠΔ[188][kx.time];
      }
      var g = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.width;
      var a = -f.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠΔ[813][kx.time];
      } else {
        f = ⵠΔ[189][kx.time];
      }
      Gn.translate(0, f.height / 2);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function dv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + rx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - rx, 1);
    }
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = ⵠΔ[449][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.width);
    ᐃⵠⲆ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height);
    bp(Gn, a, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var a = ⵠΔ[463];
      bp(Gn, a, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    a = ⵠΔ[451][kx.time];
    ΔΔⵠ = -a.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ * this.scale;
    ᐃⵠⲆ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height);
    Gn.save();
    Gn.translate(eo * -30, eo * 70);
    Gn.rotate(this.rotate.ⲆⵠΔ);
    bp(Gn, a, eo * -10, eo * -40, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[466];
      bp(Gn, a, eo * -10, eo * -40, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    a = ⵠΔ[452][kx.time];
    Gn.save();
    Gn.translate(eo * 30, eo * 70);
    Gn.rotate(-this.rotate.ⲆⵠΔ);
    bp(Gn, a, eo * 10 - ΔΔⵠ, eo * -40, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[467];
      bp(Gn, a, eo * 10 - ΔΔⵠ, eo * -40, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.restore();
  }
  function ev() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var a = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Gn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[156][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + rx * 3) % (Math.PI * 2);
    }
    Gn.rotate(this.rotate);
    ⵠᐃ = ⵠΔ[1210][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
  }
  function fv() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == Zh) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var a = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Gn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[155][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + rx * 3) % (Math.PI * 2);
    }
    Gn.rotate(this.rotate);
    ⵠᐃ = ⵠΔ[1206][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
  }
  function gv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ⵠᐃⲆΔⲆΔΔ = Math.min(1, this.ⵠᐃⲆΔⲆΔΔ + rx * 2);
    Gn.globalAlpha = this.ⵠᐃⲆΔⲆΔΔ * Math.min(1, Math.max(0, ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r) / 80));
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[247][kx.time][this.ⵠΔⵠΔᐃ];
    if (this.ⵠΔⵠΔᐃ < 2) {
      ΔΔⵠ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -ⵠᐃ.width;
      ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -ⵠᐃ.height;
    } else if (this.ΔᐃΔⲆᐃΔⵠ === 0) {
      ΔΔⵠ = -ⵠᐃ.width;
      ᐃⵠⲆ = -ⵠᐃ.height;
    } else {
      ΔΔⵠ = -ⵠᐃ.width * 1.35;
      ᐃⵠⲆ = -ⵠᐃ.height * 1.35;
    }
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.globalAlpha = 1;
    Gn.restore();
  }
  function hv() {
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = kq;
      }
      var a = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var b = a * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var c = a * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Gn.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    Gn.translate(lx.ⲆⲆⵠ.x + this.x + b, lx.ⲆⲆⵠ.y + this.y + c);
    Gn.rotate(this.angle);
    ⵠᐃ = ⵠΔ[153][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + rx * 3) % (Math.PI * 2);
    }
    Gn.rotate(this.rotate);
    ⵠᐃ = ⵠΔ[1198][kx.time];
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2, -ⵠᐃ.height / 2);
    Gn.restore();
  }
  function iv() {
    if ((this.info & 1) == 1) {
      this.ⵠⲆΔⵠΔ = Math.min(this.ⵠⲆΔⵠΔ + rx, 2.2);
    } else {
      this.ⵠⲆΔⵠΔ = Math.max(this.ⵠⲆΔⵠΔ - rx, 0);
      this.ᐃⵠⵠⵠᐃΔΔ += rx;
      if (this.ᐃⵠⵠⵠᐃΔΔ > 0.1) {
        this.ᐃⵠⵠⵠᐃΔΔ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.Δⵠⵠᐃ.push(a);
      }
    }
    for (var b = 0; b < this.Δⵠⵠᐃ.length; b++) {
      a = this.Δⵠⵠᐃ[b];
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + a.x, lx.ⲆⲆⵠ.y + a.y);
      a.a = Math.min(1, 0 + rx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      Gn.globalAlpha = c * 0.8;
      _b(Gn, 0, 0, a.r);
      Rb(Gn, tr.ⲆⵠᐃΔⲆΔⵠ[kx.time]);
      Gn.restore();
      if (1 === 0) {
        this.Δⵠⵠᐃ.splice(b, 1);
        b--;
      }
    }
  }
  function jv(a, b, c) {
    if (a >= 0) {
      ⵠᐃ = ⵠΔ[a][kx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - eo * (45 + b), -ⵠᐃ.height / 2 + eo * (c + 22));
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (52 + b), -ⵠᐃ.height / 4 + (c + 20) * eo);
          break;
        case 98:
        case 99:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (57 + b), -ⵠᐃ.height / 4 + (c + 20) * eo);
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * eo, -ⵠᐃ.height / 4 + eo * (c + 45));
          break;
        case 30:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (52 + b), -ⵠᐃ.height / 4 + (c + 45) * eo);
          break;
        case 19:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * eo, -ⵠᐃ.height / 4 + (c + 44) * eo);
          break;
        case 9:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - (47 + b) * eo, -ⵠᐃ.height / 2 + (c + 44) * eo);
          break;
        case 62:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - eo * (40 + b), -ⵠᐃ.height / 2 + eo * (c + 65));
          break;
        case 12:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (37 + b) * eo, -ⵠᐃ.height / 4 + (c + 85) * eo);
          break;
        case 34:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (37 + b), -ⵠᐃ.height / 4 + (c + 85) * eo);
          break;
        case 54:
        case 53:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (26 + b), -ⵠᐃ.height / 4 + (c + 77) * eo);
          break;
        case 17:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (37 + b), -ⵠᐃ.height / 4 + eo * (c + 85));
          break;
        case 63:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (47 + b), -ⵠᐃ.height / 4 + eo * (c + 44));
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (37 + b), -ⵠᐃ.height / 4 + eo * (c + 30));
          break;
        case 56:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (47 + b) * eo, -ⵠᐃ.height / 4 + (c + 35) * eo);
          break;
        case 92:
        case 93:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (47 + b), -ⵠᐃ.height / 4 + (c + 40) * eo);
          break;
        case 89:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - eo * (47 + b), -ⵠᐃ.height / 4 + eo * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (37 + b) * eo, -ⵠᐃ.height / 4 + (c + 90) * eo);
          break;
        case 18:
          Xv(a, ⵠᐃ, -ⵠᐃ.width / 4 - (40 + b) * eo, -ⵠᐃ.height / 4 + (c + 85) * eo);
          break;
        case 16:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - eo * (39 + b), -ⵠᐃ.height / 2 + (c + 90) * eo);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - eo * (46 + b), -ⵠᐃ.height / 2 + eo * (c + 35));
          break;
        case 49:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - eo * (47 + b), -ⵠᐃ.height / 2 + eo * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - (46 + b) * eo, -ⵠᐃ.height / 2 + eo * (c + 35));
          break;
        case 55:
          Yv(a, ⵠᐃ, -ⵠᐃ.width / 2 - eo * (47 + b), -ⵠᐃ.height / 2 + eo * (c + 20));
      }
    }
  }
  function kv(a, b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    c = ⵠΔ[a][kx.time];
    ΔΔⵠ = -c.width;
    ᐃⵠⲆ = -c.height;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var c = ⵠΔ[b];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function lv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + rx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - rx, 1);
    }
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = this.info === 0 ? ⵠΔ[233][kx.time] : ⵠΔ[1083][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.width);
    ᐃⵠⲆ = this.scale * (-a.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
    bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == cr) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var a = ⵠΔ[1092];
      bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    a = this.info === 0 ? ⵠΔ[1087][kx.time] : ⵠΔ[1086][kx.time];
    ΔΔⵠ = this.scale * (-a.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height * this.scale;
    Gn.save();
    Gn.translate(eo * -40, eo * 10);
    Gn.rotate(this.rotate.ⲆⵠΔ);
    bp(Gn, a, eo * -ΔΔⵠ / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[1093];
      bp(Gn, a, eo * -ΔΔⵠ / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    a = this.info === 0 ? ⵠΔ[1090][kx.time] : ⵠΔ[1089][kx.time];
    Gn.save();
    Gn.translate(eo * 40, eo * 10);
    Gn.rotate(-this.rotate.ⲆⵠΔ);
    bp(Gn, a, eo * -ΔΔⵠ / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[1094];
      bp(Gn, a, eo * -ΔΔⵠ / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.restore();
  }
  function mv(a, b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    c = ⵠΔ[a][kx.time];
    ΔΔⵠ = -c.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    ᐃⵠⲆ = -c.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var c = ⵠΔ[b];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function nv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == Cl) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = En;
      }
      var a = (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600 * eo;
      var b = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠᐃ = ⵠΔ[407][kx.time];
    } else {
      ⵠᐃ = ⵠΔ[119][kx.time];
    }
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2 + b, -ⵠᐃ.height / 2 + c);
    Gn.restore();
  }
  function ov() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == ra) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = lg;
      }
      var b = eo * ((1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * rx * 600);
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[985][kx.time];
      } else {
        f = ⵠΔ[210][kx.time];
      }
      var g = -f.width * this.Δⵠⵠᐃ.ⲆⵠΔ;
      var a = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.height;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠΔ[986][kx.time];
      } else {
        f = ⵠΔ[211][kx.time];
      }
      Gn.translate(0, f.height / 2);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function pv() {
    if (this.info >= 10) {
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.angle);
      if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
        if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
          this.ᐃᐃⲆ.ⵠⵠᐃ = Zh;
        }
        var b = rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600 * eo;
        var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
        var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      var e = ⵠΔ[115][kx.time];
      var f = this.Δⵠⵠᐃ.ⲆⵠΔ * -e.width;
      var g = -e.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, e, -f / 2 + c, -g / 2 + d, f, g);
      Gn.restore();
    }
  }
  function qv(c, e, f, i, j, k, a, n = 0, o) {
    for (var h = c; e >= h; h++) {
      for (var q = f; i >= q; q++) {
        var r = ix.ΔΔᐃⲆ[h][q];
        if (r !== bj && r[k] !== undefined) {
          var s = r[k];
          var t = ⵠΔ[j][kx.time][s.ⲆΔⲆⲆΔᐃᐃ];
          bp(Gn, t, lx.ⲆⲆⵠ.x + s.x - t.width / (ⲆⵠⲆᐃᐃ * 4), lx.ⲆⲆⵠ.y + s.y - t.height / (ⲆⵠⲆᐃᐃ * 4), t.width / (ⲆⵠⲆᐃᐃ * 2), t.height / (ⲆⵠⲆᐃᐃ * 2));
          if (hx.ΔⲆᐃΔᐃ) {
            var w = 2147483648;
            var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
            if (x < 0.2) {
              x = Math.floor(ⵠΔ[1025][kx.time][s.ⲆΔⲆⲆΔᐃᐃ].length * (x * 5));
              t = ⵠΔ[1025][kx.time][s.ⲆΔⲆⲆΔᐃᐃ][x];
              bp(Gn, t, lx.ⲆⲆⵠ.x + s.x - t.width / (ⲆⵠⲆᐃᐃ * 4), lx.ⲆⲆⵠ.y + s.y - t.height / (ⲆⵠⲆᐃᐃ * 4), t.width / (ⲆⵠⲆᐃᐃ * 2), t.height / (ⲆⵠⲆᐃᐃ * 2));
            } else if (s.ⲆⲆΔⲆᐃΔᐃ !== 0) {
              t = ⵠΔ[1026][kx.time];
              var y = ($p + h % 2 * 30) % 60;
              Gn.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
              bp(Gn, t, lx.ⲆⲆⵠ.x + s.x - t.width / (ⲆⵠⲆᐃᐃ * 4), lx.ⲆⲆⵠ.y + s.y - t.height / (ⲆⵠⲆᐃᐃ * 4) - 30 + y, t.width / (ⲆⵠⲆᐃᐃ * 2), t.height / (ⲆⵠⲆᐃᐃ * 2));
              Gn.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function rv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == En) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = false;
      }
      var a = rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600 * eo;
      var b = a * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var c = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠᐃ = ⵠΔ[183][kx.time];
    } else {
      ⵠᐃ = ⵠΔ[802][kx.time][this.info - 1];
    }
    bp(Gn, ⵠᐃ, -ⵠᐃ.width / 2 + b, -ⵠᐃ.height / 2 + c);
    Gn.restore();
  }
  function sv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && En == this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = ce;
      }
      var b = rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600 * eo;
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[668][kx.time];
      } else {
        f = ⵠΔ[132][kx.time];
      }
      var g = this.Δⵠⵠᐃ.ⲆⵠΔ * -f.width;
      var a = -f.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ⲆΔΔⲆᐃΔΔ.ⵠⵠᐃ();
      if (this.info & 16) {
        f = ⵠΔ[638][kx.time];
      } else {
        f = ⵠΔ[134][kx.time];
      }
      Gn.translate(0, f.height / 2);
      Gn.rotate(this.ⲆΔΔⲆᐃΔΔ.ⲆⵠΔ);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function tv(a, b) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    c = ⵠΔ[a][kx.time];
    ΔΔⵠ = -c.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -c.height;
    bp(Gn, c, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == cr) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var c = ⵠΔ[b];
      bp(Gn, c, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function uv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + rx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - rx, 1);
    }
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = ⵠΔ[450][kx.time];
    ΔΔⵠ = this.scale * (-a.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
    ᐃⵠⲆ = -a.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ * this.scale;
    bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var a = ⵠΔ[464];
      bp(Gn, a, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    a = ⵠΔ[453][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.width);
    ᐃⵠⲆ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -a.height);
    Gn.save();
    Gn.translate(eo * -60, eo * 20);
    Gn.rotate(this.rotate.ⲆⵠΔ);
    bp(Gn, a, eo * -ΔΔⵠ / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[468];
      bp(Gn, a, -ΔΔⵠ * eo / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    a = ⵠΔ[454][kx.time];
    Gn.save();
    Gn.translate(eo * 60, eo * 20);
    Gn.rotate(-this.rotate.ⲆⵠΔ);
    bp(Gn, a, eo * -ΔΔⵠ / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      a = ⵠΔ[469];
      bp(Gn, a, eo * -ΔΔⵠ / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.restore();
  }
  function vv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = cj;
      }
      var b = rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600 * eo;
      var c = Math.sin(this.ᐃᐃⲆ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃᐃⲆ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      Gn.rotate(this.angle);
      this.Δⵠⵠᐃ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ⵠΔ[953][kx.time];
      } else {
        f = ⵠΔ[204][kx.time];
      }
      var g = -f.width * this.Δⵠⵠᐃ.ⲆⵠΔ;
      var a = -f.height * this.Δⵠⵠᐃ.ⲆⵠΔ;
      bp(Gn, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ⵠΔ[954][kx.time];
      } else {
        f = ⵠΔ[205][kx.time];
      }
      Gn.translate(0, f.height / 2);
      bp(Gn, f, c - f.width / 2, -f.height + d);
    }
    Gn.restore();
  }
  function wv() {
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    a = this.info === 0 ? ⵠΔ[1042][kx.time] : ⵠΔ[1044][kx.time];
    ΔΔⵠ = -a.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    ᐃⵠⲆ = -a.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    bp(Gn, a, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var a = ⵠΔ[1045];
      bp(Gn, a, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function xv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.ΔⲆⵠΔⵠⵠⲆ.ⵠⵠᐃ();
    this.ΔⵠΔⲆⲆᐃⲆ.ⵠⵠᐃ();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    c = this.info === 0 ? ⵠΔ[887][kx.time] : ⵠΔ[886][kx.time];
    ΔΔⵠ = -c.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    ᐃⵠⲆ = -c.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      var c = ⵠΔ[888];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ΔⲆⲆⵠⲆ.ⵠⵠᐃ() && this.ΔⲆⲆⵠⲆ.ᐃⲆᐃ == Xa) {
        this.action -= 4;
      }
      Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
      c = ⵠΔ[891];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle + b);
    Gn.translate(55, 0);
    Gn.rotate(a);
    c = this.info === 0 ? ⵠΔ[894][kx.time] : ⵠΔ[896][kx.time];
    ΔΔⵠ = this.ΔⲆⵠΔⵠⵠⲆ.ⲆⵠΔ * -c.width;
    ᐃⵠⲆ = this.ΔⲆⵠΔⵠⵠⲆ.ⲆⵠΔ * -c.height;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      c = ⵠΔ[889];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
      c = ⵠΔ[892];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle + a + b);
    Gn.translate(55, 0);
    Gn.rotate(a);
    c = this.info === 0 ? ⵠΔ[895][kx.time] : ⵠΔ[897][kx.time];
    ΔΔⵠ = this.ΔⵠΔⲆⲆᐃⲆ.ⲆⵠΔ * -c.width;
    ᐃⵠⲆ = -c.height * this.ΔⵠΔⲆⲆᐃⲆ.ⲆⵠΔ;
    bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    if (this.action & 2) {
      Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
      c = ⵠΔ[890];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    if (this.action & 4) {
      Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
      c = ⵠΔ[893];
      bp(Gn, c, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
  }
  function yv(a, b, c) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + b, lx.ⲆⲆⵠ.y + c);
    Gn.rotate(this.angle);
    Gn.translate(this.x - b, this.y - c);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    ⵠᐃ = ⵠΔ[a][kx.time];
    ΔΔⵠ = -ⵠᐃ.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -ⵠᐃ.height;
    bp(Gn, ⵠᐃ, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
    Gn.restore();
  }
  function zv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    if (this.ᐃᐃⲆ.ⵠⵠᐃ) {
      if (this.ᐃᐃⲆ.ΔᐃᐃΔ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ΔᐃᐃΔ.ᐃⲆᐃ == 0) {
        this.ᐃᐃⲆ.ⵠⵠᐃ = cj;
      }
      var b = rx * (1 - this.ᐃᐃⲆ.ΔᐃᐃΔ.ⲆⵠΔ) * 600 * eo;
      var c = b * Math.sin(this.ᐃᐃⲆ.angle - this.angle);
      var d = Math.cos(this.ᐃᐃⲆ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ⵠΔ[716][kx.time];
      bp(Gn, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ⵠⵠᐃ();
      var e = ⵠΔ[720][kx.time];
      var f = -e.width * this.up.ⲆⵠΔ;
      var g = this.up.ⲆⵠΔ * -e.height;
      bp(Gn, e, -f / 2 + eo * 1, -g / 2 + eo * 3, f, g);
    } else {
      e = ⵠΔ[144][kx.time];
      bp(Gn, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    Gn.restore();
  }
  function Av() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    Gn.rotate(this.angle);
    var a = ⲆᐃΔ.ᐃᐃⵠΔ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + rx / 2, 1.8) : Math.max(this.scale - rx, 1);
    this.ᐃⵠⵠⵠ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    this.ᐃᐃᐃΔ = a < 350 ? Math.max(0, this.ᐃᐃᐃΔ - rx * 2.2) : Math.min(1, this.ᐃᐃᐃΔ + rx * 2.2);
    b = ⵠΔ[1135][kx.time];
    ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width);
    ᐃⵠⲆ = this.scale * (-b.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
    Gn.globalAlpha = 1 - this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    b = ⵠΔ[1119][kx.time];
    ΔΔⵠ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width * this.scale;
    ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.height * this.scale;
    Gn.globalAlpha = this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
        this.action -= 2;
      }
      Gn.globalAlpha = (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ) * (1 - this.ᐃᐃᐃΔ);
      var b = ⵠΔ[1136];
      ΔΔⵠ = this.scale * (-b.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
      ᐃⵠⲆ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.height);
      bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = this.ᐃᐃᐃΔ * (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ);
      b = ⵠΔ[1128];
      ΔΔⵠ = this.scale * (this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.width);
      ᐃⵠⲆ = this.ᐃⵠⵠⵠ.ⲆⵠΔ * -b.height * this.scale;
      bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    b = ⵠΔ[1122][kx.time];
    ΔΔⵠ = -b.width * this.ᐃⵠⵠⵠ.ⲆⵠΔ * this.scale;
    ᐃⵠⲆ = this.scale * (-b.height * this.ᐃⵠⵠⵠ.ⲆⵠΔ);
    Gn.save();
    Gn.translate(eo * -40, eo * 80);
    Gn.rotate(this.rotate.ⲆⵠΔ);
    Gn.globalAlpha = this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ * eo / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ) * this.ᐃᐃᐃΔ;
      b = ⵠΔ[1129];
      bp(Gn, b, eo * -ΔΔⵠ / 4, eo * -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.restore();
    b = ⵠΔ[1125][kx.time];
    Gn.save();
    Gn.translate(eo * 40, eo * 80);
    Gn.rotate(-this.rotate.ⲆⵠΔ);
    Gn.globalAlpha = this.ᐃᐃᐃΔ;
    bp(Gn, b, -ΔΔⵠ * eo / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
    if (this.action & 2) {
      Gn.globalAlpha = this.ᐃᐃᐃΔ * (0.6 - this.ᐃᐃⲆ.ⲆⵠΔ);
      b = ⵠΔ[1130];
      bp(Gn, b, -ΔΔⵠ * eo / 4, -ᐃⵠⲆ * eo / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
      Gn.globalAlpha = 1;
    }
    Gn.globalAlpha = 1;
    Gn.restore();
    Gn.restore();
  }
  function Cv(a) {
    if (a > 0) {
      var b = ⵠΔ[a][kx.time];
      switch (a) {
        case 58:
          Yv(a, b, -b.width / 2 + eo * 2, -b.height / 2 - eo * 5);
          break;
        case 10:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 18);
          break;
        case 11:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 10);
          break;
        case 23:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 19);
          break;
        case 24:
          Xv(a, b, -b.width / 4, -b.height / 4 - eo * 20);
          break;
        case 25:
          Yv(a, b, -b.width / 2 - eo * 1, -b.height / 2 - eo * 23);
          break;
        case 26:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 5);
          break;
        case 27:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 2);
          break;
        case 43:
          Yv(a, b, -b.width / 2 + eo * 1.5, -b.height / 2 - eo * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          Xv(a, b, -b.width / 4, -b.height / 4 + eo * 2);
          break;
        case 41:
        case 42:
          Yv(a, b, -b.width / 2 - eo * 5, -b.height / 2 - eo * 2);
          break;
        case 40:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 2);
          break;
        case 85:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 2);
          break;
        case 48:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 2);
          break;
        case 47:
          Yv(a, b, -b.width / 2 + eo * 2, -b.height / 2);
          break;
        case 59:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 5);
          break;
        case 77:
        case 78:
        case 79:
          Yv(a, b, -b.width / 2 - eo * 1, -b.height / 2);
          break;
        case 83:
          Yv(a, b, -b.width / 2, -b.height / 2 + eo * 2);
          break;
        case 84:
        case 86:
          Yv(a, b, -b.width / 2, -b.height / 2 + eo * 8);
          break;
        case 61:
          Yv(a, b, -b.width / 2, -b.height / 2 - eo * 4);
      }
    }
  }
  function Dv() {
    if (!this.ⵠᐃᐃΔⲆ && this.ⲆΔⲆⲆᐃ !== 0) {
      if (this.x != this.r.x || this.y != this.r.y) {
        var a = (ⲆᐃΔ.ⲆⲆⵠΔⲆⵠΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⲆΔᐃᐃⲆ = ⲆᐃΔ.ⵠⲆⵠⵠᐃᐃΔ(a, this.ⲆΔᐃᐃⲆ);
        this.ⲆΔᐃᐃⲆ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(this.ⲆΔᐃᐃⲆ, a, 0.018);
      }
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      Gn.rotate(this.ⲆΔᐃᐃⲆ);
      if (this.ⲆΔⲆⲆᐃ === 223) {
        if (this.ⵠⵠⵠⵠⲆ > 50 || this.ⲆᐃᐃΔⵠ > 0) {
          if (this.ⵠⵠⵠⵠⲆ > 50) {
            this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx);
          } else {
            this.ⲆᐃᐃΔⵠ = Math.max(0, this.ⲆᐃᐃΔⵠ - rx);
          }
          Gn.globalAlpha = this.ⲆᐃᐃΔⵠ;
          var b = ⵠΔ[225][kx.time];
          Xv(225, b, -b.width / 4, -b.height / 4);
          Gn.globalAlpha = 1;
        }
        b = ⵠΔ[223][kx.time];
        Xv(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆⲆᐃ === 229) {
        this.ΔᐃⵠⲆΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(this.ΔᐃⵠⲆΔ, this.ⵠⵠⵠⵠⲆ, 0.018);
        this.ΔⲆⲆᐃⵠⲆⵠ.ⵠⵠᐃ();
        if (this.ⵠⵠⵠⵠⲆ > 85) {
          this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx / 4);
        } else {
          this.ⲆᐃᐃΔⵠ = Math.max(0.1, this.ⲆᐃᐃΔⵠ - rx);
        }
        b = ⵠΔ[1100][kx.time];
        Xv(1100, b, -b.width / 4, -b.height / 4);
        b = ⵠΔ[1103][kx.time];
        ΔΔⵠ = -b.width;
        ᐃⵠⲆ = -b.height;
        Gn.save();
        Gn.translate(eo * -20, eo * -20);
        Gn.rotate(this.ⲆᐃᐃΔⵠ * this.ΔⲆⲆᐃⵠⲆⵠ.ⲆⵠΔ);
        bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
        Gn.restore();
        b = ⵠΔ[1106][kx.time];
        Gn.save();
        Gn.translate(eo * 20, eo * -20);
        Gn.rotate(-this.ΔⲆⲆᐃⵠⲆⵠ.ⲆⵠΔ * this.ⲆᐃᐃΔⵠ);
        bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
        Gn.restore();
      } else if (this.ⲆΔⲆⲆᐃ === 228) {
        this.ΔᐃⵠⲆΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(this.ΔᐃⵠⲆΔ, this.ⵠⵠⵠⵠⲆ, 0.018);
        this.ΔⲆⲆᐃⵠⲆⵠ.ⵠⵠᐃ();
        if (this.ⵠⵠⵠⵠⲆ > 85) {
          this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx / 4);
        } else {
          this.ⲆᐃᐃΔⵠ = Math.max(0.1, this.ⲆᐃᐃΔⵠ - rx);
        }
        b = ⵠΔ[1085][kx.time];
        Xv(1085, b, -b.width / 4, -b.height / 4);
        b = ⵠΔ[1088][kx.time];
        ΔΔⵠ = -b.width;
        ᐃⵠⲆ = -b.height;
        Gn.save();
        Gn.translate(eo * -40, eo * -45);
        Gn.rotate(this.ⲆᐃᐃΔⵠ * this.ΔⲆⲆᐃⵠⲆⵠ.ⲆⵠΔ);
        bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
        Gn.restore();
        b = ⵠΔ[1091][kx.time];
        Gn.save();
        Gn.translate(eo * 40, eo * -45);
        Gn.rotate(this.ⲆᐃᐃΔⵠ * -this.ΔⲆⲆᐃⵠⲆⵠ.ⲆⵠΔ);
        bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
        Gn.restore();
      } else if (this.ⲆΔⲆⲆᐃ === 227) {
        this.ΔᐃⵠⲆΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(this.ΔᐃⵠⲆΔ, this.ⵠⵠⵠⵠⲆ, 0.018);
        this.ΔⲆⲆᐃⵠⲆⵠ.ⵠⵠᐃ();
        if (this.ⵠⵠⵠⵠⲆ > 85) {
          this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx / 4);
        } else {
          this.ⲆᐃᐃΔⵠ = Math.max(0.1, this.ⲆᐃᐃΔⵠ - rx);
        }
        b = ⵠΔ[1070][kx.time];
        Xv(1070, b, -b.width / 4, -b.height / 4);
        b = ⵠΔ[1073][kx.time];
        ΔΔⵠ = -b.width;
        ᐃⵠⲆ = -b.height;
        Gn.save();
        Gn.translate(eo * -40, eo * -45);
        Gn.rotate(this.ΔⲆⲆᐃⵠⲆⵠ.ⲆⵠΔ * this.ⲆᐃᐃΔⵠ);
        bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
        Gn.restore();
        b = ⵠΔ[1076][kx.time];
        Gn.save();
        Gn.translate(eo * 40, eo * -45);
        Gn.rotate(-this.ΔⲆⲆᐃⵠⲆⵠ.ⲆⵠΔ * this.ⲆᐃᐃΔⵠ);
        bp(Gn, b, -ΔΔⵠ / 4, -ᐃⵠⲆ / 4, ΔΔⵠ / 2, ᐃⵠⲆ / 2);
        Gn.restore();
      } else if (this.ⲆΔⲆⲆᐃ === 91) {
        this.ΔᐃⵠⲆΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(this.ΔᐃⵠⲆΔ, this.ⵠⵠⵠⵠⲆ, 0.018);
        b = ⵠΔ[91][kx.time];
        Xv(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆⲆᐃ === 230) {
        this.ΔᐃⵠⲆΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(this.ΔᐃⵠⲆΔ, this.ⵠⵠⵠⵠⲆ, 0.018);
        b = ⵠΔ[236][kx.time];
        Xv(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆⲆᐃ === 224) {
        b = ⵠΔ[224][kx.time];
        Xv(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ⲆΔⲆⲆᐃ === 239) {
        b = ⵠΔ[1221][kx.time];
        if (this.ⵠⵠⵠⵠⲆ > 85) {
          this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx / 4);
        } else {
          this.ⲆᐃᐃΔⵠ = Math.max(0, this.ⲆᐃᐃΔⵠ - rx);
        }
        this.ⲆᐃⵠⲆⵠ += rx * 60;
        if (this.ⲆᐃⵠⲆⵠ > 60) {
          this.ⲆᐃⵠⲆⵠ -= 60;
        }
        var c = this.ⲆᐃᐃΔⵠ * (-6 + (this.ⲆᐃⵠⲆⵠ < 30 ? this.ⲆᐃⵠⲆⵠ / 30 : 1 - (this.ⲆᐃⵠⲆⵠ - 30) / 30) * 12);
        Xv(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⲆⲆᐃ === 225) {
        b = ⵠΔ[1043][kx.time];
        if (this.ⵠⵠⵠⵠⲆ > 85) {
          this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx / 4);
        } else {
          this.ⲆᐃᐃΔⵠ = Math.max(0, this.ⲆᐃᐃΔⵠ - rx);
        }
        this.ⲆᐃⵠⲆⵠ += rx * 60;
        if (this.ⲆᐃⵠⲆⵠ > 60) {
          this.ⲆᐃⵠⲆⵠ -= 60;
        }
        c = this.ⲆᐃᐃΔⵠ * ((this.ⲆᐃⵠⲆⵠ < 30 ? this.ⲆᐃⵠⲆⵠ / 30 : 1 - (this.ⲆᐃⵠⲆⵠ - 30) / 30) * 12 - 6);
        Xv(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⲆⲆᐃ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ⵠΔ[1055][kx.time];
        if (this.ⵠⵠⵠⵠⲆ > 85) {
          this.ⲆᐃᐃΔⵠ = Math.min(1, this.ⲆᐃᐃΔⵠ + rx / 4);
        } else {
          this.ⲆᐃᐃΔⵠ = Math.max(0, this.ⲆᐃᐃΔⵠ - rx);
        }
        this.ⲆᐃⵠⲆⵠ += rx * 60;
        if (this.ⲆᐃⵠⲆⵠ > 60) {
          this.ⲆᐃⵠⲆⵠ -= 60;
        }
        c = ((this.ⲆᐃⵠⲆⵠ < 30 ? this.ⲆᐃⵠⲆⵠ / 30 : 1 - (this.ⲆᐃⵠⲆⵠ - 30) / 30) * 12 - 6) * this.ⲆᐃᐃΔⵠ;
        Xv(1055, b, -b.width / 4 + c, -b.height / 4);
        Gn.restore();
        Gn.save();
        Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
        Gn.rotate(Math.PI + this.ⲆΔᐃᐃⲆ + e);
        Gn.translate(120, c);
        Gn.rotate(d);
        b = ⵠΔ[1060][kx.time];
        ΔΔⵠ = -b.width;
        ᐃⵠⲆ = -b.height;
        bp(Gn, b, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
        Gn.restore();
        Gn.save();
        Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
        Gn.rotate(Math.PI + this.ⲆΔᐃᐃⲆ + d + e);
        Gn.translate(120, c);
        Gn.rotate(d);
        b = ⵠΔ[1063][kx.time];
        ΔΔⵠ = -b.width;
        ᐃⵠⲆ = -b.height;
        bp(Gn, b, -ΔΔⵠ / 2, -ᐃⵠⲆ / 2, ΔΔⵠ, ᐃⵠⲆ);
      }
      Gn.restore();
    }
  }
  function Ev(b, c, d) {
    if (c.ᐃⲆΔⵠⵠᐃΔ() !== 1) {
      return c;
    }
    var e = ⵠⲆⲆⵠⲆⲆΔ[d][b];
    if (e === Ej) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⲆⲆᐃⲆᐃᐃΔⲆⵠ[d];
      f.fillRect(0, 0, g, a);
      ⵠⲆⲆⵠⲆⲆΔ[d][b] = e;
    }
    return e;
  }
  function Fv() {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = Fb(eo, this.text[a]);
          this.ᐃΔⵠΔΔⲆᐃ[a] = 0;
          this.ΔⵠⲆⵠΔⲆⲆ[a] = 0;
        }
        if (a === 1) {
          this.ΔⵠⲆⵠΔⲆⲆ[0] = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(this.ⲆᐃⵠⵠⵠⲆⲆ) * 30;
        }
      }
      this.ᐃΔⵠΔΔⲆᐃ[0] += rx;
      if (this.text.length > 1) {
        this.ⲆᐃⵠⵠⵠⲆⲆ = Math.min(this.ⲆᐃⵠⵠⵠⲆⲆ + rx, 1);
        if (this.ᐃΔⵠΔΔⲆᐃ[0] > 1 && this.ⲆᐃⵠⵠⵠⲆⲆ > 0.5) {
          this.ᐃΔⵠΔΔⲆᐃ[1] += rx;
        }
      }
      for (a = 0; this.text.length > a && a < 2; a++) {
        var b = this.ᐃΔⵠΔΔⲆᐃ[a];
        if (b > 0) {
          Gn.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          bp(Gn, this.label[a], -this.label[a].width / 2, -this.ΔⵠⲆⵠΔⲆⲆ[a] + -this.label[a].height / 2 - eo * 110);
        }
      }
      if (this.ᐃΔⵠΔΔⲆᐃ[0] > 4) {
        this.ᐃΔⵠΔΔⲆᐃ.shift();
        this.text.shift();
        this.ΔⵠⲆⵠΔⲆⲆ.shift();
        this.label.shift();
        this.ⲆᐃⵠⵠⵠⲆⲆ = 0;
      }
    }
    Gn.restore();
  }
  function Gv(a, b) {
    if (this.text) {
      if (this.timeout.ᐃⲆᐃ) {
        Gn.globalAlpha = 1 - this.timeout.ⲆⵠΔ;
      } else {
        Gn.globalAlpha = 1;
      }
      this.label ||= Tt(eo, this.text, 40, a, null, null, null, null, null, b, 10);
      bp(Gn, this.label, (Ln - this.label.width) / 2, eo * 50);
      Gn.globalAlpha = 1;
      if (this.timeout.ⵠⵠᐃ() && Ao == this.timeout.ᐃⲆᐃ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function Hv() {
    if (this.message !== undefined) {
      var a = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length > 0 ? -95 : 0;
      bp(Gn, this.message, 0, qn - this.message.height + a);
    }
  }
  function Iv() {
    if (this.enabled && this.ⵠⲆⲆⲆΔ >= 0) {
      var a = new Date().getTime() - this.ⵠⲆⲆⲆΔ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (a < 60) {
        a = 60 - a;
        this.label ||= Tt(eo, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ΔⲆⲆⲆⵠΔⵠ) {
          this.now = a;
          this.ΔⲆⲆⲆⵠΔⵠ = Tt(eo, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        bp(Gn, this.label, (Ln - this.label.width) / 2, eo * 100);
        Gn.globalAlpha = b;
        bp(Gn, this.ΔⲆⲆⲆⵠΔⵠ, (Ln - this.label.width) / 2 - this.ΔⲆⲆⲆⵠΔⵠ.width + eo * 15, eo * 100);
        Gn.globalAlpha = 1;
      }
    }
  }
  function Jv() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ⵠᐃᐃΔⲆ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var j = this.bubbles[f];
        if (j.ΔᐃⲆⵠⵠ > 0.5) {
          var k = 1 - (j.ΔᐃⲆⵠⵠ - 0.5) * 2;
        } else {
          k = j.ΔᐃⲆⵠⵠ * 2;
        }
        Gn.globalAlpha = k;
        var m = ⵠΔ[540][kx.time][j.id];
        bp(Gn, m, lx.ⲆⲆⵠ.x + j.x - m.width / 2, lx.ⲆⲆⵠ.y + j.y - m.height / 2);
        Gn.globalAlpha = 1;
      }
    } else {
      Gn.save();
      Gn.translate(lx.ⲆⲆⵠ.x + this.x, lx.ⲆⲆⵠ.y + this.y);
      kx.ⵠΔⵠΔⲆⲆΔᐃⲆ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                Gn.save();
                var b = a.attack.ⲆⵠΔ * -3 / Math.PI;
                if (a.attack.ᐃⲆᐃ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⲆⵠΔ) / 3;
                } else {
                  c = a.attack.ⲆⵠΔ;
                }
                Gn.rotate(a.angle - Math.PI / 2 + c);
                Gn.globalAlpha = b / 1.2;
                _b(Gn, eo * -40, eo * 90, eo * 5);
                Rb(Gn, "#0B6A84");
                Gn.globalAlpha = b / 1.2;
                _b(Gn, eo * -52, eo * 100, eo * 8);
                Rb(Gn, "#0B6A84");
                Gn.globalAlpha = b / 1.2;
                _b(Gn, eo * -30, eo * 95, eo * 4);
                Rb(Gn, "#0B6A84");
                Gn.globalAlpha = 1;
                Gn.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ΔᐃΔⲆᐃΔⵠ === 1) {
                  break;
                }
                if (a.ⵠⵠⵠⵠⵠ > 0) {
                  var d = tr.ᐃΔΔⲆΔⵠᐃ[kx.time];
                } else {
                  d = a.ᐃᐃΔΔΔⵠⲆ > 0 || a.ΔΔⵠᐃⵠ > 0 ? tr.ΔⵠⲆΔᐃᐃⵠ[kx.time] : tr.ⲆΔΔⵠⵠΔΔ[kx.time];
                }
                b = a.attack.ⲆⵠΔ * -3 / Math.PI;
                if ((c = a.attack.ᐃⲆᐃ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ⵠΔΔᐃΔⲆⵠ = a.angle;
                }
                Gn.save();
                Gn.rotate(a.ⵠΔΔᐃΔⲆⵠ - Math.PI / 2);
                Gn.globalAlpha = b;
                var e = eo * 25 + c * 25;
                _b(Gn, e, eo * 80, eo * 15);
                Rb(Gn, d);
                _b(Gn, -e, eo * 80, eo * 15);
                Rb(Gn, d);
                Gn.globalAlpha = 1;
                Gn.restore();
            }
          }
        })(this);
      }
      Gn.save();
      Gn.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ⲆΔⲆⲆᐃ !== 0) {
          this.ⵠⵠⲆΔᐃΔⲆ.ⵠⵠᐃ();
        } else if (this.action & 32) {
          this.ΔⵠⲆⵠⵠᐃᐃ.ⵠⵠᐃ();
        }
      }
      var p;
      var q = this.ⵠⵠⲆΔᐃΔⲆ.ⲆⵠΔ;
      var u = this.ΔⵠⲆⵠⵠᐃᐃ.ⲆⵠΔ;
      if (this.ᐃⵠⲆⲆⵠ === 85) {
        m = ⵠΔ[793][kx.time];
        p = 793;
      } else if (this.ᐃⵠⲆⲆⵠ === 20) {
        m = ⵠΔ[920][kx.time];
        p = 920;
      } else if (this.ᐃⵠⲆⲆⵠ === 21) {
        m = ⵠΔ[924][kx.time];
        p = 924;
      } else if (this.ᐃⵠⲆⲆⵠ === 22) {
        m = ⵠΔ[928][kx.time];
        p = 928;
      } else if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
        m = ⵠΔ[822][kx.time];
        p = 822;
      } else {
        m = ⵠΔ[7][this.Δⵠⵠⵠ][kx.time];
        p = 7;
      }
      ⵠⲆⲆᐃ = ⵠΔ[286][kx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ⵠⵠᐃ() && this.attack.ᐃⲆᐃ == Ah) {
          this.ᐃᐃᐃⲆᐃ = !this.ᐃᐃᐃⲆᐃ;
          this.action -= 16;
          if (lx.ΔᐃⲆⲆ == this.ΔᐃⲆⲆ) {
            lx.control.ᐃⵠⲆᐃ = 0;
          }
        }
        if (this.right >= 0) {
          this.ᐃᐃᐃⲆᐃ = jn;
        }
        var l = this.ᐃᐃᐃⲆᐃ ? this.attack.ⲆⵠΔ : -this.attack.ⲆⵠΔ / 3;
        var x = this.ᐃᐃᐃⲆᐃ ? this.attack.ⲆⵠΔ / 3 : -this.attack.ⲆⵠΔ;
        if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
          Gn.save();
          Gn.rotate(l);
          Yv(p, m, -m.width / 2 - eo * (66 + q), -m.height / 2 + eo * (5 + u));
          Gn.restore();
          Gn.save();
          Gn.rotate(x);
          Yv(p, m, -m.width / 2 + eo * (66 + q), -m.height / 2 + (5 + u) * eo);
          Gn.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            l = -ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ(-l);
          }
          Gn.save();
          Gn.rotate(l);
          Yv(286, ⵠⲆⲆᐃ, -ⵠⲆⲆᐃ.width / 2 - (49 + q) * eo, -ⵠⲆⲆᐃ.height / 2 + (15 + u) * eo);
          if (this.right === 28) {
            var b = ⵠΔ[this.right][this.Δⵠⵠᐃⵠ][kx.time];
            hw(this.right, this.Δⵠⵠᐃⵠ, b, -b.width / 4 - eo * (62 + q), -b.height / 4 + (u + 18) * eo);
          } else {
            jv(this.right, q, u);
          }
          if (p >= 920) {
            Xv(p, m, -m.width / 4 - eo * (49 + q), -m.height / 4 + (11 + u) * eo);
          } else if (p !== 793) {
            hw(p, this.Δⵠⵠⵠ, m, -m.width / 4 - (49 + q) * eo, -m.height / 4 + (11 + u) * eo);
          } else {
            Yv(p, m, -m.width / 2 - (49 + q) * eo, -m.height / 2 + (11 + u) * eo);
          }
          Gn.restore();
          Gn.save();
          Gn.rotate(x);
          Yv(286, ⵠⲆⲆᐃ, -ⵠⲆⲆᐃ.width / 2 + eo * (49 + q), -ⵠⲆⲆᐃ.height / 2 + eo * (15 + u));
          if (p >= 920) {
            Xv(p, m, -m.width / 4 + eo * (49 + q), -m.height / 4 + (11 + u) * eo);
          } else if (p !== 793) {
            hw(p, this.Δⵠⵠⵠ, m, -m.width / 4 + eo * (49 + q), -m.height / 4 + (11 + u) * eo);
          } else {
            Yv(p, m, -m.width / 2 + eo * (49 + q), -m.height / 2 + eo * (11 + u));
          }
          Gn.restore();
        }
      } else if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
        Yv(p, m, -m.width / 2 - (66 + q) * eo, -m.height / 2 + eo * (5 + u));
        Yv(p, m, -m.width / 2 + eo * (66 + q), -m.height / 2 + (5 + u) * eo);
      } else if (c === 0) {
        Yv(286, ⵠⲆⲆᐃ, -ⵠⲆⲆᐃ.width / 2 - (49 + q) * eo, -ⵠⲆⲆᐃ.height / 2 + (15 + u) * eo);
        if (this.right === 28) {
          b = ⵠΔ[this.right][this.Δⵠⵠᐃⵠ][kx.time];
          hw(this.right, this.Δⵠⵠᐃⵠ, b, -b.width / 4 - (62 + q) * eo, -b.height / 4 + (u + 18) * eo);
        } else {
          jv(this.right, q, u);
        }
        if (p >= 920) {
          Xv(p, m, -m.width / 4 - eo * (49 + q), -m.height / 4 + (11 + u) * eo);
        } else if (p !== 793) {
          hw(p, this.Δⵠⵠⵠ, m, -m.width / 4 - eo * (49 + q), -m.height / 4 + eo * (11 + u));
        } else {
          Yv(p, m, -m.width / 2 - eo * (49 + q), -m.height / 2 + eo * (11 + u));
        }
        Yv(286, ⵠⲆⲆᐃ, -ⵠⲆⲆᐃ.width / 2 + (49 + q) * eo, -ⵠⲆⲆᐃ.height / 2 + eo * (15 + u));
        if (p >= 920) {
          Xv(p, m, -m.width / 4 + eo * (49 + q), -m.height / 4 + (11 + u) * eo);
        } else if (p !== 793) {
          hw(p, this.Δⵠⵠⵠ, m, -m.width / 4 + (49 + q) * eo, -m.height / 4 + (11 + u) * eo);
        } else {
          Yv(p, m, -m.width / 2 + (49 + q) * eo, -m.height / 2 + eo * (11 + u));
        }
      }
      if (this.ΔⵠⲆⲆΔ && this.ᐃⵠⲆⲆⵠ < 1) {
        m = ⵠΔ[29][this.ᐃⵠⵠⲆΔᐃᐃ][kx.time];
        hw(29, this.ᐃⵠⵠⲆΔᐃᐃ, m, -m.width / 4, -m.height / 4 - eo * 39);
      }
      if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
        m = ⵠΔ[820][kx.time];
        Yv(820, m, -m.width / 2, -m.height / 2);
        this.ᐃΔᐃΔΔⵠᐃ.ⵠⵠᐃ();
        m = ⵠΔ[821][kx.time];
        Yv(821, m, -m.width / 2, -m.height / 2 + this.ᐃΔᐃΔΔⵠᐃ.ⲆⵠΔ);
      } else {
        m = ⵠΔ[255][this.Δⵠⵠⵠ][kx.time];
        if (this.ᐃⵠⲆⲆⵠ !== 85 && (hw(255, this.Δⵠⵠⵠ, m, -m.width / 4, -m.height / 4), this.ⵠΔⲆΔⵠ > 0)) {
          m = ⵠΔ[796][this.ⵠΔⲆΔⵠ][kx.time];
          hw(796, this.ⵠΔⲆΔⵠ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ΔⲆⲆⵠⲆ.ⵠⵠᐃ() && this.ΔⲆⲆⵠⲆ.ᐃⲆᐃ == 0) {
          this.action -= 128;
        }
        Gn.globalAlpha = 0.6 - this.ΔⲆⲆⵠⲆ.ⲆⵠΔ;
        if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
          m = ⵠΔ[825];
          bp(Gn, m, -m.width / 2, -m.height / 2);
        } else {
          m = Ev(this.Δⵠⵠⵠ, ⵠΔ[255][this.Δⵠⵠⵠ][0], ΔⲆΔⵠⲆᐃⵠᐃΔ);
          bp(Gn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Gn.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ΔⵠⲆⵠᐃⲆⲆ.ⵠⵠᐃ() && this.ΔⵠⲆⵠᐃⲆⲆ.ᐃⲆᐃ == 0) {
          this.action -= 256;
        }
        Gn.globalAlpha = 0.6 - this.ΔⵠⲆⵠᐃⲆⲆ.ⲆⵠΔ;
        m = ⵠΔ[266];
        bp(Gn, m, -m.width / 2, -m.height / 2);
        Gn.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ᐃᐃⲆ.ⵠⵠᐃ() && this.ᐃᐃⲆ.ᐃⲆᐃ == 0) {
          this.action -= 2;
        }
        Gn.globalAlpha = 0.6 - this.ᐃᐃⲆ.ⲆⵠΔ;
        if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
          m = ⵠΔ[823];
          bp(Gn, m, -m.width / 2, -m.height / 2);
        } else {
          m = Ev(this.Δⵠⵠⵠ, ⵠΔ[255][this.Δⵠⵠⵠ][0], ΔᐃⲆᐃΔᐃⲆᐃⲆ);
          bp(Gn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Gn.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ⵠⵠᐃ() && kq == this.freeze.ᐃⲆᐃ) {
          this.action -= 4;
        }
        Gn.globalAlpha = 0.6 - this.freeze.ⲆⵠΔ;
        m = Ev(this.Δⵠⵠⵠ, ⵠΔ[255][this.Δⵠⵠⵠ][0], ᐃᐃΔⵠᐃΔⵠⵠΔ);
        bp(Gn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        Gn.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ⵠⵠⵠΔⵠⲆᐃ.ⵠⵠᐃ() && this.ⵠⵠⵠΔⵠⲆᐃ.ᐃⲆᐃ == vg) {
          this.action -= 8;
        }
        Gn.globalAlpha = 0.6 - this.ⵠⵠⵠΔⵠⲆᐃ.ⲆⵠΔ;
        if (this.ⲆᐃⲆⵠⲆᐃⲆ) {
          m = ⵠΔ[824];
          bp(Gn, m, -m.width / 2, -m.height / 2);
        } else {
          m = Ev(this.Δⵠⵠⵠ, ⵠΔ[255][this.Δⵠⵠⵠ][0], ⲆⵠⵠⲆⵠΔΔⵠᐃ);
          bp(Gn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        Gn.globalAlpha = 1;
      }
      Cv(this.ᐃⵠⲆⲆⵠ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ⲆⵠΔ * 15;
        }
        Yv(286, ⵠⲆⲆᐃ, -ⵠⲆⲆᐃ.width / 2 - eo * 26, -ⵠⲆⲆᐃ.height / 2 + eo * (31 + u + q));
        if (h >= 920) {
          Xv(h, w, -w.width / 4 - eo * 26, -w.height / 4 + (27 + u + q) * eo);
        } else if (h !== 793) {
          hw(h, this.Δⵠⵠⵠ, w, -w.width / 4 - eo * 26, -w.height / 4 + (27 + u + q) * eo);
        } else {
          Yv(h, w, -w.width / 2 - eo * 26, -w.height / 2 + (27 + u + q) * eo);
        }
        Yv(286, ⵠⲆⲆᐃ, -ⵠⲆⲆᐃ.width / 2 + eo * 26, -ⵠⲆⲆᐃ.height / 2 + (31 + u + q) * eo);
        if (h >= 920) {
          Xv(h, w, -w.width / 4 + eo * 26, -w.height / 4 + eo * (27 + u + q));
        } else if (h !== 793) {
          hw(h, this.Δⵠⵠⵠ, w, -w.width / 4 + eo * 26, -w.height / 4 + (27 + u + q) * eo);
        } else {
          Yv(h, w, -w.width / 2 + eo * 26, -w.height / 2 + eo * (27 + u + q));
        }
        _u(this.right, 0, u + q);
      }
      Gn.restore();
      if (this.ᐃⵠⲆⲆⵠ !== 83 && this.ᐃⵠⲆⲆⵠ !== 85) {
        if (this.ⵠⵠⵠⵠⵠ > 0) {
          this.ⲆⲆΔⵠ.ⲆᐃⵠⲆⲆⲆⲆ ||= Tt(eo, this.ⲆⲆΔⵠ.ⵠⲆⲆΔΔ, 20, "#187484", "#000", 2, null, null, eo * 300);
          m = this.ⲆⲆΔⵠ.ⲆᐃⵠⲆⲆⲆⲆ;
        } else {
          if (!this.ⲆⲆΔⵠ.label) {
            this.ⲆⲆΔⵠ.label = Tt(eo, this.ⲆⲆΔⵠ.ⵠⲆⲆΔΔ, 20, "#FFF", "#000", 2, null, null, eo * 300);
          }
          m = this.ⲆⲆΔⵠ.label;
        }
        if (kx.ΔⵠΔ == 1) {
          Gn.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        u = Math.floor(-m.height / 2 - eo * 70);
        bp(Gn, m, q, u);
        if (this.ⲆⲆΔⵠ.level > 0) {
          var y = q + m.width + 5;
          m = ⵠΔ[885];
          if (ᐃΔⵠΔᐃᐃⵠ[this.ⲆⲆΔⵠ.level] === Ej) {
            ᐃΔⵠΔᐃᐃⵠ[this.ⲆⲆΔⵠ.level] = Tt(eo, "[" + this.ⲆⲆΔⵠ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, eo * 50);
          }
          bp(Gn, ᐃΔⵠΔᐃᐃⵠ[this.ⲆⲆΔⵠ.level], y, u);
        }
        Gn.globalAlpha = 1;
      } else {
        u = Math.floor(eo * -70);
        q = Math.floor(ⵠΔ[558].width / 1.5);
      }
      if (lx.ΔᐃⲆΔⵠΔⵠ(this.ΔⲆᐃΔ)) {
        if (this.ΔⲆᐃΔ == lx.ⲆⲆⲆΔⵠ[0]) {
          m = ⵠΔ[559];
        } else {
          m = ⵠΔ[558];
        }
        bp(Gn, m, q - m.width - 5, u - 6);
      }
      Gn.restore();
    }
  }
  ΔᐃⲆᐃΔᐃⲆᐃⲆ = 0;
  ΔⲆΔⵠⲆᐃⵠᐃΔ = 1;
  ᐃᐃΔⵠᐃΔⵠⵠΔ = 2;
  ⲆⵠⵠⲆⵠΔΔⵠᐃ = 3;
  ⵠⵠⵠⵠᐃⲆΔⲆⲆ = 4;
  ⵠⲆⲆⵠⲆⲆΔ = [[], [], [], [], []];
  ⲆⲆᐃⲆᐃᐃΔⲆⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var Kv = 0;
  function Lv(j, e, i, k, n, o, a, q = 0) {
    kx.ᐃⵠⵠⵠ[n].ⵠⵠᐃ();
    for (var r = a; r >= q; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = ix.ΔΔᐃⲆ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== undefined) {
              for (var y = 0; x.length > y; y++) {
                var z = x[y];
                if (z.ⵠⵠᐃ) {
                  if (z.ᐃᐃⲆ.ⵠⵠᐃ() && z.ᐃᐃⲆ.ᐃⲆᐃ == zh) {
                    z.ⵠⵠᐃ = kq;
                  }
                  var A = (1 - z.ᐃᐃⲆ.ⲆⵠΔ) * rx * 600 * eo;
                  var B = Math.sin(z.angle) * A;
                  var D = A * Math.cos(z.angle);
                } else {
                  B = 0;
                  D = 0;
                }
                var E = ⵠΔ[n][kx.time][r];
                var F = kx.ᐃⵠⵠⵠ[n].ⲆⵠΔ * -E.width;
                var G = -E.height * kx.ᐃⵠⵠⵠ[n].ⲆⵠΔ;
                bp(Gn, E, lx.ⲆⲆⵠ.x + z.x - F / 2 + B, lx.ⲆⲆⵠ.y + z.y - G / 2 + D, F, G);
              }
            }
          }
        }
      }
    }
  }
  function Mv(j, e, i, k, n, o, a, q) {
    if (q === nh) {
      q = 0;
    }
    for (var r = a; q <= r; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          var x = ix.ΔΔᐃⲆ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== nh) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                var B = ⵠΔ[n][kx.time][r];
                var D = (Kv + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = (1 + E * 0.9 / 30) * -B.width;
                var G = (1 + E * 0.9 / 30) * -B.height;
                E = (D = (Kv + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = Gn.globalAlpha;
                Gn.globalAlpha = H * (0.9 + E * 0.1);
                bp(Gn, B, lx.ⲆⲆⵠ.x + A.x - F / 2, lx.ⲆⲆⵠ.y + A.y - G / 2, F, G);
                Gn.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var Nv = [];
  for (qt = 0; qt < 100; qt++) {
    var Ov = 1;
    if (Math.random() < 0.25) {
      Ov = 0;
    }
    Nv.push(Ov);
  }
  function Pv(f, e, i, j, k, n, a, o, q) {
    if (o === Ur) {
      o = 0;
    }
    for (var h = a; h >= o; h--) {
      for (var r = f; e >= r; r++) {
        for (var t = i; j >= t; t++) {
          if (q <= 0 || Nv[(r + t * q) % Nv.length] !== 1) {
            var w = ix.ΔΔᐃⲆ[r][t];
            if (w !== Ja && w[n] !== undefined) {
              var x = w[n][h];
              if (x !== Ve) {
                for (var y = 0; y < x.length; y++) {
                  var z = x[y];
                  if (z.ⵠⵠᐃ) {
                    if (z.ᐃᐃⲆ.ⵠⵠᐃ() && Ao == z.ᐃᐃⲆ.ᐃⲆᐃ) {
                      z.ⵠⵠᐃ = false;
                    }
                    var A = eo * ((1 - z.ᐃᐃⲆ.ⲆⵠΔ) * rx * 600);
                    var B = Math.sin(z.angle) * A;
                    var D = A * Math.cos(z.angle);
                  } else {
                    B = 0;
                    D = 0;
                  }
                  var E = ⵠΔ[k][kx.time][h];
                  bp(Gn, E, lx.ⲆⲆⵠ.x + z.x - E.width / (ⲆⵠⲆᐃᐃ * 2) + B, lx.ⲆⲆⵠ.y + z.y - E.height / (ⲆⵠⲆᐃᐃ * 2) + D, E.width / ⲆⵠⲆᐃᐃ, E.height / ⲆⵠⲆᐃᐃ);
                }
              }
            }
          }
        }
      }
    }
  }
  function Qv(c, e, f, i, j, k, a, m, n) {
    if (m === Oh) {
      m = 0;
    }
    for (var h = c; h <= e; h++) {
      for (var o = f; o <= i; o++) {
        var p = ix.ΔΔᐃⲆ[h][o];
        if (nl !== p && p[k] !== undefined) {
          var q = p[k];
          if (q !== undefined) {
            if (q.scale === 1) {
              var r = ⵠΔ[j][kx.time][q.ⲆⵠⲆᐃ];
              Gn.save();
              Gn.translate(lx.ⲆⲆⵠ.x + q.x, lx.ⲆⲆⵠ.y + q.y);
              Gn.rotate(q.angle);
              bp(Gn, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              Gn.restore();
            } else if (q.scale === 3) {
              for (var t = 0; q.ΔΔΔ.length > t; t++) {
                Gn.save();
                Gn.translate(lx.ⲆⲆⵠ.x + q.x, lx.ⲆⲆⵠ.y + q.y);
                Gn.rotate(q.ΔΔΔ[t].angle);
                r = ⵠΔ[j][kx.time][q.ΔΔΔ[t].ⲆⵠⲆᐃ];
                bp(Gn, r, -r.width / 3 + q.ΔΔΔ[t].x, -r.height / 3 + q.ΔΔΔ[t].y, r.width / 1.5, r.height / 1.5);
                Gn.restore();
              }
            } else {
              r = ⵠΔ[j][kx.time][q.ⲆⵠⲆᐃ];
              Gn.save();
              Gn.translate(lx.ⲆⲆⵠ.x + q.x, lx.ⲆⲆⵠ.y + q.y);
              Gn.rotate(q.angle);
              bp(Gn, r, -r.width / 2, -r.height / 2, r.width, r.height);
              Gn.restore();
            }
          }
        }
      }
    }
  }
  function Rv(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; q <= h; h--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; k >= t; t++) {
          var w = ix.ΔΔᐃⲆ[s][t];
          if (w !== undefined && nl !== w[o]) {
            var x = w[o][h];
            if (Ig !== x) {
              for (var A = 0; x.length > A; A++) {
                var B = x[A];
                if (B.ⵠⵠᐃ) {
                  if (B.ᐃᐃⲆ.ⵠⵠᐃ() && B.ᐃᐃⲆ.ᐃⲆᐃ == cj) {
                    B.ⵠⵠᐃ = false;
                  }
                  var D = rx * (1 - B.ᐃᐃⲆ.ⲆⵠΔ) * 600 * eo;
                  var E = D * Math.sin(B.angle);
                  var F = D * Math.cos(B.angle);
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; G < ⲆⲆΔⲆΔⵠᐃ[h].ⵠΔᐃⵠ; G++) {
                  if (sx !== kx.ⲆⲆⵠΔⲆ[G].ⵠΔⲆΔΔᐃΔ) {
                    kx.ⲆⲆⵠΔⲆ[G].ⵠⵠᐃ();
                    kx.ⲆⲆⵠΔⲆ[G].ⵠΔⲆΔΔᐃΔ = sx;
                  }
                  var H = ⵠΔ[941][kx.time][ⲆⲆΔⲆΔⵠᐃ[h].ⲆⵠⲆⵠ[G].ᐃᐃⵠ];
                  var I = kx.ⲆⲆⵠΔⲆ[G].ⲆⵠΔ * -H.width;
                  var J = -H.height * kx.ⲆⲆⵠΔⲆ[G].ⲆⵠΔ;
                  bp(Gn, H, lx.ⲆⲆⵠ.x + B.x - I / 4 + E + ⲆⲆΔⲆΔⵠᐃ[h].ⲆⵠⲆⵠ[G].x, lx.ⲆⲆⵠ.y + B.y - J / 4 + F + ⲆⲆΔⲆΔⵠᐃ[h].ⲆⵠⲆⵠ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  ⲆⵠⲆᐃᐃ = 1;
  ⲆⲆΔⲆΔⵠᐃ = [{
    ⵠΔᐃⵠ: 10,
    ⲆⵠⲆⵠ: [{
      x: -128,
      y: -20,
      ᐃᐃⵠ: 0
    }, {
      x: -86,
      y: -4,
      ᐃᐃⵠ: 1
    }, {
      ᐃᐃⵠ: 2,
      y: -74,
      x: -60
    }, {
      y: -144,
      x: -22,
      ᐃᐃⵠ: 0
    }, {
      x: -58,
      ᐃᐃⵠ: 0,
      y: 86
    }, {
      y: -30,
      ᐃᐃⵠ: 0,
      x: 3
    }, {
      ᐃᐃⵠ: 1,
      y: -115,
      x: 65
    }, {
      y: -50,
      ᐃᐃⵠ: 0,
      x: 118
    }, {
      x: 73,
      ᐃᐃⵠ: 1,
      y: 15
    }, {
      x: 67,
      ᐃᐃⵠ: 0,
      y: 79
    }]
  }, {
    ⵠΔᐃⵠ: 5,
    ⲆⵠⲆⵠ: [{
      x: -45,
      ᐃᐃⵠ: 0,
      y: -26
    }, {
      ᐃᐃⵠ: 2,
      y: 20,
      x: -45
    }, {
      y: -60,
      ᐃᐃⵠ: 1,
      x: 10
    }, {
      y: -17,
      x: 52,
      ᐃᐃⵠ: 1
    }, {
      y: 45,
      x: 14,
      ᐃᐃⵠ: 0
    }]
  }, {
    ⵠΔᐃⵠ: 3,
    ⲆⵠⲆⵠ: [{
      y: 3,
      ᐃᐃⵠ: 2,
      x: -30
    }, {
      x: 7,
      y: -38,
      ᐃᐃⵠ: 2
    }, {
      y: 5,
      x: 37,
      ᐃᐃⵠ: 2
    }]
  }, {
    ⵠΔᐃⵠ: 11,
    ⲆⵠⲆⵠ: [{
      y: -87,
      x: -74,
      ᐃᐃⵠ: 2
    }, {
      x: -11,
      y: -10,
      ᐃᐃⵠ: 1
    }, {
      ᐃᐃⵠ: 1,
      y: 17,
      x: -99
    }, {
      x: -66,
      y: 84,
      ᐃᐃⵠ: 0
    }, {
      ᐃᐃⵠ: 1,
      x: -55,
      y: 123
    }, {
      ᐃᐃⵠ: 2,
      y: 81,
      x: 10
    }, {
      ᐃᐃⵠ: 0,
      x: 52,
      y: 50
    }, {
      ᐃᐃⵠ: 1,
      x: 138,
      y: 9
    }, {
      y: -28,
      ᐃᐃⵠ: 0,
      x: 104
    }, {
      ᐃᐃⵠ: 2,
      y: -56,
      x: 67
    }, {
      ᐃᐃⵠ: 0,
      y: -112,
      x: 5
    }]
  }, {
    ⵠΔᐃⵠ: 6,
    ⲆⵠⲆⵠ: [{
      x: -33,
      y: -66,
      ᐃᐃⵠ: 2
    }, {
      y: 10,
      ᐃᐃⵠ: 0,
      x: -58
    }, {
      y: 44,
      ᐃᐃⵠ: 1,
      x: -19
    }, {
      x: 44,
      ᐃᐃⵠ: 0,
      y: 20
    }, {
      x: 53,
      y: -36,
      ᐃᐃⵠ: 2
    }, {
      x: 7,
      ᐃᐃⵠ: 0,
      y: -62
    }]
  }, {
    ⵠΔᐃⵠ: 3,
    ⲆⵠⲆⵠ: [{
      x: -19,
      y: -25,
      ᐃᐃⵠ: 1
    }, {
      ᐃᐃⵠ: 2,
      x: -29,
      y: 13
    }, {
      ᐃᐃⵠ: 0,
      x: 12,
      y: 12
    }]
  }];
  var Sv = 0;
  var Tv = 0;
  var Uv = 0;
  var Vv = 0;
  function Wv(a, b) {
    if (kx.transition) {
      Gn.globalAlpha = 1;
      a.ΔⵠΔⵠⲆ(b);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      a.ΔⵠΔⵠⲆ(b);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      a.ΔⵠΔⵠⲆ(b);
    }
  }
  function Xv(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (kx.transition) {
      Gn.globalAlpha = 1;
      bp(Gn, ⵠΔ[b][kx.time], 0, 0, f, g, d, e, a, h);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      bp(Gn, ⵠΔ[b][kx.time], 0, 0, f, g, d, e, a, h);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      bp(Gn, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function Yv(a, b, c, d) {
    if (kx.transition) {
      Gn.globalAlpha = 1;
      bp(Gn, ⵠΔ[a][kx.time], c, d);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      bp(Gn, ⵠΔ[a][kx.time], c, d);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      bp(Gn, b, c, d);
    }
  }
  function Zv(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆⲆⵠ.x + j - 700;
    var l = Math.max(lx.ⲆⲆⵠ.y + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.y + qn - i - 100, 0);
    var t = l;
    var b = qn - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var w = u;
    var m = t;
    var p = d.x + 0;
    var C = b;
    var F = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var G = u;
    var y = t;
    var H = f;
    var k = b;
    var A = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > A) {
      var x = T;
      var K = u;
      var L = t;
      var B = f;
      var E = b;
      var D = u += f - 2;
    } else {
      x = ra;
      u = A;
      D = -1;
    }
    f = h + 700 - u;
    if (kx.transition) {
      var M = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, M);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(w, m, p, C);
    if (o) {
      if (kx.transition) {
        M = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 70, 76, 42, 139, 155, M);
      } else {
        Gn.fillStyle = tr.ⲆΔΔΔᐃΔΔ[kx.time];
      }
    } else if (kx.transition) {
      M = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, M);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(G, y, H, k);
    if (x) {
      if (o) {
        if (kx.transition) {
          M = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
          Gn.fillStyle = gw(17, 94, 96, 169, 214, 211, M);
        } else {
          Gn.fillStyle = tr.ⵠᐃᐃΔΔᐃΔ[kx.time];
        }
      } else if (kx.transition) {
        M = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, M);
      } else {
        Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
      }
      Gn.fillRect(K, L, B, E);
    }
    if (hx.ΔⲆᐃΔᐃ && o) {
      q.ᐃⵠΔⲆᐃΔᐃᐃᐃ(A, D, F, h, -lx.ⲆⲆⵠ.y + m, -lx.ⲆⲆⵠ.y + m + C);
    }
  }
  function $v(a, b, c, d, e) {
    if (kx.transition && e == 1) {
      Gn.globalAlpha = 1;
      bp(Gn, ⵠΔ[a][kx.time][b], c, d);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      bp(Gn, ⵠΔ[a][kx.time][b], c, d);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      Gn.globalAlpha = e;
      bp(Gn, ⵠΔ[a][kx.time][b], c, d);
      Gn.globalAlpha = 1;
    }
  }
  function _v(a, b) {
    if (kx.transition) {
      Gn.globalAlpha = 1;
      a.ᐃⲆⲆΔᐃ(b);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      a.ᐃⲆⲆΔᐃ(b);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      a.ᐃⲆⲆΔᐃ(b);
    }
  }
  function aw(a) {
    const b = Math.random;
    const c = [];
    Math.random = function () {
      for (let a = 0; a < 191; a++) {
        c.push(a);
      }
      return b();
    };
  }
  function bw(b, c, d, e, f, g, a, i, j, h) {
    if (kx.transition) {
      Gn.globalAlpha = 1;
      b(c, d, e, f, g, a, i, j, h);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      b(c, d, e, f, g, a, i, j, h);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      b(c, d, e, f, g, a, i, j, h);
    }
  }
  function cw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆⲆⵠ.x + f - 700;
    var l = Math.max(lx.ⲆⲆⵠ.y + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.y + qn - i - 100, 0);
    var r = l;
    var b = qn - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (u < s + (t = h + 350 - s + d) - 3) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⵠᐃⲆⲆⵠᐃΔ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 77, 72, 252, 239, 187, p);
      } else {
        Gn.fillStyle = tr.ΔᐃⵠⵠᐃⲆᐃ[kx.time];
      }
      Gn.fillRect(s, r, t, b);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(k.ᐃᐃᐃ[0], k.ᐃᐃᐃ[1], k.ᐃᐃᐃ[2], k.ΔⵠΔ[0], k.ΔⵠΔ[1], k.ΔⵠΔ[2], p);
      } else {
        Gn.fillStyle = k.ⲆΔⵠᐃᐃ[kx.time];
      }
      Gn.fillRect(s, r, t, b);
    }
  }
  function dw(b, c, d, e, f) {
    const g = ~(b & 23786) & 23786 | ~(b & 23786) & b;
    const a = (16 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 0 & 255));
    const i = d ^ 6948;
    const j = ~(e & 38553) & (e | 38553);
    const h = ~(f & 49151) & (f | 49151);
    return (1 + (3344 + (pr(g, a, i, j, h) ^ Vs(g, a, i, j, h))) * 22695477) % 4294967296;
  }
  function ew(a) {
    Gn.save();
    Gn.translate(lx.ⲆⲆⵠ.x + a.x, lx.ⲆⲆⵠ.y + a.y);
    Gn.rotate(a.angle);
    Gn.globalAlpha = a.alpha;
    var b = ⵠΔ[a.id][kx.time];
    bp(Gn, b, -b.width / 2, -b.height / 2);
    Gn.globalAlpha = 1;
    Gn.restore();
  }
  function fw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆⲆⵠ.y + j + 710;
    var l = Math.max(lx.ⲆⲆⵠ.x + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.x + Ln - i - 100, 0);
    var t = l;
    var b = Ln - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var m = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = true;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = ra;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(m, F, C, p);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 70, 76, 42, 139, 155, N);
      } else {
        Gn.fillStyle = tr.ⲆΔΔΔᐃΔΔ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
          Gn.fillStyle = gw(17, 94, 96, 169, 214, 211, N);
        } else {
          Gn.fillStyle = tr.ⵠᐃᐃΔΔᐃΔ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
      } else {
        Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
      }
      Gn.fillRect(J, L, B, M);
    }
    if (hx.ΔⲆᐃΔᐃ && o) {
      q.ΔᐃⵠΔΔⲆᐃⲆᐃ(k, E, G, h, -lx.ⲆⲆⵠ.x + m, -lx.ⲆⲆⵠ.x + m + C);
    }
  }
  function gw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(a * e + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(f * a + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function hw(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (kx.transition) {
      Gn.globalAlpha = 1;
      bp(Gn, ⵠΔ[b][c][kx.time], 0, 0, g, a, e, f, i, j);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      bp(Gn, ⵠΔ[b][c][kx.time], 0, 0, g, a, e, f, i, j);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      bp(Gn, ⵠΔ[b][c][kx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function iw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆⲆⵠ.y + f + 710;
    var l = Math.max(lx.ⲆⲆⵠ.x + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.x + Ln - i - 100, 0);
    var r = l;
    var b = Ln - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⵠᐃⲆⲆⵠᐃΔ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 77, 72, 252, 239, 187, p);
      } else {
        Gn.fillStyle = tr.ΔᐃⵠⵠᐃⲆᐃ[kx.time];
      }
      Gn.fillRect(r, s, b, t);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(k.ᐃᐃᐃ[0], k.ᐃᐃᐃ[1], k.ᐃᐃᐃ[2], k.ΔⵠΔ[0], k.ΔⵠΔ[1], k.ΔⵠΔ[2], p);
      } else {
        Gn.fillStyle = k.ⲆΔⵠᐃᐃ[kx.time];
      }
      Gn.fillRect(r, s, b, t);
    }
  }
  function jw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆⲆⵠ.y + f - 700;
    var l = Math.max(lx.ⲆⲆⵠ.x + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.x + Ln - i - 100, 0);
    var r = l;
    var b = Ln - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⵠᐃⲆⲆⵠᐃΔ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 77, 72, 252, 239, 187, p);
      } else {
        Gn.fillStyle = tr.ΔᐃⵠⵠᐃⲆᐃ[kx.time];
      }
      Gn.fillRect(r, s, b, t);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(k.ᐃᐃᐃ[0], k.ᐃᐃᐃ[1], k.ᐃᐃᐃ[2], k.ΔⵠΔ[0], k.ΔⵠΔ[1], k.ΔⵠΔ[2], p);
      } else {
        Gn.fillStyle = k.ⲆΔⵠᐃᐃ[kx.time];
      }
      Gn.fillRect(r, s, b, t);
    }
  }
  function kw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = lx.ⲆⲆⵠ.x + f + 820;
    var l = Math.max(lx.ⲆⲆⵠ.y + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.y + qn - i - 100, 0);
    var r = l;
    var b = qn - l - g;
    if (n) {
      var d = j.ᐃᐃⵠ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⵠ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⵠ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⵠᐃⲆⲆⵠᐃΔ === 1) {
      if (kx.transition) {
        var p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 77, 72, 252, 239, 187, p);
      } else {
        Gn.fillStyle = tr.ΔᐃⵠⵠᐃⲆᐃ[kx.time];
      }
      Gn.fillRect(s, r, t, b);
    } else {
      if (kx.transition) {
        p = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(k.ᐃᐃᐃ[0], k.ᐃᐃᐃ[1], k.ᐃᐃᐃ[2], k.ΔⵠΔ[0], k.ΔⵠΔ[1], k.ΔⵠΔ[2], p);
      } else {
        Gn.fillStyle = k.ⲆΔⵠᐃᐃ[kx.time];
      }
      Gn.fillRect(s, r, t, b);
    }
  }
  function lw(a, b, c) {
    if (kx.transition) {
      Gn.globalAlpha = 1;
      a.ΔΔⲆⲆ(b, c);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      a.ΔΔⲆⲆ(b, c);
      kx.time = kx.time ? 0 : 1;
      Gn.globalAlpha = 1;
    } else {
      a.ΔΔⲆⲆ(b, c);
    }
  }
  function mw() {
    Gn.globalAlpha = 1;
    if (kx.transition) {
      var a = kx.ⲆⲆⲆⵠ.ⵠⵠᐃ();
    }
    kx.ⵠⲆΔΔⵠⲆⲆⵠΔ(-lx.ⲆⲆⵠ.x, -lx.ⲆⲆⵠ.y);
    Sv = Math.max(Math.floor(-lx.ⲆⲆⵠ.x / kx.ⲆⲆᐃⵠⲆⲆⲆ) - 5, 0);
    Tv = Math.min(Math.floor((-lx.ⲆⲆⵠ.x + lx.ⲆⲆⵠ.w) / kx.ⲆⲆᐃⵠⲆⲆⲆ) + 4, kx.ᐃΔⲆⲆᐃ - 1);
    Uv = Math.max(Math.floor(-lx.ⲆⲆⵠ.y / kx.ⵠⲆⲆᐃΔⵠⵠ) - 3, 0);
    Vv = Math.min(Math.floor((-lx.ⲆⲆⵠ.y + lx.ⲆⲆⵠ.ᐃⵠⲆ) / kx.ⵠⲆⲆᐃΔⵠⵠ) + 3, kx.ⲆⲆᐃⲆᐃ - 1);
    (function () {
      for (var f = kx.ᐃΔⲆⲆ.length - 1; f >= 0; f--) {
        if ((A = kx.ᐃΔⲆⲆ[f]).ᐃᐃⵠ === kx.ΔᐃᐃΔΔ) {
          var j = kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ];
          if (-lx.ⲆⲆⵠ.x >= A.x1 - 230 - Ln && -lx.ⲆⲆⵠ.x <= A.x2 + 330 && A.y1 - qn <= -lx.ⲆⲆⵠ.y && A.y2 + 100 >= -lx.ⲆⲆⵠ.y) {
            var k = A.x2;
            if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
              k -= 610;
            }
            var m = A.x1;
            if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
              m += 610;
            }
            var p = A.y2;
            if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
              p -= 610;
            }
            var q = A.y1;
            if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
              q += 610;
            }
            if (kx.transition) {
              var u = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
              Gn.fillStyle = gw(j.ᐃᐃᐃ[0], j.ᐃᐃᐃ[1], j.ᐃᐃᐃ[2], j.ΔⵠΔ[0], j.ΔⵠΔ[1], j.ΔⵠΔ[1], u);
            } else {
              Gn.fillStyle = j.ⲆΔⵠᐃᐃ[kx.time];
            }
            var w = Math.max(lx.ⲆⲆⵠ.x + m - 2 - 230, 0);
            var x = Math.max(-lx.ⲆⲆⵠ.x + Ln - k - 330 - 2, 0);
            var y = Math.max(lx.ⲆⲆⵠ.y + q - 2, 0);
            var z = Math.max(-lx.ⲆⲆⵠ.y + qn - p - 100 - 2, 0);
            Gn.beginPath();
            Gn.fillRect(w, y, Ln - x - w, qn - y - z);
          }
        }
      }
      for (f = kx.ᐃΔⲆⲆ.length - 1; f >= 0; f--) {
        if ((A = kx.ᐃΔⲆⲆ[f]).ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
          k = A.x2;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            k -= 400;
          }
          m = A.x1;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            m += 400;
          }
          p = A.y2;
          if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
            p -= 300;
          }
          q = A.y1;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            q += 300;
          }
          if ((A.ⲆⵠΔ & 8) === 0 && k - Ln + 120 <= -lx.ⲆⲆⵠ.x && k + 820 >= -lx.ⲆⲆⵠ.x && q + 88 - qn <= -lx.ⲆⲆⵠ.y && -lx.ⲆⲆⵠ.y <= p + 50) {
            kw(k, q + 88, p - 88, lx.ⵠΔⵠᐃ[0], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 8);
            ow(k, q + 88, p - 88, lx.ⵠΔⵠᐃ[0], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 8);
          }
          if (!(A.ⲆⵠΔ & 4) && m - Ln - 700 <= -lx.ⲆⲆⵠ.x && -lx.ⲆⲆⵠ.x <= m - 20 && q + 88 - qn <= -lx.ⲆⲆⵠ.y && p + 50 >= -lx.ⲆⲆⵠ.y) {
            cw(m, q + 88, p - 88, lx.ⵠΔⵠᐃ[1], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 4);
            Zv(m, q + 88, p - 88, lx.ⵠΔⵠᐃ[1], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 4);
          }
          if (!(A.ⲆⵠΔ & 2) && -lx.ⲆⲆⵠ.x >= m - 235 - Ln && -lx.ⲆⲆⵠ.x <= k + 350 && -lx.ⲆⲆⵠ.y >= p - qn - 275 && p + 490 >= -lx.ⲆⲆⵠ.y) {
            iw(p - 230, m - 230, k + 230, lx.ⵠΔⵠᐃ[2], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 2);
            fw(p - 230, m - 230, k + 230, lx.ⵠΔⵠᐃ[2], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 2);
          }
          if (!(A.ⲆⵠΔ & 1) && -lx.ⲆⲆⵠ.x >= m - 235 - Ln && k + 350 >= -lx.ⲆⲆⵠ.x && q - qn - 390 <= -lx.ⲆⲆⵠ.y && -lx.ⲆⲆⵠ.y <= q + 315) {
            jw(q + 310, m - 230, k + 230, lx.ⵠΔⵠᐃ[3], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 1);
            nw(q + 310, m - 230, k + 230, lx.ⵠΔⵠᐃ[3], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 1);
          }
        }
      }
      for (f = kx.ᐃΔⲆⲆ.length - 1; f >= 0; f--) {
        var A = kx.ᐃΔⲆⲆ[f];
        if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
          k = A.x2;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            k -= 400;
          }
          m = A.x1;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            m += 400;
          }
          p = A.y2;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            p -= 300;
          }
          q = A.y1;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            q += 300;
          }
          if (A.ⲆⵠΔ & 8 && -lx.ⲆⲆⵠ.x >= k - Ln + 120 && -lx.ⲆⲆⵠ.x <= k + 820 && -lx.ⲆⲆⵠ.y >= q + 88 - qn && -lx.ⲆⲆⵠ.y <= p + 50) {
            kw(k, q + 88, p - 88, lx.ⵠΔⵠᐃ[0], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 8);
          }
          if (A.ⲆⵠΔ & 4 && -lx.ⲆⲆⵠ.x >= m - Ln - 700 && m - 20 >= -lx.ⲆⲆⵠ.x && q + 88 - qn <= -lx.ⲆⲆⵠ.y && -lx.ⲆⲆⵠ.y <= p + 50) {
            cw(m, q + 88, p - 88, lx.ⵠΔⵠᐃ[1], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 4);
          }
          if (A.ⲆⵠΔ & 2 && -lx.ⲆⲆⵠ.x >= m - 235 - Ln && -lx.ⲆⲆⵠ.x <= k + 350 && p - qn - 275 <= -lx.ⲆⲆⵠ.y && p + 490 >= -lx.ⲆⲆⵠ.y) {
            iw(p - 230, m - 230, k + 230, lx.ⵠΔⵠᐃ[2], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 2);
          }
          if (A.ⲆⵠΔ & 1 && m - 235 - Ln <= -lx.ⲆⲆⵠ.x && k + 350 >= -lx.ⲆⲆⵠ.x && q - qn - 390 <= -lx.ⲆⲆⵠ.y && -lx.ⲆⲆⵠ.y <= q + 315) {
            jw(q + 310, m - 230, k + 230, lx.ⵠΔⵠᐃ[3], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 1);
          }
        }
      }
      for (f = kx.ᐃΔⲆⲆ.length - 1; f >= 0; f--) {
        A = kx.ᐃΔⲆⲆ[f];
        if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
          j = kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ];
          if (A.x1 - 230 - Ln <= -lx.ⲆⲆⵠ.x && -lx.ⲆⲆⵠ.x <= A.x2 + 330 && -lx.ⲆⲆⵠ.y >= A.y1 - qn && -lx.ⲆⲆⵠ.y <= A.y2 + 100) {
            k = A.x2;
            if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
              if (A.ⲆⵠΔ & 8) {
                k -= 610;
              } else {
                k -= 414;
              }
            }
            m = A.x1;
            if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
              if ((A.ⲆⵠΔ & 4) === 0) {
                m += 414;
              } else {
                m += 610;
              }
            }
            p = A.y2;
            if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
              if (A.ⲆⵠΔ & 2) {
                p -= 610;
              } else {
                p -= 414;
              }
            }
            q = A.y1;
            if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
              if (A.ⲆⵠΔ & 1) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (kx.transition) {
              u = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
              Gn.fillStyle = gw(j.ᐃᐃᐃ[0], j.ᐃᐃᐃ[1], j.ᐃᐃᐃ[2], j.ΔⵠΔ[0], j.ΔⵠΔ[1], j.ΔⵠΔ[2], u);
            } else {
              Gn.fillStyle = j.ⲆΔⵠᐃᐃ[kx.time];
            }
            w = Math.max(lx.ⲆⲆⵠ.x + m - 2 - 230, 0);
            x = Math.max(-lx.ⲆⲆⵠ.x + Ln - k - 330 - 2, 0);
            y = Math.max(lx.ⲆⲆⵠ.y + q - 2, 0);
            z = Math.max(-lx.ⲆⲆⵠ.y + qn - p - 100 - 2, 0);
            Gn.beginPath();
            Gn.fillRect(w, y, Ln - x - w, qn - y - z);
          }
        }
      }
      if (hx.ΔⲆᐃΔᐃ) {
        bw(Lv, Uv, Vv, Sv, Tv, 695, "isl", 2);
        bw(Lv, Uv, Vv, Sv, Tv, 694, "isl", 2);
      }
      bw(Pv, Uv, Vv, Sv, Tv, 692, "isl", 2);
      if (hx.ΔⲆᐃΔᐃ) {
        bw(Qv, Uv, Vv, Sv, Tv, 243, "de");
      }
      var B = kx.ⵠⵠⵠ[0];
      for (f = 0; f < B.length; f++) {
        for (var d = B[f], C = 0; C < d.ᐃⵠⵠⵠⵠ.length; C++) {
          ew(d.ᐃⵠⵠⵠⵠ[C]);
        }
      }
      if (($p += rx * 40) > 60) {
        $p -= 60;
      }
      bw(qv, Uv, Vv, Sv, Tv, 1024, "r", 0);
      f = 0;
      for (; kx.ᐃΔⲆⲆ.length > f; f++) {
        if ((A = kx.ᐃΔⲆⲆ[f]).ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
          k = A.x2;
          if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
            k -= 400;
          }
          m = A.x1;
          if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
            m += 400;
          }
          p = A.y2;
          if (A.ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ) {
            p -= 300;
          }
          q = A.y1;
          if (kx.ΔᐃᐃΔΔ !== A.ᐃᐃⵠ) {
            q += 300;
          }
          if ((A.ⲆⵠΔ & 8) > 0 && -lx.ⲆⲆⵠ.x >= k - Ln + 120 && -lx.ⲆⲆⵠ.x <= k + 820 && q + 88 - qn <= -lx.ⲆⲆⵠ.y && p + 50 >= -lx.ⲆⲆⵠ.y) {
            ow(k, q + 88, p - 88, lx.ⵠΔⵠᐃ[0], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 8);
          }
          if ((A.ⲆⵠΔ & 4) > 0 && m - Ln - 700 <= -lx.ⲆⲆⵠ.x && m - 20 >= -lx.ⲆⲆⵠ.x && -lx.ⲆⲆⵠ.y >= q + 88 - qn && -lx.ⲆⲆⵠ.y <= p + 50) {
            Zv(m, q + 88, p - 88, lx.ⵠΔⵠᐃ[1], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 4);
          }
          if ((A.ⲆⵠΔ & 2) > 0 && -lx.ⲆⲆⵠ.x >= m - 235 - Ln && -lx.ⲆⲆⵠ.x <= k + 350 && p - qn - 275 <= -lx.ⲆⲆⵠ.y && p + 490 >= -lx.ⲆⲆⵠ.y) {
            fw(p - 230, m - 230, k + 230, lx.ⵠΔⵠᐃ[2], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 2);
          }
          if ((A.ⲆⵠΔ & 1) > 0 && -lx.ⲆⲆⵠ.x >= m - 235 - Ln && k + 350 >= -lx.ⲆⲆⵠ.x && -lx.ⲆⲆⵠ.y >= q - qn - 390 && q + 315 >= -lx.ⲆⲆⵠ.y) {
            nw(q + 310, m - 230, k + 230, lx.ⵠΔⵠᐃ[3], kx.Δᐃⵠⵠᐃ[A.ᐃᐃⵠ], A.ⲆⵠΔ & 1);
          }
        }
      }
    })();
    (function () {
      var u = Sv;
      var e = Tv;
      var i = Uv;
      var t = Vv;
      if (hx.ΔⲆᐃΔᐃ) {
        bw(Pv, i, t, u, e, 621, "l", 2);
      }
      if (hx.ΔⲆᐃΔᐃ) {
        bw(Pv, i, t, u, e, tr.ΔᐃΔᐃⲆ, "la", 5);
      }
      bw(Pv, i, t, u, e, 203, "la", 5);
      bw(Lv, i, t, u, e, 620, "l", 2);
      if (hx.ΔⲆᐃΔᐃ) {
        bw(Rv, i, t, u, e, 203, "la", 5);
        bw(Lv, i, t, u, e, 619, "l", 2);
      }
      bw(Pv, i, t, u, e, 1052, "ma", 4);
      for (var n = kx.ⵠⵠⵠ[76], x = 0; n.length > x; x++) {
        n[x].ⵠⲆⲆΔⲆⵠᐃ();
      }
      var aa = kx.ⵠⵠⵠ[0];
      for (x = 0; aa.length > x; x++) {
        for (var ba = aa[x], ca = 0; ba.ⲆΔⲆⵠⵠ.length > ca; ca++) {
          pw(ba.ⲆΔⲆⵠⵠ[ca]);
        }
      }
      var da = kx.ⵠⵠⵠ[30];
      for (x = 0; x < da.length; x++) {
        lw(da[x], 125);
        da[x].ⲆΔⲆⲆⵠ(da[x].info);
      }
      var l = kx.ⵠⵠⵠ[18];
      for (x = 0; x < l.length; x++) {
        if (l[x].action == 2) {
          _v(l[x]);
        }
      }
      var ea = kx.ⵠⵠⵠ[1];
      for (x = 0; x < ea.length; x++) {
        _v(ea[x], 113);
      }
      var fa = kx.ⵠⵠⵠ[22];
      for (x = 0; fa.length > x; x++) {
        _v(fa[x]);
      }
      var ha = kx.ⵠⵠⵠ[23];
      for (x = 0; ha.length > x; x++) {
        _v(ha[x]);
      }
      var ia = kx.ⵠⵠⵠ[6];
      for (x = 0; x < ia.length; x++) {
        _v(ia[x], 118);
      }
      var c = kx.ⵠⵠⵠ[36];
      for (x = 0; x < c.length; x++) {
        lw(c[x]);
      }
      var m = kx.ⵠⵠⵠ[33];
      for (x = 0; m.length > x; x++) {
        lw(m[x], 141);
      }
      var p = kx.ⵠⵠⵠ[3];
      for (x = 0; p.length > x; x++) {
        _v(p[x]);
      }
      p = kx.ⵠⵠⵠ[43];
      x = 0;
      for (; x < p.length; x++) {
        _v(p[x]);
      }
      p = kx.ⵠⵠⵠ[3];
      x = 0;
      for (; p.length > x; x++) {
        Wv(p[x]);
      }
      var ja = kx.ⵠⵠⵠ[44];
      for (x = 0; ja.length > x; x++) {
        if (!(ja[x].info & 15) || ja[x].info === 10) {
          lw(ja[x]);
        }
      }
      var ka = kx.ⵠⵠⵠ[54];
      for (x = 0; ka.length > x; x++) {
        if (!(ka[x].info & 15) || ka[x].info === 10) {
          lw(ka[x]);
        }
      }
      var la = kx.ⵠⵠⵠ[55];
      for (x = 0; x < la.length; x++) {
        if ((la[x].info & 15) === 0 || la[x].info === 10) {
          lw(la[x]);
        }
      }
      var ma = kx.ⵠⵠⵠ[79];
      for (x = 0; x < ma.length; x++) {
        lw(ma[x], 132);
      }
      var na = kx.ⵠⵠⵠ[39];
      for (x = 0; x < na.length; x++) {
        if ((na[x].info & 15) === 0 || na[x].info === 10) {
          lw(na[x]);
        }
      }
      var oa = kx.ⵠⵠⵠ[40];
      for (x = 0; x < oa.length; x++) {
        if (!(oa[x].info & 15) || oa[x].info === 10) {
          lw(oa[x]);
        }
      }
      var pa = kx.ⵠⵠⵠ[37];
      for (x = 0; x < pa.length; x++) {
        if ((pa[x].info & 15) === 0 || pa[x].info === 10) {
          lw(pa[x]);
        }
      }
      ma = kx.ⵠⵠⵠ[31];
      x = 0;
      for (; ma.length > x; x++) {
        lw(ma[x]);
      }
      var qa = kx.ⵠⵠⵠ[86];
      for (x = 0; x < qa.length; x++) {
        lw(qa[x], 250, 729);
      }
      var A = kx.ⵠⵠⵠ[82];
      for (x = 0; A.length > x; x++) {
        lw(A[x], 250, 729);
      }
      var J = kx.ⵠⵠⵠ[87];
      for (x = 0; J.length > x; x++) {
        lw(J[x], 854, 859);
      }
      var M = kx.ⵠⵠⵠ[45];
      for (x = 0; x < M.length; x++) {
        if (M[x].info & 1) {
          lw(M[x], 336);
        }
      }
      M = kx.ⵠⵠⵠ[46];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info & 1) {
          lw(M[x], 373);
        }
      }
      M = kx.ⵠⵠⵠ[47];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info) {
          lw(M[x], 376);
        }
      }
      M = kx.ⵠⵠⵠ[48];
      x = 0;
      for (; x < M.length; x++) {
        if (M[x].info) {
          lw(M[x], 379);
        }
      }
      M = kx.ⵠⵠⵠ[49];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info) {
          lw(M[x], 500);
        }
      }
      M = kx.ⵠⵠⵠ[53];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info) {
          lw(M[x], 376);
        }
      }
      M = kx.ⵠⵠⵠ[10];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info & 1) {
          lw(M[x], 336);
        }
      }
      M = kx.ⵠⵠⵠ[15];
      x = 0;
      for (; x < M.length; x++) {
        if (M[x].info & 1) {
          lw(M[x], 373);
        }
      }
      M = kx.ⵠⵠⵠ[16];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info) {
          lw(M[x], 376);
        }
      }
      M = kx.ⵠⵠⵠ[17];
      x = 0;
      for (; x < M.length; x++) {
        if (M[x].info) {
          lw(M[x], 379);
        }
      }
      M = kx.ⵠⵠⵠ[21];
      x = 0;
      for (; x < M.length; x++) {
        if (M[x].info) {
          lw(M[x], 500);
        }
      }
      M = kx.ⵠⵠⵠ[51];
      x = 0;
      for (; M.length > x; x++) {
        if (M[x].info) {
          lw(M[x], 376);
        }
      }
      var ra = kx.ⵠⵠⵠ[80];
      for (x = 0; x < ra.length; x++) {
        lw(ra[x], 264, 322);
      }
      var E = kx.ⵠⵠⵠ[41];
      for (x = 0; x < E.length; x++) {
        lw(E[x], 198);
      }
      n = kx.ⵠⵠⵠ[76];
      x = 0;
      for (; x < n.length; x++) {
        lw(n[x], tr.ⲆⲆᐃⵠᐃᐃⲆ, tr.ⲆΔⵠᐃᐃⲆⲆΔⲆ);
      }
      var sa = kx.ⵠⵠⵠ[91];
      for (x = 0; x < sa.length; x++) {
        if (sa[x].ΔᐃΔⲆᐃΔⵠ === 0) {
          lw(sa[x]);
        }
      }
      aa = kx.ⵠⵠⵠ[0];
      x = 0;
      for (; x < aa.length; x++) {
        ba = aa[x];
        if (aa[x].ⲆΔⲆⲆᐃ !== 227 && aa[x].ⲆΔⲆⲆᐃ !== 228 && aa[x].ⲆΔⲆⲆᐃ !== 229 && aa[x].ⲆΔⲆⲆᐃ !== 230 && aa[x].ⲆΔⲆⲆᐃ !== 91) {
          if (ba.ΔᐃⵠⵠΔⲆᐃ === 0) {
            if (ba.ΔᐃⲆⲆⵠᐃΔ > 0.001) {
              ba.ΔᐃⲆⲆⵠᐃΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(ba.ΔᐃⲆⲆⵠᐃΔ, 0, 0.018);
              var ta = 1 + Math.min(1, Math.max(ba.ΔᐃⲆⲆⵠᐃΔ, 0) / 100) * 0.18;
              Gn.save();
              Gn.scale(ta, ta);
              lx.ⲆⲆⵠ.x /= ta;
              lx.ⲆⲆⵠ.y /= ta;
              ba.x /= ta;
              ba.y /= ta;
              ba.r.x /= ta;
              ba.r.y /= ta;
              ba.ᐃⲆᐃΔⲆᐃⵠ();
              ba.ΔΔⲆⲆ();
              lx.ⲆⲆⵠ.x *= ta;
              lx.ⲆⲆⵠ.y *= ta;
              ba.x *= ta;
              ba.y *= ta;
              ba.r.x *= ta;
              ba.r.y *= ta;
              Gn.restore();
            } else {
              ba.ΔᐃΔⲆᐃΔⵠ = 0;
              ba.ᐃⲆᐃΔⲆᐃⵠ();
              ba.ΔΔⲆⲆ();
            }
          }
        } else if (ba.ⵠⵠⵠⵠⲆ <= 180) {
          Gn.save();
          ta = 1 + Math.min(1, Math.max(ba.ΔᐃⵠⲆΔ - 30, 0) / 180) * 0.35;
          Gn.scale(ta, ta);
          lx.ⲆⲆⵠ.x /= ta;
          lx.ⲆⲆⵠ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ΔᐃΔⲆᐃΔⵠ = 0;
          ba.ᐃⲆᐃΔⲆᐃⵠ();
          ba.ΔΔⲆⲆ();
          lx.ⲆⲆⵠ.x *= ta;
          lx.ⲆⲆⵠ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Gn.restore();
        }
      }
      E = kx.ⵠⵠⵠ[41];
      x = 0;
      for (; x < E.length; x++) {
        lw(E[x], 913);
      }
      var ua = kx.ⵠⵠⵠ[67];
      for (x = 0; ua.length > x; x++) {
        lw(ua[x]);
      }
      var Q = kx.ⵠⵠⵠ[62];
      for (x = 0; x < Q.length; x++) {
        lw(Q[x], 419, 461);
      }
      var _ = kx.ⵠⵠⵠ[70];
      for (x = 0; _.length > x; x++) {
        lw(_[x]);
      }
      var F = kx.ⵠⵠⵠ[60];
      for (x = 0; F.length > x; x++) {
        lw(F[x], 299, 326);
      }
      var R = kx.ⵠⵠⵠ[72];
      for (x = 0; R.length > x; x++) {
        lw(R[x], 232, 1077);
      }
      var j = kx.ⵠⵠⵠ[73];
      for (x = 0; j.length > x; x++) {
        lw(j[x], 233, 1092);
      }
      ja = kx.ⵠⵠⵠ[44];
      x = 0;
      for (; x < ja.length; x++) {
        if (ja[x].info & 15 && ja[x].info !== 10) {
          lw(ja[x]);
        }
      }
      ka = kx.ⵠⵠⵠ[54];
      x = 0;
      for (; ka.length > x; x++) {
        if (ka[x].info & 15 && ka[x].info !== 10) {
          lw(ka[x]);
        }
      }
      la = kx.ⵠⵠⵠ[89];
      x = 0;
      for (; x < la.length; x++) {
        lw(la[x], 239);
      }
      la = kx.ⵠⵠⵠ[55];
      x = 0;
      for (; la.length > x; x++) {
        if (la[x].info & 15 && la[x].info !== 10) {
          lw(la[x]);
        }
      }
      p = kx.ⵠⵠⵠ[43];
      x = 0;
      for (; x < p.length; x++) {
        Wv(p[x]);
      }
      na = kx.ⵠⵠⵠ[39];
      x = 0;
      for (; x < na.length; x++) {
        if ((na[x].info & 15) !== 0 && na[x].info !== 10) {
          lw(na[x]);
        }
      }
      oa = kx.ⵠⵠⵠ[40];
      x = 0;
      for (; x < oa.length; x++) {
        if (oa[x].info & 15 && oa[x].info !== 10) {
          lw(oa[x]);
        }
      }
      pa = kx.ⵠⵠⵠ[37];
      x = 0;
      for (; pa.length > x; x++) {
        if (pa[x].info & 15 && pa[x].info !== 10) {
          lw(pa[x]);
        }
      }
      var G = kx.ⵠⵠⵠ[81];
      for (x = 0; G.length > x; x++) {
        lw(G[x], 691, 697);
      }
      var L = kx.ⵠⵠⵠ[66];
      for (x = 0; L.length > x; x++) {
        lw(L[x], 637, 687);
      }
      var W = kx.ⵠⵠⵠ[65];
      for (x = 0; x < W.length; x++) {
        lw(W[x], 673, 688);
      }
      var O = kx.ⵠⵠⵠ[61];
      for (x = 0; O.length > x; x++) {
        lw(O[x], 260, 333);
      }
      var q = kx.ⵠⵠⵠ[88];
      for (x = 0; q.length > x; x++) {
        lw(q[x], 1033, 1034);
      }
      var N = kx.ⵠⵠⵠ[63];
      for (x = 0; N.length > x; x++) {
        lw(N[x], 445, 462);
      }
      var H = kx.ⵠⵠⵠ[77];
      for (x = 0; x < H.length; x++) {
        lw(H[x]);
      }
      var U = kx.ⵠⵠⵠ[68];
      for (x = 0; U.length > x; x++) {
        lw(U[x], 918, 919);
      }
      var Y = kx.ⵠⵠⵠ[71];
      for (x = 0; Y.length > x; x++) {
        lw(Y[x]);
      }
      var K = kx.ⵠⵠⵠ[78];
      for (x = 0; K.length > x; x++) {
        lw(K[x], 1218, 1219);
      }
      var V = kx.ⵠⵠⵠ[64];
      for (x = 0; V.length > x; x++) {
        if (V[x].scale === 1) {
          lw(V[x], 449, 463);
        }
      }
      V = kx.ⵠⵠⵠ[69];
      x = 0;
      for (; V.length > x; x++) {
        if (V[x].scale === 1) {
          lw(V[x], 450, 464);
        }
      }
      var va = kx.ⵠⵠⵠ[11];
      for (x = 0; x < va.length; x++) {
        lw(va[x]);
      }
      var Z = kx.ⵠⵠⵠ[2];
      for (x = 0; Z.length > x; x++) {
        lw(Z[x], 114);
      }
      l = kx.ⵠⵠⵠ[18];
      x = 0;
      for (; x < l.length; x++) {
        lw(l[x]);
      }
      var wa = kx.ⵠⵠⵠ[34];
      for (x = 0; wa.length > x; x++) {
        lw(wa[x]);
      }
      M = kx.ⵠⵠⵠ[10];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 166);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[15];
      x = 0;
      for (; M.length > x; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 171);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[16];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 172);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[17];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 173);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[21];
      x = 0;
      for (; M.length > x; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 124);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[51];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 218);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[45];
      x = 0;
      for (; M.length > x; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 212);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[46];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 213);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[47];
      x = 0;
      for (; M.length > x; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 214);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[48];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 215);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[49];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 216);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      M = kx.ⵠⵠⵠ[53];
      x = 0;
      for (; x < M.length; x++) {
        if (!(M[x].info & 1)) {
          lw(M[x], 220);
        }
        M[x].ⲆΔⲆⲆⵠ(M[x].info >> 1);
      }
      var xa = kx.ⵠⵠⵠ[4];
      for (x = 0; xa.length > x; x++) {
        lw(xa[x], 162);
        xa[x].ⲆΔⲆⲆⵠ(xa[x].info);
      }
      xa = kx.ⵠⵠⵠ[7];
      x = 0;
      for (; x < xa.length; x++) {
        lw(xa[x], 163);
        xa[x].ⲆΔⲆⲆⵠ(xa[x].info);
      }
      xa = kx.ⵠⵠⵠ[8];
      x = 0;
      for (; xa.length > x; x++) {
        lw(xa[x], 164);
        xa[x].ⲆΔⲆⲆⵠ(xa[x].info);
      }
      xa = kx.ⵠⵠⵠ[9];
      x = 0;
      for (; xa.length > x; x++) {
        lw(xa[x], 165);
        xa[x].ⲆΔⲆⲆⵠ(xa[x].info);
      }
      xa = kx.ⵠⵠⵠ[19];
      x = 0;
      for (; xa.length > x; x++) {
        lw(xa[x], 122);
        xa[x].ⲆΔⲆⲆⵠ(xa[x].info);
      }
      xa = kx.ⵠⵠⵠ[50];
      x = 0;
      for (; xa.length > x; x++) {
        lw(xa[x], 217);
        xa[x].ⲆΔⲆⲆⵠ(xa[x].info);
      }
      var ya = kx.ⵠⵠⵠ[5];
      for (x = 0; x < ya.length; x++) {
        lw(ya[x], 160);
        ya[x].ⲆΔⲆⲆⵠ(ya[x].info);
      }
      ya = kx.ⵠⵠⵠ[12];
      x = 0;
      for (; x < ya.length; x++) {
        lw(ya[x], 168);
        ya[x].ⲆΔⲆⲆⵠ(ya[x].info);
      }
      ya = kx.ⵠⵠⵠ[13];
      x = 0;
      for (; ya.length > x; x++) {
        lw(ya[x], 169);
        ya[x].ⲆΔⲆⲆⵠ(ya[x].info);
      }
      ya = kx.ⵠⵠⵠ[14];
      x = 0;
      for (; ya.length > x; x++) {
        lw(ya[x], 170);
        ya[x].ⲆΔⲆⲆⵠ(ya[x].info);
      }
      ya = kx.ⵠⵠⵠ[20];
      x = 0;
      for (; ya.length > x; x++) {
        lw(ya[x], 123);
        ya[x].ⲆΔⲆⲆⵠ(ya[x].info);
      }
      ya = kx.ⵠⵠⵠ[52];
      x = 0;
      for (; x < ya.length; x++) {
        lw(ya[x], 219);
        ya[x].ⲆΔⲆⲆⵠ(ya[x].info);
      }
      var za = kx.ⵠⵠⵠ[35];
      for (x = 0; x < za.length; x++) {
        var Aa = za[x];
        if (Aa.info > 0) {
          lw(Aa, 788);
        } else {
          lw(Aa, 182);
        }
      }
      var Ba = kx.ⵠⵠⵠ[29];
      for (x = 0; Ba.length > x; x++) {
        lw(Ba[x], 159);
      }
      bw(Pv, i, t, u, e, 111, "g", 2);
      bw(Pv, i, t, u, e, 415, "gw", 2);
      bw(Pv, i, t, u, e, 112, "d", 2);
      bw(Pv, i, t, u, e, 416, "dw", 2);
      bw(Pv, i, t, u, e, 110, "p", 0);
      bw(Pv, i, t, u, e, 241, "m", 2);
      bw(Pv, i, t, u, e, 121, "a", 2);
      bw(Pv, i, t, u, e, 202, "re", 2);
      bw(Pv, i, t, u, e, 679, "cs", 3, 3);
      bw(Pv, i, t, u, e, 679, "cs", 2, 2);
      bw(Pv, i, t, u, e, 679, "cs", 1, 1);
      bw(Pv, i, t, u, e, 679, "cs", 0, 0);
      bw(Pv, i, t, u, e, 676, "cs", 3, 3);
      bw(Pv, i, t, u, e, 676, "cs", 2, 2);
      bw(Pv, i, t, u, e, 676, "cs", 1, 1);
      bw(Pv, i, t, u, e, 676, "cs", 0, 0);
      var Ca = kx.ⵠⵠⵠ[100];
      for (x = 0; Ca.length > x; x++) {
        for (ca = 0; Ca[x].info > ca; ca++) {
          lw(Ca[x].ΔⵠΔΔ[ca], 294);
        }
      }
      bw(Pv, i, t, u, e, 108, "s", 2);
      var Da = kx.ⵠⵠⵠ[24];
      for (x = 0; x < Da.length; x++) {
        lw(Da[x]);
      }
      Da = kx.ⵠⵠⵠ[25];
      x = 0;
      for (; Da.length > x; x++) {
        lw(Da[x]);
      }
      Da = kx.ⵠⵠⵠ[26];
      x = 0;
      for (; x < Da.length; x++) {
        lw(Da[x]);
      }
      Da = kx.ⵠⵠⵠ[27];
      x = 0;
      for (; x < Da.length; x++) {
        lw(Da[x]);
      }
      Da = kx.ⵠⵠⵠ[28];
      x = 0;
      for (; Da.length > x; x++) {
        lw(Da[x]);
      }
      var Ea = kx.ⵠⵠⵠ[32];
      for (x = 0; x < Ea.length; x++) {
        _v(Ea[x]);
      }
      ea = kx.ⵠⵠⵠ[1];
      x = 0;
      for (; ea.length > x; x++) {
        Wv(ea[x]);
      }
      ea = kx.ⵠⵠⵠ[6];
      x = 0;
      for (; x < ea.length; x++) {
        Wv(ea[x]);
      }
      l = kx.ⵠⵠⵠ[18];
      x = 0;
      for (; l.length > x; x++) {
        if (l[x].action == 2) {
          Wv(l[x]);
        }
      }
      wa = kx.ⵠⵠⵠ[34];
      x = 0;
      for (; x < wa.length; x++) {
        Wv(wa[x]);
      }
      fa = kx.ⵠⵠⵠ[22];
      x = 0;
      for (; x < fa.length; x++) {
        Wv(fa[x]);
      }
      ha = kx.ⵠⵠⵠ[23];
      x = 0;
      for (; x < ha.length; x++) {
        Wv(ha[x]);
        ha[x].ⲆΔⲆⲆⵠ(ha[x].info);
      }
      bw(Pv, i, t, u, e, 989, "c", 0);
      bw(Pv, i, t, u, e, 109, "t", 5, 4);
      bw(Pv, i, t, u, e, 413, "f", 2, 2);
      bw(Pv, i, t, u, e, 693, "plm", 0, 0);
      bw(Pv, i, t, u, e, 307, "b", 3, 2);
      bw(Pv, i, t, u, e, 109, "t", 3, 2);
      bw(Pv, i, t, u, e, 307, "b", 1, 0);
      bw(Pv, i, t, u, e, 413, "f", 1, 1);
      bw(Pv, i, t, u, e, 693, "plm", 1, 1);
      bw(Pv, i, t, u, e, 109, "t", 1, 0);
      bw(Pv, i, t, u, e, 413, "f", 0, 0);
      bw(Pv, i, t, u, e, 693, "plm", 2, 2);
      Ea = kx.ⵠⵠⵠ[32];
      x = 0;
      for (; Ea.length > x; x++) {
        Wv(Ea[x]);
      }
      var Fa = kx.ⵠⵠⵠ[56];
      for (x = 0; Fa.length > x; x++) {
        lw(Fa[x], 221);
      }
      aa = kx.ⵠⵠⵠ[0];
      x = 0;
      for (; aa.length > x; x++) {
        if ((ba = aa[x]).ΔᐃⵠⵠΔⲆᐃ === 1 && (ba.ⵠⵠⵠⵠⲆ < 180 || ba.ⲆΔⲆⲆᐃ !== 227 && ba.ⲆΔⲆⲆᐃ !== 228 && ba.ⲆΔⲆⲆᐃ !== 91 && ba.ⲆΔⲆⲆᐃ !== 229 && ba.ⲆΔⲆⲆᐃ !== 230)) {
          ba.ΔᐃⲆⲆⵠᐃΔ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(ba.ΔᐃⲆⲆⵠᐃΔ, 100, 0.018);
          ta = 1 + Math.min(1, Math.max(ba.ΔᐃⲆⲆⵠᐃΔ, 0) / 100) * 0.18;
          Gn.save();
          Gn.scale(ta, ta);
          lx.ⲆⲆⵠ.x /= ta;
          lx.ⲆⲆⵠ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ᐃⲆᐃΔⲆᐃⵠ();
          ba.ΔΔⲆⲆ();
          lx.ⲆⲆⵠ.x *= ta;
          lx.ⲆⲆⵠ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Gn.restore();
        }
      }
      var Ga = kx.ⵠⵠⵠ[38];
      for (x = 0; Ga.length > x; x++) {
        lw(Ga[x], 190);
        Ga[x].ⲆΔⲆⲆⵠ(Ga[x].info);
      }
      var Ha = kx.ⵠⵠⵠ[90];
      for (x = 0; x < Ha.length; x++) {
        lw(Ha[x], 245, 246);
      }
      var Ia = kx.ⵠⵠⵠ[42];
      for (x = 0; Ia.length > x; x++) {
        lw(Ia[x], 201);
      }
      aa = kx.ⵠⵠⵠ[0];
      x = 0;
      for (; aa.length > x; x++) {
        ba = aa[x];
        if ((ba.ⲆΔⲆⲆᐃ === 227 || ba.ⲆΔⲆⲆᐃ === 228 || ba.ⲆΔⲆⲆᐃ === 91 || ba.ⲆΔⲆⲆᐃ === 229 || ba.ⲆΔⲆⲆᐃ === 230) && ba.ⵠⵠⵠⵠⲆ > 180) {
          ba.ΔᐃΔⲆᐃΔⵠ = 1;
          Gn.save();
          ta = 1 + Math.min(1, Math.max(ba.ΔᐃⵠⲆΔ - 30, 0) / 180) * 0.35;
          Gn.scale(ta, ta);
          lx.ⲆⲆⵠ.x /= ta;
          lx.ⲆⲆⵠ.y /= ta;
          ba.x /= ta;
          ba.y /= ta;
          ba.r.x /= ta;
          ba.r.y /= ta;
          ba.ᐃⲆᐃΔⲆᐃⵠ();
          ba.ΔΔⲆⲆ();
          lx.ⲆⲆⵠ.x *= ta;
          lx.ⲆⲆⵠ.y *= ta;
          ba.x *= ta;
          ba.y *= ta;
          ba.r.x *= ta;
          ba.r.y *= ta;
          Gn.restore();
        }
      }
      sa = kx.ⵠⵠⵠ[91];
      x = 0;
      for (; sa.length > x; x++) {
        if (sa[x].ΔᐃΔⲆᐃΔⵠ === 1) {
          lw(sa[x]);
        }
      }
      V = kx.ⵠⵠⵠ[64];
      x = 0;
      for (; x < V.length; x++) {
        if (V[x].scale > 1) {
          lw(V[x], 449, 463);
        }
      }
      V = kx.ⵠⵠⵠ[69];
      x = 0;
      for (; x < V.length; x++) {
        if (V[x].scale > 1) {
          lw(V[x], 450, 464);
        }
      }
      var Ja = kx.ⵠⵠⵠ[74];
      for (x = 0; x < Ja.length; x++) {
        lw(Ja[x], 235, 1107);
      }
      var Ka = kx.ⵠⵠⵠ[75];
      for (x = 0; Ka.length > x; x++) {
        lw(Ka[x], 238, 1128);
      }
      if ((Kv += rx * 15) > 60) {
        Kv -= 60;
      }
      bw(Mv, i, t, u, e, 1041, "fo", 2);
      bw(Mv, i, t, u, e, 244, "fod", 2);
    })();
    if (hx.ΔⲆᐃΔᐃ && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5) {
      (function () {
        var a = lx.ⲆΔΔⲆⲆ;
        if (a.Ⲇⵠᐃᐃᐃ === 0) {
          a.ΔΔⲆⵠⵠ = Math.max(0, a.ΔΔⲆⵠⵠ - rx / 10);
        } else {
          a.ΔΔⲆⵠⵠ = Math.min(1, a.ΔΔⲆⵠⵠ + rx / 10);
        }
        for (var b = a.ⵠᐃⲆⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⵠⵠᐃ(d);
          $v(471, d.id, lx.ⲆⲆⵠ.x + d.x, lx.ⲆⲆⵠ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ΔᐃⲆⵠⵠ <= 0 || -lx.ⲆⲆⵠ.x + Ln < d.x || -lx.ⲆⲆⵠ.x - lx.ⲆⲆⵠ.w / 2 > d.x || -lx.ⲆⲆⵠ.y + qn < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -lx.ⲆⲆⵠ.y;
        if (kx.ΔΔⵠᐃⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = lx.ⲆᐃⲆⵠⵠ;
        if (a.Ⲇⵠᐃᐃᐃ === 0) {
          a.ΔΔⲆⵠⵠ = Math.max(0, a.ΔΔⲆⵠⵠ - rx / 10);
        } else {
          a.ΔΔⲆⵠⵠ = Math.min(1, a.ΔΔⲆⵠⵠ + rx / 10);
        }
        for (var b = a.ⵠᐃⲆⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⵠⵠᐃ(d);
          $v(470, d.id, lx.ⲆⲆⵠ.x + d.x, lx.ⲆⲆⵠ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          d = b[c];
          if (d.ΔᐃⲆⵠⵠ <= 0 || d.x > -lx.ⲆⲆⵠ.x + Ln || d.x < -lx.ⲆⲆⵠ.x || -lx.ⲆⲆⵠ.y + qn < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -lx.ⲆⲆⵠ.y;
        if (kx.ⵠⵠⵠⵠⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = lx.ΔⵠΔⵠΔⵠΔ;
        for (var b = a.ⵠᐃⲆⲆⵠ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⵠⵠᐃ(d);
          $v(942, d.id, lx.ⲆⲆⵠ.x + d.x, lx.ⲆⲆⵠ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).ΔᐃⲆⵠⵠ <= 0 || d.x > -lx.ⲆⲆⵠ.x + Ln || d.x < -lx.ⲆⲆⵠ.x || -lx.ⲆⲆⵠ.y + qn < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -lx.ⲆⲆⵠ.y;
        if (kx.ⵠᐃⵠᐃⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (kx.transition && a) {
      kx.transition = false;
      kx.ⲆⲆⲆⵠ.ⲆⵠΔ = 0;
      kx.ⲆⲆⲆⵠ.ᐃⲆᐃ = false;
    }
  }
  function nw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆⲆⵠ.y + j - 700;
    var l = Math.max(lx.ⲆⲆⵠ.x + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.x + Ln - i - 100, 0);
    var t = l;
    var b = Ln - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = t;
    var m = u;
    var p = d.x + 0;
    var C = b;
    var G = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h + 350 - u + d.x) - 3 > k) {
      var A = wn;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f - 2;
    } else {
      A = En;
      u = k;
      E = -1;
    }
    f = h + 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(F, m, C, p);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 70, 76, 42, 139, 155, N);
      } else {
        Gn.fillStyle = tr.ⲆΔΔΔᐃΔΔ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
          Gn.fillStyle = gw(17, 94, 96, 169, 214, 211, N);
        } else {
          Gn.fillStyle = tr.ⵠᐃᐃΔΔᐃΔ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
      } else {
        Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
      }
      Gn.fillRect(J, L, B, M);
    }
    if (hx.ΔⲆᐃΔᐃ && o) {
      q.ⲆⵠⵠⵠⵠⵠⲆΔΔ(k, E, G, h, -lx.ⲆⲆⵠ.x + F, -lx.ⲆⲆⵠ.x + F + C);
    }
  }
  function ow(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = lx.ⲆⲆⵠ.x + j + 820;
    var l = Math.max(lx.ⲆⲆⵠ.y + e, 0);
    var g = Math.max(-lx.ⲆⲆⵠ.y + qn - i - 100, 0);
    var t = l;
    var b = qn - l - g;
    if (o) {
      var d = q.ᐃᐃⵠ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var m = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⵠ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⵠ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = Jq;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = Ah;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (kx.transition) {
      var N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(F, m, p, C);
    if (o) {
      if (kx.transition) {
        N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(15, 70, 76, 42, 139, 155, N);
      } else {
        Gn.fillStyle = tr.ⲆΔΔΔᐃΔΔ[kx.time];
      }
    } else if (kx.transition) {
      N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
      Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
    } else {
      Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
    }
    Gn.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (kx.transition) {
          N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
          Gn.fillStyle = gw(17, 94, 96, 169, 214, 211, N);
        } else {
          Gn.fillStyle = tr.ⵠᐃᐃΔΔᐃΔ[kx.time];
        }
      } else if (kx.transition) {
        N = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
        Gn.fillStyle = gw(9, 55, 63, 11, 106, 132, N);
      } else {
        Gn.fillStyle = tr.ΔΔᐃⵠΔ[kx.time];
      }
      Gn.fillRect(L, J, M, B);
    }
    if (hx.ΔⲆᐃΔᐃ && o) {
      q.ⲆᐃⲆΔⵠⲆΔⲆᐃ(k, E, G, h, -lx.ⲆⲆⵠ.y + m, -lx.ⲆⲆⵠ.y + m + C);
    }
  }
  function pw(a) {
    Gn.globalAlpha = a.alpha;
    _b(Gn, a.x + lx.ⲆⲆⵠ.x, a.y + lx.ⲆⲆⵠ.y, a.r);
    Rb(Gn, tr.ⲆⵠᐃⲆΔᐃⲆ[kx.time]);
    Gn.globalAlpha = 1;
  }
  var qw = 0;
  var rw = 1;
  var sw = 2;
  var tw = 0;
  var uw = 1;
  var vw = 2;
  function ww(a, b) {
    const c = ~(a & 7863) & (a | 7863);
    const d = ~(b & 57306) & 57306 | ~(b & 57306) & b;
    const e = gx(c, d, c);
    gx(d, c, d);
    return ~(e & 26441) & 26441 | ~(e & 26441) & e;
  }
  function xw(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⵠⲆⵠΔⵠ: d,
      ⵠⵠΔᐃΔ: e
    };
    return {
      translate: g,
      ΔΔⲆⲆ: function (a) {
        bp(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function yw(a, b, c) {
    Ii(Dw, a, b, c);
    const d = vb(of[0], of[1], of[2], of[0], of[1]);
    vb(of[2], of[0], of[1], of[2], of[0]);
    return (d | 20409) & ~(d & 20409);
  }
  function zw(b, c, d, e) {
    const f = ~(b & 7111) & (b | 7111);
    const g = ~(c & 45237) & 45237 | ~(c & 45237) & c;
    const a = (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (8 << (d >> 8 & 255)) + (0 << (d >> 24 & 255));
    const h = (16 << (e >> 16 & 255)) + (0 << (e >> 24 & 255)) + (8 << (e & 255)) + (24 << (e >> 8 & 255));
    return (10496 + (function (b, c, d, e) {
      const f = (16 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255));
      const g = ~(c & 13167) & c | ~(c & 13167) & 13167;
      const a = d ^ 26391;
      const i = ~(e & 38825) & (e | 38825);
      const j = ct(f, g, a);
      const h = bx(i, f, g, a);
      return ((29443 + (j ^ h)) * 22695477 + 1) % 4294967296;
    }(f, g, a, h) ^ ax(f, g, a, h, f))) % 65501;
  }
  function Aw(f, j, i, k, n, q, a, t, u, w, l, g, b, d, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === Ds) {
      a = 0;
    }
    if (Ds === t) {
      t = 0;
    }
    if (u === Ur) {
      u = 0;
    }
    if (Ig === d) {
      d = 0;
    }
    var c = document.createElement("canvas");
    var m = c.getContext("2d");
    m.textBaseline = "middle";
    m.font = (eb !== x ? x + " " : "") + k + "px " + j;
    n = n !== undefined ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
    c.width = n + a;
    c.height = k + t;
    if (q !== undefined) {
      if (nh !== l) {
        m.globalAlpha = l;
      }
      m.fillStyle = q;
      if (Wa !== g) {
        ΔⲆᐃᐃⵠΔⵠⵠΔ(m, u + 2, u, n + a - u * 2 - 4, k + t - u * 2, g);
        m.fill();
      } else {
        m.fillRect(u, u, n + a - u * 2, k + t - u * 2);
      }
      m.globalAlpha = 1;
      if (u !== 0) {
        m.lineWidth = u;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (x !== undefined ? x + " " : "") + k + "px " + j;
    if (b !== undefined) {
      m.strokeStyle = b;
      m.lineWidth = d;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
    }
    m.fillStyle = i;
    m.fillText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
    c.w2 = c.width / 2;
    c.ⵠᐃⵠᐃΔ = c.height / 2;
    return c;
  }
  function Bw(a) {
    return Ya.String.fromCharCode(a);
  }
  function Cw(a, b) {
    Ei(Dw, a, b);
    const c = fx(of[0], of[1]);
    const d = function (a, b) {
      yj(Dw, a, b);
      const c = function (b, c, d, e, f) {
        Uj(Dw, b, c, d, e, f);
        const g = yw(of[0], of[1], of[2]);
        const a = Nw(of[3], of[4], of[0], of[1], of[2], of[3]);
        return (24 << ((g ^ a) >> 24 & 255)) + (0 << ((g ^ a) >> 16 & 255)) + (16 << ((g ^ a) >> 8 & 255)) + (8 << ((g ^ a) & 255));
      }(of[0], of[1], of[0], of[1], of[0]);
      Nw(of[1], of[0], of[1], of[0], of[1], of[0]);
      return ~(c & 57249) & c | ~(c & 57249) & 57249;
    }(of[0], of[1]);
    return (24 << ((c ^ d) & 255)) + (16 << ((c ^ d) >> 16 & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (8 << ((c ^ d) >> 8 & 255));
  }
  function ef(b, c, d, e, f) {
    Pj(Dw, b, c, d, e, f);
    const g = Ww(of[0], of[1], of[2], of[3], of[4], of[0]);
    Ww(of[1], of[2], of[3], of[4], of[0], of[1]);
    return g ^ 6398;
  }
  function tf(f, e, i, j, k, m, n, p, q = 0, h, r) {
    if (p === Sh) {
      p = 0;
    }
    if (h === undefined) {
      h = 0;
    }
    if (r === Oh) {
      r = 1;
    }
    if (m !== 1) {
      m = 0;
    }
    if (j) {
      var t = j;
    }
    var u;
    var w = {
      width: f,
      height: e,
      ⵠᐃ: t,
      state: tw,
      translate: {
        x: p,
        y: q,
        ⵠⲆⵠΔⵠ: p,
        ⵠⵠΔᐃΔ: q
      },
      ᐃᐃᐃᐃⵠᐃⵠⲆⲆ: m,
      ᐃⵠⵠⵠ: 0,
      callback: n,
      position: h,
      active: r
    };
    function d() {
      return w.ⵠᐃ[w.state];
    }
    function v(a) {
      var b = w.translate;
      if (w.width === 0 || w.height === 0) {
        w.width = w.ⵠᐃ[0].width;
        w.height = w.ⵠᐃ[0].height;
      }
      return a.x > b.x && a.x < b.x + w.width / k && a.y > b.y && a.y < b.y + w.height / k;
    }
    m = function () {
      var a = 0;
      if (w.ᐃᐃᐃᐃⵠᐃⵠⲆⲆ === 1) {
        if (w.state === uw || w.state === vw) {
          w.ᐃⵠⵠⵠ = (0 + rx * 1000) % 1000;
        } else if (0 < 0) {
          w.ᐃⵠⵠⵠ = 0 > 500 ? 0 + rx * 1000 : 0 - rx * 1000;
          if (0 > 0 || 1000 < 0) {
            w.ᐃⵠⵠⵠ = 0;
          }
        }
        a = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(0 > 500 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((k = k === 3 ? 3 : k === 1 ? 2 : 1) === 2) {
      u = function (a) {
        var b = 1 + m();
        var c = d();
        var e = b * w.width / 2;
        var f = b * w.height / 2;
        var g = (e - w.width / 2) / 2;
        var h = (f - w.height / 2) / 2;
        bp(a, c, w.translate.x - g, w.translate.y - h, e, f);
      };
    } else if (k === 3) {
      u = function (b) {
        var c = d();
        var e = w.width;
        var f = w.height;
        var g = (e - w.width) / 2;
        var h = (f - w.height) / 2;
        bp(b, c, w.translate.x - g, w.translate.y - h, e, f);
      };
      k = 1;
    } else {
      u = function (a) {
        bp(a, d(), w.translate.x, w.translate.y);
      };
    }
    return {
      info: w,
      ΔⵠⲆᐃ: function (a, b, c) {
        if (v(b)) {
          if (c == rw) {
            w.state = vw;
          } else if (sw == c || c == qw && vw != w.state) {
            w.state = uw;
          }
          return Vl;
        } else {
          w.state = tw;
          return false;
        }
      },
      ΔΔⲆⲆ: u,
      ᐃⲆⵠΔΔⲆΔ: v
    };
  }
  function nf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  let of = bj;
  let Dw = Sh;
  const Ew = $j;
  $j = function () {
    Dw = dj(Lj(11));
    of = dk(Dw);
    if (Ew) {
      Ew();
    }
  };
  var sf = "send";
  var hf = ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("id") === "1" ? 1 : 0;
  var lf = ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("password");
  var gf = ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("debug") || undefined;
  if (gf !== undefined) {
    gf = JSON.parse(Ya.decodeURIComponent(gf));
  }
  var Fw = ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("server") || undefined;
  var bf = ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("region") || Ds;
  var df = "starve.io";
  var vf = "https://" + df;
  const cf = 15484236;
  const mf = 15484236 .ᐃⲆⵠⲆⲆᐃⲆ;
  const pf = `const ⵠⲆⵠᐃⵠⵠᐃ = (typeof ⲆⵠᐃⲆⲆΔΔ === "${mf}") ? 1 : 0; return ⵠⲆⵠᐃⵠⵠᐃ;`;
  var Cf = {
    ΔΔⲆᐃ: 2,
    ᐃᐃᐃⲆⲆⲆⵠ: 16,
    ⵠⲆᐃⵠⵠⵠᐃ: 256,
    IDLE: 64,
    ⲆⲆⲆⵠⵠⲆΔ: 8,
    ⲆᐃⵠᐃⲆⲆΔⵠⲆ: 1,
    ᐃⲆⵠΔⲆΔΔ: 128,
    ⲆΔΔⵠⵠ: 4,
    ᐃⲆⲆΔⵠΔᐃ: 32
  };
  var Tf = [{
    ΔⲆᐃⵠᐃ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ΔⲆᐃⵠᐃ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ΔⲆᐃⵠᐃ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ΔⲆᐃⵠᐃ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ΔⲆᐃⵠᐃ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ΔⲆᐃⵠᐃ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ΔⲆᐃⵠᐃ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ΔⲆᐃⵠᐃ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ΔⲆᐃⵠᐃ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ΔⲆᐃⵠᐃ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  let ff = 0;
  const Gw = [];
  var yf = {
    ⵠΔΔΔⵠⵠΔ: 3,
    ⲆⲆᐃΔΔⵠΔⲆᐃ: 3,
    ⵠⵠⵠᐃΔⲆⵠⲆⵠ: 20,
    ᐃΔⵠΔΔⵠⵠ: 1,
    ᐃⵠΔⲆᐃᐃᐃⵠΔ: 5,
    ᐃⲆΔᐃᐃⵠⵠΔΔ: 60000,
    ΔᐃΔΔΔⲆⲆᐃᐃ: 0.58,
    ΔᐃΔⲆΔᐃΔᐃᐃ: 8000,
    ΔⵠΔⵠⵠⵠΔ: 600000,
    ⲆⵠᐃᐃⵠⵠⵠⲆΔ: 14,
    ⲆΔΔΔⲆⲆΔⵠⵠ: 125000,
    ΔⲆⲆⵠΔⲆΔⵠⵠ: "[6]",
    ⲆⲆᐃⲆᐃᐃⲆᐃᐃ: 14,
    ΔⲆⵠᐃⲆΔⲆⵠΔ: 5,
    ΔᐃΔⵠᐃⲆⵠ: 4,
    ΔⵠᐃΔⵠᐃⵠ: 52,
    ΔᐃⵠⵠⲆⵠΔ: 0,
    ⵠΔΔⵠⵠⵠⵠⵠⵠ: 50,
    ΔᐃⲆⵠⵠᐃΔ: 0.2,
    ΔⵠⵠᐃᐃⲆⲆᐃⵠ: 2000,
    ⵠᐃⵠⲆΔᐃΔ: 4,
    ᐃⲆⵠᐃᐃⲆᐃⵠⵠ: 200,
    ᐃᐃᐃⲆⲆⲆⵠ: 0.2,
    ΔⲆᐃΔⲆⲆᐃΔⲆ: 25,
    ⵠᐃᐃⵠⲆΔΔ: 2
  };
  var wf = {
    ⵠΔⵠ: 480000,
    ⲆⲆⵠΔⵠΔᐃ: 10,
    ᐃᐃⲆⵠⲆⵠⲆ: 16,
    ᐃⲆⵠⲆⵠⵠⵠΔⵠ: 6,
    Ⲇⵠⵠᐃⵠᐃᐃ: 60,
    ΔⵠΔⵠΔ: 1,
    ⲆⲆᐃⲆⲆ: 2,
    ΔⵠⵠⲆΔ: 4,
    ᐃⲆⲆΔⲆ: 8,
    ΔᐃⲆⵠⵠᐃΔ: 10,
    ΔᐃⵠⲆΔᐃᐃ: 100,
    ⲆⲆΔⵠᐃⵠⲆ: 100,
    ΔⵠⵠΔⲆᐃⵠ: 100,
    ⲆΔᐃⲆΔΔⲆΔⲆ: 100,
    ⵠⵠⲆᐃᐃΔΔ: 100,
    ᐃΔⲆⲆᐃᐃⲆ: 100,
    ⲆΔΔᐃⲆᐃᐃᐃΔ: 100,
    ᐃΔⲆⲆᐃᐃⲆ: 100,
    ⲆⲆⲆᐃⵠᐃⲆ: 100,
    ᐃⲆᐃΔΔΔΔ: 100,
    ⲆΔᐃᐃⵠ: 0,
    ⵠⵠᐃᐃΔᐃΔ: 1,
    ⲆⵠᐃⵠΔ: 2,
    ⵠᐃⲆⵠᐃ: 3,
    ⵠⲆᐃᐃᐃ: 4,
    ⵠⲆⵠⲆⲆᐃΔ: 5,
    ⵠⲆⵠᐃΔ: 6,
    ᐃⵠᐃΔⲆ: 7,
    ⲆᐃᐃΔΔΔⵠⵠⲆ: {
      losangeles: "Los Angeles",
      sydney: "Sydney",
      osaka: "Osaka",
      frankfurt: "Frankfurt",
      atlanta: "Atlanta"
    },
    ⲆΔΔⲆⲆΔⵠ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ⵠⲆⵠΔⲆᐃⲆ: 0,
    ⲆⵠⲆⵠⵠᐃᐃ: 0,
    ⵠⲆΔⵠΔⲆⵠ: 30,
    ⲆᐃΔⵠᐃⲆᐃⲆⵠ: 2,
    Ⲇⵠⵠᐃⵠᐃᐃ: 60000,
    ⲆⲆⲆᐃⵠⵠⲆᐃⲆ: 0,
    ⲆⵠᐃⲆᐃⲆⲆΔᐃ: 0,
    ⵠᐃᐃΔᐃᐃⵠⲆᐃ: 50,
    ᐃⵠᐃΔⲆᐃⵠᐃⵠ: 0,
    ⲆΔⵠΔⵠⲆⵠⵠᐃ: 40,
    ⲆⲆⲆⲆᐃⵠⵠΔᐃ: 39,
    ⵠᐃΔᐃⵠⵠⲆⵠΔ: 830,
    ΔΔΔΔΔᐃΔ: 25,
    ΔΔΔⵠᐃΔⲆ: 8,
    ᐃΔⵠᐃΔ: 0,
    ᐃⵠⲆⲆᐃ: 0,
    ⵠⵠΔⲆⲆⵠᐃ: 200,
    ⵠᐃⲆⵠⲆΔΔ: 0,
    ⲆⵠⲆᐃⲆ: 250,
    ᐃⵠΔⵠⵠⲆⲆ: 150,
    ⲆⲆᐃⲆΔⵠᐃ: 0,
    ᐃᐃⵠΔΔ: 350,
    ⵠⲆΔⲆⵠᐃⲆ: 100,
    ⲆΔΔⲆⵠᐃᐃ: 700,
    ΔᐃΔⲆⵠ: 39879
  };
  var Pf = [];
  for (qt = 0; qt < 500; qt++) {
    Pf[qt] = 0;
  }
  Pf[47] = 1;
  Pf[57] = 1;
  Pf[0] = 1;
  Pf[5] = 1;
  Pf[6] = 1;
  Pf[30] = 1;
  Pf[19] = 1;
  Pf[9] = 1;
  Pf[62] = 1;
  Pf[63] = 1;
  Pf[13] = 1;
  Pf[14] = 1;
  Pf[15] = 1;
  Pf[33] = 1;
  Pf[34] = 1;
  Pf[16] = 1;
  Pf[17] = 1;
  Pf[12] = 1;
  Pf[18] = 1;
  var kf = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Af = {
    ⵠᐃΔΔΔ: 64,
    Ⲇᐃᐃᐃⵠ: 49,
    ⵠⲆⲆΔⵠ: 26,
    ᐃΔΔΔⵠ: 22,
    ᐃΔΔⲆⲆ: 21,
    ᐃΔⵠΔΔ: 16,
    ⵠᐃⵠⲆⵠ: 53,
    ⵠΔᐃᐃⵠⲆᐃ: 84,
    ΔᐃΔΔⵠ: 39,
    ⵠΔΔΔⲆ: 17,
    ⲆⲆΔⲆᐃ: 30,
    ΔⲆⲆⲆⵠ: 18,
    ᐃⲆⵠⲆᐃ: 0,
    ᐃⲆΔᐃⲆ: 2,
    ⲆⲆᐃⵠᐃᐃⲆ: 76,
    ⵠⵠᐃⵠΔ: 27,
    ⵠⵠᐃᐃᐃ: 87,
    ΔⲆⵠᐃⵠ: 9,
    ΔⵠⵠΔⲆΔᐃ: 89,
    ᐃᐃⵠᐃⲆ: 74,
    ⲆⲆᐃⲆⵠ: 7,
    ᐃⵠⵠⵠⲆ: 48,
    ΔΔᐃⲆⵠ: 75,
    ΔΔⵠⲆᐃ: 36,
    ΔⵠⲆⲆⵠ: 15,
    ᐃΔⲆⵠΔ: 72,
    ⵠΔⲆⵠᐃ: 100,
    ᐃⲆⲆⲆⵠ: 86,
    ⵠⲆᐃΔᐃ: 68,
    ᐃⵠⲆᐃΔ: 6,
    ⵠΔΔⲆΔ: 5,
    ΔⵠᐃⵠⲆ: 81,
    ᐃⲆΔΔΔ: 13,
    ⲆΔⵠⲆᐃⲆᐃ: 82,
    ⲆΔⲆⵠⲆ: 20,
    ᐃⲆΔᐃᐃ: 79,
    ⲆⵠΔⵠⵠ: 73,
    ΔⲆⵠᐃⲆ: 38,
    ⲆΔΔⵠΔ: 34,
    ᐃⲆⲆΔΔ: 60,
    ᐃᐃⵠΔⵠ: 1,
    ᐃⵠΔΔᐃ: 42,
    ⵠⵠⵠⲆᐃ: 65,
    ᐃΔⲆⲆⵠ: 56,
    ᐃⲆΔⵠΔ: 66,
    ΔⵠΔⲆᐃ: 61,
    ⵠΔᐃⲆᐃ: 28,
    ⲆⲆᐃᐃⲆ: 31,
    ΔΔᐃᐃᐃ: 90,
    ΔΔᐃᐃⲆ: 32,
    ΔΔⵠᐃⲆ: 37,
    ⵠⲆᐃΔⲆ: 25,
    ⵠⲆⲆⲆⲆ: 47,
    ΔⲆⵠⲆΔ: 4,
    ⵠᐃᐃⲆⵠ: 33,
    ⲆΔΔⲆΔ: 40,
    ᐃⲆⵠΔⵠ: 55,
    ΔᐃΔⲆⵠ: 3,
    ⵠΔⵠⲆᐃ: 41,
    ⲆΔⲆᐃⲆ: 23,
    ⲆⲆⲆᐃⵠ: 24,
    ⵠᐃΔⵠΔ: 70,
    ⵠᐃⵠⵠⲆ: 88,
    ⵠΔᐃΔᐃ: 63,
    ΔΔⲆⵠΔ: 12,
    ΔⵠΔᐃΔ: 11,
    ᐃⲆⲆⲆⲆ: 54,
    ⵠᐃΔⲆΔ: 45,
    Ⲇᐃⵠⵠᐃ: 8,
    Δⵠᐃᐃⵠ: 91,
    ⲆᐃΔᐃⵠ: 46,
    ⲆⲆⲆⵠΔ: 10,
    ᐃᐃⵠⲆΔ: 29,
    ΔΔⵠⵠⵠ: 62,
    ⵠⲆⵠⵠΔ: 35,
    ⲆΔⲆⵠΔ: 77,
    ΔⲆᐃᐃᐃ: 80,
    ΔᐃΔΔΔ: 69,
    ⵠᐃⲆⵠⲆ: 52,
    ᐃⵠᐃⵠΔⵠⲆ: 85,
    ΔᐃⵠΔᐃ: 78,
    ᐃᐃᐃᐃⵠ: 43,
    ΔᐃⵠᐃⲆᐃΔ: 83,
    ΔΔⵠⲆⵠ: 51,
    ⲆΔⵠⵠⵠ: 50,
    ⲆΔⵠᐃⲆ: 19,
    Δᐃᐃⵠᐃ: 14,
    ᐃΔⲆⵠᐃ: 71,
    ⲆⲆᐃⵠⲆ: 67,
    ΔⲆⲆⵠᐃ: 44
  };
  var xf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Jf(b, c, d, e) {
    const f = (12345 + (b + 1664) * 1103515245) % 2147483648;
    const g = c ^ 16080;
    const a = ~(d & 51241) & 51241 | ~(d & 51241) & d;
    const i = ~(e & 43074) & 43074 | ~(e & 43074) & e;
    const j = Vs(f, g, a, i, f);
    const h = gx(g, a, i);
    return (8 << ((j ^ h) & 255)) + (0 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) >> 24 & 255));
  }
  function Mf(b, c, d, e, f, i, a, j, k, h) {
    this.type = b;
    this.ΔⲆᐃΔ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ⵠⵠᐃⵠΔΔⵠ = i;
    this.action = a;
    this.info = j;
    this.ⲆⲆⲆⵠⲆ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ⵠⵠⵠⵠⲆ = k;
    if (kx) {
      this.ΔᐃⲆⲆ = kx.ⲆⵠΔΔⲆⲆⵠ * c + d;
    }
    switch (b) {
      case 0:
        this.ⲆⲆΔⵠ = kx.ⲆⲆⲆᐃ[this.ΔⲆᐃΔ];
        this.Δⵠⵠⵠ = this.ⲆⲆΔⵠ.Δⵠⵠⵠ;
        this.ᐃⵠⵠⲆΔᐃᐃ = this.ⲆⲆΔⵠ.ᐃⵠⵠⲆΔᐃᐃ;
        this.Δⵠⵠᐃⵠ = this.ⲆⲆΔⵠ.Δⵠⵠᐃⵠ;
        this.ⵠΔⲆΔⵠ = this.ⲆⲆΔⵠ.ⵠΔⲆΔⵠ;
        this.ⵠᐃⵠᐃΔᐃⲆ = -1000000;
        this.ⵠᐃⵠᐃⵠ = -1000000;
        this.ⵠⵠⵠⵠⵠ = -1000000;
        this.ΔΔⵠᐃⵠ = -1000000;
        this.ᐃΔΔⲆΔᐃΔ = -1000000;
        this.ᐃᐃΔΔΔⵠⲆ = -1000000;
        this.ⲆᐃΔᐃⲆ = -1000000;
        this.ΔᐃⲆᐃⲆ = kx.mode === 2 && this.Δⵠⵠⵠ === 0;
        this.ΔⵠⵠΔᐃⵠⲆ = kx.mode === 3 && this.Δⵠⵠⵠ === 0 && jn;
        this.ⲆᐃⲆⵠⲆᐃⲆ = !!this.ΔᐃⲆᐃⲆ && this.ⲆⲆΔⵠ.ⵠⲆⲆΔΔ === "  " && Wh;
        this.ᐃⵠⵠⵠⵠ = [];
        this.ΔᐃⵠⵠΔⲆᐃ = 0;
        this.ᐃⲆⲆΔ = gr;
        this.ᐃΔᐃⵠᐃⵠⵠ = 0;
        this.ΔᐃΔⲆᐃΔⵠ = 0;
        this.ⲆΔⲆⵠⵠ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ΔΔⲆⲆ = Jv;
        this.ᐃⲆᐃΔⲆᐃⵠ = Dv;
        this.ⲆᐃᐃΔⵠ = 0;
        this.ⲆΔᐃᐃⲆ = 0;
        this.ⲆᐃⵠⲆⵠ = 0;
        this.ΔⲆⲆᐃⵠⲆⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔᐃⵠⲆΔ = 0;
        this.ΔᐃⲆⲆⵠᐃΔ = 0;
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ΔⲆⲆⵠⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(hh, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ⲆᐃΔ.ΔⲆⵠᐃ(kq, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠⵠΔⵠⲆᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ⵠⵠⲆΔᐃΔⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(bh, 0, 2.25, -1.5, 3.75, 7.5);
        this.ΔⵠⲆⵠⵠᐃᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 0, -Math.PI / 3, 6, 9);
        this.ⲆᐃⲆⵠᐃΔᐃΔⵠ = 0;
        this.ΔⵠⲆⵠᐃⲆⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(Cl, 0.6, 0.6, 0, 1, 3);
        this.ᐃΔᐃΔΔⵠᐃ = this.ⲆᐃⲆⵠⲆᐃⲆ ? new ⲆᐃΔ.ΔⲆⵠᐃ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ⵠΔΔᐃΔⲆⵠ = 0;
        this.ⲆᐃⵠⵠⵠⲆⲆ = 0;
        this.ᐃΔⵠΔΔⲆᐃ = [];
        this.ΔⵠⲆⵠΔⲆⲆ = [];
        this.text = [];
        this.label = [];
        this.ⵠΔᐃⵠᐃΔⵠ = Fv;
        this.ᐃᐃᐃⲆᐃ = Xj;
        this.right = -1;
        this.ⲆΔⲆⲆᐃ = -1;
        this.action = 64;
        this.ⲆⲆΔⲆᐃᐃⲆ = Ah;
        this.ᐃⵠⲆⲆⵠ = 0;
        this.ⵠᐃᐃΔⲆ = false;
        this.bubbles = [];
        this.ΔⵠⲆⲆΔ = 0;
        this.ⲆᐃⵠΔⲆ = -1;
        this.ⵠⵠᐃ = function (a) {
          if (this.info & 32768) {
            this.ⲆⲆΔⲆᐃᐃⲆ = true;
            this.info = this.info & -32769;
          } else {
            this.ⲆⲆΔⲆᐃᐃⲆ = mk;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ΔⵠⲆⲆΔ = 1;
          } else {
            this.ΔⵠⲆⲆΔ = 0;
          }
          this.ᐃⵠⲆⲆⵠ = Math.floor(this.info / 128);
          this.info -= this.ᐃⵠⲆⲆⵠ * 128;
          if (this.info === 7 || this.ⲆᐃⲆⵠⲆᐃⲆ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ΔᐃⵠⵠΔⲆᐃ = kx.ⵠⲆⲆΔΔΔᐃⵠⲆ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ⲆΔⲆⲆᐃ = this.ⲆⲆⲆⵠⲆ & 255;
          if (this.right === 2) {
            this.ⵠᐃᐃΔⲆ = jn;
          } else {
            this.ⵠᐃᐃΔⲆ = Zh;
          }
          if (Pf[this.right]) {
            this.ᐃΔⲆΔⲆ = za;
          } else {
            this.ᐃΔⲆΔⲆ = hh;
          }
          if (a & 256) {
            this.ΔⵠⲆⵠᐃⲆⲆ.ᐃⲆᐃ = cr;
            this.ΔⵠⲆⵠᐃⲆⲆ.ⲆⵠΔ = 0.6;
          } else if (a & 4) {
            this.freeze.ᐃⲆᐃ = false;
            this.freeze.ⲆⵠΔ = 0.6;
          } else if (a & 128) {
            this.ΔⲆⲆⵠⲆ.ᐃⲆᐃ = false;
            this.ΔⲆⲆⵠⲆ.ⲆⵠΔ = 0.6;
          }
          if (a & 8) {
            this.ⵠⵠⵠΔⵠⲆᐃ.ᐃⲆᐃ = false;
            this.ⵠⵠⵠΔⵠⲆᐃ.ⲆⵠΔ = 0.6;
          }
          if (a & 2) {
            this.ᐃᐃⲆ.ᐃⲆᐃ = Cl;
            this.ᐃᐃⲆ.ⲆⵠΔ = 0.6;
          }
          if (a & 16) {
            this.ⲆᐃⲆⵠᐃΔᐃΔⵠ = 0.58;
            if (ox.ΔΔΔᐃᐃ && this.ⲆᐃⵠΔⲆ !== -1) {
              ox.ⲆⲆⲆᐃ[this.ⲆᐃⵠΔⲆ].ΔⵠⲆΔⲆΔᐃⲆⲆ($w[this.right]);
            }
          }
        };
        this.ⵠⵠᐃ();
        break;
      case 23:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(mk, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: vg,
          angle: 0
        };
        this.ᐃⲆⲆΔᐃ = Tu;
        this.ΔⵠΔⵠⲆ = bv;
        this.ΔΔΔⵠΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(kq, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⵠⲆΔⵠᐃΔ = 0;
        this.ⵠⲆⲆⲆⵠⲆⵠ = 0;
        this.ⲆΔⲆⲆⵠ = Lp;
        break;
      case 22:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(Zh, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ᐃⲆⲆΔᐃ = Gu;
        this.ΔⵠΔⵠⲆ = Lu;
        this.ΔΔΔⵠΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⵠⵠⲆΔⵠᐃΔ = 0;
        this.ⵠⲆⲆⲆⵠⲆⵠ = 0;
        break;
      case 1:
      case 6:
        this.ᐃⲆⲆΔᐃ = Eu;
        this.ΔⵠΔⵠⲆ = Du;
        this.ⵠⵠΔⵠΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(ce, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔΔΔⵠΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(kq, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(cj, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 43:
        this.ᐃⲆⲆΔᐃ = Xu;
        this.ΔⵠΔⵠⲆ = $u;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ce, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ΔⵠΔΔ = [];
        for (var l = 0; l < 3; l++) {
          this.ΔⵠΔΔ.push({
            ΔΔⲆⲆ: yv,
            ᐃⵠⵠⵠ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔⵠΔΔ[0].x = this.x - 16.5;
        this.ΔⵠΔΔ[0].y = this.y - 15.5;
        this.ΔⵠΔΔ[0].angle = this.angle;
        this.ΔⵠΔΔ[1].x = this.x + 36;
        this.ΔⵠΔΔ[1].y = this.y + 17;
        this.ΔⵠΔΔ[1].angle = this.angle;
        this.ΔⵠΔΔ[2].x = this.x - 18.5;
        this.ΔⵠΔΔ[2].y = this.y + 39;
        this.ΔⵠΔΔ[2].angle = this.angle;
        break;
      case 3:
        this.ᐃⲆⲆΔᐃ = pv;
        this.ΔⵠΔⵠⲆ = Nu;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Xa,
          angle: 0
        };
        this.ΔⵠΔΔ = [];
        for (l = 0; l < 3; l++) {
          this.ΔⵠΔΔ.push({
            ΔΔⲆⲆ: Pu,
            ᐃⵠⵠⵠ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ΔⵠΔΔ[0].x = this.x - 16.5;
        this.ΔⵠΔΔ[0].y = this.y - 15.5;
        this.ΔⵠΔΔ[1].x = this.x - 5.5;
        this.ΔⵠΔΔ[1].y = this.y + 7.5;
        this.ΔⵠΔΔ[2].x = this.x + 18;
        this.ΔⵠΔΔ[2].y = this.y - 5;
        break;
      case 77:
        this.ΔΔⲆⲆ = Ou;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ΔΔⲆⲆ = wv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ΔΔⲆⲆ = av;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⲆⵠΔⵠⵠⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(hi, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠΔⲆⲆᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ΔⲆⲆⵠⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ΔΔⲆⲆ = xv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⲆⵠΔⵠⵠⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔⵠΔⲆⲆᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(Xa, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        this.ΔⲆⲆⵠⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(Cl, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ΔΔⲆⲆ = tv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ΔΔⲆⲆ = mv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⵠΔⵠΔᐃ = this.info & 15;
        this.ΔᐃΔⲆᐃΔⵠ = this.ⲆⲆⲆⵠⲆ & 1;
        this.ⵠᐃⲆΔⲆΔΔ = 0;
        this.x = this.info;
        this.y = this.ⲆⲆⲆⵠⲆ;
        this.ΔΔⲆⲆ = gv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ΔΔⲆⲆ = mv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(En, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ΔΔⲆⲆ = rv;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 34:
        this.ΔⵠΔⵠⲆ = Ku;
        this.ΔΔⲆⲆ = zv;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.up = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1.03, 0.98, 0.1, 0.1);
        this.ᐃΔⲆⲆΔ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ΔΔⲆⲆ = Hu;
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(Ao, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ΔΔⲆⲆ = kv;
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ΔΔⲆⲆ = uv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ⵠⲆΔⵠΔ = 0;
        this.Δⵠⵠᐃ = [];
        this.ᐃⵠⵠⵠᐃΔΔ = 0;
        this.ⵠⲆⲆΔⲆⵠᐃ = iv;
        this.ΔΔⲆⲆ = Mu;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ⲆⲆⲆⵠⲆ;
        this.scale = 1;
        this.ᐃᐃᐃΔ = 0;
        this.ΔΔⲆⲆ = Av;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(zh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(cr, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ⲆⲆⲆⵠⲆ;
        this.scale = 1;
        this.ᐃᐃᐃΔ = 0;
        this.ΔΔⲆⲆ = Fu;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ΔΔⲆⲆ = lv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(Xa, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ΔΔⲆⲆ = Qu;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(kq, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ΔΔⲆⲆ = dv;
        this.ᐃⵠⵠⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃᐃⲆ = new ⲆᐃΔ.ΔⲆⵠᐃ(Ah, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ΔⵠΔΔ = [];
        for (l = 0; l < 5; l++) {
          this.ΔⵠΔΔ.push({
            ΔΔⲆⲆ: Pu,
            ᐃⵠⵠⵠ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ΔⵠΔΔ[0].x = this.x - 20.5;
            this.ΔⵠΔΔ[0].y = this.y - 22.5;
            this.ΔⵠΔΔ[1].x = this.x - 35.5;
            this.ΔⵠΔΔ[1].y = this.y + 7.5;
            this.ΔⵠΔΔ[2].x = this.x + 7.5;
            this.ΔⵠΔΔ[2].y = this.y - 30;
            this.ΔⵠΔΔ[3].x = this.x + 22.5;
            this.ΔⵠΔΔ[3].y = this.y;
            this.ΔⵠΔΔ[4].x = this.x - 7.5;
            this.ΔⵠΔΔ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ΔⵠΔΔ[0].x = this.x - 30.5;
            this.ΔⵠΔΔ[0].y = this.y - 22.5;
            this.ΔⵠΔΔ[1].x = this.x - 15.5;
            this.ΔⵠΔΔ[1].y = this.y + 7.5;
            this.ΔⵠΔΔ[2].x = this.x + 15.5;
            this.ΔⵠΔΔ[2].y = this.y - 30;
            this.ΔⵠΔΔ[3].x = this.x + 12.5;
            this.ΔⵠΔΔ[3].y = this.y + 5;
            this.ΔⵠΔΔ[4].x = this.x - 40.5;
            this.ΔⵠΔΔ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ΔⵠΔΔ[0].x = this.x - 20.5;
            this.ΔⵠΔΔ[0].y = this.y - 20.5;
            this.ΔⵠΔΔ[1].x = this.x - 35.5;
            this.ΔⵠΔΔ[1].y = this.y + 15.5;
            this.ΔⵠΔΔ[2].x = this.x + 7.5;
            this.ΔⵠΔΔ[2].y = this.y - 17;
            this.ΔⵠΔΔ[3].x = this.x + 22.5;
            this.ΔⵠΔΔ[3].y = this.y + 5;
            this.ΔⵠΔΔ[4].x = this.x - 7.5;
            this.ΔⵠΔΔ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: hi,
          angle: 0
        };
        this.ΔΔⲆⲆ = sv;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ⲆΔΔⲆᐃΔΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(mk, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ΔΔⲆⲆ = Cu;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: En,
          angle: 0
        };
        this.ΔΔⲆⲆ = Iu;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ΔΔⲆⲆ = vv;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(hi, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: hi,
          angle: 0
        };
        this.ΔΔⲆⲆ = ov;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ce, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: ce,
          angle: 0
        };
        this.ΔΔⲆⲆ = Ju;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(Zh, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ΔΔⲆⲆ = cv;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(Zh, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ΔΔⲆⲆ = hv;
        this.rotate = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 25:
        this.ΔΔⲆⲆ = Su;
        this.rotate = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: kq,
          angle: 0
        };
        break;
      case 26:
        this.ΔΔⲆⲆ = fv;
        this.rotate = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 27:
        this.ΔΔⲆⲆ = ev;
        this.rotate = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 28:
        this.ΔΔⲆⲆ = Zu;
        this.rotate = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 32:
        this.ᐃⲆⲆΔᐃ = Ru;
        this.ΔⵠΔⵠⲆ = Wu;
        this.rotate = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ce, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 38:
        this.ΔΔⲆⲆ = Gp;
        this.ΔᐃⲆ = Math.floor(this.x / 100);
        this.ⵠⵠ = Math.floor(this.y / 100);
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Qr,
          angle: 0
        };
        this.opacity = 1;
        this.ⲆΔⲆⲆⵠ = Hp;
        break;
      case 42:
        this.ΔΔⲆⲆ = qp;
        this.ΔΔΔⵠΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(Qr, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ΔΔⲆⲆ = Yp;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 30:
        this.ΔΔⲆⲆ = Yp;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: En,
          angle: 0
        };
        this.ⲆΔⲆⲆⵠ = Hp;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ΔΔⲆⲆ = Yp;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⲆΔⲆⲆⵠ = Lp;
        break;
      case 41:
        this.ΔΔⲆⲆ = Np;
        this.opacity = 1;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(mk, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        var m = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > m) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / 2 - m;
        }
        break;
      case 79:
        this.ΔΔⲆⲆ = Rp;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 89:
        this.ΔΔⲆⲆ = Xp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 83:
        this.ΔΔⲆⲆ = Zp;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 84:
        this.ΔΔⲆⲆ = jp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 85:
        this.ΔΔⲆⲆ = Vp;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ⵠⵠᐃ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ΔΔⲆⲆ = Qp;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.lock = 0;
        this.ⵠⵠᐃ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ΔΔⲆⲆ = _p;
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⲆΔⲆⲆⵠ = Lp;
        break;
      case 18:
        this.ᐃⲆⲆΔᐃ = Vu;
        this.ΔΔⲆⲆ = nv;
        this.ΔⵠΔⵠⲆ = Uu;
        this.Δⵠⵠᐃ = new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 1, 1.23, 1.18, 0.02, 0.02);
        this.ΔΔΔⵠΔ = new ⲆᐃΔ.ΔⲆⵠᐃ(cj, 1, 1.23, 1.18, 0.04, 0.04);
        this.ᐃᐃⲆ = {
          ΔᐃᐃΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(lg, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⵠⵠᐃ = function (a) {
          this.action = a;
        };
    }
  }
  function Bf(a, b, c, d) {
    this.id = a;
    this.ⵠⵠⵠⵠⲆ = (a + 5) * 8;
    this.ΔᐃⲆⵠⵠ = Ln / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ᐃΔΔᐃ = Math.cos(d);
    this.alpha = 0;
  }
  function Ef() {
    this.ⵠⲆⲆΔΔ = "";
    this.Δⵠⵠⵠ = 0;
    this.ⵠΔⲆΔⵠ = 0;
    this.ΔⵠⲆⲆΔ = 0;
    this.ᐃⵠⵠⲆΔᐃᐃ = 0;
    this.Δⵠⵠᐃⵠ = 0;
    this.ᐃᐃΔⲆᐃ = 0;
    this.ⲆᐃᐃⵠΔ = 0;
    this.level = 0;
    this.label = null;
    this.ⲆᐃⵠⲆⲆⲆⲆ = null;
    this.ΔΔᐃΔΔᐃⲆ = null;
    this.ᐃᐃΔⵠᐃ = hh;
    this.ⵠᐃⲆΔⵠ = 0;
  }
  function Df(c) {
    function e(b, c, d, e, f) {
      for (var a = 0; f > a && j(b, c, d, e, 8) !== 1; a++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function j(c, d, e, f, i) {
      var j = d + Math.floor(f * kx.ⵠⲆⲆⲆᐃ.get());
      var a = e + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * f);
      var k = 10 + Math.floor((kx.ᐃΔⲆⲆᐃ - j - 20) * kx.ⵠⲆⲆⲆᐃ.get());
      var m = 10 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * (kx.ⲆⲆᐃⲆᐃ - a - 20));
      var h = k + j;
      var l = m + a;
      for (var g = 0; g < kx.ᐃΔⲆⲆ.length; g++) {
        var n = kx.ᐃΔⲆⲆ[g];
        if (ⲆᐃΔ.ⲆΔᐃⵠᐃΔΔ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      kx.ᐃΔⲆⲆ.push(new kx.ⲆⵠΔⲆⵠΔᐃ(c, k, m, j, a, 15));
      return 1;
    }
    function i(b, c, d) {
      var e = c;
      for (var f = d; kx.ⲆⲆᐃⲆᐃ > f; f++) {
        for (var g = c; kx.ᐃΔⲆⲆᐃ > g && (d === f && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (e > g) {
          break;
        }
      }
      kx.ᐃΔⲆⲆ.push(new kx.ⲆⵠΔⲆⵠΔᐃ(kx.ΔᐃᐃΔΔ, c, d, e - c + 1, f - d, 15));
    }
    function q(a, b) {
      for (var c = 0; c < b.length; c++) {
        r(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function k(b, f, j, k, n, o, a, p) {
      var q = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var l = Math.floor(p / 2);
      var g = Math.max(1, Math.floor(p / 2));
      for (var d = 0; d < j; d++) {
        for (var r = b - l; r < b + g; r++) {
          for (var s = f - q; s < f + h; s++) {
            if (w(r, s, "wtb", 0, 1) === 1) {
              o.push([r, s, 1]);
            }
          }
        }
        b += k;
        f += n;
      }
    }
    function a(a, b) {
      var e = kx.ᐃΔⲆⲆ[a];
      var f = Math.floor(e.y1 / 100);
      var i = Math.floor(e.x1 / 100);
      var j = Math.floor(e.ᐃⵠⲆ / 100);
      var n = i + (z = Math.floor(e.w / 100));
      var o = 2;
      var q = j;
      var r = f;
      for (var s = i + 10 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * (z - 20)), t = s - 4; s + 4 > t; t++) {
        w(f - 1, t, "wtb", 0, 1);
      }
      while (q > 0) {
        if (o !== 2) {
          if (q < 10) {
            for (A = 1; q > 0; A++) {
              k(r, s, 1, 1, 0, b, A, 1);
              q -= 1;
              r += 1;
            }
          } else if (o !== 1) {
            o = 1;
            var u = Math.floor(1 + kx.ⵠⲆⲆⲆᐃ.get() * 2);
            var x = 1 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 4);
            if (s < i + 16) {
              k(r, s, u, 0, 1, b, x, x);
              s += u;
            } else if (n - 16 < s) {
              k(r, s, u, 0, -1, b, x, x);
              s -= u;
            } else if (kx.ⵠⲆⲆⲆᐃ.get() > 0.5) {
              k(r, s, u, 0, 1, b, x, x);
              s += u;
            } else {
              k(r, s, u, 0, -1, b, x, x);
              s -= u;
            }
          } else {
            var y = Math.min(q, Math.floor(1 + kx.ⵠⲆⲆⲆᐃ.get() * 4));
            var z = 1 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 4);
            k(r, s, y, 1, 0, b, z, z);
            o = 0;
            q -= y;
            r += y;
          }
        } else {
          for (var A = 10; A > 1; A--) {
            k(r, s, 1, 1, 0, b, A, 1);
            q -= 1;
            r += 1;
          }
          o = 0;
        }
      }
      for (t = s - 1; t < s + 2; t++) {
        w(r, t, "wtb", 0, 1);
      }
    }
    function o(a) {
      var b = kx.ᐃΔⲆⲆ[a];
      w(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      w(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      w(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      w(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function n(a) {
      for (var b = 0; b < 3; b++) {
        m(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        m(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        m(a, "d", b, 1);
      }
      o(a);
    }
    function h(a, b) {
      (function (b, c) {
        var e = kx.ᐃΔⲆⲆ[c];
        for (var f = 0, i = 0; b > i && f < 10000; f++) {
          var j = e.y1 + kx.ⵠⲆⲆⲆᐃ.get() * e.ᐃⵠⲆ;
          var k = e.x1 + e.w * kx.ⵠⲆⲆⲆᐃ.get();
          var m = Math.floor(j / 100);
          var p = Math.floor(k / 100);
          if (kx.ΔΔΔⵠⲆ(c, p * 100 + 50, m * 100 + 50) >= 600) {
            for (var q = 1, t = m - 4; q === 1 && t <= m + 4; t++) {
              for (var u = p - 4; q === 1 && u <= p + 4; u++) {
                if (nh !== ix.ΔΔᐃⲆ[t][u]) {
                  q = 0;
                }
              }
            }
            if (q !== 0) {
              w(m, p, "la", i % 6, 0);
              i++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        m(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        m(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; c < 3; c++) {
        m(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        m(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      o(a);
    }
    function l(a, b) {
      for (var c = 0; c < 3; c++) {
        m(a, "s", c, Math.floor(b * 18));
      }
      for (c = 0; c < 3; c++) {
        m(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < 3; c++) {
        m(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = 0; c < 3; c++) {
        m(a, "g", c, Math.floor(b * 6));
      }
      o(a);
    }
    function w(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && kx.ⲆⲆᐃⲆᐃ > a && kx.ᐃΔⲆⲆᐃ > b) {
        ΔΔᐃⲆ = ix.ΔΔᐃⲆ;
        if (ΔΔᐃⲆ[a][b] === undefined) {
          ΔΔᐃⲆ[a][b] = {};
        }
        if (ΔΔᐃⲆ[a][b][c] !== undefined) {
          return 0;
        } else {
          ΔΔᐃⲆ[a][b][c] = [];
          ΔΔᐃⲆ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              Ab.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function b(a, b) {
      for (var c = 0; c < 3; c++) {
        m(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; c < 3; c++) {
        m(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      m(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var e = kx.ᐃΔⲆⲆ[b];
        var f = Math.floor(e.y1 / 100);
        var i = Math.floor(e.x1 / 100);
        var j = Math.floor(e.ᐃⵠⲆ / 100);
        var a = Math.floor(e.w / 100);
        var k = f + Math.floor(j / 2);
        var m = i + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          w(n = Math.floor(k - 3 + kx.ⵠⲆⲆⲆᐃ.get() * 6), o = Math.floor(m - 3 + kx.ⵠⲆⲆⲆᐃ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var n;
          var o;
          if (w(n = Math.floor(k - 3 + kx.ⵠⲆⲆⲆᐃ.get() * 6), o = Math.floor(m - 3 + kx.ⵠⲆⲆⲆᐃ.get() * 6), "wtb", 0, 1) === 1) {
            c.push([n, o, 0]);
          }
        }
      })(a, d);
      q(a, d);
      d = [];
    }
    function d(b, c) {
      for (var d = 0; d < 6; d++) {
        m(b, "t", d, Math.floor(c * 80));
      }
      for (d = 0; d < 4; d++) {
        m(b, "b", d, Math.floor(c * 80));
      }
      for (d = 0; d < 3; d++) {
        m(b, "s", d, Math.floor(c * 50));
      }
      var e = [];
      for (d = 0; d < 6; d++) {
        a(b, e);
      }
      q(b, e);
      e = [];
      m(b, "p", 0, Math.floor(c * 28));
      for (d = 0; d < 3; d++) {
        m(b, "g", d, Math.floor(c * 7));
      }
      for (d = 0; d < 3; d++) {
        m(b, "d", d, Math.floor(c * 2));
      }
      for (d = 0; d < 3; d++) {
        m(b, "a", d, Math.floor(c * 1));
      }
      for (d = 0; d < 3; d++) {
        m(b, "m", d, Math.floor(c * 1));
      }
      m(b, "a", 0, Math.floor(c * 1));
      o(b);
    }
    function g(a, b) {
      return a >= 0 && b >= 0 && a < kx.ⲆⲆᐃⲆᐃ && b < kx.ᐃΔⲆⲆᐃ;
    }
    function m(b, c, e, f, i) {
      var j = kx.ᐃΔⲆⲆ[b];
      var a = Math.floor(j.x1 / 100);
      var k = Math.floor(j.y1 / 100);
      var n = Math.floor(j.w / 100);
      var q = Math.floor(j.ᐃⵠⲆ / 100);
      if (i !== bj) {
        i = 1 - i;
        a += Math.floor(n * i / 2);
        k += Math.floor(i * q / 2);
        n -= Math.floor(n * i);
        q -= Math.floor(q * i);
      }
      var t = ix.ΔΔᐃⲆ;
      for (var g = 0, x = 0; f > g && x <= 50000; x++) {
        var y = k + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * q);
        var z = a + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * n);
        if (kx.ΔΔΔⵠⲆ(b, z * 100 + 50, y * 100 + 50) >= 400 && ((A = t[y][z + 1]) === Ve || A[c] === undefined || Ve === A[c][e])) {
          var A = t[y][z - 1];
          if (nl === A || Pn === A[c] || A[c][e] === undefined) {
            if ((A = t[y + 1][z]) === undefined || A[c] === Wa || A[c][e] === Lg) {
              if ((A = t[y - 1][z]) === undefined || A[c] === undefined || A[c][e] === undefined) {
                A = t[y + 1][z - 1];
                if (Bk === A || Lg === A[c] || A[c][e] === Ig) {
                  if ((A = t[y - 1][z + 1]) === Pn || A[c] === undefined || A[c][e] === undefined) {
                    A = t[y + 1][z + 1];
                    if (Ej === A || A[c] === Ig || A[c][e] === Ur) {
                      if ((A = t[y - 1][z - 1]) === undefined || A[c] === undefined || A[c][e] === Bk) {
                        if (t[y][z] === undefined) {
                          w(y, z, c, e, 1);
                          g++;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function p(b, c) {
      for (var d = 0; d < 6; d++) {
        m(b, "t", d, Math.floor(c * 20));
      }
      for (d = 0; d < 4; d++) {
        m(b, "b", d, Math.floor(c * 20));
      }
      for (d = 0; d < 3; d++) {
        m(b, "s", d, Math.floor(c * 20));
      }
      var e = [];
      a(b, e);
      q(b, e);
      e = [];
      m(b, "p", 0, Math.floor(c * 24));
      for (d = 0; d < 3; d++) {
        m(b, "g", d, Math.floor(c * 5));
      }
      if (kx.mode === 2) {
        for (d = 0; d < 3; d++) {
          m(b, "d", d, Math.floor(c * 3));
        }
        for (d = 0; d < 3; d++) {
          m(b, "a", d, Math.floor(c * 2));
        }
      }
      o(b);
    }
    function r(a, b, c, d) {
      if (g(a, b) && (ΔΔᐃⲆ = ix.ΔΔᐃⲆ, Pn === ΔΔᐃⲆ[a][b] && (ΔΔᐃⲆ[a][b] = {}), ΔΔᐃⲆ[a][b].r === Ve)) {
        var e = 0;
        if (g(a - 1, b) && Ve !== ΔΔᐃⲆ[a - 1][b] && Fl !== ΔΔᐃⲆ[a - 1][b].wtb) {
          e += 2;
        }
        if (g(a, b - 1) && ΔΔᐃⲆ[a][b - 1] !== undefined && ΔΔᐃⲆ[a][b - 1].wtb !== Pn) {
          e += 8;
        }
        if (g(a, b + 1) && mr !== ΔΔᐃⲆ[a][b + 1] && ΔΔᐃⲆ[a][b + 1].wtb !== mr) {
          e += 16;
        }
        if (g(a + 1, b) && ΔΔᐃⲆ[a + 1][b] !== Ej && ΔΔᐃⲆ[a + 1][b].wtb !== Oh) {
          e += 64;
        }
        if (g(a - 1, b - 1) && (e & 10) === 10 && ΔΔᐃⲆ[a - 1][b - 1] !== Wa && ΔΔᐃⲆ[a - 1][b - 1].wtb !== undefined) {
          e += 1;
        }
        if (g(a - 1, b + 1) && (e & 18) === 18 && ΔΔᐃⲆ[a - 1][b + 1] !== undefined && ΔΔᐃⲆ[a - 1][b + 1].wtb !== undefined) {
          e += 4;
        }
        if (g(a + 1, b - 1) && (e & 72) == 72 && Ig !== ΔΔᐃⲆ[a + 1][b - 1] && ΔΔᐃⲆ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (g(a + 1, b + 1) && !(~e & 80) && ΔΔᐃⲆ[a + 1][b + 1] !== Ds && ΔΔᐃⲆ[a + 1][b + 1].wtb !== nl) {
          e += 128;
        }
        ΔΔᐃⲆ[a][b].r = {};
        ΔΔᐃⲆ[a][b].r.ⲆΔⲆⲆΔᐃᐃ = e;
        ΔΔᐃⲆ[a][b].r.ⲆⲆΔⲆᐃΔᐃ = d;
        ΔΔᐃⲆ[a][b].r.ᐃᐃⵠΔ = kx.ΔΔΔⵠⲆ(c, b * 100 + 50, a * 100 + 50) - 400;
        ΔΔᐃⲆ[a][b].r.x = b * 100 + 50;
        ΔΔᐃⲆ[a][b].r.y = a * 100 + 50;
      }
    }
    function f(a, b, c) {
      if (a[b]) {
        for (uk = 0; a[b].length > uk; uk++) {
          if (a[b][uk]) {
            for (ΔⵠⲆΔ = 0; ΔⵠⲆΔ < a[b][uk].length; ΔⵠⲆΔ++) {
              a[b][uk][ΔⵠⲆΔ].ᐃᐃⲆ = c;
              a[b][uk][ΔⵠⲆΔ].ⵠⵠᐃ = mk;
              a[b][uk][ΔⵠⲆΔ].time = 0;
              a[b][uk][ΔⵠⲆΔ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ⲆⵠΔΔⲆⲆⵠ = c;
    this.ⲆⵠΔΔⲆ = 0;
    this.ⵠⲆΔⲆΔⲆᐃ = 6;
    this.ⲆⲆⲆᐃ = [];
    this.ⵠⵠⵠ = [];
    this.ⵠⵠⵠ[0] = [];
    this.ⵠⵠⵠ[100] = [];
    this.ⵠⵠⵠ[80] = [];
    this.ⵠⵠⵠ[60] = [];
    this.ⵠⵠⵠ[67] = [];
    this.ⵠⵠⵠ[70] = [];
    this.ⵠⵠⵠ[77] = [];
    this.ⵠⵠⵠ[71] = [];
    this.ⵠⵠⵠ[72] = [];
    this.ⵠⵠⵠ[73] = [];
    this.ⵠⵠⵠ[74] = [];
    this.ⵠⵠⵠ[65] = [];
    this.ⵠⵠⵠ[66] = [];
    this.ⵠⵠⵠ[62] = [];
    this.ⵠⵠⵠ[88] = [];
    this.ⵠⵠⵠ[91] = [];
    this.ⵠⵠⵠ[90] = [];
    this.ⵠⵠⵠ[63] = [];
    this.ⵠⵠⵠ[78] = [];
    this.ⵠⵠⵠ[64] = [];
    this.ⵠⵠⵠ[69] = [];
    this.ⵠⵠⵠ[68] = [];
    this.ⵠⵠⵠ[79] = [];
    this.ⵠⵠⵠ[89] = [];
    this.ⵠⵠⵠ[83] = [];
    this.ⵠⵠⵠ[84] = [];
    this.ⵠⵠⵠ[85] = [];
    this.ⵠⵠⵠ[81] = [];
    this.ⵠⵠⵠ[82] = [];
    this.ⵠⵠⵠ[86] = [];
    this.ⵠⵠⵠ[34] = [];
    this.ⵠⵠⵠ[36] = [];
    this.ⵠⵠⵠ[61] = [];
    this.ⵠⵠⵠ[2] = [];
    this.ⵠⵠⵠ[1] = [];
    this.ⵠⵠⵠ[6] = [];
    this.ⵠⵠⵠ[3] = [];
    this.ⵠⵠⵠ[5] = [];
    this.ⵠⵠⵠ[12] = [];
    this.ⵠⵠⵠ[13] = [];
    this.ⵠⵠⵠ[14] = [];
    this.ⵠⵠⵠ[20] = [];
    this.ⵠⵠⵠ[52] = [];
    this.ⵠⵠⵠ[4] = [];
    this.ⵠⵠⵠ[7] = [];
    this.ⵠⵠⵠ[8] = [];
    this.ⵠⵠⵠ[9] = [];
    this.ⵠⵠⵠ[19] = [];
    this.ⵠⵠⵠ[50] = [];
    this.ⵠⵠⵠ[41] = [];
    this.ⵠⵠⵠ[10] = [];
    this.ⵠⵠⵠ[15] = [];
    this.ⵠⵠⵠ[16] = [];
    this.ⵠⵠⵠ[17] = [];
    this.ⵠⵠⵠ[21] = [];
    this.ⵠⵠⵠ[51] = [];
    this.ⵠⵠⵠ[45] = [];
    this.ⵠⵠⵠ[46] = [];
    this.ⵠⵠⵠ[47] = [];
    this.ⵠⵠⵠ[48] = [];
    this.ⵠⵠⵠ[49] = [];
    this.ⵠⵠⵠ[53] = [];
    this.ⵠⵠⵠ[18] = [];
    this.ⵠⵠⵠ[29] = [];
    this.ⵠⵠⵠ[56] = [];
    this.ⵠⵠⵠ[11] = [];
    this.ⵠⵠⵠ[22] = [];
    this.ⵠⵠⵠ[23] = [];
    this.ⵠⵠⵠ[30] = [];
    this.ⵠⵠⵠ[38] = [];
    this.ⵠⵠⵠ[33] = [];
    this.ⵠⵠⵠ[31] = [];
    this.ⵠⵠⵠ[55] = [];
    this.ⵠⵠⵠ[37] = [];
    this.ⵠⵠⵠ[43] = [];
    this.ⵠⵠⵠ[44] = [];
    this.ⵠⵠⵠ[54] = [];
    this.ⵠⵠⵠ[39] = [];
    this.ⵠⵠⵠ[40] = [];
    this.ⵠⵠⵠ[32] = [];
    this.ⵠⵠⵠ[24] = [];
    this.ⵠⵠⵠ[25] = [];
    this.ⵠⵠⵠ[26] = [];
    this.ⵠⵠⵠ[27] = [];
    this.ⵠⵠⵠ[28] = [];
    this.ⵠⵠⵠ[35] = [];
    this.ⵠⵠⵠ[87] = [];
    this.ⵠⵠⵠ[42] = [];
    this.ⵠΔⲆᐃⵠ = [];
    this.ᐃΔⲆⲆᐃ = 260;
    this.ⲆⲆᐃⲆᐃ = 260;
    this.ⲆⲆᐃⵠⲆⲆⲆ = 100;
    this.ⵠⲆⲆᐃΔⵠⵠ = 100;
    this.w = this.ⲆⲆᐃⵠⲆⲆⲆ * this.ᐃΔⲆⲆᐃ;
    this.ᐃⵠⲆ = this.ⲆⲆᐃⲆᐃ * this.ⵠⲆⲆᐃΔⵠⵠ;
    this.ⵠⲆⲆⲆᐃ = new ik.ⵠΔᐃⵠⵠⵠᐃ();
    this.ᐃΔⲆⲆ = [];
    this.ⲆⲆⲆⵠ = new ⲆᐃΔ.ΔⲆⵠᐃ(cr, 0, 1, 0, 1, 1);
    this.transition = _e;
    this.Δᐃⵠⵠᐃ = [];
    this.ᐃᐃⲆᐃΔ = 0;
    this.ᐃᐃΔΔⲆⵠⵠ = 1;
    this.ΔⲆⲆΔΔΔᐃ = 2;
    this.ᐃΔΔΔⵠΔⵠ = 3;
    this.ΔᐃᐃΔΔ = 4;
    this.ⵠⲆⵠⵠᐃΔⲆ = 10;
    this.Δᐃⵠⵠᐃ[this.ᐃᐃⲆᐃΔ] = {
      ⵠᐃⲆⲆⵠᐃΔ: 1,
      ΔⵠΔ: [19, 58, 43],
      ᐃᐃᐃ: [4, 43, 48],
      ⲆΔⵠᐃᐃ: ["#133a2b", "#042b30"]
    };
    this.Δᐃⵠⵠᐃ[this.ΔᐃᐃΔΔ] = {
      ⵠᐃⲆⲆⵠᐃΔ: 0,
      ΔⵠΔ: [11, 106, 132],
      ᐃᐃᐃ: [9, 55, 63],
      ⲆΔⵠᐃᐃ: ["#0B6A84", "#09373F"]
    };
    this.Δᐃⵠⵠᐃ[this.ᐃᐃΔΔⲆⵠⵠ] = {
      ⵠᐃⲆⲆⵠᐃΔ: 0,
      ΔⵠΔ: [235, 242, 240],
      ᐃᐃᐃ: [19, 97, 103],
      ⲆΔⵠᐃᐃ: ["#EBF2F0", "#136167"]
    };
    this.Δᐃⵠⵠᐃ[this.ΔⲆⲆΔΔΔᐃ] = {
      ⲆΔⵠᐃᐃ: ["#2D2017", "#031C1E"],
      ΔⵠΔ: [45, 32, 23],
      ⵠᐃⲆⲆⵠᐃΔ: 0,
      ᐃᐃᐃ: [3, 28, 30]
    };
    this.Δᐃⵠⵠᐃ[this.ᐃΔΔΔⵠΔⵠ] = {
      ⵠᐃⲆⲆⵠᐃΔ: 0,
      ΔⵠΔ: [74, 74, 74],
      ⲆΔⵠᐃᐃ: ["#4A4A4A", "#183D3C"],
      ᐃᐃᐃ: [24, 61, 60]
    };
    this.Δᐃⵠⵠᐃ[this.ⵠⲆⵠⵠᐃΔⲆ] = {
      ᐃᐃᐃ: [9, 61, 56],
      ΔⵠΔ: [235, 216, 166],
      ⲆΔⵠᐃᐃ: ["#EBD8A6", "#093D38"],
      ⵠᐃⲆⲆⵠᐃΔ: 0
    };
    this.ⲆⵠΔⲆⵠΔᐃ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ᐃⵠⲆ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ᐃᐃⵠ = b;
      this.ⲆⵠΔ = g === undefined ? 15 : g;
    };
    this.ΔⵠⵠᐃⲆ = -1000000;
    this.ⵠⵠⵠⵠⵠ = this.ΔⵠⵠᐃⲆ;
    this.ΔΔⵠᐃⵠ = this.ΔⵠⵠᐃⲆ;
    this.ⵠᐃⵠᐃⵠ = this.ΔⵠⵠᐃⲆ;
    this.ⵠᐃⵠᐃΔᐃⲆ = this.ΔⵠⵠᐃⲆ;
    this.ᐃΔΔⲆΔᐃΔ = this.ΔⵠⵠᐃⲆ;
    this.ⲆᐃΔᐃⲆ = this.ΔⵠⵠᐃⲆ;
    this.ⵠΔⵠΔⲆⲆΔᐃⲆ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ⵠⵠⵠⵠⵠ = kx.ΔⵠⵠᐃⲆ;
      b.ΔΔⵠᐃⵠ = kx.ΔⵠⵠᐃⲆ;
      b.ⵠᐃⵠᐃⵠ = kx.ΔⵠⵠᐃⲆ;
      b.ⵠᐃⵠᐃΔᐃⲆ = kx.ΔⵠⵠᐃⲆ;
      b.ⲆᐃΔᐃⲆ = kx.ΔⵠⵠᐃⲆ;
      b.ᐃᐃΔΔΔⵠⲆ = kx.ΔⵠⵠᐃⲆ;
      for (var g = 0; kx.ᐃΔⲆⲆ[g].ᐃᐃⵠ !== kx.ΔᐃᐃΔΔ; g++) {
        if (kx.ᐃΔⲆⲆ[g].ᐃᐃⵠ === kx.ᐃᐃⲆᐃΔ) {
          var h = kx.ΔΔΔⵠⲆ(g, c, d);
          b.ⵠᐃⵠᐃΔᐃⲆ = Math.max(b.ⵠᐃⵠᐃΔᐃⲆ, h);
          if (h > 0 && kx.ᐃⵠᐃⵠⵠⲆⲆⲆᐃ(g, c, d) === 1) {
            b.ᐃᐃΔΔΔⵠⲆ = 1;
          }
        } else if (kx.ᐃᐃΔΔⲆⵠⵠ === kx.ᐃΔⲆⲆ[g].ᐃᐃⵠ) {
          b.ⵠⵠⵠⵠⵠ = Math.max(b.ⵠⵠⵠⵠⵠ, kx.ΔΔΔⵠⲆ(g, c, d));
        } else if (kx.ⵠⲆⵠⵠᐃΔⲆ === kx.ᐃΔⲆⲆ[g].ᐃᐃⵠ) {
          b.ΔΔⵠᐃⵠ = Math.max(b.ΔΔⵠᐃⵠ, kx.ΔΔΔⵠⲆ(g, c, d));
        } else if (kx.ΔⲆⲆΔΔΔᐃ === kx.ᐃΔⲆⲆ[g].ᐃᐃⵠ) {
          b.ⵠᐃⵠᐃⵠ = Math.max(b.ⵠᐃⵠᐃⵠ, kx.ΔΔΔⵠⲆ(g, c, d));
        } else if (kx.ᐃΔⲆⲆ[g].ᐃᐃⵠ === kx.ᐃΔΔΔⵠΔⵠ) {
          b.ⲆᐃΔᐃⲆ = Math.max(b.ⲆᐃΔᐃⲆ, kx.ΔΔΔⵠⲆ(g, c, d));
        }
      }
      if (ix.ΔΔᐃⲆ[e][f].iblk) {
        b.ᐃᐃΔΔΔⵠⲆ = 1;
      }
      if (kx.ⲆΔⵠΔⵠⵠᐃΔⲆ(f, e)) {
        b.ᐃΔΔⲆΔᐃΔ = b.ΔⵠⵠᐃⲆ;
      } else if (ix.ΔΔᐃⲆ[e][f].wtb || b.ⵠⵠⵠⵠⵠ < 0 && b.ⵠᐃⵠᐃⵠ < 0 && b.ⵠᐃⵠᐃΔᐃⲆ < 0 && b.ᐃᐃΔΔΔⵠⲆ < 0 && b.ⲆᐃΔᐃⲆ < 0 && b.ΔΔⵠᐃⵠ < 0) {
        b.ᐃΔΔⲆΔᐃΔ = 1;
      } else {
        b.ᐃΔΔⲆΔᐃΔ = b.ΔⵠⵠᐃⲆ;
      }
    };
    this.ⵠⲆΔΔⵠⲆⲆⵠΔ = function (a, b) {
      kx.ⵠⵠⵠⵠⵠ = kx.ΔⵠⵠᐃⲆ;
      kx.ΔΔⵠᐃⵠ = kx.ΔⵠⵠᐃⲆ;
      kx.ⵠᐃⵠᐃⵠ = kx.ΔⵠⵠᐃⲆ;
      kx.ⲆᐃΔᐃⲆ = kx.ΔⵠⵠᐃⲆ;
      kx.ⵠᐃⵠᐃΔᐃⲆ = kx.ΔⵠⵠᐃⲆ;
      for (var c = 0; kx.ΔᐃᐃΔΔ !== kx.ᐃΔⲆⲆ[c].ᐃᐃⵠ; c++) {
        if (kx.ᐃΔⲆⲆ[c].ᐃᐃⵠ === kx.ᐃᐃⲆᐃΔ) {
          kx.ⵠᐃⵠᐃΔᐃⲆ = Math.max(kx.ⵠᐃⵠᐃΔᐃⲆ, kx.ΔΔΔⵠⲆ(c, a, b));
        } else if (kx.ᐃΔⲆⲆ[c].ᐃᐃⵠ === kx.ᐃᐃΔΔⲆⵠⵠ) {
          kx.ⵠⵠⵠⵠⵠ = Math.max(kx.ⵠⵠⵠⵠⵠ, kx.ΔΔΔⵠⲆ(c, a, b));
        } else if (kx.ⵠⲆⵠⵠᐃΔⲆ === kx.ᐃΔⲆⲆ[c].ᐃᐃⵠ) {
          kx.ΔΔⵠᐃⵠ = Math.max(kx.ΔΔⵠᐃⵠ, kx.ΔΔΔⵠⲆ(c, a, b));
        } else if (kx.ᐃΔⲆⲆ[c].ᐃᐃⵠ === kx.ΔⲆⲆΔΔΔᐃ) {
          kx.ⵠᐃⵠᐃⵠ = Math.max(kx.ⵠᐃⵠᐃⵠ, kx.ΔΔΔⵠⲆ(c, a, b));
        } else if (kx.ᐃΔⲆⲆ[c].ᐃᐃⵠ === kx.ᐃΔΔΔⵠΔⵠ) {
          kx.ⲆᐃΔᐃⲆ = Math.max(kx.ⲆᐃΔᐃⲆ, kx.ΔΔΔⵠⲆ(c, a, b));
        }
      }
      if (kx.ⵠⵠⵠⵠⵠ < 0 && kx.ⲆᐃΔᐃⲆ < 0 && kx.ⵠᐃⵠᐃΔᐃⲆ < 0 && kx.ⲆᐃΔᐃⲆ < 0 && kx.ΔΔⵠᐃⵠ < 0) {
        kx.ᐃΔΔⲆΔᐃΔ = 1;
      } else {
        kx.ᐃΔΔⲆΔᐃΔ = kx.ΔⵠⵠᐃⲆ;
      }
    };
    this.ᐃⵠᐃⵠⵠⲆⲆⲆᐃ = function (b, c, d) {
      var e = kx.ᐃΔⲆⲆ[b];
      var f = 0;
      ⵠⲆΔⵠ = e.x1 + 30 + ((e.ⲆⵠΔ & 4) === 0 ? 150 : 0);
      var g = c - ⵠⲆΔⵠ;
      if ((e.ⲆⵠΔ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆᐃΔⵠ = e.y1 + 250 + (e.ⲆⵠΔ & 1 ? 0 : 150);
      g = d - ⲆᐃΔⵠ;
      if ((e.ⲆⵠΔ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⵠᐃⲆΔ = e.x2 + 80 + (e.ⲆⵠΔ & 8 ? 0 : -200);
      g = ⵠᐃⲆΔ - c;
      if ((e.ⲆⵠΔ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆⲆⵠⵠ = e.y2 - 200 + (e.ⲆⵠΔ & 2 ? 0 : -200);
      g = ⲆⲆⵠⵠ - d;
      if ((e.ⲆⵠΔ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (ⵠⲆΔⵠ <= c && ⵠᐃⲆΔ >= c && d >= ⲆᐃΔⵠ && d <= ⲆⲆⵠⵠ) {
        return f;
      } else {
        return 0;
      }
    };
    this.ΔΔΔⵠⲆ = function (a, b, c) {
      var d = kx.ᐃΔⲆⲆ[a];
      ⵠⲆΔⵠ = d.x1 + 30;
      ⲆᐃΔⵠ = d.y1 + 250;
      ⵠᐃⲆΔ = d.x2 + 80;
      ⲆⲆⵠⵠ = d.y2 - 200;
      if (b >= ⵠⲆΔⵠ && b <= ⵠᐃⲆΔ && ⲆᐃΔⵠ <= c && c <= ⲆⲆⵠⵠ) {
        return Math.min(b - ⵠⲆΔⵠ, ⵠᐃⲆΔ - b, c - ⲆᐃΔⵠ, ⲆⲆⵠⵠ - c);
      }
      var e = -1000000;
      if (b - ⵠⲆΔⵠ < 0) {
        e = Math.max(e, b - ⵠⲆΔⵠ);
      } else if (ⵠᐃⲆΔ - b < 0) {
        e = Math.max(e, ⵠᐃⲆΔ - b);
      }
      ⵠⵠᐃᐃᐃⵠⲆ = -1000000;
      if (c < ⲆᐃΔⵠ || ⲆⲆⵠⵠ < c) {
        if (c - ⲆᐃΔⵠ < 0) {
          ⵠⵠᐃᐃᐃⵠⲆ = Math.max(ⵠⵠᐃᐃᐃⵠⲆ, c - ⲆᐃΔⵠ);
        } else {
          ⵠⵠᐃᐃᐃⵠⲆ = Math.max(ⵠⵠᐃᐃᐃⵠⲆ, ⲆⲆⵠⵠ - c);
        }
        e = e !== -1000000 && ⵠⵠᐃᐃᐃⵠⲆ !== -1000000 ? Math.min(e, ⵠⵠᐃᐃᐃⵠⲆ) : ⵠⵠᐃᐃᐃⵠⲆ;
      }
      return e;
    };
    this.ⵠΔⵠᐃⲆᐃᐃ = function (b, c, d) {
      var e = d;
      var f = c;
      w(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          w(e - h, f - g, "iblk", 0);
          w(e + h, f - g, "iblk", 0);
          w(e + h, f + g, "iblk", 0);
          w(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          w(e - g, f - 4, "iblk", 0);
          w(e + g, f - 4, "iblk", 0);
          w(e - g, f + 4, "iblk", 0);
          w(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          w(e - 3, f + g, "iblk", 0);
          w(e + 3, f + g, "iblk", 0);
          w(e - 3, f - g, "iblk", 0);
          w(e + 3, f - g, "iblk", 0);
        }
        w(e - 2, f - 4, "iblk", 0);
        w(e - 3, f - 3, "iblk", 0);
        w(e + 2, f + 4, "iblk", 0);
        w(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          w(e - g, f - 4, "iblk", 0);
          w(e + g, f - 4, "iblk", 0);
          w(e - g, f + 4, "iblk", 0);
          w(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          w(e - 3, f + g, "iblk", 0);
          w(e + 3, f + g, "iblk", 0);
          w(e - 3, f - g, "iblk", 0);
          w(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          w(e - g, f - 4, "iblk", 0);
          w(e + g, f - 4, "iblk", 0);
          w(e - g, f + 4, "iblk", 0);
          w(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          w(e - 3, f + g, "iblk", 0);
          w(e + 3, f + g, "iblk", 0);
          w(e - 3, f - g, "iblk", 0);
          w(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ⲆΔΔᐃΔΔⵠΔᐃ = function (b) {
      for (var c = 0; kx.ᐃΔⲆⲆ.length > c && b > 0; c++) {
        var d = kx.ᐃΔⲆⲆ[c];
        if (kx.ΔᐃᐃΔΔ === d.ᐃᐃⵠ && d.w > 1800 && d.ᐃⵠⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ᐃⵠⲆ / 2) / 100);
          kx.ⵠΔⵠᐃⲆᐃᐃ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 4);
            var k = f - 3 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 6);
            if (ix.ΔΔᐃⲆ[j][k].s === undefined) {
              w(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 4);
            k = f - 3 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 6);
            if (mr === ix.ΔΔᐃⲆ[j][k].plm) {
              w(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 4);
          k = f - 3 + Math.floor(kx.ⵠⲆⲆⲆᐃ.get() * 6);
          if (ix.ΔΔᐃⲆ[j][k].plm === bj && ix.ΔΔᐃⲆ[j][k].s === undefined) {
            w(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ⲆᐃⲆⵠⲆᐃⲆⲆᐃ = function (g) {
      kx.ⵠⲆⲆⲆᐃ.ΔⵠΔΔⵠ(g);
      var j = 0;
      while (1) {
        if (++j > 10000) {
          return;
        }
        kx.ᐃΔⲆⲆ = [];
        if (kx.ⲆⵠΔΔⲆ === 0 && (kx.mode === 3 || kx.mode === 7 || kx.mode === 0)) {
          kx.ⲆⵠΔΔⲆ = qr;
        }
        if (kx.mode === 2) {
          kx.ᐃΔⲆⲆ.push(new kx.ⲆⵠΔⲆⵠΔᐃ(kx.ᐃᐃⲆᐃΔ, 2, 2, 80, 80, 15));
        } else if (kx.mode === 4) {
          kx.ᐃΔⲆⲆ.push(new kx.ⲆⵠΔⲆⵠΔᐃ(kx.ᐃᐃⲆᐃΔ, 2, 2, 150, 150, 15));
        } else if (kx.ⲆⵠΔΔⲆ !== 0 && kx.ⲆⵠΔΔⲆ.length > 0 && kx.ⲆⵠΔΔⲆ[0].length > 3) {
          for (var o = 0; o < kx.ⲆⵠΔΔⲆ.length; o++) {
            if ((G = kx.ⲆⵠΔΔⲆ[o])[0] !== 0) {
              break;
            }
            var u = wf.ᐃᐃⲆᐃΔ;
            switch (G[1]) {
              case "FOREST":
                u = kx.ᐃᐃⲆᐃΔ;
                break;
              case "WINTER":
                u = kx.ᐃᐃΔΔⲆⵠⵠ;
                break;
              case "DESERT":
                u = kx.ⵠⲆⵠⵠᐃΔⲆ;
                break;
              case "LAVA":
                u = kx.ΔⲆⲆΔΔΔᐃ;
                break;
              case "DRAGON":
                u = kx.ᐃΔΔΔⵠΔⵠ;
            }
            kx.ᐃΔⲆⲆ.push(new kx.ⲆⵠΔⲆⵠΔᐃ(u, G[2], G[3], G[4], G[5], G[6], G[7]));
          }
        } else if (kx.ⲆⵠΔΔⲆ !== 0) {
          for (o = 0; o < kx.ⲆⵠΔΔⲆ.length; o++) {
            var v = kx.ⲆⵠΔΔⲆ[o];
            u = wf.ᐃᐃⲆᐃΔ;
            switch (v[0]) {
              case "FOREST":
                u = kx.ᐃᐃⲆᐃΔ;
                break;
              case "WINTER":
                u = kx.ᐃᐃΔΔⲆⵠⵠ;
                break;
              case "DESERT":
                u = kx.ⵠⲆⵠⵠᐃΔⲆ;
                break;
              case "LAVA":
                u = kx.ΔⲆⲆΔΔΔᐃ;
                break;
              case "DRAGON":
                u = kx.ᐃΔΔΔⵠΔⵠ;
            }
            if (e(u, v[1], v[2], 0, (o + 1) * 10) === 0) {
              break;
            }
          }
          if (o !== kx.ⲆⵠΔΔⲆ.length) {
            continue;
          }
        }
        break;
      }
      ΔⲆᐃⵠΔΔⵠⵠΔ();
      var x = [];
      for (var c = 0; c < kx.ⲆⲆᐃⲆᐃ; c++) {
        x[c] = new Array(kx.ᐃΔⲆⲆᐃ);
        for (var A = 0; A < kx.ᐃΔⲆⲆᐃ; A++) {
          x[c][A] = 0;
        }
      }
      for (c = 0; c < kx.ᐃΔⲆⲆ.length; c++) {
        for (var B = (v = kx.ᐃΔⲆⲆ[c]).x2 / 100, C = v.y2 / 100, D = v.x1 / 100; D <= B; D++) {
          for (var E = v.y1 / 100; C >= E; E++) {
            x[E][D] = 1;
          }
        }
      }
      for (E = 0; kx.ⲆⲆᐃⲆᐃ > E; E++) {
        for (D = 0; D < kx.ᐃΔⲆⲆᐃ; D++) {
          if (x[E][D] === 0) {
            i(x, D, E);
          }
        }
      }
      ix = {
        w: kx.ᐃΔⲆⲆᐃ,
        ᐃⵠⲆ: kx.ⲆⲆᐃⲆᐃ,
        ΔΔᐃⲆ: []
      };
      for (c = 0; kx.ⲆⲆᐃⲆᐃ > c; c++) {
        ix.ΔΔᐃⲆ[c] = [];
      }
      if (kx.ⲆⵠΔΔⲆ !== 0 && kx.ⲆⵠΔΔⲆ.length > 0 && kx.ⲆⵠΔΔⲆ[0].length > 3) {
        for (o = 0; o < kx.ⲆⵠΔΔⲆ.length; o++) {
          if ((G = kx.ⲆⵠΔΔⲆ[o])[1] === "isl") {
            kx.ⵠΔⵠᐃⲆᐃᐃ(G[2], G[3], G[4]);
          }
        }
      } else {
        kx.ⲆΔΔᐃΔΔⵠΔᐃ(kx.ⵠⲆΔⲆΔⲆᐃ);
      }
      if (kx.ⲆⵠΔΔⲆ !== 0 && kx.ⲆⵠΔΔⲆ.length > 0 && kx.ⲆⵠΔΔⲆ[0].length > 3) {
        var F = [];
        for (o = 0; o < kx.ⲆⵠΔΔⲆ.length; o++) {
          var G;
          if ((G = kx.ⲆⵠΔΔⲆ[o])[0] === 1) {
            if (G[1] === "r") {
              w(G[3], G[2], "wtb", 0, 1);
              F.push([G[3], G[2], G[4]]);
            } else {
              w(G[4], G[3], G[1], G[2], G[5]);
            }
          }
        }
        q(0, F);
        F = [];
      } else {
        for (c = 0; c < kx.ᐃΔⲆⲆ.length; c++) {
          v = kx.ᐃΔⲆⲆ[c];
          if (kx.mode === 4) {
            if (v.ᐃᐃⵠ === kx.ᐃᐃⲆᐃΔ) {
              d(c, v.w / 10000);
            }
          } else {
            if (v.ᐃᐃⵠ === kx.ᐃᐃⲆᐃΔ) {
              p(c, v.w / 10000);
            }
            if (v.ᐃᐃⵠ === kx.ΔⲆⲆΔΔΔᐃ) {
              h(c, v.w / 10000);
            }
            if (v.ᐃᐃⵠ === kx.ᐃᐃΔΔⲆⵠⵠ) {
              l(c, v.w / 10000);
            }
            if (kx.ⵠⲆⵠⵠᐃΔⲆ === v.ᐃᐃⵠ) {
              b(c, v.w / 10000);
            }
            if (v.ᐃᐃⵠ === kx.ᐃΔΔΔⵠΔⵠ) {
              n(c);
            }
          }
        }
      }
      zt("isl", 1);
      zt("wtb", 20);
      zt("la", 1);
      zt("c", 1);
      zt("s", 1);
      zt("f", 1);
      zt("p", 1);
      zt("g", 1);
      zt("d", 1);
      zt("a", 1);
      zt("re", 1);
      zt("m", 1);
      Ab = [];
      kx.ⵠᐃⵠⵠᐃⵠΔΔᐃ(ix);
    };
    this.ⵠⵠΔⵠ = w;
    this.ⵠᐃⵠⵠᐃⵠΔΔᐃ = function (b) {
      for (var c = 0; this.ⲆⲆᐃⲆᐃ > c; c++) {
        for (var d = 0; d < this.ᐃΔⲆⲆᐃ; d++) {
          if (!b.ΔΔᐃⲆ[c]) {
            b.ΔΔᐃⲆ[c] = [];
          }
          if (b.ΔΔᐃⲆ[c][d]) {
            var e = b.ΔΔᐃⲆ[c][d];
            if (e.de && e.de.length > 0) {
              for (var g = 0; e.de.length > g; g++) {
                if (e.de[g] && e.de[g].length > 0) {
                  e.de = e.de[g][0];
                  if (g >= 41 && g <= 49) {
                    e.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔΔΔ = [];
                    for (var j = 0; j < h; j++) {
                      e.de.ΔΔΔ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⲆⵠⲆᐃ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (g >= 19 && g <= 26) {
                    e.de.scale = 3;
                    h = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔΔΔ = [];
                    for (j = 0; h > j; j++) {
                      e.de.ΔΔΔ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ⲆⵠⲆᐃ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ⲆⵠⲆᐃ = g;
                  } else {
                    e.de.angle = Math.PI * Math.random() * 2;
                    e.de.scale = 1;
                    e.de.ⲆⵠⲆᐃ = g;
                  }
                }
              }
            }
            f(e, "p", new ⲆᐃΔ.ΔⲆⵠᐃ(Zh, 1, 1, 0, 10, 10));
            f(e, "t", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "s", new ⲆᐃΔ.ΔⲆⵠᐃ(_e, 1, 1, 0, 10, 10));
            f(e, "g", new ⲆᐃΔ.ΔⲆⵠᐃ(hs, 1, 1, 0, 10, 10));
            f(e, "d", new ⲆᐃΔ.ΔⲆⵠᐃ(zh, 1, 1, 0, 10, 10));
            f(e, "b", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "f", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "sw", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "gw", new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 1, 1, 0, 10, 10));
            f(e, "dw", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "a", new ⲆᐃΔ.ΔⲆⵠᐃ(_e, 1, 1, 0, 10, 10));
            f(e, "cs", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "plm", new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 1, 1, 0, 10, 10));
            f(e, "re", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "c", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
            f(e, "m", new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 10, 10));
          } else {
            b.ΔΔᐃⲆ[c][d] = [];
          }
        }
      }
    };
    this.time = 0;
    this.ΔⲆᐃΔⵠ = {
      ⵠⲆᐃⵠⲆ: 0,
      translate: {
        x: 0,
        y: 0
      },
      now: 0,
      ΔⵠΔΔⵠ: 0
    };
    this.ΔⵠΔⵠⲆⲆⲆⵠΔ = function () {
      this.ⵠΔⲆᐃⵠ = [];
      this.ⵠⵠⵠ[0] = [];
      this.ⵠⵠⵠ[2] = [];
      this.ⵠⵠⵠ[1] = [];
      this.ⵠⵠⵠ[6] = [];
      this.ⵠⵠⵠ[3] = [];
      this.ⵠⵠⵠ[5] = [];
      this.ⵠⵠⵠ[12] = [];
      this.ⵠⵠⵠ[13] = [];
      this.ⵠⵠⵠ[14] = [];
      this.ⵠⵠⵠ[20] = [];
      this.ⵠⵠⵠ[52] = [];
      this.ⵠⵠⵠ[30] = [];
      this.ⵠⵠⵠ[56] = [];
      this.ⵠⵠⵠ[38] = [];
      this.ⵠⵠⵠ[33] = [];
      this.ⵠⵠⵠ[31] = [];
      this.ⵠⵠⵠ[55] = [];
      this.ⵠⵠⵠ[37] = [];
      this.ⵠⵠⵠ[43] = [];
      this.ⵠⵠⵠ[44] = [];
      this.ⵠⵠⵠ[54] = [];
      this.ⵠⵠⵠ[39] = [];
      this.ⵠⵠⵠ[40] = [];
      this.ⵠⵠⵠ[32] = [];
      this.ⵠⵠⵠ[24] = [];
      this.ⵠⵠⵠ[25] = [];
      this.ⵠⵠⵠ[26] = [];
      this.ⵠⵠⵠ[27] = [];
      this.ⵠⵠⵠ[28] = [];
      this.ⵠⵠⵠ[35] = [];
      this.ⵠⵠⵠ[4] = [];
      this.ⵠⵠⵠ[7] = [];
      this.ⵠⵠⵠ[8] = [];
      this.ⵠⵠⵠ[9] = [];
      this.ⵠⵠⵠ[19] = [];
      this.ⵠⵠⵠ[50] = [];
      this.ⵠⵠⵠ[41] = [];
      this.ⵠⵠⵠ[10] = [];
      this.ⵠⵠⵠ[15] = [];
      this.ⵠⵠⵠ[16] = [];
      this.ⵠⵠⵠ[17] = [];
      this.ⵠⵠⵠ[21] = [];
      this.ⵠⵠⵠ[51] = [];
      this.ⵠⵠⵠ[45] = [];
      this.ⵠⵠⵠ[46] = [];
      this.ⵠⵠⵠ[47] = [];
      this.ⵠⵠⵠ[48] = [];
      this.ⵠⵠⵠ[49] = [];
      this.ⵠⵠⵠ[53] = [];
      this.ⵠⵠⵠ[18] = [];
      this.ⵠⵠⵠ[29] = [];
      this.ⵠⵠⵠ[56] = [];
      this.ⵠⵠⵠ[11] = [];
      this.ⵠⵠⵠ[22] = [];
      this.ⵠⵠⵠ[23] = [];
      this.ⵠⵠⵠ[100] = [];
      this.ⵠⵠⵠ[80] = [];
      this.ⵠⵠⵠ[60] = [];
      this.ⵠⵠⵠ[67] = [];
      this.ⵠⵠⵠ[70] = [];
      this.ⵠⵠⵠ[77] = [];
      this.ⵠⵠⵠ[71] = [];
      this.ⵠⵠⵠ[72] = [];
      this.ⵠⵠⵠ[73] = [];
      this.ⵠⵠⵠ[74] = [];
      this.ⵠⵠⵠ[65] = [];
      this.ⵠⵠⵠ[66] = [];
      this.ⵠⵠⵠ[62] = [];
      this.ⵠⵠⵠ[88] = [];
      this.ⵠⵠⵠ[91] = [];
      this.ⵠⵠⵠ[90] = [];
      this.ⵠⵠⵠ[63] = [];
      this.ⵠⵠⵠ[78] = [];
      this.ⵠⵠⵠ[75] = [];
      this.ⵠⵠⵠ[76] = [];
      this.ⵠⵠⵠ[64] = [];
      this.ⵠⵠⵠ[69] = [];
      this.ⵠⵠⵠ[68] = [];
      this.ⵠⵠⵠ[79] = [];
      this.ⵠⵠⵠ[89] = [];
      this.ⵠⵠⵠ[83] = [];
      this.ⵠⵠⵠ[84] = [];
      this.ⵠⵠⵠ[85] = [];
      this.ⵠⵠⵠ[81] = [];
      this.ⵠⵠⵠ[82] = [];
      this.ⵠⵠⵠ[86] = [];
      this.ⵠⵠⵠ[34] = [];
      this.ⵠⵠⵠ[36] = [];
      this.ⵠⵠⵠ[61] = [];
      this.ⵠⵠⵠ[87] = [];
      this.ⵠⵠⵠ[42] = [];
    };
    this.ⲆⲆᐃΔᐃΔᐃΔΔ = function (a) {
      if (this.ⵠΔⲆᐃⵠ[a]) {
        ΔᐃⲆⵠ = this.ⵠΔⲆᐃⵠ[a].type;
        this.ⵠΔⲆᐃⵠ[a] = null;
        for (var b = this.ⵠⵠⵠ[ΔᐃⲆⵠ], c = 0; c < b.length; c++) {
          if (b[c].ΔᐃⲆⲆ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠⲆⲆΔΔΔᐃⵠⲆ = function (a, b) {
      for (var c = 0; c < this.ⵠⵠⵠ[56].length; c++) {
        var d = this.ⵠⵠⵠ[56][c];
        if (Math.floor(d.x / 100) === b && a === Math.floor(d.y / 100)) {
          return 1;
        }
      }
      return 0;
    };
    this.ⲆΔⵠΔⵠⵠᐃΔⲆ = function (a, b) {
      for (var c = 0; c < this.ⵠⵠⵠ[30].length; c++) {
        var d = this.ⵠⵠⵠ[30][c];
        if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
          return ol;
        }
      }
      return false;
    };
    this.ᐃᐃᐃΔᐃ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ΔⲆΔⲆ = j[e];
        if (ΔⲆΔⲆ.angle != ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ) {
          var q = Math.PI * 2;
          ΔⲆΔⲆ.angle = (ΔⲆΔⲆ.angle + q) % q;
          ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ = (ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ + q) % q;
          if (ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ != ΔⲆΔⲆ.angle) {
            var B = ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ - ΔⲆΔⲆ.angle;
            var D = Math.abs(B);
            if (D > Math.PI) {
              D = Math.PI * 2 - D;
            }
            var E = D / Math.PI * 3 * 10 * rx;
            if (Math.PI < B) {
              ΔⲆΔⲆ.angle -= E;
            } else if (B < -Math.PI) {
              ΔⲆΔⲆ.angle += E;
            } else if (B < 0) {
              ΔⲆΔⲆ.angle -= E;
            } else {
              ΔⲆΔⲆ.angle += E;
            }
            ΔⲆΔⲆ.angle = (ΔⲆΔⲆ.angle + q) % q;
            if (E > Math.abs(ΔⲆΔⲆ.angle - ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ)) {
              ΔⲆΔⲆ.angle = ΔⲆΔⲆ.ⵠⵠᐃⵠΔΔⵠ;
            }
          }
        }
        Math.floor(ΔⲆΔⲆ.r.y / 100);
        Math.floor(ΔⲆΔⲆ.r.x / 100);
        if (ΔⲆΔⲆ.x != ΔⲆΔⲆ.r.x || ΔⲆΔⲆ.r.y != ΔⲆΔⲆ.y) {
          if (ΔⲆΔⲆ.action & 64) {
            ΔⲆΔⲆ.action -= 64;
          }
          ΔⲆΔⲆ.action |= 32;
          var F = ⲆᐃΔ.ᐃⲆⵠΔᐃᐃᐃ(ΔⲆΔⲆ, ΔⲆΔⲆ.r) + Math.PI;
          var G = rx * ΔⲆΔⲆ.ⵠⵠⵠⵠⲆ;
          var H = ⲆᐃΔ.ᐃⲆⲆΔΔᐃᐃ(G, F);
          if (ⲆᐃΔ.ᐃᐃᐃΔΔᐃⵠ(H) < ⲆᐃΔ.ᐃᐃᐃΔΔᐃⵠ(ⲆᐃΔ.ΔⵠⲆᐃᐃⲆΔ(ΔⲆΔⲆ, ΔⲆΔⲆ.r))) {
            ⲆᐃΔ.ᐃⲆΔᐃⲆⲆᐃ(ΔⲆΔⲆ, H);
          } else {
            if (ΔⲆΔⲆ.action & 32) {
              ΔⲆΔⲆ.action -= 32;
            }
            ΔⲆΔⲆ.action |= 64;
            ⲆᐃΔ.ᐃᐃΔⲆΔᐃᐃ(ΔⲆΔⲆ.r, ΔⲆΔⲆ);
          }
        }
        if (ΔⲆΔⲆ.ⵠᐃᐃΔⲆ) {
          var I = ΔⲆΔⲆ.bubbles;
          if ((M = I.length) === 0 || M < 20 && I[M - 1].ΔᐃⲆⵠⵠ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * ⵠΔ[540][0].length),
              x: Math.floor(ΔⲆΔⲆ.x + Math.random() * 80 - 40),
              y: Math.floor(ΔⲆΔⲆ.y + Math.random() * 80 - 40),
              ΔᐃⲆⵠⵠ: 1
            });
          }
          for (var J = 0; M > J; J++) {
            I[J].ΔᐃⲆⵠⵠ = Math.max(0, I[J].ΔᐃⲆⵠⵠ - rx);
          }
          for (J = 0; M > J; J++) {
            if (I[J].ΔᐃⲆⵠⵠ === 0) {
              I.splice(J, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ΔⲆΔⲆ.ᐃⲆⲆΔ && hx.ΔⲆᐃΔᐃ) {
          var L = ΔⲆΔⲆ.ⲆΔⲆⵠⵠ;
          var M = L.length;
          if (ΔⲆΔⲆ.ᐃΔΔⲆΔᐃΔ > 0 && ΔⲆΔⲆ.ⲆΔⲆⲆᐃ !== 227 && ΔⲆΔⲆ.ⲆΔⲆⲆᐃ !== 228 && ΔⲆΔⲆ.ⲆΔⲆⲆᐃ !== 230 && ΔⲆΔⲆ.ⲆΔⲆⲆᐃ !== 229 && ΔⲆΔⲆ.ⲆΔⲆⲆᐃ !== 91 && !ΔⲆΔⲆ.ⵠᐃᐃΔⲆ && (K = 1, M === 0 || ⲆᐃΔ.ᐃᐃⵠΔ(L[M - 1], ΔⲆΔⲆ) > 75)) {
            var N = -ΔⲆΔⲆ.angle;
            var O = eo * (Math.cos(N) * 45);
            var Q = Math.sin(N) * 45 * eo;
            L.push({
              x: ΔⲆΔⲆ.x + O,
              y: ΔⲆΔⲆ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ΔⲆΔⲆ.x - O,
              y: ΔⲆΔⲆ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ΔⲆΔⲆ.x,
              y: ΔⲆΔⲆ.y,
              r: 24,
              alpha: 1
            });
          }
          for (J = 0; M > J; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - rx / 2.2);
            L[J].r += rx * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(0, 1);
          }
          var R = ΔⲆΔⲆ.ᐃⵠⵠⵠⵠ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ΔⲆΔⲆ.ᐃᐃΔΔΔⵠⲆ));
          var V = Math.max(0, Math.sign(ΔⲆΔⲆ.ⵠⵠⵠⵠⵠ));
          Math.max(0, Math.sign(ΔⲆΔⲆ.ΔΔⵠᐃⵠ));
          var W = Math.max(0, Math.sign(ΔⲆΔⲆ.ⵠᐃⵠᐃⵠ));
          var X = Math.max(0, Math.sign(ΔⲆΔⲆ.ⲆᐃΔᐃⲆ));
          if (ΔⲆΔⲆ.ᐃᐃΔΔΔⵠⲆ > 0 || ΔⲆΔⲆ.ΔΔⵠᐃⵠ > 0) {
            S = 602;
          } else if (ΔⲆΔⲆ.ⲆᐃΔᐃⲆ > 0) {
            S = 680;
          } else if (ΔⲆΔⲆ.ⵠⵠⵠⵠⵠ > 0) {
            S = 475;
          } else if (ΔⲆΔⲆ.ⵠᐃⵠᐃⵠ > 0) {
            S = 476;
          }
          if (ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 225 && (U | V | W | X) === 1) {
            S = 228;
            var Y = ΔⲆΔⲆ.ⲆΔᐃᐃⲆ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = 50;
          } else if (ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 239 && (U | V | W | X) == 1) {
            S = 249;
            Y = ΔⲆΔⲆ.ⲆΔᐃᐃⲆ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = 50;
          } else if (ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 226 && (U | V | W | X) === 1) {
            S = 234;
            Y = ΔⲆΔⲆ.ⲆΔᐃᐃⲆ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = 45;
          } else {
            Y = ΔⲆΔⲆ.angle;
            Z = 15;
            _ = 11;
            aa = 50;
          }
          if (ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 227 || ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 228 || ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 91 || ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 229 || ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 230 || ΔⲆΔⲆ.ⵠᐃᐃΔⲆ) ;else if (ΔⲆΔⲆ.ⲆΔⲆⲆᐃ === 224) {
            if (M === 0 || ⲆᐃΔ.ᐃᐃⵠΔ(R[M - 1], ΔⲆΔⲆ) > 10) {
              R.push({
                x: ΔⲆΔⲆ.x,
                y: ΔⲆΔⲆ.y,
                angle: ΔⲆΔⲆ.ⲆΔᐃᐃⲆ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || ⲆᐃΔ.ᐃᐃⵠΔ(R[M - 1], ΔⲆΔⲆ) > aa)) {
            ΔⲆΔⲆ.ᐃΔᐃⵠᐃⵠⵠ++;
            if (Math.abs(ΔⲆΔⲆ.x - ΔⲆΔⲆ.r.x) > 1 && Math.abs(ΔⲆΔⲆ.y - ΔⲆΔⲆ.r.y) > 1) {
              if (ΔⲆΔⲆ.x < ΔⲆΔⲆ.r.x && ΔⲆΔⲆ.y > ΔⲆΔⲆ.r.y || ΔⲆΔⲆ.x > ΔⲆΔⲆ.r.x && ΔⲆΔⲆ.y < ΔⲆΔⲆ.r.y) {
                if (ΔⲆΔⲆ.ᐃΔᐃⵠᐃⵠⵠ % 2) {
                  O = eo * -_;
                  Q = -_ * eo;
                } else {
                  Q = eo * _;
                  O = _ * eo;
                }
              } else if (ΔⲆΔⲆ.ᐃΔᐃⵠᐃⵠⵠ % 2) {
                O = eo * _;
                Q = eo * -_;
              } else {
                Q = _ * eo;
                O = eo * -_;
              }
            } else if (ΔⲆΔⲆ.ᐃΔᐃⵠᐃⵠⵠ % 2) {
              O = eo * (Math.cos(Y) * Z);
              Q = eo * (Math.sin(Y) * Z);
            } else {
              O = -Math.cos(Y) * Z * eo;
              Q = eo * (-Math.sin(Y) * Z);
            }
            R.push({
              x: ΔⲆΔⲆ.x + O,
              y: ΔⲆΔⲆ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (J = 0; M > J; J++) {
            if (R[J].id === 226) {
              R[J].alpha = Math.max(0, R[J].alpha - rx * 1.5);
            } else {
              R[J].alpha = Math.max(0, R[J].alpha - rx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ⵠⵠᐃ = function () {
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[0]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[80]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[60]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[67]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[70]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[77]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[71]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[72]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[73]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[74]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[61]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[62]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[88]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[91]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[90]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[63]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[78]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[75]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[76]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[64]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[68]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[65]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[66]);
      this.ᐃᐃᐃΔᐃ(this.ⵠⵠⵠ[69]);
    };
    this.ᐃⵠⵠⵠ = [];
    this.ᐃⵠⵠⵠ[620] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ᐃⵠⵠⵠ[619] = new ⲆᐃΔ.ΔⲆⵠᐃ(cj, 1, 1.08, 1, 0.006, 0.006);
    this.ᐃⵠⵠⵠ[694] = new ⲆᐃΔ.ΔⲆⵠᐃ(Ah, 1, 1.02, 1, 0.008, 0.008);
    this.ᐃⵠⵠⵠ[695] = new ⲆᐃΔ.ΔⲆⵠᐃ(Cl, 1, 1.08, 1, 0.006, 0.006);
    this.ⲆⲆⵠΔⲆ = [];
    this.ⲆⲆⵠΔⲆ[0] = new ⲆᐃΔ.ΔⲆⵠᐃ(Xa, 0.1, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[1] = new ⲆᐃΔ.ΔⲆⵠᐃ(ra, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[2] = new ⲆᐃΔ.ΔⲆⵠᐃ(Ao, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[3] = new ⲆᐃΔ.ΔⲆⵠᐃ(vg, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[4] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[5] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[6] = new ⲆᐃΔ.ΔⲆⵠᐃ(Cl, 0.5, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[7] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.9, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[8] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[9] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[10] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[11] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[12] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[13] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆⲆⵠΔⲆ[14] = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function If() {
    Math.random();
    return "s";
  }
  function Sf() {
    Math.random();
    return "r";
  }
  function Qf() {
    Math.random();
    return "d";
  }
  function _f() {
    Math.random();
    return "i";
  }
  function Ff() {
    Math.random();
    return "n";
  }
  function Rf() {
    Math.random();
    return "g";
  }
  function jf() {
    this.ΔⵠΔΔⵠ = function () {};
    this.ⵠᐃⵠⲆᐃ = {
      ΔⲆᐃΔ: 1,
      ᐃⵠᐃⵠΔ: 1,
      open: _e
    };
    this.ΔⲆΔⲆΔ = {
      ΔⲆᐃΔ: 1,
      ᐃⵠᐃⵠΔ: -1,
      open: false
    };
    this.ⵠⵠΔᐃ = {
      ᐃⵠΔΔⲆΔⲆ: 0,
      ᐃⲆΔⵠᐃ: 0,
      ΔⲆᐃΔ: 1,
      ᐃⵠᐃⵠΔ: -1,
      open: false
    };
    this.ⲆⲆᐃᐃ = {
      ᐃⵠᐃⵠΔ: -1,
      ΔⲆᐃΔ: 1,
      ⲆΔⲆⲆᐃᐃᐃ: 0,
      open: false,
      ⵠΔⵠⵠᐃΔⵠ: 0,
      ᐃᐃᐃⲆⵠⲆᐃ: 0,
      type: 0
    };
    this.ΔⲆⵠΔ = {
      open: false,
      ᐃⲆΔⵠᐃ: 0,
      ⲆΔⲆⲆᐃᐃᐃ: 0,
      ΔⲆⲆⲆⵠᐃⲆ: 0,
      ᐃⵠᐃⵠΔ: -1,
      ΔⲆᐃΔ: 1
    };
    this.sign = {
      open: hs,
      ᐃⵠᐃⵠΔ: -1
    };
    this.ⲆⲆⲆᐃⲆ = {
      ⵠΔᐃⵠ: 0,
      ΔⲆᐃΔ: 1,
      ᐃⵠᐃⵠΔ: -1,
      open: En
    };
    this.ⵠᐃᐃΔⲆ = {
      enabled: false,
      ⵠⲆⲆⲆΔ: -1,
      label: false,
      now: -1,
      ΔΔⲆⲆ: Iv
    };
    this.ⲆᐃⲆᐃ = {
      id: -1,
      ⵠΔᐃⵠ: 0,
      ΔⲆᐃΔ: 1,
      ᐃⵠᐃⵠΔ: -1,
      open: false,
      lock: false,
      locked: false,
      ⲆⵠᐃΔⲆⵠⲆ: false,
      ⵠⵠᐃⲆⵠⵠᐃ: zh
    };
    this.ᐃᐃΔⵠᐃ = true;
    this.reconnect = {
      rotate: 0,
      enabled: zh
    };
    this.key = ⲆᐃΔ.ΔΔⵠᐃⵠᐃΔ("key", Ya.location.href);
    var a = ⲆᐃΔ.ΔΔⵠᐃⵠᐃΔ("egg", Ya.location.href);
    if (a) {
      hx.Δⵠⵠⵠ = parseInt(a);
    }
    this.beta = Ya.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ⵠⵠᐃΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⵠⵠᐃΔ.get("starve_beta");
    }
    this.ΔᐃᐃⵠⲆ = ⵠⵠᐃΔ.get("starve_token") ? ⵠⵠᐃΔ.get("starve_token") : ⲆᐃΔ.ⵠⵠᐃᐃⲆⵠⵠ(14);
    Ya.baguette();
    var b = Ya.kot2;
    function c() {
      this.seed = 1;
      this.ⵠΔᐃⵠⵠΔᐃ = 2;
      this.ⵠᐃΔᐃⵠᐃᐃ = 3;
      this.ᐃⲆⵠᐃᐃⵠᐃⵠⵠ = 1;
      this.ᐃᐃⲆⲆⲆᐃⵠⵠⲆ = 2;
      this.ⵠⵠΔⲆᐃⵠᐃⲆⲆ = 3;
      this.ⵠⵠᐃᐃⵠΔΔ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔᐃᐃΔⵠⵠⲆ = function (a) {
        this.ⵠΔᐃⵠⵠΔᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ΔⲆΔᐃΔⲆⵠ = function (a) {
        this.ⵠᐃΔᐃⵠᐃᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔⵠⲆΔⵠⲆⵠᐃ = function (a) {
        this.ᐃⲆⵠᐃᐃⵠᐃⵠⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠᐃΔΔᐃⵠⵠᐃΔ = function (a) {
        this.ᐃᐃⲆⲆⲆᐃⵠⵠⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃᐃⵠⲆⵠᐃⵠΔⲆ = function (a) {
        this.ⵠⵠΔⲆᐃⵠᐃⲆⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔᐃⵠΔᐃⲆ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = f * m % ⲆⵠⲆⲆⵠⵠᐃ;
          var o = ⲆΔΔΔᐃⵠⵠ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && m < a) {
              var q = Math.random() > 0.5 ? rx * -10 : rx * 10;
              var r = e * p;
              this.ⲆΔΔᐃⲆⲆⵠ[n] = Math.max(-25, Math.min(25, this.ⲆΔΔᐃⲆⲆⵠ[n] + q));
              this.ΔⵠᐃᐃᐃᐃΔ[n] = Math.max(-8, Math.min(8, this.ΔⵠᐃᐃᐃᐃΔ[n] + q));
              if (r > 0) {
                Gn.beginPath();
                Gn.arc(m + lx.ⲆⲆⵠ.x + this.ΔⵠᐃᐃᐃᐃΔ[n], c + this.ⲆΔΔᐃⲆⲆⵠ[n] - 20, r, 0, Math.PI * 2);
                if (kx.transition) {
                  var t = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
                  Gn.fillStyle = gw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Gn.fillStyle = tr.ⲆᐃⲆⵠᐃᐃⵠ[kx.time];
                }
                Gn.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ⲆΔⵠⲆΔᐃᐃ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = f * m % ⲆⵠⲆⲆⵠⵠᐃ;
          var o = ⲆΔΔΔᐃⵠⵠ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (k < m && m < a) {
              var q = Math.random() > 0.5 ? rx * -10 : rx * 10;
              var r = e * p;
              this.ΔⵠⲆᐃⵠ[n] = Math.max(-25, Math.min(25, this.ΔⵠⲆᐃⵠ[n] + q));
              this.ⲆⵠⵠⵠΔ[n] = Math.max(-8, Math.min(8, this.ⲆⵠⵠⵠΔ[n] + q));
              if (r > 0) {
                Gn.beginPath();
                Gn.arc(c + this.ΔⵠⲆᐃⵠ[n] - 20, m + lx.ⲆⲆⵠ.y + this.ⲆⵠⵠⵠΔ[n], r, 0, Math.PI * 2);
                if (kx.transition) {
                  var t = kx.time ? 1 - kx.ⲆⲆⲆⵠ.ⲆⵠΔ : kx.ⲆⲆⲆⵠ.ⲆⵠΔ;
                  Gn.fillStyle = gw(83, 156, 160, 236, 247, 249, t);
                } else {
                  Gn.fillStyle = tr.ⲆᐃⲆⵠᐃᐃⵠ[kx.time];
                }
                Gn.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔᐃⵠΔΔⲆᐃⲆᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ΔⲆΔᐃΔⲆⵠ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ᐃΔᐃⵠΔᐃⲆ(d, h, this.ⵠᐃΔᐃⵠᐃᐃ, 18, 16, f, g);
        Gn.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⵠᐃᐃⵠΔΔ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ᐃΔᐃⵠΔᐃⲆ(b, h, this.seed, 12, 10, f, g);
        Gn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ΔᐃᐃΔⵠⵠⲆ();
          }
          Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
          this.ᐃΔᐃⵠΔᐃⲆ(c, h, this.ⵠΔᐃⵠⵠΔᐃ, 6, 6, f, g);
          Gn.globalAlpha = 1;
        }
      };
      this.ⲆⵠⵠⵠⵠⵠⲆΔΔ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ΔⲆΔᐃΔⲆⵠ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ᐃΔᐃⵠΔᐃⲆ(d, h, this.ⵠᐃΔᐃⵠᐃᐃ, 18, 16, f, g);
        Gn.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠᐃᐃⵠΔΔ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ᐃΔᐃⵠΔᐃⲆ(b, h, this.seed, 12, 10, f, g);
        Gn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ΔᐃᐃΔⵠⵠⲆ();
          }
          Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
          this.ᐃΔᐃⵠΔᐃⲆ(c, h, this.ⵠΔᐃⵠⵠΔᐃ, 6, 6, f, g);
          Gn.globalAlpha = 1;
        }
      };
      this.ᐃⵠΔⲆᐃΔᐃᐃᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ΔⲆΔᐃΔⲆⵠ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ⲆΔⵠⲆΔᐃᐃ(d, h, this.ⵠᐃΔᐃⵠᐃᐃ, 18, 16, f, g);
        Gn.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠᐃᐃⵠΔΔ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ⲆΔⵠⲆΔᐃᐃ(b, h, this.seed, 12, 10, f, g);
        Gn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ΔᐃᐃΔⵠⵠⲆ();
          }
          Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
          this.ⲆΔⵠⲆΔᐃᐃ(c, h, this.ⵠΔᐃⵠⵠΔᐃ, 6, 6, f, g);
          Gn.globalAlpha = 1;
        }
      };
      this.ⲆᐃⲆΔⵠⲆΔⲆᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ΔⲆΔᐃΔⲆⵠ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ⲆΔⵠⲆΔᐃᐃ(d, h, this.ⵠᐃΔᐃⵠᐃᐃ, 18, 16, f, g);
        Gn.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⵠᐃᐃⵠΔΔ();
        }
        Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
        this.ⲆΔⵠⲆΔᐃᐃ(b, h, this.seed, 12, 10, f, g);
        Gn.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ΔᐃᐃΔⵠⵠⲆ();
          }
          Gn.globalAlpha = ⲆᐃΔ.ⵠᐃⲆᐃⵠ(h);
          this.ⲆΔⵠⲆΔᐃᐃ(c, h, this.ⵠΔᐃⵠⵠΔᐃ, 6, 6, f, g);
          Gn.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ΔⲆᐃⵠΔᐃᐃ, 0, 10, 0, 0, 200),
        ΔⵠⲆΔ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠᐃⵠⲆⵠᐃᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ΔΔⲆⲆΔΔⵠ, 0, 10, 0, 0, 150),
        ΔⵠⲆΔ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠᐃⲆᐃⵠ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⲆᐃⵠⵠᐃᐃⲆ, 0, 10, 0, 0, 100),
        ΔⵠⲆΔ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠᐃⲆᐃⵠ, 0, 10, 100, 100, 0)
      };
      this.ⲆᐃΔΔΔⵠⲆⲆΔ = function (a) {
        if (a.r.x === a.r.ᐃⲆᐃⵠⲆ) {
          if (a.ΔⵠⲆΔ.x === a.ΔⵠⲆΔ.ᐃⲆᐃⵠⲆ) {
            return a.r;
          } else {
            return a.ΔⵠⲆΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ᐃᐃⵠ = function (a) {
        var b;
        if (a.r.ᐃⲆᐃⵠⲆ === a.r.x) {
          if (a.ΔⵠⲆΔ.ᐃⲆᐃⵠⲆ === a.ΔⵠⲆΔ.x) {
            a.r.ⲆᐃⵠⲆⲆΔⵠ();
            a.ΔⵠⲆΔ.ⲆᐃⵠⲆⲆΔⵠ();
            b = a.r;
          } else {
            b = a.ΔⵠⲆΔ;
          }
        } else {
          b = a.r;
        }
        b.ⲆᐃⲆᐃΔΔⵠ(b.ᐃⲆᐃⵠⲆ);
        return b;
      };
      this.ΔⵠⲆᐃⵠ = [];
      this.ⲆⵠⵠⵠΔ = [];
      this.ⲆΔΔᐃⲆⲆⵠ = [];
      this.ΔⵠᐃᐃᐃᐃΔ = [];
      this.ΔⵠΔΔⵠ = function () {
        for (var a = 0; ⲆⵠⲆⲆⵠⵠᐃ > a; a++) {
          this.ΔⵠⲆᐃⵠ[a] = Math.floor(ⲆΔΔΔᐃⵠⵠ[a] * 25);
          this.ⲆⵠⵠⵠΔ[a] = Math.floor(ⲆΔΔΔᐃⵠⵠ[a] * 8);
          this.ⲆΔΔᐃⲆⲆⵠ[a] = Math.floor(ⲆΔΔΔᐃⵠⵠ[a] * 25);
          this.ΔⵠᐃᐃᐃᐃΔ[a] = Math.floor(ⲆΔΔΔᐃⵠⵠ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ᐃⲆᐃⵠⲆ;
        this.w2.r.ⲆᐃᐃΔΔ = 3.5;
        this.w3.r.ⲆᐃᐃΔΔ = 2;
      };
      this.ΔⵠΔΔⵠ();
    }
    this.ΔᐃᐃⵠⲆ = b.substring(0, 6) + this.ΔᐃᐃⵠⲆ.substring(6);
    this.ΔⵠΔᐃᐃⵠⲆ = ⵠⵠᐃΔ.get("starve_token_id") ? ⵠⵠᐃΔ.get("starve_token_id") : "";
    this.id = 0;
    this.ΔᐃⲆⲆ = 0;
    this.ΔⵠΔ = 0;
    this.ᐃΔⵠⲆΔᐃⵠ = {
      ⲆⵠⵠⲆΔ: 0,
      ᐃΔⲆΔⵠⵠⵠ: "",
      ⲆⲆⵠⵠⲆᐃΔ: 0,
      ⵠᐃⲆΔⵠ: 0
    };
    this.ⲆΔΔⵠⵠⲆⵠⲆⲆ = {
      connected: 0,
      ⵠΔⲆΔΔᐃΔ: new Date().getTime()
    };
    this.ⲆⲆⲆΔⵠ = [];
    this.ΔᐃⲆΔⵠΔⵠ = function (a) {
      for (var b = 0; this.ⲆⲆⲆΔⵠ.length > b; b++) {
        if (a == this.ⲆⲆⲆΔⵠ[b]) {
          return true;
        }
      }
      return false;
    };
    this.ΔᐃᐃⲆⵠ = {
      ⵠⲆⲆⲆΔ: 0,
      time: 0,
      value: 0,
      open: lg,
      ΔΔⲆⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⵠⲆⲆⲆΔ) / 1000);
          if (this.time < 60) {
            nx.ΔᐃᐃⲆⵠ.button.ΔΔⲆⲆ(Gn);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = Ah;
          }
        }
      }
    };
    this.ΔᐃᐃΔᐃ = {
      id: -1,
      ΔⲆᐃΔ: -1,
      lock: 0,
      timeout: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1 / 30, 1),
      wait: hh
    };
    this.ⲆⵠⲆⲆᐃ = {
      timeout: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1 / 5, 1),
      wait: cj
    };
    this.ᐃⵠΔⵠᐃ = {
      timeout: new ⲆᐃΔ.ΔⲆⵠᐃ(Ao, 0, 1, 0, 1, 1),
      wait: ra
    };
    this.ᐃΔⲆΔⲆ = {
      timeout: new ⲆᐃΔ.ΔⲆⵠᐃ(Xa, 0, 1, 0, 0.1, 1),
      wait: false
    };
    this.ⲆⲆⵠ = new ⲆᐃΔ.ⵠᐃⲆⵠᐃⲆⵠ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 0.4, 0, 0, Sn, Tn, Sn, Tn);
    this.ⲆⲆⵠ.ⵠⲆⲆⲆΔ = 0;
    this.ⲆⲆⵠ.ᐃΔⲆⲆⵠᐃᐃ = 0;
    this.ⲆⲆⵠ.ⵠⵠᐃ = function () {
      if (this.ᐃΔⲆⲆⵠᐃᐃ > 0) {
        this.ᐃΔⲆⲆⵠᐃᐃ -= rx;
      } else {
        var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
        if (a) {
          this.ⵠⲆⲆⲆΔ = 0;
          var b = Math.max(Math.min(Sn - a.x, -2), -kx.w + 2 + Ln);
          var c = Math.max(Math.min(Tn - a.y, -2), -kx.ᐃⵠⲆ + 2 + qn);
          this.ⲆᐃⲆᐃΔΔⵠ({
            x: b,
            y: c
          });
        } else {
          this.ⵠⲆⲆⲆΔ += rx;
          if (this.ⵠⲆⲆⲆΔ > 3) {
            this.ⵠⲆⲆⲆΔ = 0;
            if (!lx.reconnect.enabled) {
              Δⵠᐃᐃ.ⲆⵠΔΔⲆΔΔΔⵠ();
            }
          }
        }
      }
    };
    this.ⲆⲆⵠ.w = screen.width;
    this.ⲆⲆⵠ.ᐃⵠⲆ = screen.height;
    this.ⲆⲆⵠ.ⲆⲆᐃⵠⵠΔᐃ = this.ⲆⲆⵠ.w;
    this.ⲆⲆⵠ.ⲆⵠⲆⲆΔΔⲆ = this.ⲆⲆⵠ.ᐃⵠⲆ;
    this.ⲆⲆⵠ.rx = 0;
    this.ⲆⲆⵠ.ry = 0;
    this.ⲆⲆⵠ.ΔⵠⲆᐃᐃᐃⵠᐃΔ = 0;
    this.ⲆⲆⵠ.ⲆⲆⵠⲆⵠᐃⲆⵠⵠ = 0;
    this.ⲆⲆⵠ.ⵠⲆΔΔⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-kx.ⲆⲆᐃⵠⲆⲆⲆ * 2, a - kx.ⲆⲆᐃⵠⲆⲆⲆ - this.ⲆⲆᐃⵠⵠΔᐃ / 2), kx.w - this.ⲆⲆᐃⵠⵠΔᐃ);
      this.y = -Math.min(Math.max(-kx.ⵠⲆⲆᐃΔⵠⵠ * 2, b - (kx.ⵠⲆⲆᐃΔⵠⵠ + this.ⲆⵠⲆⲆΔΔⲆ) / 2), kx.ᐃⵠⲆ - this.ⲆⵠⲆⲆΔΔⲆ + kx.ⵠⲆⲆᐃΔⵠⵠ);
      this.ᐃⲆᐃⵠⲆ = this.x;
      this.ⵠᐃⵠΔⲆΔⲆ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ⵠⵠⵠⵠⵠᐃΔ: 0,
      ᐃⵠⲆᐃ: 0,
      attack: 0,
      ⵠⵠᐃ: function () {
        var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
        if (a) {
          var b = {
            x: lx.ⲆⲆⵠ.x + a.x,
            y: lx.ⲆⲆⵠ.y + a.y
          };
        } else {
          b = Xn;
        }
        var c = ⲆᐃΔ.ᐃⲆⵠΔᐃᐃᐃ(qx.ⲆⵠⲆⵠ, b);
        var d = cr;
        this.ᐃⵠⲆᐃ += rx;
        if (!qx.state) {
          if (a && !(a.action & 16) && this.ᐃⵠⲆᐃ > 0.2) {
            this.attack = 1;
            d = T;
            this.ᐃⵠⲆᐃ = 0;
            Δⵠᐃᐃ.ⲆⵠⲆⵠΔᐃΔΔΔ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⵠⵠᐃⵠΔΔⵠ = c;
        }
        if (!d) {
          this.timeout += rx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              Δⵠᐃᐃ.ⲆΔᐃⲆᐃⵠᐃᐃⵠ(c);
              this.angle = c;
            }
          }
        }
        if (!lx.ΔⲆⵠⲆⵠ.open && !lx.ᐃⲆⵠⲆⲆ.open) {
          var e = 0;
          if (px.ⵠΔᐃⵠᐃΔΔ()) {
            e |= 1;
          }
          if (px.ⵠΔᐃⵠⲆΔⵠ()) {
            e |= 2;
          }
          if (px.ⲆΔᐃΔᐃΔᐃ()) {
            e |= 4;
          }
          if (px.ⵠΔⲆⲆΔⲆⵠ()) {
            e |= 8;
          }
          if (this.ⵠⵠⵠⵠⵠᐃΔ != e) {
            Δⵠᐃᐃ.ΔⵠⲆᐃᐃᐃᐃⲆΔ(e);
          }
          this.ⵠⵠⵠⵠⵠᐃΔ = e;
        }
      }
    };
    this.ᐃⲆᐃⵠ = {
      c: 1,
      ΔⵠⲆΔ: 1,
      ᐃⵠⲆ: 1,
      ᐃᐃⵠ: 1,
      ᐃⲆᐃ: 1,
      ΔΔᐃⲆⲆᐃᐃ: 1,
      ⵠᐃⵠⲆⲆⲆΔ: new ⲆᐃΔ.ΔⲆⵠᐃ(ol, 0, 1, 0, 3, 3),
      ⵠᐃΔⲆⲆⲆᐃ: new ⲆᐃΔ.ΔⲆⵠᐃ(true, 0, 1, 0, 2, 2),
      ΔᐃΔⵠⲆⵠⲆ: new ⲆᐃΔ.ΔⲆⵠᐃ(T, 0, 1, 0, 3, 3),
      ⵠᐃΔⲆⲆΔᐃ: new ⲆᐃΔ.ΔⲆⵠᐃ(true, 0, 1, 0, 3, 3),
      ΔⵠΔⵠⵠⲆⵠ: new ⲆᐃΔ.ΔⲆⵠᐃ(true, 0, 1, 0, 3, 3),
      ⲆᐃΔᐃΔⲆⲆ: new ⲆᐃΔ.ΔⲆⵠᐃ(hq, 0, 1, 0, 3, 3),
      ⵠⲆΔᐃⵠ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 1, 0, 0, 1),
      ΔᐃⲆⵠⵠ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 1, 0, 0, 1),
      ΔⲆᐃᐃΔΔⵠ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 1, 0, 0, 1),
      ⵠⵠⵠᐃⵠᐃⲆ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 1, 0, 0, 1),
      ᐃⵠᐃⲆⵠⲆᐃ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 1, 0, 0, 1),
      ᐃΔᐃⲆⵠ: new ⲆᐃΔ.ᐃⲆΔⲆᐃ(ⲆᐃΔ.ⵠⲆΔⵠⵠⵠⲆ, 0, 1, 0, 0, 1),
      ⵠⵠᐃ: function () {
        this.ⵠᐃⵠⲆⲆⲆΔ.ⵠⵠᐃ();
        this.ⵠᐃΔⲆⲆⲆᐃ.ⵠⵠᐃ();
        this.ΔᐃΔⵠⲆⵠⲆ.ⵠⵠᐃ();
        this.ⵠᐃΔⲆⲆΔᐃ.ⵠⵠᐃ();
        this.ΔⵠΔⵠⵠⲆⵠ.ⵠⵠᐃ();
        this.ⲆᐃΔᐃΔⲆⲆ.ⵠⵠᐃ();
        this.ⵠⲆΔᐃⵠ.ⲆᐃⲆᐃΔΔⵠ(this.c);
        this.ΔᐃⲆⵠⵠ.ⲆᐃⲆᐃΔΔⵠ(this.ΔⵠⲆΔ);
        this.ΔⲆᐃᐃΔΔⵠ.ⲆᐃⲆᐃΔΔⵠ(this.ᐃⵠⲆ);
        this.ⵠⵠⵠᐃⵠᐃⲆ.ⲆᐃⲆᐃΔΔⵠ(this.ᐃᐃⵠ);
        this.ᐃⵠᐃⲆⵠⲆᐃ.ⲆᐃⲆᐃΔΔⵠ(this.ᐃⲆᐃ);
        this.ᐃΔᐃⲆⵠ.ⲆᐃⲆᐃΔΔⵠ(this.ΔΔᐃⲆⲆᐃᐃ);
      }
    };
    this.ᐃᐃᐃⵠᐃⵠⲆ = cj;
    this.ⲆⲆᐃⲆΔᐃΔ = false;
    this.ΔᐃⲆᐃⲆ = false;
    this.ΔⵠⵠΔᐃⵠⲆ = vg;
    this.ᐃΔᐃⲆ = {
      max: 10,
      ΔᐃΔΔΔⲆᐃ: 0,
      ΔⵠⲆⲆΔ: 0,
      Δᐃⵠ: [],
      ⲆΔⵠΔⲆ: [],
      ⲆⲆⲆⵠⵠⵠⵠ: function (a, b) {
        if (a === 1) {
          this.ΔⵠⲆⲆΔ = 6;
        }
        this.ΔᐃΔΔΔⲆᐃ += b;
        this.max = 10 + this.ΔᐃΔΔΔⲆᐃ + this.ΔⵠⲆⲆΔ;
      },
      ᐃΔᐃᐃⵠΔⲆ: {
        item: -1,
        ⵠᐃ: null,
        ⲆⵠⵠΔᐃ: 0,
        ᐃⲆⵠΔⵠⵠᐃ: 0,
        ⵠⲆⵠΔⵠ: -1,
        ⵠⵠΔᐃΔ: -1,
        ⲆᐃⲆᐃΔ: function (a) {
          if (!!this.ⲆⵠⵠΔᐃ && (a.x !== this.ⵠⲆⵠΔⵠ || a.y !== this.ⵠⵠΔᐃΔ)) {
            this.ᐃⲆⵠΔⵠⵠᐃ = 1;
          }
        },
        start: function (a, b) {
          this.ⵠⲆⵠΔⵠ = b.x;
          this.ⵠⵠΔᐃΔ = b.y;
          this.item = a;
          this.ⵠᐃ = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ[a].info.ⵠᐃ[2];
          this.ⲆⵠⵠΔᐃ = 1;
        },
        stop: function () {
          this.ⲆⵠⵠΔᐃ = 0;
          this.ᐃⲆⵠΔⵠⵠᐃ = 0;
          this.ⵠⲆⵠΔⵠ = -1;
          this.ⵠⵠΔᐃΔ = -1;
        },
        release: function () {
          var a = -1;
          var b = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ;
          var c = 0;
          if (this.ⲆⵠⵠΔᐃ && this.ᐃⲆⵠΔⵠⵠᐃ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === uw) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              nx.ⲆⲆᐃΔⵠⲆΔ();
            }
          }
          this.stop();
          return c;
        },
        ΔΔⲆⲆ: function (a, b) {
          if (this.ⲆⵠⵠΔᐃ && this.ᐃⲆⵠΔⵠⵠᐃ) {
            bp(Gn, this.ⵠᐃ, Math.floor(a - this.ⵠᐃ.width / 2), Math.floor(b - this.ⵠᐃ.height / 2));
          }
        }
      },
      ⵠⲆΔⵠᐃⵠⵠⵠⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.Δᐃⵠ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return ce;
      },
      ⲆⲆⵠΔⵠ: function (a) {
        for (var b = 0; b < this.ⲆΔⵠΔⲆ.length; b++) {
          if (this.ⲆΔⵠΔⲆ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ⵠᐃᐃⵠΔⲆΔ: function (a, b) {
        this.Δᐃⵠ[a] = 0;
        this.ⲆΔⵠΔⲆ.splice(b, 1);
        nx.ⲆⲆᐃΔⵠⲆΔ();
      },
      ΔⲆΔⵠΔⲆΔ: function (a, b, c) {
        ⵠⵠᐃ = fs;
        this.Δᐃⵠ[a] = Math.max(0, this.Δᐃⵠ[a] - b);
        if (!this.Δᐃⵠ[a] && c >= 0) {
          this.ⵠᐃᐃⵠΔⲆΔ(a, c);
        }
      }
    };
    this.ⵠⲆⵠΔΔ = {
      enabled: false,
      translate: {
        y: 0,
        x: 0
      },
      ΔⵠᐃⵠⲆᐃⲆ: function () {
        if (kx.mode == 1 && !lx.ⲆⲆᐃⲆΔᐃΔ) {
          lx.ⵠⲆⵠΔΔ.enabled = !lx.ⵠⲆⵠΔΔ.enabled;
          if (lx.ⵠⲆⵠΔΔ.enabled) {
            nx.options.ⲆᐃᐃⲆᐃⵠᐃ.display = "inline-block";
          } else {
            nx.options.ⲆᐃᐃⲆᐃⵠᐃ.display = "none";
          }
        }
      }
    };
    nx.options.ⲆᐃᐃⲆᐃⵠᐃ.display = "none";
    this.ⲆⲆⲆΔΔ = {
      enabled: En,
      translate: {
        x: 0,
        y: 0
      },
      ⵠⲆⲆⲆΔ: 0,
      ΔⵠᐃⵠⲆᐃⲆ: function () {
        lx.ⲆⲆⲆΔΔ.enabled = !lx.ⲆⲆⲆΔΔ.enabled;
        if (lx.ⲆⲆⲆΔΔ.enabled) {
          nx.options.ⵠΔⲆΔⵠᐃΔ.display = "inline-block";
        } else {
          nx.options.ⵠΔⲆΔⵠᐃΔ.display = "none";
        }
      },
      ⵠⵠᐃ: function () {
        if (!!this.enabled && lx.ᐃΔⵠᐃ.id < 0 && !nx.ΔⲆⵠⵠ.open) {
          this.ⵠⲆⲆⲆΔ += rx;
          if (this.ⵠⲆⲆⲆΔ > 2) {
            this.ⵠⲆⲆⲆΔ = 0;
            if (lx.ᐃⲆᐃⵠ.ᐃⵠⲆ < 0.35) {
              if (lx.ᐃΔᐃⲆ.Δᐃⵠ[110]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(110, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(110));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[192]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(192, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(192));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[196]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(196, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(196));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[189]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(189, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(189));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[207]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(207, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(207));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[205]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(205, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(205));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[209]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(209, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(209));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[143]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(143, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(143));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[117]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(117, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(117));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[138]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(138, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(138));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[133]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(133, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(133));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[145]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(145, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(145));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[136]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(136, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(136));
              } else if (lx.ᐃΔᐃⲆ.Δᐃⵠ[197]) {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(197, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(197));
              }
            } else if (lx.ᐃⲆᐃⵠ.ᐃᐃⵠ < 0.35 && lx.ᐃΔᐃⲆ.Δᐃⵠ[127]) {
              Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(127, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(127));
            }
          }
        }
      }
    };
    nx.options.ⵠΔⲆΔⵠᐃΔ.display = "none";
    this.ᐃΔⵠᐃ = {
      id: -1,
      ΔⲆᐃⵠ: -1,
      timeout: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1, 1),
      ⵠΔⲆⵠΔ: ce,
      ΔᐃΔⵠ: -1,
      mode: 0,
      label: [],
      ⵠⵠⵠⵠΔ: [],
      ⵠⵠⵠⲆⲆ: kq,
      ⵠⵠΔⵠΔ: _e,
      ⵠⲆΔⵠⲆⲆⲆ: ce,
      ΔⲆΔⲆΔ: false,
      ⵠᐃΔⵠⲆⲆⲆⵠᐃ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ᐃⲆⲆⵠᐃᐃᐃⲆⲆ: function (a) {
        this.ⵠⵠⵠⲆⲆ = a;
        var b = nx.ΔⲆⵠⵠ;
        if (b.open) {
          b.ⲆΔⲆⵠⲆⵠΔ(b.button);
        }
        this.ⵠⵠᐃ();
      },
      ΔⵠⵠΔᐃⵠΔΔⲆ: function (a) {
        var b = Is[a];
        this.id = a;
        this.ⵠΔⲆⵠΔ = true;
        kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
        this.timeout.ⵠⵠⲆⲆΔⵠᐃ = b.time * 8;
        this.ΔⲆᐃⵠ = b.ΔⲆᐃⵠ;
      },
      ᐃⲆΔⵠᐃΔⵠᐃⲆ: function (a) {
        var b = Is[a];
        this.id = a;
        this.ⵠΔⲆⵠΔ = hq;
        var c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
        if (c && c.right == 28) {
          this.timeout.ⵠⵠⲆⲆΔⵠᐃ = b.time * 3;
        } else {
          this.timeout.ⵠⵠⲆⲆΔⵠᐃ = b.time;
        }
        this.ΔⲆᐃⵠ = b.ΔⲆᐃⵠ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          lx.ᐃΔᐃⲆ.ΔⲆΔⵠΔⲆΔ(e[0], e[1], lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(e[0]));
        }
        nx.ⲆⲆᐃΔⵠⲆΔ();
      },
      ⵠⵠᐃ: function () {
        this.ⵠⵠⵠⵠΔ = [];
        if (nx.ⵠᐃⲆⵠΔ.ᐃΔⵠᐃ === 1) {
          nx.ⵠᐃⲆⵠΔ.display = 0;
        }
        for (var a in Is) {
          var b = Is[a];
          var c = Xg;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (lx.ᐃΔᐃⲆ.max >= 16 && b.id === 100) {
                c = hi;
                break;
              }
              if (b.w > this.ⵠⵠⵠⲆⲆ || b.f > this.ⵠⵠΔⵠΔ || b.ᐃⲆᐃ > this.ⵠⲆΔⵠⲆⲆⲆ || b.e > this.ΔⲆΔⲆΔ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!lx.ᐃΔᐃⲆ.Δᐃⵠ[f[0]] || lx.ᐃΔᐃⲆ.Δᐃⵠ[f[0]] < f[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ⵠⵠⵠⵠΔ.push(nx.ⵠΔⲆ[b.id]);
            }
          }
        }
        nx.ⵠⲆᐃΔⵠⲆᐃ();
        nx.ⲆⵠⲆᐃⲆᐃΔ();
        nx.ᐃᐃᐃⵠᐃΔⲆ();
        nx.ⲆⲆΔⲆⵠⲆᐃ();
        nx.ΔΔⲆⲆΔⵠⵠ();
        nx.ᐃⲆᐃⵠᐃⲆΔ();
        nx.sign.ⲆⵠⲆᐃΔⲆᐃ();
      },
      ⲆᐃⵠⲆⲆΔⵠ: function () {
        this.id = -1;
        this.ⵠΔⲆⵠΔ = false;
        this.timeout.ⲆⵠΔ = 0;
        this.timeout.ᐃⲆᐃ = false;
        this.ⵠⵠᐃ();
      }
    };
    this.ΔΔⲆⵠΔᐃⵠ = {
      message: undefined,
      ΔΔⲆⲆ: Hv
    };
    this.alert = {
      timeout: new ⲆᐃΔ.ΔⲆⵠᐃ(false, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ΔΔⲆⲆ: Gv,
      list: []
    };
    this.ΔΔΔΔΔ = {
      ⵠⲆ: document.createElement("canvas"),
      Δᐃᐃᐃᐃ: [],
      ⵠⵠᐃ: true,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = kx.ⲆⲆⲆᐃ, c = 0; c < b.length; c++) {
          if (b[c].ᐃᐃΔⵠᐃ) {
            a.push({
              id: c,
              ᐃΔΔᐃ: b[c].ⵠᐃⲆΔⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ᐃΔΔᐃ - a.ᐃΔΔᐃ;
        });
        this.Δᐃᐃᐃᐃ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.Δᐃᐃᐃᐃ.push(a[c].id);
        }
        this.ⵠⵠᐃ = true;
      },
      ΔⵠΔΔⵠ: function (a) {
        for (var b = kx.ⲆⲆⲆᐃ, c = 0; c < b.length; c++) {
          b[c].ⵠᐃⲆΔⵠ = 0;
        }
        b[lx.id].ⵠᐃⲆΔⵠ = ⲆᐃΔ.ⲆⲆⵠⵠᐃΔΔ(a[1]);
        this.Δᐃᐃᐃᐃ = [];
        for (c = 2; c < a.length; c += 2) {
          this.Δᐃᐃᐃᐃ.push(a[c]);
          b[a[c]].ⵠᐃⲆΔⵠ = ⲆᐃΔ.ⲆⲆⵠⵠᐃΔΔ(a[c + 1]);
        }
        this.ⵠⵠᐃ = true;
      }
    };
    this.ΔΔΔΔΔ.ⵠⲆ.width = eo * 180;
    this.ΔΔΔΔΔ.ⵠⲆ.height = eo * 300;
    this.ΔΔΔΔΔ.Δ = this.ΔΔΔΔΔ.ⵠⲆ.getContext("2d");
    this.ᐃⲆⵠⲆⲆ = {
      open: cj,
      input: document.getElementById("commandInput"),
      ᐃΔⵠΔⲆᐃᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⲆⵠΔᐃⲆⵠⲆⲆⵠ: function (a) {
        this.ᐃΔⵠΔⲆᐃᐃ.innerHTML += a;
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Ln / 2 - 300) + "px";
        this.style.top = Math.floor(qn / 2 - 250) + "px";
      },
      ΔⲆⵠΔΔᐃᐃⵠᐃ: function () {
        this.ᐃΔⵠΔⲆᐃᐃ.innerHTML = "";
      },
      ᐃΔᐃΔⵠ: function () {
        this.open = hh;
        this.style.display = "none";
      },
      ᐃⲆⵠⵠⲆ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⲆΔᐃⲆᐃ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⲆⵠΔᐃⲆⵠⲆⲆⵠ(f);
        this.ⵠΔⲆⲆᐃΔⲆⵠΔ();
      },
      ⵠΔⲆⲆᐃΔⲆⵠΔ: function () {
        this.ᐃΔⵠΔⲆᐃᐃ.scrollTop = this.ᐃΔⵠΔⲆᐃᐃ.scrollHeight;
      },
      ⵠⵠⵠⲆⵠΔΔ: function (b) {
        switch (b) {
          case "clean":
            this.ΔⲆⵠΔΔᐃᐃⵠᐃ();
            return true;
          case "list":
            var c = "";
            const a = Ya.document.createElement("div");
            for (var d = kx.ⲆⲆⲆᐃ, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.ᐃᐃΔⵠᐃ) {
                a.innerText = g.ⵠⲆⲆΔΔ;
                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.ⲆΔᐃⲆᐃ("list", 1, "List all connected players", c);
            return hj;
          case "weapon-list":
            this.ⲆΔᐃⲆᐃ("Weapons", 1, "List all weapons in the game", this.ᐃⲆⵠⵠⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return Xj;
          case "tool-list":
            this.ⲆΔᐃⲆᐃ("Tools", 1, "List all tools in the game", this.ᐃⲆⵠⵠⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return za;
          case "survival-list":
            this.ⲆΔᐃⲆᐃ("Survival Items", 1, "List all survival items in the game", this.ᐃⲆⵠⵠⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ⲆΔᐃⲆᐃ("Resources", 1, "List all resources in the game", this.ᐃⲆⵠⵠⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return T;
          case "food-list":
            this.ⲆΔᐃⲆᐃ("Food", 1, "List all food in the game", this.ᐃⲆⵠⵠⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return T;
          case "hat-list":
            this.ⲆΔᐃⲆᐃ("Hats", 1, "List all hats in the game", this.ᐃⲆⵠⵠⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return true;
          case "building-list":
            this.ⲆΔᐃⲆᐃ("Buildings", 1, "List all buildings in the game", this.ᐃⲆⵠⵠⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return wn;
          case "biome-list":
            this.ⲆΔᐃⲆᐃ("Biomes list", 1, "List all available biomes in the game", this.ᐃⲆⵠⵠⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ⲆΔᐃⲆᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return _k;
          case "pos":
            d = kx.ⵠⵠⵠ[0];
            f = 0;
            for (; f < d.length; f++) {
              var e = d[f];
              if (e.ΔⲆᐃΔ === lx.id) {
                this.ⲆΔᐃⲆᐃ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                return _k;
              }
            }
            break;
          case "help-admin":
            this.ⲆΔᐃⲆᐃ("help-admin", 1, "List all available commands for admin only", this.ᐃⲆⵠⵠⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ⲆΔᐃⲆᐃ("help", 1, "List all available commands", this.ᐃⲆⵠⵠⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ⵠΔΔⵠⲆⲆⲆᐃΔ: function () {
        if (!this.open) {
          this.open = Qs;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⵠΔⲆⲆⲆᐃⲆ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⵠⵠⵠⲆⵠΔΔ(a)) {
            Δⵠᐃᐃ.ⲆⲆⲆΔΔⵠⵠΔⵠ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ΔⲆⵠⲆⵠ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Ln / 2 - 150) + "px";
        this.style.top = Math.floor(qn / 2 + 80) + "px";
      },
      ᐃΔᐃΔⵠ: function () {
        this.open = En;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (lx.alert.text) {
              lx.alert.list.push(b);
            } else {
              lx.alert.text = b;
            }
            nx.ΔᐃⲆⵠⲆⵠΔ = 0;
          } else {
            nx.ΔᐃⲆⵠⲆⵠΔ = 1;
          }
        }
      },
      ⵠⵠⵠⲆⵠΔΔ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return T;
        }
        return En;
      },
      ΔΔΔᐃᐃ: function () {
        if (this.open) {
          this.open = _e;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⵠⵠⵠⲆⵠΔΔ(a)) {
              Δⵠᐃᐃ.ⵠΔⲆⵠᐃᐃⲆᐃᐃ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ΔⵠΔⵠΔⵠΔ = {
      ⵠᐃⲆⲆⵠ: [],
      ⵠⵠᐃ: function (a) {
        a.y += rx * 80 * a.ᐃΔΔᐃ;
        a.x += rx * 80 * a.c;
        a.ΔᐃⲆⵠⵠ -= rx / 6;
        if (a.ΔᐃⲆⵠⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + rx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - rx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(Ln / 1366 * 34, 44) * Math.max(Math.min(kx.ⵠᐃⵠᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ⵠᐃⲆⲆⵠ.length < c) {
          var d = Math.floor(Math.random() * 5);
          var e = -lx.ⲆⲆⵠ.x + Math.floor(Math.random() * lx.ⲆⲆⵠ.w);
          var f = -lx.ⲆⲆⵠ.y + Math.floor(Math.random() * lx.ⲆⲆⵠ.ᐃⵠⲆ);
          var g = Math.random(Math.PI);
          this.ⵠᐃⲆⲆⵠ.push(new Bf(d, e, f, g));
        }
      }
    };
    this.ⲆᐃⵠᐃΔΔΔ = 0;
    this.ⲆⵠΔⲆⲆ = 0;
    this.ⲆΔΔⲆⲆ = {
      ⵠᐃⲆⲆⵠ: [],
      Ⲇⵠᐃᐃᐃ: 0,
      ΔΔⲆⵠⵠ: 0,
      ⵠⵠᐃ: function (a) {
        a.y += rx * (200 + this.ΔΔⲆⵠⵠ * 800) * a.ᐃΔΔᐃ;
        a.x += rx * (200 + this.ΔΔⲆⵠⵠ * 800) * a.c;
        a.ΔᐃⲆⵠⵠ -= rx / 6;
        if (a.ΔᐃⲆⵠⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + rx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - rx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ΔΔⲆⵠⵠ + 0.1) * 68 * (Ln / 1366), (this.ΔΔⲆⵠⵠ + 0.1) * 68 + 10) * Math.max(Math.min(kx.ΔΔⵠᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ⵠᐃⲆⲆⵠ.length < c) {
          var d = Math.floor(Math.random() * 5);
          var e = -lx.ⲆⲆⵠ.x + Math.floor(Math.random() * lx.ⲆⲆⵠ.w);
          var f = -lx.ⲆⲆⵠ.y + Math.floor(Math.random() * lx.ⲆⲆⵠ.ᐃⵠⲆ);
          var g = Math.random(Math.PI);
          if (lx.ⲆΔΔⲆⲆ.Ⲇⵠᐃᐃᐃ !== 0) {
            e -= lx.ⲆⲆⵠ.w / 2;
          }
          this.ⵠᐃⲆⲆⵠ.push(new Bf(d, e, f, g));
        }
      }
    };
    this.ⲆᐃⲆⵠⵠ = {
      ⵠᐃⲆⲆⵠ: [],
      Ⲇⵠᐃᐃᐃ: 0,
      ΔΔⲆⵠⵠ: 0,
      ⵠⵠᐃ: function (a) {
        if (px.ⲆΔᐃΔᐃΔᐃ()) {
          a.y += rx * a.ⵠⵠⵠⵠⲆ * (5.5 + this.ΔΔⲆⵠⵠ * 10);
        } else {
          a.y += rx * a.ⵠⵠⵠⵠⲆ * (5 + this.ΔΔⲆⵠⵠ * 10);
        }
        a.ΔᐃⲆⵠⵠ -= rx / 2;
        if (px.ⵠΔᐃⵠᐃΔΔ()) {
          a.x += rx * (100 + this.ΔΔⲆⵠⵠ * 400);
        } else if (px.ⵠΔᐃⵠⲆΔⵠ()) {
          a.x -= rx * (130 - this.ΔΔⲆⵠⵠ * 400);
        } else {
          a.x -= rx * (30 - this.ΔΔⲆⵠⵠ * 400);
        }
        if (a.ΔᐃⲆⵠⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + rx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - rx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔΔⲆⵠⵠ * 1.5 + 0.5) * 34 * (Ln / 1366), (this.ΔΔⲆⵠⵠ * 1.5 + 0.5) * 34 + 10) * Math.max(Math.min(kx.ⵠⵠⵠⵠⵠ + 1000, 3000) / 3000, 0));
        if (this.ⵠᐃⲆⲆⵠ.length < b) {
          var c = Math.floor(Math.random() * 5);
          var d = -lx.ⲆⲆⵠ.x + Math.floor(Math.random() * lx.ⲆⲆⵠ.w);
          var e = -lx.ⲆⲆⵠ.y + Math.floor(Math.random() * 400 * eo - eo * 200);
          this.ⵠᐃⲆⲆⵠ.push(new Bf(c, d, e, 0));
        }
      }
    };
    this.ⵠΔⵠᐃ = [];
    for (var d = 0; d < 4; d++) {
      this.ⵠΔⵠᐃ.push(new c());
    }
  }
  function Gf() {
    Math.random();
    return "t";
  }
  function Hw() {
    Math.random();
    return "p";
  }
  ᐃΔᐃⲆⵠᐃⵠⵠⵠ = 1;
  const Iw = {};
  Iw.get = function (a, b) {
    if (b !== "ᐃⲆᐃⲆⲆΔⵠ") {
      const a = Ya.setTimeout;
      const b = a;
      const c = function () {
        a(c, 8170);
        b(c, 8467);
      };
      c();
    }
    return Ya.Reflect.get(...arguments);
  };
  new Ya.Proxy({}, Iw).ᐃⲆᐃⲆⲆΔⵠ;
  function Hw() {
    Math.random();
    return "p";
  }
  function Of() {
    Math.random();
    return "a";
  }
  function Jw() {
    Math.random();
    return "C";
  }
  function Of() {
    Math.random();
    return "a";
  }
  function Nf(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Hf(a) {
    return Ya.String.fromCharCode(a);
  }
  function Gf() {
    Math.random();
    return "t";
  }
  function Uf() {
    Math.random();
    return "o";
  }
  function Kw() {
    Math.random();
    return "e";
  }
  function Uf() {
    Math.random();
    return "o";
  }
  setTimeout(function b() {
    var c = Ff() + Of() + Gf() + _f();
    Math.random();
    var d = "W" + Kw() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + Uf() + function () {
      Math.random();
      return "c";
    }() + function () {
      Math.random();
      return "k";
    }() + Kw() + Gf();
    if (Ya[d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var e = If() + Kw() + Ff() + Qf();
    var f = Hw() + Sf() + Uf() + Gf() + Uf() + Gf() + function () {
      Math.random();
      return "y";
    }() + Hw() + Kw();
    if (Ya[d][f][e].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    d = Qf() + Sf() + Of() + function () {
      Math.random();
      return "w";
    }() + function () {
      Math.random();
      return "I";
    }() + function () {
      Math.random();
      return "m";
    }() + Of() + Rf() + Kw();
    e = Jw() + Of() + Ff() + function () {
      Math.random();
      return "v";
    }() + Of() + If() + function () {
      Math.random();
      return "R";
    }() + Kw() + Ff() + Qf() + Kw() + Sf() + _f() + Ff() + Rf() + Jw() + Uf() + Ff() + Gf() + Kw() + (Math.random(), "x") + Gf() + function () {
      Math.random();
      return "2";
    }() + function () {
      Math.random();
      return "D";
    }();
    if (Ya[e][f][d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    setTimeout(b, 100000);
  }, 100000);
  function Vf(c, f) {
    var j = this;
    this.ⵠⲆ = c;
    this.Δ = f;
    if (Ya.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆⲆᐃⵠᐃⵠⲆ = "default";
      this.ⲆⵠᐃΔⵠⵠⲆ = "pointer";
    } else {
      this.ⲆⲆᐃⵠᐃⵠⲆ = "url('img/cursor0.png'), default";
      this.ⲆⵠᐃΔⵠⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ΔᐃⲆⵠⲆⵠΔ = 1;
    this.ΔᐃΔᐃᐃⵠᐃ = 1;
    this.ⵠᐃΔⲆᐃⵠⵠ = 1;
    this.ΔΔΔᐃᐃⵠΔ = 1;
    this.ᐃⲆΔⵠᐃⲆᐃⲆΔ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ᐃⲆⲆⲆ = {
      ⵠᐃⲆⲆΔⵠⲆ: tf(60, 60, 0, ⵠΔ[782]),
      ⲆΔⲆⲆⵠⵠⵠ: tf(60, 60, 0, ⵠΔ[783])
    };
    this.sign = {
      open: false,
      ⲆΔΔΔΔⲆⵠⵠⵠ: 0,
      ᐃᐃΔⲆⵠⵠΔ: document.getElementById("sign_object"),
      ⵠⵠⵠⵠⲆΔΔ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: tf(60, 60, 0, ⵠΔ[803]),
      ⲆⵠⲆᐃΔⲆᐃ: function () {
        var a = Math.floor(Math.floor((3 + lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ.length) / 4) * (10 + ⵠΔ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 150) + "px";
        this.style.top = Math.floor(Tn - 115) + "px";
      },
      ᐃΔᐃΔⵠ: function () {
        nx.sign.style.display = "none";
        nx.sign.open = zh;
      },
      select: function () {
        nx.sign.open = !nx.sign.open;
        if (nx.sign.open) {
          nx.sign.style.display = "inline-block";
        } else {
          nx.sign.style.display = "none";
        }
      },
      ok: function () {
        Δⵠᐃᐃ.ⵠⲆΔΔΔΔΔᐃᐃ(lx.sign.ᐃⵠᐃⵠΔ, nx.sign.ⵠⵠⵠⵠⲆΔΔ);
        nx.sign.select();
      },
      up: function () {
        nx.sign.ⵠⵠⵠⵠⲆΔΔ = nx.sign.ⵠⵠⵠⵠⲆΔΔ === 0 ? 3 : nx.sign.ⵠⵠⵠⵠⲆΔΔ - 1;
        nx.sign.ᐃᐃΔⲆⵠⵠΔ.src = "./img/sign" + nx.sign.ⵠⵠⵠⵠⲆΔΔ + ".png";
      },
      down: function () {
        nx.sign.ⵠⵠⵠⵠⲆΔΔ = (nx.sign.ⵠⵠⵠⵠⲆΔΔ + 1) % 4;
        nx.sign.ᐃᐃΔⲆⵠⵠΔ.src = "./img/sign" + nx.sign.ⵠⵠⵠⵠⲆΔΔ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, Cl);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, En);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Zh);
    this.ⵠᐃΔⵠⵠ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ⲆⲆⲆⲆᐃ: 1,
        b: 1,
        a: 3,
        ⵠΔⵠⵠΔ: 316
      }, {
        id: 1,
        name: "stone",
        ⲆⲆⲆⲆᐃ: 1,
        b: 1,
        a: 4,
        ⵠΔⵠⵠΔ: 315
      }, {
        id: 2,
        name: "gold",
        ⲆⲆⲆⲆᐃ: 1,
        b: 1,
        a: 6,
        ⵠΔⵠⵠΔ: 297
      }, {
        id: 3,
        name: "diamond",
        ⲆⲆⲆⲆᐃ: 4,
        b: 4,
        a: 1,
        ⵠΔⵠⵠΔ: 298
      }, {
        id: 4,
        name: "amethyst",
        ⲆⲆⲆⲆᐃ: 8,
        b: 8,
        a: 1,
        ⵠΔⵠⵠΔ: 418
      }, {
        id: 5,
        name: "reidite",
        ⲆⲆⲆⲆᐃ: 16,
        b: 16,
        a: 1,
        ⵠΔⵠⵠΔ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ⲆⲆⲆⲆᐃ: 10,
        b: 10,
        a: 1,
        ⵠΔⵠⵠΔ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ⲆⲆⲆⲆᐃ: 16,
        b: 16,
        a: 1,
        ⵠΔⵠⵠΔ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ⲆⲆⲆⲆᐃ: 20,
        b: 20,
        a: 1,
        ⵠΔⵠⵠΔ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ⲆⲆⲆⲆᐃ: 30,
        b: 30,
        a: 1,
        ⵠΔⵠⵠΔ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ⲆⲆⲆⲆᐃ: 40,
        b: 40,
        a: 1,
        ⵠΔⵠⵠΔ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ⲆⲆⲆⲆᐃ: 60,
        b: 60,
        a: 1,
        ⵠΔⵠⵠΔ: 966
      }],
      button: tf(60, 60, 0, ⵠΔ[795]),
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 450) + "px";
        this.style.top = Math.floor(Tn - 270) + "px";
      },
      select: function () {
        nx.ⵠᐃΔⵠⵠ.open = !nx.ⵠᐃΔⵠⵠ.open;
        if (nx.ⵠᐃΔⵠⵠ.open) {
          nx.ⵠᐃΔⵠⵠ.style.display = "inline-block";
        } else {
          nx.ⵠᐃΔⵠⵠ.style.display = "none";
        }
      },
      ᐃΔᐃΔⵠ: function () {
        nx.ⵠᐃΔⵠⵠ.style.display = "none";
        nx.ⵠᐃΔⵠⵠ.open = cr;
      },
      ⲆⲆᐃⵠⲆΔΔ: function () {
        Δⵠᐃᐃ.ⵠⲆᐃⵠᐃᐃⲆΔΔ(this.ΔⵠⵠΔᐃⲆΔ);
      },
      ⵠⲆΔΔⵠ: function () {
        this.id;
        if (this.ΔⵠⵠΔᐃⲆΔ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ΔⵠⵠΔᐃⲆΔ.b);
          this.ΔⵠⵠΔᐃⲆΔ.ⲆⲆⲆⲆᐃ = a;
          document.getElementById(this.ΔⵠⵠΔᐃⲆΔ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ΔⵠⵠΔᐃⲆΔ.a);
          this.ΔⵠⵠΔᐃⲆΔ.ⲆⲆⲆⲆᐃ = a;
          document.getElementById(this.ΔⵠⵠΔᐃⲆΔ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠᐃΔⵠⵠ.ᐃΔᐃΔⵠ, false);
    var e = [["mouseup", this.ⵠᐃΔⵠⵠ.ⲆⲆᐃⵠⲆΔΔ, "buy_"], ["click", this.ⵠᐃΔⵠⵠ.ⵠⲆΔΔⵠ, ""], ["change", this.ⵠᐃΔⵠⵠ.ⵠⲆΔΔⵠ, ""], ["keypress", this.ⵠᐃΔⵠⵠ.keypress, ""]];
    for (var i = 0; this.ⵠᐃΔⵠⵠ.items.length > i; i++) {
      var k = this.ⵠᐃΔⵠⵠ.items[i];
      document.getElementById(k.name + "_market").src = ⵠΔ[k.ⵠΔⵠⵠΔ][0].ᐃΔᐃⲆᐃ === undefined ? ⵠΔ[k.ⵠΔⵠⵠΔ][0].src : ⵠΔ[k.ⵠΔⵠⵠΔ][0].ᐃΔᐃⲆᐃ;
      if (k.a === 1) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = 1;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = 1;
        document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = 1;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ΔⵠⵠΔᐃⲆΔ = k;
      document.getElementById(k.name + "_number").ΔⵠⵠΔᐃⲆΔ = k;
      for (var m = 0; m < e.length; m++) {
        document.getElementById(e[m][2] + k.name + "_number").addEventListener(e[m][0], e[m][1], lg);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: En,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ᐃΔΔⵠⵠ: document.getElementById("agree_ing").style,
      ᐃΔᐃⲆΔᐃΔ: document.getElementById("cancel_agree_ing").style,
      ⲆⵠⵠⵠⲆΔᐃ: document.getElementById("quest_agree_ing").style,
      ⲆᐃᐃⲆᐃⵠᐃ: document.getElementById("spectator_agree_ing").style,
      ⵠΔⲆΔⵠᐃΔ: document.getElementById("auto_feed_agree_ing").style,
      ᐃᐃᐃΔⲆⵠᐃ: document.getElementById("info_agree_ing").style,
      ᐃᐃⲆΔΔΔᐃ: document.getElementById("pixelated_agree_ing").style,
      button: tf(60, 60, 0, ⵠΔ[727]),
      ΔⲆⵠⲆΔΔᐃΔᐃ: function () {
        nx.options.open = !nx.options.open;
        if (nx.options.open) {
          nx.options.style.display = "inline-block";
        } else {
          nx.options.style.display = "none";
        }
      },
      ΔⲆⵠᐃΔⲆⲆⵠⲆ: function () {
        hx.ⵠΔᐃⵠⲆⲆΔ();
      },
      ᐃΔⵠⲆⲆⲆΔΔᐃ: function () {
        hx.ΔⵠᐃⵠᐃΔᐃ();
      },
      high: function () {
        hx.ΔⵠⵠΔⲆΔΔⲆᐃ();
      },
      low: function () {
        hx.ΔΔⵠΔᐃᐃⵠᐃΔ();
      },
      ᐃΔⵠⵠⲆ: function () {
        nx.ΔⲆⵠⵠ.ᐃΔⵠⵠⲆ();
      },
      ⵠⲆᐃⲆΔⵠᐃⵠᐃ: function () {
        nx.ⲆᐃⵠⵠΔ.ᐃΔⵠⵠⲆ();
      },
      ⲆⵠᐃⵠⵠᐃⲆΔⵠ: function () {
        nx.ΔᐃΔᐃ.ᐃΔⵠⵠⲆ();
      },
      ⵠᐃⲆΔⵠⵠⵠⵠⵠ: function () {
        lx.ⵠⲆⵠΔΔ.ΔⵠᐃⵠⲆᐃⲆ();
      },
      ⲆⲆᐃⵠⵠⲆⵠᐃⵠ: function () {
        lx.ⲆⲆⲆΔΔ.ΔⵠᐃⵠⲆᐃⲆ();
      },
      ᐃΔᐃΔⵠ: function () {
        nx.options.style.display = "none";
        nx.options.open = false;
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 235) + "px";
        this.style.top = Math.floor(Tn - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔⲆⵠᐃΔⲆⲆⵠⲆ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ᐃΔⵠⲆⲆⲆΔΔᐃ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, ra);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ᐃΔᐃΔⵠ, ra);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃΔⵠⵠⲆ, hh);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠᐃⵠⵠᐃⲆΔⵠ, cj);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆᐃⲆΔⵠᐃⵠᐃ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠᐃⲆΔⵠⵠⵠⵠⵠ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆᐃⵠⵠⲆⵠᐃⵠ, ce);
    this.ⲆᐃⵠⵠΔ = {
      open: Ao,
      ⲆⲆΔΔⵠ: ⵠⵠᐃΔ.get("starve_cancel") ? ⵠⵠᐃΔ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ᐃΔΔⵠⵠ: document.getElementById("cancel_agree").style,
      button: 0,
      ⵠⵠ: 0,
      ᐃΔᐃΔⵠ: function () {
        nx.ⲆᐃⵠⵠΔ.style.display = "none";
        nx.ⲆᐃⵠⵠΔ.open = false;
      },
      ⵠΔⲆⲆᐃⲆⲆ: function () {
        if (lx.ᐃΔⵠᐃ.ⵠΔⲆⵠΔ) {
          Δⵠᐃᐃ.ⵠⵠᐃⲆΔⲆΔⲆΔ();
        }
        nx.ⲆᐃⵠⵠΔ.ᐃΔᐃΔⵠ();
      },
      ᐃΔⵠⵠⲆ: function () {
        if (nx.ⲆᐃⵠⵠΔ.ⲆⲆΔΔⵠ) {
          ⵠⵠᐃΔ.set("starve_cancel", "0");
          nx.ⲆᐃⵠⵠΔ.ᐃΔΔⵠⵠ.display = "inline-block";
          nx.options.ᐃΔᐃⲆΔᐃΔ.display = "none";
        } else {
          ⵠⵠᐃΔ.set("starve_cancel", "1");
          nx.ⲆᐃⵠⵠΔ.ᐃΔΔⵠⵠ.display = "none";
          nx.options.ᐃΔᐃⲆΔᐃΔ.display = "inline-block";
        }
        nx.ⲆᐃⵠⵠΔ.ⲆⲆΔΔⵠ = !nx.ⲆᐃⵠⵠΔ.ⲆⲆΔΔⵠ;
      },
      ⲆΔⲆⵠⲆⵠΔ: function () {
        if (this.ⲆⲆΔΔⵠ) {
          this.style.display = "inline-block";
          this.open = wn;
        } else {
          this.ⵠΔⲆⲆᐃⲆⲆ();
        }
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 235) + "px";
        this.style.top = Math.floor(Tn - 130) + "px";
      }
    };
    this.ⲆᐃⵠⵠΔ.id.oncontextmenu = function () {
      return cr;
    };
    this.ⲆᐃⵠⵠΔ.ᐃΔΔⵠⵠ.display = "none";
    if (this.ⲆᐃⵠⵠΔ.ⲆⲆΔΔⵠ) {
      this.options.ᐃΔᐃⲆΔᐃΔ.display = "inline-block";
    } else {
      this.options.ᐃΔᐃⲆΔᐃΔ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⲆᐃⵠⵠΔ.ⵠΔⲆⲆᐃⲆⲆ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⲆᐃⵠⵠΔ.ᐃΔᐃΔⵠ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⲆᐃⵠⵠΔ.ᐃΔⵠⵠⲆ, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, hi);
    this.ⲆᐃⲆᐃᐃⲆᐃ = {
      ⲆⲆΔΔⵠ: ⵠⵠᐃΔ.get("starve_aliasing") ? ⵠⵠᐃΔ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ⲆΔΔᐃⲆᐃᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ᐃΔⵠⵠⲆ: function () {
        if (nx.ⲆᐃⲆᐃᐃⲆᐃ.ⲆⲆΔΔⵠ === 0) {
          ⵠⵠᐃΔ.set("starve_aliasing", "1");
          nx.ⲆᐃⲆᐃᐃⲆᐃ.ⲆΔΔᐃⲆᐃᐃ(1);
          nx.options.ᐃᐃⲆΔΔΔᐃ.display = "inline-block";
        } else {
          ⵠⵠᐃΔ.set("starve_aliasing", "0");
          nx.ⲆᐃⲆᐃᐃⲆᐃ.ⲆΔΔᐃⲆᐃᐃ(0);
          nx.options.ᐃᐃⲆΔΔΔᐃ.display = "none";
        }
        nx.ⲆᐃⲆᐃᐃⲆᐃ.ⲆⲆΔΔⵠ = (nx.ⲆᐃⲆᐃᐃⲆᐃ.ⲆⲆΔΔⵠ + 1) % 2;
      }
    };
    if (this.ⲆᐃⲆᐃᐃⲆᐃ.ⲆⲆΔΔⵠ === 1) {
      this.options.ᐃᐃⲆΔΔΔᐃ.display = "inline-block";
    } else {
      this.ⲆᐃⲆᐃᐃⲆᐃ.ⲆΔΔᐃⲆᐃᐃ(0);
      this.options.ᐃᐃⲆΔΔΔᐃ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆᐃⲆᐃᐃⲆᐃ.ᐃΔⵠⵠⲆ, cr);
    this.ⵠᐃⲆⵠΔ = {
      ⲆⲆΔΔⵠ: ⵠⵠᐃΔ.get("starve_info_box") ? ⵠⵠᐃΔ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ᐃΔⵠᐃ: 0,
      ᐃΔⵠⵠⲆ: function () {
        if (nx.ⵠᐃⲆⵠΔ.ⲆⲆΔΔⵠ === 0) {
          ⵠⵠᐃΔ.set("starve_info_box", "1");
          nx.options.ᐃᐃᐃΔⲆⵠᐃ.display = "inline-block";
        } else {
          ⵠⵠᐃΔ.set("starve_info_box", "0");
          nx.options.ᐃᐃᐃΔⲆⵠᐃ.display = "none";
        }
        nx.ⵠᐃⲆⵠΔ.ⲆⲆΔΔⵠ = (nx.ⵠᐃⲆⵠΔ.ⲆⲆΔΔⵠ + 1) % 2;
      },
      ΔⵠⲆᐃ: function (a, b, c) {
        if (a && this.ⲆⲆΔΔⵠ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Is[b.id].ΔⲆᐃⵠ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ᐃΔⵠᐃ = c;
        }
        return a;
      }
    };
    if (this.ⵠᐃⲆⵠΔ.ⲆⲆΔΔⵠ === 1) {
      this.options.ᐃᐃᐃΔⲆⵠᐃ.display = "inline-block";
    } else {
      this.options.ᐃᐃᐃΔⲆⵠᐃ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⵠᐃⲆⵠΔ.ᐃΔⵠⵠⲆ, vg);
    if (ⵠⵠᐃΔ.get("starve_scale")) {
      oo = Number(ⵠⵠᐃΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = oo;
      oo *= Mq / Pq;
      Qq();
    }
    this.ⲆᐃⵠⲆΔΔΔ = function () {
      ⵠⵠᐃΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      oo = Mq / Pq * document.getElementById("input_ratio").value;
      Qq();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ⲆᐃⵠⲆΔΔΔ, Cl);
    this.ΔⲆⵠⵠ = {
      open: false,
      ⲆⲆΔΔⵠ: ⵠⵠᐃΔ.get("starve_safe") ? ⵠⵠᐃΔ.get("starve_safe") === "0" ? 0 : 1 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ᐃΔΔⵠⵠ: document.getElementById("agree").style,
      button: 0,
      ⵠⵠ: 0,
      ᐃΔᐃΔⵠ: function () {
        nx.ΔⲆⵠⵠ.style.display = "none";
        nx.ΔⲆⵠⵠ.open = false;
      },
      all: function () {
        if (!lx.ᐃⵠΔⵠᐃ.wait) {
          if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && lx.ᐃΔⵠᐃ.id < 0 && !lx.ⵠᐃᐃΔⲆ.enabled) {
            Δⵠᐃᐃ.ⲆΔᐃⵠᐃΔⵠⵠᐃ(nx.ΔⲆⵠⵠ.button);
          }
          nx.ΔⲆⵠⵠ.ᐃΔᐃΔⵠ();
        }
      },
      ᐃⵠⲆⵠ: function () {
        if (lx.ᐃΔⵠᐃ.ⵠⵠⵠⲆⲆ && !lx.ᐃⵠΔⵠᐃ.wait) {
          if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && lx.ᐃΔⵠᐃ.id < 0 && !lx.ⵠᐃᐃΔⲆ.enabled) {
            Δⵠᐃᐃ.ⵠᐃⵠⲆⲆΔⵠⵠᐃ(nx.ΔⲆⵠⵠ.button);
          }
          nx.ΔⲆⵠⵠ.ᐃΔᐃΔⵠ();
        }
      },
      ⵠⲆⵠⲆⵠⲆⲆⲆⵠ: function () {
        if (!lx.ᐃⵠΔⵠᐃ.wait) {
          if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && lx.ᐃΔⵠᐃ.id < 0 && !lx.ⵠᐃᐃΔⲆ.enabled) {
            Δⵠᐃᐃ.ΔⵠⲆⲆⵠΔᐃⲆⲆ(nx.ΔⲆⵠⵠ.button);
          }
          nx.ΔⲆⵠⵠ.ᐃΔᐃΔⵠ();
        }
      },
      ᐃΔⵠⵠⲆ: function () {
        if (nx.ΔⲆⵠⵠ.ⲆⲆΔΔⵠ) {
          ⵠⵠᐃΔ.set("starve_safe", "0");
          nx.ΔⲆⵠⵠ.ᐃΔΔⵠⵠ.display = "inline-block";
          nx.options.ᐃΔΔⵠⵠ.display = "none";
        } else {
          ⵠⵠᐃΔ.set("starve_safe", "1");
          nx.ΔⲆⵠⵠ.ᐃΔΔⵠⵠ.display = "none";
          nx.options.ᐃΔΔⵠⵠ.display = "inline-block";
        }
        nx.ΔⲆⵠⵠ.ⲆⲆΔΔⵠ = !nx.ΔⲆⵠⵠ.ⲆⲆΔΔⵠ;
      },
      ⲆΔⲆⵠⲆⵠΔ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ⵠΔ[Br[a].ⵠᐃ][0].ᐃΔᐃⲆᐃ === Ur ? ⵠΔ[Br[a].ⵠᐃ][0].src : ⵠΔ[Br[a].ⵠᐃ][0].ᐃΔᐃⲆᐃ;
        if (Br[a].ᐃⵠⲆⵠ && !lx.ΔᐃⲆᐃⲆ && lx.ᐃΔⵠᐃ.ⵠⵠⵠⲆⲆ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⲆⲆΔΔⵠ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 235) + "px";
        this.style.top = Math.floor(Tn - 175) + "px";
      }
    };
    this.ΔⲆⵠⵠ.ᐃΔΔⵠⵠ.display = "none";
    if (this.ΔⲆⵠⵠ.ⲆⲆΔΔⵠ) {
      this.options.ᐃΔΔⵠⵠ.display = "inline-block";
    } else {
      this.options.ᐃΔΔⵠⵠ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ΔⲆⵠⵠ.ⵠⲆⵠⲆⵠⲆⲆⲆⵠ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ΔⲆⵠⵠ.all, hs);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ΔⲆⵠⵠ.ᐃⵠⲆⵠ, En);
    document.getElementById("no_delete").addEventListener("mouseup", this.ΔⲆⵠⵠ.ᐃΔᐃΔⵠ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ΔⲆⵠⵠ.ᐃΔⵠⵠⲆ, Xa);
    this.ΔᐃᐃⲆⵠ = {
      open: false,
      ᐃᐃᐃⵠΔ: -1,
      button: tf(60, 60, 0, ⵠΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 300) + "px";
        this.style.top = Math.floor(Tn - 215) + "px";
      },
      ᐃΔᐃΔⵠ: function () {
        nx.ΔᐃᐃⲆⵠ.open = ce;
        nx.ΔᐃᐃⲆⵠ.style.display = "none";
      },
      select: function () {
        nx.ΔᐃᐃⲆⵠ.open = !nx.ΔᐃᐃⲆⵠ.open;
        if (nx.ΔᐃᐃⲆⵠ.open) {
          nx.ΔᐃᐃⲆⵠ.style.display = "inline-block";
        } else {
          nx.ΔᐃᐃⲆⵠ.style.display = "none";
        }
      },
      ⲆⲆᐃⵠⲆΔΔ: function () {
        if (nx.ΔᐃᐃⲆⵠ.ᐃᐃᐃⵠΔ >= 0) {
          Δⵠᐃᐃ.ᐃⵠᐃⲆⲆⵠᐃᐃⵠ(nx.ΔᐃᐃⲆⵠ.ᐃᐃᐃⵠΔ);
          nx.ΔᐃᐃⲆⵠ.ᐃΔᐃΔⵠ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + nx.ΔᐃᐃⲆⵠ.ᐃᐃᐃⵠΔ);
          }
        }
      },
      ΔⵠΔΔⵠ: function () {
        var a = lx.ΔᐃᐃⲆⵠ.value;
        document.getElementById("points_bank").innerHTML = ⲆᐃΔ.ⲆᐃⵠⵠᐃⲆΔ(a) + " points";
        for (var b = 0; b < Tf.length; b++) {
          if (Tf[b].ΔⲆᐃⵠᐃ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃⲆΔⲆⲆⵠⵠⲆΔ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = Tf[a - 1];
        if (lx.ΔᐃᐃⲆⵠ.value >= b.ΔⲆᐃⵠᐃ) {
          nx.ΔᐃᐃⲆⵠ.ᐃᐃᐃⵠΔ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          nx.ΔᐃᐃⲆⵠ.ᐃᐃᐃⵠΔ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ⵠΔ[Br[b[c - 1][1]].ⵠᐃ][0].ᐃΔᐃⲆᐃ === undefined ? ⵠΔ[Br[b[c - 1][1]].ⵠᐃ][0].src : ⵠΔ[Br[b[c - 1][1]].ⵠᐃ][0].ᐃΔᐃⲆᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ΔᐃᐃⲆⵠ.ᐃΔᐃΔⵠ, vg);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ΔᐃᐃⲆⵠ.ⲆⲆᐃⵠⲆΔΔ, Ah);
    for (m = 1; m < 11; m++) {
      document.getElementById("starter" + m).addEventListener("mouseup", this.ΔᐃᐃⲆⵠ.ᐃⲆΔⲆⲆⵠⵠⲆΔ, false);
    }
    this.ΔᐃΔᐃ = {
      open: zh,
      ⲆⲆΔΔⵠ: ⵠⵠᐃΔ.get("starve_quests") && ⵠⵠᐃΔ.get("starve_quests") === "1" ? 1 : 0,
      button: tf(60, 60, 0, ⵠΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(Sn - 420) + "px";
        this.style.top = Math.floor(Tn - 270) + "px";
      },
      ᐃΔᐃΔⵠ: function () {
        nx.ΔᐃΔᐃ.style.display = "none";
        nx.ΔᐃΔᐃ.open = false;
      },
      select: function () {
        nx.ΔᐃΔᐃ.open = !nx.ΔᐃΔᐃ.open;
        if (nx.ΔᐃΔᐃ.open) {
          nx.ΔᐃΔᐃ.style.display = "inline-block";
        } else {
          nx.ΔᐃΔᐃ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < kf.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⲆᐃᐃᐃᐃᐃΔ: 0,
      ⵠᐃⲆΔⲆΔΔ: 0,
      ⵠⲆⲆⵠΔΔΔⲆⵠ: function () {
        if (nx.ΔᐃΔᐃ.open) {
          var a = new Date().getTime();
          if (a - this.ⲆᐃᐃᐃᐃᐃΔ >= 1000) {
            this.ⲆᐃᐃᐃᐃᐃΔ = a;
            for (var b = 0; b < kf.length; b++) {
              if (nx.ΔᐃΔᐃ.list[b]) {
                var c = kf[b].time - (a - kx.ΔⲆᐃΔⵠ.ΔⵠΔΔⵠ + nx.ΔᐃΔᐃ.ⵠᐃⲆΔⲆΔΔ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            nx.ΔᐃΔᐃ.ⵠΔᐃⲆΔΔᐃ(b, a[b]);
          }
        }
      },
      ⵠΔᐃⲆΔΔᐃ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          lx.ᐃΔᐃⲆ.ⲆⲆⲆⵠⵠⵠⵠ(0, 1);
          nx.ⲆⲆᐃΔⵠⲆΔ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        nx.ΔᐃΔᐃ.list[a] = 0;
      },
      modify: function (a, b) {
        nx.ΔᐃΔᐃ.ⵠΔᐃⲆΔΔᐃ(a, b);
        if (nx.ΔᐃΔᐃ.ⲆⲆΔΔⵠ) {
          nx.ΔᐃΔᐃ.open = true;
          nx.ΔᐃΔᐃ.style.display = "inline-block";
        }
      },
      ᐃΔⵠⵠⲆ: function () {
        if (nx.ΔᐃΔᐃ.ⲆⲆΔΔⵠ) {
          ⵠⵠᐃΔ.set("starve_quests", "0");
          nx.options.ⲆⵠⵠⵠⲆΔᐃ.display = "none";
        } else {
          ⵠⵠᐃΔ.set("starve_quests", "1");
          nx.options.ⲆⵠⵠⵠⲆΔᐃ.display = "inline-block";
        }
        nx.ΔᐃΔᐃ.ⲆⲆΔΔⵠ = !nx.ΔᐃΔᐃ.ⲆⲆΔΔⵠ;
      },
      ᐃⵠΔΔⲆⵠΔΔⵠ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        Δⵠᐃᐃ.ⵠⲆΔΔᐃⲆΔⲆΔ(a);
      }
    };
    if (this.ΔᐃΔᐃ.ⲆⲆΔΔⵠ) {
      this.options.ⲆⵠⵠⵠⲆΔᐃ.display = "inline-block";
    } else {
      this.options.ⲆⵠⵠⵠⲆΔᐃ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ΔᐃΔᐃ.ᐃΔᐃΔⵠ, En);
    for (m = 0; kf.length > m; m++) {
      document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ΔᐃΔᐃ.ᐃⵠΔΔⲆⵠΔΔⵠ, false);
    }
    this.ⲆᐃΔⲆ = {
      open: false,
      button: tf(60, 60, 0, ⵠΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔⵠⵠⲆΔΔᐃ: [],
        ΔΔⲆΔⲆᐃᐃ: 0,
        ⵠⵠᐃ: function () {
          this.style.left = Math.floor(Sn - 335) + "px";
          this.style.top = Math.floor(Tn - 215) + "px";
        },
        ᐃΔᐃΔⵠ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          nx.ⲆᐃΔⲆ.open = Qr;
        },
        ⵠⵠⵠⵠⵠᐃΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⵠᐃᐃΔ: function (a) {
          if ((b = this.ΔⵠⵠⲆΔΔᐃ[a]).ᐃⲆᐃ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ⵠΔ[Br[b[a][0]].ⵠᐃ][0].ᐃΔᐃⲆᐃ === undefined ? ⵠΔ[Br[b[a][0]].ⵠᐃ][0].src : ⵠΔ[Br[b[a][0]].ⵠᐃ][0].ᐃΔᐃⲆᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ΔΔⲆΔⲆᐃᐃ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < Is.length; b++) {
            var d = Is[b];
            if (a === d.ᐃᐃⵠ) {
              this.ΔⵠⵠⲆΔΔᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ⵠΔ[Br[d.ΔⲆᐃⵠ].ⵠᐃ][0].ᐃΔᐃⲆᐃ === undefined ? ⵠΔ[Br[d.ΔⲆᐃⵠ].ⵠᐃ][0].src : ⵠΔ[Br[d.ΔⲆᐃⵠ].ⵠᐃ][0].ᐃΔᐃⲆᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ΔΔᐃⵠⲆΔΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⵠⵠᐃ: function () {
          this.style.left = Math.floor(Sn - 285) + "px";
          this.style.top = Math.floor(Tn - 170) + "px";
        },
        ᐃΔᐃΔⵠ: function () {
          document.getElementById("home_craft").style.display = "none";
          nx.ⲆᐃΔⲆ.open = hh;
        }
      },
      ⲆΔⵠⵠᐃⲆᐃⵠⲆ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⲆᐃΔⲆ.ΔΔᐃⵠⲆΔΔ.ᐃΔᐃΔⵠ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆᐃΔⲆ.list.ᐃΔᐃΔⵠ, Ah);
    document.getElementById("backhome").addEventListener("mouseup", this.ⲆᐃΔⲆ.list.ⵠⵠⵠⵠⵠᐃΔ, Xa);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      nx.ⲆᐃΔⲆ.list.select(2);
    }, ce);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      nx.ⲆᐃΔⲆ.list.select(1);
    }, lg);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      nx.ⲆᐃΔⲆ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      nx.ⲆᐃΔⲆ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      nx.ⲆᐃΔⲆ.list.select(4);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      nx.ⲆᐃΔⲆ.list.select(5);
    }, false);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(1);
    }, Ao);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(3);
    }, hs);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(4);
    }, vg);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(5);
    }, false);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(7);
    }, Ao);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(8);
    }, false);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(9);
    }, cj);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(10);
    }, cr);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(11);
    }, false);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(13);
    }, En);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(14);
    }, vg);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(15);
    }, Xa);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(16);
    }, ce);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(17);
    }, kq);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(18);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(19);
    }, kq);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(20);
    }, ra);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(21);
    }, zh);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(22);
    }, cj);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(23);
    }, Zh);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(24);
    }, _e);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(26);
    }, Xa);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(27);
    }, Ao);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(30);
    }, false);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(31);
    }, hi);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(32);
    }, zh);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(33);
    }, vg);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(34);
    }, false);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(36);
    }, Ah);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(37);
    }, hs);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(38);
    }, ce);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(39);
    }, mk);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(40);
    }, Qr);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(42);
    }, Qr);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(43);
    }, Cl);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(44);
    }, hi);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(45);
    }, lg);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      nx.ⲆᐃΔⲆ.list.ⵠᐃᐃΔ(47);
    }, cr);
    this.ⵠⲆᐃⵠΔ = {
      translate: {
        y: 0,
        x: 0
      },
      ⲆΔᐃⲆⲆ: {
        x: -1,
        y: -1
      },
      ⲆⲆⲆᐃ: [],
      focus: function (a) {
        var b = this.translate.y + (lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ⲆΔᐃⲆⲆ.x = a.x - this.translate.x;
          this.ⲆΔᐃⲆⲆ.y = a.y - b;
        }
      }
    };
    this.ΔⵠⲆⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠᐃ: ⵠΔ[278],
      ⵠⲆ: document.createElement("canvas")
    };
    this.ΔⵠⲆⵠ.ⵠⲆ.width = this.ΔⵠⲆⵠ.ⵠᐃ.width;
    this.ΔⵠⲆⵠ.ⵠⲆ.height = this.ΔⵠⲆⵠ.ⵠᐃ.height;
    this.ΔⵠⲆⵠ.Δ = this.ΔⵠⲆⵠ.ⵠⲆ.getContext("2d");
    this.ᐃⲆᐃⵠ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠᐃ: ⵠΔ[267],
      ΔΔⲆⲆ: Up,
      y: 0
    };
    this.ⲆⲆⵠᐃⲆⵠⲆ = function () {
      ⵠΔⲆΔⲆ = document.getElementById("team_box");
      ⵠΔⲆΔⲆ.innerHTML = "";
      ⵠΔⲆΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + kx.ⲆⲆⲆᐃ[lx.ⲆⲆⲆΔⵠ[0]].ⵠⲆⲆΔΔ + "</div";
      for (var a = 1; a < lx.ⲆⲆⲆΔⵠ.length; a++) {
        ⵠΔⲆΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + kx.ⲆⲆⲆᐃ[lx.ⲆⲆⲆΔⵠ[a]].ⵠⲆⲆΔΔ + "</div></div>";
      }
      ⵠΔⲆΔⲆ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⵠΔⲆΔⲆ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Δⵠᐃᐃ.ⲆⲆⵠᐃⲆⵠⲆ, false);
    };
    this.ΔⵠⲆⲆΔᐃⲆᐃΔ = function () {
      ⵠΔⲆΔⲆ = document.getElementById("team_box");
      ⵠΔⲆΔⲆ.innerHTML = "";
      ⵠΔⲆΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + kx.ⲆⲆⲆᐃ[lx.ⲆⲆⲆΔⵠ[0]].ⵠⲆⲆΔΔ + "</div";
      for (var a = 1; lx.ⲆⲆⲆΔⵠ.length > a; a++) {
        ⵠΔⲆΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + kx.ⲆⲆⲆᐃ[lx.ⲆⲆⲆΔⵠ[a]].ⵠⲆⲆΔΔ + "</div></div>";
      }
      ⵠΔⲆΔⲆ.innerHTML += "</div>";
      ⵠΔⲆΔⲆ.style.display = "inline-block";
    };
    this.ᐃᐃⲆⵠⵠⵠΔᐃΔ = function () {
      ⵠΔⲆΔⲆ = document.getElementById("team_box");
      ⵠΔⲆΔⲆ.innerHTML = "";
      ⵠΔⲆΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + kx.ⲆⲆⲆᐃ[lx.ⲆⲆⲆΔⵠ[0]].ⵠⲆⲆΔΔ + "</div";
      for (var a = 1; lx.ⲆⲆⲆΔⵠ.length > a; a++) {
        ⵠΔⲆΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + kx.ⲆⲆⲆᐃ[lx.ⲆⲆⲆΔⵠ[a]].ⵠⲆⲆΔΔ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (lx.ΔᐃᐃΔᐃ.lock === 0) {
        ⵠΔⲆΔⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⵠΔⲆΔⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Δⵠᐃᐃ.ᐃⲆⲆΔᐃⲆⵠΔⵠ, false);
      ⵠΔⲆΔⲆ.style.display = "inline-block";
      for (a = 1; a < lx.ⲆⲆⲆΔⵠ.length; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(1);
            }, Cl);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(2);
            }, Ah);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(3);
            }, Ah);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(4);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(5);
            }, Xa);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(6);
            }, cj);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(7);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Δⵠᐃᐃ.ⵠᐃⲆⲆᐃΔⲆ(8);
            }, false);
        }
      }
    };
    this.ⲆⲆᐃⵠᐃ = [];
    this.ⲆⲆᐃⵠᐃ[2] = {
      button: tf(60, 60, 0, ⵠΔ[556]),
      action: this.ⲆⲆⵠᐃⲆⵠⲆ
    };
    this.ⲆⲆᐃⵠᐃ[3] = {
      button: tf(60, 60, 0, ⵠΔ[556]),
      action: Δⵠᐃᐃ.ᐃⵠⵠⲆᐃᐃΔⲆᐃ
    };
    this.ⲆⲆᐃⵠᐃ[0] = {
      button: tf(60, 60, 0, ⵠΔ[557]),
      action: this.ᐃᐃⲆⵠⵠⵠΔᐃΔ
    };
    this.ⲆⲆᐃⵠᐃ[1] = {
      button: tf(60, 60, 0, ⵠΔ[561]),
      action: this.ΔⵠⲆⲆΔᐃⲆᐃΔ
    };
    this.ⲆⲆᐃⵠᐃ[4] = {
      button: tf(60, 60, 0, ⵠΔ[560]),
      action: function () {}
    };
    this.ᐃⲆΔᐃⵠ = -1;
    this.ΔᐃⲆⵠᐃΔΔ = tf(60, 60, 0, ⵠΔ[723]);
    this.ᐃⲆᐃⲆΔᐃⲆ = tf(60, 60, 0, ⵠΔ[724]);
    this.ΔΔΔⲆⵠⲆᐃ = tf(60, 60, 0, ⵠΔ[658]);
    this.ΔᐃⲆⵠⵠᐃᐃ = tf(60, 60, 0, ⵠΔ[657]);
    this.ⵠⵠⲆⵠΔΔΔ = tf(60, 60, 0, ⵠΔ[658]);
    this.ᐃⲆΔΔⲆΔⲆ = tf(60, 60, 0, ⵠΔ[316]);
    this.ⲆΔⵠⲆⵠⲆⲆ = tf(60, 60, 0, ⵠΔ[315]);
    this.ⵠⵠᐃΔⵠᐃΔ = tf(60, 60, 0, ⵠΔ[297]);
    this.ⵠⵠⲆᐃⵠⵠⲆ = tf(60, 60, 0, ⵠΔ[298]);
    this.ⲆⵠΔⲆᐃⵠᐃ = tf(60, 60, 0, ⵠΔ[418]);
    this.ΔⵠⲆᐃᐃΔⵠ = tf(60, 60, 0, ⵠΔ[938]);
    this.ᐃⵠⵠⲆΔⲆΔ = tf(60, 60, 0, ⵠΔ[412]);
    this.ΔⲆⲆⲆΔⵠΔ = tf(60, 60, 0, ⵠΔ[536]);
    this.ⲆⲆⲆᐃⵠᐃᐃ = tf(60, 60, 0, ⵠΔ[535]);
    this.ΔⲆⲆⲆⲆⲆᐃ = tf(60, 60, 0, ⵠΔ[538]);
    this.ⵠᐃⵠⲆᐃ = tf(120, 120, 0, ⵠΔ[149]);
    this.ⵠᐃⵠⲆᐃ.info.translate.x = 10;
    this.ⵠᐃⵠⲆᐃ.info.translate.y = 10;
    this.Ⲇⵠᐃ = [];
    this.Ⲇⵠᐃ[0] = tf(68, 68, 0, ⵠΔ[340], 3);
    this.Ⲇⵠᐃ[0].id = 0;
    this.Ⲇⵠᐃ[1] = tf(68, 68, 0, ⵠΔ[341], 3);
    this.Ⲇⵠᐃ[1].id = 1;
    this.Ⲇⵠᐃ[108] = tf(68, 68, 0, ⵠΔ[342], 3);
    this.Ⲇⵠᐃ[108].id = 108;
    this.Ⲇⵠᐃ[109] = tf(68, 68, 0, ⵠΔ[343], 3);
    this.Ⲇⵠᐃ[109].id = 109;
    this.Ⲇⵠᐃ[110] = tf(68, 68, 0, ⵠΔ[269], 3);
    this.Ⲇⵠᐃ[110].id = 110;
    this.Ⲇⵠᐃ[233] = tf(68, 68, 0, ⵠΔ[1155], 3);
    this.Ⲇⵠᐃ[233].id = 233;
    this.Ⲇⵠᐃ[111] = tf(68, 68, 0, ⵠΔ[270], 3);
    this.Ⲇⵠᐃ[111].id = 111;
    this.Ⲇⵠᐃ[112] = tf(68, 68, 0, ⵠΔ[271], 3);
    this.Ⲇⵠᐃ[112].id = 112;
    this.Ⲇⵠᐃ[3] = tf(68, 68, 0, ⵠΔ[272], 3);
    this.Ⲇⵠᐃ[3].id = 3;
    this.Ⲇⵠᐃ[4] = tf(68, 68, 0, ⵠΔ[344], 3);
    this.Ⲇⵠᐃ[4].id = 4;
    this.Ⲇⵠᐃ[5] = tf(68, 68, 0, ⵠΔ[345], 3);
    this.Ⲇⵠᐃ[5].id = 5;
    this.Ⲇⵠᐃ[57] = tf(68, 68, 0, ⵠΔ[831], 3);
    this.Ⲇⵠᐃ[57].id = 57;
    this.Ⲇⵠᐃ[6] = tf(68, 68, 0, ⵠΔ[346], 3);
    this.Ⲇⵠᐃ[6].id = 6;
    this.Ⲇⵠᐃ[113] = tf(68, 68, 0, ⵠΔ[273], 3);
    this.Ⲇⵠᐃ[113].id = 113;
    this.Ⲇⵠᐃ[114] = tf(68, 68, 0, ⵠΔ[358], 3);
    this.Ⲇⵠᐃ[114].id = 114;
    this.Ⲇⵠᐃ[115] = tf(68, 68, 0, ⵠΔ[348], 3);
    this.Ⲇⵠᐃ[115].id = 115;
    this.Ⲇⵠᐃ[162] = tf(68, 68, 0, ⵠΔ[349], 3);
    this.Ⲇⵠᐃ[162].id = 162;
    this.Ⲇⵠᐃ[160] = tf(68, 68, 0, ⵠΔ[350], 3);
    this.Ⲇⵠᐃ[160].id = 160;
    this.Ⲇⵠᐃ[8] = tf(68, 68, 0, ⵠΔ[274], 3);
    this.Ⲇⵠᐃ[8].id = 8;
    this.Ⲇⵠᐃ[117] = tf(68, 68, 0, ⵠΔ[351], 3);
    this.Ⲇⵠᐃ[117].id = 117;
    this.Ⲇⵠᐃ[116] = tf(68, 68, 0, ⵠΔ[275], 3);
    this.Ⲇⵠᐃ[116].id = 116;
    this.Ⲇⵠᐃ[118] = tf(68, 68, 0, ⵠΔ[276], 3);
    this.Ⲇⵠᐃ[118].id = 118;
    this.Ⲇⵠᐃ[195] = tf(68, 68, 0, ⵠΔ[352], 3);
    this.Ⲇⵠᐃ[195].id = 195;
    this.Ⲇⵠᐃ[161] = tf(68, 68, 0, ⵠΔ[353], 3);
    this.Ⲇⵠᐃ[161].id = 161;
    this.Ⲇⵠᐃ[163] = tf(68, 68, 0, ⵠΔ[354], 3);
    this.Ⲇⵠᐃ[163].id = 163;
    this.Ⲇⵠᐃ[164] = tf(68, 68, 0, ⵠΔ[355], 3);
    this.Ⲇⵠᐃ[164].id = 164;
    this.Ⲇⵠᐃ[165] = tf(68, 68, 0, ⵠΔ[356], 3);
    this.Ⲇⵠᐃ[165].id = 165;
    this.Ⲇⵠᐃ[166] = tf(68, 68, 0, ⵠΔ[357], 3);
    this.Ⲇⵠᐃ[166].id = 166;
    this.Ⲇⵠᐃ[167] = tf(68, 68, 0, ⵠΔ[359], 3);
    this.Ⲇⵠᐃ[167].id = 167;
    this.Ⲇⵠᐃ[168] = tf(68, 68, 0, ⵠΔ[382], 3);
    this.Ⲇⵠᐃ[168].id = 168;
    this.Ⲇⵠᐃ[169] = tf(68, 68, 0, ⵠΔ[383], 3);
    this.Ⲇⵠᐃ[169].id = 169;
    this.Ⲇⵠᐃ[170] = tf(68, 68, 0, ⵠΔ[384], 3);
    this.Ⲇⵠᐃ[170].id = 170;
    this.Ⲇⵠᐃ[2] = tf(68, 68, 0, ⵠΔ[386], 3);
    this.Ⲇⵠᐃ[2].id = 2;
    this.Ⲇⵠᐃ[237] = tf(68, 68, 0, ⵠΔ[1163], 3);
    this.Ⲇⵠᐃ[237].id = 237;
    this.Ⲇⵠᐃ[174] = tf(68, 68, 0, ⵠΔ[394], 3);
    this.Ⲇⵠᐃ[174].id = 174;
    this.Ⲇⵠᐃ[222] = tf(68, 68, 0, ⵠΔ[1036], 3);
    this.Ⲇⵠᐃ[222].id = 222;
    this.Ⲇⵠᐃ[231] = tf(68, 68, 0, ⵠΔ[1038], 3);
    this.Ⲇⵠᐃ[231].id = 231;
    this.Ⲇⵠᐃ[232] = tf(68, 68, 0, ⵠΔ[1040], 3);
    this.Ⲇⵠᐃ[232].id = 232;
    this.Ⲇⵠᐃ[234] = tf(68, 68, 0, ⵠΔ[1157], 3);
    this.Ⲇⵠᐃ[234].id = 234;
    this.Ⲇⵠᐃ[10] = tf(68, 68, 0, ⵠΔ[387], 3);
    this.Ⲇⵠᐃ[10].id = 10;
    this.Ⲇⵠᐃ[171] = tf(68, 68, 0, ⵠΔ[388], 3);
    this.Ⲇⵠᐃ[171].id = 171;
    this.Ⲇⵠᐃ[172] = tf(68, 68, 0, ⵠΔ[389], 3);
    this.Ⲇⵠᐃ[172].id = 172;
    this.Ⲇⵠᐃ[173] = tf(68, 68, 0, ⵠΔ[390], 3);
    this.Ⲇⵠᐃ[173].id = 173;
    this.Ⲇⵠᐃ[11] = tf(68, 68, 0, ⵠΔ[391], 3);
    this.Ⲇⵠᐃ[11].id = 11;
    this.Ⲇⵠᐃ[12] = tf(68, 68, 0, ⵠΔ[403], 3);
    this.Ⲇⵠᐃ[12].id = 12;
    this.Ⲇⵠᐃ[13] = tf(68, 68, 0, ⵠΔ[397], 3);
    this.Ⲇⵠᐃ[13].id = 13;
    this.Ⲇⵠᐃ[14] = tf(68, 68, 0, ⵠΔ[400], 3);
    this.Ⲇⵠᐃ[14].id = 14;
    this.Ⲇⵠᐃ[15] = tf(68, 68, 0, ⵠΔ[406], 3);
    this.Ⲇⵠᐃ[15].id = 15;
    this.Ⲇⵠᐃ[16] = tf(68, 68, 0, ⵠΔ[875], 3);
    this.Ⲇⵠᐃ[16].id = 16;
    this.Ⲇⵠᐃ[119] = tf(68, 68, 0, ⵠΔ[410], 3);
    this.Ⲇⵠᐃ[119].id = 119;
    this.Ⲇⵠᐃ[23] = tf(68, 68, 0, ⵠΔ[422], 3);
    this.Ⲇⵠᐃ[23].id = 23;
    this.Ⲇⵠᐃ[24] = tf(68, 68, 0, ⵠΔ[425], 3);
    this.Ⲇⵠᐃ[24].id = 24;
    this.Ⲇⵠᐃ[87] = tf(68, 68, 0, ⵠΔ[1229], 3);
    this.Ⲇⵠᐃ[87].id = 87;
    this.Ⲇⵠᐃ[88] = tf(68, 68, 0, ⵠΔ[1232], 3);
    this.Ⲇⵠᐃ[88].id = 88;
    this.Ⲇⵠᐃ[80] = tf(68, 68, 0, ⵠΔ[1139], 3);
    this.Ⲇⵠᐃ[80].id = 80;
    this.Ⲇⵠᐃ[81] = tf(68, 68, 0, ⵠΔ[1142], 3);
    this.Ⲇⵠᐃ[81].id = 81;
    this.Ⲇⵠᐃ[101] = tf(68, 68, 0, ⵠΔ[1167], 3);
    this.Ⲇⵠᐃ[101].id = 101;
    this.Ⲇⵠᐃ[64] = tf(68, 68, 0, ⵠΔ[571], 3);
    this.Ⲇⵠᐃ[64].id = 64;
    this.Ⲇⵠᐃ[71] = tf(68, 68, 0, ⵠΔ[1240], 3);
    this.Ⲇⵠᐃ[71].id = 71;
    this.Ⲇⵠᐃ[102] = tf(68, 68, 0, ⵠΔ[1170], 3);
    this.Ⲇⵠᐃ[102].id = 102;
    this.Ⲇⵠᐃ[65] = tf(68, 68, 0, ⵠΔ[574], 3);
    this.Ⲇⵠᐃ[65].id = 65;
    this.Ⲇⵠᐃ[72] = tf(68, 68, 0, ⵠΔ[1243], 3);
    this.Ⲇⵠᐃ[72].id = 72;
    this.Ⲇⵠᐃ[103] = tf(68, 68, 0, ⵠΔ[1173], 3);
    this.Ⲇⵠᐃ[103].id = 103;
    this.Ⲇⵠᐃ[66] = tf(68, 68, 0, ⵠΔ[577], 3);
    this.Ⲇⵠᐃ[66].id = 66;
    this.Ⲇⵠᐃ[73] = tf(68, 68, 0, ⵠΔ[1246], 3);
    this.Ⲇⵠᐃ[73].id = 73;
    this.Ⲇⵠᐃ[104] = tf(68, 68, 0, ⵠΔ[1176], 3);
    this.Ⲇⵠᐃ[104].id = 104;
    this.Ⲇⵠᐃ[67] = tf(68, 68, 0, ⵠΔ[580], 3);
    this.Ⲇⵠᐃ[67].id = 67;
    this.Ⲇⵠᐃ[74] = tf(68, 68, 0, ⵠΔ[1249], 3);
    this.Ⲇⵠᐃ[74].id = 74;
    this.Ⲇⵠᐃ[105] = tf(68, 68, 0, ⵠΔ[1179], 3);
    this.Ⲇⵠᐃ[105].id = 105;
    this.Ⲇⵠᐃ[68] = tf(68, 68, 0, ⵠΔ[583], 3);
    this.Ⲇⵠᐃ[68].id = 68;
    this.Ⲇⵠᐃ[75] = tf(68, 68, 0, ⵠΔ[1252], 3);
    this.Ⲇⵠᐃ[75].id = 75;
    this.Ⲇⵠᐃ[106] = tf(68, 68, 0, ⵠΔ[1182], 3);
    this.Ⲇⵠᐃ[106].id = 106;
    this.Ⲇⵠᐃ[69] = tf(68, 68, 0, ⵠΔ[586], 3);
    this.Ⲇⵠᐃ[69].id = 69;
    this.Ⲇⵠᐃ[76] = tf(68, 68, 0, ⵠΔ[1255], 3);
    this.Ⲇⵠᐃ[76].id = 76;
    this.Ⲇⵠᐃ[107] = tf(68, 68, 0, ⵠΔ[1185], 3);
    this.Ⲇⵠᐃ[107].id = 107;
    this.Ⲇⵠᐃ[70] = tf(68, 68, 0, ⵠΔ[589], 3);
    this.Ⲇⵠᐃ[70].id = 70;
    this.Ⲇⵠᐃ[94] = tf(68, 68, 0, ⵠΔ[1258], 3);
    this.Ⲇⵠᐃ[94].id = 94;
    this.Ⲇⵠᐃ[95] = tf(68, 68, 0, ⵠΔ[1261], 3);
    this.Ⲇⵠᐃ[95].id = 95;
    this.Ⲇⵠᐃ[96] = tf(68, 68, 0, ⵠΔ[1264], 3);
    this.Ⲇⵠᐃ[96].id = 96;
    this.Ⲇⵠᐃ[97] = tf(68, 68, 0, ⵠΔ[1267], 3);
    this.Ⲇⵠᐃ[97].id = 97;
    this.Ⲇⵠᐃ[98] = tf(68, 68, 0, ⵠΔ[1270], 3);
    this.Ⲇⵠᐃ[98].id = 98;
    this.Ⲇⵠᐃ[99] = tf(68, 68, 0, ⵠΔ[1273], 3);
    this.Ⲇⵠᐃ[99].id = 99;
    this.Ⲇⵠᐃ[58] = tf(68, 68, 0, ⵠΔ[828], 3);
    this.Ⲇⵠᐃ[58].id = 58;
    this.Ⲇⵠᐃ[25] = tf(68, 68, 0, ⵠΔ[431], 3);
    this.Ⲇⵠᐃ[25].id = 25;
    this.Ⲇⵠᐃ[26] = tf(68, 68, 0, ⵠΔ[434], 3);
    this.Ⲇⵠᐃ[26].id = 26;
    this.Ⲇⵠᐃ[27] = tf(68, 68, 0, ⵠΔ[437], 3);
    this.Ⲇⵠᐃ[27].id = 27;
    this.Ⲇⵠᐃ[28] = tf(68, 68, 0, ⵠΔ[440], 3);
    this.Ⲇⵠᐃ[28].id = 28;
    this.Ⲇⵠᐃ[120] = tf(68, 68, 0, ⵠΔ[443], 3);
    this.Ⲇⵠᐃ[120].id = 120;
    this.Ⲇⵠᐃ[29] = tf(68, 68, 0, ⵠΔ[385], 3);
    this.Ⲇⵠᐃ[29].id = 29;
    this.Ⲇⵠᐃ[121] = tf(68, 68, 0, ⵠΔ[446], 3);
    this.Ⲇⵠᐃ[121].id = 121;
    this.Ⲇⵠᐃ[30] = tf(68, 68, 0, ⵠΔ[457], 3);
    this.Ⲇⵠᐃ[30].id = 30;
    this.Ⲇⵠᐃ[9] = tf(68, 68, 0, ⵠΔ[862], 3);
    this.Ⲇⵠᐃ[9].id = 9;
    this.Ⲇⵠᐃ[31] = tf(68, 68, 0, ⵠΔ[459], 3);
    this.Ⲇⵠᐃ[31].id = 31;
    this.Ⲇⵠᐃ[32] = tf(68, 68, 0, ⵠΔ[1018], 3);
    this.Ⲇⵠᐃ[32].id = 32;
    this.Ⲇⵠᐃ[33] = tf(68, 68, 0, ⵠΔ[474], 3);
    this.Ⲇⵠᐃ[33].id = 33;
    this.Ⲇⵠᐃ[35] = tf(68, 68, 0, ⵠΔ[479], 3);
    this.Ⲇⵠᐃ[35].id = 35;
    this.Ⲇⵠᐃ[36] = tf(68, 68, 0, ⵠΔ[482], 3);
    this.Ⲇⵠᐃ[36].id = 36;
    this.Ⲇⵠᐃ[37] = tf(68, 68, 0, ⵠΔ[485], 3);
    this.Ⲇⵠᐃ[37].id = 37;
    this.Ⲇⵠᐃ[38] = tf(68, 68, 0, ⵠΔ[488], 3);
    this.Ⲇⵠᐃ[38].id = 38;
    this.Ⲇⵠᐃ[39] = tf(68, 68, 0, ⵠΔ[491], 3);
    this.Ⲇⵠᐃ[39].id = 39;
    this.Ⲇⵠᐃ[122] = tf(68, 68, 0, ⵠΔ[494], 3);
    this.Ⲇⵠᐃ[122].id = 122;
    this.Ⲇⵠᐃ[123] = tf(68, 68, 0, ⵠΔ[497], 3);
    this.Ⲇⵠᐃ[123].id = 123;
    this.Ⲇⵠᐃ[124] = tf(68, 68, 0, ⵠΔ[501], 3);
    this.Ⲇⵠᐃ[124].id = 124;
    this.Ⲇⵠᐃ[40] = tf(68, 68, 0, ⵠΔ[504], 3);
    this.Ⲇⵠᐃ[40].id = 40;
    this.Ⲇⵠᐃ[146] = tf(68, 68, 0, ⵠΔ[506], 3);
    this.Ⲇⵠᐃ[146].id = 146;
    this.Ⲇⵠᐃ[240] = tf(68, 68, 0, ⵠΔ[1234], 3);
    this.Ⲇⵠᐃ[240].id = 240;
    this.Ⲇⵠᐃ[147] = tf(68, 68, 0, ⵠΔ[514], 3);
    this.Ⲇⵠᐃ[147].id = 147;
    this.Ⲇⵠᐃ[148] = tf(68, 68, 0, ⵠΔ[520], 3);
    this.Ⲇⵠᐃ[148].id = 148;
    this.Ⲇⵠᐃ[149] = tf(68, 68, 0, ⵠΔ[522], 3);
    this.Ⲇⵠᐃ[149].id = 149;
    this.Ⲇⵠᐃ[150] = tf(68, 68, 0, ⵠΔ[524], 3);
    this.Ⲇⵠᐃ[150].id = 150;
    this.Ⲇⵠᐃ[151] = tf(68, 68, 0, ⵠΔ[531], 3);
    this.Ⲇⵠᐃ[151].id = 151;
    this.Ⲇⵠᐃ[158] = tf(68, 68, 0, ⵠΔ[534], 3);
    this.Ⲇⵠᐃ[158].id = 158;
    this.Ⲇⵠᐃ[159] = tf(68, 68, 0, ⵠΔ[554], 3);
    this.Ⲇⵠᐃ[159].id = 159;
    this.Ⲇⵠᐃ[43] = tf(68, 68, 0, ⵠΔ[543], 3);
    this.Ⲇⵠᐃ[43].id = 43;
    this.Ⲇⵠᐃ[45] = tf(68, 68, 0, ⵠΔ[552], 3);
    this.Ⲇⵠᐃ[45].id = 45;
    this.Ⲇⵠᐃ[125] = tf(68, 68, 0, ⵠΔ[606], 3);
    this.Ⲇⵠᐃ[125].id = 125;
    this.Ⲇⵠᐃ[221] = tf(68, 68, 0, ⵠΔ[1237], 3);
    this.Ⲇⵠᐃ[221].id = 221;
    this.Ⲇⵠᐃ[223] = tf(68, 68, 0, ⵠΔ[1029], 3);
    this.Ⲇⵠᐃ[223].id = 223;
    this.Ⲇⵠᐃ[224] = tf(68, 68, 0, ⵠΔ[1032], 3);
    this.Ⲇⵠᐃ[224].id = 224;
    this.Ⲇⵠᐃ[230] = tf(68, 68, 0, ⵠΔ[1118], 3);
    this.Ⲇⵠᐃ[230].id = 230;
    this.Ⲇⵠᐃ[89] = tf(68, 68, 0, ⵠΔ[1047], 3);
    this.Ⲇⵠᐃ[89].id = 89;
    this.Ⲇⵠᐃ[225] = tf(68, 68, 0, ⵠΔ[1050], 3);
    this.Ⲇⵠᐃ[225].id = 225;
    this.Ⲇⵠᐃ[227] = tf(68, 68, 0, ⵠΔ[1081], 3);
    this.Ⲇⵠᐃ[227].id = 227;
    this.Ⲇⵠᐃ[239] = tf(68, 68, 0, ⵠΔ[1225], 3);
    this.Ⲇⵠᐃ[239].id = 239;
    this.Ⲇⵠᐃ[228] = tf(68, 68, 0, ⵠΔ[1096], 3);
    this.Ⲇⵠᐃ[228].id = 228;
    this.Ⲇⵠᐃ[229] = tf(68, 68, 0, ⵠΔ[1111], 3);
    this.Ⲇⵠᐃ[229].id = 229;
    this.Ⲇⵠᐃ[226] = tf(68, 68, 0, ⵠΔ[1190], 3);
    this.Ⲇⵠᐃ[226].id = 226;
    this.Ⲇⵠᐃ[126] = tf(68, 68, 0, ⵠΔ[610], 3);
    this.Ⲇⵠᐃ[126].id = 126;
    this.Ⲇⵠᐃ[127] = tf(68, 68, 0, ⵠΔ[615], 3);
    this.Ⲇⵠᐃ[127].id = 127;
    this.Ⲇⵠᐃ[128] = tf(68, 68, 0, ⵠΔ[614], 3);
    this.Ⲇⵠᐃ[128].id = 128;
    this.Ⲇⵠᐃ[46] = tf(68, 68, 0, ⵠΔ[617], 3);
    this.Ⲇⵠᐃ[46].id = 46;
    this.Ⲇⵠᐃ[50] = tf(68, 68, 0, ⵠΔ[701], 3);
    this.Ⲇⵠᐃ[50].id = 50;
    this.Ⲇⵠᐃ[51] = tf(68, 68, 0, ⵠΔ[703], 3);
    this.Ⲇⵠᐃ[51].id = 51;
    this.Ⲇⵠᐃ[52] = tf(68, 68, 0, ⵠΔ[707], 3);
    this.Ⲇⵠᐃ[52].id = 52;
    this.Ⲇⵠᐃ[55] = tf(68, 68, 0, ⵠΔ[710], 3);
    this.Ⲇⵠᐃ[55].id = 55;
    this.Ⲇⵠᐃ[129] = tf(68, 68, 0, ⵠΔ[625], 3);
    this.Ⲇⵠᐃ[129].id = 129;
    this.Ⲇⵠᐃ[130] = tf(68, 68, 0, ⵠΔ[628], 3);
    this.Ⲇⵠᐃ[130].id = 130;
    this.Ⲇⵠᐃ[131] = tf(68, 68, 0, ⵠΔ[630], 3);
    this.Ⲇⵠᐃ[131].id = 131;
    this.Ⲇⵠᐃ[132] = tf(68, 68, 0, ⵠΔ[633], 3);
    this.Ⲇⵠᐃ[132].id = 132;
    this.Ⲇⵠᐃ[133] = tf(68, 68, 0, ⵠΔ[636], 3);
    this.Ⲇⵠᐃ[133].id = 133;
    this.Ⲇⵠᐃ[134] = tf(68, 68, 0, ⵠΔ[640], 3);
    this.Ⲇⵠᐃ[134].id = 134;
    this.Ⲇⵠᐃ[135] = tf(68, 68, 0, ⵠΔ[645], 3);
    this.Ⲇⵠᐃ[135].id = 135;
    this.Ⲇⵠᐃ[47] = tf(68, 68, 0, ⵠΔ[648], 3);
    this.Ⲇⵠᐃ[47].id = 47;
    this.Ⲇⵠᐃ[48] = tf(68, 68, 0, ⵠΔ[651], 3);
    this.Ⲇⵠᐃ[48].id = 48;
    this.Ⲇⵠᐃ[49] = tf(68, 68, 0, ⵠΔ[653], 3);
    this.Ⲇⵠᐃ[49].id = 49;
    this.Ⲇⵠᐃ[136] = tf(68, 68, 0, ⵠΔ[661], 3);
    this.Ⲇⵠᐃ[136].id = 136;
    this.Ⲇⵠᐃ[143] = tf(68, 68, 0, ⵠΔ[689], 3);
    this.Ⲇⵠᐃ[143].id = 143;
    this.Ⲇⵠᐃ[137] = tf(68, 68, 0, ⵠΔ[663], 3);
    this.Ⲇⵠᐃ[137].id = 137;
    this.Ⲇⵠᐃ[138] = tf(68, 68, 0, ⵠΔ[665], 3);
    this.Ⲇⵠᐃ[138].id = 138;
    this.Ⲇⵠᐃ[139] = tf(68, 68, 0, ⵠΔ[675], 3);
    this.Ⲇⵠᐃ[139].id = 139;
    this.Ⲇⵠᐃ[140] = tf(68, 68, 0, ⵠΔ[682], 3);
    this.Ⲇⵠᐃ[140].id = 140;
    this.Ⲇⵠᐃ[141] = tf(68, 68, 0, ⵠΔ[683], 3);
    this.Ⲇⵠᐃ[141].id = 141;
    this.Ⲇⵠᐃ[142] = tf(68, 68, 0, ⵠΔ[686], 3);
    this.Ⲇⵠᐃ[142].id = 142;
    this.Ⲇⵠᐃ[144] = tf(68, 68, 0, ⵠΔ[719], 3);
    this.Ⲇⵠᐃ[144].id = 144;
    this.Ⲇⵠᐃ[145] = tf(68, 68, 0, ⵠΔ[731], 3);
    this.Ⲇⵠᐃ[145].id = 145;
    this.Ⲇⵠᐃ[59] = tf(68, 68, 0, ⵠΔ[733], 3);
    this.Ⲇⵠᐃ[59].id = 59;
    this.Ⲇⵠᐃ[62] = tf(68, 68, 0, ⵠΔ[565], 3);
    this.Ⲇⵠᐃ[62].id = 62;
    this.Ⲇⵠᐃ[185] = tf(68, 68, 0, ⵠΔ[590], 3);
    this.Ⲇⵠᐃ[185].id = 185;
    this.Ⲇⵠᐃ[184] = tf(68, 68, 0, ⵠΔ[752], 3);
    this.Ⲇⵠᐃ[184].id = 184;
    this.Ⲇⵠᐃ[187] = tf(68, 68, 0, ⵠΔ[591], 3);
    this.Ⲇⵠᐃ[187].id = 187;
    this.Ⲇⵠᐃ[186] = tf(68, 68, 0, ⵠΔ[754], 3);
    this.Ⲇⵠᐃ[186].id = 186;
    this.Ⲇⵠᐃ[77] = tf(68, 68, 0, ⵠΔ[757], 3);
    this.Ⲇⵠᐃ[77].id = 77;
    this.Ⲇⵠᐃ[175] = tf(68, 68, 0, ⵠΔ[759], 3);
    this.Ⲇⵠᐃ[175].id = 175;
    this.Ⲇⵠᐃ[176] = tf(68, 68, 0, ⵠΔ[763], 3);
    this.Ⲇⵠᐃ[176].id = 176;
    this.Ⲇⵠᐃ[78] = tf(68, 68, 0, ⵠΔ[761], 3);
    this.Ⲇⵠᐃ[78].id = 78;
    this.Ⲇⵠᐃ[177] = tf(68, 68, 0, ⵠΔ[766], 3);
    this.Ⲇⵠᐃ[177].id = 177;
    this.Ⲇⵠᐃ[79] = tf(68, 68, 0, ⵠΔ[765], 3);
    this.Ⲇⵠᐃ[79].id = 79;
    this.Ⲇⵠᐃ[83] = tf(68, 68, 0, ⵠΔ[769], 3);
    this.Ⲇⵠᐃ[83].id = 83;
    this.Ⲇⵠᐃ[84] = tf(68, 68, 0, ⵠΔ[773], 3);
    this.Ⲇⵠᐃ[84].id = 84;
    this.Ⲇⵠᐃ[178] = tf(68, 68, 0, ⵠΔ[774], 3);
    this.Ⲇⵠᐃ[178].id = 178;
    this.Ⲇⵠᐃ[179] = tf(68, 68, 0, ⵠΔ[775], 3);
    this.Ⲇⵠᐃ[179].id = 179;
    this.Ⲇⵠᐃ[86] = tf(68, 68, 0, ⵠΔ[778], 3);
    this.Ⲇⵠᐃ[86].id = 86;
    this.Ⲇⵠᐃ[85] = tf(68, 68, 0, ⵠΔ[781], 3);
    this.Ⲇⵠᐃ[85].id = 85;
    this.Ⲇⵠᐃ[180] = tf(68, 68, 0, ⵠΔ[786], 3);
    this.Ⲇⵠᐃ[180].id = 180;
    this.Ⲇⵠᐃ[181] = tf(68, 68, 0, ⵠΔ[787], 3);
    this.Ⲇⵠᐃ[181].id = 181;
    this.Ⲇⵠᐃ[182] = tf(68, 68, 0, ⵠΔ[790], 3);
    this.Ⲇⵠᐃ[182].id = 182;
    this.Ⲇⵠᐃ[183] = tf(68, 68, 0, ⵠΔ[801], 3);
    this.Ⲇⵠᐃ[183].id = 183;
    this.Ⲇⵠᐃ[188] = tf(68, 68, 0, ⵠΔ[810], 3);
    this.Ⲇⵠᐃ[188].id = 188;
    this.Ⲇⵠᐃ[189] = tf(68, 68, 0, ⵠΔ[815], 3);
    this.Ⲇⵠᐃ[189].id = 189;
    this.Ⲇⵠᐃ[190] = tf(68, 68, 0, ⵠΔ[844], 3);
    this.Ⲇⵠᐃ[190].id = 190;
    this.Ⲇⵠᐃ[191] = tf(68, 68, 0, ⵠΔ[836], 3);
    this.Ⲇⵠᐃ[191].id = 191;
    this.Ⲇⵠᐃ[192] = tf(68, 68, 0, ⵠΔ[841], 3);
    this.Ⲇⵠᐃ[192].id = 192;
    this.Ⲇⵠᐃ[193] = tf(68, 68, 0, ⵠΔ[847], 3);
    this.Ⲇⵠᐃ[193].id = 193;
    this.Ⲇⵠᐃ[194] = tf(68, 68, 0, ⵠΔ[851], 3);
    this.Ⲇⵠᐃ[194].id = 194;
    this.Ⲇⵠᐃ[206] = tf(68, 68, 0, ⵠΔ[961], 3);
    this.Ⲇⵠᐃ[206].id = 206;
    this.Ⲇⵠᐃ[207] = tf(68, 68, 0, ⵠΔ[974], 3);
    this.Ⲇⵠᐃ[207].id = 207;
    this.Ⲇⵠᐃ[204] = tf(68, 68, 0, ⵠΔ[951], 3);
    this.Ⲇⵠᐃ[204].id = 204;
    this.Ⲇⵠᐃ[205] = tf(68, 68, 0, ⵠΔ[956], 3);
    this.Ⲇⵠᐃ[205].id = 205;
    this.Ⲇⵠᐃ[208] = tf(68, 68, 0, ⵠΔ[968], 3);
    this.Ⲇⵠᐃ[208].id = 208;
    this.Ⲇⵠᐃ[209] = tf(68, 68, 0, ⵠΔ[973], 3);
    this.Ⲇⵠᐃ[209].id = 209;
    this.Ⲇⵠᐃ[210] = tf(68, 68, 0, ⵠΔ[983], 3);
    this.Ⲇⵠᐃ[210].id = 210;
    this.Ⲇⵠᐃ[211] = tf(68, 68, 0, ⵠΔ[988], 3);
    this.Ⲇⵠᐃ[211].id = 211;
    this.Ⲇⵠᐃ[41] = tf(68, 68, 0, ⵠΔ[881], 3);
    this.Ⲇⵠᐃ[41].id = 41;
    this.Ⲇⵠᐃ[42] = tf(68, 68, 0, ⵠΔ[883], 3);
    this.Ⲇⵠᐃ[42].id = 42;
    this.Ⲇⵠᐃ[12] = tf(68, 68, 0, ⵠΔ[403], 3);
    this.Ⲇⵠᐃ[12].id = 12;
    this.Ⲇⵠᐃ[16] = tf(68, 68, 0, ⵠΔ[875], 3);
    this.Ⲇⵠᐃ[16].id = 16;
    this.Ⲇⵠᐃ[196] = tf(68, 68, 0, ⵠΔ[898], 3);
    this.Ⲇⵠᐃ[196].id = 196;
    this.Ⲇⵠᐃ[18] = tf(68, 68, 0, ⵠΔ[899], 3);
    this.Ⲇⵠᐃ[18].id = 18;
    this.Ⲇⵠᐃ[197] = tf(68, 68, 0, ⵠΔ[906], 3);
    this.Ⲇⵠᐃ[197].id = 197;
    this.Ⲇⵠᐃ[198] = tf(68, 68, 0, ⵠΔ[908], 3);
    this.Ⲇⵠᐃ[198].id = 198;
    this.Ⲇⵠᐃ[61] = tf(68, 68, 0, ⵠΔ[911], 3);
    this.Ⲇⵠᐃ[61].id = 61;
    this.Ⲇⵠᐃ[201] = tf(68, 68, 0, ⵠΔ[871], 3);
    this.Ⲇⵠᐃ[201].id = 201;
    this.Ⲇⵠᐃ[199] = tf(68, 68, 0, ⵠΔ[863], 3);
    this.Ⲇⵠᐃ[199].id = 199;
    this.Ⲇⵠᐃ[200] = tf(68, 68, 0, ⵠΔ[868], 3);
    this.Ⲇⵠᐃ[200].id = 200;
    this.ᐃᐃⵠⵠᐃ = [];
    for (m = 0; m < 250; m++) {
      this.ᐃᐃⵠⵠᐃ[m] = tf(0, 0, 0, ⵠΔ[366]);
    }
    this.ΔⲆΔ = [];
    this.ΔⲆΔ[0] = tf(60, 60, 0, ⵠΔ[261], 3);
    this.ΔⲆΔ[0].id = 0;
    this.ΔⲆΔ[1] = tf(60, 60, 0, ⵠΔ[312], 3);
    this.ΔⲆΔ[1].id = 1;
    this.ΔⲆΔ[108] = tf(60, 60, 0, ⵠΔ[315], 3);
    this.ΔⲆΔ[108].id = 108;
    this.ΔⲆΔ[108].info.ⵠᐃ[2] = this.ΔⲆΔ[108].info.ⵠᐃ[0];
    this.ΔⲆΔ[109] = tf(60, 60, 0, ⵠΔ[316], 3);
    this.ΔⲆΔ[109].id = 109;
    this.ΔⲆΔ[109].info.ⵠᐃ[2] = this.ΔⲆΔ[109].info.ⵠᐃ[0];
    this.ΔⲆΔ[110] = tf(60, 60, 0, ⵠΔ[277], 3);
    this.ΔⲆΔ[110].id = 110;
    this.ΔⲆΔ[233] = tf(60, 60, 0, ⵠΔ[1154], 3);
    this.ΔⲆΔ[233].id = 233;
    this.ΔⲆΔ[111] = tf(60, 60, 0, ⵠΔ[297], 3);
    this.ΔⲆΔ[111].id = 111;
    this.ΔⲆΔ[111].info.ⵠᐃ[2] = this.ΔⲆΔ[111].info.ⵠᐃ[0];
    this.ΔⲆΔ[112] = tf(60, 60, 0, ⵠΔ[298], 3);
    this.ΔⲆΔ[112].id = 112;
    this.ΔⲆΔ[112].info.ⵠᐃ[2] = this.ΔⲆΔ[112].info.ⵠᐃ[0];
    this.ΔⲆΔ[3] = tf(60, 60, 0, ⵠΔ[258], 3);
    this.ΔⲆΔ[3].id = 3;
    this.ΔⲆΔ[4] = tf(60, 60, 0, ⵠΔ[296], 3);
    this.ΔⲆΔ[4].id = 4;
    this.ΔⲆΔ[5] = tf(60, 60, 0, ⵠΔ[292], 3);
    this.ΔⲆΔ[5].id = 5;
    this.ΔⲆΔ[57] = tf(60, 60, 0, ⵠΔ[829], 3);
    this.ΔⲆΔ[57].id = 57;
    this.ΔⲆΔ[6] = tf(60, 60, 0, ⵠΔ[293], 3);
    this.ΔⲆΔ[6].id = 6;
    this.ΔⲆΔ[113] = tf(60, 60, 0, ⵠΔ[309], 3);
    this.ΔⲆΔ[113].id = 113;
    this.ΔⲆΔ[114] = tf(60, 60, 0, ⵠΔ[310], 3);
    this.ΔⲆΔ[114].id = 114;
    this.ΔⲆΔ[115] = tf(60, 60, 0, ⵠΔ[311], 3);
    this.ΔⲆΔ[115].id = 115;
    this.ΔⲆΔ[162] = tf(60, 60, 0, ⵠΔ[317], 3);
    this.ΔⲆΔ[162].id = 162;
    this.ΔⲆΔ[160] = tf(60, 60, 0, ⵠΔ[319], 3);
    this.ΔⲆΔ[160].id = 160;
    this.ΔⲆΔ[8] = tf(60, 60, 0, ⵠΔ[313], 3);
    this.ΔⲆΔ[8].id = 8;
    this.ΔⲆΔ[117] = tf(60, 60, 0, ⵠΔ[323], 3);
    this.ΔⲆΔ[117].id = 117;
    this.ΔⲆΔ[116] = tf(60, 60, 0, ⵠΔ[300], 3);
    this.ΔⲆΔ[116].id = 116;
    this.ΔⲆΔ[118] = tf(60, 60, 0, ⵠΔ[328], 3);
    this.ΔⲆΔ[118].id = 118;
    this.ΔⲆΔ[195] = tf(60, 60, 0, ⵠΔ[303], 3);
    this.ΔⲆΔ[195].id = 195;
    this.ΔⲆΔ[161] = tf(60, 60, 0, ⵠΔ[305], 3);
    this.ΔⲆΔ[161].id = 161;
    this.ΔⲆΔ[161].info.ⵠᐃ[2] = this.ΔⲆΔ[161].info.ⵠᐃ[0];
    this.ΔⲆΔ[163] = tf(60, 60, 0, ⵠΔ[329], 3);
    this.ΔⲆΔ[163].id = 163;
    this.ΔⲆΔ[164] = tf(60, 60, 0, ⵠΔ[330], 3);
    this.ΔⲆΔ[164].id = 164;
    this.ΔⲆΔ[165] = tf(60, 60, 0, ⵠΔ[331], 3);
    this.ΔⲆΔ[165].id = 165;
    this.ΔⲆΔ[166] = tf(60, 60, 0, ⵠΔ[335], 3);
    this.ΔⲆΔ[166].id = 166;
    this.ΔⲆΔ[167] = tf(60, 60, 0, ⵠΔ[337], 3);
    this.ΔⲆΔ[167].id = 167;
    this.ΔⲆΔ[168] = tf(60, 60, 0, ⵠΔ[361], 3);
    this.ΔⲆΔ[168].id = 168;
    this.ΔⲆΔ[169] = tf(60, 60, 0, ⵠΔ[362], 3);
    this.ΔⲆΔ[169].id = 169;
    this.ΔⲆΔ[170] = tf(60, 60, 0, ⵠΔ[364], 3);
    this.ΔⲆΔ[170].id = 170;
    this.ΔⲆΔ[29] = tf(60, 60, 0, ⵠΔ[392], 3);
    this.ΔⲆΔ[29].id = 29;
    this.ΔⲆΔ[10] = tf(60, 60, 0, ⵠΔ[369], 3);
    this.ΔⲆΔ[10].id = 10;
    this.ΔⲆΔ[171] = tf(60, 60, 0, ⵠΔ[372], 3);
    this.ΔⲆΔ[171].id = 171;
    this.ΔⲆΔ[172] = tf(60, 60, 0, ⵠΔ[375], 3);
    this.ΔⲆΔ[172].id = 172;
    this.ΔⲆΔ[173] = tf(60, 60, 0, ⵠΔ[378], 3);
    this.ΔⲆΔ[173].id = 173;
    this.ΔⲆΔ[2] = tf(60, 60, 0, ⵠΔ[368], 3);
    this.ΔⲆΔ[2].id = 2;
    this.ΔⲆΔ[2].info.ⵠᐃ[2] = this.ΔⲆΔ[2].info.ⵠᐃ[0];
    this.ΔⲆΔ[237] = tf(60, 60, 0, ⵠΔ[1162], 3);
    this.ΔⲆΔ[237].id = 237;
    this.ΔⲆΔ[237].info.ⵠᐃ[2] = this.ΔⲆΔ[237].info.ⵠᐃ[0];
    this.ΔⲆΔ[174] = tf(60, 60, 0, ⵠΔ[393], 3);
    this.ΔⲆΔ[174].id = 174;
    this.ΔⲆΔ[174].info.ⵠᐃ[2] = this.ΔⲆΔ[174].info.ⵠᐃ[0];
    this.ΔⲆΔ[222] = tf(60, 60, 0, ⵠΔ[1035], 3);
    this.ΔⲆΔ[222].id = 222;
    this.ΔⲆΔ[231] = tf(60, 60, 0, ⵠΔ[1037], 3);
    this.ΔⲆΔ[231].id = 231;
    this.ΔⲆΔ[232] = tf(60, 60, 0, ⵠΔ[1039], 3);
    this.ΔⲆΔ[232].id = 232;
    this.ΔⲆΔ[234] = tf(60, 60, 0, ⵠΔ[1156], 3);
    this.ΔⲆΔ[234].id = 234;
    this.ΔⲆΔ[10] = tf(60, 60, 0, ⵠΔ[369], 3);
    this.ΔⲆΔ[10].id = 10;
    this.ΔⲆΔ[11] = tf(60, 60, 0, ⵠΔ[381], 3);
    this.ΔⲆΔ[11].id = 11;
    this.ΔⲆΔ[12] = tf(60, 60, 0, ⵠΔ[401], 3);
    this.ΔⲆΔ[12].id = 12;
    this.ΔⲆΔ[13] = tf(60, 60, 0, ⵠΔ[395], 3);
    this.ΔⲆΔ[13].id = 13;
    this.ΔⲆΔ[14] = tf(60, 60, 0, ⵠΔ[398], 3);
    this.ΔⲆΔ[14].id = 14;
    this.ΔⲆΔ[15] = tf(60, 60, 0, ⵠΔ[404], 3);
    this.ΔⲆΔ[15].id = 15;
    this.ΔⲆΔ[16] = tf(60, 60, 0, ⵠΔ[874], 3);
    this.ΔⲆΔ[16].id = 16;
    this.ΔⲆΔ[119] = tf(60, 60, 0, ⵠΔ[408], 3);
    this.ΔⲆΔ[119].id = 119;
    this.ΔⲆΔ[23] = tf(60, 60, 0, ⵠΔ[420], 3);
    this.ΔⲆΔ[23].id = 23;
    this.ΔⲆΔ[24] = tf(60, 60, 0, ⵠΔ[423], 3);
    this.ΔⲆΔ[24].id = 24;
    this.ΔⲆΔ[87] = tf(60, 60, 0, ⵠΔ[1227], 3);
    this.ΔⲆΔ[87].id = 87;
    this.ΔⲆΔ[88] = tf(60, 60, 0, ⵠΔ[1230], 3);
    this.ΔⲆΔ[88].id = 88;
    this.ΔⲆΔ[80] = tf(60, 60, 0, ⵠΔ[1137], 3);
    this.ΔⲆΔ[80].id = 80;
    this.ΔⲆΔ[81] = tf(60, 60, 0, ⵠΔ[1140], 3);
    this.ΔⲆΔ[81].id = 81;
    this.ΔⲆΔ[64] = tf(60, 60, 0, ⵠΔ[569], 3);
    this.ΔⲆΔ[64].id = 64;
    this.ΔⲆΔ[101] = tf(60, 60, 0, ⵠΔ[1166], 3);
    this.ΔⲆΔ[101].id = 101;
    this.ΔⲆΔ[71] = tf(60, 60, 0, ⵠΔ[1239], 3);
    this.ΔⲆΔ[71].id = 71;
    this.ΔⲆΔ[65] = tf(60, 60, 0, ⵠΔ[572], 3);
    this.ΔⲆΔ[65].id = 65;
    this.ΔⲆΔ[102] = tf(60, 60, 0, ⵠΔ[1169], 3);
    this.ΔⲆΔ[102].id = 102;
    this.ΔⲆΔ[72] = tf(60, 60, 0, ⵠΔ[1242], 3);
    this.ΔⲆΔ[72].id = 72;
    this.ΔⲆΔ[66] = tf(60, 60, 0, ⵠΔ[575], 3);
    this.ΔⲆΔ[66].id = 66;
    this.ΔⲆΔ[103] = tf(60, 60, 0, ⵠΔ[1172], 3);
    this.ΔⲆΔ[103].id = 103;
    this.ΔⲆΔ[73] = tf(60, 60, 0, ⵠΔ[1245], 3);
    this.ΔⲆΔ[73].id = 73;
    this.ΔⲆΔ[67] = tf(60, 60, 0, ⵠΔ[578], 3);
    this.ΔⲆΔ[67].id = 67;
    this.ΔⲆΔ[104] = tf(60, 60, 0, ⵠΔ[1175], 3);
    this.ΔⲆΔ[104].id = 104;
    this.ΔⲆΔ[74] = tf(60, 60, 0, ⵠΔ[1248], 3);
    this.ΔⲆΔ[74].id = 74;
    this.ΔⲆΔ[68] = tf(60, 60, 0, ⵠΔ[581], 3);
    this.ΔⲆΔ[68].id = 68;
    this.ΔⲆΔ[105] = tf(60, 60, 0, ⵠΔ[1178], 3);
    this.ΔⲆΔ[105].id = 105;
    this.ΔⲆΔ[75] = tf(60, 60, 0, ⵠΔ[1251], 3);
    this.ΔⲆΔ[75].id = 75;
    this.ΔⲆΔ[69] = tf(60, 60, 0, ⵠΔ[584], 3);
    this.ΔⲆΔ[69].id = 69;
    this.ΔⲆΔ[106] = tf(60, 60, 0, ⵠΔ[1181], 3);
    this.ΔⲆΔ[106].id = 106;
    this.ΔⲆΔ[76] = tf(60, 60, 0, ⵠΔ[1254], 3);
    this.ΔⲆΔ[76].id = 76;
    this.ΔⲆΔ[70] = tf(60, 60, 0, ⵠΔ[587], 3);
    this.ΔⲆΔ[70].id = 70;
    this.ΔⲆΔ[107] = tf(60, 60, 0, ⵠΔ[1184], 3);
    this.ΔⲆΔ[107].id = 107;
    this.ΔⲆΔ[94] = tf(60, 60, 0, ⵠΔ[1257], 3);
    this.ΔⲆΔ[94].id = 94;
    this.ΔⲆΔ[95] = tf(60, 60, 0, ⵠΔ[1260], 3);
    this.ΔⲆΔ[95].id = 95;
    this.ΔⲆΔ[96] = tf(60, 60, 0, ⵠΔ[1263], 3);
    this.ΔⲆΔ[96].id = 96;
    this.ΔⲆΔ[97] = tf(60, 60, 0, ⵠΔ[1266], 3);
    this.ΔⲆΔ[97].id = 97;
    this.ΔⲆΔ[98] = tf(60, 60, 0, ⵠΔ[1269], 3);
    this.ΔⲆΔ[98].id = 98;
    this.ΔⲆΔ[99] = tf(60, 60, 0, ⵠΔ[1272], 3);
    this.ΔⲆΔ[99].id = 99;
    this.ΔⲆΔ[58] = tf(60, 60, 0, ⵠΔ[826], 3);
    this.ΔⲆΔ[58].id = 58;
    this.ΔⲆΔ[25] = tf(60, 60, 0, ⵠΔ[429], 3);
    this.ΔⲆΔ[25].id = 25;
    this.ΔⲆΔ[26] = tf(60, 60, 0, ⵠΔ[432], 3);
    this.ΔⲆΔ[26].id = 26;
    this.ΔⲆΔ[27] = tf(60, 60, 0, ⵠΔ[435], 3);
    this.ΔⲆΔ[27].id = 27;
    this.ΔⲆΔ[28] = tf(60, 60, 0, ⵠΔ[438], 3);
    this.ΔⲆΔ[28].id = 28;
    this.ΔⲆΔ[120] = tf(60, 60, 0, ⵠΔ[441], 3);
    this.ΔⲆΔ[120].id = 120;
    this.ΔⲆΔ[120].info.ⵠᐃ[2] = this.ΔⲆΔ[120].info.ⵠᐃ[0];
    this.ΔⲆΔ[29] = tf(60, 60, 0, ⵠΔ[392], 3);
    this.ΔⲆΔ[29].id = 29;
    this.ΔⲆΔ[121] = tf(60, 60, 0, ⵠΔ[418], 3);
    this.ΔⲆΔ[121].id = 121;
    this.ΔⲆΔ[121].info.ⵠᐃ[2] = this.ΔⲆΔ[121].info.ⵠᐃ[0];
    this.ΔⲆΔ[30] = tf(60, 60, 0, ⵠΔ[455], 3);
    this.ΔⲆΔ[30].id = 30;
    this.ΔⲆΔ[9] = tf(60, 60, 0, ⵠΔ[860], 3);
    this.ΔⲆΔ[9].id = 9;
    this.ΔⲆΔ[31] = tf(60, 60, 0, ⵠΔ[458], 3);
    this.ΔⲆΔ[31].id = 31;
    this.ΔⲆΔ[32] = tf(60, 60, 0, ⵠΔ[1017], 3);
    this.ΔⲆΔ[32].id = 32;
    this.ΔⲆΔ[33] = tf(60, 60, 0, ⵠΔ[472], 3);
    this.ΔⲆΔ[33].id = 33;
    this.ΔⲆΔ[35] = tf(60, 60, 0, ⵠΔ[477], 3);
    this.ΔⲆΔ[35].id = 35;
    this.ΔⲆΔ[36] = tf(60, 60, 0, ⵠΔ[480], 3);
    this.ΔⲆΔ[36].id = 36;
    this.ΔⲆΔ[37] = tf(60, 60, 0, ⵠΔ[483], 3);
    this.ΔⲆΔ[37].id = 37;
    this.ΔⲆΔ[38] = tf(60, 60, 0, ⵠΔ[486], 3);
    this.ΔⲆΔ[38].id = 38;
    this.ΔⲆΔ[39] = tf(60, 60, 0, ⵠΔ[489], 3);
    this.ΔⲆΔ[39].id = 39;
    this.ΔⲆΔ[122] = tf(60, 60, 0, ⵠΔ[492], 3);
    this.ΔⲆΔ[122].id = 122;
    this.ΔⲆΔ[123] = tf(60, 60, 0, ⵠΔ[495], 3);
    this.ΔⲆΔ[123].id = 123;
    this.ΔⲆΔ[124] = tf(60, 60, 0, ⵠΔ[499], 3);
    this.ΔⲆΔ[124].id = 124;
    this.ΔⲆΔ[40] = tf(60, 60, 0, ⵠΔ[502], 3);
    this.ΔⲆΔ[40].id = 40;
    this.ΔⲆΔ[146] = tf(60, 60, 0, ⵠΔ[505], 3);
    this.ΔⲆΔ[146].id = 146;
    this.ΔⲆΔ[146].info.ⵠᐃ[2] = this.ΔⲆΔ[146].info.ⵠᐃ[0];
    this.ΔⲆΔ[240] = tf(60, 60, 0, ⵠΔ[1233], 3);
    this.ΔⲆΔ[240].id = 240;
    this.ΔⲆΔ[240].info.ⵠᐃ[2] = this.ΔⲆΔ[240].info.ⵠᐃ[0];
    this.ΔⲆΔ[147] = tf(60, 60, 0, ⵠΔ[513], 3);
    this.ΔⲆΔ[147].id = 147;
    this.ΔⲆΔ[147].info.ⵠᐃ[2] = this.ΔⲆΔ[147].info.ⵠᐃ[0];
    this.ΔⲆΔ[148] = tf(60, 60, 0, ⵠΔ[518], 3);
    this.ΔⲆΔ[148].id = 148;
    this.ΔⲆΔ[148].info.ⵠᐃ[2] = this.ΔⲆΔ[148].info.ⵠᐃ[0];
    this.ΔⲆΔ[149] = tf(60, 60, 0, ⵠΔ[521], 3);
    this.ΔⲆΔ[149].id = 149;
    this.ΔⲆΔ[150] = tf(60, 60, 0, ⵠΔ[523], 3);
    this.ΔⲆΔ[150].id = 150;
    this.ΔⲆΔ[151] = tf(60, 60, 0, ⵠΔ[529], 3);
    this.ΔⲆΔ[151].id = 151;
    this.ΔⲆΔ[158] = tf(60, 60, 0, ⵠΔ[532], 3);
    this.ΔⲆΔ[158].id = 158;
    this.ΔⲆΔ[159] = tf(60, 60, 0, ⵠΔ[553], 3);
    this.ΔⲆΔ[159].id = 159;
    this.ΔⲆΔ[43] = tf(60, 60, 0, ⵠΔ[541], 3);
    this.ΔⲆΔ[43].id = 43;
    this.ΔⲆΔ[45] = tf(60, 60, 0, ⵠΔ[550], 3);
    this.ΔⲆΔ[45].id = 45;
    this.ΔⲆΔ[125] = tf(60, 60, 0, ⵠΔ[605], 3);
    this.ΔⲆΔ[125].id = 125;
    this.ΔⲆΔ[221] = tf(60, 60, 0, ⵠΔ[1236], 3);
    this.ΔⲆΔ[221].id = 221;
    this.ΔⲆΔ[223] = tf(60, 60, 0, ⵠΔ[1028], 3);
    this.ΔⲆΔ[223].id = 223;
    this.ΔⲆΔ[224] = tf(60, 60, 0, ⵠΔ[1031], 3);
    this.ΔⲆΔ[224].id = 224;
    this.ΔⲆΔ[230] = tf(60, 60, 0, ⵠΔ[1117], 3);
    this.ΔⲆΔ[230].id = 230;
    this.ΔⲆΔ[89] = tf(60, 60, 0, ⵠΔ[1046], 3);
    this.ΔⲆΔ[89].id = 89;
    this.ΔⲆΔ[225] = tf(60, 60, 0, ⵠΔ[1049], 3);
    this.ΔⲆΔ[225].id = 225;
    this.ΔⲆΔ[226] = tf(60, 60, 0, ⵠΔ[1189], 3);
    this.ΔⲆΔ[226].id = 226;
    this.ΔⲆΔ[227] = tf(60, 60, 0, ⵠΔ[1080], 3);
    this.ΔⲆΔ[227].id = 227;
    this.ΔⲆΔ[239] = tf(60, 60, 0, ⵠΔ[1224], 3);
    this.ΔⲆΔ[239].id = 239;
    this.ΔⲆΔ[228] = tf(60, 60, 0, ⵠΔ[1095], 3);
    this.ΔⲆΔ[228].id = 228;
    this.ΔⲆΔ[229] = tf(60, 60, 0, ⵠΔ[1110], 3);
    this.ΔⲆΔ[229].id = 229;
    this.ΔⲆΔ[126] = tf(60, 60, 0, ⵠΔ[609], 3);
    this.ΔⲆΔ[126].id = 126;
    this.ΔⲆΔ[126].info.ⵠᐃ[2] = this.ΔⲆΔ[126].info.ⵠᐃ[0];
    this.ΔⲆΔ[127] = tf(60, 60, 0, ⵠΔ[613], 3);
    this.ΔⲆΔ[127].id = 127;
    this.ΔⲆΔ[128] = tf(60, 60, 0, ⵠΔ[612], 3);
    this.ΔⲆΔ[128].id = 128;
    this.ΔⲆΔ[46] = tf(60, 60, 0, ⵠΔ[616], 3);
    this.ΔⲆΔ[46].id = 46;
    this.ΔⲆΔ[50] = tf(60, 60, 0, ⵠΔ[699], 3);
    this.ΔⲆΔ[50].id = 50;
    this.ΔⲆΔ[51] = tf(60, 60, 0, ⵠΔ[702], 3);
    this.ΔⲆΔ[51].id = 51;
    this.ΔⲆΔ[52] = tf(60, 60, 0, ⵠΔ[705], 3);
    this.ΔⲆΔ[52].id = 52;
    this.ΔⲆΔ[55] = tf(60, 60, 0, ⵠΔ[709], 3);
    this.ΔⲆΔ[55].id = 55;
    this.ΔⲆΔ[129] = tf(60, 60, 0, ⵠΔ[624], 3);
    this.ΔⲆΔ[129].id = 129;
    this.ΔⲆΔ[129].info.ⵠᐃ[2] = this.ΔⲆΔ[129].info.ⵠᐃ[0];
    this.ΔⲆΔ[130] = tf(60, 60, 0, ⵠΔ[626], 3);
    this.ΔⲆΔ[130].id = 130;
    this.ΔⲆΔ[131] = tf(60, 60, 0, ⵠΔ[629], 3);
    this.ΔⲆΔ[131].id = 131;
    this.ΔⲆΔ[131].info.ⵠᐃ[2] = this.ΔⲆΔ[131].info.ⵠᐃ[0];
    this.ΔⲆΔ[132] = tf(60, 60, 0, ⵠΔ[631], 3);
    this.ΔⲆΔ[132].id = 132;
    this.ΔⲆΔ[133] = tf(60, 60, 0, ⵠΔ[634], 3);
    this.ΔⲆΔ[133].id = 133;
    this.ΔⲆΔ[134] = tf(60, 60, 0, ⵠΔ[639], 3);
    this.ΔⲆΔ[134].id = 134;
    this.ΔⲆΔ[134].info.ⵠᐃ[2] = this.ΔⲆΔ[134].info.ⵠᐃ[0];
    this.ΔⲆΔ[135] = tf(60, 60, 0, ⵠΔ[644], 3);
    this.ΔⲆΔ[135].id = 135;
    this.ΔⲆΔ[47] = tf(60, 60, 0, ⵠΔ[646], 3);
    this.ΔⲆΔ[47].id = 47;
    this.ΔⲆΔ[48] = tf(60, 60, 0, ⵠΔ[649], 3);
    this.ΔⲆΔ[48].id = 48;
    this.ΔⲆΔ[49] = tf(60, 60, 0, ⵠΔ[652], 3);
    this.ΔⲆΔ[49].id = 49;
    this.ΔⲆΔ[136] = tf(60, 60, 0, ⵠΔ[659], 3);
    this.ΔⲆΔ[136].id = 136;
    this.ΔⲆΔ[143] = tf(60, 60, 0, ⵠΔ[143], 3);
    this.ΔⲆΔ[143].id = 143;
    this.ΔⲆΔ[137] = tf(60, 60, 0, ⵠΔ[662], 3);
    this.ΔⲆΔ[137].id = 137;
    this.ΔⲆΔ[138] = tf(60, 60, 0, ⵠΔ[664], 3);
    this.ΔⲆΔ[138].id = 138;
    this.ΔⲆΔ[139] = tf(60, 60, 0, ⵠΔ[674], 3);
    this.ΔⲆΔ[139].id = 139;
    this.ΔⲆΔ[139].info.ⵠᐃ[2] = this.ΔⲆΔ[139].info.ⵠᐃ[0];
    this.ΔⲆΔ[140] = tf(60, 60, 0, ⵠΔ[140], 3);
    this.ΔⲆΔ[140].id = 140;
    this.ΔⲆΔ[140].info.ⵠᐃ[2] = this.ΔⲆΔ[140].info.ⵠᐃ[0];
    this.ΔⲆΔ[141] = tf(60, 60, 0, ⵠΔ[685], 3);
    this.ΔⲆΔ[141].id = 141;
    this.ΔⲆΔ[142] = tf(60, 60, 0, ⵠΔ[142], 3);
    this.ΔⲆΔ[142].id = 142;
    this.ΔⲆΔ[142].info.ⵠᐃ[2] = this.ΔⲆΔ[142].info.ⵠᐃ[0];
    this.ΔⲆΔ[144] = tf(60, 60, 0, ⵠΔ[717], 3);
    this.ΔⲆΔ[144].id = 144;
    this.ΔⲆΔ[145] = tf(60, 60, 0, ⵠΔ[145], 3);
    this.ΔⲆΔ[145].id = 145;
    this.ΔⲆΔ[59] = tf(60, 60, 0, ⵠΔ[732], 3);
    this.ΔⲆΔ[59].id = 59;
    this.ΔⲆΔ[62] = tf(60, 60, 0, ⵠΔ[563], 3);
    this.ΔⲆΔ[62].id = 62;
    this.ΔⲆΔ[185] = tf(60, 60, 0, ⵠΔ[252], 3);
    this.ΔⲆΔ[185].id = 185;
    this.ΔⲆΔ[185].info.ⵠᐃ[2] = this.ΔⲆΔ[185].info.ⵠᐃ[0];
    this.ΔⲆΔ[184] = tf(60, 60, 0, ⵠΔ[751], 3);
    this.ΔⲆΔ[184].id = 184;
    this.ΔⲆΔ[184].info.ⵠᐃ[2] = this.ΔⲆΔ[184].info.ⵠᐃ[0];
    this.ΔⲆΔ[17] = tf(60, 60, 0, ⵠΔ[877], 3);
    this.ΔⲆΔ[17].id = 17;
    this.ΔⲆΔ[63] = tf(60, 60, 0, ⵠΔ[566], 3);
    this.ΔⲆΔ[63].id = 63;
    this.ΔⲆΔ[187] = tf(60, 60, 0, ⵠΔ[253], 3);
    this.ΔⲆΔ[187].id = 187;
    this.ΔⲆΔ[187].info.ⵠᐃ[2] = this.ΔⲆΔ[187].info.ⵠᐃ[0];
    this.ΔⲆΔ[186] = tf(60, 60, 0, ⵠΔ[753], 3);
    this.ΔⲆΔ[186].id = 186;
    this.ΔⲆΔ[186].info.ⵠᐃ[2] = this.ΔⲆΔ[186].info.ⵠᐃ[0];
    this.ΔⲆΔ[77] = tf(60, 60, 0, ⵠΔ[756], 3);
    this.ΔⲆΔ[77].id = 77;
    this.ΔⲆΔ[175] = tf(60, 60, 0, ⵠΔ[176], 3);
    this.ΔⲆΔ[175].id = 175;
    this.ΔⲆΔ[175].info.ⵠᐃ[2] = this.ΔⲆΔ[175].info.ⵠᐃ[0];
    this.ΔⲆΔ[176] = tf(60, 60, 0, ⵠΔ[177], 3);
    this.ΔⲆΔ[176].id = 176;
    this.ΔⲆΔ[176].info.ⵠᐃ[2] = this.ΔⲆΔ[176].info.ⵠᐃ[0];
    this.ΔⲆΔ[78] = tf(60, 60, 0, ⵠΔ[760], 3);
    this.ΔⲆΔ[78].id = 78;
    this.ΔⲆΔ[177] = tf(60, 60, 0, ⵠΔ[175], 3);
    this.ΔⲆΔ[177].id = 177;
    this.ΔⲆΔ[177].info.ⵠᐃ[2] = this.ΔⲆΔ[177].info.ⵠᐃ[0];
    this.ΔⲆΔ[79] = tf(60, 60, 0, ⵠΔ[764], 3);
    this.ΔⲆΔ[79].id = 79;
    this.ΔⲆΔ[83] = tf(60, 60, 0, ⵠΔ[767], 3);
    this.ΔⲆΔ[83].id = 83;
    this.ΔⲆΔ[84] = tf(60, 60, 0, ⵠΔ[771], 3);
    this.ΔⲆΔ[84].id = 84;
    this.ΔⲆΔ[178] = tf(60, 60, 0, ⵠΔ[178], 3);
    this.ΔⲆΔ[178].id = 178;
    this.ΔⲆΔ[179] = tf(60, 60, 0, ⵠΔ[179], 3);
    this.ΔⲆΔ[179].id = 179;
    this.ΔⲆΔ[86] = tf(60, 60, 0, ⵠΔ[776], 3);
    this.ΔⲆΔ[86].id = 86;
    this.ΔⲆΔ[85] = tf(60, 60, 0, ⵠΔ[779], 3);
    this.ΔⲆΔ[85].id = 85;
    this.ΔⲆΔ[180] = tf(60, 60, 0, ⵠΔ[180], 3);
    this.ΔⲆΔ[180].id = 180;
    this.ΔⲆΔ[181] = tf(60, 60, 0, ⵠΔ[181], 3);
    this.ΔⲆΔ[181].id = 181;
    this.ΔⲆΔ[182] = tf(60, 60, 0, ⵠΔ[789], 3);
    this.ΔⲆΔ[182].id = 182;
    this.ΔⲆΔ[183] = tf(60, 60, 0, ⵠΔ[800], 3);
    this.ΔⲆΔ[183].id = 183;
    this.ΔⲆΔ[188] = tf(60, 60, 0, ⵠΔ[808], 3);
    this.ΔⲆΔ[188].id = 188;
    this.ΔⲆΔ[189] = tf(60, 60, 0, ⵠΔ[814], 3);
    this.ΔⲆΔ[189].id = 189;
    this.ΔⲆΔ[191] = tf(60, 60, 0, ⵠΔ[834], 3);
    this.ΔⲆΔ[191].id = 191;
    this.ΔⲆΔ[192] = tf(60, 60, 0, ⵠΔ[840], 3);
    this.ΔⲆΔ[192].id = 192;
    this.ΔⲆΔ[190] = tf(60, 60, 0, ⵠΔ[842], 3);
    this.ΔⲆΔ[190].id = 190;
    this.ΔⲆΔ[193] = tf(60, 60, 0, ⵠΔ[845], 3);
    this.ΔⲆΔ[193].id = 193;
    this.ΔⲆΔ[194] = tf(60, 60, 0, ⵠΔ[850], 3);
    this.ΔⲆΔ[194].id = 194;
    this.ΔⲆΔ[204] = tf(60, 60, 0, ⵠΔ[949], 3);
    this.ΔⲆΔ[204].id = 204;
    this.ΔⲆΔ[205] = tf(60, 60, 0, ⵠΔ[955], 3);
    this.ΔⲆΔ[205].id = 205;
    this.ΔⲆΔ[206] = tf(60, 60, 0, ⵠΔ[959], 3);
    this.ΔⲆΔ[206].id = 206;
    this.ΔⲆΔ[207] = tf(60, 60, 0, ⵠΔ[965], 3);
    this.ΔⲆΔ[207].id = 207;
    this.ΔⲆΔ[208] = tf(60, 60, 0, ⵠΔ[966], 3);
    this.ΔⲆΔ[208].id = 208;
    this.ΔⲆΔ[209] = tf(60, 60, 0, ⵠΔ[972], 3);
    this.ΔⲆΔ[209].id = 209;
    this.ΔⲆΔ[210] = tf(60, 60, 0, ⵠΔ[981], 3);
    this.ΔⲆΔ[210].id = 210;
    this.ΔⲆΔ[211] = tf(60, 60, 0, ⵠΔ[987], 3);
    this.ΔⲆΔ[211].id = 211;
    this.ΔⲆΔ[41] = tf(60, 60, 0, ⵠΔ[880], 3);
    this.ΔⲆΔ[41].id = 41;
    this.ΔⲆΔ[42] = tf(60, 60, 0, ⵠΔ[882], 3);
    this.ΔⲆΔ[42].id = 42;
    this.ΔⲆΔ[12] = tf(60, 60, 0, ⵠΔ[401], 3);
    this.ΔⲆΔ[12].id = 12;
    this.ΔⲆΔ[16] = tf(60, 60, 0, ⵠΔ[874], 3);
    this.ΔⲆΔ[16].id = 16;
    this.ΔⲆΔ[196] = tf(60, 60, 0, ⵠΔ[196], 3);
    this.ΔⲆΔ[196].id = 196;
    this.ΔⲆΔ[18] = tf(60, 60, 0, ⵠΔ[901], 3);
    this.ΔⲆΔ[18].id = 18;
    this.ΔⲆΔ[197] = tf(60, 60, 0, ⵠΔ[197], 3);
    this.ΔⲆΔ[197].id = 197;
    this.ΔⲆΔ[198] = tf(60, 60, 0, ⵠΔ[907], 3);
    this.ΔⲆΔ[198].id = 198;
    this.ΔⲆΔ[61] = tf(60, 60, 0, ⵠΔ[910], 3);
    this.ΔⲆΔ[61].id = 61;
    this.ΔⲆΔ[201] = tf(60, 60, 0, ⵠΔ[870], 3);
    this.ΔⲆΔ[201].id = 201;
    this.ΔⲆΔ[200] = tf(60, 60, 0, ⵠΔ[200], 3);
    this.ΔⲆΔ[200].id = 200;
    this.ΔⲆΔ[199] = tf(60, 60, 0, ⵠΔ[865], 3);
    this.ΔⲆΔ[199].id = 199;
    this.ⵠΔⲆ = [];
    this.ⵠΔⲆ[35] = tf(60, 60, 0, ⵠΔ[254], 3);
    this.ⵠΔⲆ[35].id = 35;
    this.ⵠΔⲆ[5] = tf(60, 60, 0, ⵠΔ[256], 3);
    this.ⵠΔⲆ[5].id = 5;
    this.ⵠΔⲆ[0] = tf(60, 60, 0, ⵠΔ[302], 3);
    this.ⵠΔⲆ[0].id = 0;
    this.ⵠΔⲆ[3] = tf(60, 60, 0, ⵠΔ[262], 3);
    this.ⵠΔⲆ[3].id = 3;
    this.ⵠΔⲆ[55] = tf(60, 60, 0, ⵠΔ[318], 3);
    this.ⵠΔⲆ[55].id = 55;
    this.ⵠΔⲆ[67] = tf(60, 60, 0, ⵠΔ[320], 3);
    this.ⵠΔⲆ[67].id = 67;
    this.ⵠΔⲆ[40] = tf(60, 60, 0, ⵠΔ[284], 3);
    this.ⵠΔⲆ[40].id = 40;
    this.ⵠΔⲆ[6] = tf(60, 60, 0, ⵠΔ[295], 3);
    this.ⵠΔⲆ[6].id = 6;
    this.ⵠΔⲆ[7] = tf(60, 60, 0, ⵠΔ[257], 3);
    this.ⵠΔⲆ[7].id = 7;
    this.ⵠΔⲆ[36] = tf(60, 60, 0, ⵠΔ[290], 3);
    this.ⵠΔⲆ[36].id = 36;
    this.ⵠΔⲆ[34] = tf(60, 60, 0, ⵠΔ[830], 3);
    this.ⵠΔⲆ[34].id = 34;
    this.ⵠΔⲆ[37] = tf(60, 60, 0, ⵠΔ[291], 3);
    this.ⵠΔⲆ[37].id = 37;
    this.ⵠΔⲆ[4] = tf(60, 60, 0, ⵠΔ[314], 3);
    this.ⵠΔⲆ[4].id = 4;
    this.ⵠΔⲆ[49] = tf(60, 60, 0, ⵠΔ[325], 3);
    this.ⵠΔⲆ[49].id = 49;
    this.ⵠΔⲆ[1] = tf(60, 60, 0, ⵠΔ[327], 3);
    this.ⵠΔⲆ[1].id = 1;
    this.ⵠΔⲆ[54] = tf(60, 60, 0, ⵠΔ[304], 3);
    this.ⵠΔⲆ[54].id = 54;
    this.ⵠΔⲆ[56] = tf(60, 60, 0, ⵠΔ[263], 3);
    this.ⵠΔⲆ[56].id = 56;
    this.ⵠΔⲆ[57] = tf(60, 60, 0, ⵠΔ[265], 3);
    this.ⵠΔⲆ[57].id = 57;
    this.ⵠΔⲆ[58] = tf(60, 60, 0, ⵠΔ[332], 3);
    this.ⵠΔⲆ[58].id = 58;
    this.ⵠΔⲆ[61] = tf(60, 60, 0, ⵠΔ[268], 3);
    this.ⵠΔⲆ[61].id = 61;
    this.ⵠΔⲆ[79] = tf(60, 60, 0, ⵠΔ[338], 3);
    this.ⵠΔⲆ[79].id = 79;
    this.ⵠΔⲆ[68] = tf(60, 60, 0, ⵠΔ[360], 3);
    this.ⵠΔⲆ[68].id = 68;
    this.ⵠΔⲆ[69] = tf(60, 60, 0, ⵠΔ[363], 3);
    this.ⵠΔⲆ[69].id = 69;
    this.ⵠΔⲆ[70] = tf(60, 60, 0, ⵠΔ[365], 3);
    this.ⵠΔⲆ[70].id = 70;
    this.ⵠΔⲆ[100] = tf(60, 60, 0, ⵠΔ[367], 3);
    this.ⵠΔⲆ[100].id = 100;
    this.ⵠΔⲆ[83] = tf(60, 60, 0, ⵠΔ[370], 3);
    this.ⵠΔⲆ[83].id = 83;
    this.ⵠΔⲆ[62] = tf(60, 60, 0, ⵠΔ[371], 3);
    this.ⵠΔⲆ[62].id = 62;
    this.ⵠΔⲆ[63] = tf(60, 60, 0, ⵠΔ[374], 3);
    this.ⵠΔⲆ[63].id = 63;
    this.ⵠΔⲆ[64] = tf(60, 60, 0, ⵠΔ[377], 3);
    this.ⵠΔⲆ[64].id = 64;
    this.ⵠΔⲆ[83] = tf(60, 60, 0, ⵠΔ[370], 3);
    this.ⵠΔⲆ[83].id = 83;
    this.ⵠΔⲆ[84] = tf(60, 60, 0, ⵠΔ[380], 3);
    this.ⵠΔⲆ[84].id = 84;
    this.ⵠΔⲆ[25] = tf(60, 60, 0, ⵠΔ[402], 3);
    this.ⵠΔⲆ[25].id = 25;
    this.ⵠΔⲆ[26] = tf(60, 60, 0, ⵠΔ[396], 3);
    this.ⵠΔⲆ[26].id = 26;
    this.ⵠΔⲆ[27] = tf(60, 60, 0, ⵠΔ[399], 3);
    this.ⵠΔⲆ[27].id = 27;
    this.ⵠΔⲆ[28] = tf(60, 60, 0, ⵠΔ[405], 3);
    this.ⵠΔⲆ[28].id = 28;
    this.ⵠΔⲆ[31] = tf(60, 60, 0, ⵠΔ[876], 3);
    this.ⵠΔⲆ[31].id = 31;
    this.ⵠΔⲆ[2] = tf(60, 60, 0, ⵠΔ[409], 3);
    this.ⵠΔⲆ[2].id = 2;
    this.ⵠΔⲆ[80] = tf(60, 60, 0, ⵠΔ[421], 3);
    this.ⵠΔⲆ[80].id = 80;
    this.ⵠΔⲆ[81] = tf(60, 60, 0, ⵠΔ[424], 3);
    this.ⵠΔⲆ[81].id = 81;
    this.ⵠΔⲆ[wr.ⲆⵠΔⲆⵠ] = tf(60, 60, 0, ⵠΔ[1228], 3);
    this.ⵠΔⲆ[wr.ⲆⵠΔⲆⵠ].id = wr.ⲆⵠΔⲆⵠ;
    this.ⵠΔⲆ[86] = tf(60, 60, 0, ⵠΔ[1231], 3);
    this.ⵠΔⲆ[86].id = 86;
    this.ⵠΔⲆ[98] = tf(60, 60, 0, ⵠΔ[1138], 3);
    this.ⵠΔⲆ[98].id = 98;
    this.ⵠΔⲆ[99] = tf(60, 60, 0, ⵠΔ[1141], 3);
    this.ⵠΔⲆ[99].id = 99;
    this.ⵠΔⲆ[131] = tf(60, 60, 0, ⵠΔ[570], 3);
    this.ⵠΔⲆ[131].id = 131;
    this.ⵠΔⲆ[132] = tf(60, 60, 0, ⵠΔ[1168], 3);
    this.ⵠΔⲆ[132].id = 132;
    this.ⵠΔⲆ[145] = tf(60, 60, 0, ⵠΔ[1238], 3);
    this.ⵠΔⲆ[145].id = 145;
    this.ⵠΔⲆ[133] = tf(60, 60, 0, ⵠΔ[573], 3);
    this.ⵠΔⲆ[133].id = 133;
    this.ⵠΔⲆ[134] = tf(60, 60, 0, ⵠΔ[1171], 3);
    this.ⵠΔⲆ[134].id = 134;
    this.ⵠΔⲆ[146] = tf(60, 60, 0, ⵠΔ[1241], 3);
    this.ⵠΔⲆ[146].id = 146;
    this.ⵠΔⲆ[135] = tf(60, 60, 0, ⵠΔ[576], 3);
    this.ⵠΔⲆ[135].id = 135;
    this.ⵠΔⲆ[136] = tf(60, 60, 0, ⵠΔ[1174], 3);
    this.ⵠΔⲆ[136].id = 136;
    this.ⵠΔⲆ[147] = tf(60, 60, 0, ⵠΔ[1244], 3);
    this.ⵠΔⲆ[147].id = 147;
    this.ⵠΔⲆ[137] = tf(60, 60, 0, ⵠΔ[579], 3);
    this.ⵠΔⲆ[137].id = 137;
    this.ⵠΔⲆ[138] = tf(60, 60, 0, ⵠΔ[1177], 3);
    this.ⵠΔⲆ[138].id = 138;
    this.ⵠΔⲆ[167] = tf(60, 60, 0, ⵠΔ[1256], 3);
    this.ⵠΔⲆ[167].id = 167;
    this.ⵠΔⲆ[168] = tf(60, 60, 0, ⵠΔ[1259], 3);
    this.ⵠΔⲆ[168].id = 168;
    this.ⵠΔⲆ[169] = tf(60, 60, 0, ⵠΔ[1262], 3);
    this.ⵠΔⲆ[169].id = 169;
    this.ⵠΔⲆ[170] = tf(60, 60, 0, ⵠΔ[1265], 3);
    this.ⵠΔⲆ[170].id = 170;
    this.ⵠΔⲆ[171] = tf(60, 60, 0, ⵠΔ[1268], 3);
    this.ⵠΔⲆ[171].id = 171;
    this.ⵠΔⲆ[172] = tf(60, 60, 0, ⵠΔ[1271], 3);
    this.ⵠΔⲆ[172].id = 172;
    this.ⵠΔⲆ[148] = tf(60, 60, 0, ⵠΔ[1247], 3);
    this.ⵠΔⲆ[148].id = 148;
    this.ⵠΔⲆ[139] = tf(60, 60, 0, ⵠΔ[582], 3);
    this.ⵠΔⲆ[139].id = 139;
    this.ⵠΔⲆ[140] = tf(60, 60, 0, ⵠΔ[1180], 3);
    this.ⵠΔⲆ[140].id = 140;
    this.ⵠΔⲆ[149] = tf(60, 60, 0, ⵠΔ[1250], 3);
    this.ⵠΔⲆ[149].id = 149;
    this.ⵠΔⲆ[141] = tf(60, 60, 0, ⵠΔ[585], 3);
    this.ⵠΔⲆ[141].id = 141;
    this.ⵠΔⲆ[142] = tf(60, 60, 0, ⵠΔ[1183], 3);
    this.ⵠΔⲆ[142].id = 142;
    this.ⵠΔⲆ[150] = tf(60, 60, 0, ⵠΔ[1253], 3);
    this.ⵠΔⲆ[150].id = 150;
    this.ⵠΔⲆ[143] = tf(60, 60, 0, ⵠΔ[588], 3);
    this.ⵠΔⲆ[143].id = 143;
    this.ⵠΔⲆ[144] = tf(60, 60, 0, ⵠΔ[1186], 3);
    this.ⵠΔⲆ[144].id = 144;
    this.ⵠΔⲆ[87] = tf(60, 60, 0, ⵠΔ[827], 3);
    this.ⵠΔⲆ[87].id = 87;
    this.ⵠΔⲆ[88] = tf(60, 60, 0, ⵠΔ[430], 3);
    this.ⵠΔⲆ[88].id = 88;
    this.ⵠΔⲆ[89] = tf(60, 60, 0, ⵠΔ[433], 3);
    this.ⵠΔⲆ[89].id = 89;
    this.ⵠΔⲆ[90] = tf(60, 60, 0, ⵠΔ[436], 3);
    this.ⵠΔⲆ[90].id = 90;
    this.ⵠΔⲆ[24] = tf(60, 60, 0, ⵠΔ[439], 3);
    this.ⵠΔⲆ[24].id = 24;
    this.ⵠΔⲆ[101] = tf(60, 60, 0, ⵠΔ[442], 3);
    this.ⵠΔⲆ[101].id = 101;
    this.ⵠΔⲆ[100] = tf(60, 60, 0, ⵠΔ[367], 3);
    this.ⵠΔⲆ[100].id = 100;
    this.ⵠΔⲆ[38] = tf(60, 60, 0, ⵠΔ[456], 3);
    this.ⵠΔⲆ[38].id = 38;
    this.ⵠΔⲆ[wr.ΔⵠΔⵠⵠ] = tf(60, 60, 0, ⵠΔ[861], 3);
    this.ⵠΔⲆ[wr.ΔⵠΔⵠⵠ].id = wr.ΔⵠΔⵠⵠ;
    this.ⵠΔⲆ[8] = tf(60, 60, 0, ⵠΔ[460], 3);
    this.ⵠΔⲆ[8].id = 8;
    this.ⵠΔⲆ[9] = tf(60, 60, 0, ⵠΔ[1019], 3);
    this.ⵠΔⲆ[9].id = 9;
    this.ⵠΔⲆ[29] = tf(60, 60, 0, ⵠΔ[473], 3);
    this.ⵠΔⲆ[29].id = 29;
    this.ⵠΔⲆ[10] = tf(60, 60, 0, ⵠΔ[478], 3);
    this.ⵠΔⲆ[10].id = 10;
    this.ⵠΔⲆ[11] = tf(60, 60, 0, ⵠΔ[481], 3);
    this.ⵠΔⲆ[11].id = 11;
    this.ⵠΔⲆ[12] = tf(60, 60, 0, ⵠΔ[484], 3);
    this.ⵠΔⲆ[12].id = 12;
    this.ⵠΔⲆ[13] = tf(60, 60, 0, ⵠΔ[487], 3);
    this.ⵠΔⲆ[13].id = 13;
    this.ⵠΔⲆ[14] = tf(60, 60, 0, ⵠΔ[490], 3);
    this.ⵠΔⲆ[14].id = 14;
    this.ⵠΔⲆ[59] = tf(60, 60, 0, ⵠΔ[493], 3);
    this.ⵠΔⲆ[59].id = 59;
    this.ⵠΔⲆ[71] = tf(60, 60, 0, ⵠΔ[496], 3);
    this.ⵠΔⲆ[71].id = 71;
    this.ⵠΔⲆ[65] = tf(60, 60, 0, ⵠΔ[498], 3);
    this.ⵠΔⲆ[65].id = 65;
    this.ⵠΔⲆ[85] = tf(60, 60, 0, ⵠΔ[503], 3);
    this.ⵠΔⲆ[85].id = 85;
    this.ⵠΔⲆ[102] = tf(60, 60, 0, ⵠΔ[515], 3);
    this.ⵠΔⲆ[102].id = 102;
    this.ⵠΔⲆ[103] = tf(60, 60, 0, ⵠΔ[519], 3);
    this.ⵠΔⲆ[103].id = 103;
    this.ⵠΔⲆ[115] = tf(60, 60, 0, ⵠΔ[530], 3);
    this.ⵠΔⲆ[115].id = 115;
    this.ⵠΔⲆ[104] = tf(60, 60, 0, ⵠΔ[533], 3);
    this.ⵠΔⲆ[104].id = 104;
    this.ⵠΔⲆ[105] = tf(60, 60, 0, ⵠΔ[555], 3);
    this.ⵠΔⲆ[105].id = 105;
    this.ⵠΔⲆ[91] = tf(60, 60, 0, ⵠΔ[542], 3);
    this.ⵠΔⲆ[91].id = 91;
    this.ⵠΔⲆ[15] = tf(60, 60, 0, ⵠΔ[551], 3);
    this.ⵠΔⲆ[15].id = 15;
    this.ⵠΔⲆ[106] = tf(60, 60, 0, ⵠΔ[604], 3);
    this.ⵠΔⲆ[106].id = 106;
    this.ⵠΔⲆ[108] = tf(60, 60, 0, ⵠΔ[1235], 3);
    this.ⵠΔⲆ[108].id = 108;
    this.ⵠΔⲆ[163] = tf(60, 60, 0, ⵠΔ[1027], 3);
    this.ⵠΔⲆ[163].id = 163;
    this.ⵠΔⲆ[164] = tf(60, 60, 0, ⵠΔ[1030], 3);
    this.ⵠΔⲆ[164].id = 164;
    this.ⵠΔⲆ[166] = tf(60, 60, 0, ⵠΔ[1116], 3);
    this.ⵠΔⲆ[166].id = 166;
    this.ⵠΔⲆ[165] = tf(60, 60, 0, ⵠΔ[1048], 3);
    this.ⵠΔⲆ[165].id = 165;
    this.ⵠΔⲆ[wr.ⵠᐃᐃΔⵠ] = tf(60, 60, 0, ⵠΔ[1051], 3);
    this.ⵠΔⲆ[wr.ⵠᐃᐃΔⵠ].id = wr.ⵠᐃᐃΔⵠ;
    this.ⵠΔⲆ[wr.ᐃΔⲆⵠΔ] = tf(60, 60, 0, ⵠΔ[1082], 3);
    this.ⵠΔⲆ[wr.ᐃΔⲆⵠΔ].id = wr.ᐃΔⲆⵠΔ;
    this.ⵠΔⲆ[wr.ⲆΔⲆⵠΔ] = tf(60, 60, 0, ⵠΔ[1226], 3);
    this.ⵠΔⲆ[wr.ⲆΔⲆⵠΔ].id = wr.ⲆΔⲆⵠΔ;
    this.ⵠΔⲆ[wr.ᐃΔⲆⵠᐃ] = tf(60, 60, 0, ⵠΔ[1191], 3);
    this.ⵠΔⲆ[wr.ᐃΔⲆⵠᐃ].id = wr.ᐃΔⲆⵠᐃ;
    this.ⵠΔⲆ[110] = tf(60, 60, 0, ⵠΔ[611], 3);
    this.ⵠΔⲆ[110].id = 110;
    this.ⵠΔⲆ[111] = tf(60, 60, 0, ⵠΔ[715], 3);
    this.ⵠΔⲆ[111].id = 111;
    this.ⵠΔⲆ[112] = tf(60, 60, 0, ⵠΔ[715], 3);
    this.ⵠΔⲆ[112].id = 112;
    this.ⵠΔⲆ[113] = tf(60, 60, 0, ⵠΔ[715], 3);
    this.ⵠΔⲆ[113].id = 113;
    this.ⵠΔⲆ[16] = tf(60, 60, 0, ⵠΔ[618], 3);
    this.ⵠΔⲆ[16].id = 16;
    this.ⵠΔⲆ[17] = tf(60, 60, 0, ⵠΔ[700], 3);
    this.ⵠΔⲆ[17].id = 17;
    this.ⵠΔⲆ[18] = tf(60, 60, 0, ⵠΔ[704], 3);
    this.ⵠΔⲆ[18].id = 18;
    this.ⵠΔⲆ[19] = tf(60, 60, 0, ⵠΔ[706], 3);
    this.ⵠΔⲆ[19].id = 19;
    this.ⵠΔⲆ[122] = tf(60, 60, 0, ⵠΔ[711], 3);
    this.ⵠΔⲆ[122].id = 122;
    this.ⵠΔⲆ[20] = tf(60, 60, 0, ⵠΔ[627], 3);
    this.ⵠΔⲆ[20].id = 20;
    this.ⵠΔⲆ[41] = tf(60, 60, 0, ⵠΔ[632], 3);
    this.ⵠΔⲆ[41].id = 41;
    this.ⵠΔⲆ[52] = tf(60, 60, 0, ⵠΔ[635], 3);
    this.ⵠΔⲆ[52].id = 52;
    this.ⵠΔⲆ[114] = tf(60, 60, 0, ⵠΔ[643], 3);
    this.ⵠΔⲆ[114].id = 114;
    this.ⵠΔⲆ[94] = tf(60, 60, 0, ⵠΔ[647], 3);
    this.ⵠΔⲆ[94].id = 94;
    this.ⵠΔⲆ[93] = tf(60, 60, 0, ⵠΔ[650], 3);
    this.ⵠΔⲆ[93].id = 93;
    this.ⵠΔⲆ[21] = tf(60, 60, 0, ⵠΔ[654], 3);
    this.ⵠΔⲆ[21].id = 21;
    this.ⵠΔⲆ[53] = tf(60, 60, 0, ⵠΔ[660], 3);
    this.ⵠΔⲆ[53].id = 53;
    this.ⵠΔⲆ[51] = tf(60, 60, 0, ⵠΔ[690], 3);
    this.ⵠΔⲆ[51].id = 51;
    this.ⵠΔⲆ[50] = tf(60, 60, 0, ⵠΔ[666], 3);
    this.ⵠΔⲆ[50].id = 50;
    this.ⵠΔⲆ[109] = tf(60, 60, 0, ⵠΔ[684], 3);
    this.ⵠΔⲆ[109].id = 109;
    this.ⵠΔⲆ[124] = tf(60, 60, 0, ⵠΔ[718], 3);
    this.ⵠΔⲆ[124].id = 124;
    this.ⵠΔⲆ[125] = tf(60, 60, 0, ⵠΔ[730], 3);
    this.ⵠΔⲆ[125].id = 125;
    this.ⵠΔⲆ[126] = tf(60, 60, 0, ⵠΔ[734], 3);
    this.ⵠΔⲆ[126].id = 126;
    this.ⵠΔⲆ[129] = tf(60, 60, 0, ⵠΔ[563], 3);
    this.ⵠΔⲆ[129].id = 129;
    this.ⵠΔⲆ[151] = tf(60, 60, 0, ⵠΔ[758], 3);
    this.ⵠΔⲆ[151].id = 151;
    this.ⵠΔⲆ[152] = tf(60, 60, 0, ⵠΔ[762], 3);
    this.ⵠΔⲆ[152].id = 152;
    this.ⵠΔⲆ[153] = tf(60, 60, 0, ⵠΔ[770], 3);
    this.ⵠΔⲆ[153].id = 153;
    this.ⵠΔⲆ[154] = tf(60, 60, 0, ⵠΔ[768], 3);
    this.ⵠΔⲆ[154].id = 154;
    this.ⵠΔⲆ[155] = tf(60, 60, 0, ⵠΔ[772], 3);
    this.ⵠΔⲆ[155].id = 155;
    this.ⵠΔⲆ[157] = tf(60, 60, 0, ⵠΔ[777], 3);
    this.ⵠΔⲆ[157].id = 157;
    this.ⵠΔⲆ[156] = tf(60, 60, 0, ⵠΔ[780], 3);
    this.ⵠΔⲆ[156].id = 156;
    this.ⵠΔⲆ[158] = tf(60, 60, 0, ⵠΔ[784], 3);
    this.ⵠΔⲆ[158].id = 158;
    this.ⵠΔⲆ[159] = tf(60, 60, 0, ⵠΔ[785], 3);
    this.ⵠΔⲆ[159].id = 159;
    this.ⵠΔⲆ[160] = tf(60, 60, 0, ⵠΔ[791], 3);
    this.ⵠΔⲆ[160].id = 160;
    this.ⵠΔⲆ[161] = tf(60, 60, 0, ⵠΔ[799], 3);
    this.ⵠΔⲆ[161].id = 161;
    this.ⵠΔⲆ[42] = tf(60, 60, 0, ⵠΔ[809], 3);
    this.ⵠΔⲆ[42].id = 42;
    this.ⵠΔⲆ[43] = tf(60, 60, 0, ⵠΔ[835], 3);
    this.ⵠΔⲆ[43].id = 43;
    this.ⵠΔⲆ[107] = tf(60, 60, 0, ⵠΔ[843], 3);
    this.ⵠΔⲆ[107].id = 107;
    this.ⵠΔⲆ[44] = tf(60, 60, 0, ⵠΔ[846], 3);
    this.ⵠΔⲆ[44].id = 44;
    this.ⵠΔⲆ[46] = tf(60, 60, 0, ⵠΔ[960], 3);
    this.ⵠΔⲆ[46].id = 46;
    this.ⵠΔⲆ[45] = tf(60, 60, 0, ⵠΔ[950], 3);
    this.ⵠΔⲆ[45].id = 45;
    this.ⵠΔⲆ[47] = tf(60, 60, 0, ⵠΔ[967], 3);
    this.ⵠΔⲆ[47].id = 47;
    this.ⵠΔⲆ[48] = tf(60, 60, 0, ⵠΔ[982], 3);
    this.ⵠΔⲆ[48].id = 48;
    this.ⵠΔⲆ[25] = tf(60, 60, 0, ⵠΔ[402], 3);
    this.ⵠΔⲆ[25].id = 25;
    this.ⵠΔⲆ[31] = tf(60, 60, 0, ⵠΔ[876], 3);
    this.ⵠΔⲆ[31].id = 31;
    this.ⵠΔⲆ[33] = tf(60, 60, 0, ⵠΔ[900], 3);
    this.ⵠΔⲆ[33].id = 33;
    this.ⵠΔⲆ[162] = tf(60, 60, 0, ⵠΔ[909], 3);
    this.ⵠΔⲆ[162].id = 162;
    this.ⵠΔⲆ[128] = tf(60, 60, 0, ⵠΔ[912], 3);
    this.ⵠΔⲆ[128].id = 128;
    this.Ⲇⵠᐃ[53] = tf(68, 68, 0, ⵠΔ[976], 3);
    this.Ⲇⵠᐃ[53].id = 53;
    this.ΔⲆΔ[53] = tf(60, 60, 0, ⵠΔ[975], 3);
    this.ΔⲆΔ[53].id = 53;
    this.ⵠΔⲆ[22] = tf(60, 60, 0, ⵠΔ[977], 3);
    this.ⵠΔⲆ[22].id = 22;
    this.Ⲇⵠᐃ[54] = tf(68, 68, 0, ⵠΔ[979], 3);
    this.Ⲇⵠᐃ[54].id = 54;
    this.ΔⲆΔ[54] = tf(60, 60, 0, ⵠΔ[978], 3);
    this.ΔⲆΔ[54].id = 54;
    this.ⵠΔⲆ[23] = tf(60, 60, 0, ⵠΔ[980], 3);
    this.ⵠΔⲆ[23].id = 23;
    this.Ⲇⵠᐃ[56] = tf(68, 68, 0, ⵠΔ[713], 3);
    this.Ⲇⵠᐃ[56].id = 56;
    this.ΔⲆΔ[56] = tf(60, 60, 0, ⵠΔ[712], 3);
    this.ΔⲆΔ[56].id = 56;
    this.ⵠΔⲆ[123] = tf(60, 60, 0, ⵠΔ[714], 3);
    this.ⵠΔⲆ[123].id = 123;
    this.Ⲇⵠᐃ[82] = tf(68, 68, 0, ⵠΔ[428], 3);
    this.Ⲇⵠᐃ[82].id = 82;
    this.ΔⲆΔ[82] = tf(60, 60, 0, ⵠΔ[426], 3);
    this.ΔⲆΔ[82].id = 82;
    this.ⵠΔⲆ[82] = tf(60, 60, 0, ⵠΔ[427], 3);
    this.ⵠΔⲆ[82].id = 82;
    this.Ⲇⵠᐃ[235] = tf(68, 68, 0, ⵠΔ[1159], 3);
    this.Ⲇⵠᐃ[235].id = 235;
    this.ΔⲆΔ[235] = tf(60, 60, 0, ⵠΔ[1158], 3);
    this.ΔⲆΔ[235].id = 235;
    this.Ⲇⵠᐃ[238] = tf(68, 68, 0, ⵠΔ[1188], 3);
    this.Ⲇⵠᐃ[238].id = 238;
    this.ΔⲆΔ[238] = tf(60, 60, 0, ⵠΔ[1187], 3);
    this.ΔⲆΔ[238].id = 238;
    this.Ⲇⵠᐃ[236] = tf(68, 68, 0, ⵠΔ[1161], 3);
    this.Ⲇⵠᐃ[236].id = 236;
    this.ΔⲆΔ[236] = tf(60, 60, 0, ⵠΔ[1160], 3);
    this.ΔⲆΔ[236].id = 236;
    this.Ⲇⵠᐃ[152] = tf(68, 68, 0, ⵠΔ[1197], 3);
    this.Ⲇⵠᐃ[152].id = 152;
    this.ΔⲆΔ[152] = tf(60, 60, 0, ⵠΔ[1195], 3);
    this.ΔⲆΔ[152].id = 152;
    this.ⵠΔⲆ[116] = tf(60, 60, 0, ⵠΔ[1196], 3);
    this.ⵠΔⲆ[116].id = 116;
    this.Ⲇⵠᐃ[212] = tf(68, 68, 0, ⵠΔ[992], 3);
    this.Ⲇⵠᐃ[212].id = 212;
    this.ΔⲆΔ[212] = tf(60, 60, 0, ⵠΔ[991], 3);
    this.ΔⲆΔ[212].id = 212;
    this.ⵠΔⲆ[73] = tf(60, 60, 0, ⵠΔ[990], 3);
    this.ⵠΔⲆ[73].id = 73;
    this.Ⲇⵠᐃ[213] = tf(68, 68, 0, ⵠΔ[995], 3);
    this.Ⲇⵠᐃ[213].id = 213;
    this.ΔⲆΔ[213] = tf(60, 60, 0, ⵠΔ[994], 3);
    this.ΔⲆΔ[213].id = 213;
    this.ⵠΔⲆ[74] = tf(60, 60, 0, ⵠΔ[993], 3);
    this.ⵠΔⲆ[74].id = 74;
    this.Ⲇⵠᐃ[214] = tf(68, 68, 0, ⵠΔ[998], 3);
    this.Ⲇⵠᐃ[214].id = 214;
    this.ΔⲆΔ[214] = tf(60, 60, 0, ⵠΔ[997], 3);
    this.ΔⲆΔ[214].id = 214;
    this.ⵠΔⲆ[75] = tf(60, 60, 0, ⵠΔ[996], 3);
    this.ⵠΔⲆ[75].id = 75;
    this.Ⲇⵠᐃ[215] = tf(68, 68, 0, ⵠΔ[1001], 3);
    this.Ⲇⵠᐃ[215].id = 215;
    this.ΔⲆΔ[215] = tf(60, 60, 0, ⵠΔ[1000], 3);
    this.ΔⲆΔ[215].id = 215;
    this.ⵠΔⲆ[76] = tf(60, 60, 0, ⵠΔ[999], 3);
    this.ⵠΔⲆ[76].id = 76;
    this.Ⲇⵠᐃ[216] = tf(68, 68, 0, ⵠΔ[1004], 3);
    this.Ⲇⵠᐃ[216].id = 216;
    this.ΔⲆΔ[216] = tf(60, 60, 0, ⵠΔ[1003], 3);
    this.ΔⲆΔ[216].id = 216;
    this.ⵠΔⲆ[77] = tf(60, 60, 0, ⵠΔ[1002], 3);
    this.ⵠΔⲆ[77].id = 77;
    this.Ⲇⵠᐃ[220] = tf(68, 68, 0, ⵠΔ[1007], 3);
    this.Ⲇⵠᐃ[220].id = 220;
    this.ΔⲆΔ[220] = tf(60, 60, 0, ⵠΔ[1006], 3);
    this.ΔⲆΔ[220].id = 220;
    this.ⵠΔⲆ[78] = tf(60, 60, 0, ⵠΔ[1005], 3);
    this.ⵠΔⲆ[78].id = 78;
    this.Ⲇⵠᐃ[217] = tf(68, 68, 0, ⵠΔ[1016], 3);
    this.Ⲇⵠᐃ[217].id = 217;
    this.ΔⲆΔ[217] = tf(60, 60, 0, ⵠΔ[1015], 3);
    this.ΔⲆΔ[217].id = 217;
    this.ⵠΔⲆ[60] = tf(60, 60, 0, ⵠΔ[1014], 3);
    this.ⵠΔⲆ[60].id = 60;
    this.Ⲇⵠᐃ[219] = tf(68, 68, 0, ⵠΔ[1013], 3);
    this.Ⲇⵠᐃ[219].id = 219;
    this.ΔⲆΔ[219] = tf(60, 60, 0, ⵠΔ[1012], 3);
    this.ΔⲆΔ[219].id = 219;
    this.ⵠΔⲆ[72] = tf(60, 60, 0, ⵠΔ[1011], 3);
    this.ⵠΔⲆ[72].id = 72;
    this.Ⲇⵠᐃ[218] = tf(68, 68, 0, ⵠΔ[1010], 3);
    this.Ⲇⵠᐃ[218].id = 218;
    this.ΔⲆΔ[218] = tf(60, 60, 0, ⵠΔ[1009], 3);
    this.ΔⲆΔ[218].id = 218;
    this.ⵠΔⲆ[66] = tf(60, 60, 0, ⵠΔ[1008], 3);
    this.ⵠΔⲆ[66].id = 66;
    this.Ⲇⵠᐃ[153] = tf(68, 68, 0, ⵠΔ[1201], 3);
    this.Ⲇⵠᐃ[153].id = 153;
    this.ΔⲆΔ[153] = tf(60, 60, 0, ⵠΔ[1199], 3);
    this.ΔⲆΔ[153].id = 153;
    this.ⵠΔⲆ[117] = tf(60, 60, 0, ⵠΔ[1200], 3);
    this.ⵠΔⲆ[117].id = 117;
    this.Ⲇⵠᐃ[154] = tf(68, 68, 0, ⵠΔ[1205], 3);
    this.Ⲇⵠᐃ[154].id = 154;
    this.ΔⲆΔ[154] = tf(60, 60, 0, ⵠΔ[1203], 3);
    this.ΔⲆΔ[154].id = 154;
    this.ⵠΔⲆ[118] = tf(60, 60, 0, ⵠΔ[1204], 3);
    this.ⵠΔⲆ[118].id = 118;
    this.Ⲇⵠᐃ[155] = tf(68, 68, 0, ⵠΔ[1209], 3);
    this.Ⲇⵠᐃ[155].id = 155;
    this.ΔⲆΔ[155] = tf(60, 60, 0, ⵠΔ[1207], 3);
    this.ΔⲆΔ[155].id = 155;
    this.ⵠΔⲆ[119] = tf(60, 60, 0, ⵠΔ[1208], 3);
    this.ⵠΔⲆ[119].id = 119;
    this.Ⲇⵠᐃ[156] = tf(68, 68, 0, ⵠΔ[1213], 3);
    this.Ⲇⵠᐃ[156].id = 156;
    this.ΔⲆΔ[156] = tf(60, 60, 0, ⵠΔ[1211], 3);
    this.ΔⲆΔ[156].id = 156;
    this.ⵠΔⲆ[120] = tf(60, 60, 0, ⵠΔ[1212], 3);
    this.ⵠΔⲆ[120].id = 120;
    this.Ⲇⵠᐃ[157] = tf(68, 68, 0, ⵠΔ[1217], 3);
    this.Ⲇⵠᐃ[157].id = 157;
    this.ΔⲆΔ[157] = tf(60, 60, 0, ⵠΔ[1215], 3);
    this.ΔⲆΔ[157].id = 157;
    this.ⵠΔⲆ[121] = tf(60, 60, 0, ⵠΔ[1216], 3);
    this.ⵠΔⲆ[121].id = 121;
    this.Ⲇⵠᐃ[203] = tf(68, 68, 0, ⵠΔ[937], 3);
    this.Ⲇⵠᐃ[203].id = 203;
    this.ΔⲆΔ[203] = tf(60, 60, 0, ⵠΔ[936], 3);
    this.ΔⲆΔ[203].id = 203;
    this.ΔⲆΔ[203].info.ⵠᐃ[2] = this.ΔⲆΔ[203].info.ⵠᐃ[0];
    this.Ⲇⵠᐃ[150] = tf(68, 68, 0, ⵠΔ[524], 3);
    this.Ⲇⵠᐃ[150].id = 150;
    this.ΔⲆΔ[150] = tf(60, 60, 0, ⵠΔ[523], 3);
    this.ΔⲆΔ[150].id = 150;
    this.ΔⲆΔ[150].info.ⵠᐃ[2] = this.ΔⲆΔ[150].info.ⵠᐃ[0];
    this.Ⲇⵠᐃ[202] = tf(68, 68, 0, ⵠΔ[939], 3);
    this.Ⲇⵠᐃ[202].id = 202;
    this.ΔⲆΔ[202] = tf(60, 60, 0, ⵠΔ[938], 3);
    this.ΔⲆΔ[202].id = 202;
    this.ΔⲆΔ[202].info.ⵠᐃ[2] = this.ΔⲆΔ[202].info.ⵠᐃ[0];
    this.Ⲇⵠᐃ[19] = tf(68, 68, 0, ⵠΔ[934], 3);
    this.Ⲇⵠᐃ[19].id = 19;
    this.ΔⲆΔ[19] = tf(60, 60, 0, ⵠΔ[932], 3);
    this.ΔⲆΔ[19].id = 19;
    this.ⵠΔⲆ[39] = tf(60, 60, 0, ⵠΔ[933], 3);
    this.ⵠΔⲆ[39].id = 39;
    this.Ⲇⵠᐃ[20] = tf(68, 68, 0, ⵠΔ[923], 3);
    this.Ⲇⵠᐃ[20].id = 20;
    this.ΔⲆΔ[20] = tf(60, 60, 0, ⵠΔ[921], 3);
    this.ΔⲆΔ[20].id = 20;
    this.ⵠΔⲆ[95] = tf(60, 60, 0, ⵠΔ[922], 3);
    this.ⵠΔⲆ[95].id = 95;
    this.Ⲇⵠᐃ[21] = tf(68, 68, 0, ⵠΔ[927], 3);
    this.Ⲇⵠᐃ[21].id = 21;
    this.ΔⲆΔ[21] = tf(60, 60, 0, ⵠΔ[925], 3);
    this.ΔⲆΔ[21].id = 21;
    this.ⵠΔⲆ[96] = tf(60, 60, 0, ⵠΔ[926], 3);
    this.ⵠΔⲆ[96].id = 96;
    this.Ⲇⵠᐃ[22] = tf(68, 68, 0, ⵠΔ[931], 3);
    this.Ⲇⵠᐃ[22].id = 22;
    this.ΔⲆΔ[22] = tf(60, 60, 0, ⵠΔ[929], 3);
    this.ΔⲆΔ[22].id = 22;
    this.ⵠΔⲆ[97] = tf(60, 60, 0, ⵠΔ[930], 3);
    this.ⵠΔⲆ[97].id = 97;
    this.Ⲇⵠᐃ[60] = tf(68, 68, 0, ⵠΔ[736], 3);
    this.Ⲇⵠᐃ[60].id = 60;
    this.ΔⲆΔ[60] = tf(60, 60, 0, ⵠΔ[735], 3);
    this.ΔⲆΔ[60].id = 60;
    this.ⵠΔⲆ[127] = tf(60, 60, 0, ⵠΔ[737], 3);
    this.ⵠΔⲆ[127].id = 127;
    this.Ⲇⵠᐃ[90] = tf(68, 68, 0, ⵠΔ[739], 3);
    this.Ⲇⵠᐃ[90].id = 90;
    this.ΔⲆΔ[90] = tf(60, 60, 0, ⵠΔ[738], 3);
    this.ΔⲆΔ[90].id = 90;
    this.ⵠΔⲆ[173] = tf(60, 60, 0, ⵠΔ[740], 3);
    this.ⵠΔⲆ[173].id = 173;
    this.Ⲇⵠᐃ[92] = tf(68, 68, 0, ⵠΔ[745], 3);
    this.Ⲇⵠᐃ[92].id = 92;
    this.ΔⲆΔ[92] = tf(60, 60, 0, ⵠΔ[744], 3);
    this.ΔⲆΔ[92].id = 92;
    this.ⵠΔⲆ[174] = tf(60, 60, 0, ⵠΔ[746], 3);
    this.ⵠΔⲆ[174].id = 174;
    this.Ⲇⵠᐃ[93] = tf(68, 68, 0, ⵠΔ[748], 3);
    this.Ⲇⵠᐃ[93].id = 93;
    this.ΔⲆΔ[93] = tf(60, 60, 0, ⵠΔ[747], 3);
    this.ΔⲆΔ[93].id = 93;
    this.ⵠΔⲆ[175] = tf(60, 60, 0, ⵠΔ[749], 3);
    this.ⵠΔⲆ[175].id = 175;
    this.Ⲇⵠᐃ[91] = tf(68, 68, 0, ⵠΔ[742], 3);
    this.Ⲇⵠᐃ[91].id = 91;
    this.ΔⲆΔ[91] = tf(60, 60, 0, ⵠΔ[741], 3);
    this.ΔⲆΔ[91].id = 91;
    this.ⵠΔⲆ[176] = tf(60, 60, 0, ⵠΔ[743], 3);
    this.ⵠΔⲆ[176].id = 176;
    this.Ⲇⵠᐃ[100] = tf(68, 68, 0, ⵠΔ[1165], 3);
    this.Ⲇⵠᐃ[100].id = 100;
    this.ΔⲆΔ[100] = tf(60, 60, 0, ⵠΔ[1164], 3);
    this.ΔⲆΔ[100].id = 100;
    this.ⵠΔⲆ[wr.ΔΔᐃᐃᐃ] = tf(60, 60, 0, ⵠΔ[tr.ᐃⵠᐃⲆᐃⲆⲆᐃᐃ], 3);
    this.ⵠΔⲆ[wr.ΔΔᐃᐃᐃ].id = wr.ΔΔᐃᐃᐃ;
    this.Ⲇⵠᐃ[34] = tf(68, 68, 0, ⵠΔ[945], 3);
    this.Ⲇⵠᐃ[34].id = 34;
    this.ΔⲆΔ[34] = tf(60, 60, 0, ⵠΔ[943], 3);
    this.ΔⲆΔ[34].id = 34;
    this.ⵠΔⲆ[30] = tf(60, 60, 0, ⵠΔ[944], 3);
    this.ⵠΔⲆ[30].id = 30;
    this.Ⲇⵠᐃ[44] = tf(68, 68, 0, ⵠΔ[948], 3);
    this.Ⲇⵠᐃ[44].id = 44;
    this.ΔⲆΔ[44] = tf(60, 60, 0, ⵠΔ[946], 3);
    this.ΔⲆΔ[44].id = 44;
    this.ⵠΔⲆ[92] = tf(60, 60, 0, ⵠΔ[947], 3);
    this.ⵠΔⲆ[92].id = 92;
    this.Ⲇⵠᐃ[17] = tf(68, 68, 0, ⵠΔ[878], 3);
    this.Ⲇⵠᐃ[17].id = 17;
    this.ΔⲆΔ[17] = tf(60, 60, 0, ⵠΔ[877], 3);
    this.ΔⲆΔ[17].id = 17;
    this.ⵠΔⲆ[32] = tf(60, 60, 0, ⵠΔ[879], 3);
    this.ⵠΔⲆ[32].id = 32;
    this.Ⲇⵠᐃ[63] = tf(68, 68, 0, ⵠΔ[568], 3);
    this.Ⲇⵠᐃ[63].id = 63;
    this.ΔⲆΔ[63] = tf(60, 60, 0, ⵠΔ[566], 3);
    this.ΔⲆΔ[63].id = 63;
    this.ⵠΔⲆ[130] = tf(60, 60, 0, ⵠΔ[567], 3);
    this.ⵠΔⲆ[130].id = 130;
    this.Ⲇⵠᐃ[187] = tf(68, 68, 0, ⵠΔ[591], 3);
    this.Ⲇⵠᐃ[187].id = 187;
    this.ΔⲆΔ[187] = tf(60, 60, 0, ⵠΔ[253], 3);
    this.ΔⲆΔ[187].id = 187;
    this.Ⲇⵠᐃ[zr.ᐃⲆⲆⵠᐃΔΔ] = tf(68, 68, 0, ⵠΔ[tr.ᐃⲆᐃΔⵠⲆⲆⲆΔ], 3);
    this.Ⲇⵠᐃ[zr.ᐃⲆⲆⵠᐃΔΔ].id = zr.ᐃⲆⲆⵠᐃΔΔ;
    this.ΔⲆΔ[zr.ᐃⲆⲆⵠᐃΔΔ] = tf(60, 60, 0, ⵠΔ[tr.ΔᐃⵠⲆΔⲆⲆΔⵠ], 3);
    this.ΔⲆΔ[zr.ᐃⲆⲆⵠᐃΔΔ].id = zr.ᐃⲆⲆⵠᐃΔΔ;
    this.Ⲇⵠᐃ[zr.ⲆⲆᐃⲆⵠᐃᐃ] = tf(68, 68, 0, ⵠΔ[tr.ⲆΔⲆᐃΔᐃⲆᐃⲆ], 3);
    this.Ⲇⵠᐃ[zr.ⲆⲆᐃⲆⵠᐃᐃ].id = zr.ⲆⲆᐃⲆⵠᐃᐃ;
    this.ΔⲆΔ[zr.ⲆⲆᐃⲆⵠᐃᐃ] = tf(60, 60, 0, ⵠΔ[tr.ⵠⵠⵠΔΔᐃⵠΔΔ], 3);
    this.ΔⲆΔ[zr.ⲆⲆᐃⲆⵠᐃᐃ].id = zr.ⲆⲆᐃⲆⵠᐃᐃ;
    this.Ⲇⵠᐃ[zr.ΔᐃⵠᐃⲆⵠΔ] = tf(68, 68, 0, ⵠΔ[tr.ⲆᐃᐃⵠΔᐃⲆⵠΔ], 3);
    this.Ⲇⵠᐃ[zr.ΔᐃⵠᐃⲆⵠΔ].id = zr.ΔᐃⵠᐃⲆⵠΔ;
    this.ΔⲆΔ[zr.ΔᐃⵠᐃⲆⵠΔ] = tf(60, 60, 0, ⵠΔ[tr.ⵠᐃⵠⲆᐃⵠⲆΔᐃ], 3);
    this.ΔⲆΔ[zr.ΔᐃⵠᐃⲆⵠΔ].id = zr.ΔᐃⵠᐃⲆⵠΔ;
    this.Ⲇⵠᐃ[zr.ᐃΔⵠΔⵠᐃⵠ] = tf(68, 68, 0, ⵠΔ[tr.ⵠⲆᐃⵠᐃⲆⲆΔᐃ], 3);
    this.Ⲇⵠᐃ[zr.ᐃΔⵠΔⵠᐃⵠ].id = zr.ᐃΔⵠΔⵠᐃⵠ;
    this.ΔⲆΔ[zr.ᐃΔⵠΔⵠᐃⵠ] = tf(60, 60, 0, ⵠΔ[tr.ⲆᐃⵠⵠΔⲆᐃᐃΔ], 3);
    this.ΔⲆΔ[zr.ᐃΔⵠΔⵠᐃⵠ].id = zr.ᐃΔⵠΔⵠᐃⵠ;
    this.Ⲇⵠᐃ[zr.ΔⲆⲆⲆΔΔᐃ] = tf(68, 68, 0, ⵠΔ[tr.ᐃᐃⵠΔⲆⲆΔΔⵠ], 3);
    this.Ⲇⵠᐃ[zr.ΔⲆⲆⲆΔΔᐃ].id = zr.ΔⲆⲆⲆΔΔᐃ;
    this.ΔⲆΔ[zr.ΔⲆⲆⲆΔΔᐃ] = tf(60, 60, 0, ⵠΔ[tr.ΔΔⵠⵠⵠᐃⲆΔⵠ], 3);
    this.ΔⲆΔ[zr.ΔⲆⲆⲆΔΔᐃ].id = zr.ΔⲆⲆⲆΔΔᐃ;
    this.ⵠⲆᐃΔⵠⲆᐃ = function () {
      for (var a = lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ, b = 10, c = 10, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⲆⵠⲆᐃⲆᐃΔ = function () {
      var a = Math.floor((10 + this.Ⲇⵠᐃ[0].info.ⵠᐃ[0].width) * Math.floor((3 + lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ.length) / 4) + 35);
      for (var b = 0; b < this.Ⲇⵠᐃ.length; b++) {
        if (this.Ⲇⵠᐃ[b]) {
          this.Ⲇⵠᐃ[b].info.translate.x = a;
          this.Ⲇⵠᐃ[b].info.translate.y = 22;
        }
      }
      this.ⲆⲆⲆᐃⵠᐃᐃ.info.translate.x = a + 17;
      this.ⲆⲆⲆᐃⵠᐃᐃ.info.translate.y = 22 + ⵠΔ[339].height;
      this.ΔⲆⲆⲆⲆⲆᐃ.info.translate.x = a + 17;
      this.ΔⲆⲆⲆⲆⲆᐃ.info.translate.y = 30;
      this.ΔⲆⲆⲆΔⵠΔ.info.translate.x = a + 17;
      this.ΔⲆⲆⲆΔⵠΔ.info.translate.y = 22 + ⵠΔ[339].height;
    };
    this.ᐃⵠΔΔⵠΔΔΔⵠ = function () {
      var a = Math.floor((Ln - ⵠΔ[556][0].width) / 2);
      for (var b = 0; this.ⲆⲆᐃⵠᐃ.length > b; b++) {
        this.ⲆⲆᐃⵠᐃ[b].button.info.translate.x = a;
        this.ⲆⲆᐃⵠᐃ[b].button.info.translate.y = -13;
      }
    };
    this.ᐃⲆᐃⵠᐃⲆΔ = function () {
      var a = 12 + Math.floor((10 + this.ΔᐃⲆⵠᐃΔΔ.info.ⵠᐃ[0].width) * Math.floor((3 + lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ.length) / 4) + 35);
      this.ΔᐃⲆⵠᐃΔΔ.info.translate.x = a;
      this.ΔᐃⲆⵠᐃΔΔ.info.translate.y = 33;
      this.ΔΔΔⲆⵠⲆᐃ.info.translate.x = this.ΔᐃⲆⵠᐃΔΔ.info.translate.x;
      this.ΔΔΔⲆⵠⲆᐃ.info.translate.y = 137;
      this.ᐃⲆᐃⲆΔᐃⲆ.info.translate.x = this.ΔᐃⲆⵠᐃΔΔ.info.translate.x;
      this.ᐃⲆᐃⲆΔᐃⲆ.info.translate.y = 240;
    };
    this.ΔΔⲆⲆΔⵠⵠ = function () {
      var a = 12 + Math.floor((10 + this.ᐃⲆΔΔⲆΔⲆ.info.ⵠᐃ[0].width) * Math.floor((3 + lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ.length) / 4) + 35);
      this.ᐃⲆΔΔⲆΔⲆ.info.translate.x = a;
      this.ᐃⲆΔΔⲆΔⲆ.info.translate.y = 36;
      a += 83;
      this.ⲆΔⵠⲆⵠⲆⲆ.info.translate.x = a;
      this.ⲆΔⵠⲆⵠⲆⲆ.info.translate.y = 36;
      this.ⵠⵠᐃΔⵠᐃΔ.info.translate.x = a;
      this.ⵠⵠᐃΔⵠᐃΔ.info.translate.y = 36;
      this.ⵠⵠⲆᐃⵠⵠⲆ.info.translate.x = a;
      this.ⵠⵠⲆᐃⵠⵠⲆ.info.translate.y = 36;
      this.ⲆⵠΔⲆᐃⵠᐃ.info.translate.x = a;
      this.ⲆⵠΔⲆᐃⵠᐃ.info.translate.y = 36;
      this.ΔⵠⲆᐃᐃΔⵠ.info.translate.x = a;
      this.ΔⵠⲆᐃᐃΔⵠ.info.translate.y = 36;
    };
    this.ⲆⲆΔⲆⵠⲆᐃ = function () {
      var a = 12 + Math.floor((10 + this.ΔᐃⲆⵠⵠᐃᐃ.info.ⵠᐃ[0].width) * Math.floor((3 + lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ.length) / 4) + 35);
      this.ΔᐃⲆⵠⵠᐃᐃ.info.translate.x = a;
      this.ΔᐃⲆⵠⵠᐃᐃ.info.translate.y = 36;
      a += 83;
      this.ⵠⵠⲆⵠΔΔΔ.info.translate.x = a;
      this.ⵠⵠⲆⵠΔΔΔ.info.translate.y = 36;
    };
    this.ᐃᐃᐃⵠᐃΔⲆ = function () {
      var a = Math.floor(Math.floor((3 + lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ.length) / 4) * (10 + this.ᐃⵠⵠⲆΔⲆΔ.info.ⵠᐃ[0].width) + 35);
      this.ᐃⵠⵠⲆΔⲆΔ.info.translate.x = a;
      this.ᐃⵠⵠⲆΔⲆΔ.info.translate.y = 22;
    };
    this.ⲆⲆᐃΔⵠⲆΔ = function () {
      var a = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ;
      if (a.length > 0) {
        var b = Math.floor((Ln - lx.ᐃΔᐃⲆ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; a.length > c; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = qn - a[c].info.width - 10;
        this.ᐃᐃⵠⵠᐃ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ᐃᐃⵠⵠᐃ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃᐃⵠⵠᐃ[a[c].id].info.ⵠᐃ[0].height - 6;
      }
    };
    var n;
    var o = 0;
    function p() {
      j.ⵠⵠᐃ();
      if (++o == 30) {
        j.ΔⲆᐃⲆΔΔΔ();
        j.ⵠⵠᐃ();
        return;
      }
      Ya.setTimeout(p, 33);
    }
    this.ᐃΔᐃΔⵠ = function (a) {
      if (lx.ΔⲆⵠⲆⵠ.open) {
        lx.ΔⲆⵠⲆⵠ.ᐃΔᐃΔⵠ();
      }
      if (lx.ᐃⲆⵠⲆⲆ.open) {
        lx.ᐃⲆⵠⲆⲆ.ᐃΔᐃΔⵠ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⵠᐃΔⵠⵠ.style.display = "none";
      j.ⵠᐃΔⵠⵠ.open = mk;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ⲆᐃΔⲆ.open = Zh;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      j.ΔⲆⵠⵠ.open = false;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ⲆᐃⵠⵠΔ.open = hh;
      document.getElementById("chronoquest").style.display = "none";
      j.ΔᐃΔᐃ.open = hi;
      n = a;
      j.ᐃⲆᐃᐃⲆΔᐃ();
      j.ⵠⲆ.style.cursor = j.ⲆⲆᐃⵠᐃⵠⲆ;
      ox.ᐃΔᐃΔⵠ();
      g = -1;
      q();
      ux();
    };
    var g = -1;
    function q() {
      j.ⵠⵠᐃ();
      if (++g == 30) {
        j.stop();
        n();
        return;
      }
      Ya.setTimeout(q, 33);
    }
    this.ⲆⵠⵠⲆᐃ = false;
    this.stop = function () {
      this.ⲆⵠⵠⲆᐃ = false;
    };
    this.ΔΔΔᐃᐃ = function () {
      Δⵠᐃᐃ.ⵠΔΔⵠⲆΔⵠΔΔ();
      j.ⲆⵠⵠⲆᐃ = true;
      g = -1;
      o = 0;
      p();
    };
    this.ⵠⵠᐃ = function () {
      this.ΔⵠⲆⵠ.translate.x = Ln - this.ΔⵠⲆⵠ.ⵠᐃ.width - 10;
      this.ΔⵠⲆⵠ.translate.y = 5;
      kx.ΔⲆᐃΔⵠ.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[725][0].width - 85;
      kx.ΔⲆᐃΔⵠ.translate.y = 10;
      this.ⲆᐃΔⲆ.button.info.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[708][0].width - 10;
      this.ⲆᐃΔⲆ.button.info.translate.y = 10;
      this.ΔᐃΔᐃ.button.info.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[755][0].width - 20;
      this.ΔᐃΔᐃ.button.info.translate.y = this.ⲆᐃΔⲆ.button.info.translate.y + ⵠΔ[708][0].height + 5;
      this.options.button.info.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[727][0].width - 20;
      this.options.button.info.translate.y = this.ΔᐃΔᐃ.button.info.translate.y + ⵠΔ[727][0].height + 18;
      this.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.info.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[727][0].width - 20;
      this.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.info.translate.y = this.options.button.info.translate.y + ⵠΔ[783][0].height;
      this.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.info.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[727][0].width - 20;
      this.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.info.translate.y = this.options.button.info.translate.y + ⵠΔ[783][0].height;
      this.ⵠᐃΔⵠⵠ.button.info.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[795][0].width - 20;
      this.ⵠᐃΔⵠⵠ.button.info.translate.y = this.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.info.translate.y + ⵠΔ[795][0].height;
      lx.ⲆⲆⲆΔΔ.translate.x = this.ΔⵠⲆⵠ.translate.x - 63 - 85;
      lx.ⲆⲆⲆΔΔ.translate.y = 100;
      lx.ⵠⲆⵠΔΔ.translate.x = this.ΔⵠⲆⵠ.translate.x - ⵠΔ[517].width - 85;
      lx.ⵠⲆⵠΔΔ.translate.y = lx.ⲆⲆⲆΔΔ.translate.y + 10 + ⵠΔ[546].height;
      this.ⵠⲆᐃⵠΔ.translate.y = qn - 3 - 193;
      this.ⵠⲆᐃⵠΔ.translate.x = Ln - 3 - 193;
      this.ᐃⲆᐃⵠ.translate.x = 5;
      this.ᐃⲆᐃⵠ.translate.y = qn - this.ᐃⲆᐃⵠ.ⵠᐃ.height - 5;
      this.ΔᐃᐃⲆⵠ.button.info.translate.x = Sn - 45.5;
      this.ΔᐃᐃⲆⵠ.button.info.translate.y = 50;
      this.ⵠⲆᐃΔⵠⲆᐃ();
      this.ⲆⲆᐃΔⵠⲆΔ();
      this.ⲆⵠⲆᐃⲆᐃΔ();
      this.ᐃᐃᐃⵠᐃΔⲆ();
      this.ⲆⲆΔⲆⵠⲆᐃ();
      this.ΔΔⲆⲆΔⵠⵠ();
      this.ᐃⲆᐃⵠᐃⲆΔ();
      this.ᐃⵠΔΔⵠΔΔΔⵠ();
      this.sign.ⲆⵠⲆᐃΔⲆᐃ();
      yp();
      lx.ΔⲆⵠⲆⵠ.ⵠⵠᐃ();
      lx.ᐃⲆⵠⲆⲆ.ⵠⵠᐃ();
      this.ᐃⲆΔⵠᐃⲆᐃⲆΔ.ⵠⵠᐃ();
      this.ⲆᐃΔⲆ.ΔΔᐃⵠⲆΔΔ.ⵠⵠᐃ();
      this.ⲆᐃΔⲆ.list.ⵠⵠᐃ();
      this.ΔⲆⵠⵠ.ⵠⵠᐃ();
      this.ⲆᐃⵠⵠΔ.ⵠⵠᐃ();
      this.ΔᐃΔᐃ.ⵠⵠᐃ();
      this.ΔᐃᐃⲆⵠ.ⵠⵠᐃ();
      this.options.ⵠⵠᐃ();
      this.ⵠᐃΔⵠⵠ.ⵠⵠᐃ();
      this.sign.ⵠⵠᐃ();
      var a = 0;
      if (o != 30) {
        a = 1500 / (o + 1) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + 1) - 48);
      }
      this.ΔᐃᐃⲆⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔⵠⲆⵠ.translate.y -= a > 0 ? a : -a;
      lx.ⲆⲆⲆΔΔ.translate.y -= a > 0 ? a : -a;
      lx.ⵠⲆⵠΔΔ.translate.y -= a > 0 ? a : -a;
      this.ⲆᐃΔⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔᐃΔᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃΔⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.info.translate.y -= a > 0 ? a : -a;
      kx.ΔⲆᐃΔⵠ.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆᐃⵠ.translate.y -= a < 0 ? a : -a;
      this.ⵠⲆᐃⵠΔ.translate.y -= a < 0 ? a : -a;
    };
    this.ᐃᐃⲆⲆΔΔΔⲆⵠ = function () {
      if (!lx.ⵠᐃᐃΔⲆ.enabled && this.ΔᐃⲆⵠⲆⵠΔ && !lx.ΔᐃⲆᐃⲆ) {
        Fp();
      }
      Op();
      (function () {
        var a = kx.ⵠⵠⵠ[0];
        if (kx.mode === 0 || kx.mode === 7 || kx.mode === 2 || kx.mode === 4 || kx.mode === 5 || kx.mode === 6 || kx.mode === 3) {
          for (var b = 0; b < a.length; b++) {
            a[b].ⵠΔᐃⵠᐃΔⵠ();
          }
        } else if (kx.mode === 1) {
          for (b = 0; b < a.length; b++) {
            if (lx.ⲆⲆᐃⲆΔᐃΔ || lx.ⵠⲆⵠΔΔ.enabled || a[b].ⲆⲆΔⵠ.ⵠⲆⲆΔΔ !== "spectator") {
              a[b].ⵠΔᐃⵠᐃΔⵠ();
            }
          }
        }
      })();
      Wq.ΔⵠΔᐃⲆⲆⵠ();
      if (this.ΔᐃⲆⵠⲆⵠΔ) {
        mp();
        if (this.ⵠᐃΔⲆᐃⵠⵠ === 1) {
          this.ⲆᐃΔⲆ.button.ΔΔⲆⲆ(f);
        }
        if (kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5 && this.ΔΔΔᐃᐃⵠΔ === 1) {
          this.ΔᐃΔᐃ.button.ΔΔⲆⲆ(f);
        }
        this.options.button.ΔΔⲆⲆ(f);
        if (this.ⵠΔⵠᐃⲆⵠΔ === 1) {
          this.ⵠᐃΔⵠⵠ.button.ΔΔⲆⲆ(f);
        }
        if (ox.ΔΔΔᐃᐃ) {
          this.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.ΔΔⲆⲆ(f);
        } else {
          this.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.ΔΔⲆⲆ(f);
        }
        Mp();
        Ep();
        this.ᐃⲆᐃⵠ.ΔΔⲆⲆ();
        Kp();
        Ip();
        Jp();
        Bp();
        Wp();
        vp();
        Cp();
        (function () {
          if (!lx.ⲆᐃⲆᐃ.open && !lx.ⲆⲆⲆᐃⲆ.open && !lx.ⵠⵠΔᐃ.open && !lx.ΔⲆⵠΔ.open && !lx.ⲆⲆᐃᐃ.open) {
            lx.ΔⲆΔⲆΔ.open = zh;
            var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
            var b = 100;
            if (a) {
              for (var c = 0; c < kx.ⵠⵠⵠ[35].length; c++) {
                var d = kx.ⵠⵠⵠ[35][c];
                var e = ⲆᐃΔ.ᐃᐃⵠΔ(d, a);
                if (e < b) {
                  b = e;
                  lx.ΔⲆΔⲆΔ.open = true;
                  lx.ΔⲆΔⲆΔ.ΔⲆᐃΔ = d.ΔⲆᐃΔ;
                  lx.ΔⲆΔⲆΔ.ᐃⵠᐃⵠΔ = d.id;
                }
              }
            }
          }
        })();
        cp();
        zp();
        dp();
        Ap();
        yp();
        Pp();
      }
      if (lx.ⵠᐃᐃΔⲆ.enabled) {
        kp();
      }
      fp();
      if (this.ΔᐃⲆⵠⲆⵠΔ && this.ΔᐃΔᐃᐃⵠᐃ === 1) {
        Dp();
      }
      lx.ΔΔⲆⵠΔᐃⵠ.ΔΔⲆⲆ();
      lx.alert.ΔΔⲆⲆ("#FFF", "#000");
      if (this.ΔᐃⲆⵠⲆⵠΔ) {
        lx.ⵠᐃᐃΔⲆ.ΔΔⲆⲆ();
        lx.ΔᐃᐃⲆⵠ.ΔΔⲆⲆ();
        lx.ᐃΔᐃⲆ.ᐃΔᐃᐃⵠΔⲆ.ΔΔⲆⲆ(qx.ⲆⵠⲆⵠ.x, qx.ⲆⵠⲆⵠ.y);
      }
      pp();
    };
    this.ᐃⵠΔᐃᐃⵠⲆⵠΔ = function () {
      lx.ⲆⲆⵠ.ⵠⵠᐃ();
      lx.ᐃⲆᐃⵠ.ⵠⵠᐃ();
      if (!lx.reconnect.enabled && lx.ᐃᐃΔⵠᐃ) {
        lx.control.ⵠⵠᐃ();
        lx.ⲆⲆⲆΔΔ.ⵠⵠᐃ();
      }
      kx.ⵠⵠᐃ();
      this.ΔᐃΔᐃ.ⵠⲆⲆⵠΔΔΔⲆⵠ();
    };
    this.ΔΔⵠᐃᐃⵠΔⲆᐃ = function () {
      mw();
    };
    this.ᐃΔⲆⲆⵠᐃΔⲆⵠ = function () {
      Δⵠᐃᐃ.ⲆΔᐃⲆΔⵠⲆΔⵠ();
      Δⵠᐃᐃ.ΔⵠΔΔᐃᐃᐃᐃΔ();
      Δⵠᐃᐃ.ΔΔⵠⵠⲆⵠⵠⵠⲆ();
      Δⵠᐃᐃ.ⲆⵠⲆⵠⵠⵠᐃⲆⲆ();
    };
    this.ΔΔⲆⲆ = function () {
      if (!lx.reconnect.enabled && lx.ᐃᐃΔⵠᐃ) {
        this.ᐃΔⲆⲆⵠᐃΔⲆⵠ();
      }
      ox.ᐃᐃᐃΔΔΔⵠⲆⵠ();
      this.ᐃⵠΔᐃᐃⵠⲆⵠΔ();
      if (hx.ᐃⲆᐃⵠⵠⵠⵠ !== 1) {
        this.ΔΔⵠᐃᐃⵠΔⲆᐃ();
        this.ᐃᐃⲆⲆΔΔΔⲆⵠ();
      } else {
        var a = Ⲇᐃ.ⲆⲆΔⵠⵠΔⲆ;
        bp(f, a, Sn - a.width / 4, Tn - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ⲆΔΔⲆΔᐃᐃ = function (a) {
      if (lx.ΔⲆⵠⲆⵠ.open && a.keyCode === 27) {
        lx.ΔⲆⵠⲆⵠ.ᐃΔᐃΔⵠ();
      } else if (lx.ᐃⲆⵠⲆⲆ.open && a.keyCode === 27) {
        lx.ᐃⲆⵠⲆⲆ.ᐃΔᐃΔⵠ();
      } else if (lx.ΔⲆⵠⲆⵠ.open || lx.ᐃⲆⵠⲆⲆ.open || a.keyCode != 79 || g != -1) {
        if (a.keyCode == 13 && g == -1) {
          if (lx.ᐃⲆⵠⲆⲆ.open) {
            lx.ᐃⲆⵠⲆⲆ.ⵠΔⲆⲆⲆᐃⲆ();
          } else {
            lx.ΔⲆⵠⲆⵠ.ΔΔΔᐃᐃ();
          }
        } else if (!lx.ΔⲆⵠⲆⵠ.open && !lx.ᐃⲆⵠⲆⲆ.open) {
          if (a.keyCode === 82) {
            lx.ⲆⲆⲆΔΔ.ΔⵠᐃⵠⲆᐃⲆ();
          } else if (a.keyCode !== 80 || kx.mode !== 1 || lx.ⲆⲆᐃⲆΔᐃΔ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (lx.ᐃΔⵠᐃ.id < 0) {
                var b = a.keyCode - 49;
                var c = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ[b];
                if (c) {
                  Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              lx.ᐃᐃᐃⵠᐃⵠⲆ = !lx.ᐃᐃᐃⵠᐃⵠⲆ;
            } else if (a.keyCode == 71) {
              lx.ᐃΔⵠᐃ.ⵠᐃΔⵠⲆⲆⲆⵠᐃ();
            }
          } else {
            lx.ⵠⲆⵠΔΔ.ΔⵠᐃⵠⲆᐃⲆ();
          }
        }
      } else {
        lx.ᐃⲆⵠⲆⲆ.ⵠΔΔⵠⲆⲆⲆᐃΔ();
      }
      px.up(a);
    };
    this.ⵠᐃⵠΔⲆⲆⵠ = function (a) {
      px.down(a);
      if (a.keyCode == 8 && !lx.ΔⲆⵠⲆⵠ.open && !lx.ᐃⲆⵠⲆⲆ.open) {
        a.preventDefault();
      }
    };
    this.ⵠᐃᐃΔⵠⲆⲆ = function (b) {
      qx.ⲆⵠⲆⵠ = nf(j.ⵠⲆ, b);
      var c = cj;
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
        j.ⵠⲆᐃⵠΔ.focus(qx.ⲆⵠⲆⵠ);
      }
      var d = lx.ⲆᐃⲆᐃ;
      if (lx.ᐃΔⵠᐃ.id < 0 && d.id >= 0 && (!lx.ⲆᐃⲆᐃ.lock || lx.ⲆᐃⲆᐃ.ΔⲆᐃΔ === lx.id)) {
        c |= j.Ⲇⵠᐃ[lx.ⲆᐃⲆᐃ.id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      var e = lx.ⵠⵠΔᐃ;
      if (e.open && e.ᐃⲆΔⵠᐃ > 0) {
        c |= j.ⵠⵠⲆⵠΔΔΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      var f = lx.ⲆⲆᐃᐃ;
      if (f.open && f.ⵠΔⵠⵠᐃΔⵠ > 0) {
        c |= j.ⲆΔⵠⲆⵠⲆⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        c |= j.ⵠⵠᐃΔⵠᐃΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        c |= j.ⵠⵠⲆᐃⵠⵠⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        c |= j.ⲆⵠΔⲆᐃⵠᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        c |= j.ΔⵠⲆᐃᐃΔⵠ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      var a = lx.ΔⲆⵠΔ;
      if (a.open && a.ΔⲆⲆⲆⵠᐃⲆ > 0) {
        c |= j.ᐃⲆᐃⲆΔᐃⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (lx.sign.open) {
        c |= j.sign.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (!lx.ⲆᐃⲆᐃ.lock) {
        if (lx.ⲆᐃⲆᐃ.ⵠⵠᐃⲆⵠⵠᐃ) {
          c |= j.ΔⲆⲆⲆΔⵠΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        }
      }
      if (lx.ⲆᐃⲆᐃ.ⲆⵠᐃΔⲆⵠⲆ) {
        c |= j.ⲆⲆⲆᐃⵠᐃᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (lx.ᐃΔⵠᐃ.id < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open && !j.ⵠᐃΔⵠⵠ.open) {
        for (var k = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ, m = 0; k.length > m; m++) {
          var n = k[m].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
          c |= n;
          if (n) {
            lx.ᐃΔᐃⲆ.ᐃΔᐃᐃⵠΔⲆ.start(m, qx.ⲆⵠⲆⵠ);
          }
          if (d.open && (d.id < 0 || k[m].id == d.id) || lx.ⲆⲆⲆᐃⲆ.open && k[m].id === 109 || lx.ΔⲆΔⲆΔ.open && k[m].id === 180 || lx.ΔⲆⵠΔ.open && (k[m].id === 109 || k[m].id === 131) || lx.ⵠⵠΔᐃ.open && k[m].id === 134 || lx.ⲆⲆᐃᐃ.open && k[m].id === 109) {
            c |= j.ᐃᐃⵠⵠᐃ[k[m].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
          }
        }
      }
      if (lx.ⵠᐃⵠⲆᐃ.open) {
        c |= j.ⵠᐃⵠⲆᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (j.ᐃⲆΔᐃⵠ != -1) {
        if (c |= j.ⲆⲆᐃⵠᐃ[j.ᐃⲆΔᐃⵠ].button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw)) {
          var o = true;
        }
      } else {
        o = mk;
      }
      if (lx.ᐃΔⵠᐃ.id < 0 && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !o && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ⵠᐃΔⵠⵠ.open && !lx.ΔᐃⲆᐃⲆ) {
        k = lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ;
        m = 0;
        for (; k.length > m; m++) {
          c |= k[m].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        }
      }
      if (lx.ᐃΔⵠᐃ.id < 0 && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && lx.ΔᐃᐃⲆⵠ.open && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open) {
        c |= j.ΔᐃᐃⲆⵠ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open) {
        c |= j.ⲆᐃΔⲆ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open) {
        c |= j.options.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open) {
        c |= j.ⵠᐃΔⵠⵠ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open && !j.ⵠᐃΔⵠⵠ.open) {
        if (ox.ΔΔΔᐃᐃ) {
          c |= j.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        } else {
          c |= j.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        }
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ⵠᐃΔⵠⵠ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5) {
        c |= j.ΔᐃΔᐃ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
      }
      if (!c && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open && !j.sign.open) {
        if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ >= 0) {
          Δⵠᐃᐃ.ⲆΔⲆΔⵠΔΔⲆΔ();
        } else if (!o) {
          qx.down();
        }
      }
    };
    this.ᐃᐃⵠᐃⵠᐃᐃ = function (c) {
      qx.ⲆⵠⲆⵠ = nf(j.ⵠⲆ, c);
      qx.up();
      if (!lx.ᐃΔᐃⲆ.ᐃΔᐃᐃⵠΔⲆ.release()) {
        var d = lx.ⲆᐃⲆᐃ;
        var e = lx.ⲆⲆⲆᐃⲆ;
        var f = lx.ΔⲆΔⲆΔ;
        var i = lx.ⵠⵠΔᐃ;
        var k = lx.ⲆⲆᐃᐃ;
        var m = lx.ΔⲆⵠΔ;
        if (lx.control.attack) {
          lx.control.attack = 0;
          Δⵠᐃᐃ.ΔΔⵠⵠⵠΔᐃⵠⵠ();
        }
        if (j.ᐃⲆΔᐃⵠ != -1) {
          var n = j.ⲆⲆᐃⵠᐃ[j.ᐃⲆΔᐃⵠ].button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw);
          var o = document.getElementById("team_box").style;
          if (n && o.display == "inline-block") {
            o.display = "none";
            return;
          }
          if (n) {
            j.ⲆⲆᐃⵠᐃ[j.ᐃⲆΔᐃⵠ].action();
          }
        }
        if (lx.ᐃΔⵠᐃ.id < 0 && d.id >= 0 && !j.ΔⲆⵠⵠ.open) {
          if (!lx.ⲆᐃⲆᐃ.lock || lx.id === lx.ⲆᐃⲆᐃ.ΔⲆᐃΔ) {
            if (n = j.Ⲇⵠᐃ[lx.ⲆᐃⲆᐃ.id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
              Δⵠᐃᐃ.ⲆⵠⵠᐃΔⵠΔⲆⲆ(d);
            }
          }
        }
        if ((i = lx.ⵠⵠΔᐃ).open && i.ᐃⲆΔⵠᐃ > 0 && !j.ΔⲆⵠⵠ.open) {
          if (n = j.ⵠⵠⲆⵠΔΔΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            Δⵠᐃᐃ.ⲆᐃΔⲆΔᐃᐃᐃΔ(i);
          }
        }
        if ((k = lx.ⲆⲆᐃᐃ).open && k.ⵠΔⵠⵠᐃΔⵠ > 0 && !j.ΔⲆⵠⵠ.open) {
          switch (k.type) {
            case 24:
              if (n = j.ⲆΔⵠⲆⵠⲆⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
                Δⵠᐃᐃ.ⵠΔⲆⲆᐃⵠⲆ(k);
              }
              break;
            case 25:
              if (n = j.ⵠⵠᐃΔⵠᐃΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
                Δⵠᐃᐃ.ⵠΔⲆⲆᐃⵠⲆ(k);
              }
              break;
            case 26:
              if (n = j.ⵠⵠⲆᐃⵠⵠⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
                Δⵠᐃᐃ.ⵠΔⲆⲆᐃⵠⲆ(k);
              }
              break;
            case 27:
              if (n = j.ⲆⵠΔⲆᐃⵠᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
                Δⵠᐃᐃ.ⵠΔⲆⲆᐃⵠⲆ(k);
              }
              break;
            case 28:
              if (n = j.ΔⵠⲆᐃᐃΔⵠ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
                Δⵠᐃᐃ.ⵠΔⲆⲆᐃⵠⲆ(k);
              }
          }
        }
        if ((m = lx.ΔⲆⵠΔ).open && m.ΔⲆⲆⲆⵠᐃⲆ > 0 && !j.ΔⲆⵠⵠ.open) {
          if (n = j.ᐃⲆᐃⲆΔᐃⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            Δⵠᐃᐃ.ᐃⵠⲆΔᐃᐃⲆⵠⲆ(m);
          }
        }
        if (lx.sign.open && !j.ΔⲆⵠⵠ.open) {
          if (n = j.sign.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            j.sign.select();
          }
        }
        if (!lx.ⲆᐃⲆᐃ.lock && !j.ΔⲆⵠⵠ.open) {
          if (lx.ⲆᐃⲆᐃ.ⵠⵠᐃⲆⵠⵠᐃ && (n = j.ΔⲆⲆⲆΔⵠΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw))) {
            Δⵠᐃᐃ.ⵠⲆⵠⲆΔΔⵠᐃⲆ(d);
          }
        }
        if (lx.ⲆᐃⲆᐃ.ⲆⵠᐃΔⲆⵠⲆ && !j.ΔⲆⵠⵠ.open && (n = j.ⲆⲆⲆᐃⵠᐃᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw))) {
          Δⵠᐃᐃ.ⲆⵠⵠⲆⵠᐃΔΔⲆ(d);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (lx.ⵠᐃⵠⲆᐃ.open) {
          if (n = j.ⵠᐃⵠⲆᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            Δⵠᐃᐃ.ⵠᐃⵠⲆᐃ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.id < 0 && !lx.ⵠᐃᐃΔⲆ.enabled && !j.ΔⲆⵠⵠ.open) {
          for (var l = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ, p = 0; l.length > p; p++) {
            if (n = l[p].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
              if (c.which != 1 || c.shiftKey) {
                if ((c.which == 1 && c.shiftKey || c.which == 3) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                  j.ΔⲆⵠⵠ.ⲆΔⲆⵠⲆⵠΔ(l[p].id);
                }
              } else {
                Δⵠᐃᐃ.ⲆⲆᐃⵠⵠ(l[p].id, p);
              }
            } else if (d.open && (d.id < 0 || l[p].id === d.id)) {
              if ((n = j.ᐃᐃⵠⵠᐃ[l[p].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                Δⵠᐃᐃ.ΔⲆⲆⲆᐃⲆⲆⵠᐃ(d, l[p].id, c.shiftKey ? 10 : 1);
              }
            } else if (f.open && l[p].id === 180) {
              if ((n = j.ᐃᐃⵠⵠᐃ[l[p].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                Δⵠᐃᐃ.ᐃᐃⵠΔΔᐃᐃᐃⵠ(f);
              }
            } else if (e.open && l[p].id === 109) {
              if ((n = j.ᐃᐃⵠⵠᐃ[l[p].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                Δⵠᐃᐃ.ᐃᐃᐃⲆⲆⵠⵠᐃᐃ(e, c.shiftKey ? 10 : 1);
              }
            } else if (i.open && l[p].id === 134) {
              if ((n = j.ᐃᐃⵠⵠᐃ[l[p].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                Δⵠᐃᐃ.ᐃⵠᐃᐃᐃΔᐃΔΔ(i, c.shiftKey ? 10 : 1);
              }
            } else if (k.open && l[p].id === 109) {
              if ((n = j.ᐃᐃⵠⵠᐃ[l[p].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                Δⵠᐃᐃ.ΔⲆⲆᐃᐃⵠⲆΔΔ(k, c.shiftKey ? 10 : 1);
              }
            } else if (m.open && (l[p].id === 109 || l[p].id === 131)) {
              if ((n = j.ᐃᐃⵠⵠᐃ[l[p].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0) {
                if (l[p].id === 109) {
                  Δⵠᐃᐃ.ᐃⵠⵠⲆⵠᐃᐃ(m, c.shiftKey ? 10 : 1, 0);
                } else {
                  Δⵠᐃᐃ.ᐃⵠⵠⲆⵠᐃᐃ(m, 0, c.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.id < 0 && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !lx.ⵠᐃᐃΔⲆ.enabled && !j.ΔⲆⵠⵠ.open && !lx.ΔᐃⲆᐃⲆ) {
          l = lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ;
          p = 0;
          for (; p < l.length; p++) {
            if (n = l[p].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
              ⲆⲆΔΔⲆ = Δⵠᐃᐃ.ⲆⲆⵠᐃⲆⵠᐃΔΔ(l[p].id);
              if (ⲆⲆΔΔⲆ && ga) {
                ga("send", "event", "Game", "craft", Br[Is[l[p].id].ΔⲆᐃⵠ].name);
              }
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.id < 0 && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && lx.ΔᐃᐃⲆⵠ.open && !j.ⵠᐃΔⵠⵠ.open && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open) {
          if (n = j.ΔᐃᐃⲆⵠ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw)) {
            nx.ΔᐃᐃⲆⵠ.select();
          }
        }
        if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⵠᐃΔⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open) {
          if (ox.ΔΔΔᐃᐃ) {
            if (n = j.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
              ox.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (n = j.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            ox.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open) {
          if (n = j.options.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            j.options.ΔⲆⵠⲆΔΔᐃΔᐃ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open && j.ⵠΔⵠᐃⲆⵠΔ === 1) {
          if (n = j.ⵠᐃΔⵠⵠ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            j.ⵠᐃΔⵠⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ΔⲆⵠⵠ.open && !j.ⵠᐃΔⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && j.ⵠᐃΔⲆᐃⵠⵠ === 1) {
          if (n = j.ⲆᐃΔⲆ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            j.ⲆᐃΔⲆ.ⲆΔⵠⵠᐃⲆᐃⵠⲆ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ⵠᐃΔⵠⵠ.open && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5 && j.ΔΔΔᐃᐃⵠΔ === 1) {
          if (n = j.ΔᐃΔᐃ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
            j.ΔᐃΔᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (lx.ᐃΔⵠᐃ.ⵠΔⲆⵠΔ && c.which == 3) {
          j.ⲆᐃⵠⵠΔ.ⲆΔⲆⵠⲆⵠΔ();
        }
      }
    };
    this.ᐃᐃⲆⲆΔΔⲆ = false;
    this.ᐃⲆᐃⲆΔⵠⵠ = function (b) {
      qx.ⲆⵠⲆⵠ = nf(j.ⵠⲆ, b);
      var d = false;
      nx.ⵠᐃⲆⵠΔ.display = 0;
      lx.ᐃΔᐃⲆ.ᐃΔᐃᐃⵠΔⲆ.ⲆᐃⲆᐃΔ(qx.ⲆⵠⲆⵠ);
      if (j.ᐃⲆΔᐃⵠ != -1) {
        d |= j.ⲆⲆᐃⵠᐃ[j.ᐃⲆΔᐃⵠ].button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      var e = lx.ⵠⵠΔᐃ;
      if (e.open && e.ᐃⲆΔⵠᐃ > 0) {
        d |= j.ⵠⵠⲆⵠΔΔΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      var f = lx.ⲆⲆᐃᐃ;
      if (f.open && f.ⵠΔⵠⵠᐃΔⵠ > 0) {
        d |= j.ⲆΔⵠⲆⵠⲆⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        d |= j.ⵠⵠᐃΔⵠᐃΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        d |= j.ⵠⵠⲆᐃⵠⵠⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        d |= j.ⲆⵠΔⲆᐃⵠᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        d |= j.ΔⵠⲆᐃᐃΔⵠ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      var a = lx.ΔⲆⵠΔ;
      if (a.open && a.ΔⲆⲆⲆⵠᐃⲆ > 0) {
        d |= j.ᐃⲆᐃⲆΔᐃⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (lx.sign.open) {
        d |= j.sign.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      var i = lx.ⲆᐃⲆᐃ;
      if (lx.ᐃΔⵠᐃ.id < 0 && i.id >= 0 && !lx.ⵠᐃᐃΔⲆ.enabled) {
        if (!lx.ⲆᐃⲆᐃ.lock || lx.ⲆᐃⲆᐃ.ΔⲆᐃΔ === lx.id) {
          d |= j.Ⲇⵠᐃ[i.id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        }
      }
      if (lx.ⵠᐃⵠⲆᐃ.open) {
        d |= j.ⵠᐃⵠⲆᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (!lx.ⲆᐃⲆᐃ.lock && !lx.ⵠᐃᐃΔⲆ.enabled) {
        if (lx.ⲆᐃⲆᐃ.ⵠⵠᐃⲆⵠⵠᐃ) {
          d |= j.ΔⲆⲆⲆΔⵠΔ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        }
      }
      if (lx.ⲆᐃⲆᐃ.ⲆⵠᐃΔⲆⵠⲆ && !lx.ⵠᐃᐃΔⲆ.enabled) {
        d |= j.ⲆⲆⲆᐃⵠᐃᐃ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (lx.ᐃΔⵠᐃ.id < 0 && !lx.ⵠᐃᐃΔⲆ.enabled) {
        for (var k = lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ, m = 0; k.length > m; m++) {
          var n = k[m].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
          d |= nx.ⵠᐃⲆⵠΔ.ΔⵠⲆᐃ(n, k[m], 0);
          if (i.open && (i.id < 0 || i.id == k[m].id) || lx.ⲆⲆⲆᐃⲆ.open && k[m].id == 109 || lx.ΔⲆΔⲆΔ.open && k[m].id === 180 || lx.ΔⲆⵠΔ.open && (k[m].id == 109 || k[m].id == 131) || lx.ⵠⵠΔᐃ.open && k[m].id == 134 || lx.ⲆⲆᐃᐃ.open && k[m].id == 109) {
            d |= j.ᐃᐃⵠⵠᐃ[k[m].id].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
          }
        }
      }
      if (lx.ᐃΔⵠᐃ.id < 0 && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !lx.ⵠᐃᐃΔⲆ.enabled && !lx.ΔᐃⲆᐃⲆ) {
        k = lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ;
        m = 0;
        for (; k.length > m; m++) {
          n = false;
          n = k[m].ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
          d |= nx.ⵠᐃⲆⵠΔ.ΔⵠⲆᐃ(n, k[m], 1);
        }
      }
      if (lx.ᐃΔⵠᐃ.id < 0 && lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !!lx.ΔᐃᐃⲆⵠ.open && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open) {
        d |= j.ΔᐃᐃⲆⵠ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open && j.ⵠᐃΔⲆᐃⵠⵠ === 1) {
        d |= j.ⲆᐃΔⲆ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.ⵠᐃΔⵠⵠ.open) {
        d |= j.options.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open && j.ⵠΔⵠᐃⲆⵠΔ === 1) {
        d |= j.ⵠᐃΔⵠⵠ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.ⲆᐃⵠⵠΔ.open && !j.ΔᐃΔᐃ.open && !j.options.open && !j.ⵠᐃΔⵠⵠ.open) {
        if (ox.ΔΔΔᐃᐃ) {
          d |= j.ᐃⲆⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        } else {
          d |= j.ᐃⲆⲆⲆ.ⲆΔⲆⲆⵠⵠⵠ.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        }
      }
      if (lx.ᐃΔⵠᐃ.ΔᐃΔⵠ < 0 && !j.ⲆᐃΔⲆ.open && !j.ΔⲆⵠⵠ.open && !j.options.open && !j.ⲆᐃⵠⵠΔ.open && !j.ⵠᐃΔⵠⵠ.open && kx.mode !== 2 && kx.mode !== 4 && kx.mode !== wf.ⵠⵠΔⵠⵠΔΔⵠⵠ && j.ΔΔΔᐃᐃⵠΔ === 1) {
        d |= j.ΔᐃΔᐃ.button.ΔⵠⲆᐃ(j.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
      }
      if (j.ᐃᐃⲆⲆΔΔⲆ !== d) {
        j.ᐃᐃⲆⲆΔΔⲆ = d;
        c.style.cursor = d ? j.ⲆⵠᐃΔⵠⵠⲆ : j.ⲆⲆᐃⵠᐃⵠⲆ;
      }
    };
    this.ΔⲆᐃⲆΔΔΔ = function () {
      Ya.addEventListener("mousedown", this.ⵠᐃᐃΔⵠⲆⲆ, false);
      Ya.addEventListener("mouseup", this.ᐃᐃⵠᐃⵠᐃᐃ, En);
      Ya.addEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠⵠ, false);
      Ya.addEventListener("keyup", this.ⲆΔΔⲆΔᐃᐃ, false);
      Ya.addEventListener("keydown", this.ⵠᐃⵠΔⲆⲆⵠ, cj);
    };
    this.ᐃⲆᐃᐃⲆΔᐃ = function () {
      Ya.removeEventListener("mousedown", this.ⵠᐃᐃΔⵠⲆⲆ, Qr);
      Ya.removeEventListener("mouseup", this.ᐃᐃⵠᐃⵠᐃᐃ, false);
      Ya.removeEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠⵠ, false);
      Ya.removeEventListener("keyup", this.ⲆΔΔⲆΔᐃᐃ, Ah);
      Ya.removeEventListener("keydown", this.ⵠᐃⵠΔⲆⲆⵠ, cr);
    };
  }
  function Xf(a, b, c, d) {
    Jj(Dw, a, b, c, d);
    return ((130 + (An(of[0], of[1], of[2], of[3], of[0]) ^ An(of[1], of[2], of[3], of[0], of[1]))) * 48271 + 0) % 2147483647;
  }
  function Zf(b, c, d, e, f, i) {
    const a = ((43318 + d) * 214013 + 2531011) % 4294967296;
    const j = (e | 11848) & ~(e & 11848);
    const k = (16 << (f >> 8 & 255)) + (24 << (f & 255)) + (0 << (f >> 16 & 255)) + (8 << (f >> 24 & 255));
    const h = (i | 63990) & ~(i & 63990);
    const l = Ys((0 << (b & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)), c ^ 21854);
    bx(a, j, k, h);
    return (l | 5351) & ~(l & 5351);
  }
  function $f() {
    ⲆᐃΔ.Δᐃᐃᐃᐃᐃⵠ("https://twitter.com/intent/tweet?text=I%20survived%20" + lx.ΔⵠΔ + "%20days%20with%20" + lx.ᐃΔⵠⲆΔᐃⵠ.ⵠᐃⲆΔⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Lw(b, c, d, e, f) {
    const i = b ^ 40006;
    const a = c ^ 50545;
    const j = (2147483587 + (39755 + d) * 2147483629) % 2147483647;
    const k = ((e + 53065) * 2147483629 + 2147483587) % 2147483647;
    const h = f ^ 1988;
    const l = Us(i, a, j, k, h, i);
    Us(a, j, k, h, i, a);
    return (l | 5060) & ~(l & 5060);
  }
  function Mw(b, c, d, e, f) {
    const g = b ^ 61577;
    const a = ~(c & 24061) & 24061 | ~(c & 24061) & c;
    return (1013904223 + (12473 + (function (b, c, d, e, f) {
      const g = ~(b & 54542) & (b | 54542);
      const a = (2531011 + (51635 + c) * 214013) % 4294967296;
      const h = dw(g, a, ((d + 29026) * 22695477 + 1) % 4294967296, e ^ 43761, ((36358 + f) * 22695477 + 1) % 4294967296);
      Vw(g, a);
      return ~(h & 6849) & h | ~(h & 6849) & 6849;
    }(g, a, (8 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (0 << (d & 255)), (e | 48791) & ~(e & 48791), (f | 11550) & ~(f & 11550)) ^ kn(g, a))) * 1664525) % 4294967296;
  }
  function Nw(b, c, d, e, f, g) {
    Qj(Dw, b, c, d, e, f, g);
    return (15248 + (Uw(of[0], of[1], of[2], of[3], of[4]) ^ Uw(of[5], of[0], of[1], of[2], of[3]))) % 65504;
  }
  function Ow(b, c) {
    this.ⵠⲆ = b;
    this.Δ = c;
    var d = this;
    this.ⲆⵠᐃⵠⲆΔⵠ = lg;
    this.ᐃⲆⵠⲆΔΔⲆ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ΔⵠΔΔⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + lx.ᐃΔⵠⲆΔᐃⵠ.ᐃΔⲆΔⵠⵠⵠ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + pt[335] + " : " + lx.ΔⵠΔ + "</div><div class=\"stats\"> " + pt[334] + " : " + lx.ᐃΔⵠⲆΔᐃⵠ.ⲆⵠⵠⲆΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + pt[333] + " : " + lx.ᐃΔⵠⲆΔᐃⵠ.ⵠᐃⲆΔⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + lx.ᐃΔⵠⲆΔᐃⵠ.ⲆⲆⵠⵠⲆᐃΔ + " " + pt[332] + "</div></div><div id=\"shop_points\">" + pt[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + pt[329] + "</div><div class=\"social\" id=\"fffacebook\">" + pt[330] + "</div></div><div id=\"bbback\">" + pt[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", $f, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          mx.ᐃΔᐃΔⵠ(hx.ΔΔΔᐃᐃ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Rw, mk);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", yx + "getBreadAndScore?userid=" + Fx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - hx.ⲆⲆΔΔᐃ;
              hx.ⲆⲆΔΔᐃ = b.b;
              hx.ⵠᐃⲆΔⵠ = b.s;
              hx.ⵠⵠⵠᐃⲆ = hx.ⵠᐃΔΔⵠⲆⵠ(hx.ⵠᐃⲆΔⵠ);
              hx.ΔⲆᐃᐃⵠⵠⲆ = hx.ⲆΔᐃⲆΔᐃⲆ(hx.ⵠᐃⲆΔⵠ);
              hx.ᐃⲆᐃΔⵠΔⵠ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ⵠⵠᐃ();
      if (++g != 30) {
        Ya.setTimeout(e, 33);
      } else {
        d.ⵠⵠᐃ();
      }
    }
    this.ᐃΔᐃΔⵠ = function (a) {
      if (d.ⲆⵠᐃⵠⲆΔⵠ === hj) {
        d.ⲆⵠᐃⵠⲆΔⵠ = false;
        f = a;
        i = -1;
        j();
        ux();
      }
    };
    var i = -1;
    function j() {
      d.ⵠⵠᐃ();
      if (++i == 30) {
        d.stop();
        d.ᐃⲆⵠⲆΔΔⲆ.style.display = "none";
        f();
        return;
      }
      Ya.setTimeout(j, 33);
    }
    this.ⲆⵠⵠⲆᐃ = hs;
    this.stop = function () {
      this.ⲆⵠⵠⲆᐃ = hs;
    };
    this.ΔΔΔᐃᐃ = function () {
      wx();
      document.getElementById("game_body").style.backgroundColor = tr.ᐃⵠΔⲆⵠ[jx.time];
      d.ᐃⲆⵠⲆΔΔⲆ.ΔⵠΔΔⵠ();
      hx.ⵠᐃᐃⲆⲆ.style.display = "inline-block";
      d.ⲆⵠⵠⲆᐃ = true;
      d.ⲆⵠᐃⵠⲆΔⵠ = true;
      i = -1;
      g = 0;
      e();
    };
    this.ⵠⵠᐃ = function () {
      this.ᐃⲆⵠⲆΔΔⲆ.translate.x = Math.floor(Sn - 275);
      this.ᐃⲆⵠⲆΔΔⲆ.translate.y = Math.floor(Tn - this.ᐃⲆⵠⲆΔΔⲆ.height - 28);
      hx.ⵠᐃᐃⲆⲆ.translate.x = this.ᐃⲆⵠⲆΔΔⲆ.translate.x - 350;
      hx.ⵠᐃᐃⲆⲆ.translate.y = this.ᐃⲆⵠⲆΔΔⲆ.translate.y + 0;
      hx.ⵠᐃᐃⲆⲆ.ⵠⵠᐃ();
      if (g != 30 || i != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + 1) - 50;
        }
        if (i != -1) {
          a = -(1750 / (30 - i + 1) - 48);
        }
        this.ᐃⲆⵠⲆΔΔⲆ.translate.y -= a;
      }
      this.ᐃⲆⵠⲆΔΔⲆ.ⵠⵠᐃ();
    };
    this.ΔΔⲆⲆ = function () {
      $m();
      lx.alert.ΔΔⲆⲆ("#FFF", "#000");
    };
  }
  function Pw(b, c, d, e, f) {
    const g = ~(b & 29859) & b | ~(b & 29859) & 29859;
    const a = (3814 + c) % 65365;
    const h = (8 << (d >> 16 & 255)) + (24 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)) + (16 << (d & 255));
    return (12345 + (24327 + (Lw(g, a, h, (2147483587 + (e + 18654) * 2147483629) % 2147483647, ~(f & 62200) & 62200 | ~(f & 62200) & f) ^ gx(g, a, h))) * 1103515245) % 2147483648;
  }
  function Qw(b, c, d, e, f, i) {
    const a = ~(b & 42930) & b | ~(b & 42930) & 42930;
    const j = ((e + 12967) * 1103515245 + 12345) % 2147483648;
    const k = f ^ 3240;
    const h = (24 << (i >> 16 & 255)) + (8 << (i >> 8 & 255)) + (0 << (i >> 24 & 255)) + (16 << (i & 255));
    const l = gb(a, ~(c & 8421) & (c | 8421), (12345 + (d + 3650) * 1103515245) % 2147483648);
    const g = at(j, k, h, a);
    return (0 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (16 << ((l ^ g) >> 24 & 255)) + (24 << ((l ^ g) & 255));
  }
  function Rw() {
    ⲆᐃΔ.Δᐃᐃᐃᐃᐃⵠ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Sw(c, j) {
    this.ⵠⲆ = c;
    this.Δ = j;
    if (Ya.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆⲆᐃⵠᐃⵠⲆ = "default";
      this.ⲆⵠᐃΔⵠⵠⲆ = "pointer";
    } else {
      this.ⲆⲆᐃⵠᐃⵠⲆ = "url('img/cursor0.png'), default";
      this.ⲆⵠᐃΔⵠⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    var u = this;
    function e(c, e, f, i, j) {
      var a = this;
      for (var m = e + 9, n = 0, o = i, p = e; p < m; p++) {
        u.buttons[p].info.callback = b;
        u.buttons[p].info.ᐃᐃΔᐃᐃᐃΔⲆⲆ = c;
      }
      function q() {
        var a = c[o];
        hx.ΔΔᐃᐃᐃⵠⵠ = Aw(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
        if (Oh !== a.level) {
          hx.ⵠΔⵠΔᐃⵠⵠ = Aw("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, bj, 10, 8);
        } else {
          hx.ⵠΔⵠΔᐃⵠⵠ = Aw("by " + a.ⲆⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        }
      }
      function b() {
        if (o !== this.ⲆⵠⲆⲆⵠᐃⵠ && this.ⲆⵠⲆⲆⵠᐃⵠ !== -1) {
          if (this.ⵠⵠΔΔᐃⵠⵠ > 0) {
            if (ᐃⲆᐃⵠⵠⲆᐃ === e) {
              k(w, fa, "none");
            } else {
              k(C, fa, "none");
            }
          } else if (e === ᐃⲆᐃⵠⵠⲆᐃ) {
            k(w, ha, "inline-block");
          } else {
            k(C, ha, "inline-block");
          }
          o = this.ⲆⵠⲆⲆⵠᐃⵠ;
          f(this.ⲆⵠⲆⲆⵠᐃⵠ);
          q();
        }
      }
      this.ᐃⵠΔⲆΔ = function () {
        for (var a = e, b = n * 3; a < m && c.length > b; a++, b++) {
          if (c[b].ᐃⲆΔ !== ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ || j[b] !== 0) {
            u.buttons[a].info.ⲆⵠⲆⲆⵠᐃⵠ = b;
            for (var d = 0; d < 3; d++) {
              u.buttons[a].info.ⵠᐃ[d] = ⵠⵠᐃᐃⵠ[c[b].ᐃⲆΔ][d];
              u.buttons[a].info.active = ha;
              u.buttons[a].info.ⵠⵠΔΔᐃⵠⵠ = j[b];
            }
          } else {
            u.buttons[a].info.ⲆⵠⲆⲆⵠᐃⵠ = -1;
            u.buttons[a].info.active = fa;
          }
        }
        for (; m > a; a++) {
          u.buttons[a].info.ⲆⵠⲆⲆⵠᐃⵠ = -1;
          u.buttons[a].info.active = fa;
        }
        q();
      };
      u.buttons[m].info.callback = function () {
        if (n > 0) {
          n--;
        }
        a.ᐃⵠΔⲆΔ();
      };
      u.buttons[m + 1].info.callback = function () {
        if (c.length > n * 3 + 9) {
          n++;
        }
        a.ᐃⵠΔⲆΔ();
      };
    }
    function i() {
      var b = Number(ⵠⵠᐃΔ.get("starve_crate"));
      var c = Number(ⵠⵠᐃΔ.get("starve_dead"));
      var d = Number(ⵠⵠᐃΔ.get("starve_book"));
      var e = Number(ⵠⵠᐃΔ.get("starve_bag"));
      var f = Number(ⵠⵠᐃΔ.get("starve_skin"));
      var a = Number(ⵠⵠᐃΔ.get("starve_accessory"));
      u.Δⵠⵠⵠ = f || 0;
      u.Δⵠⵠᐃⵠ = d || 0;
      u.ᐃᐃΔⲆᐃ = b || 1;
      u.ⵠΔⲆΔⵠ = a || 0;
      u.ΔⵠⲆⲆΔ = e || 0;
      u.ⲆᐃᐃⵠΔ = c || 0;
    }
    function a() {
      for (var a = ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ, b = 0; b < a.length; b++) {
        if (ΔⲆᐃ.ⲆᐃⲆΔᐃ === a[b].ᐃⲆΔ) {
          u.unlock.Δⵠⵠⵠ[b] = 1;
        } else {
          u.unlock.Δⵠⵠⵠ[b] = 0;
        }
      }
      a = ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ;
      b = 0;
      for (; b < a.length; b++) {
        if (ΔⲆᐃ.ⲆᐃⲆΔᐃ === a[b].ᐃⲆΔ) {
          u.unlock.ⵠΔⲆΔⵠ[b] = 1;
        } else {
          u.unlock.ⵠΔⲆΔⵠ[b] = 0;
        }
      }
      a = ⵠᐃᐃⵠ.ⵠⵠⲆᐃ;
      b = 0;
      for (; b < a.length; b++) {
        if (ΔⲆᐃ.ⲆᐃⲆΔᐃ === a[b].ᐃⲆΔ) {
          u.unlock.ΔⵠⲆⲆΔ[b] = 1;
        } else {
          u.unlock.ΔⵠⲆⲆΔ[b] = 0;
        }
      }
      a = ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ᐃⲆΔ === ΔⲆᐃ.ⲆᐃⲆΔᐃ) {
          u.unlock.Δⵠⵠᐃⵠ[b] = 1;
        } else {
          u.unlock.Δⵠⵠᐃⵠ[b] = 0;
        }
      }
      a = ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ᐃⲆΔ === ΔⲆᐃ.ⲆᐃⲆΔᐃ) {
          u.unlock.ᐃᐃΔⲆᐃ[b] = 1;
          u.unlock.ⲆᐃᐃⵠΔ[b] = 1;
        } else {
          u.unlock.ᐃᐃΔⲆᐃ[b] = 0;
          u.unlock.ⲆᐃᐃⵠΔ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ⵠΔⵠⵠⲆⵠⲆ = 0;
    this.ᐃᐃΔΔⵠᐃⵠ = -1;
    this.ⲆᐃⵠⵠⵠΔᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ⵠᐃ: ⵠΔ[301],
      ΔΔⲆⲆ: function () {
        this.angle += rx * 2;
        j.save();
        j.translate(this.translate.x + this.ⵠᐃ.width / 2, this.translate.y + this.ⵠᐃ.height / 2);
        j.rotate(this.angle);
        bp(j, this.ⵠᐃ, -this.ⵠᐃ.width / 2, -this.ⵠᐃ.height / 2);
        j.restore();
      }
    };
    this.ⵠⵠΔⵠⵠΔⵠ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆⲆΔΔᐃ = 0;
    this.ΔⵠᐃᐃΔⵠΔ = -1;
    this.ᐃᐃΔⲆᐃⵠⲆ = Pn;
    this.ᐃⵠⲆⵠᐃΔⲆ = "";
    this.ⵠⲆⲆⲆⲆΔΔ = "";
    this.ⲆⵠΔΔⵠΔΔ = undefined;
    this.ⵠⵠⵠᐃⲆ = 0;
    this.ⵠᐃⲆᐃΔᐃⵠ = -1;
    this.ⵠⵠΔⵠΔΔᐃ = undefined;
    this.ᐃⲆᐃΔⵠΔⵠ = 0;
    this.ΔⲆᐃᐃⵠⵠⲆ = 0;
    this.ᐃΔΔΔⲆᐃⲆ = 0;
    this.ⲆⵠⵠⲆΔ = 0;
    this.ⲆⵠⵠⵠΔⵠΔ = 0;
    this.time = 0;
    this.ⵠᐃⲆΔⵠ = 0;
    this.ⵠⵠΔⵠⵠⲆⵠ = 0;
    this.ⲆΔΔⲆᐃⵠΔ = 0;
    this.ⲆΔᐃΔⲆⲆⲆ = 0;
    this.ⲆᐃᐃⵠⲆⵠΔ = 0;
    this.ᐃⲆⵠⲆΔΔⵠ = [];
    this.ᐃᐃᐃⵠΔ = -1;
    this.ᐃΔⲆᐃⲆⵠⲆ = -1;
    this.ⲆⵠᐃⵠⲆⲆⵠ = -1;
    this.ᐃᐃⲆⵠⵠᐃᐃ = undefined;
    this.ⵠᐃⵠᐃⲆⵠΔ = Ja;
    this.ΔⵠΔΔᐃⲆⵠ = -1;
    this.ΔⵠᐃᐃⲆᐃⵠ = -1;
    this.ⲆᐃΔⵠΔⵠᐃ = -1;
    this.ⲆⲆᐃⲆⲆⲆⵠ = -1;
    this.ᐃⵠⲆⲆⲆΔᐃ = undefined;
    this.ΔⲆⵠᐃⵠΔᐃ = Ve;
    this.Δⵠⵠᐃᐃⵠⵠ = Bk;
    this.ΔΔᐃᐃᐃⵠⵠ = Fl;
    this.ⵠΔⵠΔᐃⵠⵠ = Ur;
    this.ΔΔⵠᐃΔΔᐃ = Ve;
    this.ΔⲆⲆⵠΔΔⵠ = Pn;
    this.ⲆⲆⵠΔⲆΔᐃ = Ja;
    this.ᐃᐃⲆᐃΔΔⵠ = undefined;
    this.ΔΔΔΔΔⵠⲆ = 3;
    this.ᐃⵠⵠⵠ = 0;
    this.ⵠᐃⲆΔᐃⲆΔΔΔ = kq;
    this.ΔⲆᐃΔᐃ = ⵠⵠᐃΔ.get("starve_quality") ? ⵠⵠᐃΔ.get("starve_quality") : "high";
    if (this.ΔⲆᐃΔᐃ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⲆᐃΔᐃ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ΔⲆᐃΔᐃ = 0;
    }
    this.ΔⵠⵠΔⲆΔΔⲆᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⵠⵠᐃΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      nx.ⲆᐃⵠⲆΔΔΔ();
      hx.ΔⲆᐃΔᐃ = 1;
    };
    this.ΔΔⵠΔᐃᐃⵠᐃΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⵠⵠᐃΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Mq / Pq);
      nx.ⲆᐃⵠⲆΔΔΔ();
      hx.ΔⲆᐃΔᐃ = 0;
    };
    if (ⵠⵠᐃΔ.get("starve_mapping") === undefined && Zq === "FR") {
      px.ⵠΔᐃⵠⲆⲆΔ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⵠⵠᐃΔ.get("starve_mapping") ? ⵠⵠᐃΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      px.ⵠΔᐃⵠⲆⲆΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⵠΔᐃⵠⲆⲆΔ = function () {
      px.ⵠΔᐃⵠⲆⲆΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⵠⵠᐃΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ΔⵠᐃⵠᐃΔᐃ = function () {
      px.ΔⵠᐃⵠᐃΔᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⵠⵠᐃΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆᐃᐃⵠΔᐃᐃ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    i();
    this.unlock = {};
    this.unlock.Δⵠⵠⵠ = [];
    this.unlock.ΔⵠⲆⲆΔ = [];
    this.unlock.Δⵠⵠᐃⵠ = [];
    this.unlock.ᐃᐃΔⲆᐃ = [];
    this.unlock.ⲆᐃᐃⵠΔ = [];
    this.unlock.ⵠΔⲆΔⵠ = [];
    this.ⵠΔΔⵠⲆⵠΔ = 0;
    this.ᐃⵠⲆᐃΔΔΔ = a;
    a();
    this.ⵠᐃᐃⲆⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var n;
    var o = 0;
    function r() {
      u.ⵠⵠᐃ();
      if (++o == 30) {
        u.ΔⲆᐃⲆΔΔΔ();
        u.ⵠΔⵠⵠⲆⵠⲆ = true;
        u.ⵠⵠᐃ();
        return;
      }
      Ya.setTimeout(r, 33);
    }
    this.ᐃΔᐃΔⵠ = function (a) {
      n = a;
      u.ᐃⲆᐃᐃⲆΔᐃ();
      u.ⵠΔⵠⵠⲆⵠⲆ = 0;
      l = -1;
      t();
    };
    var l = -1;
    function t() {
      u.ⵠⵠᐃ();
      if (++l == 30) {
        ⵠⵠᐃΔ.set("starve_nickname", u.ⵠⲆⲆΔΔ.input.value, {
          expires: 30
        });
        u.ⵠⲆⲆΔΔ.style.display = "none";
        u.ᐃᐃᐃᐃⲆ.style.display = "none";
        u.ⵠⵠΔⵠⵠΔⵠ.style.display = "none";
        u.ⲆᐃᐃⵠΔᐃᐃ.style.display = "none";
        u.ⵠᐃᐃⲆⲆ.style.display = "none";
        u.stop();
        n();
        return;
      }
      Ya.setTimeout(t, 33);
    }
    this.ⲆⵠⵠⲆᐃ = En;
    this.stop = function () {
      this.ⲆⵠⵠⲆᐃ = Xa;
    };
    this.ΔΔΔᐃᐃ = function () {
      wx();
      document.getElementById("game_body").style.backgroundColor = tr.ᐃⵠΔⲆⵠ[jx.time];
      u.ⵠⲆⲆΔΔ.style.display = "inline-block";
      u.ᐃᐃᐃᐃⲆ.style.display = "inline-block";
      u.ⵠⵠΔⵠⵠΔⵠ.style.display = "inline-block";
      u.ⲆᐃᐃⵠΔᐃᐃ.style.display = "inline-block";
      u.ⵠᐃᐃⲆⲆ.style.display = "inline-block";
      u.waiting = false;
      u.ⲆⵠⵠⲆᐃ = Qs;
      l = -1;
      o = 0;
      r();
    };
    this.ⲆⲆΔⲆⲆⲆⵠ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ba) === ba) {
        if (Y === (a.position & Y)) {
          a.translate.x = Sn + a.translate.ⵠⲆⵠΔⵠ - b;
        } else if ((a.position & Z) === Z) {
          a.translate.x = Sn + a.translate.ⵠⲆⵠΔⵠ + b;
        } else {
          a.translate.x = Sn + a.translate.ⵠⲆⵠΔⵠ;
        }
      } else if (Y === (a.position & Y)) {
        a.translate.x = a.translate.ⵠⲆⵠΔⵠ - b;
      } else if ((a.position & Z) === Z) {
        a.translate.x = Ln - a.translate.ⵠⲆⵠΔⵠ + b;
      } else {
        a.translate.x = a.translate.ⵠⲆⵠΔⵠ;
      }
      if (ca === (a.position & ca)) {
        if ((a.position & _) === _) {
          a.translate.y = Tn + a.translate.ⵠⵠΔᐃΔ - b;
        } else if ((a.position & aa) === aa) {
          a.translate.y = Tn + a.translate.ⵠⵠΔᐃΔ + b;
        } else {
          a.translate.y = Tn + a.translate.ⵠⵠΔᐃΔ;
        }
      } else if (_ === (a.position & _)) {
        a.translate.y = a.translate.ⵠⵠΔᐃΔ - b;
      } else if ((a.position & aa) === aa) {
        a.translate.y = qn + a.translate.ⵠⵠΔᐃΔ + b;
      } else {
        a.translate.y = a.translate.ⵠⵠΔᐃΔ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ⵠⵠᐃ = function () {
      var a = 0;
      if (o != 30 || l != -1) {
        if (o != 30) {
          a = 1500 / (o + 1) - 50;
        }
        if (l != -1) {
          a = -(1750 / (30 - l + 1) - 48);
        }
      }
      for (var b = 0; b < this.ⲆⲆⲆΔ.length; b++) {
        this.ⲆⲆΔⲆⲆⲆⵠ(this.ⲆⲆⲆΔ[b], a);
      }
      for (b = 0; b < this.buttons.length; b++) {
        this.ⲆⲆΔⲆⲆⲆⵠ(this.buttons[b].info, a);
      }
      for (b = 0; this.ΔᐃΔᐃᐃ.length > b; b++) {
        this.ⲆⲆΔⲆⲆⲆⵠ(this.ΔᐃΔᐃᐃ[b], a);
      }
      this.ⲆᐃⵠⵠⵠΔᐃ.translate.x = (Ln - this.ⲆᐃⵠⵠⵠΔᐃ.ⵠᐃ.width) / 2;
      this.ⲆᐃⵠⵠⵠΔᐃ.translate.y = 0;
      this.ⵠⵠΔⵠⵠΔⵠ.translate.x = Ln - 450;
      this.ⵠⵠΔⵠⵠΔⵠ.translate.y = qn - 40;
      this.ⲆᐃᐃⵠΔᐃᐃ.translate.x = Ln - 340;
      this.ⲆᐃᐃⵠΔᐃᐃ.translate.y = qn - 25;
      this.ⵠᐃᐃⲆⲆ.translate.x = Ln - 320;
      this.ⵠᐃᐃⲆⲆ.translate.y = 80;
      if (o != 30 || l != -1) {
        var c = 0;
        if (o != 30) {
          c = 1500 / (o + 1) - 50;
        }
        if (l != -1) {
          c = -(1750 / (30 - l + 1) - 48);
        }
        this.ⲆᐃⵠⵠⵠΔᐃ.translate.y -= c > 0 ? c : -c;
        this.ⵠⵠΔⵠⵠΔⵠ.translate.y -= c < 0 ? c : -c;
        this.ⲆᐃᐃⵠΔᐃᐃ.translate.y -= c < 0 ? c : -c;
      }
      this.ⵠⵠΔⵠⵠΔⵠ.ⵠⵠᐃ();
      this.ⲆᐃᐃⵠΔᐃᐃ.ⵠⵠᐃ();
      this.ⵠᐃᐃⲆⲆ.ⵠⵠᐃ();
    };
    this.ⲆⵠΔⲆᐃⲆᐃ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][0];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔᐃⲆΔⵠᐃⵠΔⵠ = function () {
      this.ᐃⵠⲆⵠᐃΔⲆ = document.getElementById("account_nickname_input").value;
      if (this.ᐃⵠⲆⵠᐃΔⲆ !== this.ⵠⲆⲆⲆⲆΔΔ) {
        this.ⵠⲆⲆⲆⲆΔΔ = this.ᐃⵠⲆⵠᐃΔⲆ;
        this.ⲆⵠΔΔⵠΔΔ = Aw(this.ᐃⵠⲆⵠᐃΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ΔΔⲆⲆ = function () {
      $m();
      hx.ᐃⲆᐃΔⵠΔⵠ = ⲆᐃΔ.ⵠⵠᐃᐃⵠΔᐃ(hx.ᐃⲆᐃΔⵠΔⵠ, hx.ΔⲆᐃᐃⵠⵠⲆ, 0.03);
      this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ].translate.x = this.ⲆⲆⲆΔ[0].translate.x + -72 + hx.ᐃⲆᐃΔⵠΔⵠ * 165;
      this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ].translate.ⵠⲆⵠΔⵠ = this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ].translate.x;
      this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ].translate.y = this.ⲆⲆⲆΔ[0].translate.y + 30;
      this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ].translate.ⵠⵠΔᐃΔ = this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ].translate.y;
      for (var c = 2; this.ⲆⲆⲆΔ.length > c; c++) {
        if (this.ⲆⲆⲆΔ[c].active === ha) {
          this.ⲆⲆⲆΔ[c].ΔΔⲆⲆ(j);
        }
      }
      var n;
      if ((n = this.ᐃᐃᐃⵠΔ - Date.now()) > 0) {
        var t = Math.floor(n / 60000);
        var y = Math.floor(t / 60);
        if ((t %= 60) !== this.ⲆⵠᐃⵠⲆⲆⵠ) {
          this.ⲆⵠᐃⵠⲆⲆⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          u.ᐃᐃⲆⵠⵠᐃᐃ = Aw(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ᐃΔⲆᐃⲆⵠⲆ !== y) {
          this.ᐃΔⲆᐃⲆⵠⲆ = y;
          y = y < 10 ? "0" + y : "" + y;
          u.ⵠᐃⵠᐃⲆⵠΔ = Aw(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ⲆⲆⲆΔ[ᐃⲆⵠᐃΔᐃΔ]).ΔΔⲆⲆ(j);
        var K = this.ⵠᐃⵠᐃⲆⵠΔ;
        bp(j, K, V.translate.x - K.width / 4 + 182, V.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ᐃᐃⲆⵠⵠᐃᐃ;
        bp(j, K, V.translate.x - K.width / 4 + 251, V.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if ((n = this.ΔⵠΔΔᐃⲆⵠ - Date.now()) > 0) {
        t = Math.floor(n / 60000);
        y = Math.floor(t / 60);
        var V;
        var W = Math.floor(y / 24);
        t %= 60;
        y %= 24;
        if (this.ⲆⲆᐃⲆⲆⲆⵠ !== t) {
          this.ⲆⲆᐃⲆⲆⲆⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          u.ᐃⵠⲆⲆⲆΔᐃ = Aw(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆᐃΔⵠΔⵠᐃ !== y) {
          this.ⲆᐃΔⵠΔⵠᐃ = y;
          y = y < 10 ? "0" + y : "" + y;
          u.ΔⲆⵠᐃⵠΔᐃ = Aw(y, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ΔⵠᐃᐃⲆᐃⵠ !== W) {
          this.ΔⵠᐃᐃⲆᐃⵠ = W;
          W = W < 10 ? "0" + W : "" + W;
          u.Δⵠⵠᐃᐃⵠⵠ = Aw(W, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (V = this.ⲆⲆⲆΔ[ᐃⵠⵠⵠⲆΔΔ]).ΔΔⲆⲆ(j);
        K = this.Δⵠⵠᐃᐃⵠⵠ;
        bp(j, K, V.translate.x - K.width / 4 + 113, V.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ΔⲆⵠᐃⵠΔᐃ;
        bp(j, K, V.translate.x - K.width / 4 + 182, V.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
        K = this.ᐃⵠⲆⲆⲆΔᐃ;
        bp(j, K, V.translate.x - K.width / 4 + 251, V.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
      }
      if (x === (this.Δⵠⵠᐃᐃ & x)) {
        this.buttons[ⵠⲆⵠΔΔᐃⵠ].info.state = vw;
      } else if ((this.Δⵠⵠᐃᐃ & z) === z) {
        this.buttons[ⲆᐃᐃⵠᐃΔᐃ].info.state = vw;
      } else if (p === (this.Δⵠⵠᐃᐃ & p)) {
        this.buttons[ᐃⵠΔΔⲆⵠᐃ].info.state = vw;
      } else if ((this.Δⵠⵠᐃᐃ & v) === v) {
        this.buttons[ΔⲆΔᐃⵠⲆⵠ].info.state = vw;
      } else if (f === (this.Δⵠⵠᐃᐃ & f)) {
        this.buttons[ⲆⲆᐃⵠΔⲆᐃ].info.state = vw;
      } else if ((this.Δⵠⵠᐃᐃ & m) === m) {
        this.buttons[ⲆᐃΔᐃⵠΔΔ].info.state = vw;
      } else if (L === (this.Δⵠⵠᐃᐃ & L) || M === (this.Δⵠⵠᐃᐃ & M) || (this.Δⵠⵠᐃᐃ & A) === A || (this.Δⵠⵠᐃᐃ & J) === J || (this.Δⵠⵠᐃᐃ & B) === B || E === (this.Δⵠⵠᐃᐃ & E) || (this.Δⵠⵠᐃᐃ & D) === D) {
        this.buttons[ⲆⲆⵠΔⲆⵠⵠ].info.state = vw;
      } else if ((this.Δⵠⵠᐃᐃ & I) === I || (this.Δⵠⵠᐃᐃ & F) === F || Q === (this.Δⵠⵠᐃᐃ & Q) || R === (this.Δⵠⵠᐃᐃ & R) || (this.Δⵠⵠᐃᐃ & G) === G || (this.Δⵠⵠᐃᐃ & S) === S) {
        this.buttons[ᐃⵠΔΔⲆⵠᐃ].info.state = vw;
      } else if (N === (this.Δⵠⵠᐃᐃ & N) || H === (this.Δⵠⵠᐃᐃ & H) || (this.Δⵠⵠᐃᐃ & T) === T) {
        this.buttons[ⵠΔⵠⵠᐃⵠΔ].info.state = vw;
      } else if ((this.Δⵠⵠᐃᐃ & U) === U) {
        this.buttons[ΔⲆΔᐃⵠⲆⵠ].info.state = vw;
      }
      if (z === (this.Δⵠⵠᐃᐃ & z)) {
        if (this.ⲆΔᐃⲆⵠᐃΔ === this.ΔⲆⲆⵠΔΔⵠ) {
          this.ΔΔⵠᐃΔΔᐃ = this.ᐃᐃΔᐃΔⲆΔ;
          this.buttons[this.ᐃᐃΔᐃΔⲆΔ].info.active = fa;
          this.buttons[this.ΔᐃᐃⵠⵠΔⵠ].info.active = fa;
          this.buttons[this.ⵠⲆⲆᐃΔⵠᐃ].info.active = fa;
        } else {
          this.buttons[this.ᐃᐃΔᐃΔⲆΔ].info.active = ha;
          this.buttons[this.ΔᐃᐃⵠⵠΔⵠ].info.active = ha;
          this.buttons[this.ⵠⲆⲆᐃΔⵠᐃ].info.active = ha;
        }
        if (this.ΔᐃΔᐃΔⵠⵠ === this.ΔⲆⲆⵠΔΔⵠ) {
          this.buttons[this.ΔᐃΔᐃΔⵠⵠ].info.state = vw;
        } else if (this.ⵠᐃᐃⲆᐃⲆΔ === this.ΔⲆⲆⵠΔΔⵠ) {
          this.buttons[this.ⵠᐃᐃⲆᐃⲆΔ].info.state = vw;
        } else if (this.ΔⲆⲆⵠΔΔⵠ === this.ⲆΔᐃⲆⵠᐃΔ) {
          this.buttons[this.ⲆΔᐃⲆⵠᐃΔ].info.state = vw;
        } else if (this.ᐃᐃⵠΔΔⲆᐃ === this.ΔⲆⲆⵠΔΔⵠ) {
          this.buttons[this.ᐃᐃⵠΔΔⲆᐃ].info.state = vw;
        } else if (this.ΔⲆⲆⲆΔᐃΔ === this.ΔⲆⲆⵠΔΔⵠ) {
          this.buttons[this.ΔⲆⲆⲆΔᐃΔ].info.state = vw;
        }
        if (this.ΔΔⵠᐃΔΔᐃ === this.ᐃᐃΔᐃΔⲆΔ) {
          this.buttons[this.ᐃᐃΔᐃΔⲆΔ].info.state = vw;
        } else if (this.ΔΔⵠᐃΔΔᐃ === this.ΔᐃᐃⵠⵠΔⵠ) {
          this.buttons[this.ΔᐃᐃⵠⵠΔⵠ].info.state = vw;
        } else if (this.ΔΔⵠᐃΔΔᐃ === this.ⵠⲆⲆᐃΔⵠᐃ) {
          this.buttons[this.ⵠⲆⲆᐃΔⵠᐃ].info.state = vw;
        }
        if (this.ⵠⲆⵠⲆⲆᐃⵠ === this.ⲆⲆⵠΔⲆΔᐃ) {
          this.buttons[this.ⵠⲆⵠⲆⲆᐃⵠ].info.state = vw;
        } else if (this.ⲆⲆⵠΔⲆΔᐃ === this.ᐃΔⵠᐃⲆΔⵠ) {
          this.buttons[this.ᐃΔⵠᐃⲆΔⵠ].info.state = vw;
        } else if (this.ⲆⲆⵠΔⲆΔᐃ === this.ⵠΔΔΔⲆΔΔ) {
          this.buttons[this.ⵠΔΔΔⲆΔΔ].info.state = vw;
        }
        if (this.ᐃᐃⲆᐃΔΔⵠ === this.ΔΔᐃΔⲆⵠⵠ) {
          this.buttons[this.ΔΔᐃΔⲆⵠⵠ].info.state = vw;
        } else if (this.ⲆΔΔⲆⵠΔⵠ === this.ᐃᐃⲆᐃΔΔⵠ) {
          this.buttons[this.ⲆΔΔⲆⵠΔⵠ].info.state = vw;
        } else if (this.ᐃⵠⵠΔΔⲆⲆ === this.ᐃᐃⲆᐃΔΔⵠ) {
          this.buttons[this.ᐃⵠⵠΔΔⲆⲆ].info.state = vw;
        } else if (this.ᐃᐃⲆᐃΔΔⵠ === this.ⵠΔΔᐃⲆΔⲆ) {
          this.buttons[this.ⵠΔΔᐃⲆΔⲆ].info.state = vw;
        } else if (this.ⲆᐃᐃⲆⲆⲆΔ === this.ᐃᐃⲆᐃΔΔⵠ) {
          this.buttons[this.ⲆᐃᐃⲆⲆⲆΔ].info.state = vw;
        } else if (this.ᐃᐃⲆᐃΔΔⵠ === this.ⵠᐃⵠⵠᐃΔⵠ) {
          this.buttons[this.ⵠᐃⵠⵠᐃΔⵠ].info.state = vw;
        }
      }
      if ((this.Δⵠⵠᐃᐃ & v) === v) {
        if (this.ᐃᐃΔΔⵠᐃⵠ === -1) {
          this.buttons[ya].info.state = vw;
        } else if (this.ᐃᐃΔΔⵠᐃⵠ === 0) {
          this.buttons[za].info.state = vw;
        } else if (this.ᐃᐃΔΔⵠᐃⵠ === 2) {
          this.buttons[Ba].info.state = vw;
        } else if (this.ᐃᐃΔΔⵠᐃⵠ === 3) {
          this.buttons[Ca].info.state = vw;
        } else if (this.ᐃᐃΔΔⵠᐃⵠ === 4) {
          this.buttons[Aa].info.state = vw;
        }
        if (this.ΔΔΔΔΔⵠⲆ === 0) {
          this.buttons[sa].info.state = vw;
        } else if (this.ΔΔΔΔΔⵠⲆ === 1) {
          this.buttons[ta].info.state = vw;
        } else if (this.ΔΔΔΔΔⵠⲆ === 2) {
          this.buttons[ua].info.state = vw;
        } else if (this.ΔΔΔΔΔⵠⲆ === 3) {
          this.buttons[va].info.state = vw;
        } else if (this.ΔΔΔΔΔⵠⲆ === 4) {
          this.buttons[wa].info.state = vw;
        } else if (this.ΔΔΔΔΔⵠⲆ === 5) {
          this.buttons[xa].info.state = vw;
        }
      }
      if (x === (this.Δⵠⵠᐃᐃ & x) && Δⵠᐃᐃ.ⵠᐃΔᐃⲆᐃⵠ === 0) {
        if (this.buttons[la].ᐃⲆⵠΔΔⲆΔ(qx.ⲆⵠⲆⵠ)) {
          this.buttons[la].hint = Math.min(1, this.buttons[la].hint + rx * 1.5);
        } else {
          this.buttons[la].hint = Math.max(0, this.buttons[la].hint - rx * 1.5);
        }
        if (this.buttons[ma].ᐃⲆⵠΔΔⲆΔ(qx.ⲆⵠⲆⵠ)) {
          this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + rx * 1.5);
        } else {
          this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - rx * 1.5);
        }
        if (this.buttons[na].ᐃⲆⵠΔΔⲆΔ(qx.ⲆⵠⲆⵠ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + rx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - rx * 1.5);
        }
        if (this.buttons[qa].ᐃⲆⵠΔΔⲆΔ(qx.ⲆⵠⲆⵠ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + rx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - rx * 1.5);
        }
        if (this.buttons[oa].ᐃⲆⵠΔΔⲆΔ(qx.ⲆⵠⲆⵠ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + rx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - rx * 1.5);
        }
        if (this.buttons[pa].ᐃⲆⵠΔΔⲆΔ(qx.ⲆⵠⲆⵠ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + rx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - rx * 1.5);
        }
      }
      var X = 1;
      if ((this.Δⵠⵠᐃᐃ & (M | A | J | B | E | D)) > 1) {
        K = Ⲇᐃ.ⲆΔⲆⲆᐃⲆΔ;
        j.save();
        j.translate(Sn, ka + K.height / 4);
        if (this.Δⵠⵠⵠᐃ === 1) {
          this.ΔΔΔᐃᐃⲆᐃ += rx / 3;
          X = this.ΔΔⲆⲆΔⵠⲆ - 100 / Math.pow(1 + this.ΔΔΔᐃᐃⲆᐃ, 1 + this.ΔΔΔᐃᐃⲆᐃ);
          j.rotate(X);
        }
        bp(j, K, -K.width / 4, -K.height / 4, K.width / 2, K.height / 2);
        j.restore();
      }
      if (Δⵠᐃᐃ.ⵠᐃΔᐃⲆᐃⵠ === 0) {
        if (Δⵠᐃᐃ.ⲆⵠⲆᐃΔ === 0) {
          this.buttons[la].info.state = vw;
        } else if (Δⵠᐃᐃ.ⲆⵠⲆᐃΔ === 4) {
          this.buttons[ma].info.state = vw;
        } else if (Δⵠᐃᐃ.ⲆⵠⲆᐃΔ === 2) {
          this.buttons[oa].info.state = vw;
        } else if (Δⵠᐃᐃ.ⲆⵠⲆᐃΔ === 3) {
          this.buttons[pa].info.state = vw;
        } else if (Δⵠᐃᐃ.ⲆⵠⲆᐃΔ === 6) {
          this.buttons[na].info.state = vw;
        } else if (Δⵠᐃᐃ.ⲆⵠⲆᐃΔ === 7) {
          this.buttons[qa].info.state = vw;
        }
      }
      for (c = 1; c < this.buttons.length; c++) {
        if (this.buttons[c].info.active === ha) {
          this.buttons[c].ΔΔⲆⲆ(j);
        }
      }
      this.ⲆⲆⲆΔ[0].ΔΔⲆⲆ(j);
      if ((this.Δⵠⵠᐃᐃ & (q | O)) > 0) {
        K = this.ⲆⵠΔΔⵠΔΔ;
        bp(j, K, Sn - K.width / 4, 138, K.width / 2, K.height / 2);
      }
      var Y = Math.max(1, Math.min(18, Math.floor((hx.ⵠⵠⵠᐃⲆ + 3) / 2)));
      this.ⲆⲆⲆΔ[Y].active = ha;
      this.ⲆⲆⲆΔ[Y].ΔΔⲆⲆ(j);
      this.ⲆⲆⲆΔ[Y].active = fa;
      this.buttons[0].ΔΔⲆⲆ(j);
      if ((this.Δⵠⵠᐃᐃ & (p | F | R | I | G)) > 1) {
        var g = (this.Δⵠⵠᐃᐃ & (F | R | I | G)) > 1 ? -190 : 0;
        K = ⵠΔ[29][this.ΔⵠⲆⲆΔ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 + g, 183, K.width / 2, K.height / 2);
        this.ᐃⵠⵠⵠ = (this.ᐃⵠⵠⵠ + rx * 1000) % 2000;
        var b = (this.ᐃⵠⵠⵠ < 1000) * 4.5 ? this.ᐃⵠⵠⵠ / 1000 : (2000 - this.ᐃⵠⵠⵠ) / 1000;
        K = ⵠΔ[28][this.Δⵠⵠᐃⵠ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 - 62 + b + g, 240, K.width / 2, K.height / 2);
        K = ⵠΔ[7][this.Δⵠⵠⵠ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 - 54 + b + g, 272, K.width / 2, K.height / 2);
        bp(j, K, Sn - K.width / 4 + 54 - b + g, 272, K.width / 2, K.height / 2);
        K = ⵠΔ[255][this.Δⵠⵠⵠ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 + g, 222, K.width / 2, K.height / 2);
        K = ⵠΔ[796][this.ⵠΔⲆΔⵠ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 + g, 222, K.width / 2, K.height / 2);
      }
      if ((this.Δⵠⵠᐃᐃ & p) === p) {
        K = ⵠΔ[250][this.ᐃᐃΔⲆᐃ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 - 61, 406 - K.height / 4, K.width / 2, K.height / 2);
        K = ⵠΔ[250][this.ⲆᐃᐃⵠΔ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 + 53, 406 - K.height / 4, K.width / 2, K.height / 2);
      }
      if (Q === (this.Δⵠⵠᐃᐃ & Q)) {
        K = ⵠΔ[250][this.ⲆᐃᐃⵠΔ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.Δⵠⵠᐃᐃ & S) === S) {
        K = ⵠΔ[250][this.ᐃᐃΔⲆᐃ][this.ⵠΔΔⵠⲆⵠΔ];
        bp(j, K, Sn - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
      }
      if ((this.Δⵠⵠᐃᐃ & (F | R | I | G | Q | S)) > 1) {
        for (c = 1; c < this.buttons.length; c++) {
          if ((this.buttons[c].view & this.Δⵠⵠᐃᐃ) !== 0) {
            var Z = this.buttons[c].info;
            if (Z.ⲆⵠⲆⲆⵠᐃⵠ >= 0) {
              K = Z.ᐃᐃΔᐃᐃᐃΔⲆⲆ[Z.ⲆⵠⲆⲆⵠᐃⵠ].ΔⵠΔ;
              bp(j, K, Z.translate.x - K.width / 8 + 44.5, Z.translate.y - K.height / 8 + 45.5, K.width / 4, K.height / 4);
              if (Z.ⵠⵠΔΔᐃⵠⵠ !== 1) {
                K = Ⲇᐃ.ΔΔⵠΔᐃΔᐃ;
                bp(j, K, Z.translate.x - K.width / 4 + 44.5, Z.translate.y - K.height / 4 + 44.5, K.width / 2, K.height / 2);
              }
            }
          }
        }
        K = this.ΔΔᐃᐃᐃⵠⵠ;
        bp(j, K, Sn - 312, 375, K.width / 2, K.height / 2);
        K = this.ⵠΔⵠΔᐃⵠⵠ;
        bp(j, K, Sn - 312, 395, K.width / 2, K.height / 2);
      }
      if (this.ΔⵠᐃᐃΔⵠΔ !== this.ⲆⲆΔΔᐃ) {
        this.ΔⵠᐃᐃΔⵠΔ = this.ⲆⲆΔΔᐃ;
        this.ᐃᐃΔⲆᐃⵠⲆ = Aw("" + this.ⲆⲆΔΔᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      bp(j, this.ᐃᐃΔⲆᐃⵠⲆ, this.ⲆⲆⲆΔ[0].translate.x + 350, 15, this.ᐃᐃΔⲆᐃⵠⲆ.w2, this.ᐃᐃΔⲆᐃⵠⲆ.ⵠᐃⵠᐃΔ);
      if (this.ⵠᐃⲆᐃΔᐃⵠ !== this.ⵠⵠⵠᐃⲆ) {
        this.ⵠᐃⲆᐃΔᐃⵠ = this.ⵠⵠⵠᐃⲆ;
        this.ⵠⵠΔⵠΔΔᐃ = Aw("LVL " + (this.ⵠⵠⵠᐃⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, Sh, undefined, Oh, bj, "#3F3019", 20);
      }
      bp(j, this.ⵠⵠΔⵠΔΔᐃ, this.ⲆⲆⲆΔ[0].translate.x + 94, 0, this.ⵠⵠΔⵠΔΔᐃ.w2, this.ⵠⵠΔⵠΔΔᐃ.ⵠᐃⵠᐃΔ);
      if (Δⵠᐃᐃ.ⵠᐃΔᐃⲆᐃⵠ === 0) {
        var _;
        if ((_ = this.buttons[la].hint) > 0) {
          K = Ⲇᐃ.ⲆⵠⵠΔᐃⲆⲆ;
          bp(j, K, Sn - K.width / 4, -36 - ⲆᐃΔ.ⵠᐃⲆᐃⵠ(1 - _) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((_ = this.buttons[ma].hint) > 0) {
          K = Ⲇᐃ.ⵠΔⵠᐃᐃᐃᐃ;
          bp(j, K, Sn - K.width / 4, -36 - ⲆᐃΔ.ⵠᐃⲆᐃⵠ(1 - _) * K.height / 2, K.width / 2, K.height / 2);
        }
        if ((_ = this.buttons[na].hint) > 0) {
          K = Ⲇᐃ.ᐃΔᐃΔⵠΔⲆ;
          bp(j, K, Sn - K.width / 4, -36 - K.height * ⲆᐃΔ.ⵠᐃⲆᐃⵠ(1 - _) / 2, K.width / 2, K.height / 2);
        }
        if ((_ = this.buttons[qa].hint) > 0) {
          K = Ⲇᐃ.ΔⵠΔⲆΔⲆΔ;
          bp(j, K, Sn - K.width / 4, -36 - K.height * ⲆᐃΔ.ⵠᐃⲆᐃⵠ(1 - _) / 2, K.width / 2, K.height / 2);
        }
        if ((_ = this.buttons[pa].hint) > 0) {
          K = Ⲇᐃ.ᐃᐃᐃⵠᐃⲆΔ;
          bp(j, K, Sn - K.width / 4, -36 - K.height * ⲆᐃΔ.ⵠᐃⲆᐃⵠ(1 - _) / 2, K.width / 2, K.height / 2);
        }
        if ((_ = this.buttons[oa].hint) > 0) {
          K = Ⲇᐃ.ᐃᐃⲆΔⵠⲆᐃ;
          bp(j, K, Sn - K.width / 4, -36 - ⲆᐃΔ.ⵠᐃⲆᐃⵠ(1 - _) * K.height / 2, K.width / 2, K.height / 2);
        }
      }
      if (this.Δⵠⵠⵠᐃ === 1 && Math.abs(X - this.ΔΔⲆⲆΔⵠⲆ) < 0.006) {
        j.globalAlpha = Math.min(1, this.ΔⲆⲆΔⵠᐃⲆ * 3);
        K = Ⲇᐃ.ΔᐃⵠⵠΔⵠⵠ;
        j.save();
        j.translate(Sn, 260);
        this.ΔⲆⲆΔⵠᐃⲆ += rx;
        j.rotate(this.ΔⲆⲆΔⵠᐃⲆ);
        bp(j, K, -K.width / 2, -K.height / 2, K.width, K.height);
        j.restore();
        b = 1.05 + Math.cos(this.ΔⲆⲆΔⵠᐃⲆ * 5) * 0.05;
        if (this.ⲆᐃⵠΔⲆᐃΔ === 0) {
          var aa = (K = ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[this.ΔΔⵠΔⵠⲆΔ].ΔⵠΔ).width * b;
          var ba = b * K.height;
          bp(j, K, Sn - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ⲆᐃⵠΔⲆᐃΔ === 1) {
          aa = b * (K = ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[0].ΔⵠΔ).width;
          ba = b * K.height;
          bp(j, K, Sn - aa / 2, 260 - ba / 2, aa, ba);
          aa = b * (K = ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ[this.ΔΔⵠΔⵠⲆΔ].ΔⵠΔ).width;
          ba = b * K.height;
          bp(j, K, Sn - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ⲆᐃⵠΔⲆᐃΔ === 2) {
          aa = b * (K = ⵠᐃᐃⵠ.ⵠⵠⲆᐃ[this.ΔΔⵠΔⵠⲆΔ].ΔⵠΔ).width;
          ba = K.height * b;
          bp(j, K, Sn - aa / 2, 180 - ba / 2, aa, ba);
          aa = b * (K = ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[0].ΔⵠΔ).width;
          ba = b * K.height;
          bp(j, K, Sn - aa / 2, 260 - ba / 2, aa, ba);
        } else if (this.ⲆᐃⵠΔⲆᐃΔ === 3) {
          aa = b * (K = ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ[this.ΔΔⵠΔⵠⲆΔ].ΔⵠΔ).width;
          ba = b * K.height;
          j.save();
          j.translate(Sn, 260);
          j.rotate(Math.PI);
          bp(j, K, -aa / 2, -ba / 2, aa, ba);
          j.restore();
        } else if (this.ⲆᐃⵠΔⲆᐃΔ === 4) {
          aa = b * (K = ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ[this.ΔΔⵠΔⵠⲆΔ].ΔⵠΔ).width;
          ba = K.height * b;
          bp(j, K, Sn - aa / 2, 260 - ba / 2, aa, ba);
        }
        K = this.ᐃΔΔᐃⵠᐃᐃ;
        bp(j, K, Sn - K.width / 4, 340, K.width / 2, K.height / 2);
        K = this.ᐃᐃⲆᐃᐃⵠΔ;
        bp(j, K, Sn - K.width / 4, 365, K.width / 2, K.height / 2);
        if (this.ΔⲆⲆΔⵠᐃⲆ > 6) {
          this.Δⵠⵠⵠᐃ = 0;
          P(L);
        }
        j.globalAlpha = 1;
      }
      lx.alert.ΔΔⲆⲆ("#FFF", "#000");
      if (u.waiting) {
        this.ⲆᐃⵠⵠⵠΔᐃ.ΔΔⲆⲆ();
      }
    };
    var b = 0;
    var x = Math.pow(2, b++);
    var v = Math.pow(2, b++);
    this.ᐃⲆΔⲆΔ = v;
    var m = Math.pow(2, b++);
    var p = Math.pow(2, b++);
    var L = Math.pow(2, b++);
    var f = Math.pow(2, b++);
    var z = Math.pow(2, b++);
    var y = Math.pow(2, b++);
    this.ⲆᐃΔⵠⲆ = y;
    var w = Math.pow(2, b++);
    var C = Math.pow(2, b++);
    var M = Math.pow(2, b++);
    var A = Math.pow(2, b++);
    var J = Math.pow(2, b++);
    var B = Math.pow(2, b++);
    var E = Math.pow(2, b++);
    var D = Math.pow(2, b++);
    var I = Math.pow(2, b++);
    var Q = Math.pow(2, b++);
    var F = Math.pow(2, b++);
    var R = Math.pow(2, b++);
    var G = Math.pow(2, b++);
    var S = Math.pow(2, b++);
    var O = Math.pow(2, b++);
    var q = Math.pow(2, b++);
    var N = Math.pow(2, b++);
    this.ΔΔⵠⵠᐃ = N;
    var H = Math.pow(2, b++);
    this.ᐃⵠⵠᐃⵠ = H;
    var T = Math.pow(2, b++);
    this.ᐃᐃᐃⵠⲆ = T;
    var U = Math.pow(2, b++);
    function k(a, b, c) {
      for (var d = 0; u.ⲆⲆⲆΔ.length > d; d++) {
        if ((u.ⲆⲆⲆΔ[d].view & a) !== 0) {
          u.ⲆⲆⲆΔ[d].active = b;
        }
      }
      for (d = 0; u.buttons.length > d; d++) {
        if (u.buttons[d].view & a) {
          u.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < u.ΔᐃΔᐃᐃ.length; d++) {
        if ((u.ΔᐃΔᐃᐃ[d].view & a) !== 0) {
          u.ΔᐃΔᐃᐃ[d].style.display = c;
        }
      }
    }
    this.Δⵠⵠᐃᐃ = x;
    function K() {
      var b = Number(ⵠⵠᐃΔ.get("starve_crate"));
      var c = Number(ⵠⵠᐃΔ.get("starve_dead"));
      var d = Number(ⵠⵠᐃΔ.get("starve_book"));
      var e = Number(ⵠⵠᐃΔ.get("starve_bag"));
      var f = Number(ⵠⵠᐃΔ.get("starve_skin"));
      var g = Number(ⵠⵠᐃΔ.get("starve_accessory"));
      if (hx.unlock.Δⵠⵠⵠ[hx.Δⵠⵠⵠ] <= 0) {
        hx.Δⵠⵠⵠ = hx.unlock.Δⵠⵠⵠ[f] > 0 ? f : 0;
      }
      if (hx.unlock.Δⵠⵠᐃⵠ[hx.Δⵠⵠᐃⵠ] <= 0) {
        hx.Δⵠⵠᐃⵠ = hx.unlock.Δⵠⵠᐃⵠ[d] > 0 ? d : 0;
      }
      if (hx.unlock.ⲆᐃᐃⵠΔ[hx.ⲆᐃᐃⵠΔ] <= 0) {
        hx.ⲆᐃᐃⵠΔ = hx.unlock.ⲆᐃᐃⵠΔ[c] > 0 ? c : 0;
      }
      if (hx.unlock.ᐃᐃΔⲆᐃ[hx.ᐃᐃΔⲆᐃ] <= 0) {
        hx.ᐃᐃΔⲆᐃ = hx.unlock.ᐃᐃΔⲆᐃ[b] > 0 ? b : 0;
      }
      if (hx.unlock.ⵠΔⲆΔⵠ[hx.ⵠΔⲆΔⵠ] <= 0) {
        hx.ⵠΔⲆΔⵠ = hx.unlock.ⵠΔⲆΔⵠ[g] > 0 ? g : 0;
      }
      if (hx.unlock.ΔⵠⲆⲆΔ[hx.ΔⵠⲆⲆΔ] <= 0) {
        hx.ΔⵠⲆⲆΔ = hx.unlock.ΔⵠⲆⲆΔ[e] > 0 ? e : 0;
      }
    }
    function P(a) {
      if (u.ⵠΔⵠⵠⲆⵠⲆ !== false) {
        k(w, fa, "none");
        k(C, fa, "none");
        K();
        if (u.Δⵠⵠᐃᐃ !== a && u.Δⵠⵠⵠᐃ < 1) {
          u.ⵠᐃᐃⲆⲆ.style.display = x === a || a === L || v === a || z === a || p === a || f === a ? "inline-block" : "none";
          k(u.Δⵠⵠᐃᐃ, fa, "none");
          u.Δⵠⵠᐃᐃ = a;
          k(u.Δⵠⵠᐃᐃ, ha, "inline-block");
        }
      }
    }
    function V(a) {
      if (lx.ΔⵠΔⲆᐃᐃⲆ !== undefined && lx.ⲆⲆⲆⵠᐃᐃᐃ !== undefined && lx.ΔⲆⵠᐃΔⲆⲆ !== undefined) {
        a();
      }
    }
    function W() {
      K();
      if (vx % 2) {
        console.log(Oh);
        Δⵠᐃᐃ.connect();
      } else {
        console.log(undefined);
        if (Ya.Widget.isBlocked === 1) {
          Ya.Widget.createAdPlayer(Δⵠᐃᐃ.connect.bind(Δⵠᐃᐃ), Δⵠᐃᐃ.connect.bind(Δⵠᐃᐃ));
        } else {
          Ya.Widget.preroll();
          Ya.Widget.play = Δⵠᐃᐃ.connect.bind(Δⵠᐃᐃ);
        }
      }
    }
    function X(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== Lg) {
          c();
        }
      };
      d.send();
    }
    this.ᐃⲆᐃⵠⵠⵠⵠ = 0;
    this.ⲆⲆᐃⲆ = P;
    this.ⲆΔⲆΔⲆⵠΔ = function (b, a) {
      let c = "0";
      let d = 0;
      if (Fx) {
        c = Fx + Wq.ⲆᐃΔⵠΔⲆᐃ();
      }
      if (lx.ΔⵠΔⲆᐃᐃⲆ) {
        V(b);
      } else {
        X(`${yx}token?id=${c}`, function (c) {
          if (d === 1) {
            return;
          }
          const e = c.split("_");
          const f = e[0] + "_";
          const g = Number(e[1]);
          const a = Math.abs(function (a) {
            return Kk(a, 8260, 46947, 8004, 37330, 5330);
          }(g));
          lx.ΔⵠΔⲆᐃᐃⲆ = f + a;
          V(b);
        }, function () {
          if (d !== 1) {
            if (a === 1) {
              d = 1;
              b();
              return;
            } else {
              u.waiting = false;
              return;
            }
          }
        });
      }
      X(`${zx}get`, function (c) {
        if (d === 1) {
          return;
        }
        const e = c.split("_");
        const f = e[0] + "_";
        const g = Number(e[1]);
        const a = Math.abs(function (a) {
          return zw(a, 37918, 15559, 64454);
        }(g));
        lx.ⲆⲆⲆⵠᐃᐃᐃ = f + a;
        lx.ΔⲆᐃⵠⲆⲆᐃ = a;
        V(b);
      }, function () {
        if (d !== 1) {
          if (a === 1) {
            d = 1;
            b();
            return;
          } else {
            u.waiting = vg;
            return;
          }
        }
      });
      X(`${zx}set`, function (c) {
        if (d === 1) {
          return;
        }
        const e = c.split("_");
        const f = e[0] + "_";
        const g = Number(e[1]);
        const a = Math.abs(function (a) {
          return Cw(a, 60033);
        }(g));
        lx.ΔⲆⵠᐃΔⲆⲆ = f + a;
        lx.ᐃᐃΔᐃᐃΔⵠⵠΔ = a;
        V(b);
      }, function () {
        if (d !== 1) {
          if (a === 1) {
            d = 1;
            b();
            return;
          } else {
            u.waiting = false;
            return;
          }
        }
      });
    };
    this.ⲆᐃⲆⲆΔⲆΔ = function () {
      if (Xa === u.waiting) {
        lx.reconnect.enabled = false;
        u.waiting = true;
        u.ⲆΔⲆΔⲆⵠΔ(W);
      }
    };
    var Y = 1;
    var Z = 2;
    var _ = 4;
    var aa = 8;
    var ba = 16;
    var ca = 32;
    var da = 0;
    var ea = 1;
    var fa = 0;
    var ha = 1;
    if (Ya.innerWidth < 1300) {
      this.ⵠⲆⲆΔΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ha,
        position: _ | Y,
        view: x,
        translate: {
          x: 0,
          ⵠⲆⵠΔⵠ: 200,
          y: 0,
          ⵠⵠΔᐃΔ: 184
        }
      };
    } else {
      this.ⵠⲆⲆΔΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ha,
        position: _ | ba,
        view: x,
        translate: {
          y: 0,
          ⵠⵠΔᐃΔ: 184,
          ⵠⲆⵠΔⵠ: -180,
          x: 0
        }
      };
    }
    this.ⵠⲆⲆΔΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !u.waiting && !u.ⵠᐃⲆΔᐃⲆΔΔΔ) {
        u.ⲆᐃⲆⲆΔⲆΔ();
      }
    });
    this.ⵠⲆⲆΔΔ.input.value = ⵠⵠᐃΔ.get("starve_nickname") ? ⵠⵠᐃΔ.get("starve_nickname") : "";
    this.ⵠᐃᐃⵠᐃΔⵠⵠⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: fa,
      position: _ | ba,
      view: v,
      translate: {
        ⵠⵠΔᐃΔ: 110,
        ⵠⲆⵠΔⵠ: -122,
        x: 0,
        y: 0
      }
    };
    if (Ya.innerWidth < 1300) {
      this.ᐃᐃᐃᐃⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ha,
        position: _ | Y,
        view: x,
        translate: {
          ⵠⵠΔᐃΔ: 225,
          y: 0,
          x: 0,
          ⵠⲆⵠΔⵠ: 208
        }
      };
    } else {
      this.ᐃᐃᐃᐃⲆ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ha,
        position: _ | ba,
        view: x,
        translate: {
          ⵠⵠΔᐃΔ: 225,
          y: 0,
          ⵠⲆⵠΔⵠ: -180,
          x: 0
        }
      };
    }
    this.ΔⵠⲆⵠ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: fa,
      position: _ | ba,
      view: z,
      translate: {
        x: 0,
        y: 0,
        ⵠⵠΔᐃΔ: 190,
        ⵠⲆⵠΔⵠ: -294.5
      }
    };
    this.ΔⲆΔᐃᐃᐃᐃⵠⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: fa,
      position: _ | ba,
      view: v,
      translate: {
        x: 0,
        ⵠⲆⵠΔⵠ: 125,
        ⵠⵠΔᐃΔ: 187,
        y: 0
      }
    };
    this.ⵠᐃⲆⵠΔΔⲆᐃⵠ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: fa,
      position: _ | ba,
      view: T,
      translate: {
        ⵠⲆⵠΔⵠ: -220,
        y: 0,
        x: 0,
        ⵠⵠΔᐃΔ: 350
      }
    };
    b = 0;
    this.ΔᐃΔᐃᐃ = [];
    this.ΔᐃΔᐃᐃ[b++] = this.ⵠⲆⲆΔΔ;
    this.ΔᐃΔᐃᐃ[b++] = this.ᐃᐃᐃᐃⲆ;
    this.ΔᐃΔᐃᐃ[b++] = this.ΔⵠⲆⵠ;
    this.ΔᐃΔᐃᐃ[b++] = this.ⵠᐃᐃⵠᐃΔⵠⵠⲆ;
    this.ΔᐃΔᐃᐃ[b++] = this.ΔⲆΔᐃᐃᐃᐃⵠⵠ;
    this.ΔᐃΔᐃᐃ[b++] = this.ⵠᐃⲆⵠΔΔⲆᐃⵠ;
    b = 0;
    this.ⲆⲆⲆΔ = [];
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ᐃᐃΔᐃⲆᐃⲆ, ha, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ᐃᐃⵠⵠⲆⵠᐃ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ΔⵠⵠΔΔⲆⵠ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ᐃΔⵠΔᐃΔᐃ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ΔⵠΔΔᐃⵠⵠ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠᐃⵠᐃΔΔΔ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠⲆᐃⲆⵠⵠΔ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⲆⲆΔΔⲆΔⵠ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⲆⵠΔᐃΔⲆΔ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠⲆⵠⲆΔΔᐃ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ΔⲆΔⲆᐃΔᐃ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠᐃⵠⵠΔΔⲆ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⲆΔΔⲆΔᐃⵠ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⲆᐃⲆⵠᐃⲆᐃ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ᐃⲆⲆᐃΔⲆⲆ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠⵠⵠΔⵠⵠⲆ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠᐃΔⲆΔⲆΔ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ᐃⲆⵠΔⲆⲆᐃ, fa, 0, 0, Y);
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ⵠΔΔⲆΔⲆⲆ, fa, 0, 0, Y);
    if (Ya.innerWidth < 1300) {
      this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃᐃⲆⵠΔᐃⲆ, ha, 200, 100, _ | Y);
    } else {
      this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃᐃⲆⵠΔᐃⲆ, ha, -753 / 4, 100, _ | ba);
    }
    this.ⲆⲆⲆΔ[b++].view = x;
    this.ⲆⲆⲆΔ[b++] = xw(Ⲇᐃ.ᐃΔⲆⲆⵠⵠᐃ, ha, 403, -10, Z);
    if (Ya.innerWidth > 1300) {
      this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠⲆⵠᐃⲆⲆΔ, ha, -885 / 4, -319 / 2, aa | ba);
      this.ⲆⲆⲆΔ[b++].view = x;
    }
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠⵠΔΔⲆⵠΔ, fa, -1293 / 4, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = v;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠᐃⲆⲆⵠⲆᐃ, fa, -356.25, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = p;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠⵠⵠΔⲆᐃᐃ, fa, -905 / 4, 50, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = m;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠΔⲆᐃⵠΔΔ, fa, -402, 130, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = L;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃⲆⲆⵠΔⵠⲆ, fa, -1117 / 4, 130, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = N;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ΔᐃᐃΔΔᐃⲆ, fa, -305.5, 130, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = H;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃᐃΔⲆᐃⵠⵠ, fa, -305.5, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = T;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆᐃⲆⲆⲆᐃⵠ, fa, -Ⲇᐃ.ⲆᐃⲆⲆⲆᐃⵠ.width / 4 - 350, -15, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = U;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆΔⵠⵠᐃⲆⵠ, fa, -1497 / 4, 110, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = f;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠΔᐃΔⲆΔⲆ, fa, -1226 / 4, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = z;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠⲆᐃᐃᐃⵠⲆ, fa, -1381 / 4, 80, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = y;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ΔΔⲆΔᐃᐃⲆ, fa, -385.5, 150, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = M;
    var ia = 360 / 100;
    var ja = this.ⲆⵠΔⲆᐃⲆᐃ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
    this.ⲆⲆⲆΔ[b] = xw(ja, fa, -ja.width / 4, 178, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = M;
    this.ⵠⵠΔΔⲆⵠⲆⲆⲆ = function (b, c, d) {
      var e;
      u.Δⵠⵠⵠᐃ = 1;
      u.ΔΔΔᐃᐃⲆᐃ = 0;
      u.ΔⲆⲆΔⵠᐃⲆ = 0;
      u.ΔΔⲆⲆΔⵠⲆ = b;
      u.ⲆᐃⵠΔⲆᐃΔ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; f < ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ.length && ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[f].id !== d; f++);
        e = ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ[f];
        u.unlock.Δⵠⵠⵠ[f] = 1;
      } else if (c === 1) {
        for (f = 0; ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ.length > f && d !== ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ[f].id; f++);
        e = ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ[f];
        u.unlock.ⵠΔⲆΔⵠ[f] = 1;
      } else if (c === 2) {
        for (f = 0; f < ⵠᐃᐃⵠ.ⵠⵠⲆᐃ.length && ⵠᐃᐃⵠ.ⵠⵠⲆᐃ[f].id !== d; f++);
        e = ⵠᐃᐃⵠ.ⵠⵠⲆᐃ[f];
        u.unlock.ΔⵠⲆⲆΔ[f] = 1;
      } else if (c === 3) {
        for (f = 0; ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ.length > f && ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ[f].id !== d; f++);
        e = ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ[f];
        u.unlock.Δⵠⵠᐃⵠ[f] = 1;
      } else if (c === 4) {
        for (f = 0; ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ.length > f && ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ[f].id !== d; f++);
        e = ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ[f];
        u.unlock.ᐃᐃΔⲆᐃ[f] = 1;
        u.unlock.ⲆᐃᐃⵠΔ[f] = 1;
      }
      u.ΔΔⵠΔⵠⲆΔ = f;
      u.ᐃᐃⲆᐃᐃⵠΔ = Aw("by " + e.ⲆⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, eb, Pn, eb, undefined, "#000000", 24);
      u.ᐃΔΔᐃⵠᐃᐃ = Aw(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, Cn, 30, 24, undefined, undefined, Ur, undefined, "#000000", 20);
    };
    this.Δⵠⵠⵠᐃ = 0;
    this.ΔΔΔᐃᐃⲆᐃ = 0;
    this.ΔΔⲆⲆΔⵠⲆ = 0;
    this.ⲆᐃⵠΔⲆᐃΔ = 0;
    this.ΔⲆⲆΔⵠᐃⲆ = 0;
    this.ᐃᐃⲆᐃᐃⵠΔ = undefined;
    this.ᐃΔΔᐃⵠᐃᐃ = nl;
    var ka = 197;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆⵠΔⲆⵠⲆⵠ, fa, -385.5, 150, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = E;
    ja = this.ⲆⵠΔⲆᐃⲆᐃ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
    this.ⲆⲆⲆΔ[b] = xw(ja, fa, -ja.width / 4, 178, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = E;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃⲆⵠⵠΔⲆⵠ, fa, -385.5, 150, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = J;
    ja = this.ⲆⵠΔⲆᐃⲆᐃ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
    this.ⲆⲆⲆΔ[b] = xw(ja, fa, -ja.width / 4, 178, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = J;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⵠⲆΔⵠⲆᐃⵠ, fa, -385.5, 150, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = B;
    ja = this.ⲆⵠΔⲆᐃⲆᐃ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", ia * 30], ["#d88e23", ia * 57]]);
    this.ⲆⲆⲆΔ[b] = xw(ja, fa, -ja.width / 4, 178, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = B;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃⵠⵠΔᐃᐃᐃ, fa, -1542 / 4, 150, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = A;
    ja = this.ⲆⵠΔⲆᐃⲆᐃ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", ia * 30], ["#afac98", ia * 57]]);
    this.ⲆⲆⲆΔ[b] = xw(ja, fa, -ja.width / 4, 178, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = A;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃⲆⲆⵠᐃⲆΔ, fa, -1542 / 4, 150, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = D;
    ja = this.ⲆⵠΔⲆᐃⲆᐃ([["#d33a2a", ia * 3], ["#d45ce5", ia * 10], ["#25c5d6", ia * 30], ["#e2cf27", ia * 57]]);
    this.ⲆⲆⲆΔ[b] = xw(ja, fa, -ja.width / 4, 178, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = D;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆΔⲆⲆⲆᐃⲆ, fa, -341.5, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = I;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ΔΔᐃⲆⵠⲆⵠ, fa, -1366 / 4, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = G;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆᐃΔⵠᐃᐃⲆ, fa, -341.5, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = F;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆΔⵠᐃⵠΔᐃ, fa, -341.5, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = R;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆⵠⵠⲆΔΔⵠ, fa, -1366 / 4, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = Q;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆⵠⲆᐃᐃⲆⲆ, fa, -341.5, 100, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = S;
    ᐃⲆⵠᐃΔᐃΔ = b++;
    this.ⲆⲆⲆΔ[ᐃⲆⵠᐃΔᐃΔ] = xw(Ⲇᐃ.ᐃⲆⵠᐃΔᐃΔ, fa, 484, 0, _);
    ᐃⵠⵠⵠⲆΔΔ = b++;
    this.ⲆⲆⲆΔ[ᐃⵠⵠⵠⲆΔΔ] = xw(Ⲇᐃ.ᐃⵠⵠⵠⲆΔΔ, fa, 812.5, 0, _);
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆᐃΔⵠᐃⵠⲆ, fa, -758 / 4, -5, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = C;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ᐃⲆⲆΔΔᐃⲆ, fa, -758 / 4, -5, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = w;
    ΔΔΔⵠΔΔⲆ = b++;
    this.ⲆⲆⲆΔ[ΔΔΔⵠΔΔⲆ] = xw(Ⲇᐃ.ⵠⲆⵠᐃⲆΔⵠ, ha, 93, 30, _);
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ⲆⵠᐃⲆΔᐃⵠ, fa, -173, 110, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = O;
    this.ⲆⲆⲆΔ[b] = xw(Ⲇᐃ.ΔⲆΔᐃⵠⲆⲆ, fa, -173, 110, _ | ba);
    this.ⲆⲆⲆΔ[b++].view = q;
    b = 0;
    this.buttons = [];
    this.buttons[b] = tf(50, 57, 0, [Ⲇᐃ.ⵠⲆΔⲆᐃᐃⲆ, Ⲇᐃ.ᐃΔᐃΔⵠᐃⵠ, Ⲇᐃ.ⲆⵠⲆΔᐃᐃⲆ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        P(y);
      } else {
        P(m);
      }
    }, 320, 0, Y, ha);
    b++;
    if (Ya.innerWidth < 1300) {
      this.buttons[b] = tf(202, 97, 0, [Ⲇᐃ.ᐃᐃⲆᐃᐃⵠⵠ, Ⲇᐃ.ᐃⲆⵠΔᐃⲆⵠ, Ⲇᐃ.ΔⵠⲆᐃⵠΔⲆ], 1, da, this.ⲆᐃⲆⲆΔⲆΔ, 462, 235, _ | Y, ha);
    } else {
      this.buttons[b] = tf(202, 97, 0, [Ⲇᐃ.ᐃᐃⲆᐃᐃⵠⵠ, Ⲇᐃ.ᐃⲆⵠΔᐃⲆⵠ, Ⲇᐃ.ΔⵠⲆᐃⵠΔⲆ], 1, da, this.ⲆᐃⲆⲆΔⲆΔ, 74, 235, _ | ba, ha);
    }
    this.buttons[b].view = x;
    b++;
    if (Ya.innerWidth > 1300) {
      this.buttons[b] = tf(355, 168, 0, [Ⲇᐃ.ᐃᐃᐃⵠⵠᐃᐃ, Ⲇᐃ.ᐃᐃᐃⵠⵠᐃᐃ, Ⲇᐃ.ᐃᐃᐃⵠⵠᐃᐃ], 1, da, function () {
        Ya.open("./changelog.html", "_blank");
      }, -195, -115, aa | ba, ha);
      this.buttons[b++].view = x;
      this.buttons[b] = tf(355, 168, 0, [Ⲇᐃ.ⲆᐃΔⲆᐃΔⲆ, Ⲇᐃ.ⲆᐃΔⲆᐃΔⲆ, Ⲇᐃ.ⲆᐃΔⲆᐃΔⲆ], 1, da, function () {
        Ya.open("https://taming.io", "_blank");
      }, 20, -115, aa | ba, ha);
      this.buttons[b++].view = x;
    }
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ⵠΔΔⲆⵠΔΔ, Ⲇᐃ.ⲆⵠⲆⵠᐃⲆᐃ, Ⲇᐃ.ⵠᐃⲆΔⵠⵠⵠ], 1, da, function () {
      Ya.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, Z, ha);
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ᐃᐃⲆⲆᐃΔᐃ, Ⲇᐃ.ᐃᐃⵠᐃⵠⲆⲆ, Ⲇᐃ.ᐃⲆⲆⲆᐃⲆⲆ], 1, da, function () {
      Ya.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, Z, ha);
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ᐃᐃⵠᐃⵠⲆΔ, Ⲇᐃ.ΔΔⵠⵠᐃⲆⵠ, Ⲇᐃ.ΔⵠⵠⲆΔⵠΔ], 1, da, function () {
      Ya.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, Z, ha);
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ΔᐃΔⵠⲆᐃⵠ, Ⲇᐃ.ᐃΔⲆⲆⲆΔΔ, Ⲇᐃ.ᐃⵠΔᐃΔΔⵠ], 1, da, function () {
      Ya.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, Z, ha);
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ᐃⵠΔᐃᐃΔⵠ, Ⲇᐃ.ⵠΔⵠΔΔΔΔ, Ⲇᐃ.ⵠΔᐃΔΔᐃΔ], 1, da, function () {
      Ya.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, Z, ha);
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ᐃⲆᐃⲆⲆΔΔ, Ⲇᐃ.ⵠⲆᐃΔⵠᐃᐃ, Ⲇᐃ.ᐃⲆⲆⲆⵠⲆΔ], 1, da, function () {
      Ya.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, Z, ha);
    this.buttons[b++] = tf(80, 80, 0, [Ⲇᐃ.ΔⵠⵠΔⲆⲆⵠ, Ⲇᐃ.ⲆΔᐃᐃΔΔⲆ, Ⲇᐃ.ΔΔᐃΔⵠᐃⵠ], 1, da, function () {
      Ya.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, Z, ha);
    ⲆᐃᐃⵠᐃΔᐃ = b++;
    this.buttons[ⲆᐃᐃⵠᐃΔᐃ] = tf(232, 142, 0, [Ⲇᐃ.ΔⵠΔΔᐃᐃⵠ, Ⲇᐃ.ᐃⲆΔⲆⲆⵠᐃ, Ⲇᐃ.ⲆⵠⵠΔᐃⵠΔ], 1, da, function () {
      P(z);
      Qx(hx.ᐃᐃΔᐃΔⲆΔ, hx.ⲆΔᐃⲆⵠᐃΔ, hx.ᐃΔⵠᐃⲆΔⵠ, hx.ⵠᐃⵠⵠᐃΔⵠ);
    }, -5, 573, Y, ha);
    this.buttons[b++] = tf(236, 165, 0, [Ⲇᐃ.ΔΔᐃⵠΔΔⵠ, Ⲇᐃ.ΔΔᐃⵠΔΔⵠ, Ⲇᐃ.ΔΔᐃⵠΔΔⵠ], 1, ea, function () {
      P(z);
    }, -5, 566, Y, ha);
    ⲆⲆᐃⵠΔⲆᐃ = b++;
    this.buttons[ⲆⲆᐃⵠΔⲆᐃ] = tf(236, 165, 0, [Ⲇᐃ.ⵠⲆᐃⲆⲆⲆⲆ, Ⲇᐃ.ⲆΔⲆΔⵠⲆⵠ, Ⲇᐃ.ΔⵠΔⲆᐃⵠⵠ], 1, da, function () {
      P(f);
    }, -5, 494, Y, ha);
    this.buttons[b++] = tf(236, 165, 0, [Ⲇᐃ.ᐃᐃᐃᐃⲆΔⲆ, Ⲇᐃ.ᐃᐃᐃᐃⲆΔⲆ, Ⲇᐃ.ᐃᐃᐃᐃⲆΔⲆ], 1, ea, function () {
      P(f);
    }, -5, 494, Y, ha);
    ⵠΔⵠⵠᐃⵠΔ = b++;
    this.buttons[ⵠΔⵠⵠᐃⵠΔ] = tf(236, 165, 0, [Ⲇᐃ.ⵠⲆᐃⲆⲆⲆⲆ, Ⲇᐃ.ⲆΔⲆΔⵠⲆⵠ, Ⲇᐃ.ΔⵠΔⲆᐃⵠⵠ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        if (hx.ΔⵠΔΔᐃⲆⵠ - Date.now() > 0) {
          P(T);
        } else {
          P(N);
        }
      } else {
        P(m);
      }
    }, -5, 415, Y, ha);
    this.buttons[b++] = tf(236, 165, 0, [Ⲇᐃ.ⲆⲆⵠⲆⵠᐃⵠ, Ⲇᐃ.ⲆⲆⵠⲆⵠᐃⵠ, Ⲇᐃ.ⲆⲆⵠⲆⵠᐃⵠ], 1, ea, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        if (hx.ΔⵠΔΔᐃⲆⵠ - Date.now() > 0) {
          P(T);
        } else {
          P(N);
        }
      } else {
        P(m);
      }
    }, -5, 415, Y, ha);
    ⲆⲆⵠΔⲆⵠⵠ = b++;
    this.buttons[ⲆⲆⵠΔⲆⵠⵠ] = tf(236, 165, 0, [Ⲇᐃ.ⵠⲆᐃⲆⲆⲆⲆ, Ⲇᐃ.ⲆΔⲆΔⵠⲆⵠ, Ⲇᐃ.ΔⵠΔⲆᐃⵠⵠ], 1, da, function () {
      P(L);
    }, -5, 336, Y, ha);
    this.buttons[b++] = tf(236, 165, 0, [Ⲇᐃ.ⲆⵠⲆᐃⲆⵠⵠ, Ⲇᐃ.ⲆⵠⲆᐃⲆⵠⵠ, Ⲇᐃ.ⲆⵠⲆᐃⲆⵠⵠ], 1, ea, function () {
      P(L);
    }, -5, 336, Y, ha);
    ᐃⵠΔΔⲆⵠᐃ = b++;
    this.buttons[ᐃⵠΔΔⲆⵠᐃ] = tf(236, 165, 0, [Ⲇᐃ.ⵠⲆᐃⲆⲆⲆⲆ, Ⲇᐃ.ⲆΔⲆΔⵠⲆⵠ, Ⲇᐃ.ΔⵠΔⲆᐃⵠⵠ], 1, da, function () {
      P(p);
    }, -5, 257, Y, ha);
    this.buttons[b++] = tf(236, 165, 0, [Ⲇᐃ.ⵠᐃⵠΔⵠⲆⲆ, Ⲇᐃ.ⵠᐃⵠΔⵠⲆⲆ, Ⲇᐃ.ⵠᐃⵠΔⵠⲆⲆ], 1, ea, function () {
      P(p);
    }, -5, 257, Y, ha);
    ⵠⲆⵠΔΔᐃⵠ = b++;
    this.buttons[ⵠⲆⵠΔΔᐃⵠ] = tf(236, 165, 0, [Ⲇᐃ.ⵠⲆᐃⲆⲆⲆⲆ, Ⲇᐃ.ⲆΔⲆΔⵠⲆⵠ, Ⲇᐃ.ΔⵠΔⲆᐃⵠⵠ], 1, da, function () {
      P(x);
    }, -5, 178, Y, ha);
    this.buttons[b++] = tf(236, 165, 0, [Ⲇᐃ.ⵠΔΔⲆΔⲆᐃ, Ⲇᐃ.ⵠΔΔⲆΔⲆᐃ, Ⲇᐃ.ⵠΔΔⲆΔⲆᐃ], 1, ea, function () {
      P(x);
    }, -5, 178, Y, ha);
    ⲆᐃΔᐃⵠΔΔ = b++;
    this.ⲆᐃΔᐃⵠΔΔ = ⲆᐃΔᐃⵠΔΔ;
    this.buttons[ⲆᐃΔᐃⵠΔΔ] = tf(324, 222, 0, [Ⲇᐃ.ᐃΔⲆⵠⲆⵠΔ, Ⲇᐃ.ᐃⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠΔᐃΔⵠⵠ], 1, da, function () {
      P(m);
    }, 0, 70, Y, ha);
    ΔⲆΔᐃⵠⲆⵠ = b++;
    ⵠⵠΔⲆΔᐃⵠ = b++;
    this.ΔⲆΔᐃⵠⲆⵠ = ΔⲆΔᐃⵠⲆⵠ;
    this.ⵠⵠΔⲆΔᐃⵠ = ⵠⵠΔⲆΔᐃⵠ;
    this.buttons[ΔⲆΔᐃⵠⲆⵠ] = tf(324, 222, 0, [Ⲇᐃ.ⲆᐃᐃᐃⲆⵠⵠ, Ⲇᐃ.ᐃᐃΔΔⲆᐃⲆ, Ⲇᐃ.ᐃⲆⵠᐃᐃᐃΔ], 1, da, function () {
      P(v);
      ra(-1);
    }, 0, 70, Y, fa);
    this.buttons[ⵠⵠΔⲆΔᐃⵠ] = tf(324, 222, 0, [Ⲇᐃ.ΔΔᐃᐃⵠᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠᐃⲆ, Ⲇᐃ.ΔΔᐃᐃⵠᐃⲆ], 1, ea, function () {
      P(v);
      ra(-1);
    }, 0, 70, Y, fa);
    if (Δⵠᐃᐃ.ⵠᐃΔᐃⲆᐃⵠ === 0) {
      var la = b++;
      if (Ya.innerWidth < 1300) {
        this.buttons[la] = tf(266, 176, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃⲆΔ, Ⲇᐃ.ᐃᐃΔⵠⲆⵠᐃ, Ⲇᐃ.ⵠΔᐃⲆᐃᐃⵠ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(0);
        }, 150, 300, Y | _, ha);
      } else {
        this.buttons[la] = tf(266, 176, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃⲆΔ, Ⲇᐃ.ᐃᐃΔⵠⲆⵠᐃ, Ⲇᐃ.ⵠΔᐃⲆᐃᐃⵠ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(0);
        }, -340, 100, ba | _, ha);
      }
      this.buttons[la].view = x;
      this.buttons[la].hint = 0;
      var ma = b++;
      if (Ya.innerWidth < 1300) {
        this.buttons[ma] = tf(266, 176, 0, [Ⲇᐃ.ⵠⲆⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃΔⲆΔⵠⵠⲆ, Ⲇᐃ.ΔΔⲆΔⲆΔᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(4);
        }, 150, 400, Y | _, ha);
      } else {
        this.buttons[ma] = tf(266, 176, 0, [Ⲇᐃ.ⵠⲆⵠᐃⵠⲆⵠ, Ⲇᐃ.ᐃΔⲆΔⵠⵠⲆ, Ⲇᐃ.ΔΔⲆΔⲆΔᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(4);
        }, -340, 200, ba | _, ha);
      }
      this.buttons[ma].view = x;
      this.buttons[ma].hint = 0;
      var na = b++;
      if (Ya.innerWidth < 1300) {
        this.buttons[na] = tf(266, 176, 0, [Ⲇᐃ.ᐃⵠΔᐃⵠⵠᐃ, Ⲇᐃ.ΔⵠⵠⵠⲆᐃⵠ, Ⲇᐃ.ᐃᐃⲆⲆⲆⵠᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(6);
        }, 450, 300, Y | _, ha);
      } else {
        this.buttons[na] = tf(266, 176, 0, [Ⲇᐃ.ᐃⵠΔᐃⵠⵠᐃ, Ⲇᐃ.ΔⵠⵠⵠⲆᐃⵠ, Ⲇᐃ.ᐃᐃⲆⲆⲆⵠᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(6);
        }, -340, 300, ba | _, ha);
      }
      this.buttons[na].view = x;
      this.buttons[na].hint = 0;
      var oa = b++;
      if (Ya.innerWidth < 1300) {
        this.buttons[oa] = tf(266, 176, 0, [Ⲇᐃ.ⲆⵠⲆⵠᐃΔⵠ, Ⲇᐃ.ᐃⲆⵠᐃⲆⵠΔ, Ⲇᐃ.ᐃᐃΔΔⵠΔᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(2);
        }, 300, 300, Y | _, ha);
      } else {
        this.buttons[oa] = tf(266, 176, 0, [Ⲇᐃ.ⲆⵠⲆⵠᐃΔⵠ, Ⲇᐃ.ᐃⲆⵠᐃⲆⵠΔ, Ⲇᐃ.ᐃᐃΔΔⵠΔᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(2);
        }, 204, 100, ba | _, ha);
      }
      this.buttons[oa].view = x;
      this.buttons[oa].hint = 0;
      var pa = b++;
      if (Ya.innerWidth < 1300) {
        this.buttons[pa] = tf(266, 176, 0, [Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⵠ, Ⲇᐃ.ᐃᐃⵠⲆΔΔᐃ, Ⲇᐃ.ΔΔⲆⵠΔⲆᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(3);
        }, 300, 400, Y | _, ha);
      } else {
        this.buttons[pa] = tf(266, 176, 0, [Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⵠ, Ⲇᐃ.ᐃᐃⵠⲆΔΔᐃ, Ⲇᐃ.ΔΔⲆⵠΔⲆᐃ], 1, da, function () {
          Δⵠᐃᐃ.ⵠΔⵠⲆΔ(3);
        }, 204, 200, ba | _, ha);
      }
      this.buttons[pa].view = x;
      this.buttons[pa].hint = 0;
      var qa = b++;
      this.buttons[qa] = tf(266, 176, 0, [Ⲇᐃ.ⵠᐃᐃⲆⵠⵠΔ, Ⲇᐃ.Δⵠᐃᐃᐃᐃᐃ, Ⲇᐃ.ΔᐃᐃⲆⵠⲆΔ], 1, da, function () {
        Δⵠᐃᐃ.ⵠΔⵠⲆΔ(7);
      }, Ya.innerWidth < 1300 ? 450 : 204, Ya.innerWidth < 1300 ? 400 : 300, (Ya.innerWidth < 1300 ? Y : ba) | _, ha);
      this.buttons[qa].view = x;
      this.buttons[qa].hint = 0;
    }
    function ra(b, c) {
      if (Sh !== c) {
        hx.ΔΔΔΔΔⵠⲆ = c;
        var d = hx.ᐃⲆⵠⲆΔΔⵠ[c];
        hx.ⵠᐃⲆΔⵠ = d.score;
        hx.ⲆⵠⵠⲆΔ = d.kill;
        hx.ⲆⵠⵠⵠΔⵠΔ = d.death;
        hx.time = d.time;
        hx.ⲆᐃᐃⵠⲆⵠΔ = d.bestScore;
        hx.ⲆΔΔⲆᐃⵠΔ = d.bestKill;
        hx.ⲆΔᐃΔⲆⲆⲆ = d.bestTime;
        hx.ⵠⵠΔⵠⵠⲆⵠ = d.scoreTotal;
      }
      if (b === undefined) {
        b = hx.ᐃᐃΔΔⵠᐃⵠ;
      }
      hx.ᐃᐃΔΔⵠᐃⵠ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = hx.ⲆΔᐃΔⲆⲆⲆ[b];
        document.getElementById("stats_box_kill").innerHTML = hx.ⲆΔΔⲆᐃⵠΔ[b];
        document.getElementById("stats_box_score").innerHTML = hx.ⲆᐃᐃⵠⲆⵠΔ[b];
      } else {
        var f = 0;
        for (var g = 0; hx.ⲆⵠⵠⲆΔ.length > g; g++) {
          f += hx.ⲆⵠⵠⲆΔ[g];
        }
        var h = 0;
        for (g = 0; g < hx.time.length; g++) {
          h += hx.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = hx.ⵠᐃⲆΔⵠ;
      }
    }
    this.buttons[b] = tf(87, 78, 0, [Ⲇᐃ.ᐃΔᐃⲆᐃⲆᐃ, Ⲇᐃ.ᐃᐃΔⲆⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⲆⲆⵠ], 1, da, function () {
      hx.ΔᐃⲆΔⵠᐃⵠΔⵠ();
      if (hx.ᐃΔΔΔⲆᐃⲆ === 0) {
        P(q);
      } else {
        P(O);
      }
    }, 127, 110, ba | _, fa);
    this.buttons[b++].view = v;
    this.buttons[b] = tf(87, 78, 0, [Ⲇᐃ.ΔΔᐃᐃΔᐃᐃ, Ⲇᐃ.ᐃΔⵠᐃⲆⲆᐃ, Ⲇᐃ.ⵠⲆⵠⲆᐃⲆⵠ], 1, da, function () {
      const a = Ya.document.createElement("textarea");
      a.value = Fx;
      Ya.document.body.appendChild(a);
      a.select();
      Ya.document.execCommand("copy");
      Ya.document.body.removeChild(a);
    }, 182, 110, ba | _, fa);
    this.buttons[b++].view = v;
    this.buttons[b] = tf(87, 78, 0, [Ⲇᐃ.ⵠⲆᐃⲆᐃⵠᐃ, Ⲇᐃ.ⲆᐃⲆΔⲆᐃΔ, Ⲇᐃ.ΔΔΔΔΔΔⲆ], 1, da, function () {
      (function () {
        if (Bx === Dx && Ya.FB && Ya.FB.getUserID()) {
          Ya.FB.logout();
        }
        if (Dx === Ax && Kx !== undefined) {
          Ya.gapi.auth2.getAuthInstance().signOut();
          Kx = undefined;
        }
        Fx = Sh;
        Ex = undefined;
        Dx = mr;
        hx.ᐃᐃᐃⵠΔ = 0;
        hx.ⲆⲆΔΔᐃ = 0;
        hx.ⵠᐃⲆΔⵠ = 0;
        hx.ᐃⵠⲆᐃΔΔΔ();
        ⵠⲆⲆⵠΔᐃⲆⲆᐃ();
      })();
    }, 255, 110, ba | _, fa);
    this.buttons[b++].view = v;
    this.buttons[b] = tf(58, 64, 0, [Ⲇᐃ.ΔᐃⲆᐃⵠᐃⲆ, Ⲇᐃ.ⲆΔΔΔᐃⲆⲆ, Ⲇᐃ.ᐃΔΔᐃΔᐃⲆ], 1, da, function () {
      P(x);
    }, 189, 118, ba | _, fa);
    this.buttons[b++].view = m;
    this.buttons[b] = tf(497, 72, 0, [Ⲇᐃ.ⵠᐃⵠᐃᐃΔᐃ, Ⲇᐃ.ΔⲆᐃⵠⵠΔΔ, Ⲇᐃ.ΔᐃΔⲆΔΔΔ], 1, da, function () {
      (function () {
        if (gf) {
          Ex = ⲆᐃΔ.ⵠⵠᐃᐃⲆⵠⵠ(40);
          Dx = Cx;
          Fx = gf.userId;
          Ya.ΔΔΔⲆΔᐃᐃ();
          return;
        }
        Ya.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ba | _, fa);
    this.buttons[b++].view = m;
    this.buttons[b] = tf(497, 72, 0, [Ⲇᐃ.ⵠⲆⲆⲆⲆᐃᐃ, Ⲇᐃ.ΔⲆⵠΔⵠΔᐃ, Ⲇᐃ.ᐃᐃᐃⵠⲆⵠⲆ], 1, da, function () {
      Ya.FB.login(function (a) {
        if (a.authResponse) {
          Ya.FB.api("/me", function (a) {
            Dx = Bx;
            Ex = Ya.FB.getAuthResponse().accessToken;
            Px();
            Ya.ΔΔΔⲆΔᐃᐃ();
          });
        }
      });
    }, -130, 430, ba | _, fa);
    this.buttons[b++].view = m;
    ΔΔΔⵠᐃⵠΔ = 20000;
    this.ⲆΔᐃⲆΔᐃⲆ = function (a) {
      var b = hx.ⵠᐃΔΔⵠⲆⵠ(a);
      var c = b * b * ΔΔΔⵠᐃⵠΔ;
      return (a -= c) / (ΔΔΔⵠᐃⵠΔ * ((b + 1) * (b + 1)) - c);
    };
    this.ⵠᐃΔΔⵠⲆⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ΔΔΔⵠᐃⵠΔ));
    };
    this.ΔⲆⲆⵠᐃΔⲆⲆΔ = function (a) {
      hx.ⵠⵠⵠᐃⲆ = hx.ⵠᐃΔΔⵠⲆⵠ(a);
      hx.ΔⲆᐃᐃⵠⵠⲆ = hx.ⲆΔᐃⲆΔᐃⲆ(a);
      hx.ᐃⲆᐃΔⵠΔⵠ = 0;
      hx.ⵠᐃⲆΔⵠ = a;
    };
    this.ⵠⲆⵠⲆⲆᐃᐃΔⵠ = function (a) {
      hx.buttons[hx.ⲆᐃΔᐃⵠΔΔ].info.active = 0;
      hx.buttons[hx.ΔⲆΔᐃⵠⲆⵠ].info.active = 1;
      hx.buttons[hx.ⵠⵠΔⲆΔᐃⵠ].info.active = 1;
      i();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = Ya.decodeURIComponent(Ya.escape(Ya.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      hx.ⲆⲆΔΔᐃ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      hx.ᐃⲆⵠⲆΔΔⵠ = b;
      u.ΔⲆⲆⵠᐃΔⲆⲆΔ(c.score);
      hx.ⵠᐃⲆΔⵠ = c.score;
      hx.ⲆⵠⵠⲆΔ = c.kill;
      hx.ⲆⵠⵠⵠΔⵠΔ = c.death;
      hx.time = c.time;
      hx.ⲆᐃᐃⵠⲆⵠΔ = c.bestScore;
      hx.ⲆΔΔⲆᐃⵠΔ = c.bestKill;
      hx.ⲆΔᐃΔⲆⲆⲆ = c.bestTime;
      hx.ⵠⵠΔⵠⵠⲆⵠ = c.scoreTotal;
      hx.ᐃΔΔΔⲆᐃⲆ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (hx.ᐃΔΔΔⲆᐃⲆ === undefined) {
        hx.ᐃΔΔΔⲆᐃⲆ = 0;
      }
      hx.ΔⵠΔΔᐃⲆⵠ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        hx.ΔⵠΔΔᐃⲆⵠ = Date.now() + Number(a.privateServerTime);
      }
      hx.ᐃᐃᐃⵠΔ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        hx.ᐃᐃᐃⵠΔ = Date.now() + Number(a.kit);
      }
      var d = ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ;
      for (var e = 0; e < a.skins.length; e++) {
        if ((g = a.skins[e]) > 0) {
          for (var f = 0; d.length > f; f++) {
            if (e === d[f].id) {
              u.unlock.Δⵠⵠⵠ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ;
      e = 0;
      for (; a.accessories.length > e; e++) {
        if ((g = a.accessories[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              u.unlock.ⵠΔⲆΔⵠ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ;
      e = 0;
      for (; e < a.books.length; e++) {
        if ((g = a.books[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              u.unlock.Δⵠⵠᐃⵠ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃᐃⵠ.ⵠⵠⲆᐃ;
      e = 0;
      for (; e < a.bags.length; e++) {
        var g = a.bags[e];
        if (g > 0) {
          for (f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              u.unlock.ΔⵠⲆⲆΔ[f] = 1;
            }
          }
        }
      }
      d = ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ;
      e = 0;
      for (; e < a.crates.length; e++) {
        if ((g = a.crates[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (e === d[f].id) {
              u.unlock.ᐃᐃΔⲆᐃ[f] = 1;
              u.unlock.ⲆᐃᐃⵠΔ[f] = 1;
            }
          }
        }
      }
    };
    this.Δⵠᐃᐃⵠᐃᐃᐃⵠ = function () {
      Ya.ΔΔΔⲆΔᐃᐃ = function () {
        P(x);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", yx + "login?token=" + Ex + "&type=" + Dx + (gf ? "&userId=" + gf.userId + "&userInfo=" + gf.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(u.ⵠⲆⵠⲆⲆᐃᐃΔⵠ);
      };
      if (Gx === 1) {
        Ya.ΔΔΔⲆΔᐃᐃ();
      }
    };
    Ya.ⵠⲆⲆⵠΔᐃⲆⲆᐃ = function () {
      hx.buttons[hx.ⲆᐃΔᐃⵠΔΔ].info.active = 1;
      hx.buttons[hx.ΔⲆΔᐃⵠⲆⵠ].info.active = 0;
      hx.buttons[hx.ⵠⵠΔⲆΔᐃⵠ].info.active = 0;
      P(x);
    };
    this.ⲆΔΔⲆⵠ = function () {
      return hx.buttons[hx.ΔⲆΔᐃⵠⲆⵠ].info.active;
    };
    this.buttons[b] = tf(461, 105, 0, [Ⲇᐃ.ᐃⵠᐃᐃᐃⵠⲆ, Ⲇᐃ.ⵠᐃᐃΔᐃᐃⲆ, Ⲇᐃ.ΔⵠΔⵠᐃᐃⲆ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        P(y);
      } else {
        P(m);
      }
    }, -100, 80, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(157, 158, 0, [Ⲇᐃ.ΔᐃᐃΔΔᐃᐃ, Ⲇᐃ.ΔⲆᐃΔΔⵠᐃ, Ⲇᐃ.ⵠⲆⵠΔⵠⵠⵠ], 1, da, function () {
      Ya.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ba | _, fa);
    this.buttons[b++].view = f;
    this.buttons[b] = tf(66, 73, 0, [Ⲇᐃ.ᐃⲆΔⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⲆΔᐃⲆᐃ, Ⲇᐃ.ᐃᐃⵠΔⵠⵠΔ], 1, da, undefined, -68, 340, ba | _, fa);
    this.buttons[b++].view = f;
    this.buttons[b] = tf(66, 73, 0, [Ⲇᐃ.ΔⵠⲆⵠᐃΔᐃ, Ⲇᐃ.ⵠⲆⲆΔΔⲆⵠ, Ⲇᐃ.ⲆⵠᐃΔⲆᐃᐃ], 1, da, Ej, -30, 340, ba | _, fa);
    this.buttons[b++].view = f;
    this.ⲆᐃⵠⵠⲆΔᐃⵠΔ = b;
    this.buttons[b] = tf(97, 66, 0, [Ⲇᐃ.ⲆΔᐃᐃⲆᐃᐃ, Ⲇᐃ.ⲆⵠΔⵠⲆⲆⲆ, Ⲇᐃ.ⵠⵠΔΔᐃⲆᐃ], 1, da, function () {
      Qx(Oh, undefined, hx.ᐃΔⵠᐃⲆΔⵠ);
    }, -14, 151, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⵠⲆⵠⲆⲆᐃⵠ = b;
    this.buttons[b] = tf(135, 66, 0, [Ⲇᐃ.ΔⵠΔᐃᐃⲆⵠ, Ⲇᐃ.ⲆⲆᐃⲆⵠⵠⵠ, Ⲇᐃ.ᐃⵠⵠⵠᐃⲆᐃ], 1, da, function () {
      Qx(undefined, undefined, hx.ⵠⲆⵠⲆⲆᐃⵠ);
    }, 37.5, 151, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⵠΔΔΔⲆΔΔ = b;
    this.buttons[b] = tf(160, 66, 0, [Ⲇᐃ.ⲆΔⲆⲆΔΔᐃ, Ⲇᐃ.ΔⵠΔⵠΔΔΔ, Ⲇᐃ.ⲆΔⵠΔᐃᐃⲆ], 1, da, function () {
      Qx(Cn, Ds, hx.ⵠΔΔΔⲆΔΔ);
    }, 107.5, 151, ba | _, fa);
    this.buttons[b++].view = z;
    this.ᐃΔⵠᐃⲆΔⵠ = b;
    this.buttons[b] = tf(207, 66, 0, [Ⲇᐃ.ⲆⵠⵠⵠᐃΔⵠ, Ⲇᐃ.ᐃⵠΔᐃΔⵠᐃ, Ⲇᐃ.ᐃΔᐃΔⲆᐃⵠ], 1, da, function () {
      Qx(Ja, Oh, hx.ᐃΔⵠᐃⲆΔⵠ);
    }, 190.5, 151, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⵠⲆⲆᐃΔⵠᐃ = b;
    this.buttons[b] = tf(144, 66, 0, [Ⲇᐃ.ⵠΔⲆⵠΔⲆΔ, Ⲇᐃ.ᐃᐃΔΔⲆⲆⵠ, Ⲇᐃ.ΔΔⲆΔⲆⵠⲆ], 1, da, function () {
      Qx(hx.ⵠⲆⲆᐃΔⵠᐃ);
    }, 103.5, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ΔᐃᐃⵠⵠΔⵠ = b;
    this.buttons[b] = tf(124, 66, 0, [Ⲇᐃ.ⲆᐃΔᐃⵠᐃΔ, Ⲇᐃ.ⲆⵠᐃⵠⲆⲆΔ, Ⲇᐃ.ⲆΔⵠⵠᐃⲆⲆ], 1, da, function () {
      Qx(hx.ΔᐃᐃⵠⵠΔⵠ);
    }, 177.5, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ᐃᐃΔᐃΔⲆΔ = b;
    this.buttons[b] = tf(104, 66, 0, [Ⲇᐃ.ⲆᐃΔΔⲆΔᐃ, Ⲇᐃ.Δᐃⵠⵠᐃᐃᐃ, Ⲇᐃ.ΔΔΔΔᐃᐃᐃ], 1, da, function () {
      Qx(hx.ᐃᐃΔᐃΔⲆΔ);
    }, 242, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ΔΔᐃΔⲆⵠⵠ = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⲆΔⲆⲆᐃⲆᐃ, Ⲇᐃ.ΔⵠᐃⲆᐃⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃΔⲆⲆ], 1, da, function () {
      Qx(nl, mr, Ig, hx.ΔΔᐃΔⲆⵠⵠ);
    }, -185, 528, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⲆΔΔⲆⵠΔⵠ = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ᐃⲆᐃΔⵠⵠⲆ, Ⲇᐃ.ᐃᐃᐃⵠΔᐃΔ, Ⲇᐃ.ⲆΔⲆᐃΔΔⵠ], 1, da, function () {
      Qx(Ej, undefined, Ig, hx.ⲆΔΔⲆⵠΔⵠ);
    }, -149, 528, ba | _, fa);
    this.buttons[b++].view = z;
    this.ᐃⵠⵠΔΔⲆⲆ = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⲆⵠᐃᐃⵠΔⲆ, Ⲇᐃ.ΔΔᐃⵠⵠᐃⲆ, Ⲇᐃ.ΔⵠᐃⲆⲆⵠᐃ], 1, da, function () {
      Qx(undefined, Cn, mr, hx.ᐃⵠⵠΔΔⲆⲆ);
    }, -113, 528, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⵠΔΔᐃⲆΔⲆ = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ΔⵠⲆⵠᐃᐃΔ, Ⲇᐃ.ᐃᐃⲆⲆⵠⲆΔ, Ⲇᐃ.ⵠⲆΔⲆⵠΔΔ], 1, da, function () {
      Qx(Wa, Oh, undefined, hx.ⵠΔΔᐃⲆΔⲆ);
    }, -77, 528, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⲆᐃᐃⲆⲆⲆΔ = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⵠⲆᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔᐃᐃⲆⵠΔ, Ⲇᐃ.ΔΔΔⵠⵠᐃⵠ], 1, da, function () {
      Qx(undefined, bj, mr, hx.ⲆᐃᐃⲆⲆⲆΔ);
    }, -41, 528, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⵠᐃⵠⵠᐃΔⵠ = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⲆᐃⲆΔⲆⲆΔ, Ⲇᐃ.ΔᐃⲆᐃⲆⵠⲆ, Ⲇᐃ.ⲆⵠⲆΔⲆⵠᐃ], 1, da, function () {
      Qx(Oh, Fl, undefined, hx.ⵠᐃⵠⵠᐃΔⵠ);
    }, -5, 528, ba | _, fa);
    this.buttons[b++].view = z;
    this.buttons[b] = tf(232, 352, 0, [Ⲇᐃ.ⲆⵠⵠⲆᐃⲆⲆ, Ⲇᐃ.ᐃⲆᐃⲆⵠⵠΔ, Ⲇᐃ.ᐃⵠΔⲆⲆᐃⲆ], 1, da, function () {
      Rx(300);
    }, -330, 135, ba | _, fa);
    this.buttons[b++].view = y;
    this.buttons[b] = tf(232, 352, 0, [Ⲇᐃ.ⲆⲆⵠⵠΔⵠⲆ, Ⲇᐃ.ⵠΔⲆΔᐃᐃᐃ, Ⲇᐃ.ΔⲆᐃⵠᐃΔⵠ], 1, da, function () {
      Rx(600);
    }, -195, 135, ba | _, fa);
    this.buttons[b++].view = y;
    this.buttons[b] = tf(243, 374, 0, [Ⲇᐃ.ΔᐃⲆⲆⵠΔⵠ, Ⲇᐃ.ᐃⲆᐃᐃᐃᐃᐃ, Ⲇᐃ.ⵠΔᐃⵠⲆΔⲆ], 1, da, function () {
      Rx(2600);
    }, -60, 130, ba | _, fa);
    this.buttons[b++].view = y;
    this.buttons[b] = tf(232, 352, 0, [Ⲇᐃ.ⲆⵠΔᐃⵠᐃⲆ, Ⲇᐃ.ΔⵠⲆΔⵠⲆⵠ, Ⲇᐃ.ⵠⵠⲆⵠⵠⲆᐃ], 1, da, function () {
      Rx(7000);
    }, 78, 135, ba | _, fa);
    this.buttons[b++].view = y;
    this.buttons[b] = tf(243, 374, 0, [Ⲇᐃ.ᐃⲆΔⲆⵠⲆᐃ, Ⲇᐃ.ᐃⵠᐃΔᐃΔᐃ, Ⲇᐃ.ⲆᐃⵠΔⲆΔΔ], 1, da, function () {
      Rx(20000);
    }, 213, 130, ba | _, fa);
    this.buttons[b++].view = y;
    this.buttons[b] = tf(58, 64, 0, [Ⲇᐃ.ΔᐃⲆᐃⵠᐃⲆ, Ⲇᐃ.ⲆΔΔΔᐃⲆⲆ, Ⲇᐃ.ᐃΔΔᐃΔᐃⲆ], 1, da, function () {
      P(L);
    }, 300, 88, ba | _, fa);
    this.buttons[b++].view = y;
    this.buttons[b] = tf(323, 112, 0, [Ⲇᐃ.ᐃΔᐃⵠⲆⵠΔ, Ⲇᐃ.ⲆⲆⵠΔᐃΔΔ, Ⲇᐃ.ΔⵠᐃΔΔⲆⲆ], 1, da, function () {
      P(I);
      Da.ᐃⵠΔⲆΔ();
    }, -315, 185, ba | _, fa);
    this.buttons[b++].view = p;
    this.buttons[b] = tf(323, 112, 0, [Ⲇᐃ.ΔⲆⵠᐃⲆᐃⵠ, Ⲇᐃ.ⵠᐃⲆᐃⲆⵠΔ, Ⲇᐃ.ⵠΔᐃᐃⲆⵠⲆ], 1, da, function () {
      P(G);
      Ia.ᐃⵠΔⲆΔ();
    }, -315, 321, ba | _, fa);
    this.buttons[b++].view = p;
    this.buttons[b] = tf(323, 112, 0, [Ⲇᐃ.ⲆΔⲆᐃⵠⲆⲆ, Ⲇᐃ.ⵠᐃⲆΔΔⵠⲆ, Ⲇᐃ.ΔⵠⲆᐃΔΔⵠ], 1, da, function () {
      P(F);
      Ea.ᐃⵠΔⲆΔ();
    }, 153, 185, ba | _, fa);
    this.buttons[b++].view = p;
    this.buttons[b] = tf(323, 112, 0, [Ⲇᐃ.ⵠΔⵠᐃⵠΔⲆ, Ⲇᐃ.ⵠⲆᐃᐃΔⵠΔ, Ⲇᐃ.ⲆΔΔⵠᐃᐃⲆ], 1, da, function () {
      P(R);
      Fa.ᐃⵠΔⲆΔ();
    }, 153, 321, ba | _, fa);
    this.buttons[b++].view = p;
    this.buttons[b] = tf(323, 112, 0, [Ⲇᐃ.ᐃⲆΔⵠⲆⲆⵠ, Ⲇᐃ.ᐃⵠᐃᐃᐃᐃⲆ, Ⲇᐃ.ΔᐃΔᐃⵠᐃⲆ], 1, da, function () {
      P(Q);
      Ga.ᐃⵠΔⲆΔ();
    }, 153, 463, ba | _, fa);
    this.buttons[b++].view = p;
    this.buttons[b] = tf(323, 112, 0, [Ⲇᐃ.ⲆⲆⵠᐃⲆⲆⵠ, Ⲇᐃ.ΔⲆⵠⲆⵠΔⵠ, Ⲇᐃ.ΔⲆᐃⵠᐃⵠⲆ], 1, da, function () {
      P(S);
      Ha.ᐃⵠΔⲆΔ();
    }, -315, 463, ba | _, fa);
    this.buttons[b++].view = p;
    this.buttons[b] = tf(327, 117, 0, [Ⲇᐃ.ⲆⵠᐃΔᐃⵠⲆ, Ⲇᐃ.ΔΔᐃⲆⵠᐃⵠ, Ⲇᐃ.ᐃΔⵠᐃΔⲆΔ], 1, da, function () {
      P(U);
    }, 155, 70, Y, ha);
    this.buttons[b++].view = x;
    this.buttons[b] = tf(130, 129, 0, [Ⲇᐃ.ⲆⵠⲆᐃᐃⵠΔ, Ⲇᐃ.ΔᐃⵠⲆᐃⲆⲆ, Ⲇᐃ.ⵠᐃⲆΔⵠᐃⵠ], 1, da, function () {
      k(w, fa, "none");
      P(L);
    }, 10, 40, ba | _, fa);
    this.buttons[b++].view = w;
    this.buttons[b] = tf(130, 129, 0, [Ⲇᐃ.ⲆⵠⲆᐃᐃⵠΔ, Ⲇᐃ.ΔᐃⵠⲆᐃⲆⲆ, Ⲇᐃ.ⵠᐃⲆΔⵠᐃⵠ], 1, da, function () {
      k(C, fa, "none");
      P(L);
    }, 10, 40, ba | _, fa);
    this.buttons[b++].view = C;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 200, 140, ba | _, fa);
    this.buttons[b++].view = N;
    this.buttons[b] = tf(524, 110, 0, [Ⲇᐃ.ⵠᐃⵠᐃⲆᐃᐃ, Ⲇᐃ.ⲆⲆᐃΔⲆᐃΔ, Ⲇᐃ.ⵠⲆΔΔⲆⵠᐃ], 1, da, function () {
      Vx("Atlanta");
    }, -265, 300, ba | _, fa);
    this.buttons[b++].view = N;
    this.buttons[b] = tf(523, 110, 0, [Ⲇᐃ.ΔⵠᐃⵠⲆᐃᐃ, Ⲇᐃ.ⲆⲆⵠⵠΔᐃⵠ, Ⲇᐃ.ΔᐃⲆⲆⵠΔᐃ], 1, da, function () {
      Vx("LosAngeles");
    }, 5, 300, ba | _, fa);
    this.buttons[b++].view = N;
    this.buttons[b] = tf(344, 110, 0, [Ⲇᐃ.ⲆⲆΔᐃⵠᐃᐃ, Ⲇᐃ.ᐃᐃⵠΔⲆⵠΔ, Ⲇᐃ.ᐃⵠⵠⲆⲆΔⵠ], 1, da, function () {
      Vx("Frankfurt");
    }, -265, 365, ba | _, fa);
    this.buttons[b++].view = N;
    this.buttons[b] = tf(344, 110, 0, [Ⲇᐃ.ⲆⲆᐃΔᐃᐃᐃ, Ⲇᐃ.ᐃⵠΔᐃⵠᐃⵠ, Ⲇᐃ.ⲆΔⵠⲆᐃⲆⲆ], 1, da, function () {
      Vx("Osaka");
    }, 100, 365, ba | _, fa);
    this.buttons[b++].view = N;
    this.buttons[b] = tf(344, 110, 0, [Ⲇᐃ.ⲆⵠΔⲆⲆΔΔ, Ⲇᐃ.ΔΔΔⵠᐃΔⵠ, Ⲇᐃ.ⲆⵠᐃⲆⵠΔⵠ], 1, da, function () {
      Vx("Sydney");
    }, -86, 365, ba | _, fa);
    this.buttons[b++].view = N;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(N);
    }, 224, 140, ba | _, fa);
    this.buttons[b++].view = H;
    this.buttons[b] = tf(230, 352, 0, [Ⲇᐃ.ⵠⲆᐃⲆⵠΔΔ, Ⲇᐃ.ᐃΔᐃⵠᐃⵠΔ, Ⲇᐃ.ⵠΔΔΔⵠⲆΔ], 1, da, function () {
      Rx(350);
    }, -280, 240, ba | _, fa);
    this.buttons[b++].view = H;
    this.buttons[b] = tf(230, 352, 0, [Ⲇᐃ.ⵠΔᐃⲆᐃΔⲆ, Ⲇᐃ.ⲆΔⲆᐃΔᐃᐃ, Ⲇᐃ.ᐃⲆⵠᐃⵠⵠΔ], 1, da, function () {
      Rx(700);
    }, -130, 240, ba | _, fa);
    this.buttons[b++].view = H;
    this.buttons[b] = tf(230, 352, 0, [Ⲇᐃ.ᐃⲆΔᐃΔᐃⵠ, Ⲇᐃ.ΔⵠᐃΔⵠΔⵠ, Ⲇᐃ.ⵠⲆᐃΔⲆⵠΔ], 1, da, function () {
      Rx(1400);
    }, 20, 240, ba | _, fa);
    this.buttons[b++].view = H;
    this.buttons[b] = tf(230, 352, 0, [Ⲇᐃ.ᐃⲆⵠᐃⵠᐃⲆ, Ⲇᐃ.ⲆΔᐃᐃⵠΔⵠ, Ⲇᐃ.ᐃᐃΔΔᐃⵠⲆ], 1, da, function () {
      Rx(3000);
    }, 170, 240, ba | _, fa);
    this.buttons[b++].view = H;
    this.buttons[b] = tf(105, 119, 0, [Ⲇᐃ.ⵠⵠⲆⵠᐃⲆᐃ, Ⲇᐃ.ᐃⵠΔᐃΔⲆΔ, Ⲇᐃ.ⵠᐃΔⲆⵠΔⵠ], 1, da, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = Ya.document.createElement("textarea");
      b.value = vf + "?server=" + a[1] + "&region=" + a[0];
      Ya.document.body.appendChild(b);
      b.select();
      Ya.document.execCommand("copy");
      Ya.document.body.removeChild(b);
    }, 170, 310, ba | _, fa);
    this.buttons[b++].view = T;
    this.buttons[b] = tf(105, 119, 0, [Ⲇᐃ.ⲆⵠΔⲆᐃᐃᐃ, Ⲇᐃ.ⲆⲆⲆΔⵠⵠΔ, Ⲇᐃ.ΔⵠΔⵠᐃⵠⵠ], 1, da, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", yx + "rebootServer?token=" + Ex + "&userid=" + Fx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = vf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ba | _, fa);
    this.buttons[b++].view = T;
    this.buttons[b] = tf(204, 115, 0, [Ⲇᐃ.ⵠᐃⲆΔΔⲆΔ, Ⲇᐃ.ⵠⵠⵠⵠΔᐃΔ, Ⲇᐃ.ⵠⵠⲆⵠΔΔⲆ], 1, da, function () {
      Ya.open("./commands.html", "_blank");
    }, -265, 490, ba | _, fa);
    this.buttons[b++].view = T;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.ΔᐃΔⵠᐃⲆⲆ, Ⲇᐃ.ΔⲆΔⲆⲆΔⲆ, Ⲇᐃ.ⵠⲆΔᐃΔⲆⵠ], 1, da, function () {
      P(M);
    }, -210, 170, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.ΔᐃⵠⵠⲆⵠⲆ, Ⲇᐃ.ΔⵠΔⵠᐃⵠᐃ, Ⲇᐃ.ⵠᐃⵠⵠΔᐃΔ], 1, da, function () {
      P(B);
    }, 70, 170, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.ΔⲆⲆΔⲆᐃΔ, Ⲇᐃ.ⲆⵠᐃⲆⵠⵠⲆ, Ⲇᐃ.ᐃⲆᐃΔⲆΔⲆ], 1, da, function () {
      P(A);
    }, 70, 204, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.ⲆⲆⵠᐃⵠᐃΔ, Ⲇᐃ.ⵠᐃⵠΔⵠᐃΔ, Ⲇᐃ.ᐃⵠᐃΔᐃⵠΔ], 1, da, function () {
      P(E);
    }, -210, 204, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.ⲆⲆⵠᐃⵠᐃΔ, Ⲇᐃ.ⵠᐃⵠΔⵠᐃΔ, Ⲇᐃ.ᐃⵠᐃΔᐃⵠΔ], 1, da, function () {
      P(D);
    }, 70, 238, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.ⲆⲆⵠᐃⵠᐃΔ, Ⲇᐃ.ⵠᐃⵠΔⵠᐃΔ, Ⲇᐃ.ᐃⵠᐃΔᐃⵠΔ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Wx(0, 300);
      } else {
        P(m);
      }
    }, 307, 205, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.Δⵠⵠⵠᐃᐃⵠ, Ⲇᐃ.ⲆΔΔⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆⵠᐃⵠⵠⲆ], 1, da, function () {
      P(J);
    }, -210, 238, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(145, 69, 0, [Ⲇᐃ.Δⵠⵠⵠᐃᐃⵠ, Ⲇᐃ.ⲆΔΔⵠΔⲆᐃ, Ⲇᐃ.ⵠⲆⵠᐃⵠⵠⲆ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Wx(1, 600);
      } else {
        P(m);
      }
    }, 307, 239, ba | _, fa);
    this.buttons[b++].view = L;
    this.buttons[b] = tf(192, 101, 0, [Ⲇᐃ.ⵠᐃⵠⵠΔΔᐃ, Ⲇᐃ.ⲆⲆᐃⵠⵠᐃⲆ, Ⲇᐃ.ⵠΔᐃⵠΔᐃⲆ], 1, da, function () {
      Tx();
    }, -100, 250, ba | _, fa);
    this.buttons[b++].view = q;
    this.buttons[b] = tf(192, 104, 0, [Ⲇᐃ.ᐃⲆᐃΔΔⲆⵠ, Ⲇᐃ.ᐃⵠᐃΔΔⵠΔ, Ⲇᐃ.ⵠⲆⵠⲆⵠⵠΔ], 1, da, function () {
      Tx();
    }, -100, 239, ba | _, fa);
    this.buttons[b++].view = O;
    this.buttons[b] = tf(192, 101, 0, [Ⲇᐃ.ⲆⵠᐃⵠⲆⲆⲆ, Ⲇᐃ.ᐃⲆⲆⵠⵠΔᐃ, Ⲇᐃ.ⵠΔΔΔΔᐃⲆ], 1, da, function () {
      P(v);
    }, 10, 250, ba | _, fa);
    this.buttons[b++].view = q;
    this.buttons[b] = tf(192, 104, 0, [Ⲇᐃ.ΔⵠᐃΔⲆᐃΔ, Ⲇᐃ.ⵠⵠΔᐃΔᐃΔ, Ⲇᐃ.ΔᐃⵠΔΔⵠΔ], 1, da, function () {
      P(v);
    }, 10, 239, ba | _, fa);
    this.buttons[b++].view = O;
    ⵠⵠᐃᐃⵠ = [];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ⲆᐃⲆΔᐃ] = [Ⲇᐃ.ⵠᐃⵠⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔⵠᐃⲆⵠ, Ⲇᐃ.ⲆⲆᐃᐃΔΔΔ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ᐃᐃⲆⵠ] = [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ⵠⵠⲆⵠ] = [Ⲇᐃ.ΔⲆⵠⵠΔⵠⵠ, Ⲇᐃ.ΔⵠᐃᐃΔⵠᐃ, Ⲇᐃ.ᐃⲆᐃⲆⵠⲆⲆ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ⵠⵠΔΔ] = [Ⲇᐃ.ⵠΔⵠⲆⲆΔΔ, Ⲇᐃ.ΔᐃⲆᐃΔⲆΔ, Ⲇᐃ.ΔΔⵠⲆⵠⵠⲆ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ⲆᐃⲆⲆ] = [Ⲇᐃ.ⵠΔᐃⲆⵠⵠⲆ, Ⲇᐃ.ⲆᐃΔᐃⲆΔᐃ, Ⲇᐃ.ΔⵠᐃⵠᐃᐃΔ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ⵠⵠⲆⲆ] = [Ⲇᐃ.ⲆΔⵠⵠᐃΔⵠ, Ⲇᐃ.ⵠⵠΔⲆⵠΔΔ, Ⲇᐃ.ⲆⲆⲆⵠⵠᐃⵠ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ⲆⲆⲆⲆ] = [Ⲇᐃ.ⵠⵠΔΔⲆᐃᐃ, Ⲇᐃ.ΔᐃⲆⵠΔΔⵠ, Ⲇᐃ.ᐃⲆΔᐃⲆⵠᐃ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ᐃⵠⲆⵠΔ] = [Ⲇᐃ.ᐃᐃⵠⵠⲆⲆⲆ, Ⲇᐃ.ᐃⵠΔⵠⲆⲆⵠ, Ⲇᐃ.ⵠᐃΔΔᐃᐃⵠ];
    ⵠⵠᐃᐃⵠ[ΔⲆᐃ.ᐃΔⲆΔⵠᐃⵠ] = [Ⲇᐃ.ⵠⵠᐃᐃᐃᐃΔ, Ⲇᐃ.ΔᐃΔᐃⵠⲆΔ, Ⲇᐃ.ΔΔⲆⵠᐃΔΔ];
    ᐃⲆᐃⵠⵠⲆᐃ = b;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Bk, -29, 205, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 300, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Lg, -29, 395, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 205, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 300, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Lg, 65, 395, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, mr, 159, 205, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, go, 159, 300, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 395, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ΔᐃⲆⲆΔᐃⲆ, Ⲇᐃ.ᐃᐃⵠΔᐃᐃⲆ, Ⲇᐃ.ⲆⵠΔᐃⲆΔΔ], 1, da, undefined, -61, 315, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⵠᐃΔⲆ, Ⲇᐃ.ΔΔⵠⲆΔⲆⵠ], 1, da, nh, 260, 315, ba | _, fa);
    this.buttons[b++].view = I;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(p);
    }, -320, 470, ba | _, fa);
    this.buttons[b++].view = I;
    ⲆᐃᐃΔⲆΔⵠⲆⵠ = b;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Cn, -29, 205, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 300, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 395, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 205, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Ej, 65, 300, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 395, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 205, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 300, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 395, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ΔᐃⲆⲆΔᐃⲆ, Ⲇᐃ.ᐃᐃⵠΔᐃᐃⲆ, Ⲇᐃ.ⲆⵠΔᐃⲆΔΔ], 1, da, undefined, -61, 315, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⵠᐃΔⲆ, Ⲇᐃ.ΔΔⵠⲆΔⲆⵠ], 1, da, Ur, 260, 315, ba | _, fa);
    this.buttons[b++].view = G;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(p);
    }, -320, 470, ba | _, fa);
    this.buttons[b++].view = G;
    ⵠᐃᐃᐃⲆⵠᐃⵠⵠ = b;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 205, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 300, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 395, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, mr, 65, 205, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 300, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Ja, 65, 395, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 205, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, nh, 159, 300, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 395, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ΔᐃⲆⲆΔᐃⲆ, Ⲇᐃ.ᐃᐃⵠΔᐃᐃⲆ, Ⲇᐃ.ⲆⵠΔᐃⲆΔΔ], 1, da, undefined, -61, 315, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⵠᐃΔⲆ, Ⲇᐃ.ΔΔⵠⲆΔⲆⵠ], 1, da, undefined, 260, 315, ba | _, fa);
    this.buttons[b++].view = S;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(p);
    }, -320, 470, ba | _, fa);
    this.buttons[b++].view = S;
    ⲆΔΔⲆⲆⵠᐃᐃⵠ = b;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, go, -29, 205, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Bk, -29, 300, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 395, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 205, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Oh, 65, 300, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Sh, 65, 395, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, bj, 159, 205, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 300, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 395, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ΔᐃⲆⲆΔᐃⲆ, Ⲇᐃ.ᐃᐃⵠΔᐃᐃⲆ, Ⲇᐃ.ⲆⵠΔᐃⲆΔΔ], 1, da, undefined, -61, 315, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⵠᐃΔⲆ, Ⲇᐃ.ΔΔⵠⲆΔⲆⵠ], 1, da, undefined, 260, 315, ba | _, fa);
    this.buttons[b++].view = F;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(p);
    }, -320, 470, ba | _, fa);
    this.buttons[b++].view = F;
    ⵠΔΔⲆᐃΔΔᐃⲆ = b;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Ur, -29, 205, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Ds, -29, 300, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, mr, -29, 395, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Lg, 65, 205, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 65, 300, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, bj, 65, 395, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, eb, 159, 205, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 300, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 395, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ΔᐃⲆⲆΔᐃⲆ, Ⲇᐃ.ᐃᐃⵠΔᐃᐃⲆ, Ⲇᐃ.ⲆⵠΔᐃⲆΔΔ], 1, da, undefined, -61, 315, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⵠᐃΔⲆ, Ⲇᐃ.ΔΔⵠⲆΔⲆⵠ], 1, da, undefined, 260, 315, ba | _, fa);
    this.buttons[b++].view = R;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(p);
    }, -320, 470, ba | _, fa);
    this.buttons[b++].view = R;
    ᐃΔⵠⲆΔΔⲆᐃⲆ = b;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, go, -29, 205, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Lg, -29, 300, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, -29, 395, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Sh, 65, 205, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, Bk, 65, 300, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, bj, 65, 395, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 205, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, eb, 159, 300, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(178, 182, 0, [Ⲇᐃ.ⲆⲆⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠ, Ⲇᐃ.ΔΔᐃⵠ], 1, da, undefined, 159, 395, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ΔᐃⲆⲆΔᐃⲆ, Ⲇᐃ.ᐃᐃⵠΔᐃᐃⲆ, Ⲇᐃ.ⲆⵠΔᐃⲆΔΔ], 1, da, Oh, -61, 315, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(39, 122, 0, [Ⲇᐃ.ⵠⲆΔᐃᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⵠᐃΔⲆ, Ⲇᐃ.ΔΔⵠⲆΔⲆⵠ], 1, da, undefined, 260, 315, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(p);
    }, -320, 470, ba | _, fa);
    this.buttons[b++].view = Q;
    this.buttons[b] = tf(260, 260, 0, [Ⲇᐃ.ᐃⵠⵠᐃᐃⲆⲆ, Ⲇᐃ.ᐃᐃᐃΔⵠⵠᐃ, Ⲇᐃ.ⵠⵠⲆⵠΔⲆⵠ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Sx(3, 50);
      } else {
        P(m);
      }
    }, -65, 197, ba | _, fa);
    this.buttons[b++].view = B;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 309, 180, ba | _, fa);
    this.buttons[b++].view = B;
    this.buttons[b] = tf(260, 260, 0, [Ⲇᐃ.ⲆⵠⵠΔΔᐃᐃ, Ⲇᐃ.ⵠΔΔᐃΔⲆᐃ, Ⲇᐃ.ᐃⲆΔⵠΔⵠᐃ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Sx(0, 100);
      } else {
        P(m);
      }
    }, -65, 197, ba | _, fa);
    this.buttons[b++].view = M;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 309, 180, ba | _, fa);
    this.buttons[b++].view = M;
    this.buttons[b] = tf(260, 260, 0, [Ⲇᐃ.ΔᐃΔⲆⵠᐃⵠ, Ⲇᐃ.ⲆᐃΔΔⵠⲆⵠ, Ⲇᐃ.ᐃΔⵠᐃⲆΔᐃ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Sx(4, 150);
      } else {
        P(m);
      }
    }, -65, 197, ba | _, fa);
    this.buttons[b++].view = A;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 309, 180, ba | _, fa);
    this.buttons[b++].view = A;
    this.buttons[b] = tf(260, 260, 0, [Ⲇᐃ.ⵠⵠⲆⲆⲆᐃⲆ, Ⲇᐃ.ΔΔᐃⲆⲆΔᐃ, Ⲇᐃ.ΔΔᐃᐃⵠⵠⲆ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Sx(1, 300);
      } else {
        P(m);
      }
    }, -65, 197, ba | _, fa);
    this.buttons[b++].view = E;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 309, 180, ba | _, fa);
    this.buttons[b++].view = E;
    this.buttons[b] = tf(260, 260, 0, [Ⲇᐃ.ⲆᐃⲆΔᐃΔᐃ, Ⲇᐃ.ΔᐃᐃᐃΔᐃⲆ, Ⲇᐃ.ᐃΔⲆⵠⲆⲆⵠ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Sx(2, 600);
      } else {
        P(m);
      }
    }, -65, 197, ba | _, fa);
    this.buttons[b++].view = J;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 309, 180, ba | _, fa);
    this.buttons[b++].view = J;
    this.buttons[b] = tf(260, 260, 0, [Ⲇᐃ.ⵠⵠⲆⲆⲆᐃⲆ, Ⲇᐃ.ΔΔᐃⲆⲆΔᐃ, Ⲇᐃ.ΔΔᐃᐃⵠⵠⲆ], 1, da, function () {
      if (u.ⲆΔΔⲆⵠ()) {
        Sx(5, 300);
      } else {
        P(m);
      }
    }, -65, 197, ba | _, fa);
    this.buttons[b++].view = D;
    this.buttons[b] = tf(115, 73, 0, [Ⲇᐃ.ΔΔⵠΔⲆ, Ⲇᐃ.ⵠᐃΔⲆⲆ, Ⲇᐃ.ΔΔⵠⲆΔ], 1, da, function () {
      P(L);
    }, 309, 180, ba | _, fa);
    this.buttons[b++].view = D;
    var sa = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⵠΔⵠΔⲆΔᐃ, Ⲇᐃ.ⲆⲆΔⲆⲆⵠⵠ, Ⲇᐃ.ᐃᐃⲆᐃΔᐃⵠ], 1, da, function () {
      ra(undefined, 0);
    }, -305, 132, ba | _, fa);
    this.buttons[b++].view = v;
    var ta = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ᐃᐃⲆᐃⵠⵠⵠ, Ⲇᐃ.ⲆᐃⵠΔΔⲆⵠ, Ⲇᐃ.ⵠⵠⵠᐃΔⲆᐃ], 1, da, function () {
      ra(Cn, 1);
    }, -273, 132, ba | _, fa);
    this.buttons[b++].view = v;
    var ua = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ᐃᐃΔᐃⵠⵠΔ, Ⲇᐃ.ⲆⵠΔᐃⲆΔᐃ, Ⲇᐃ.ᐃⵠⵠⵠⲆΔⲆ], 1, da, function () {
      ra(undefined, 2);
    }, -241, 132, ba | _, fa);
    this.buttons[b++].view = v;
    var va = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⲆΔⲆΔᐃⵠⲆ, Ⲇᐃ.ⵠᐃΔⲆⵠΔᐃ, Ⲇᐃ.ⲆᐃⵠⲆΔⵠᐃ], 1, da, function () {
      ra(undefined, 3);
    }, -305, 165, ba | _, fa);
    this.buttons[b++].view = v;
    var wa = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⵠⵠⵠᐃΔⵠⲆ, Ⲇᐃ.ⲆΔⵠΔⵠᐃᐃ, Ⲇᐃ.ⵠΔⵠⵠΔᐃⲆ], 1, da, function () {
      ra(Oh, 4);
    }, -273, 165, ba | _, fa);
    this.buttons[b++].view = v;
    var xa = b;
    this.buttons[b] = tf(46, 51, 0, [Ⲇᐃ.ⵠⲆⲆΔΔⲆΔ, Ⲇᐃ.ⲆⵠⵠⵠⵠΔΔ, Ⲇᐃ.ⵠᐃΔⵠⲆΔΔ], 1, da, function () {
      ra(Pn, 5);
    }, -241, 165, ba | _, fa);
    this.buttons[b++].view = v;
    var ya = b;
    this.buttons[b] = tf(460, 73, 0, [Ⲇᐃ.ᐃⵠⲆⲆⵠᐃᐃ, Ⲇᐃ.ⲆΔΔⵠᐃᐃᐃ, Ⲇᐃ.ΔⲆⲆᐃᐃΔΔ], 1, da, function () {
      ra(-1);
    }, -180, 170, ba | _, fa);
    this.buttons[b++].view = v;
    var za = b;
    this.buttons[b] = tf(222, 68, 0, [Ⲇᐃ.ⵠⵠᐃⵠᐃᐃᐃ, Ⲇᐃ.ⲆΔⲆⵠᐃᐃᐃ, Ⲇᐃ.ⵠⲆΔΔᐃⲆΔ], 1, da, function () {
      ra(0);
    }, -180, 215, ba | _, fa);
    this.buttons[b++].view = v;
    var Aa = b;
    this.buttons[b] = tf(222, 68, 0, [Ⲇᐃ.ΔⵠᐃⵠᐃΔⲆ, Ⲇᐃ.ΔⵠⲆⵠⵠⲆⵠ, Ⲇᐃ.ᐃⵠⲆΔⵠΔⵠ], 1, da, function () {
      ra(4);
    }, -180, 260, ba | _, fa);
    this.buttons[b++].view = v;
    var Ba = b;
    this.buttons[b] = tf(222, 68, 0, [Ⲇᐃ.ⵠⲆᐃΔΔⲆΔ, Ⲇᐃ.ΔⲆᐃⵠᐃⲆᐃ, Ⲇᐃ.ⵠⵠΔΔⵠΔⲆ], 1, da, function () {
      ra(2);
    }, -60, 215, ba | _, fa);
    this.buttons[b++].view = v;
    var Ca = b;
    this.buttons[b] = tf(222, 68, 0, [Ⲇᐃ.ᐃⵠⲆΔΔⲆⲆ, Ⲇᐃ.ΔⲆΔᐃⵠⵠᐃ, Ⲇᐃ.ᐃⵠΔⵠⲆⵠᐃ], 1, da, function () {
      ra(3);
    }, -60, 260, ba | _, fa);
    this.buttons[b++].view = v;
    this.ⲆΔᐃⲆⵠᐃΔ = b;
    this.buttons[b] = tf(143, 66, 0, [Ⲇᐃ.ᐃⲆⲆⵠⲆⵠΔ, Ⲇᐃ.ΔᐃⵠⵠΔⲆⲆ, Ⲇᐃ.ⵠⲆΔΔᐃΔⲆ], 1, da, function () {
      Qx(Lg, hx.ⲆΔᐃⲆⵠᐃΔ);
    }, -298, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ΔᐃΔᐃΔⵠⵠ = b;
    this.buttons[b] = tf(104, 66, 0, [Ⲇᐃ.Δᐃᐃᐃⵠⵠⵠ, Ⲇᐃ.ⵠⲆⲆᐃᐃᐃⵠ, Ⲇᐃ.ⵠᐃⲆᐃⲆⵠᐃ], 1, da, function () {
      Qx(Ds, hx.ΔᐃΔᐃΔⵠⵠ);
    }, -223, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ΔⲆⲆⲆΔᐃΔ = b;
    this.buttons[b] = tf(110, 66, 0, [Ⲇᐃ.ᐃΔΔⲆᐃΔⵠ, Ⲇᐃ.ⵠⲆᐃᐃΔᐃⲆ, Ⲇᐃ.ⲆΔⵠⲆΔᐃⵠ], 1, da, function () {
      Qx(Bk, hx.ΔⲆⲆⲆΔᐃΔ);
    }, -168, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ᐃᐃⵠΔΔⲆᐃ = b;
    this.buttons[b] = tf(88, 66, 0, [Ⲇᐃ.ᐃⲆΔᐃⲆⵠⵠ, Ⲇᐃ.ΔⲆⲆⵠⵠⲆⵠ, Ⲇᐃ.ⵠΔⲆΔΔⵠⵠ], 1, da, function () {
      Qx(Sh, hx.ᐃᐃⵠΔΔⲆᐃ);
    }, -110, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.ⵠᐃᐃⲆᐃⲆΔ = b;
    this.buttons[b] = tf(88, 66, 0, [Ⲇᐃ.ⵠΔᐃᐃΔⵠᐃ, Ⲇᐃ.ΔᐃΔⵠᐃᐃᐃ, Ⲇᐃ.ⲆⲆᐃⵠⲆⵠᐃ], 1, da, function () {
      Qx(undefined, hx.ⵠᐃᐃⲆᐃⲆΔ);
    }, -63, 110, ba | _, fa);
    this.buttons[b++].view = z;
    this.buttons[b] = tf(86, 44, 0, [Ⲇᐃ.ΔᐃᐃΔᐃⵠᐃ, Ⲇᐃ.ᐃᐃᐃΔⵠᐃΔ, Ⲇᐃ.ΔΔⲆΔΔΔᐃ], 1, da, function () {
      Ya.open("./terms.html", "_blank");
    }, 349, 290, ba | _, fa);
    this.buttons[b++].view = L;
    var Da = new e(ⵠᐃᐃⵠ.ⵠⵠⲆᐃⲆ, ᐃⲆᐃⵠⵠⲆᐃ, function (a) {
      hx.Δⵠⵠⵠ = a;
      if (hx.unlock.Δⵠⵠⵠ[a] === 1) {
        ⵠⵠᐃΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.Δⵠⵠⵠ, this.unlock.Δⵠⵠⵠ);
    var Ea = new e(ⵠᐃᐃⵠ.ⵠⵠⲆᐃ, ⲆΔΔⲆⲆⵠᐃᐃⵠ, function (a) {
      hx.ΔⵠⲆⲆΔ = a;
      if (hx.unlock.ΔⵠⲆⲆΔ[a] === 1) {
        ⵠⵠᐃΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⵠⲆⲆΔ, this.unlock.ΔⵠⲆⲆΔ);
    var Fa = new e(ⵠᐃᐃⵠ.ⲆⲆⵠⲆⵠ, ⵠΔΔⲆᐃΔΔᐃⲆ, function (a) {
      hx.Δⵠⵠᐃⵠ = a;
      if (hx.unlock.Δⵠⵠᐃⵠ[a] === 1) {
        ⵠⵠᐃΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.Δⵠⵠᐃⵠ, this.unlock.Δⵠⵠᐃⵠ);
    var Ga = new e(ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ, ᐃΔⵠⲆΔΔⲆᐃⲆ, function (a) {
      hx.ⲆᐃᐃⵠΔ = a;
      if (hx.unlock.ⲆᐃᐃⵠΔ[a] === 1) {
        ⵠⵠᐃΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆᐃᐃⵠΔ, this.unlock.ⲆᐃᐃⵠΔ);
    var Ha = new e(ⵠᐃᐃⵠ.ᐃⲆⲆⲆⵠ, ⵠᐃᐃᐃⲆⵠᐃⵠⵠ, function (a) {
      hx.ᐃᐃΔⲆᐃ = a;
      if (hx.unlock.ᐃᐃΔⲆᐃ[a] === 1) {
        ⵠⵠᐃΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃᐃΔⲆᐃ, this.unlock.ᐃᐃΔⲆᐃ);
    var Ia = new e(ⵠᐃᐃⵠ.ⵠΔᐃⵠΔ, ⲆᐃᐃΔⲆΔⵠⲆⵠ, function (a) {
      hx.ⵠΔⲆΔⵠ = a;
      if (hx.unlock.ⵠΔⲆΔⵠ[a] === 1) {
        ⵠⵠᐃΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔⲆΔⵠ, this.unlock.ⵠΔⲆΔⵠ);
    this.ⵠᐃᐃΔⵠⲆⲆ = function (a) {
      qx.ⲆⵠⲆⵠ = nf(u.ⵠⲆ, a);
      for (var b = 0; u.buttons.length > b; b++) {
        if (ha === u.buttons[b].info.active) {
          u.buttons[b].ΔⵠⲆᐃ(u.ⵠⲆ, qx.ⲆⵠⲆⵠ, rw);
        }
      }
    };
    this.ᐃᐃⵠᐃⵠᐃᐃ = function (a) {
      qx.ⲆⵠⲆⵠ = nf(u.ⵠⲆ, a);
      for (var b = 0; b < u.buttons.length; b++) {
        var c = u.buttons[b];
        if (c.info.active === ha && c.ΔⵠⲆᐃ(u.ⵠⲆ, qx.ⲆⵠⲆⵠ, sw)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ᐃᐃⲆⲆΔΔⲆ = cj;
    this.ᐃⲆᐃⲆΔⵠⵠ = function (a) {
      qx.ⲆⵠⲆⵠ = nf(u.ⵠⲆ, a);
      var b = Ao;
      for (var d = 0; d < u.buttons.length; d++) {
        if (ha === u.buttons[d].info.active) {
          b |= u.buttons[d].ΔⵠⲆᐃ(u.ⵠⲆ, qx.ⲆⵠⲆⵠ, qw);
        }
      }
      if (b !== u.ᐃᐃⲆⲆΔΔⲆ) {
        u.ᐃᐃⲆⲆΔΔⲆ = b;
        c.style.cursor = b ? u.ⲆⵠᐃΔⵠⵠⲆ : u.ⲆⲆᐃⵠᐃⵠⲆ;
      }
    };
    this.ΔⲆᐃⲆΔΔΔ = function () {
      Ya.addEventListener("mousedown", this.ⵠᐃᐃΔⵠⲆⲆ, hs);
      Ya.addEventListener("mouseup", this.ᐃᐃⵠᐃⵠᐃᐃ, false);
      Ya.addEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠⵠ, Cl);
    };
    this.ᐃⲆᐃᐃⲆΔᐃ = function () {
      Ya.removeEventListener("mousedown", this.ⵠᐃᐃΔⵠⲆⲆ, Ao);
      Ya.removeEventListener("mouseup", this.ᐃᐃⵠᐃⵠᐃᐃ, hh);
      Ya.removeEventListener("mousemove", this.ᐃⲆᐃⲆΔⵠⵠ, false);
    };
  }
  function Tw(a, b) {
    const c = (0 << (a >> 8 & 255)) + (8 << (a >> 0 & 255)) + (16 << (a >> 16 & 255)) + (24 << (a >> 24 & 255));
    const d = (36875 + b) % 65311;
    const e = ww(c, d);
    ww(c, d);
    return (e | 44326) & ~(e & 44326);
  }
  function Uw(b, c, d, e, f) {
    Aj(Dw, b, c, d, e, f);
    const g = Xf(of[0], of[1], of[2], of[3]);
    Vq(of[4], of[0], of[1], of[2]);
    return (g | 32280) & ~(g & 32280);
  }
  function Vw(a, b) {
    const c = (a | 47593) & ~(a & 47593);
    const d = ((b + 34888) * 1103515245 + 12345) % 2147483648;
    return (21139 + (ax(c, d, c, d, c) ^ Zf(d, c, d, c, d, c))) % 65335;
  }
  function Ww(b, c, d, e, f, g) {
    je(Dw, b, c, d, e, f, g);
    const a = ((28 + ((~(of[0] & 25305) & of[0] | ~(of[0] & 25305) & 25305) ^ of[2])) * 8121 + 28411) % 134456;
    const h = (~(a & 16951) & 16951 | ~(a & 16951) & a) ^ 33811;
    return (8 << ((h ^ of[5]) >> 16 & 255)) + (24 << ((h ^ of[5]) >> 24 & 255)) + (0 << ((h ^ of[5]) >> 8 & 255)) + (16 << ((h ^ of[5]) & 255));
  }
  (function () {
    function b() {
      this.ΔⵠΔΔⵠ();
    }
    b.prototype = {
      ΔⵠΔΔⵠ: function () {
        var a = this || j;
        a.ᐃⵠⲆΔᐃⵠᐃ = 1000;
        a.ⵠᐃⵠΔⲆΔⵠ = {};
        a.ᐃΔⲆᐃⲆ = [];
        a.ΔΔⲆⲆΔ = false;
        a.ⲆⵠᐃΔᐃ = 1;
        a.ΔⵠⵠΔᐃᐃᐃ = "canplaythrough";
        a.ᐃⵠᐃⲆΔ = typeof Ya != "undefined" && Ya.navigator ? Ya.navigator : null;
        a.ΔⵠⲆⵠⲆᐃⵠ = null;
        a.ⵠᐃᐃⲆᐃᐃⲆ = false;
        a.ΔⵠⲆⲆᐃ = true;
        a.ΔⲆΔⵠΔΔΔ = true;
        a.Δ = null;
        a.ⲆᐃᐃⲆᐃⵠⲆ = true;
        a.ⵠⲆᐃⵠᐃᐃⲆ();
        return a;
      },
      volume: function (b) {
        var c = this || j;
        b = parseFloat(b);
        if (!c.Δ) {
          i();
        }
        if (b !== undefined && b >= 0 && b <= 1) {
          c.ⲆⵠᐃΔᐃ = b;
          if (c.ΔΔⲆⲆΔ) {
            return c;
          }
          if (c.ΔⵠⲆⲆᐃ) {
            c.ΔⵠⲆⵠⲆᐃⵠ.gain.value = b;
          }
          for (var d = 0; d < c.ᐃΔⲆᐃⲆ.length; d++) {
            if (!c.ᐃΔⲆᐃⲆ[d].ᐃᐃΔΔᐃ) {
              for (var f = c.ᐃΔⲆᐃⲆ[d].ⲆΔⲆⵠᐃ(), g = 0; g < f.length; g++) {
                var h = c.ᐃΔⲆᐃⲆ[d].ⲆⲆⵠⵠᐃ(f[g]);
                if (h && h.Ⲇⵠⵠⵠ) {
                  h.Ⲇⵠⵠⵠ.volume = h.ⲆⵠᐃΔᐃ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ⲆⵠᐃΔᐃ;
      },
      ⲆⵠΔᐃᐃΔⵠ: function (b) {
        var c = this || j;
        if (!c.Δ) {
          i();
        }
        c.ΔΔⲆⲆΔ = b;
        if (c.ΔⵠⲆⲆᐃ) {
          c.ΔⵠⲆⵠⲆᐃⵠ.gain.value = b ? 0 : c.ⲆⵠᐃΔᐃ;
        }
        for (var d = 0; d < c.ᐃΔⲆᐃⲆ.length; d++) {
          if (!c.ᐃΔⲆᐃⲆ[d].ᐃᐃΔΔᐃ) {
            for (var e = c.ᐃΔⲆᐃⲆ[d].ⲆΔⲆⵠᐃ(), f = 0; f < e.length; f++) {
              var g = c.ᐃΔⲆᐃⲆ[d].ⲆⲆⵠⵠᐃ(e[f]);
              if (g && g.Ⲇⵠⵠⵠ) {
                g.Ⲇⵠⵠⵠ.muted = !!b || g.ΔΔⲆⲆΔ;
              }
            }
          }
        }
        return c;
      },
      ᐃⵠᐃⲆᐃᐃΔ: function () {
        var a = this || j;
        for (var b = a.ᐃΔⲆᐃⲆ.length - 1; b >= 0; b--) {
          a.ᐃΔⲆᐃⲆ[b].ᐃⵠᐃⲆᐃᐃΔ();
        }
        if (a.ΔⵠⲆⲆᐃ && a.Δ && a.Δ.close !== undefined) {
          a.Δ.close();
          a.Δ = null;
          i();
        }
        return a;
      },
      ⲆᐃⲆⲆΔᐃᐃᐃΔ: function (a) {
        return (this || j).ⵠᐃⵠΔⲆΔⵠ[a.replace(/^x-/, "")];
      },
      ⵠⲆᐃⵠᐃᐃⲆ: function () {
        var a = this || j;
        a.state = a.Δ && a.Δ.state || "running";
        a.ᐃΔⵠⲆΔⲆⲆ();
        if (!a.ΔⵠⲆⲆᐃ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ΔⵠⵠΔᐃᐃᐃ = "canplay";
              }
            } catch (b) {
              a.ⵠᐃᐃⲆᐃᐃⲆ = true;
            }
          } else {
            a.ⵠᐃᐃⲆᐃᐃⲆ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ⵠᐃᐃⲆᐃᐃⲆ = true;
          }
        } catch (a) {}
        if (!a.ⵠᐃᐃⲆᐃᐃⲆ) {
          a.ⲆΔⲆᐃᐃⲆᐃⵠⵠ();
        }
        return a;
      },
      ⲆΔⲆᐃᐃⲆᐃⵠⵠ: function () {
        var b = this || j;
        var c = null;
        try {
          c = typeof Audio != "undefined" ? new Audio() : null;
        } catch (a) {
          return b;
        }
        if (!c || typeof c.canPlayType != "function") {
          return b;
        }
        var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var e = b.ᐃⵠᐃⲆΔ && b.ᐃⵠᐃⲆΔ.userAgent.match(/OPR\/([0-6].)/g);
        var f = e && parseInt(e[0].split("/")[1], 10) < 33;
        b.ⵠᐃⵠΔⲆΔⵠ = {
          ᐃⵠⲆΔᐃΔⵠΔΔ: !f && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ⲆⵠⵠᐃⲆΔΔⵠⲆ: !!d,
          ΔⵠⵠᐃᐃⲆⵠⵠⵠ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ⲆΔⲆΔⲆᐃⵠⵠⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆᐃⵠΔΔⲆⲆⵠΔ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆⲆΔⲆΔⵠⵠΔΔ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ⵠᐃⲆⵠᐃⵠⵠⲆⵠ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
          ⵠⲆⲆⵠΔⵠⵠΔᐃ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ᐃⲆᐃⲆⲆⲆⵠⲆΔ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ᐃⵠᐃⲆᐃᐃΔⵠⵠ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ΔΔⵠᐃᐃⵠⵠᐃΔ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃᐃΔᐃΔᐃⲆΔⲆ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃΔΔᐃΔⵠᐃΔΔ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ΔⵠⵠⲆᐃⵠⵠⲆΔ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return b;
      },
      ⲆⲆⵠⲆⵠΔΔΔⵠ: function () {
        var b = this || j;
        var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ᐃⵠᐃⲆΔ && b.ᐃⵠᐃⲆΔ.userAgent);
        var c = !!("ontouchend" in Ya) || !!b.ᐃⵠᐃⲆΔ && b.ᐃⵠᐃⲆΔ.maxTouchPoints > 0 || !!b.ᐃⵠᐃⲆΔ && b.ᐃⵠᐃⲆΔ.ⲆⵠⲆⵠⵠⲆΔⲆᐃ > 0;
        if (!b.ΔᐃᐃⵠⵠΔΔ && b.Δ && (a || c)) {
          b.ΔᐃᐃⵠⵠΔΔ = false;
          if (!b.ⵠⲆⲆΔΔᐃⵠⲆⵠ && b.Δ.sampleRate !== 44100) {
            b.ⵠⲆⲆΔΔᐃⵠⲆⵠ = true;
            b.ᐃⵠᐃⲆᐃᐃΔ();
          }
          b.ᐃⲆΔᐃᐃⵠⵠ = b.Δ.createBuffer(1, 1, 22050);
          function c() {
            j.ⲆΔⲆΔΔΔⵠ();
            var a = b.Δ.createBufferSource();
            a.buffer = b.ᐃⲆΔᐃᐃⵠⵠ;
            a.connect(b.Δ.destination);
            if (a.start === undefined) {
              a.ᐃⵠᐃⵠⵠⲆΔⵠⵠ(0);
            } else {
              a.start(0);
            }
            if (typeof b.Δ.resume == "function") {
              b.Δ.resume();
            }
            a.onended = function () {
              a.disconnect(0);
              b.ΔᐃᐃⵠⵠΔΔ = true;
              b.ⲆᐃᐃⲆᐃⵠⲆ = false;
              document.removeEventListener("touchend", c, true);
            };
          }
          document.addEventListener("touchend", c, true);
          return b;
        }
      },
      ᐃΔⵠⲆΔⲆⲆ: function () {
        var a = this;
        if (a.ΔⲆΔⵠΔΔΔ && a.Δ && a.Δ.suspend !== undefined && j.ΔⵠⲆⲆᐃ) {
          for (var b = 0; b < a.ᐃΔⲆᐃⲆ.length; b++) {
            if (a.ᐃΔⲆᐃⲆ[b].ᐃᐃΔΔᐃ) {
              for (var c = 0; c < a.ᐃΔⲆᐃⲆ[b].ⲆΔΔᐃΔ.length; c++) {
                if (!a.ᐃΔⲆᐃⲆ[b].ⲆΔΔᐃΔ[c].ΔⲆⵠΔⲆ) {
                  return a;
                }
              }
            }
          }
          if (a.ᐃᐃⵠΔⲆⲆⲆ) {
            clearTimeout(a.ᐃᐃⵠΔⲆⲆⲆ);
          }
          a.ᐃᐃⵠΔⲆⲆⲆ = setTimeout(function () {
            if (a.ΔⲆΔⵠΔΔΔ) {
              a.ᐃᐃⵠΔⲆⲆⲆ = null;
              a.state = "suspending";
              a.Δ.suspend().then(function () {
                a.state = "suspended";
                if (a.ⵠⵠⲆᐃⲆΔⵠ) {
                  delete a.ⵠⵠⲆᐃⲆΔⵠ;
                  a.ⲆΔⲆΔΔΔⵠ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ⲆΔⲆΔΔΔⵠ: function () {
        var a = this;
        if (a.Δ && a.Δ.resume !== undefined && j.ΔⵠⲆⲆᐃ) {
          if (a.state === "running" && a.ᐃᐃⵠΔⲆⲆⲆ) {
            clearTimeout(a.ᐃᐃⵠΔⲆⲆⲆ);
            a.ᐃᐃⵠΔⲆⲆⲆ = null;
          } else if (a.state === "suspended") {
            a.Δ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ᐃΔⲆᐃⲆ.length; b++) {
                a.ᐃΔⲆᐃⲆ[b].ⵠⵠᐃΔⲆ("resume");
              }
            });
            if (a.ᐃᐃⵠΔⲆⲆⲆ) {
              clearTimeout(a.ᐃᐃⵠΔⲆⲆⲆ);
              a.ᐃᐃⵠΔⲆⲆⲆ = null;
            }
          } else if (a.state === "suspending") {
            a.ⵠⵠⲆᐃⲆΔⵠ = true;
          }
          return a;
        }
      }
    };
    var j = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ΔⵠΔΔⵠ(a);
      } else {
        console.error(Ig);
      }
    }
    c.prototype = {
      ΔⵠΔΔⵠ: function (a) {
        var b = this;
        if (!j.Δ) {
          i();
        }
        b.ⲆᐃᐃⵠᐃΔΔⵠΔ = a.autoplay || false;
        b.ΔᐃᐃⵠⵠΔᐃ = typeof a.ⲆΔᐃⲆΔⵠΔ != "string" ? a.ⲆΔᐃⲆΔⵠΔ : [a.ⲆΔᐃⲆΔⵠΔ];
        b.ᐃⵠⲆΔᐃᐃᐃ = a.ΔⲆⵠΔⲆⵠⲆᐃΔ || false;
        b.ΔΔⲆⲆΔ = a.ⲆⵠΔᐃᐃΔⵠ || false;
        b.ΔΔᐃΔᐃ = a.loop || false;
        b.ⵠⵠⵠⵠⵠⵠᐃᐃⵠ = a.ⲆΔᐃᐃⲆᐃΔⵠⵠ || 5;
        b.ⲆⵠᐃⵠᐃΔᐃⵠⵠ = typeof a.preload != "boolean" || a.preload;
        b.ⲆᐃΔⲆⲆ = a.rate || 1;
        b.ⵠⲆᐃᐃⲆ = a.ⵠΔ || {};
        b.ᐃΔᐃⲆᐃ = typeof a.src != "string" ? a.src : [a.src];
        b.ⲆⵠᐃΔᐃ = a.volume !== undefined ? a.volume : 1;
        b.ΔᐃᐃⵠⵠⲆᐃ = 0;
        b.ⲆⲆⲆⲆⵠ = "unloaded";
        b.ⲆΔΔᐃΔ = [];
        b.ⲆΔⵠⲆᐃⵠᐃ = {};
        b.ΔᐃᐃⵠΔ = [];
        b.ᐃⵠᐃⲆⵠᐃⲆⵠⲆ = a.onend ? [{
          ⵠᐃⲆΔΔ: a.onend
        }] : [];
        b.ΔⲆΔᐃᐃⵠⲆᐃᐃ = a.onfade ? [{
          ⵠᐃⲆΔΔ: a.onfade
        }] : [];
        b.ΔⲆⲆⲆΔΔⲆᐃⲆ = a.onload ? [{
          ⵠᐃⲆΔΔ: a.onload
        }] : [];
        b.ΔⲆⵠΔᐃⲆⵠⲆᐃ = a.ᐃΔⵠⵠΔΔᐃᐃᐃ ? [{
          ⵠᐃⲆΔΔ: a.ᐃΔⵠⵠΔΔᐃᐃᐃ
        }] : [];
        b.ⵠⲆΔΔⵠⵠⵠᐃⲆ = a.onpause ? [{
          ⵠᐃⲆΔΔ: a.onpause
        }] : [];
        b.ᐃᐃⲆⵠⲆΔⵠΔΔ = a.onplay ? [{
          ⵠᐃⲆΔΔ: a.onplay
        }] : [];
        b.ΔᐃΔΔᐃᐃⲆᐃⲆ = a.onstop ? [{
          ⵠᐃⲆΔΔ: a.onstop
        }] : [];
        b.ΔⵠΔⵠⵠᐃᐃⲆΔ = a.onmute ? [{
          ⵠᐃⲆΔΔ: a.onmute
        }] : [];
        b.ⵠⵠΔⲆⲆⵠⲆⲆⵠ = a.ⲆⲆⵠⵠⲆⵠΔⵠΔ ? [{
          ⵠᐃⲆΔΔ: a.ⲆⲆⵠⵠⲆⵠΔⵠΔ
        }] : [];
        b.ᐃΔⵠΔΔᐃⵠΔⲆ = a.ΔⲆᐃΔᐃᐃΔΔⵠ ? [{
          ⵠᐃⲆΔΔ: a.ΔⲆᐃΔᐃᐃΔΔⵠ
        }] : [];
        b.ⲆⵠΔΔⵠⵠᐃⵠⲆ = a.ⵠΔⲆᐃⵠΔΔᐃⵠ ? [{
          ⵠᐃⲆΔΔ: a.ⵠΔⲆᐃⵠΔΔᐃⵠ
        }] : [];
        b.ⵠⲆᐃᐃⲆΔⲆⵠᐃ = [];
        b.ᐃᐃΔΔᐃ = j.ΔⵠⲆⲆᐃ && !b.ᐃⵠⲆΔᐃᐃᐃ;
        if (j.Δ !== undefined && j.Δ && j.ⲆᐃᐃⲆᐃⵠⲆ) {
          j.ⲆⲆⵠⲆⵠΔΔΔⵠ();
        }
        j.ᐃΔⲆᐃⲆ.push(b);
        if (b.ⲆᐃᐃⵠᐃΔΔⵠΔ) {
          b.ΔᐃᐃⵠΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ⲆⵠᐃⵠᐃΔᐃⵠⵠ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var b = this;
        var c = null;
        if (!j.ⵠᐃᐃⲆᐃᐃⲆ) {
          if (typeof b.ᐃΔᐃⲆᐃ == "string") {
            b.ᐃΔᐃⲆᐃ = [b.ᐃΔᐃⲆᐃ];
          }
          for (var e = 0; e < b.ᐃΔᐃⲆᐃ.length; e++) {
            var f;
            var g;
            if (b.ΔᐃᐃⵠⵠΔᐃ && b.ΔᐃᐃⵠⵠΔᐃ[e]) {
              f = b.ΔᐃᐃⵠⵠΔᐃ[e];
            } else {
              if (typeof (g = b.ᐃΔᐃⲆᐃ[e]) != "string") {
                b.ⵠⵠᐃΔⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(f = /^data:audio\/([^;,]+);/i.exec(g))) {
                f = /\.([^.]+)$/.exec(g.split("?", 1)[0]);
              }
              f &&= f[1].toLowerCase();
            }
            if (!f) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (f && j.ⲆᐃⲆⲆΔᐃᐃᐃΔ(f)) {
              c = b.ᐃΔᐃⲆᐃ[e];
              break;
            }
          }
          if (c) {
            b.ᐃΔᐃⲆᐃ = c;
            b.ⲆⲆⲆⲆⵠ = "loading";
            if (Ya.location.protocol === "https:" && c.slice(0, 5) === "http:") {
              b.ᐃⵠⲆΔᐃᐃᐃ = true;
              b.ᐃᐃΔΔᐃ = false;
            }
            new d(b);
            if (b.ᐃᐃΔΔᐃ) {
              a(b);
            }
            return b;
          } else {
            b.ⵠⵠᐃΔⲆ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        b.ⵠⵠᐃΔⲆ("loaderror", null, "No audio support.");
      },
      play: function (c, f) {
        var i = this;
        var k = null;
        if (typeof c == "number") {
          k = c;
          c = null;
        } else {
          if (typeof c == "string" && i.ⲆⲆⲆⲆⵠ === "loaded" && !i.ⵠⲆᐃᐃⲆ[c]) {
            return null;
          }
          if (c === undefined) {
            c = "__default";
            var n = 0;
            for (var o = 0; o < i.ⲆΔΔᐃΔ.length; o++) {
              if (i.ⲆΔΔᐃΔ[o].ΔⲆⵠΔⲆ && !i.ⲆΔΔᐃΔ[o].ΔΔⵠΔⵠ) {
                n++;
                k = i.ⲆΔΔᐃΔ[o].ⲆⵠⲆᐃ;
              }
            }
            if (n === 1) {
              c = null;
            } else {
              k = null;
            }
          }
        }
        var q = k ? i.ⲆⲆⵠⵠᐃ(k) : i.ΔᐃΔᐃⲆᐃᐃΔⲆ();
        if (!q) {
          return null;
        }
        if (k && !c) {
          c = q.ⵠⲆᐃᐃⲆ || "__default";
        }
        if (i.ⲆⲆⲆⲆⵠ !== "loaded") {
          q.ⵠⲆᐃᐃⲆ = c;
          q.ΔΔⵠΔⵠ = false;
          var h = q.ⲆⵠⲆᐃ;
          i.ΔᐃᐃⵠΔ.push({
            event: "play",
            action: function () {
              i.play(h);
            }
          });
          return h;
        }
        if (k && !q.ΔⲆⵠΔⲆ) {
          if (!f) {
            setTimeout(function () {
              i.ⵠⵠᐃΔⲆ("play", q.ⲆⵠⲆᐃ);
            }, 0);
          }
          return q.ⲆⵠⲆᐃ;
        }
        if (i.ᐃᐃΔΔᐃ) {
          j.ⲆΔⲆΔΔΔⵠ();
        }
        var l = Math.max(0, q.ⵠΔΔⵠⲆ > 0 ? q.ⵠΔΔⵠⲆ : i.ⵠⲆᐃᐃⲆ[c][0] / 1000);
        var g = Math.max(0, (i.ⵠⲆᐃᐃⲆ[c][0] + i.ⵠⲆᐃᐃⲆ[c][1]) / 1000 - l);
        var b = g * 1000 / Math.abs(q.ⲆᐃΔⲆⲆ);
        q.ΔⲆⵠΔⲆ = false;
        q.ΔΔⵠΔⵠ = false;
        q.ⵠⲆᐃᐃⲆ = c;
        q.ⵠΔΔⵠⲆ = l;
        q.ⲆⵠⵠΔᐃ = i.ⵠⲆᐃᐃⲆ[c][0] / 1000;
        q.ΔⵠⲆΔⵠⵠᐃ = (i.ⵠⲆᐃᐃⲆ[c][0] + i.ⵠⲆᐃᐃⲆ[c][1]) / 1000;
        q.ΔΔᐃΔᐃ = !!q.ΔΔᐃΔᐃ || !!i.ⵠⲆᐃᐃⲆ[c][2];
        var d = q.Ⲇⵠⵠⵠ;
        if (i.ᐃᐃΔΔᐃ) {
          function a() {
            i.ΔⵠⵠⵠⵠᐃΔᐃⵠ(q);
            var a = q.ΔΔⲆⲆΔ || i.ΔΔⲆⲆΔ ? 0 : q.ⲆⵠᐃΔᐃ;
            d.gain.setValueAtTime(a, j.Δ.currentTime);
            q.ΔⵠⲆΔⵠⵠΔ = j.Δ.currentTime;
            if (d.ΔⲆΔⲆᐃ.start === undefined) {
              if (q.ΔΔᐃΔᐃ) {
                d.ΔⲆΔⲆᐃ.ᐃΔΔΔᐃᐃᐃᐃΔ(0, l, 86400);
              } else {
                d.ΔⲆΔⲆᐃ.ᐃΔΔΔᐃᐃᐃᐃΔ(0, l, g);
              }
            } else if (q.ΔΔᐃΔᐃ) {
              d.ΔⲆΔⲆᐃ.start(0, l, 86400);
            } else {
              d.ΔⲆΔⲆᐃ.start(0, l, g);
            }
            if (b !== Infinity) {
              i.ⲆΔⵠⲆᐃⵠᐃ[q.ⲆⵠⲆᐃ] = setTimeout(i.ΔΔⵠΔⵠ.bind(i, q), b);
            }
            if (!f) {
              setTimeout(function () {
                i.ⵠⵠᐃΔⲆ("play", q.ⲆⵠⲆᐃ);
              }, 0);
            }
          }
          var t = j.state === "running";
          if (i.ⲆⲆⲆⲆⵠ === "loaded" && t) {
            a();
          } else {
            var m = t || i.ⲆⲆⲆⲆⵠ !== "loaded" ? "load" : "resume";
            i.once(m, a, t ? q.ⲆⵠⲆᐃ : null);
            i.ΔⵠΔΔⵠⵠᐃ(q.ⲆⵠⲆᐃ);
          }
        } else {
          function a() {
            d.currentTime = l;
            d.muted = q.ΔΔⲆⲆΔ || i.ΔΔⲆⲆΔ || j.ΔΔⲆⲆΔ || d.muted;
            d.volume = q.ⲆⵠᐃΔᐃ * j.volume();
            d.playbackRate = q.ⲆᐃΔⲆⲆ;
            d.play();
            if (b !== Infinity) {
              i.ⲆΔⵠⲆᐃⵠᐃ[q.ⲆⵠⲆᐃ] = setTimeout(i.ΔΔⵠΔⵠ.bind(i, q), b);
            }
            if (!f) {
              i.ⵠⵠᐃΔⲆ("play", q.ⲆⵠⲆᐃ);
            }
          }
          var p = i.ⲆⲆⲆⲆⵠ === "loaded" && (Ya && Ya.ΔⵠΔⲆⵠΔᐃΔⵠ || !d.readyState && j.ᐃⵠᐃⲆΔ.ΔⵠⵠᐃⲆᐃⲆΔⵠ);
          if (d.readyState === 4 || p) {
            a();
          } else {
            function b() {
              a();
              d.removeEventListener(j.ΔⵠⵠΔᐃᐃᐃ, b, false);
            }
            d.addEventListener(j.ΔⵠⵠΔᐃᐃᐃ, b, false);
            i.ΔⵠΔΔⵠⵠᐃ(q.ⲆⵠⲆᐃ);
          }
        }
        return q.ⲆⵠⲆᐃ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆⲆⲆⲆⵠ !== "loaded") {
          b.ΔᐃᐃⵠΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ⲆΔⲆⵠᐃ(a), d = 0; d < c.length; d++) {
          b.ΔⵠΔΔⵠⵠᐃ(c[d]);
          var e = b.ⲆⲆⵠⵠᐃ(c[d]);
          if (e && !e.ΔⲆⵠΔⲆ && (e.ⵠΔΔⵠⲆ = b.ᐃᐃΔΔᐃⵠᐃ(c[d]), e.ᐃᐃⵠΔΔⵠᐃ = 0, e.ΔⲆⵠΔⲆ = true, b.ΔⲆΔⲆⲆΔᐃ(c[d]), e.Ⲇⵠⵠⵠ)) {
            if (b.ᐃᐃΔΔᐃ) {
              if (!e.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ) {
                continue;
              }
              if (e.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.stop === undefined) {
                e.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.ΔᐃΔᐃΔⵠᐃᐃᐃ(0);
              } else {
                e.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.stop(0);
              }
              b.ᐃΔⲆΔⵠΔⲆ(e.Ⲇⵠⵠⵠ);
            } else if (!isNaN(e.Ⲇⵠⵠⵠ.duration) || e.Ⲇⵠⵠⵠ.duration === Infinity) {
              e.Ⲇⵠⵠⵠ.pause();
            }
          }
          if (!arguments[1]) {
            b.ⵠⵠᐃΔⲆ("pause", e ? e.ⲆⵠⲆᐃ : null);
          }
        }
        return b;
      },
      stop: function (b, c) {
        var d = this;
        if (d.ⲆⲆⲆⲆⵠ !== "loaded") {
          d.ΔᐃᐃⵠΔ.push({
            event: "stop",
            action: function () {
              d.stop(b);
            }
          });
          return d;
        }
        for (var e = d.ⲆΔⲆⵠᐃ(b), f = 0; f < e.length; f++) {
          d.ΔⵠΔΔⵠⵠᐃ(e[f]);
          var g = d.ⲆⲆⵠⵠᐃ(e[f]);
          if (g) {
            g.ⵠΔΔⵠⲆ = g.ⲆⵠⵠΔᐃ || 0;
            g.ᐃᐃⵠΔΔⵠᐃ = 0;
            g.ΔⲆⵠΔⲆ = true;
            g.ΔΔⵠΔⵠ = true;
            d.ΔⲆΔⲆⲆΔᐃ(e[f]);
            if (g.Ⲇⵠⵠⵠ) {
              if (d.ᐃᐃΔΔᐃ) {
                if (g.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ) {
                  if (g.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.stop === undefined) {
                    g.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.ΔᐃΔᐃΔⵠᐃᐃᐃ(0);
                  } else {
                    g.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.stop(0);
                  }
                  d.ᐃΔⲆΔⵠΔⲆ(g.Ⲇⵠⵠⵠ);
                }
              } else if (!isNaN(g.Ⲇⵠⵠⵠ.duration) || g.Ⲇⵠⵠⵠ.duration === Infinity) {
                g.Ⲇⵠⵠⵠ.currentTime = g.ⲆⵠⵠΔᐃ || 0;
                g.Ⲇⵠⵠⵠ.pause();
              }
            }
            if (!c) {
              d.ⵠⵠᐃΔⲆ("stop", g.ⲆⵠⲆᐃ);
            }
          }
        }
        return d;
      },
      ⲆⵠΔᐃᐃΔⵠ: function (b, c) {
        var d = this;
        if (d.ⲆⲆⲆⲆⵠ !== "loaded") {
          d.ΔᐃᐃⵠΔ.push({
            event: "mute",
            action: function () {
              d.ⲆⵠΔᐃᐃΔⵠ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ΔΔⲆⲆΔ;
          }
          d.ΔΔⲆⲆΔ = b;
        }
        for (var e = d.ⲆΔⲆⵠᐃ(c), f = 0; f < e.length; f++) {
          var g = d.ⲆⲆⵠⵠᐃ(e[f]);
          if (g) {
            g.ΔΔⲆⲆΔ = b;
            if (d.ᐃᐃΔΔᐃ && g.Ⲇⵠⵠⵠ) {
              g.Ⲇⵠⵠⵠ.gain.setValueAtTime(b ? 0 : g.ⲆⵠᐃΔᐃ, j.Δ.currentTime);
            } else if (g.Ⲇⵠⵠⵠ) {
              g.Ⲇⵠⵠⵠ.muted = !!j.ΔΔⲆⲆΔ || b;
            }
            d.ⵠⵠᐃΔⲆ("mute", g.ⲆⵠⲆᐃ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ⲆⵠᐃΔᐃ;
        }
        if (g.length === 1 || g.length === 2 && g[1] === undefined) {
          if (f.ⲆΔⲆⵠᐃ().indexOf(g[0]) >= 0) {
            c = parseInt(g[0], 10);
          } else {
            b = parseFloat(g[0]);
          }
        } else if (g.length >= 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (b === undefined || b < 0 || b > 1) {
          if (d = c ? f.ⲆⲆⵠⵠᐃ(c) : f.ⲆΔΔᐃΔ[0]) {
            return d.ⲆⵠᐃΔᐃ;
          } else {
            return 0;
          }
        }
        if (f.ⲆⲆⲆⲆⵠ !== "loaded") {
          f.ΔᐃᐃⵠΔ.push({
            event: "volume",
            action: function () {
              f.volume.apply(f, g);
            }
          });
          return f;
        }
        if (c === undefined) {
          f.ⲆⵠᐃΔᐃ = b;
        }
        c = f.ⲆΔⲆⵠᐃ(c);
        for (var a = 0; a < c.length; a++) {
          if (d = f.ⲆⲆⵠⵠᐃ(c[a])) {
            d.ⲆⵠᐃΔᐃ = b;
            if (!g[2]) {
              f.ΔⲆΔⲆⲆΔᐃ(c[a]);
            }
            if (f.ᐃᐃΔΔᐃ && d.Ⲇⵠⵠⵠ && !d.ΔΔⲆⲆΔ) {
              d.Ⲇⵠⵠⵠ.gain.setValueAtTime(b, j.Δ.currentTime);
            } else if (d.Ⲇⵠⵠⵠ && !d.ΔΔⲆⲆΔ) {
              d.Ⲇⵠⵠⵠ.volume = b * j.volume();
            }
            f.ⵠⵠᐃΔⲆ("volume", d.ⲆⵠⲆᐃ);
          }
        }
        return f;
      },
      fade: function (f, e, i, k) {
        var o = this;
        var a = Math.abs(f - e);
        var n = f > e ? "out" : "in";
        var p = a / 0.01;
        var q = p > 0 ? i / p : i;
        if (q < 4) {
          p = Math.ceil(p / (4 / q));
          q = 4;
        }
        if (o.ⲆⲆⲆⲆⵠ !== "loaded") {
          o.ΔᐃᐃⵠΔ.push({
            event: "fade",
            action: function () {
              o.fade(f, e, i, k);
            }
          });
          return o;
        }
        o.volume(f, k);
        for (var r = o.ⲆΔⲆⵠᐃ(k), g = 0; g < r.length; g++) {
          var s = o.ⲆⲆⵠⵠᐃ(r[g]);
          if (s) {
            if (!k) {
              o.ΔⲆΔⲆⲆΔᐃ(r[g]);
            }
            if (o.ᐃᐃΔΔᐃ && !s.ΔΔⲆⲆΔ) {
              var t = j.Δ.currentTime;
              var u = t + i / 1000;
              s.ⲆⵠᐃΔᐃ = f;
              s.Ⲇⵠⵠⵠ.gain.setValueAtTime(f, t);
              s.Ⲇⵠⵠⵠ.gain.linearRampToValueAtTime(e, u);
            }
            var w = f;
            s.ΔΔⵠᐃⵠᐃⲆ = setInterval(function (a, b) {
              if (p > 0) {
                w += n === "in" ? 0.01 : -0.01;
              }
              w = Math.max(0, w);
              w = Math.min(1, w);
              w = Math.round(w * 100) / 100;
              if (o.ᐃᐃΔΔᐃ) {
                if (k === undefined) {
                  o.ⲆⵠᐃΔᐃ = w;
                }
                b.ⲆⵠᐃΔᐃ = w;
              } else {
                o.volume(w, a, true);
              }
              if (e < f && w <= e || e > f && w >= e) {
                clearInterval(b.ΔΔⵠᐃⵠᐃⲆ);
                b.ΔΔⵠᐃⵠᐃⲆ = null;
                o.volume(e, a);
                o.ⵠⵠᐃΔⲆ("fade", a);
              }
            }.bind(o, r[g], s), q);
          }
        }
        return o;
      },
      ΔⲆΔⲆⲆΔᐃ: function (a) {
        var b = this;
        var c = b.ⲆⲆⵠⵠᐃ(a);
        if (c && c.ΔΔⵠᐃⵠᐃⲆ) {
          if (b.ᐃᐃΔΔᐃ) {
            c.Ⲇⵠⵠⵠ.gain.cancelScheduledValues(j.Δ.currentTime);
          }
          clearInterval(c.ΔΔⵠᐃⵠᐃⲆ);
          c.ΔΔⵠᐃⵠᐃⲆ = null;
          b.ⵠⵠᐃΔⲆ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ΔΔᐃΔᐃ;
        }
        if (g.length === 1) {
          if (typeof g[0] != "boolean") {
            return !!(d = f.ⲆⲆⵠⵠᐃ(parseInt(g[0], 10))) && d.ΔΔᐃΔᐃ;
          }
          b = g[0];
          f.ΔΔᐃΔᐃ = b;
        } else if (g.length === 2) {
          b = g[0];
          c = parseInt(g[1], 10);
        }
        for (var h = f.ⲆΔⲆⵠᐃ(c), a = 0; a < h.length; a++) {
          if (d = f.ⲆⲆⵠⵠᐃ(h[a])) {
            d.ΔΔᐃΔᐃ = b;
            if (f.ᐃᐃΔΔᐃ && d.Ⲇⵠⵠⵠ && d.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ) {
              d.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.loop = b;
              if (b) {
                d.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.loopStart = d.ⲆⵠⵠΔᐃ || 0;
                d.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.loopEnd = d.ΔⵠⲆΔⵠⵠᐃ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          c = f.ⲆΔΔᐃΔ[0].ⲆⵠⲆᐃ;
        } else if (g.length === 1) {
          if (f.ⲆΔⲆⵠᐃ().indexOf(g[0]) >= 0) {
            c = parseInt(g[0], 10);
          } else {
            b = parseFloat(g[0]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (typeof b != "number") {
          if (d = f.ⲆⲆⵠⵠᐃ(c)) {
            return d.ⲆᐃΔⲆⲆ;
          } else {
            return f.ⲆᐃΔⲆⲆ;
          }
        }
        if (f.ⲆⲆⲆⲆⵠ !== "loaded") {
          f.ΔᐃᐃⵠΔ.push({
            event: "rate",
            action: function () {
              f.rate.apply(f, g);
            }
          });
          return f;
        }
        if (c === undefined) {
          f.ⲆᐃΔⲆⲆ = b;
        }
        c = f.ⲆΔⲆⵠᐃ(c);
        for (var a = 0; a < c.length; a++) {
          if (d = f.ⲆⲆⵠⵠᐃ(c[a])) {
            d.ᐃᐃⵠΔΔⵠᐃ = f.ᐃᐃΔΔᐃⵠᐃ(c[a]);
            d.ΔⵠⲆΔⵠⵠΔ = f.ᐃᐃΔΔᐃ ? j.Δ.currentTime : d.ΔⵠⲆΔⵠⵠΔ;
            d.ⲆᐃΔⲆⲆ = b;
            if (f.ᐃᐃΔΔᐃ && d.Ⲇⵠⵠⵠ && d.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ) {
              d.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.playbackRate.value = b;
            } else if (d.Ⲇⵠⵠⵠ) {
              d.Ⲇⵠⵠⵠ.playbackRate = b;
            }
            var k = f.ᐃᐃΔΔᐃⵠᐃ(c[a]);
            var l = ((f.ⵠⲆᐃᐃⲆ[d.ⵠⲆᐃᐃⲆ][0] + f.ⵠⲆᐃᐃⲆ[d.ⵠⲆᐃᐃⲆ][1]) / 1000 - k) * 1000 / Math.abs(d.ⲆᐃΔⲆⲆ);
            if (!!f.ⲆΔⵠⲆᐃⵠᐃ[c[a]] || !d.ΔⲆⵠΔⲆ) {
              f.ΔⵠΔΔⵠⵠᐃ(c[a]);
              f.ⲆΔⵠⲆᐃⵠᐃ[c[a]] = setTimeout(f.ΔΔⵠΔⵠ.bind(f, d), l);
            }
            f.ⵠⵠᐃΔⲆ("rate", d.ⲆⵠⲆᐃ);
          }
        }
        return f;
      },
      ᐃᐃΔΔᐃⵠᐃ: function () {
        var b;
        var c;
        var d = this;
        var f = arguments;
        if (f.length === 0) {
          c = d.ⲆΔΔᐃΔ[0].ⲆⵠⲆᐃ;
        } else if (f.length === 1) {
          if (d.ⲆΔⲆⵠᐃ().indexOf(f[0]) >= 0) {
            c = parseInt(f[0], 10);
          } else {
            c = d.ⲆΔΔᐃΔ[0].ⲆⵠⲆᐃ;
            b = parseFloat(f[0]);
          }
        } else if (f.length === 2) {
          b = parseFloat(f[0]);
          c = parseInt(f[1], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆⲆⲆⲆⵠ !== "loaded") {
          d.ΔᐃᐃⵠΔ.push({
            event: "seek",
            action: function () {
              d.ᐃᐃΔΔᐃⵠᐃ.apply(d, f);
            }
          });
          return d;
        }
        var g = d.ⲆⲆⵠⵠᐃ(c);
        if (g) {
          if (typeof b != "number" || b < 0) {
            if (d.ᐃᐃΔΔᐃ) {
              var a = d.ᐃⵠᐃᐃΔⲆΔ(c) ? j.Δ.currentTime - g.ΔⵠⲆΔⵠⵠΔ : 0;
              var k = g.ᐃᐃⵠΔΔⵠᐃ ? g.ᐃᐃⵠΔΔⵠᐃ - g.ⵠΔΔⵠⲆ : 0;
              return g.ⵠΔΔⵠⲆ + (k + a * Math.abs(g.ⲆᐃΔⲆⲆ));
            }
            return g.Ⲇⵠⵠⵠ.currentTime;
          }
          var l = d.ᐃⵠᐃᐃΔⲆΔ(c);
          if (l) {
            d.pause(c, true);
          }
          g.ⵠΔΔⵠⲆ = b;
          g.ΔΔⵠΔⵠ = false;
          d.ΔⵠΔΔⵠⵠᐃ(c);
          if (l) {
            d.play(c, true);
          }
          if (!d.ᐃᐃΔΔᐃ && g.Ⲇⵠⵠⵠ) {
            g.Ⲇⵠⵠⵠ.currentTime = b;
          }
          d.ⵠⵠᐃΔⲆ("seek", c);
        }
        return d;
      },
      ᐃⵠᐃᐃΔⲆΔ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ⲆⲆⵠⵠᐃ(a);
          return !!c && !c.ΔⲆⵠΔⲆ;
        }
        for (var d = 0; d < b.ⲆΔΔᐃΔ.length; d++) {
          if (!b.ⲆΔΔᐃΔ[d].ΔⲆⵠΔⲆ) {
            return true;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ΔᐃᐃⵠⵠⲆᐃ;
        var d = b.ⲆⲆⵠⵠᐃ(a);
        if (d) {
          c = b.ⵠⲆᐃᐃⲆ[d.ⵠⲆᐃᐃⲆ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆⲆⲆⲆⵠ;
      },
      ᐃⵠᐃⲆᐃᐃΔ: function () {
        var a = this;
        for (var b = a.ⲆΔΔᐃΔ, c = 0; c < b.length; c++) {
          if (!b[c].ΔⲆⵠΔⲆ) {
            a.stop(b[c].ⲆⵠⲆᐃ);
          }
          if (!a.ᐃᐃΔΔᐃ) {
            if (!/MSIE |Trident\//.test(j.ᐃⵠᐃⲆΔ && j.ᐃⵠᐃⲆΔ.userAgent)) {
              b[c].Ⲇⵠⵠⵠ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            b[c].Ⲇⵠⵠⵠ.removeEventListener("error", b[c].ⵠⲆΔᐃΔⵠⵠ, false);
            b[c].Ⲇⵠⵠⵠ.removeEventListener(j.ΔⵠⵠΔᐃᐃᐃ, b[c].ⵠΔΔⵠⲆᐃΔ, false);
          }
          delete b[c].Ⲇⵠⵠⵠ;
          a.ΔⵠΔΔⵠⵠᐃ(b[c].ⲆⵠⲆᐃ);
          var d = j.ᐃΔⲆᐃⲆ.indexOf(a);
          if (d >= 0) {
            j.ᐃΔⲆᐃⲆ.splice(d, 1);
          }
        }
        var g = true;
        for (c = 0; c < j.ᐃΔⲆᐃⲆ.length; c++) {
          if (j.ᐃΔⲆᐃⲆ[c].ᐃΔᐃⲆᐃ === a.ᐃΔᐃⲆᐃ) {
            g = false;
            break;
          }
        }
        if (f && g) {
          delete f[a.ᐃΔᐃⲆᐃ];
        }
        j.ⵠᐃᐃⲆᐃᐃⲆ = false;
        a.ⲆⲆⲆⲆⵠ = "unloaded";
        a.ⲆΔΔᐃΔ = [];
        a = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⵠᐃⲆΔΔ: b,
            once: d
          } : {
            id: c,
            ⵠᐃⲆΔΔ: b
          });
        }
        return this;
      },
      ⲆᐃΔⵠⵠⲆΔΔᐃ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = 0;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = 0; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⵠᐃⲆΔΔ && h || !c && h) {
              f.splice(g, 1);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = 0; g < j.length; g++) {
            if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ⵠⵠᐃΔⲆ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        for (var g = f.length - 1; g >= 0; g--) {
          if (!f[g].id || f[g].id === c || b === "load") {
            setTimeout(function (a) {
              a.call(this, c, d);
            }.bind(e, f[g].ⵠᐃⲆΔΔ), 0);
            if (f[g].once) {
              e.ⲆᐃΔⵠⵠⲆΔΔᐃ(b, f[g].ⵠᐃⲆΔΔ, f[g].id);
            }
          }
        }
        return e;
      },
      ⵠⲆᐃⵠⲆΔᐃ: function () {
        var a = this;
        if (a.ΔᐃᐃⵠΔ.length > 0) {
          var b = a.ΔᐃᐃⵠΔ[0];
          a.once(b.event, function () {
            a.ΔᐃᐃⵠΔ.shift();
            a.ⵠⲆᐃⵠⲆΔᐃ();
          });
          b.action();
        }
        return a;
      },
      ΔΔⵠΔⵠ: function (b) {
        var c = this;
        var d = b.ⵠⲆᐃᐃⲆ;
        if (!c.ᐃᐃΔΔᐃ && c.Ⲇⵠⵠⵠ && !c.Ⲇⵠⵠⵠ.ended) {
          setTimeout(c.ΔΔⵠΔⵠ.bind(c, b), 100);
          return c;
        }
        var e = !!b.ΔΔᐃΔᐃ || !!c.ⵠⲆᐃᐃⲆ[d][2];
        c.ⵠⵠᐃΔⲆ("end", b.ⲆⵠⲆᐃ);
        if (!c.ᐃᐃΔΔᐃ && e) {
          c.stop(b.ⲆⵠⲆᐃ, true).play(b.ⲆⵠⲆᐃ);
        }
        if (c.ᐃᐃΔΔᐃ && e) {
          c.ⵠⵠᐃΔⲆ("play", b.ⲆⵠⲆᐃ);
          b.ⵠΔΔⵠⲆ = b.ⲆⵠⵠΔᐃ || 0;
          b.ᐃᐃⵠΔΔⵠᐃ = 0;
          b.ΔⵠⲆΔⵠⵠΔ = j.Δ.currentTime;
          var f = (b.ΔⵠⲆΔⵠⵠᐃ - b.ⲆⵠⵠΔᐃ) * 1000 / Math.abs(b.ⲆᐃΔⲆⲆ);
          c.ⲆΔⵠⲆᐃⵠᐃ[b.ⲆⵠⲆᐃ] = setTimeout(c.ΔΔⵠΔⵠ.bind(c, b), f);
        }
        if (c.ᐃᐃΔΔᐃ && !e) {
          b.ΔⲆⵠΔⲆ = true;
          b.ΔΔⵠΔⵠ = true;
          b.ⵠΔΔⵠⲆ = b.ⲆⵠⵠΔᐃ || 0;
          b.ᐃᐃⵠΔΔⵠᐃ = 0;
          c.ΔⵠΔΔⵠⵠᐃ(b.ⲆⵠⲆᐃ);
          c.ᐃΔⲆΔⵠΔⲆ(b.Ⲇⵠⵠⵠ);
          j.ᐃΔⵠⲆΔⲆⲆ();
        }
        if (!c.ᐃᐃΔΔᐃ && !e) {
          c.stop(b.ⲆⵠⲆᐃ);
        }
        return c;
      },
      ΔⵠΔΔⵠⵠᐃ: function (a) {
        var b = this;
        if (b.ⲆΔⵠⲆᐃⵠᐃ[a]) {
          clearTimeout(b.ⲆΔⵠⲆᐃⵠᐃ[a]);
          delete b.ⲆΔⵠⲆᐃⵠᐃ[a];
        }
        return b;
      },
      ⲆⲆⵠⵠᐃ: function (a) {
        for (var b = this, c = 0; c < b.ⲆΔΔᐃΔ.length; c++) {
          if (a === b.ⲆΔΔᐃΔ[c].ⲆⵠⲆᐃ) {
            return b.ⲆΔΔᐃΔ[c];
          }
        }
        return null;
      },
      ΔᐃΔᐃⲆᐃᐃΔⲆ: function () {
        var a = this;
        a.ⲆⵠⵠⲆⲆⲆᐃᐃⲆ();
        for (var b = 0; b < a.ⲆΔΔᐃΔ.length; b++) {
          if (a.ⲆΔΔᐃΔ[b].ΔΔⵠΔⵠ) {
            return a.ⲆΔΔᐃΔ[b].reset();
          }
        }
        return new d(a);
      },
      ⲆⵠⵠⲆⲆⲆᐃᐃⲆ: function () {
        var a = this;
        var b = a.ⵠⵠⵠⵠⵠⵠᐃᐃⵠ;
        var c = 0;
        var d = 0;
        if (a.ⲆΔΔᐃΔ.length >= b) {
          for (d = 0; d < a.ⲆΔΔᐃΔ.length; d++) {
            if (a.ⲆΔΔᐃΔ[d].ΔΔⵠΔⵠ) {
              c++;
            }
          }
          for (d = a.ⲆΔΔᐃΔ.length - 1; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.ⲆΔΔᐃΔ[d].ΔΔⵠΔⵠ) {
              if (a.ᐃᐃΔΔᐃ && a.ⲆΔΔᐃΔ[d].Ⲇⵠⵠⵠ) {
                a.ⲆΔΔᐃΔ[d].Ⲇⵠⵠⵠ.disconnect(0);
              }
              a.ⲆΔΔᐃΔ.splice(d, 1);
              c--;
            }
          }
        }
      },
      ⲆΔⲆⵠᐃ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = 0; c < this.ⲆΔΔᐃΔ.length; c++) {
            b.push(this.ⲆΔΔᐃΔ[c].ⲆⵠⲆᐃ);
          }
          return b;
        }
        return [a];
      },
      ΔⵠⵠⵠⵠᐃΔᐃⵠ: function (a) {
        a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ = j.Δ.createBufferSource();
        a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.buffer = f[this.ᐃΔᐃⲆᐃ];
        if (a.ΔΔΔΔⲆ) {
          a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.connect(a.ΔΔΔΔⲆ);
        } else {
          a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.connect(a.Ⲇⵠⵠⵠ);
        }
        a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.loop = a.ΔΔᐃΔᐃ;
        if (a.ΔΔᐃΔᐃ) {
          a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.loopStart = a.ⲆⵠⵠΔᐃ || 0;
          a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.loopEnd = a.ΔⵠⲆΔⵠⵠᐃ;
        }
        a.Ⲇⵠⵠⵠ.ΔⲆΔⲆᐃ.playbackRate.value = a.ⲆᐃΔⲆⲆ;
        return this;
      },
      ᐃΔⲆΔⵠΔⲆ: function (a) {
        var b = this;
        if (b.ᐃⲆΔᐃᐃⵠⵠ) {
          a.ΔⲆΔⲆᐃ.onended = null;
          a.ΔⲆΔⲆᐃ.disconnect(0);
          try {
            a.ΔⲆΔⲆᐃ.buffer = b.ᐃⲆΔᐃᐃⵠⵠ;
          } catch (a) {}
        }
        a.ΔⲆΔⲆᐃ = null;
        return b;
      }
    };
    function d(a) {
      this.ΔⲆⵠⲆⲆᐃΔ = a;
      this.ΔⵠΔΔⵠ();
    }
    d.prototype = {
      ΔⵠΔΔⵠ: function () {
        var a = this;
        var b = a.ΔⲆⵠⲆⲆᐃΔ;
        a.ΔΔⲆⲆΔ = b.ΔΔⲆⲆΔ;
        a.ΔΔᐃΔᐃ = b.ΔΔᐃΔᐃ;
        a.ⲆⵠᐃΔᐃ = b.ⲆⵠᐃΔᐃ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ⵠΔΔⵠⲆ = 0;
        a.ΔⲆⵠΔⲆ = true;
        a.ΔΔⵠΔⵠ = true;
        a.ⵠⲆᐃᐃⲆ = "__default";
        a.ⲆⵠⲆᐃ = ++j.ᐃⵠⲆΔᐃⵠᐃ;
        b.ⲆΔΔᐃΔ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ΔⲆⵠⲆⲆᐃΔ;
        var c = j.ΔΔⲆⲆΔ || a.ΔΔⲆⲆΔ || a.ΔⲆⵠⲆⲆᐃΔ.ΔΔⲆⲆΔ ? 0 : a.ⲆⵠᐃΔᐃ;
        if (b.ᐃᐃΔΔᐃ) {
          a.Ⲇⵠⵠⵠ = j.Δ.createGain === undefined ? j.Δ.ΔΔⲆᐃᐃΔⲆᐃⲆ() : j.Δ.createGain();
          a.Ⲇⵠⵠⵠ.gain.setValueAtTime(c, j.Δ.currentTime);
          a.Ⲇⵠⵠⵠ.paused = true;
          a.Ⲇⵠⵠⵠ.connect(j.ΔⵠⲆⵠⲆᐃⵠ);
        } else {
          a.Ⲇⵠⵠⵠ = new Audio();
          a.ⵠⲆΔᐃΔⵠⵠ = a.ᐃᐃⵠⵠΔΔⵠⵠⵠ.bind(a);
          a.Ⲇⵠⵠⵠ.addEventListener("error", a.ⵠⲆΔᐃΔⵠⵠ, false);
          a.ⵠΔΔⵠⲆᐃΔ = a.ΔⵠⲆᐃⵠⲆΔᐃⵠ.bind(a);
          a.Ⲇⵠⵠⵠ.addEventListener(j.ΔⵠⵠΔᐃᐃᐃ, a.ⵠΔΔⵠⲆᐃΔ, false);
          a.Ⲇⵠⵠⵠ.src = b.ᐃΔᐃⲆᐃ;
          a.Ⲇⵠⵠⵠ.preload = "auto";
          a.Ⲇⵠⵠⵠ.volume = c * j.volume();
          a.Ⲇⵠⵠⵠ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ΔⲆⵠⲆⲆᐃΔ;
        a.ΔΔⲆⲆΔ = b.ΔΔⲆⲆΔ;
        a.ΔΔᐃΔᐃ = b.ΔΔᐃΔᐃ;
        a.ⲆⵠᐃΔᐃ = b.ⲆⵠᐃΔᐃ;
        a.ⲆᐃΔⲆⲆ = b.ⲆᐃΔⲆⲆ;
        a.ⵠΔΔⵠⲆ = 0;
        a.ᐃᐃⵠΔΔⵠᐃ = 0;
        a.ΔⲆⵠΔⲆ = true;
        a.ΔΔⵠΔⵠ = true;
        a.ⵠⲆᐃᐃⲆ = "__default";
        a.ⲆⵠⲆᐃ = ++j.ᐃⵠⲆΔᐃⵠᐃ;
        return a;
      },
      ᐃᐃⵠⵠΔΔⵠⵠⵠ: function () {
        var a = this;
        a.ΔⲆⵠⲆⲆᐃΔ.ⵠⵠᐃΔⲆ("loaderror", a.ⲆⵠⲆᐃ, a.Ⲇⵠⵠⵠ.error ? a.Ⲇⵠⵠⵠ.error.code : 0);
        a.Ⲇⵠⵠⵠ.removeEventListener("error", a.ⵠⲆΔᐃΔⵠⵠ, false);
      },
      ΔⵠⲆᐃⵠⲆΔᐃⵠ: function () {
        var a = this;
        var b = a.ΔⲆⵠⲆⲆᐃΔ;
        b.ΔᐃᐃⵠⵠⲆᐃ = Math.ceil(a.Ⲇⵠⵠⵠ.duration * 10) / 10;
        if (Object.keys(b.ⵠⲆᐃᐃⲆ).length === 0) {
          b.ⵠⲆᐃᐃⲆ = {
            ᐃⲆⲆⵠⲆΔⵠⲆΔ: [0, b.ΔᐃᐃⵠⵠⲆᐃ * 1000]
          };
        }
        if (b.ⲆⲆⲆⲆⵠ !== "loaded") {
          b.ⲆⲆⲆⲆⵠ = "loaded";
          b.ⵠⵠᐃΔⲆ("load");
          b.ⵠⲆᐃⵠⲆΔᐃ();
        }
        a.Ⲇⵠⵠⵠ.removeEventListener(j.ΔⵠⵠΔᐃᐃᐃ, a.ⵠΔΔⵠⲆᐃΔ, false);
      }
    };
    var f = {};
    function a(a) {
      var b = a.ᐃΔᐃⲆᐃ;
      if (f[b]) {
        a.ΔᐃᐃⵠⵠⲆᐃ = f[b].duration;
        h(a);
        return;
      }
      if (/^data:[^;]+;base64,/.test(b)) {
        for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
          d[e] = c.charCodeAt(e);
        }
        m(d.buffer, a);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", b, true);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var b = (g.status + "")[0];
          if (b === "0" || b === "2" || b === "3") {
            m(g.response, a);
          } else {
            a.ⵠⵠᐃΔⲆ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (a.ᐃᐃΔΔᐃ) {
            a.ᐃⵠⲆΔᐃᐃᐃ = true;
            a.ᐃᐃΔΔᐃ = false;
            a.ⲆΔΔᐃΔ = [];
            delete f[b];
            a.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(a, b) {
      j.Δ.decodeAudioData(a, function (a) {
        if (a && b.ⲆΔΔᐃΔ.length > 0) {
          f[b.ᐃΔᐃⲆᐃ] = a;
          h(b, a);
        }
      }, function () {
        b.ⵠⵠᐃΔⲆ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function h(a, b) {
      if (b && !a.ΔᐃᐃⵠⵠⲆᐃ) {
        a.ΔᐃᐃⵠⵠⲆᐃ = b.duration;
      }
      if (Object.keys(a.ⵠⲆᐃᐃⲆ).length === 0) {
        a.ⵠⲆᐃᐃⲆ = {
          ᐃⲆⲆⵠⲆΔⵠⲆΔ: [0, a.ΔᐃᐃⵠⵠⲆᐃ * 1000]
        };
      }
      if (a.ⲆⲆⲆⲆⵠ !== "loaded") {
        a.ⲆⲆⲆⲆⵠ = "loaded";
        a.ⵠⵠᐃΔⲆ("load");
        a.ⵠⲆᐃⵠⲆΔᐃ();
      }
    }
    function i() {
      try {
        if (typeof AudioContext != "undefined") {
          j.Δ = new AudioContext();
        } else if (typeof ΔⲆⲆⲆⵠⲆᐃᐃⲆ != "undefined") {
          j.Δ = new ΔⲆⲆⲆⵠⲆᐃᐃⲆ();
        } else {
          j.ΔⵠⲆⲆᐃ = false;
        }
      } catch (a) {
        j.ΔⵠⲆⲆᐃ = false;
      }
      var a = /iP(hone|od|ad)/.test(j.ᐃⵠᐃⲆΔ && j.ᐃⵠᐃⲆΔ.platform);
      var b = j.ᐃⵠᐃⲆΔ && j.ᐃⵠᐃⲆΔ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[1], 10) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(j.ᐃⵠᐃⲆΔ && j.ᐃⵠᐃⲆΔ.userAgent.toLowerCase());
        if (j.ᐃⵠᐃⲆΔ && j.ᐃⵠᐃⲆΔ.ΔⵠᐃΔⲆΔⵠΔᐃ && !d || j.ᐃⵠᐃⲆΔ && !j.ᐃⵠᐃⲆΔ.ΔⵠᐃΔⲆΔⵠΔᐃ && !d) {
          j.ΔⵠⲆⲆᐃ = false;
        }
      }
      if (j.ΔⵠⲆⲆᐃ) {
        j.ΔⵠⲆⵠⲆᐃⵠ = j.Δ.createGain === undefined ? j.Δ.ΔΔⲆᐃᐃΔⲆᐃⲆ() : j.Δ.createGain();
        j.ΔⵠⲆⵠⲆᐃⵠ.gain.value = j.ΔΔⲆⲆΔ ? 0 : 1;
        j.ΔⵠⲆⵠⲆᐃⵠ.connect(j.Δ.destination);
      }
      j.ⵠⲆᐃⵠᐃᐃⲆ();
    }
    if (typeof ⲆⲆⲆᐃⲆⵠΔ == "function" && ⲆⲆⲆᐃⲆⵠΔ.ⵠⲆᐃᐃᐃᐃⵠ) {
      ⲆⲆⲆᐃⲆⵠΔ([], function () {
        return {
          Howler: j,
          Howl: c
        };
      });
    }
    if (typeof ΔΔⵠᐃⵠⲆΔ != "undefined") {
      ΔΔⵠᐃⵠⲆΔ.Howler = j;
      ΔΔⵠᐃⵠⲆΔ.Howl = c;
    }
    if (typeof Ya != "undefined") {
      Ya.Ⲇⵠⵠⵠⵠᐃⵠ = b;
      Ya.Howler = j;
      Ya.Howl = c;
      Ya.ⵠᐃᐃᐃΔᐃΔ = d;
    } else if (typeof ⵠΔΔⲆΔⵠᐃ != "undefined") {
      ⵠΔΔⲆΔⵠᐃ.Ⲇⵠⵠⵠⵠᐃⵠ = b;
      ⵠΔΔⲆΔⵠᐃ.Howler = j;
      ⵠΔΔⲆΔⵠᐃ.Howl = c;
      ⵠΔΔⲆΔⵠᐃ.ⵠᐃᐃᐃΔᐃΔ = d;
    }
  })();
  (function () {
    Ⲇⵠⵠⵠⵠᐃⵠ.prototype.ⵠⵠΔᐃⵠ = [0, 0, 0];
    Ⲇⵠⵠⵠⵠᐃⵠ.prototype.ⵠᐃᐃⲆᐃ = [0, 0, -1, 0, 1, 0];
    Ⲇⵠⵠⵠⵠᐃⵠ.prototype.ᐃⵠᐃᐃⲆⵠᐃ = function (a) {
      var b = this;
      if (!b.Δ || !b.Δ.listener) {
        return b;
      }
      for (var c = b.ᐃΔⲆᐃⲆ.length - 1; c >= 0; c--) {
        b.ᐃΔⲆᐃⲆ[c].ᐃⵠᐃᐃⲆⵠᐃ(a);
      }
      return b;
    };
    Ⲇⵠⵠⵠⵠᐃⵠ.prototype.ⲆⵠⲆⵠ = function (a, b, c) {
      var d = this;
      if (d.Δ && d.Δ.listener) {
        b = typeof b != "number" ? d.ⵠⵠΔᐃⵠ[1] : b;
        c = typeof c != "number" ? d.ⵠⵠΔᐃⵠ[2] : c;
        if (typeof a != "number") {
          return d.ⵠⵠΔᐃⵠ;
        } else {
          d.ⵠⵠΔᐃⵠ = [a, b, c];
          d.Δ.listener.setPosition(d.ⵠⵠΔᐃⵠ[0], d.ⵠⵠΔᐃⵠ[1], d.ⵠⵠΔᐃⵠ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    Ⲇⵠⵠⵠⵠᐃⵠ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.Δ || !h.Δ.listener) {
        return h;
      }
      var j = h.ⵠᐃᐃⲆᐃ;
      c = typeof c != "number" ? j[1] : c;
      d = typeof d != "number" ? j[2] : d;
      e = typeof e != "number" ? j[3] : e;
      f = typeof f != "number" ? j[4] : f;
      g = typeof g != "number" ? j[5] : g;
      if (typeof b != "number") {
        return j;
      } else {
        h.ⵠᐃᐃⲆᐃ = [b, c, d, e, f, g];
        h.Δ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ΔⵠΔΔⵠ = function (a) {
      return function (b) {
        var c = this;
        c.ⵠᐃᐃⲆᐃ = b.orientation || [1, 0, 0];
        c.ⲆⲆΔⲆᐃⵠᐃ = b.ᐃⵠᐃᐃⲆⵠᐃ || null;
        c.ⵠⵠΔᐃⵠ = b.ⲆⵠⲆⵠ || null;
        c.ⵠⵠᐃⵠⵠ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
        };
        c.ΔⲆⵠΔⲆⲆᐃⵠⲆ = b.ⲆⲆᐃΔᐃⵠⵠᐃᐃ ? [{
          ⵠᐃⲆΔΔ: b.ⲆⲆᐃΔᐃⵠⵠᐃᐃ
        }] : [];
        c.ⲆᐃΔΔⲆΔᐃⲆᐃ = b.ᐃⵠΔⲆⵠⵠΔⲆⲆ ? [{
          ⵠᐃⲆΔΔ: b.ᐃⵠΔⲆⵠⵠΔⲆⲆ
        }] : [];
        c.ⲆᐃᐃⵠⵠⲆᐃⲆΔ = b.ⲆⲆᐃⵠⵠⲆΔᐃⵠ ? [{
          ⵠᐃⲆΔΔ: b.ⲆⲆᐃⵠⵠⲆΔᐃⵠ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ΔⵠΔΔⵠ);
    Howl.prototype.ᐃⵠᐃᐃⲆⵠᐃ = function (c, d) {
      var e = this;
      if (!e.ᐃᐃΔΔᐃ) {
        return e;
      }
      if (e.ⲆⲆⲆⲆⵠ !== "loaded") {
        e.ΔᐃᐃⵠΔ.push({
          event: "stereo",
          action: function () {
            e.ᐃⵠᐃᐃⲆⵠᐃ(c, d);
          }
        });
        return e;
      }
      var f = Howler.Δ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (d === undefined) {
        if (typeof c != "number") {
          return e.ⲆⲆΔⲆᐃⵠᐃ;
        }
        e.ⲆⲆΔⲆᐃⵠᐃ = c;
        e.ⵠⵠΔᐃⵠ = [c, 0, 0];
      }
      for (var g = e.ⲆΔⲆⵠᐃ(d), a = 0; a < g.length; a++) {
        var h = e.ⲆⲆⵠⵠᐃ(g[a]);
        if (h) {
          if (typeof c != "number") {
            return h.ⲆⲆΔⲆᐃⵠᐃ;
          }
          h.ⲆⲆΔⲆᐃⵠᐃ = c;
          h.ⵠⵠΔᐃⵠ = [c, 0, 0];
          if (h.Ⲇⵠⵠⵠ) {
            h.ⵠⵠᐃⵠⵠ.panningModel = "equalpower";
            if (!h.ΔΔΔΔⲆ || !h.ΔΔΔΔⲆ.pan) {
              b(h, f);
            }
            if (f === "spatial") {
              h.ΔΔΔΔⲆ.setPosition(c, 0, 0);
            } else {
              h.ΔΔΔΔⲆ.pan.value = c;
            }
          }
          e.ⵠⵠᐃΔⲆ("stereo", h.ⲆⵠⲆᐃ);
        }
      }
      return e;
    };
    Howl.prototype.ⲆⵠⲆⵠ = function (c, d, e, f) {
      var g = this;
      if (!g.ᐃᐃΔΔᐃ) {
        return g;
      }
      if (g.ⲆⲆⲆⲆⵠ !== "loaded") {
        g.ΔᐃᐃⵠΔ.push({
          event: "pos",
          action: function () {
            g.ⲆⵠⲆⵠ(c, d, e, f);
          }
        });
        return g;
      }
      d = typeof d != "number" ? 0 : d;
      e = typeof e != "number" ? -0.5 : e;
      if (f === undefined) {
        if (typeof c != "number") {
          return g.ⵠⵠΔᐃⵠ;
        }
        g.ⵠⵠΔᐃⵠ = [c, d, e];
      }
      for (var a = g.ⲆΔⲆⵠᐃ(f), i = 0; i < a.length; i++) {
        var j = g.ⲆⲆⵠⵠᐃ(a[i]);
        if (j) {
          if (typeof c != "number") {
            return j.ⵠⵠΔᐃⵠ;
          }
          j.ⵠⵠΔᐃⵠ = [c, d, e];
          if (j.Ⲇⵠⵠⵠ) {
            if (!j.ΔΔΔΔⲆ || !!j.ΔΔΔΔⲆ.pan) {
              b(j, "spatial");
            }
            j.ΔΔΔΔⲆ.setPosition(c, d, e);
          }
          g.ⵠⵠᐃΔⲆ("pos", j.ⲆⵠⲆᐃ);
        }
      }
      return g;
    };
    Howl.prototype.orientation = function (c, d, e, f) {
      var g = this;
      if (!g.ᐃᐃΔΔᐃ) {
        return g;
      }
      if (g.ⲆⲆⲆⲆⵠ !== "loaded") {
        g.ΔᐃᐃⵠΔ.push({
          event: "orientation",
          action: function () {
            g.orientation(c, d, e, f);
          }
        });
        return g;
      }
      d = typeof d != "number" ? g.ⵠᐃᐃⲆᐃ[1] : d;
      e = typeof e != "number" ? g.ⵠᐃᐃⲆᐃ[2] : e;
      if (f === undefined) {
        if (typeof c != "number") {
          return g.ⵠᐃᐃⲆᐃ;
        }
        g.ⵠᐃᐃⲆᐃ = [c, d, e];
      }
      for (var a = g.ⲆΔⲆⵠᐃ(f), i = 0; i < a.length; i++) {
        var j = g.ⲆⲆⵠⵠᐃ(a[i]);
        if (j) {
          if (typeof c != "number") {
            return j.ⵠᐃᐃⲆᐃ;
          }
          j.ⵠᐃᐃⲆᐃ = [c, d, e];
          if (j.Ⲇⵠⵠⵠ) {
            if (!j.ΔΔΔΔⲆ) {
              j.ⵠⵠΔᐃⵠ ||= g.ⵠⵠΔᐃⵠ || [0, 0, -0.5];
              b(j, "spatial");
            }
            j.ΔΔΔΔⲆ.setOrientation(c, d, e);
          }
          g.ⵠⵠᐃΔⲆ("orientation", j.ⲆⵠⲆᐃ);
        }
      }
      return g;
    };
    Howl.prototype.ⵠⵠⵠᐃⵠᐃΔⵠⵠ = function () {
      var c;
      var d;
      var e;
      var f = this;
      var g = arguments;
      if (!f.ᐃᐃΔΔᐃ) {
        return f;
      }
      if (g.length === 0) {
        return f.ⵠⵠᐃⵠⵠ;
      }
      if (g.length === 1) {
        if (typeof g[0] != "object") {
          if (e = f.ⲆⲆⵠⵠᐃ(parseInt(g[0], 10))) {
            return e.ⵠⵠᐃⵠⵠ;
          } else {
            return f.ⵠⵠᐃⵠⵠ;
          }
        }
        c = g[0];
        if (d === undefined) {
          f.ⵠⵠᐃⵠⵠ = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ΔⵠⲆⵠⵠⵠΔⵠᐃ,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ⵠᐃᐃᐃᐃᐃΔΔⵠ,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⵠᐃⲆΔⵠⲆⵠΔⵠ,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ⵠΔⵠΔⲆⵠⵠΔⲆ,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⲆⵠⲆΔᐃⵠᐃΔᐃ,
            panningModel: c.panningModel !== undefined ? c.panningModel : f.ΔΔΔΔⲆΔⵠΔⲆ,
            refDistance: c.refDistance !== undefined ? c.refDistance : f.ᐃⵠⵠᐃΔⲆΔᐃᐃ,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ΔΔⲆΔⵠᐃΔΔⵠ
          };
        }
      } else if (g.length === 2) {
        c = g[0];
        d = parseInt(g[1], 10);
      }
      for (var a = f.ⲆΔⲆⵠᐃ(d), j = 0; j < a.length; j++) {
        if (e = f.ⲆⲆⵠⵠᐃ(a[j])) {
          var k = e.ⵠⵠᐃⵠⵠ;
          k = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
            panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
            refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
          };
          var m = e.ΔΔΔΔⲆ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            e.ⵠⵠΔᐃⵠ ||= f.ⵠⵠΔᐃⵠ || [0, 0, -0.5];
            b(e, "spatial");
          }
        }
      }
      return f;
    };
    ⵠᐃᐃᐃΔᐃΔ.prototype.ΔⵠΔΔⵠ = function (a) {
      return function () {
        var b = this;
        var c = b.ΔⲆⵠⲆⲆᐃΔ;
        b.ⵠᐃᐃⲆᐃ = c.ⵠᐃᐃⲆᐃ;
        b.ⲆⲆΔⲆᐃⵠᐃ = c.ⲆⲆΔⲆᐃⵠᐃ;
        b.ⵠⵠΔᐃⵠ = c.ⵠⵠΔᐃⵠ;
        b.ⵠⵠᐃⵠⵠ = c.ⵠⵠᐃⵠⵠ;
        a.call(this);
        if (b.ⲆⲆΔⲆᐃⵠᐃ) {
          c.ᐃⵠᐃᐃⲆⵠᐃ(b.ⲆⲆΔⲆᐃⵠᐃ);
        } else if (b.ⵠⵠΔᐃⵠ) {
          c.ⲆⵠⲆⵠ(b.ⵠⵠΔᐃⵠ[0], b.ⵠⵠΔᐃⵠ[1], b.ⵠⵠΔᐃⵠ[2], b.ⲆⵠⲆᐃ);
        }
      };
    }(ⵠᐃᐃᐃΔᐃΔ.prototype.ΔⵠΔΔⵠ);
    ⵠᐃᐃᐃΔᐃΔ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ΔⲆⵠⲆⲆᐃΔ;
        b.ⵠᐃᐃⲆᐃ = c.ⵠᐃᐃⲆᐃ;
        b.ⵠⵠΔᐃⵠ = c.ⵠⵠΔᐃⵠ;
        b.ⵠⵠᐃⵠⵠ = c.ⵠⵠᐃⵠⵠ;
        return a.call(this);
      };
    }(ⵠᐃᐃᐃΔᐃΔ.prototype.reset);
    function b(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ΔΔΔΔⲆ = Howler.Δ.createPanner();
        a.ΔΔΔΔⲆ.coneInnerAngle = a.ⵠⵠᐃⵠⵠ.coneInnerAngle;
        a.ΔΔΔΔⲆ.coneOuterAngle = a.ⵠⵠᐃⵠⵠ.coneOuterAngle;
        a.ΔΔΔΔⲆ.coneOuterGain = a.ⵠⵠᐃⵠⵠ.coneOuterGain;
        a.ΔΔΔΔⲆ.distanceModel = a.ⵠⵠᐃⵠⵠ.distanceModel;
        a.ΔΔΔΔⲆ.maxDistance = a.ⵠⵠᐃⵠⵠ.maxDistance;
        a.ΔΔΔΔⲆ.panningModel = a.ⵠⵠᐃⵠⵠ.panningModel;
        a.ΔΔΔΔⲆ.refDistance = a.ⵠⵠᐃⵠⵠ.refDistance;
        a.ΔΔΔΔⲆ.rolloffFactor = a.ⵠⵠᐃⵠⵠ.rolloffFactor;
        a.ΔΔΔΔⲆ.setPosition(a.ⵠⵠΔᐃⵠ[0], a.ⵠⵠΔᐃⵠ[1], a.ⵠⵠΔᐃⵠ[2]);
        a.ΔΔΔΔⲆ.setOrientation(a.ⵠᐃᐃⲆᐃ[0], a.ⵠᐃᐃⲆᐃ[1], a.ⵠᐃᐃⲆᐃ[2]);
      } else {
        a.ΔΔΔΔⲆ = Howler.Δ.createStereoPanner();
        a.ΔΔΔΔⲆ.pan.value = a.ⲆⲆΔⲆᐃⵠᐃ;
      }
      a.ΔΔΔΔⲆ.connect(a.Ⲇⵠⵠⵠ);
      if (!a.ΔⲆⵠΔⲆ) {
        a.ΔⲆⵠⲆⲆᐃΔ.pause(a.ⲆⵠⲆᐃ, true).play(a.ⲆⵠⲆᐃ);
      }
    }
  })();
  var Xw = 1;
  var Yw = 1;
  var Zw = {
    ⲆⲆⲆΔΔΔᐃ: 12,
    ⲆⵠᐃΔⵠᐃΔⲆᐃ: 5000,
    ⵠⲆΔⲆΔ: 3,
    ⲆΔⵠⵠᐃ: 1,
    ᐃΔⵠⵠⲆⵠᐃΔⵠ: 12,
    ⲆΔⲆΔᐃΔᐃ: 3000,
    ᐃⲆⵠⲆᐃ: 8,
    ΔΔᐃⵠΔΔⵠⲆΔ: 5000,
    ᐃⲆⲆΔⵠ: 2,
    ⵠⲆⵠ: 6,
    ⵠᐃΔⵠΔⲆᐃⲆⲆ: 5000,
    ᐃᐃⲆΔΔⵠΔ: 460000,
    ᐃⵠΔⲆᐃᐃⲆΔᐃ: 12
  };
  var $w = [];
  $w[-1] = 1;
  $w[28] = 1;
  $w[49] = 1;
  $w[zr.ᐃᐃᐃⵠⲆⲆᐃᐃᐃ] = 2;
  $w[8] = 2;
  $w[1] = 2;
  $w[3] = 2;
  $w[4] = 2;
  $w[31] = 2;
  $w[32] = 2;
  $w[9] = 2;
  $w[57] = 2;
  $w[0] = 2;
  $w[63] = 2;
  $w[17] = 2;
  $w[5] = 2;
  $w[6] = 2;
  $w[30] = 2;
  $w[zr.ⲆᐃΔⲆΔⵠⲆⲆⵠ] = 2;
  $w[18] = 2;
  $w[12] = 2;
  $w[13] = 2;
  $w[14] = 2;
  $w[15] = 2;
  $w[16] = 2;
  $w[33] = 2;
  $w[zr.ΔΔᐃⵠΔᐃΔΔⵠ] = 2;
  $w[35] = 2;
  $w[36] = 2;
  $w[37] = 2;
  $w[38] = 2;
  $w[39] = 2;
  $w[45] = 2;
  $w[62] = 2;
  $w[54] = 2;
  $w[53] = 2;
  $w[46] = 3;
  $w[50] = 3;
  $w[51] = 3;
  $w[52] = 3;
  ⵠⲆᐃⲆ = [];
  ⵠⲆᐃⲆ[0] = 0;
  ⵠⲆᐃⲆ[1] = 1;
  ⵠⲆᐃⲆ[2] = 1;
  ⵠⲆᐃⲆ[3] = 1;
  ⵠⲆᐃⲆ[4] = 0;
  ⵠⲆᐃⲆ[5] = 0;
  ⵠⲆᐃⲆ[6] = 0;
  ⵠⲆᐃⲆ[7] = 0;
  ⵠⲆᐃⲆ[8] = 0;
  ⵠⲆᐃⲆ[9] = 0;
  ⵠⲆᐃⲆ[10] = 1;
  ⵠⲆᐃⲆ[11] = 1;
  ⵠⲆᐃⲆ[12] = 1;
  ⵠⲆᐃⲆ[13] = 1;
  ⵠⲆᐃⲆ[14] = 1;
  ⵠⲆᐃⲆ[15] = 1;
  ⵠⲆᐃⲆ[16] = 0;
  ⵠⲆᐃⲆ[17] = 0;
  ⵠⲆᐃⲆ[18] = 0;
  ⵠⲆᐃⲆ[19] = 0;
  ⵠⲆᐃⲆ[20] = 0;
  ⵠⲆᐃⲆ[21] = 0;
  ⵠⲆᐃⲆ[22] = 0;
  ⵠⲆᐃⲆ[23] = 1;
  ⵠⲆᐃⲆ[24] = 1;
  ⵠⲆᐃⲆ[25] = 1;
  ⵠⲆᐃⲆ[26] = 1;
  ⵠⲆᐃⲆ[27] = 1;
  ⵠⲆᐃⲆ[28] = 1;
  ⵠⲆᐃⲆ[29] = 1;
  ⵠⲆᐃⲆ[30] = 1;
  ⵠⲆᐃⲆ[31] = 1;
  ⵠⲆᐃⲆ[32] = 1;
  ⵠⲆᐃⲆ[33] = 1;
  ⵠⲆᐃⲆ[34] = 1;
  ⵠⲆᐃⲆ[35] = 1;
  ⵠⲆᐃⲆ[36] = 1;
  ⵠⲆᐃⲆ[37] = 1;
  ⵠⲆᐃⲆ[38] = 1;
  ⵠⲆᐃⲆ[40] = 0;
  ⵠⲆᐃⲆ[41] = 0;
  ⵠⲆᐃⲆ[42] = 0;
  ⵠⲆᐃⲆ[50] = 1;
  ⵠⲆᐃⲆ[51] = 1;
  ⵠⲆᐃⲆ[52] = 1;
  ⵠⲆᐃⲆ[55] = 0;
  ⵠⲆᐃⲆ[56] = 0;
  ⵠⲆᐃⲆ[57] = 0;
  ⵠⲆᐃⲆ[58] = 0;
  ᐃⲆᐃᐃᐃ = [];
  ᐃⲆᐃᐃᐃ[Af.ᐃΔⲆΔⵠ] = 0;
  ᐃⲆᐃᐃᐃ[1] = 0;
  ᐃⲆᐃᐃᐃ[29] = 0;
  ᐃⲆᐃᐃᐃ[6] = 0;
  ᐃⲆᐃᐃᐃ[3] = -1;
  ᐃⲆᐃᐃᐃ[31] = -1;
  ᐃⲆᐃᐃᐃ[2] = 0;
  ᐃⲆᐃᐃᐃ[4] = 0;
  ᐃⲆᐃᐃᐃ[30] = 0;
  ᐃⲆᐃᐃᐃ[33] = 0;
  ᐃⲆᐃᐃᐃ[32] = 1;
  ᐃⲆᐃᐃᐃ[35] = 1;
  ᐃⲆᐃᐃᐃ[7] = 1;
  ᐃⲆᐃᐃᐃ[8] = 1;
  ᐃⲆᐃᐃᐃ[9] = 1;
  ᐃⲆᐃᐃᐃ[19] = 1;
  ᐃⲆᐃᐃᐃ[50] = 1;
  ᐃⲆᐃᐃᐃ[5] = 0;
  ᐃⲆᐃᐃᐃ[12] = 1;
  ᐃⲆᐃᐃᐃ[13] = 1;
  ᐃⲆᐃᐃᐃ[14] = 1;
  ᐃⲆᐃᐃᐃ[20] = 1;
  ᐃⲆᐃᐃᐃ[52] = 1;
  ᐃⲆᐃᐃᐃ[10] = 0;
  ᐃⲆᐃᐃᐃ[15] = 1;
  ᐃⲆᐃᐃᐃ[16] = 1;
  ᐃⲆᐃᐃᐃ[17] = 1;
  ᐃⲆᐃᐃᐃ[21] = 1;
  ᐃⲆᐃᐃᐃ[51] = 1;
  ᐃⲆᐃᐃᐃ[45] = 0;
  ᐃⲆᐃᐃᐃ[46] = 1;
  ᐃⲆᐃᐃᐃ[47] = 1;
  ᐃⲆᐃᐃᐃ[48] = 1;
  ᐃⲆᐃᐃᐃ[49] = 1;
  ᐃⲆᐃᐃᐃ[53] = 1;
  ᐃⲆᐃᐃᐃ[18] = 1;
  ᐃⲆᐃᐃᐃ[22] = 1;
  ᐃⲆᐃᐃᐃ[23] = 1;
  ᐃⲆᐃᐃᐃ[11] = 0;
  ᐃⲆᐃᐃᐃ[34] = 1;
  var _w = {
    ⲆⵠⲆᐃᐃΔΔ: {
      ⵠΔᐃΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠΔ: {
        d0: [90086, 300, false],
        d2: [90684, 300, false],
        d1: [90391, 300, cr]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ᐃᐃⲆⲆᐃⲆⲆ: {
      ⵠΔᐃΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠΔ: {
        p2: [89815, 300, false],
        p0: [89303, 300, false],
        p1: [89549, 300, ra]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ᐃⵠᐃΔⲆᐃⵠ: {
      ⵠΔᐃΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠΔ: {
        w3: [89025, 300, false],
        w0: [88195, 300, ra],
        w2: [88751, 300, false],
        w1: [88473, 300, cr]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ⲆⲆⵠⲆΔᐃⲆ: {
      ⵠΔᐃΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠΔ: {
        ᐃⵠΔΔⵠⲆⵠ: [91022, 400, false],
        ⲆᐃⲆΔⵠⲆᐃ: [30562, 655, hq],
        ⵠᐃⵠⲆⵠⲆᐃ: [54524, 11393, true],
        ⲆΔⲆⲆΔΔⵠ: [19882, 8301, jn],
        ᐃᐃⲆΔⲆⵠⵠⲆⲆ: [100, 2800, _k],
        ᐃΔⵠΔᐃᐃᐃ: [92249, 500, false],
        ΔⵠᐃⲆΔᐃⵠ: [66014, 925, hq],
        ᐃᐃᐃⲆᐃ: [91431, 400, ra],
        ⵠⵠΔⵠΔ: [12356, 6965, ag],
        ⲆᐃⵠᐃΔᐃΔ: [32604, 21890, true],
        ⲆΔⲆⵠⵠ: [28380, 1797, true],
        ΔⵠⲆⵠⵠᐃᐃ: [31658, 813, true],
        ᐃᐃΔᐃⵠΔΔ: [66961, 21223, true],
        ⵠᐃⵠⵠⲆⵠᐃ: [3100, 8800, true],
        ᐃⵠᐃᐃⲆΔΔ: [66961, 21223, T]
      },
      sample: {
        ᐃᐃⲆΔⲆⵠⵠⲆⲆ: 1,
        ⵠᐃⵠⵠⲆⵠᐃ: 1,
        ⲆΔⲆⲆΔΔⵠ: 1,
        ⲆᐃⵠᐃΔᐃΔ: 1,
        ⵠᐃⵠⲆⵠⲆᐃ: 1,
        ᐃᐃΔᐃⵠΔΔ: 1,
        ᐃⵠᐃᐃⲆΔΔ: 1,
        ⵠⵠΔⵠΔ: 8,
        ⲆΔⲆⵠⵠ: 8,
        ⲆᐃⲆΔⵠⲆᐃ: 8,
        ΔⵠⲆⵠⵠᐃᐃ: 8,
        ΔⵠᐃⲆΔᐃⵠ: 8,
        ᐃⵠΔΔⵠⲆⵠ: 6,
        ᐃᐃᐃⲆᐃ: 6,
        ᐃΔⵠΔᐃᐃᐃ: 6
      }
    }
  };
  function ax(b, c, d, e, f) {
    const i = ~(b & 9827) & (b | 9827);
    const a = (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c & 255)) + (16 << (c >> 24 & 255));
    const j = d ^ 18843;
    const k = (16 << (e >> 16 & 255)) + (0 << (e & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 61887) & (f | 61887);
    const l = bx(i, a, j, k);
    (function (b, c, d, e, f, g) {
      const a = (1013904223 + (e + 23128) * 1664525) % 4294967296;
      const i = ~(f & 28135) & f | ~(f & 28135) & 28135;
      const j = it(~(b & 21628) & 21628 | ~(b & 21628) & b, (c | 29576) & ~(c & 29576), ~(d & 25465) & (d | 25465));
      kn(a, i);
    })(h, i, a, j, k);
    return (l | 50150) & ~(l & 50150);
  }
  function bx(b, c, d, e) {
    const f = (2531011 + (14508 + b) * 214013) % 4294967296;
    const g = ((c + 4449) * 1664525 + 1013904223) % 4294967296;
    const a = (d | 4105) & ~(d & 4105);
    const i = (2531011 + (43647 + e) * 214013) % 4294967296;
    const j = Pw(f, g, a, i, f);
    Lw(g, a, i, f, g);
    return j ^ 42854;
  }
  function cx(b, c, d, e, f, i, a, j, k, h, l) {
    this.r = 1;
    this.ⵠⲆⲆⲆΔ = b;
    this.ᐃᐃᐃⲆΔΔΔ = b;
    this.ᐃᐃᐃ = c;
    this.ΔⵠΔ = d;
    this.fade = e;
    this.ⲆⵠΔⵠⵠΔⵠ = f;
    this.ΔⲆΔᐃⲆⲆΔ = i;
    this.ⲆⲆΔⵠ = a;
    this.ΔᐃΔΔᐃⲆⲆ = j;
    this.source = k;
    this.source.ⵠΔⲆⲆⲆⵠⲆ = k.x + k.w;
    this.source.ⲆⵠⵠⵠΔ = k.y + k.ᐃⵠⲆ;
    this.ⵠⲆⵠⲆⲆΔᐃΔᐃ = h;
    this.ΔᐃⲆᐃⲆΔⵠ = l;
    this.ΔⲆᐃᐃⵠΔⲆ = 0;
    this.ⵠᐃᐃⵠᐃⲆᐃ = {
      d: 5,
      ⵠΔΔⲆ: 5
    };
    this.ⵠⲆⵠⲆΔ = function () {
      this.ⵠⲆⲆⲆΔ -= rx;
      if (this.ⵠⲆⲆⲆΔ < 0) {
        this.ⵠⲆⲆⲆΔ = this.ᐃᐃᐃⲆΔΔΔ;
        var a = _w.ⲆⲆⵠⲆΔᐃⲆ.ⵠΔᐃΔⲆ.playing(this.ᐃᐃᐃ);
        var b = _w.ⲆⲆⵠⲆΔᐃⲆ.ⵠΔᐃΔⲆ.playing(this.ΔⵠΔ);
        if (a && !b) {
          var c = Yw * this.ⲆⲆΔⵠ.volume(this.ᐃᐃᐃ);
          var d = (this.ΔⲆΔᐃⲆⲆΔ * Math.random() + this.ⲆⵠΔⵠⵠΔⵠ) * Yw;
          this.ⲆⲆΔⵠ.fade(c, d, this.fade, this.ᐃᐃᐃ);
        } else if (!a && b) {
          c = Yw * this.ⲆⲆΔⵠ.volume(this.ΔⵠΔ);
          d = Yw * (this.ΔⲆΔᐃⲆⲆΔ * Math.random() + this.ⲆⵠΔⵠⵠΔⵠ);
          this.ⲆⲆΔⵠ.fade(c, d, this.fade, this.ΔⵠΔ);
        }
      }
    };
    this.transition = function () {
      this.ⵠⲆⲆⲆΔ = this.ᐃᐃᐃⲆΔΔΔ;
      this.ⵠᐃᐃⵠᐃⲆᐃ.d = this.ⵠᐃᐃⵠᐃⲆᐃ.ⵠΔΔⲆ;
      if (kx.time) {
        this.ⲆⲆΔⵠ.fade(0, Yw * this.ⲆⵠΔⵠⵠΔⵠ, this.ΔᐃΔΔᐃⲆⲆ, this.ᐃᐃᐃ);
        this.ⲆⲆΔⵠ.play(this.ᐃᐃᐃ);
        if (this.ⲆⲆΔⵠ.playing(this.ΔⵠΔ)) {
          var a = Yw * this.ⲆⲆΔⵠ.volume(this.ΔⵠΔ);
          this.ⲆⲆΔⵠ.fade(a, 0, this.ΔᐃΔΔᐃⲆⲆ, this.ΔⵠΔ);
        }
      } else {
        this.ⲆⲆΔⵠ.fade(0, this.ⲆⵠΔⵠⵠΔⵠ * Yw, this.ΔᐃΔΔᐃⲆⲆ, this.ΔⵠΔ);
        this.ⲆⲆΔⵠ.play(this.ΔⵠΔ);
        if (this.ⲆⲆΔⵠ.playing(this.ᐃᐃᐃ)) {
          a = this.ⲆⲆΔⵠ.volume(this.ᐃᐃᐃ) * Yw;
          this.ⲆⲆΔⵠ.fade(a, 0, this.ΔᐃΔΔᐃⲆⲆ, this.ᐃᐃᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ΔⲆᐃᐃⵠΔⲆ) {
        if (ⲆᐃΔ.ΔᐃⲆᐃⲆΔⵠ(a, this.ⵠⲆⵠⲆⲆΔᐃΔᐃ)) {
          if (!ox.transition && kx.ΔⲆᐃΔⵠ.now < 460000) {
            if (kx.time) {
              if (!this.ⲆⲆΔⵠ.playing(this.ᐃᐃᐃ)) {
                this.ⵠᐃᐃⵠᐃⲆᐃ.d -= rx;
                if (this.ⵠᐃᐃⵠᐃⲆᐃ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ⲆⲆΔⵠ.playing(this.ΔⵠΔ)) {
              this.ⵠᐃᐃⵠᐃⲆᐃ.d -= rx;
              if (this.ⵠᐃᐃⵠᐃⲆᐃ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ΔⲆᐃᐃⵠΔⲆ = 0;
          if (this.ⲆⲆΔⵠ.playing(this.ᐃᐃᐃ)) {
            var b = this.ⲆⲆΔⵠ.volume(this.ᐃᐃᐃ) * Yw;
            this.ⲆⲆΔⵠ.fade(b, 0, this.ΔᐃΔΔᐃⲆⲆ, this.ᐃᐃᐃ);
          }
          if (this.ⲆⲆΔⵠ.playing(this.ΔⵠΔ)) {
            b = Yw * this.ⲆⲆΔⵠ.volume(this.ΔⵠΔ);
            this.ⲆⲆΔⵠ.fade(b, 0, this.ΔᐃΔΔᐃⲆⲆ, this.ΔⵠΔ);
          }
        }
      } else if (ⲆᐃΔ.ΔᐃⲆᐃⲆΔⵠ(a, this.ΔᐃⲆᐃⲆΔⵠ)) {
        this.ΔⲆᐃᐃⵠΔⲆ = 1;
        if (!ox.transition && kx.ΔⲆᐃΔⵠ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ⵠⵠᐃ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? ox.ⲆⵠΔⲆΔⵠᐃ(this.source.x) : this.source.ⵠΔⲆⲆⲆⵠⲆ < a.x ? ox.ⲆⵠΔⲆΔⵠᐃ(this.source.ⵠΔⲆⲆⲆⵠⲆ) : b.x;
      d = this.source.y > a.y ? ox.ⲆⲆⲆᐃᐃᐃⵠ(this.source.y) : this.source.ⲆⵠⵠⵠΔ < a.y ? ox.ⲆⲆⲆᐃᐃᐃⵠ(this.source.ⲆⵠⵠⵠΔ) : b.y;
      this.ⲆⲆΔⵠ.pos(c, d, -0.5, this.ᐃᐃᐃ);
      this.ⲆⲆΔⵠ.pos(c, d, -0.5, this.ΔⵠΔ);
    };
  }
  ΔⲆᐃⲆⲆ = {
    ⵠΔⲆᐃⵠⵠΔ: 100,
    ΔⵠⵠΔⲆⵠⵠ: 100,
    ᐃᐃⲆᐃⵠΔᐃⲆΔ: 0.2,
    ⲆⲆⵠᐃⵠᐃᐃ: 300,
    ⵠⲆⲆⵠᐃΔⵠ: 100,
    ΔⲆΔⵠⵠᐃΔⲆⵠ: 0.4,
    ⲆⲆⵠⵠⵠᐃⲆΔⵠ: 0.2,
    ᐃⲆⲆΔⵠΔᐃ: 0,
    ⲆⲆᐃⲆΔ: 2,
    ΔᐃᐃⲆΔⵠⲆ: 2,
    ⲆⵠⵠᐃᐃΔᐃ: 4,
    ⲆⲆᐃⵠᐃΔᐃ: 3,
    ᐃΔⵠⲆⲆΔⲆ: 1,
    ⵠΔᐃΔΔⵠᐃⵠⵠ: 0.2
  };
  function dx(a, b, c) {
    this.ⲆⲆΔⵠΔⵠⲆ = a;
    this.c = 0;
    this.ⲆⲆΔⵠ = b;
    this.Δᐃᐃᐃᐃ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.Δᐃᐃᐃᐃ[this.c];
      this.ⲆⲆΔⵠΔⵠⲆ.ⲆᐃⵠⵠΔᐃⲆ(this.ⲆⲆΔⵠ, a);
      this.ⲆⲆΔⵠ.play(a);
    };
  }
  function ex(a) {
    this.ⵠΔⲆᐃⵠΔⵠ = 1;
    this.ΔᐃⲆⲆ = 0;
    this.mode = -1;
    this.ⲆΔⲆⵠⵠ = ox.sample.ⲆΔⲆⵠⵠ[a];
    this.ⲆᐃⲆΔⵠⲆᐃ = ox.sample.ⲆᐃⲆΔⵠⲆᐃ[a];
    this.ΔⵠⲆⵠⵠᐃᐃ = ox.sample.ΔⵠⲆⵠⵠᐃᐃ[a];
    this.ΔⵠᐃⲆΔᐃⵠ = ox.sample.ΔⵠᐃⲆΔᐃⵠ[a];
    this.ⲆⵠᐃΔⵠΔⵠ = new dx(this, _w.ᐃᐃⲆⲆᐃⲆⲆ.ⵠΔᐃΔⲆ, ox.ΔⲆΔⵠΔ.ⲆⵠᐃΔⵠΔⵠ[a]);
    this.ᐃΔⲆΔⲆ = new dx(this, _w.ᐃⵠᐃΔⲆᐃⵠ.ⵠΔᐃΔⲆ, ox.ΔⲆΔⵠΔ.ᐃΔⲆΔⲆ[a]);
    this.ⵠⲆΔⵠΔ = new dx(this, _w.ⲆⵠⲆᐃᐃΔΔ.ⵠΔᐃΔⲆ, ox.ΔⲆΔⵠΔ.ⵠⲆΔⵠΔ[a]);
    this.ⲆᐃⵠΔⲆ = a;
    this.x = 0;
    this.y = 0;
    this.ⲆᐃⲆᐃΔ = 0;
    this.ⵠⲆⲆⲆΔ = ΔⲆᐃⲆⲆ.ⵠᐃⵠⲆΔⵠⲆᐃΔ;
    this.ⲆⵠⲆⵠ = {
      x: 0,
      y: 0
    };
    this.ⲆⵠⵠⵠⲆ = _w.ⲆⲆⵠⲆΔᐃⲆ.ⵠΔᐃΔⲆ;
    this.ΔⵠⲆΔⲆΔᐃⲆⲆ = function (a) {
      if (a === 1) {
        this.ⲆⵠᐃΔⵠΔⵠ.play();
      } else if (a === 2) {
        this.ᐃΔⲆΔⲆ.play();
      } else if (a === 3) {
        this.ⵠⲆΔⵠΔ.play();
      }
    };
    this.ⲆⵠⵠᐃᐃΔⵠ = function (a) {
      if (a.ᐃᐃΔΔΔⵠⲆ > 0) {
        return ΔⲆᐃⲆⲆ.ⲆⲆᐃⲆΔ;
      } else if (a.ᐃΔΔⲆΔᐃΔ > 0) {
        return ΔⲆᐃⲆⲆ.ᐃΔⵠⲆⲆΔⲆ;
      } else if (a.ⵠⵠⵠⵠⵠ > 0 || a.ⵠᐃⵠᐃⵠ > 0) {
        return ΔⲆᐃⲆⲆ.ⲆⲆᐃⵠᐃΔᐃ;
      } else {
        return ΔⲆᐃⲆⲆ.ᐃⲆⲆΔⵠΔᐃ;
      }
    };
    this.ΔⵠΔΔⵠ = function (a) {
      this.ⵠΔⲆᐃⵠΔⵠ = 0;
      this.ΔᐃⲆⲆ = a;
      var b = kx.ⵠΔⲆᐃⵠ[a];
      b.ⲆᐃⵠΔⲆ = this.ⲆᐃⵠΔⲆ;
      this.mode = this.ⲆⵠⵠᐃᐃΔⵠ(b);
      this.ⲆⵠⲆⵠ.x = b.x;
      this.ⲆⵠⲆⵠ.y = b.y;
    };
    this.ⵠⵠᐃⲆᐃⵠᐃ = function () {
      this.ⵠΔⲆᐃⵠΔⵠ = 1;
      this.mode = -1;
      this.ⲆⵠⵠⵠⲆ.stop(this.ⲆΔⲆⵠⵠ);
      this.ⲆⵠⵠⵠⲆ.stop(this.ⲆᐃⲆΔⵠⲆᐃ);
      this.ⲆⵠⵠⵠⲆ.stop(this.ΔⵠⲆⵠⵠᐃᐃ);
      this.ⲆⵠⵠⵠⲆ.stop(this.ΔⵠᐃⲆΔᐃⵠ);
    };
    this.fade = function (a, b) {
      var c = Xw * this.ⲆⵠⵠⵠⲆ.volume(a);
      this.ⲆⵠⵠⵠⲆ.fade(c, 0, b, a);
    };
    this.ⲆᐃⵠⵠΔᐃⲆ = function (a, b) {
      if (this.ⲆᐃⲆᐃΔ && this.ⲆᐃⵠΔⲆ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠⲆⵠⲆΔ = function (b, c, d, e, f, g, a) {
      this.ⵠⲆⲆⲆΔ = g;
      if (e && f === this.mode) {
        var i = this.ⲆⵠⵠⵠⲆ.volume(b) * Xw;
        if (this.ⲆᐃⲆᐃΔ) {
          var j = Xw * (d * Math.random() + c);
          this.ⲆⵠⵠⵠⲆ.fade(i, j, a, b);
        } else {
          this.ⲆⵠⵠⵠⲆ.fade(i, 0, a, b);
        }
      } else if (this.mode != f && this.ⲆᐃⲆᐃΔ) {
        this.ⲆⵠⵠⵠⲆ.fade(0, Xw * (c + d), a, b);
      } else if (this.ⲆᐃⲆᐃΔ) {
        i = Xw * this.ⲆⵠⵠⵠⲆ.volume(b);
        j = Xw * (d * Math.random() + c);
        this.ⲆⵠⵠⵠⲆ.fade(i, j, a, b);
      }
      this.ⲆᐃⵠⵠΔᐃⲆ(this.ⲆⵠⵠⵠⲆ, b);
      this.ⲆⵠⵠⵠⲆ.play(b);
    };
    this.ⵠⵠᐃ = function () {
      var a = kx.ⵠΔⲆᐃⵠ[this.ΔᐃⲆⲆ];
      this.ⵠⲆⲆⲆΔ -= rx;
      if (this.ⵠⲆⲆⲆΔ <= 0) {
        var b = 0;
        if (a.x != this.ⲆⵠⲆⵠ.x || this.ⲆⵠⲆⵠ.y != a.y) {
          if (!this.ⲆᐃⲆᐃΔ) {
            b = 1;
            this.ⲆᐃⲆᐃΔ = 1;
          }
          this.x = ox.ⲆᐃΔⲆⵠΔⲆ(a.x, ΔⲆᐃⲆⲆ.ΔᐃᐃⲆΔⵠⲆ);
          this.y = ox.ⵠΔⵠΔⵠⲆΔ(a.y, ΔⲆᐃⲆⲆ.ΔᐃᐃⲆΔⵠⲆ);
        } else if (this.ⲆᐃⲆᐃΔ) {
          b = 1;
          this.ⲆᐃⲆᐃΔ = 0;
        }
        this.ⲆⵠⲆⵠ.x = a.x;
        this.ⲆⵠⲆⵠ.y = a.y;
        Ⲇⵠᐃᐃ = this.ⲆⵠⵠᐃᐃΔⵠ(a);
        if (Ⲇⵠᐃᐃ != this.mode) {
          if (ΔⲆᐃⲆⲆ.ᐃΔⵠⲆⲆΔⲆ === this.mode) {
            this.fade(this.ⲆΔⲆⵠⵠ, ΔⲆᐃⲆⲆ.ⲆⲆⵠᐃⵠᐃᐃ);
          } else if (ΔⲆᐃⲆⲆ.ⲆⲆᐃⲆΔ === this.mode) {
            this.fade(this.ⲆᐃⲆΔⵠⲆᐃ, ΔⲆᐃⲆⲆ.ΔⵠⵠΔⲆⵠⵠ);
          } else if (this.mode === ΔⲆᐃⲆⲆ.ᐃⲆⲆΔⵠΔᐃ) {
            this.fade(this.ΔⵠⲆⵠⵠᐃᐃ, ΔⲆᐃⲆⲆ.ⵠΔⲆᐃⵠⵠΔ);
          } else if (this.mode === ΔⲆᐃⲆⲆ.ⲆⲆᐃⵠᐃΔᐃ) {
            this.fade(this.ΔⵠᐃⲆΔᐃⵠ, ΔⲆᐃⲆⲆ.ⵠⲆⲆⵠᐃΔⵠ);
          }
        }
        if (Ⲇⵠᐃᐃ === ΔⲆᐃⲆⲆ.ᐃΔⵠⲆⲆΔⲆ) {
          this.ⵠⲆⵠⲆΔ(this.ⲆΔⲆⵠⵠ, 0.08, 0.3, b, Ⲇⵠᐃᐃ, ΔⲆᐃⲆⲆ.ΔⲆΔⵠⵠᐃΔⲆⵠ, ΔⲆᐃⲆⲆ.ⲆⲆⵠᐃⵠᐃᐃ);
        } else if (Ⲇⵠᐃᐃ === ΔⲆᐃⲆⲆ.ⲆⲆᐃⲆΔ) {
          this.ⵠⲆⵠⲆΔ(this.ⲆᐃⲆΔⵠⲆᐃ, 0.2, 0.3, b, Ⲇⵠᐃᐃ, ΔⲆᐃⲆⲆ.ⲆⲆⵠⵠⵠᐃⲆΔⵠ, ΔⲆᐃⲆⲆ.ΔⵠⵠΔⲆⵠⵠ);
        } else if (Ⲇⵠᐃᐃ === ΔⲆᐃⲆⲆ.ᐃⲆⲆΔⵠΔᐃ) {
          this.ⵠⲆⵠⲆΔ(this.ΔⵠⲆⵠⵠᐃᐃ, 0.3, 0.6, b, Ⲇⵠᐃᐃ, ΔⲆᐃⲆⲆ.ᐃᐃⲆᐃⵠΔᐃⲆΔ, ΔⲆᐃⲆⲆ.ⵠΔⲆᐃⵠⵠΔ);
        } else if (ΔⲆᐃⲆⲆ.ⲆⲆᐃⵠᐃΔᐃ === Ⲇⵠᐃᐃ) {
          this.ⵠⲆⵠⲆΔ(this.ΔⵠᐃⲆΔᐃⵠ, 0.1, 0.25, b, Ⲇⵠᐃᐃ, ΔⲆᐃⲆⲆ.ⵠΔᐃΔΔⵠᐃⵠⵠ, ΔⲆᐃⲆⲆ.ⵠⲆⲆⵠᐃΔⵠ);
        }
        this.mode = Ⲇⵠᐃᐃ;
      }
    };
    this.check = function () {
      var a = kx.ⵠΔⲆᐃⵠ[this.ΔᐃⲆⲆ];
      return !!a || (this.ⵠⵠᐃⲆᐃⵠᐃ(a), false);
    };
  }
  function fx(a, b) {
    Xe(Dw, a, b);
    const c = lb(of[0], of[1]);
    const d = Ww(of[0], of[1], of[0], of[1], of[0], of[1]);
    return (16 << ((c ^ d) & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (8 << ((c ^ d) >> 16 & 255)) + (24 << ((c ^ d) >> 8 & 255));
  }
  function gx(a, b, c) {
    const d = (a | 36583) & ~(a & 36583);
    const e = ~(d & 27498) & 27498 | ~(d & 27498) & d;
    return (e | 36410) & ~(e & 36410);
  }
  ⲆⲆⲆᐃⵠⵠⲆ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var hx;
  var ix = [];
  var jx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = tr.ᐃⵠΔⲆⵠ[jx.time];
  jx.items.push(new Mf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  jx.items.push(new Mf(100, 0, 0, 0, 0, 0, 0, 5));
  jx.items.push(new Mf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  jx.items.push(new Mf(100, 0, 0, 0, 0, 0, 0, 5));
  Δⵠᐃᐃ = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + pt[324] + "]";
      }
    }
    this.ᐃΔⵠΔ = null;
    this.ⵠⲆᐃⵠᐃ = 0;
    this.ᐃᐃᐃᐃⲆ = [];
    this.ΔⵠΔⵠᐃⵠⲆ = {};
    this.ΔⲆΔⲆⲆᐃΔ = {};
    this.ⲆⵠⵠⲆⲆ = [[], [], [], [], [], [], [], [], []];
    this.ᐃⲆⵠⵠᐃⲆᐃ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ⲆⵠⲆᐃΔ = 0;
    this.ⵠᐃΔᐃⲆᐃⵠ = 0;
    this.ⵠⲆᐃⵠⲆⲆᐃ = function (b) {
      if (gf !== undefined) {
        c.ᐃᐃᐃᐃⲆ.push({
          a: gf.name,
          gm: gf.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        b();
        return;
      }
      fetch(vf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            c.ᐃᐃᐃᐃⲆ = [];
            c.ΔⲆΔⲆⲆᐃΔ = {};
            for (let a in wf.ⲆΔΔⲆⲆΔⵠ) {
              const b = wf.ⲆΔΔⲆⲆΔⵠ[a];
              c.ᐃᐃᐃᐃⲆ.push({
                a: "Auto Select",
                gm: b,
                m: 100,
                nu: 0,
                auto: bh
              });
            }
            var f = 0;
            var e = 1;
            var j = 2;
            var a = 4;
            for (let i = 0; d.length > i; i++) {
              const k = d[i];
              const m = k.n;
              const n = k.l;
              const h = k.p;
              const g = [];
              c.ΔⵠΔⵠᐃⵠⲆ[m] = g;
              const l = [];
              for (let a = 0; h.length > a; a++) {
                const b = m + h[a][f];
                l.push(b);
                g.push(b);
              }
              for (let b = 0; b < n.length; b++) {
                const d = n[b];
                let i;
                let k = wf.ⲆΔΔⲆⲆΔⵠ[d[j]];
                let h = k + d[e];
                i = k in c.ΔⲆΔⲆⲆᐃΔ ? ++c.ΔⲆΔⲆⲆᐃΔ[k] : c.ΔⲆΔⲆⲆᐃΔ[k] = 1;
                if (h in c.ΔⲆΔⲆⲆᐃΔ) {
                  ⲆⵠⲆᐃⵠⵠⵠ = ++c.ΔⲆΔⲆⲆᐃΔ[h];
                } else {
                  ⲆⵠⲆᐃⵠⵠⵠ = c.ΔⲆΔⲆⲆᐃΔ[h] = 1;
                }
                c.ᐃᐃᐃᐃⲆ.push({
                  name: d[a],
                  a: wf.ⲆᐃᐃΔΔΔⵠⵠⲆ[d[e]] + " " + ⲆⵠⲆᐃⵠⵠⵠ,
                  r: d[e],
                  gm: wf.ⲆΔΔⲆⲆΔⵠ[d[j]],
                  idx: i,
                  m: 100,
                  nu: d[3],
                  id: d[e] + d[f],
                  p: l
                });
              }
            }
            const k = [];
            const i = [];
            const h = [];
            for (let a = 0; c.ᐃᐃᐃᐃⲆ.length > a; a++) {
              const b = c.ᐃᐃᐃᐃⲆ[a];
              if (!b.auto) {
                if (b.gm === wf.ⲆΔΔⲆⲆΔⵠ[6]) {
                  if (typeof b.name === "string" && (b.name.indexOf("Private Server") !== -1 || b.nu > 95)) {
                    i.push(b);
                  } else {
                    h.push(b);
                  }
                  k.push(a);
                }
              }
            }
            const l = [];
            l.push(...h.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            l.push(...i.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; a < k.length; a++) {
              const b = k[a];
              const d = l[a];
              d.idx = a + 1;
              c.ᐃᐃᐃᐃⲆ[b] = d;
            }
            b();
          });
        } else {
          Ya.setTimeout(function () {
            c.ⵠⲆᐃⵠⲆⲆᐃ(b);
          }, 3000);
        }
      });
    };
    this.ᐃⲆᐃⵠⲆⲆⵠΔΔ = function (a) {
      var b = [];
      for (var c = 0; c < a.length; c++) {
        if (a[c].a.indexOf(hr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⲆΔᐃⲆⵠⲆⲆ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Δⵠᐃᐃ.ᐃⲆⵠⵠᐃⲆᐃ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ] === -1) {
        Δⵠᐃᐃ.ᐃⲆⵠⵠᐃⲆᐃ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ] = e.selectedIndex = Δⵠᐃᐃ.ᐃⲆᐃⵠⲆⲆⵠΔΔ(b);
      } else {
        e.selectedIndex = Δⵠᐃᐃ.ᐃⲆⵠⵠᐃⲆᐃ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + pt[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + pt[323] + " (" + this.ⵠⲆᐃⲆⲆⵠᐃ + ") " + pt[325] + "</li>";
      for (d = 0; d < b.length; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + pt[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = Δⵠᐃᐃ.ⲆⵠⵠⲆⲆ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ], e = 0; d.length > e; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Δⵠᐃᐃ.ᐃⲆⵠⵠᐃⲆᐃ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ⵠⲆᐃⲆⲆⵠᐃ = 0;
    this.ⲆⵠᐃⵠⲆⲆΔᐃΔ = function () {
      this.ⵠⲆᐃⲆⲆⵠᐃ = 0;
      for (var a = 0; Δⵠᐃᐃ.ᐃᐃᐃᐃⲆ.length > a; a++) {
        if (this.ᐃᐃᐃᐃⲆ[a].gm == "experimental") {
          this.ⲆⵠⵠⲆⲆ[7].push(this.ᐃᐃᐃᐃⲆ[a]);
        } else if (this.ᐃᐃᐃᐃⲆ[a].gm == "zombies") {
          this.ⲆⵠⵠⲆⲆ[2].push(this.ᐃᐃᐃᐃⲆ[a]);
        } else if (this.ᐃᐃᐃᐃⲆ[a].gm == "community") {
          this.ⲆⵠⵠⲆⲆ[6].push(this.ᐃᐃᐃᐃⲆ[a]);
        } else if (this.ᐃᐃᐃᐃⲆ[a].gm == "forest") {
          this.ⲆⵠⵠⲆⲆ[4].push(this.ᐃᐃᐃᐃⲆ[a]);
        } else if (this.ᐃᐃᐃᐃⲆ[a].gm == "battle-royale") {
          this.ⲆⵠⵠⲆⲆ[5].push(this.ᐃᐃᐃᐃⲆ[a]);
        } else if (this.ᐃᐃᐃᐃⲆ[a].gm == "vampires") {
          this.ⲆⵠⵠⲆⲆ[3].push(this.ᐃᐃᐃᐃⲆ[a]);
        } else {
          this.ⲆⵠⵠⲆⲆ[0].push(this.ᐃᐃᐃᐃⲆ[a]);
        }
        this.ⵠⲆᐃⲆⲆⵠᐃ += this.ᐃᐃᐃᐃⲆ[a].nu;
      }
      for (a = 0; a < this.ⲆⵠⵠⲆⲆ.length; a++) {
        if (this.ⲆⵠⵠⲆⲆ[a].length === 0) {
          this.ⲆⵠⵠⲆⲆ[a].push({
            a: pt[327],
            ⲆⲆⵠⲆⲆⵠΔᐃᐃ: 0,
            ⵠⵠ: "127.0.0.1",
            ΔΔΔ: 80
          });
        }
      }
      this.ⲆΔᐃⲆⵠⲆⲆ(this.ⲆⵠⵠⲆⲆ[0]);
      this.ⵠΔⵠⲆΔ = function (a) {
        Δⵠᐃᐃ.ⲆⵠⲆᐃΔ = a;
        Δⵠᐃᐃ.ⲆΔᐃⲆⵠⲆⲆ(Δⵠᐃᐃ.ⲆⵠⵠⲆⲆ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ]);
        Δⵠᐃᐃ.ⲆΔᐃⲆⵠⲆⲆ(Δⵠᐃᐃ.ⲆⵠⵠⲆⲆ[Δⵠᐃᐃ.ⲆⵠⲆᐃΔ]);
        document.getElementById("servselect").selectedIndex = Δⵠᐃᐃ.ⲆⵠⲆᐃΔ;
      };
    };
    this.ⲆⵠⲆⵠᐃᐃΔ = 0;
    this.ᐃΔΔΔᐃⵠⵠ = 0;
    this.ⲆΔᐃⲆⵠ = null;
    this.timeout = function () {
      c.ᐃΔΔΔᐃⵠⵠ++;
      c.ᐃΔⵠΔ.close();
      if (c.ᐃΔΔΔᐃⵠⵠ > 3) {
        vx = 1;
        hx.ᐃΔⵠⲆᐃΔᐃⵠⲆ = yf.ᐃⲆᐃⵠⵠⵠⵠⲆᐃ;
        c.ⵠΔⲆᐃᐃ(pt[300]);
        hx.waiting = lg;
        if (lx.reconnect.enabled) {
          nx.ᐃΔᐃΔⵠ(hx.ΔΔΔᐃᐃ);
        }
      } else if (lx.ΔⵠΔⲆᐃᐃⲆ === nl || lx.ⲆⲆⲆⵠᐃᐃᐃ === undefined || lx.ΔⲆⵠᐃΔⲆⲆ === undefined) {
        hx.ⲆΔⲆΔⲆⵠΔ(function () {
          c.ⵠⲆΔᐃΔᐃⵠ();
        }, 1);
      } else {
        c.ⵠⲆΔᐃΔᐃⵠ();
      }
    };
    this.ᐃΔᐃᐃΔⲆⲆ = function (a) {
      if (this.ⵠⲆᐃⵠᐃ == this.ᐃΔⵠΔ.ⵠⲆᐃⵠᐃ) {
        this.ⵠⲆᐃⵠᐃ++;
        this.ⵠΔⲆᐃᐃ(pt[301] + a);
        nx.ᐃΔᐃΔⵠ(hx.ΔΔΔᐃᐃ);
      }
    };
    this.ⲆⵠΔᐃᐃΔⵠ = function () {
      this.ⵠΔⲆᐃᐃ("You speak too much");
    };
    this.ᐃᐃᐃᐃᐃᐃⵠᐃΔ = function () {
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ(pt[302]);
      hx.waiting = hs;
    };
    this.ⲆΔΔⲆⲆⵠⵠⵠⲆ = function () {
      lx.ΔᐃᐃⲆⵠ.open = false;
    };
    this.ⲆⲆⲆΔΔΔⵠⵠᐃ = function () {
      nx.ⵠᐃΔⲆᐃⵠⵠ = 0;
    };
    this.ᐃⵠⵠᐃⲆᐃΔᐃⲆ = function () {
      nx.ΔᐃΔᐃᐃⵠᐃ = 0;
    };
    this.ⵠⲆΔᐃⲆΔⲆᐃᐃ = function (a) {
      lx.ⲆΔΔⲆⲆ.Ⲇⵠᐃᐃᐃ = a;
      if (kx.ΔΔⵠᐃⵠ > -300) {
        if (a === 0) {
          this.ⵠΔⲆᐃᐃ(pt[340]);
        } else {
          this.ⵠΔⲆᐃᐃ(pt[341]);
        }
      }
    };
    this.ⲆⵠΔⲆⲆ = function (a) {
      lx.ⲆⵠΔⲆⲆ = a;
    };
    this.ⵠⵠⲆⵠⵠᐃΔΔΔ = function (a) {
      lx.ⲆᐃⵠᐃΔΔΔ = a;
    };
    this.ⲆᐃⵠᐃΔΔΔ = function (a) {
      lx.ⲆᐃⲆⵠⵠ.Ⲇⵠᐃᐃᐃ = a;
      if (kx.ⵠⵠⵠⵠⵠ > -300) {
        if (a === 0) {
          this.ⵠΔⲆᐃᐃ(pt[342]);
        } else {
          this.ⵠΔⲆᐃᐃ(pt[343]);
        }
      }
    };
    this.ᐃᐃᐃⲆⲆⵠᐃᐃᐃ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃᐃⵠⲆⲆⲆⲆᐃⲆ = function () {
      nx.ⵠΔⵠᐃⲆⵠΔ = 0;
    };
    this.ᐃΔⲆⵠᐃⲆⲆⲆⵠ = function () {
      nx.ΔΔΔᐃᐃⵠΔ = 0;
    };
    this.ⵠᐃⲆᐃⵠΔᐃⵠⲆ = function () {
      lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ = [];
      lx.ᐃΔᐃⲆ.Δᐃⵠ = [];
      lx.ᐃΔᐃⲆ.id = -1;
      lx.ᐃΔᐃⲆ.ᐃΔᐃᐃⵠΔⲆ.stop();
      lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ = [];
      lx.ᐃΔⵠᐃ.ⵠΔⲆⵠΔ = false;
      lx.ᐃΔⵠᐃ.ⲆᐃⲆᐃΔΔᐃᐃΔ = vg;
      lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
      lx.ᐃΔⵠᐃ.id = -1;
      lx.ᐃΔⵠᐃ.ⵠⵠⵠⲆⲆ = false;
      lx.ᐃΔⵠᐃ.ΔⲆΔⲆΔ = Cl;
      lx.ᐃΔⵠᐃ.ⵠⵠΔⵠΔ = false;
      lx.ᐃΔⵠᐃ.ⵠⲆΔⵠⲆⲆⲆ = false;
      lx.ᐃΔⵠᐃ.timeout = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1, 1);
    };
    this.ⵠⲆΔⲆᐃⵠᐃᐃⵠ = function () {
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ();
      hx.waiting = kq;
    };
    this.ⵠⵠⵠⲆⵠΔΔ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⲆᐃΔ.ⵠᐃΔⵠⲆⲆⲆ(a[b]);
        }
      }
      lx.ᐃⲆⵠⲆⲆ.ⲆΔᐃⲆᐃ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ⵠΔⲆᐃᐃ(a);
    };
    this.ⵠΔᐃᐃⲆⲆⵠⲆⵠ = function () {
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ(pt[339]);
      hx.waiting = En;
    };
    this.ΔⵠⲆⵠᐃⵠⵠᐃᐃ = function () {
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ(pt[338]);
      hx.waiting = Ao;
    };
    this.ΔΔΔΔⲆᐃⵠᐃⵠ = function () {
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ(pt[304]);
      hx.waiting = lg;
    };
    this.ᐃᐃⵠΔⵠⲆΔᐃⲆ = function () {
      lx.ᐃΔᐃⲆ.ⲆⲆⲆⵠⵠⵠⵠ(1, 0);
      nx.ⲆⲆᐃΔⵠⲆΔ();
    };
    this.ⵠⲆΔΔⵠⵠⵠᐃⵠ = function (a) {
      var b = a[1];
      var c = kx.ⲆⲆⲆᐃ[b];
      c.Δⵠⵠⵠ = a[2];
      c.ⵠΔⲆΔⵠ = a[3];
      c.ᐃⵠⵠⲆΔᐃᐃ = a[4];
      c.Δⵠⵠᐃⵠ = a[5];
      c.ᐃᐃΔⲆᐃ = a[6];
      c.ⲆᐃᐃⵠΔ = a[7];
      c.level = a[8];
      var d = kx.ⵠΔⲆᐃⵠ[b * kx.ⲆⵠΔΔⲆⲆⵠ];
      if (d) {
        d.Δⵠⵠⵠ = a[2];
        d.ⵠΔⲆΔⵠ = a[3];
        d.ᐃⵠⵠⲆΔᐃᐃ = a[4];
        d.Δⵠⵠᐃⵠ = a[5];
      }
    };
    this.ⵠⵠⲆᐃᐃᐃΔⵠⵠ = function (a) {
      if (a === 29) {
        lx.ᐃΔᐃⲆ.ⲆⲆⲆⵠⵠⵠⵠ(1, 0);
        nx.ⲆⲆᐃΔⵠⲆΔ();
      } else {
        this.ᐃΔᐃⲆΔᐃⲆ([0, a, 1]);
      }
      lx.ᐃΔⵠᐃ.ⲆᐃⵠⲆⲆΔⵠ();
    };
    this.ⲆⵠᐃⵠᐃᐃᐃᐃⲆ = function (a) {
      lx.ⲆⲆⲆΔΔ.ⵠⲆⲆⲆΔ = 0;
      lx.ᐃΔⵠᐃ.ΔⵠⵠΔᐃⵠΔΔⲆ(a);
    };
    this.ⲆⵠⵠᐃᐃⲆⵠΔᐃ = function (a) {
      for (var b = Is[a].r, c = 0; b.length > c; c++) {
        if (lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length < lx.ᐃΔᐃⲆ.max || lx.ᐃΔᐃⲆ.Δᐃⵠ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ᐃΔᐃⲆΔᐃⲆ([0, b[c][0], d]);
        }
      }
      lx.ᐃΔⵠᐃ.ⲆᐃⵠⲆⲆΔⵠ();
    };
    this.ⵠⲆⵠᐃⵠΔᐃΔⵠ = function (a) {
      lx.ⲆⲆⲆΔΔ.ⵠⲆⲆⲆΔ = 0;
      lx.ᐃΔⵠᐃ.ᐃⲆΔⵠᐃΔⵠᐃⲆ(a);
    };
    this.ⵠΔⲆᐃᐃ = function (a) {
      if (lx.alert.text) {
        if (a !== lx.alert.text && lx.alert.list[lx.alert.list.length - 1] !== a) {
          lx.alert.list.push(a);
        }
      } else {
        lx.alert.text = a;
      }
    };
    this.ΔⲆΔⲆΔᐃΔⲆΔ = function () {
      this.ⵠΔⲆᐃᐃ(pt[305]);
    };
    this.ⵠᐃᐃΔΔΔΔⲆⲆ = function () {
      var a;
      a = lx.ΔⵠΔ == 0 ? pt[306] : pt[307] + (lx.ΔⵠΔ + 1) + pt[308];
      this.ⵠΔⲆᐃᐃ(a);
      lx.ΔⵠΔ++;
    };
    this.ⵠⵠΔⲆᐃⵠᐃⵠᐃ = function () {
      clearTimeout(c.ⲆΔᐃⲆⵠ);
      lx.reconnect.enabled = mk;
      lx.ᐃᐃΔⵠᐃ = Zh;
      this.ⵠΔⲆᐃᐃ(pt[309]);
      nx.ᐃΔᐃΔⵠ(hx.ΔΔΔᐃᐃ);
      this.ᐃΔⵠΔ.close();
    };
    this.ⵠᐃᐃⵠⲆΔᐃΔⲆ = function () {
      vx = 1;
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ(pt[310]);
      hx.waiting = false;
    };
    this.ⲆᐃᐃⵠΔⵠⲆⵠΔ = function () {
      vx = 1;
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      this.ⵠΔⲆᐃᐃ(pt[311]);
      hx.waiting = vg;
    };
    this.ᐃΔⲆΔΔΔΔᐃᐃ = function (a) {
      var b = a[1];
      var c = kx.ⲆⲆⲆᐃ;
      c[b].ⵠⲆⲆΔΔ = a[2];
      c[b].Δⵠⵠⵠ = a[3];
      c[b].ⵠΔⲆΔⵠ = a[4];
      c[b].ᐃⵠⵠⲆΔᐃᐃ = a[5];
      c[b].Δⵠⵠᐃⵠ = a[6];
      c[b].ᐃᐃΔⲆᐃ = a[7];
      c[b].ⲆᐃᐃⵠΔ = a[8];
      c[b].level = a[9];
      c[b].ⵠᐃⲆΔⵠ = 0;
      c[b].ΔΔᐃΔΔᐃⲆ = null;
      c[b].label = null;
      c[b].ⲆᐃⵠⲆⲆⲆⲆ = null;
      c[b].ᐃᐃΔⵠᐃ = true;
      if (hf === 1) {
        c[b].ⵠⲆⲆΔΔ += "|" + b;
      }
    };
    this.ⲆⵠΔΔⲆΔΔΔⵠ = function () {
      this.ᐃΔⵠΔ[sf](bo[Mo].stringify([29]));
    };
    this.ⵠΔⲆΔⵠⲆΔⲆᐃ = function () {
      this.ⵠΔⲆᐃᐃ(pt[312]);
    };
    this.ᐃΔⲆᐃⲆΔᐃ = function () {
      this.ⵠΔⲆᐃᐃ(pt[313]);
    };
    this.ᐃⵠᐃⲆⲆⵠᐃᐃⵠ = function (a) {
      this.ᐃΔⵠΔ[sf](Yo[la].stringify([32, a]));
      lx.ΔᐃᐃⲆⵠ.open = false;
    };
    this.ΔⵠᐃⲆⵠΔⵠⲆᐃ = function (a) {
      for (var b = Tf[a - 1].items, c = 0; b.length > c && lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length < lx.ᐃΔᐃⲆ.max; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          lx.ᐃΔᐃⲆ.ⲆⲆⲆⵠⵠⵠⵠ(1, 0);
        } else {
          this.ᐃΔᐃⲆΔᐃⲆ([0, d, e]);
        }
      }
    };
    this.ᐃΔᐃⲆΔᐃⲆ = function (b) {
      for (var c = b.length, d = lx.ᐃΔᐃⲆ, e = 1; c > e; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ⲆΔⵠΔⲆ.length; h++) {
          if (d.ⲆΔⵠΔⲆ[h].id == f) {
            d.Δᐃⵠ[f] += g;
            break;
          }
        }
        if (h == d.ⲆΔⵠΔⲆ.length) {
          d.Δᐃⵠ[f] = g;
          d.ⲆΔⵠΔⲆ.push(nx.ΔⲆΔ[f]);
          nx.ⲆⲆᐃΔⵠⲆΔ();
        }
      }
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ᐃⲆᐃⵠ = function (b, c, d, e, f, g, a) {
      lx.ᐃⲆᐃⵠ.ΔⵠⲆΔ = b / 100;
      lx.ᐃⲆᐃⵠ.ᐃⵠⲆ = c / 100;
      lx.ᐃⲆᐃⵠ.c = d / 100;
      lx.ᐃⲆᐃⵠ.ᐃᐃⵠ = e / 100;
      lx.ᐃⲆᐃⵠ.ᐃⲆᐃ = f / 100;
      lx.ᐃⲆᐃⵠ.ΔΔᐃⲆⲆᐃᐃ = g / 100;
      lx.ⲆⵠΔⲆⲆ = a;
    };
    this.ᐃⲆᐃⵠⲆⵠΔⲆⵠ = function (a) {
      nx.ΔᐃΔᐃ.modify(a, 2);
    };
    this.ⵠⲆⲆⲆⲆⲆᐃⲆΔ = function (a) {
      nx.ΔᐃΔᐃ.modify(a, 0);
    };
    this.claimed = function (a) {
      nx.ΔᐃΔᐃ.modify(a, 3);
    };
    this.ⲆᐃᐃⵠⵠⲆⵠⵠΔ = function (a, b) {
      lx.ᐃⲆᐃⵠ.ΔⵠⲆΔ = a / 100;
      lx.ⲆⵠΔⲆⲆ = b;
    };
    this.ᐃΔΔΔⵠᐃⲆⵠΔ = function (a) {
      lx.ᐃⲆᐃⵠ.ᐃᐃⵠ = a / 100;
    };
    this.ΔΔΔⲆⲆⲆⲆᐃⲆ = function (a) {
      lx.ᐃⲆᐃⵠ.ᐃⵠⲆ = a / 100;
    };
    this.ⵠᐃⲆⲆᐃⲆⵠᐃΔ = function (a) {
      lx.ᐃⲆᐃⵠ.ΔΔᐃⲆⲆᐃᐃ = a / 100;
    };
    this.ⲆⲆⲆⲆᐃΔⲆⲆᐃ = function (a) {
      lx.ᐃⲆᐃⵠ.c = a / 100;
    };
    this.ΔⲆⵠΔᐃᐃⵠᐃⵠ = function (a) {
      kx.time = a;
      kx.transition = Qs;
      ox.transition = 1;
    };
    this.ⵠΔΔⵠⲆΔⵠΔΔ = function () {
      document.getElementById("game_body").style.backgroundColor = tr.ᐃⵠΔⲆⵠ[kx.time];
    };
    this.ᐃⲆᐃΔᐃΔΔΔΔ = function (a) {
      if (kx.mode == 1 && kx.ⲆⲆⲆᐃ[a].ⵠⲆⲆΔΔ !== "spectator") {
        this.ⵠΔⲆᐃᐃ(kx.ⲆⲆⲆᐃ[a].ⵠⲆⲆΔΔ + pt[314]);
      }
      kx.ⲆⲆⲆᐃ[a].ᐃᐃΔⵠᐃ = false;
    };
    this.ΔΔⲆⲆΔΔᐃⲆⲆ = function (a) {
      var b = new Uint16Array(a);
      ⲆⲆΔⵠ.ⲆⲆⵠ.ⵠⲆΔΔⵠ(b[1], b[2]);
    };
    this.ⲆⵠᐃⲆΔⲆⲆⵠⲆ = function (a) {
      var b = new Uint16Array(a);
      lx.ⲆⲆⵠ.ⵠⲆΔΔⵠ(b[1], b[2]);
    };
    this.ⲆᐃⵠᐃⵠΔⲆⲆΔ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = kx.ⵠΔⲆᐃⵠ[i * kx.ⲆⵠΔΔⲆⲆⵠ + g];
        if (k && k.ᐃᐃⲆ) {
          if (ox.loaded && ox.ΔΔΔᐃᐃ) {
            ox.ᐃᐃⲆ(b[5 + f * 4] & 1, ᐃⲆᐃᐃᐃ[k.type], k.x, k.y);
          }
          k.ᐃᐃⲆ.angle = j;
          k.ᐃᐃⲆ.ⵠⵠᐃ = j;
        }
      }
    };
    this.ᐃΔᐃⲆΔΔᐃⲆⲆ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
        var p = c[4 + i];
        var q = ix.ΔΔᐃⲆ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ⵠⵠᐃ = Vl;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ⵠⵠᐃ = Xg;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ⵠⵠᐃ = wn;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ⵠⵠᐃ = bh;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ⵠⵠᐃ = gr;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ⵠⵠᐃ = T;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ⵠⵠᐃ = ag;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ⵠⵠᐃ = hq;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ⵠⵠᐃ = za;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ⵠⵠᐃ = wn;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ⵠⵠᐃ = hq;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ⵠⵠᐃ = ag;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ⵠⵠᐃ = hj;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ⵠⵠᐃ = za;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ⵠⵠᐃ = Qs;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ⵠⵠᐃ = jn;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ⵠⵠᐃ = Jq;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ⵠⵠᐃ = za;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ⵠⵠᐃ = T;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ⵠⵠᐃ = jn;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ⵠⵠᐃ = jn;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ⵠⵠᐃ = ns;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ⵠⵠᐃ = Vl;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ⵠⵠᐃ = _k;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ⵠⵠᐃ = jn;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ⵠⵠᐃ = T;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ⵠⵠᐃ = hj;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
        }
        if (ox.loaded && ox.ΔΔΔᐃᐃ && f) {
          ox.ᐃᐃⲆ(c[3 + i] & 1, ⵠⲆᐃⲆ[p], f.x, f.y);
        }
      }
    };
    this.ⵠᐃⵠⲆᐃ = function () {
      this.ᐃΔⵠΔ[sf](Io[zo].stringify([33, lx.ⵠᐃⵠⲆᐃ.ΔⲆᐃΔ, lx.ⵠᐃⵠⲆᐃ.ᐃⵠᐃⵠΔ]));
    };
    this.ᐃⵠᐃᐃᐃΔᐃΔΔ = function (a, b) {
      this.ᐃΔⵠΔ[sf](Io[Xo].stringify([14, b, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ᐃⵠⵠⲆⵠᐃᐃ = function (a, b, c) {
      if (b) {
        this.ᐃΔⵠΔ[sf](Io[Xo].stringify([17, b, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
      } else {
        this.ᐃΔⵠΔ[sf](Io[Qo].stringify([0, c, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
      }
    };
    this.ᐃⵠⲆΔᐃᐃⲆⵠⲆ = function (a) {
      this.ᐃΔⵠΔ[sf](mq[ta].stringify([12, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ⵠⲆΔΔᐃⲆΔⲆΔ = function (a) {
      this.ᐃΔⵠΔ[sf](mq[Ta].stringify([30, a]));
    };
    this.ᐃᐃⵠΔΔᐃᐃᐃⵠ = function (a) {
      this.ᐃΔⵠΔ[sf]($o[zo].stringify([21, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ΔⲆⲆᐃᐃⵠⲆΔΔ = function (a, b) {
      this.ᐃΔⵠΔ[sf](Yo[ta].stringify([9, b, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ, a.type]));
    };
    this.ᐃᐃᐃⲆⲆⵠⵠᐃᐃ = function (a, b) {
      this.ᐃΔⵠΔ[sf](Yo[ta].stringify([34, b, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ΔⲆⲆⲆᐃⲆⲆⵠᐃ = function (a, b, c) {
      this.ᐃΔⵠΔ[sf]($o[Xo].stringify([13, b, c, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ⵠΔⲆⲆᐃⵠⲆ = function (a) {
      this.ᐃΔⵠΔ[sf](mq[ta].stringify([1, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ, a.type]));
    };
    this.ⲆᐃΔⲆΔᐃᐃᐃΔ = function (a) {
      this.ᐃΔⵠΔ[sf](mq[ta].stringify([26, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ⲆⵠⵠᐃΔⵠΔⲆⲆ = function (a) {
      this.ᐃΔⵠΔ[sf](mq[ta].stringify([27, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ⲆⵠⵠⲆⵠᐃΔΔⲆ = function (a) {
      this.ᐃΔⵠΔ[sf](oq[sa].stringify([23, a.ΔⲆᐃΔ, a.ᐃⵠᐃⵠΔ]));
    };
    this.ⵠⲆⵠⲆΔΔⵠᐃⲆ = function (a) {
      this.ᐃΔⵠΔ[sf](pa[la].stringify([5, a.ᐃⵠᐃⵠΔ]));
    };
    this.ⵠᐃⲆⲆᐃΔⲆ = function (a) {
      c.ᐃΔⵠΔ[sf](Aa[Ta].stringify([22, lx.ΔᐃᐃΔᐃ.id, lx.ⲆⲆⲆΔⵠ[a]]));
    };
    this.ᐃⵠⵠⲆᐃᐃΔⲆᐃ = function () {
      c.ᐃΔⵠΔ[sf](Sa[Da].stringify([38, lx.ΔᐃᐃΔᐃ.ΔⲆᐃΔ, lx.ΔᐃᐃΔᐃ.id]));
    };
    this.ⲆⲆⵠᐃⲆⵠⲆ = function () {
      c.ᐃΔⵠΔ[sf](Ra[_a].stringify([18]));
    };
    this.ᐃⲆⲆΔᐃⲆⵠΔⵠ = function () {
      c.ᐃΔⵠΔ[sf](Ra[Ta].stringify([4, lx.ΔᐃᐃΔᐃ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        lx.ΔᐃᐃΔᐃ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        lx.ΔᐃᐃΔᐃ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⵠⵠⵠ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        kx.ΔⵠΔⵠⲆⲆⲆⵠΔ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = kx.ⲆⵠΔΔⲆⲆⵠ * w + y;
        if (x & 1) {
          kx.ⲆⲆᐃΔᐃΔᐃΔΔ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = Math.PI * (e[q + 1] / 255) * 2;
          if (kx.ⵠΔⲆᐃⵠ[z]) {
            var I = kx.ⵠΔⲆᐃⵠ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ⲆᐃΔ.ᐃᐃⵠΔ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (lx.id !== I.id || w === 0) {
              I.ⵠⵠᐃⵠΔΔⵠ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⵠⵠⵠⵠⲆ = F;
            I.ⲆⲆⲆⵠⲆ = G;
            if (I.ⵠⵠᐃ) {
              I.ⵠⵠᐃ(x);
            }
          } else {
            var J = new Mf(A, w, y, B, D, H, x, E, F, G);
            kx.ⵠΔⲆᐃⵠ[z] = J;
            kx.ⵠⵠⵠ[A].push(J);
          }
        }
      }
    };
    this.ΔⵠⲆⵠ = function (a) {
      this.ⲆⵠⲆⵠᐃᐃΔ = sx;
      var b = new Uint16Array(a);
      lx.ΔΔΔΔΔ.ΔⵠΔΔⵠ(b);
    };
    this.ᐃⲆⵠΔⵠᐃⵠⲆⲆ = function (a) {
      if (Hs !== mr) {
        Is = Hs;
      }
      if (a.length > 0) {
        Hs = JSON.parse(JSON.stringify(Is));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = Is[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ᐃⲆᐃ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ΔΔⲆⵠΔᐃⵠ = function (a) {
      if (a && a.length !== 0) {
        lx.ΔΔⲆⵠΔᐃⵠ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          Ⲇⵠ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = 0; b.length > h; h++) {
            if (b[h].charAt(0) === "#") {
              Ⲇⵠ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(8);
            } else {
              Ⲇⵠ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + 16, g);
          }
          c.height = f;
          c.width = g;
          h = 0;
          for (; b.length > h; h++) {
            var i = Tt(1, b[h], 14, Ⲇⵠ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, 8, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        lx.ΔΔⲆⵠΔᐃⵠ.message = undefined;
      }
    };
    this.ΔⲆⵠⲆⵠ = function (a) {
      var b = kx.ⵠΔⲆᐃⵠ[a[1] * kx.ⲆⵠΔΔⲆⲆⵠ];
      if (b) {
        if (kx.mode === 2 && b.Δⵠⵠⵠ === 0) {
          if (lx.ΔᐃⲆᐃⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + Δᐃᐃᐃⵠ);
            } else {
              b.text.push(Δᐃᐃᐃⵠ + "... " + a[2]);
            }
          } else {
            b.text.push(ⲆΔⵠΔⵠᐃⵠ[Math.floor(Math.random() * ⲆΔⵠΔⵠᐃⵠ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⲆⲆⵠᐃⲆⵠᐃΔΔ = function (a) {
      if (lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ.length !== lx.ᐃΔᐃⲆ.max || Is[a].ΔⲆᐃⵠ === 29 || lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(Is[a].ΔⲆᐃⵠ) != -1 || lx.ᐃΔᐃⲆ.ⵠⲆΔⵠᐃⵠⵠⵠⵠ(Is[a].r)) {
        this.ᐃΔⵠΔ[sf](bo[Mo].stringify([2, a]));
        return 1;
      } else {
        this.ᐃΔⲆᐃⲆΔᐃ();
        return 0;
      }
    };
    this.ⵠⵠⵠⲆⲆ = function (a) {
      lx.ᐃΔⵠᐃ.ᐃⲆⲆⵠᐃᐃᐃⲆⲆ(a);
    };
    this.ΔⲆΔⲆΔ = function (a) {
      lx.ᐃΔⵠᐃ.ΔⲆΔⲆΔ = a;
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ⵠⵠΔⵠΔ = function (a) {
      lx.ᐃΔⵠᐃ.ⵠⵠΔⵠΔ = a;
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ⵠⲆΔⵠⲆⲆⲆ = function (a) {
      lx.ᐃΔⵠᐃ.ⵠⲆΔⵠⲆⲆⲆ = a;
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ⵠⵠᐃⲆᐃⵠΔⲆᐃ = function (a) {
      this.ⵠΔⲆᐃᐃ(pt[315]);
    };
    this.ᐃᐃⵠΔⵠΔⵠⵠᐃ = function () {
      lx.ᐃΔⵠᐃ.ⲆᐃⵠⲆⲆΔⵠ();
    };
    this.ⵠⲆᐃⵠΔ = function (a) {
      nx.ⵠⲆᐃⵠΔ.ⲆⲆⲆᐃ = [];
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * kx.w / 250),
          y: Math.floor(a[d + 1] * kx.ᐃⵠⲆ / 250)
        };
        if (b && !c && !lx.ⲆⲆᐃⲆΔᐃΔ && ⲆᐃΔ.ᐃᐃⵠΔ(e, b) < 250) {
          c += 1;
        } else {
          nx.ⵠⲆᐃⵠΔ.ⲆⲆⲆᐃ.push(e);
        }
      }
    };
    this.ᐃⲆⲆΔⵠⵠᐃⵠΔ = function () {
      lx.ⵠᐃⵠⲆᐃ.open = cj;
      lx.ⵠᐃᐃΔⲆ.enabled = false;
      lx.ⵠᐃᐃΔⲆ.ⵠⲆⲆⲆΔ = -1;
      lx.ⵠᐃᐃΔⲆ.label = null;
      lx.ⵠᐃᐃΔⲆ.ΔⲆⲆⲆⵠΔⵠ = null;
      lx.ⵠᐃᐃΔⲆ.now = -1;
    };
    this.ⵠᐃᐃΔⲆ = function (a) {
      wf.Ⲇⵠⵠᐃⵠᐃᐃ = a;
      lx.ⵠᐃᐃΔⲆ.enabled = true;
      lx.ⵠᐃᐃΔⲆ.ⵠⲆⲆⲆΔ = new Date().getTime();
      lx.ⵠᐃᐃΔⲆ.label = null;
      lx.ⵠᐃᐃΔⲆ.now = -1;
      for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
        var d = lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(b[c]);
        if (d != -1) {
          lx.ᐃΔᐃⲆ.ⵠᐃᐃⵠΔⲆΔ(b.length[c], d);
        }
      }
      lx.ᐃΔⵠᐃ.ⲆᐃⵠⲆⲆΔⵠ();
    };
    this.ⲆᐃⵠⲆΔⵠⵠⲆⵠ = function (a, b, c) {
      this.ⵠᐃⲆΔⲆΔⵠ(a, b * 256 + c);
    };
    this.ⵠᐃⲆΔⲆΔⵠ = function (a, b) {
      lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
      lx.ᐃΔᐃⲆ.ΔⲆΔⵠΔⲆΔ(a, b, lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(a));
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ⲆᐃΔⲆⲆΔΔᐃⵠ = function (a) {
      lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
      lx.ᐃⵠΔⵠᐃ.wait = true;
      var b = lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(a);
      lx.ᐃΔᐃⲆ.ΔⲆΔⵠΔⲆΔ(a, 1, b);
      if (b >= 0 && !lx.ᐃΔᐃⲆ.Δᐃⵠ[a]) {
        lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
      }
      if (a == 159) {
        lx.ⲆⲆⲆΔⵠ = [lx.id];
      }
    };
    this.ⵠⵠᐃⲆΔⲆΔⲆΔ = function () {
      this.ᐃΔⵠΔ[sf](Io[zo].stringify([37]));
    };
    this.ⵠⲆᐃⵠᐃᐃⲆΔΔ = function (a) {
      this.ᐃΔⵠΔ[sf](Yo[Qo].stringify([28, a.ⲆⲆⲆⲆᐃ, a.id]));
    };
    this.ⵠⲆΔΔΔΔΔᐃᐃ = function (a, b) {
      this.ᐃΔⵠΔ[sf](Yo[ta].stringify([7, a, b]));
    };
    this.ⲆΔⲆΔⵠΔΔⲆΔ = function () {
      var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      if (a) {
        var b = Math.PI * 2;
        this.ᐃΔⵠΔ[sf](Yo[Qo].stringify([15, lx.ᐃΔⵠᐃ.ΔᐃΔⵠ, Math.floor((a.angle + b) % b * 255 / b), lx.ᐃΔⵠᐃ.mode]));
      }
    };
    this.ⲆⲆᐃⵠⵠ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
          this.ᐃΔⵠΔ[sf]($o[Xo].stringify([16, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!lx.ΔᐃⲆᐃⲆ) {
            if (a === lx.ᐃΔⵠᐃ.ΔᐃΔⵠ) {
              lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
            } else {
              lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case zr.ΔΔᐃⵠΔᐃΔΔⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!lx.ΔᐃⲆᐃⲆ) {
            lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
            if ((c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ]) && a === c.right) {
              this.ᐃΔⵠΔ[sf](mq[ta].stringify([16, 7]));
            } else {
              lx.ᐃΔⲆΔⲆ.wait = true;
              this.ᐃΔⵠΔ[sf](oq[sa].stringify([16, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!lx.ΔᐃⲆᐃⲆ) {
            lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
            if ((c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ]) && a === c.right) {
              this.ᐃΔⵠΔ[sf](pa[la].stringify([16, 7]));
            } else {
              this.ᐃΔⵠΔ[sf](Aa[Ta].stringify([16, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!lx.ΔᐃⲆᐃⲆ) {
            lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
            var c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
            this.ᐃΔⵠΔ[sf](Aa[Ta].stringify([16, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ]) && a !== c.ᐃⵠⲆⲆⵠ) {
            lx.ⲆⵠⲆⲆᐃ.wait = Qs;
          }
          this.ᐃΔⵠΔ[sf]($o[ta].stringify([16, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ᐃΔⵠΔ[sf](Sa[Da].stringify([16, a]));
      }
    };
    this.ⲆΔᐃⵠᐃΔⵠⵠᐃ = function (a) {
      this.ᐃΔⵠΔ[sf](Yo[Mo].stringify([11, a]));
    };
    this.ⵠⵠΔⲆⵠᐃⵠᐃΔ = function (a) {
      lx.ᐃⵠΔⵠᐃ.wait = jn;
      var b = lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(a);
      lx.ᐃΔᐃⲆ.ⵠᐃᐃⵠΔⲆΔ(a, b);
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ⵠᐃⵠⲆⲆΔⵠⵠᐃ = function (a, b) {
      this.ᐃΔⵠΔ[sf](bo[la].stringify([20, a]));
    };
    this.ΔⵠⲆⲆⵠΔᐃⲆⲆ = function (a, b) {
      this.ᐃΔⵠΔ[sf](Io[zo].stringify([35, a]));
    };
    this.ᐃΔΔⵠⲆⲆΔᐃΔ = function (a) {
      lx.ᐃⵠΔⵠᐃ.wait = true;
      var b = lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(a);
      lx.ᐃΔᐃⲆ.ΔⲆΔⵠΔⲆΔ(a, 1, b);
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ΔⲆᐃⵠΔᐃᐃⲆⵠ = function (a) {
      var b = a[1];
      var c = a[2];
      lx.ᐃⵠΔⵠᐃ.wait = ol;
      var d = lx.ᐃΔᐃⲆ.ⲆⲆⵠΔⵠ(b);
      lx.ᐃΔᐃⲆ.ΔⲆΔⵠΔⲆΔ(b, c, d);
      lx.ᐃΔⵠᐃ.ⵠⵠᐃ();
    };
    this.ΔΔⵠⵠⵠΔᐃⵠⵠ = function () {
      this.ᐃΔⵠΔ[sf](Io[zo].stringify([36]));
    };
    this.ⲆⵠⲆⵠΔᐃΔΔΔ = function (a) {
      var b = Math.PI * 2;
      this.ᐃΔⵠΔ[sf](Yo[Qo].stringify([24, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆΔᐃⲆᐃⵠᐃᐃⵠ = function (a) {
      var b = Math.PI * 2;
      this.ᐃΔⵠΔ[sf](Yo[Qo].stringify([19, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ΔⵠⲆᐃᐃᐃᐃⲆΔ = function (a) {
      this.ᐃΔⵠΔ[sf](ⲆΔⵠΔⲆⲆⲆ[Do].stringify([3, a]));
    };
    this.ⲆⲆⲆΔΔⵠⵠΔⵠ = function (a) {
      this.ᐃΔⵠΔ[sf](mq[ta].stringify([31, a]));
    };
    this.ⵠΔⲆⵠᐃᐃⲆᐃᐃ = function (a) {
      var b = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
      if (lx.ΔᐃⲆᐃⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + Δᐃᐃᐃⵠ);
        } else {
          b.text.push(Δᐃᐃᐃⵠ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ᐃΔⵠΔ[sf](mq[ta].stringify([8, a]));
    };
    this.ᐃᐃᐃΔᐃ = function (a) {
      var b = ⲆⲆΔⵠ.select.ⵠⵠⵠ;
      if (b.length != 0) {
        var c = [3];
        var d = [];
        ⲆᐃΔ.ⲆΔΔⵠᐃⵠⲆ(a, {
          x: ⲆⲆΔⵠ.ⲆⲆⵠ.rx,
          y: ⲆⲆΔⵠ.ⲆⲆⵠ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ΔⵠᐃΔΔᐃⵠᐃΔ);
        }
        c.push(d);
        this.ᐃΔⵠΔ[sf](oq[sa].stringify(c));
      }
    };
    this.ⵠΔⵠⵠⲆⲆⲆ = 0;
    this.ΔⲆᐃᐃⲆᐃⲆ = {
      ⵠⵠ: 0,
      ΔᐃⲆ: 0
    };
    this.ⲆⵠⲆⵠⵠⵠᐃⲆⲆ = function () {
      if (sx - this.ⵠΔⵠⵠⲆⲆⲆ > 50) {
        this.ⵠΔⵠⵠⲆⲆⲆ = sx;
        var a = lx.ⲆⲆⵠ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (b != this.ΔⲆᐃᐃⲆᐃⲆ.ⵠⵠ || c != this.ΔⲆᐃᐃⲆᐃⲆ.ΔᐃⲆ) {
          this.ᐃΔⵠΔ[sf](Aa[la].stringify([10, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ΔⲆᐃᐃⲆᐃⲆ.ⵠⵠ = b;
          this.ΔⲆᐃᐃⲆᐃⲆ.ΔᐃⲆ = c;
        }
      }
    };
    this.ΔΔⵠⵠⲆΔⲆ = 0;
    this.ΔΔⵠⵠⲆⵠⵠⵠⲆ = function () {
      if (sx - this.ΔΔⵠⵠⲆΔⲆ > 60000) {
        this.ΔΔⵠⵠⲆΔⲆ = sx;
        this.ping();
      }
    };
    this.ᐃᐃΔⲆⲆᐃᐃᐃⲆ = function () {
      lx.reconnect.enabled = true;
      if (this.ᐃΔⵠΔ.ⵠⲆᐃⵠᐃ == this.ⵠⲆᐃⵠᐃ) {
        this.ⵠⲆᐃⵠᐃ++;
        this.ᐃΔⵠΔ.close();
        Δⵠᐃᐃ.connect();
      }
    };
    this.ᐃᐃΔᐃⵠΔⲆⵠⵠ = function (a) {
      this.ⵠΔⲆᐃᐃ(pt[316]);
      for (var b = 1; b < a.length; b++) {
        lx.ⲆⲆⲆΔⵠ.push(a[b]);
      }
    };
    this.ᐃᐃᐃⲆᐃΔΔᐃⲆ = function (a) {
      this.ⵠΔⲆᐃᐃ(kx.ⲆⲆⲆᐃ[a].ⵠⲆⲆΔΔ + pt[318]);
      lx.ⲆⲆⲆΔⵠ.push(a);
      var b = document.getElementById("team_box");
      if (nx.ᐃⲆΔᐃⵠ != -1 && b.style.display == "inline-block") {
        nx.ⲆⲆᐃⵠᐃ[nx.ᐃⲆΔᐃⵠ].action();
      }
    };
    this.ᐃᐃΔⵠΔΔⲆⲆᐃ = function () {
      this.ⵠΔⲆᐃᐃ(pt[319]);
      lx.ΔᐃᐃΔᐃ.wait = true;
      lx.ⲆⲆⲆΔⵠ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ΔⲆⲆᐃΔⲆᐃⵠⲆ = function (a) {
      if (a == lx.id) {
        this.ⵠΔⲆᐃᐃ(pt[320]);
        lx.ΔᐃᐃΔᐃ.wait = Vl;
        lx.ⲆⲆⲆΔⵠ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⵠΔⲆᐃᐃ(kx.ⲆⲆⲆᐃ[a].ⵠⲆⲆΔΔ + pt[321]);
        for (var b = 0; b < lx.ⲆⲆⲆΔⵠ.length; b++) {
          if (lx.ⲆⲆⲆΔⵠ[b] == a) {
            lx.ⲆⲆⲆΔⵠ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (nx.ᐃⲆΔᐃⵠ != -1 && c.style.display == "inline-block") {
          nx.ⲆⲆᐃⵠᐃ[nx.ᐃⲆΔᐃⵠ].action();
        }
      }
    };
    this.ᐃᐃᐃΔⲆⲆⲆⵠⲆ = function (a) {
      lx.ᐃᐃΔⵠᐃ = hh;
      this.ⵠΔⲆᐃᐃ(pt[322]);
      if (this.ᐃΔⵠΔ.ⵠⲆᐃⵠᐃ == this.ⵠⲆᐃⵠᐃ) {
        this.ⵠⲆᐃⵠᐃ++;
        nx.ᐃΔᐃΔⵠ(hx.ΔΔΔᐃᐃ);
        this.ᐃΔⵠΔ.close();
      }
    };
    this.ⲆᐃⵠΔΔⵠᐃⲆΔ = function (a, b) {
      lx.ᐃᐃΔⵠᐃ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      lx.ᐃΔⵠⲆΔᐃⵠ.ᐃΔⲆΔⵠⵠⵠ = st[a][Math.floor(Math.random() * st[a].length)];
      lx.ᐃΔⵠⲆΔᐃⵠ.ⵠᐃⲆΔⵠ = ⲆᐃΔ.ⲆᐃⵠⵠᐃⲆΔ(kx.ⲆⲆⲆᐃ[lx.id].ⵠᐃⲆΔⵠ);
      lx.ᐃΔⵠⲆΔᐃⵠ.ⲆⲆⵠⵠⲆᐃΔ = ⲆᐃΔ.ⲆᐃⵠⵠᐃⲆΔ(d[1]);
      lx.ᐃΔⵠⲆΔᐃⵠ.ⲆⵠⵠⲆΔ = c[1];
      this.ⵠΔⲆᐃᐃ(pt[317]);
      if (this.ⵠⲆᐃⵠᐃ == this.ᐃΔⵠΔ.ⵠⲆᐃⵠᐃ) {
        this.ⵠⲆᐃⵠᐃ++;
        nx.ᐃΔᐃΔⵠ(mx.ΔΔΔᐃᐃ);
        this.ᐃΔⵠΔ.close();
        try {
          Ya.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.ᐃΔⵠΔ[sf]("[6]");
    };
    this.ⲆΔᐃⲆΔⵠⲆΔⵠ = function () {
      if (this.ᐃΔⵠΔ.readyState == 3) {
        this.ⲆⵠⲆⵠᐃᐃΔ -= 600000;
      }
    };
    this.ΔⵠΔΔᐃᐃᐃᐃΔ = function () {
      if (rx > 5) {
        this.ⲆⵠⲆⵠᐃᐃΔ = sx;
      }
      if (sx - this.ⲆⵠⲆⵠᐃᐃΔ > 600000) {
        this.ⲆⵠⲆⵠᐃᐃΔ = sx;
        this.ᐃᐃΔⲆⲆᐃᐃᐃⲆ();
      }
    };
    this.ⲆⲆᐃΔᐃⲆⲆΔΔ = function (b) {
      vx++;
      clearTimeout(this.ⲆΔᐃⲆⵠ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⵠⵠⲆⲆ[this.ⲆⵠⲆᐃΔ][this.ᐃⲆⵠⵠᐃⲆᐃ[this.ⲆⵠⲆᐃΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⲆⵠⲆⵠᐃᐃΔ = sx;
      lx.ᐃⲆᐃⵠ.ⵠⲆΔᐃⵠ.ⲆᐃᐃΔΔ = lx.ᐃⲆᐃⵠ.ⵠⲆΔᐃⵠ.ⵠᐃⵠⲆΔ;
      lx.ᐃⲆᐃⵠ.ΔⲆᐃᐃΔΔⵠ.ⲆᐃᐃΔΔ = lx.ᐃⲆᐃⵠ.ΔⲆᐃᐃΔΔⵠ.ⵠᐃⵠⲆΔ;
      lx.ᐃⲆᐃⵠ.ⵠⵠⵠᐃⵠᐃⲆ.ⲆᐃᐃΔΔ = lx.ᐃⲆᐃⵠ.ⵠⵠⵠᐃⵠᐃⲆ.ⵠᐃⵠⲆΔ;
      lx.ᐃⲆᐃⵠ.ᐃⵠᐃⲆⵠⲆᐃ.ⲆᐃᐃΔΔ = lx.ᐃⲆᐃⵠ.ᐃⵠᐃⲆⵠⲆᐃ.ⵠᐃⵠⲆΔ;
      lx.ᐃⲆᐃⵠ.ᐃΔᐃⲆⵠ.ⲆᐃᐃΔΔ = lx.ᐃⲆᐃⵠ.ᐃΔᐃⲆⵠ.ⵠᐃⵠⲆΔ;
      lx.ᐃⲆᐃⵠ.ΔⵠⲆΔ = 1;
      lx.ᐃⲆᐃⵠ.c = 1;
      lx.ᐃⲆᐃⵠ.ᐃⵠⲆ = 1;
      lx.ᐃⲆᐃⵠ.ᐃᐃⵠ = 1;
      lx.ᐃⲆᐃⵠ.ᐃⲆᐃ = 1;
      lx.ᐃⲆᐃⵠ.ΔΔᐃⲆⲆᐃᐃ = 1;
      lx.ᐃᐃᐃⵠᐃⵠⲆ = false;
      nx.ⵠᐃⲆⵠΔ.display = 0;
      lx.ᐃΔᐃⲆ.ⲆΔⵠΔⲆ = [];
      lx.ᐃΔᐃⲆ.Δᐃⵠ = [];
      lx.ᐃΔᐃⲆ.max = 10;
      lx.ᐃΔᐃⲆ.ΔᐃΔΔΔⲆᐃ = 0;
      lx.ᐃΔᐃⲆ.ΔⵠⲆⲆΔ = 0;
      lx.ᐃΔᐃⲆ.id = -1;
      nx.ⵠᐃΔⲆᐃⵠⵠ = 1;
      nx.ΔᐃΔᐃᐃⵠᐃ = 1;
      nx.ΔΔΔᐃᐃⵠΔ = 1;
      nx.ⵠΔⵠᐃⲆⵠΔ = 1;
      lx.ᐃᐃΔⵠᐃ = true;
      lx.ᐃΔᐃⲆ.ᐃΔᐃᐃⵠΔⲆ.stop();
      lx.ᐃΔⵠᐃ.ⵠⵠⵠⵠΔ = [];
      lx.ᐃΔⵠᐃ.ⵠΔⲆⵠΔ = false;
      lx.ᐃΔⵠᐃ.ⲆᐃⲆᐃΔΔᐃᐃΔ = Zh;
      lx.ᐃΔⵠᐃ.ΔᐃΔⵠ = -1;
      lx.ᐃΔⵠᐃ.id = -1;
      lx.ᐃΔⵠᐃ.ⵠⵠⵠⲆⲆ = false;
      lx.ᐃΔⵠᐃ.ΔⲆΔⲆΔ = vg;
      lx.ᐃΔⵠᐃ.ⵠⵠΔⵠΔ = Qr;
      lx.ᐃΔⵠᐃ.ⵠⲆΔⵠⲆⲆⲆ = false;
      lx.ᐃΔⵠᐃ.timeout = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1, 1);
      lx.ᐃΔⲆΔⲆ.timeout = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1 / 10, 1);
      lx.ᐃΔⲆΔⲆ.wait = Ah;
      lx.ⲆⵠⲆⲆᐃ.timeout = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1 / 5, 1);
      lx.ⲆⵠⲆⲆᐃ.wait = hs;
      lx.ᐃⵠΔⵠᐃ.timeout = new ⲆᐃΔ.ΔⲆⵠᐃ(Xa, 0, 1, 0, 1, 1);
      lx.ᐃⵠΔⵠᐃ.wait = mk;
      lx.ΔᐃᐃΔᐃ.id = -1;
      lx.ΔᐃᐃΔᐃ.ΔⲆᐃΔ = -1;
      lx.ΔᐃᐃΔᐃ.wait = lg;
      lx.ΔᐃᐃΔᐃ.timeout = new ⲆᐃΔ.ΔⲆⵠᐃ(false, 0, 1, 0, 1 / 30, 1);
      nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.x = -1;
      nx.ⵠⲆᐃⵠΔ.ⲆΔᐃⲆⲆ.y = -1;
      nx.ⲆᐃΔⲆ.open = cj;
      nx.ⵠⲆᐃⵠΔ.ⲆⲆⲆᐃ = [];
      lx.ⵠⲆⵠΔΔ.enabled = Ao;
      kx.mode = b[1];
      if (Cn !== b[20] && Ja !== b[21]) {
        kx.ᐃΔⲆⲆᐃ = b[20];
        kx.ⲆⲆᐃⲆᐃ = b[21];
        kx.w = kx.ⲆⲆᐃⵠⲆⲆⲆ * kx.ᐃΔⲆⲆᐃ;
        kx.ᐃⵠⲆ = kx.ⲆⲆᐃⲆᐃ * kx.ⵠⲆⲆᐃΔⵠⵠ;
      }
      kx.ⵠⲆΔⲆΔⲆᐃ = b[22];
      kx.ⲆⵠΔΔⲆ = b[23];
      c.ΔΔⲆⵠΔᐃⵠ(b[24]);
      c.ᐃⲆⵠΔⵠᐃⵠⲆⲆ(b[25]);
      lx.ⲆΔΔⲆⲆ.Ⲇⵠᐃᐃᐃ = b[26];
      lx.ⲆᐃⵠᐃΔΔΔ = 0;
      lx.ⲆᐃⲆⵠⵠ.Ⲇⵠᐃᐃᐃ = b[27];
      kx.ⲆᐃⲆⵠⲆᐃⲆⲆᐃ(b[19]);
      kx.time = b[5];
      kx.ΔⲆᐃΔⵠ.ⵠⲆᐃⵠⲆ = b[15];
      kx.ΔⲆᐃΔⵠ.ΔⵠΔΔⵠ = new Date().getTime();
      nx.ΔᐃΔᐃ.ⵠᐃⲆΔⲆΔΔ = b[16];
      kx.transition = false;
      lx.ΔⵠΔ = b[2];
      nx.ΔᐃΔᐃ.reset();
      lx.ⲆⲆⲆΔⵠ = b[8];
      kx.ⵠⵠⵠ[0] = [];
      kx.ⵠⵠⵠ[100] = [];
      kx.ⵠⵠⵠ[2] = [];
      kx.ⵠⵠⵠ[1] = [];
      kx.ⵠⵠⵠ[6] = [];
      kx.ⵠⵠⵠ[3] = [];
      kx.ⵠⵠⵠ[31] = [];
      kx.ⵠⵠⵠ[37] = [];
      kx.ⵠⵠⵠ[43] = [];
      kx.ⵠⵠⵠ[44] = [];
      kx.ⵠⵠⵠ[39] = [];
      kx.ⵠⵠⵠ[40] = [];
      kx.ⵠⵠⵠ[54] = [];
      kx.ⵠⵠⵠ[55] = [];
      kx.ⵠⵠⵠ[4] = [];
      kx.ⵠⵠⵠ[7] = [];
      kx.ⵠⵠⵠ[8] = [];
      kx.ⵠⵠⵠ[9] = [];
      kx.ⵠⵠⵠ[10] = [];
      kx.ⵠⵠⵠ[15] = [];
      kx.ⵠⵠⵠ[16] = [];
      kx.ⵠⵠⵠ[17] = [];
      kx.ⵠⵠⵠ[45] = [];
      kx.ⵠⵠⵠ[46] = [];
      kx.ⵠⵠⵠ[47] = [];
      kx.ⵠⵠⵠ[48] = [];
      kx.ⵠⵠⵠ[49] = [];
      kx.ⵠⵠⵠ[53] = [];
      kx.ⵠⵠⵠ[11] = [];
      kx.ⵠⵠⵠ[22] = [];
      kx.ⵠⵠⵠ[23] = [];
      kx.ⵠⵠⵠ[5] = [];
      kx.ⵠⵠⵠ[12] = [];
      kx.ⵠⵠⵠ[13] = [];
      kx.ⵠⵠⵠ[14] = [];
      kx.ⵠⵠⵠ[60] = [];
      kx.ⵠⵠⵠ[70] = [];
      kx.ⵠⵠⵠ[71] = [];
      kx.ⵠⵠⵠ[72] = [];
      kx.ⵠⵠⵠ[73] = [];
      kx.ⵠⵠⵠ[74] = [];
      kx.ⵠⵠⵠ[81] = [];
      kx.ⵠⵠⵠ[82] = [];
      kx.ⵠⵠⵠ[87] = [];
      kx.ⵠⵠⵠ[86] = [];
      kx.ⵠⵠⵠ[34] = [];
      kx.ⵠⵠⵠ[65] = [];
      kx.ⵠⵠⵠ[66] = [];
      kx.ⵠⵠⵠ[67] = [];
      kx.ⵠⵠⵠ[62] = [];
      kx.ⵠⵠⵠ[63] = [];
      kx.ⵠⵠⵠ[78] = [];
      kx.ⵠⵠⵠ[77] = [];
      kx.ⵠⵠⵠ[75] = [];
      kx.ⵠⵠⵠ[76] = [];
      kx.ⵠⵠⵠ[64] = [];
      kx.ⵠⵠⵠ[69] = [];
      kx.ⵠⵠⵠ[68] = [];
      kx.ⵠⵠⵠ[79] = [];
      kx.ⵠⵠⵠ[89] = [];
      kx.ⵠⵠⵠ[83] = [];
      kx.ⵠⵠⵠ[84] = [];
      kx.ⵠⵠⵠ[85] = [];
      kx.ⵠⵠⵠ[80] = [];
      kx.ⵠⵠⵠ[88] = [];
      kx.ⵠⵠⵠ[91] = [];
      kx.ⵠⵠⵠ[90] = [];
      kx.ⵠⵠⵠ[61] = [];
      kx.ⵠⵠⵠ[18] = [];
      kx.ⵠⵠⵠ[19] = [];
      kx.ⵠⵠⵠ[20] = [];
      kx.ⵠⵠⵠ[21] = [];
      kx.ⵠⵠⵠ[50] = [];
      kx.ⵠⵠⵠ[52] = [];
      kx.ⵠⵠⵠ[51] = [];
      kx.ⵠⵠⵠ[29] = [];
      kx.ⵠⵠⵠ[56] = [];
      kx.ⵠⵠⵠ[30] = [];
      kx.ⵠⵠⵠ[38] = [];
      kx.ⵠⵠⵠ[33] = [];
      kx.ⵠⵠⵠ[32] = [];
      kx.ⵠⵠⵠ[24] = [];
      kx.ⵠⵠⵠ[25] = [];
      kx.ⵠⵠⵠ[26] = [];
      kx.ⵠⵠⵠ[27] = [];
      kx.ⵠⵠⵠ[28] = [];
      kx.ⵠⵠⵠ[42] = [];
      kx.ⵠⵠⵠ[41] = [];
      kx.ⵠⵠⵠ[35] = [];
      kx.ⵠⵠⵠ[36] = [];
      kx.ⵠΔⲆᐃⵠ = [];
      kx.ⲆⵠΔΔⲆⲆⵠ = b[7];
      lx.id = b[9];
      lx.ΔᐃⲆⲆ = lx.id * kx.ⲆⵠΔΔⲆⲆⵠ;
      if (ox.loaded) {
        ox.ⲆⲆⲆᐃ[0].ΔᐃⲆⲆ = lx.ΔᐃⲆⲆ;
        ox.ⲆⲆⲆᐃ[0].ⵠΔⲆᐃⵠΔⵠ = 0;
      }
      px.ⲆⵠⵠⵠⵠⲆⵠ();
      lx.ⲆⲆⵠ.ⵠⲆΔΔⵠ(b[3], b[10]);
      kx.ⲆⲆⲆᐃ = [];
      var d = kx.ⲆⲆⲆᐃ;
      for (var e = 0; e < b[11]; e++) {
        d.push(new Ef());
      }
      e = 0;
      for (var f = b[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ⵠⲆⲆΔΔ = f[e].n;
        g.Δⵠⵠⵠ = f[e].s;
        g.ⵠΔⲆΔⵠ = f[e].a;
        g.ᐃᐃΔⲆᐃ = f[e].c;
        g.Δⵠⵠᐃⵠ = f[e].b;
        g.ⲆᐃᐃⵠΔ = f[e].d;
        g.ᐃⵠⵠⲆΔᐃᐃ = f[e].g;
        g.level = f[e].l;
        g.ⵠᐃⲆΔⵠ = ⲆᐃΔ.ⲆⲆⵠⵠᐃΔΔ(f[e].p);
        g.ᐃᐃΔⵠᐃ = true;
        if (hf === 1) {
          g.ⵠⲆⲆΔΔ += "|" + f[e].i;
        }
      }
      lx.ΔΔΔΔΔ.sort();
      if (kx.mode === 1 && kx.ⲆⲆⲆᐃ[lx.id].ⵠⲆⲆΔΔ === "spectator") {
        lx.ⲆⲆᐃⲆΔᐃΔ = true;
      } else {
        lx.ⲆⲆᐃⲆΔᐃΔ = false;
      }
      if (kx.mode === 2 && kx.ⲆⲆⲆᐃ[lx.id].Δⵠⵠⵠ === 0) {
        lx.ΔᐃⲆᐃⲆ = true;
      } else {
        lx.ΔᐃⲆᐃⲆ = false;
      }
      if (kx.mode === 3 && kx.ⲆⲆⲆᐃ[lx.id].Δⵠⵠⵠ === 0) {
        lx.ΔⵠⵠΔᐃⵠⲆ = hq;
      } else {
        lx.ΔⵠⵠΔᐃⵠⲆ = zh;
      }
      ⵠⵠᐃΔ.set("starve_token", lx.ΔᐃᐃⵠⲆ);
      if (b[12] === 0) {
        lx.ΔᐃᐃⲆⵠ.ⵠⲆⲆⲆΔ = 0;
        nx.ΔᐃΔᐃ.restore(b[17]);
        var h = b[14];
        if (h[29]) {
          lx.ᐃΔᐃⲆ.ⲆⲆⲆⵠⵠⵠⵠ(1, 0);
        }
        for (e = 0; e < h.length; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ᐃΔᐃⲆΔᐃⲆ([0, e, h[e]]);
          }
        }
        lx.ΔᐃᐃⲆⵠ.open = kq;
      } else {
        if (kx.mode === 4) {
          this.ᐃΔᐃⲆΔᐃⲆ([0, 238, 1]);
        } else if (kx.mode === 3) {
          if (lx.ΔⵠⵠΔᐃⵠⲆ) {
            this.ᐃΔᐃⲆΔᐃⲆ([0, 190, 4]);
          } else {
            this.ᐃΔᐃⲆΔᐃⲆ([0, 191, 3]);
          }
        }
        if (kx.mode === 0 || kx.mode === 3 || kx.mode === 7 || kx.mode === 4) {
          lx.ΔᐃᐃⲆⵠ.ⵠⲆⲆⲆΔ = new Date().getTime();
          lx.ΔᐃᐃⲆⵠ.open = ag;
          lx.ΔᐃᐃⲆⵠ.value = b[13];
          nx.ΔᐃᐃⲆⵠ.ΔⵠΔΔⵠ();
        } else {
          lx.ΔᐃᐃⲆⵠ.ⵠⲆⲆⲆΔ = 0;
          lx.ΔᐃᐃⲆⵠ.open = Ah;
          lx.ΔᐃᐃⲆⵠ.value = 0;
        }
        lx.ΔⵠΔᐃᐃⵠⲆ = b[12].toString();
      }
      lx.ⵠᐃᐃΔⲆ.enabled = b[6];
      lx.ⵠᐃᐃΔⲆ.ⵠⲆⲆⲆΔ = -1;
      lx.ⵠᐃᐃΔⲆ.label = null;
      lx.ⵠᐃᐃΔⲆ.now = -1;
      ⵠⵠᐃΔ.set("starve_token_id", lx.ΔⵠΔᐃᐃⵠⲆ);
      if (lx.reconnect.enabled) {
        lx.reconnect.rotate = 0;
        lx.reconnect.enabled = ra;
      } else {
        hx.ᐃΔᐃΔⵠ(nx.ΔΔΔᐃᐃ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + hx.Δⵠⵠⵠ + "A" + hx.ⵠΔⲆΔⵠ);
        }
      }
    };
    this.connect = function () {
      c.ᐃΔΔΔᐃⵠⵠ = 0;
      c.ⵠⲆΔᐃΔᐃⵠ();
    };
    this.ΔⵠΔΔⵠΔΔ = [];
    this.ΔᐃⲆⲆⵠⲆᐃⲆⲆ = function (b) {
      const d = c.ᐃᐃᐃᐃⲆ.filter(a => a.gm === b);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== Cn) {
          if (bj === f[c]) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function g(d) {
        c.ΔⵠΔΔⵠΔΔ[b] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        c.ᐃⲆΔΔⲆⵠⲆ({
          domain: df,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (c.ΔⵠΔΔⵠΔΔ[b] !== undefined) {
        g(c.ΔⵠΔΔⵠΔΔ[b]);
        return;
      }
      let a = 1;
      function h(b) {
        const c = new Ya.XMLHttpRequest();
        const d = b[0];
        const e = d.p;
        const f = d.r;
        const i = e[Math.floor(Math.random() * e.length)];
        c.open("GET", "https://" + i + "." + df + "/", ns);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            g(f);
          }
        };
        c.send();
      }
      for (let a in f) {
        h(f[a]);
      }
      Ya.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = Ya.Object.keys(f);
        g(b[Math.floor(Math.random() * b.length)]);
      }, 5000);
    };
    this.ΔⵠΔⲆⵠΔᐃᐃΔ = function () {
      let a = wf.ⲆΔΔⲆⲆΔⵠ[c.ⲆⵠⲆᐃΔ];
      console.log(nl, undefined, Ig);
      let b = c.ᐃⲆⵠⵠᐃⲆᐃ[c.ⲆⵠⲆᐃΔ];
      let d = c.ᐃᐃᐃᐃⲆ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ΔᐃⲆⲆⵠⲆᐃⲆⲆ(a);
      } else {
        c.ᐃⲆΔΔⲆⵠⲆ({
          domain: df,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ⵠⲆΔᐃΔᐃⵠ = function () {
      console.log(undefined);
      if (Ja !== Fw && bf !== eb) {
        console.log(undefined, undefined, Sh);
        c.ᐃⲆΔΔⲆⵠⲆ({
          domain: df,
          is_tls: 1,
          id: bf + Fw,
          p: c.ΔⵠΔⵠᐃⵠⲆ[bf]
        });
        return;
      }
      if (gf === Cn) {
        c.ΔⵠΔⲆⵠΔᐃᐃΔ();
      } else {
        c.ᐃⲆΔΔⲆⵠⲆ({
          domain: gf.domain,
          is_tls: gf.ssl,
          id: gf.id,
          p: [gf.p]
        });
      }
    };
    this.ᐃⲆΔΔⲆⵠⲆ = function (b) {
      let d = b.domain;
      let e = b.is_tls;
      let f = b.id;
      let a = b.p;
      let g = a[Math.floor(Math.random() * a.length)];
      let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
      console.log(undefined, undefined);
      c.ᐃΔⵠΔ = new Ya.WebSocket(i);
      c.ᐃΔⵠΔ.binaryType = "arraybuffer";
      c.ᐃΔⵠΔ.ⵠⲆᐃⵠᐃ = c.ⵠⲆᐃⵠᐃ;
      c.ᐃΔⵠΔ.onmessage = function (a) {
        if (c.ⵠⲆᐃⵠᐃ == c.ⵠⲆᐃⵠᐃ) {
          if (typeof a.data == "string") {
            var b = JSON.parse(a.data);
            switch (b[0]) {
              case 0:
                c.ΔⲆⵠⲆⵠ(b);
                break;
              case 1:
                c.ᐃΔᐃᐃΔⲆⲆ(b[1]);
                break;
              case 2:
                c.ᐃΔⲆΔΔΔΔᐃᐃ(b);
                break;
              case 3:
                c.ⲆⲆᐃΔᐃⲆⲆΔΔ(b);
                break;
              case 4:
                c.message(b[1]);
                break;
              case 5:
                c.ⵠⵠⵠⲆⵠΔΔ(b);
                break;
              case 6:
                c.ΔΔⲆⵠΔᐃⵠ(b[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g = Gw[e];
              let a = Wa;
              let h = bj;
              if (g === undefined) {
                ff += e * 2;
                if (ff < 65535) {
                  a = dj(Kj(e));
                } else {
                  ff = e;
                  for (let a = 0; a < Gw.length; a++) {
                    if (Gw[a] !== mr) {
                      const b = Gw[a][0];
                      Gw[a] = undefined;
                      gj(b);
                    }
                  }
                  a = dj(Kj(e));
                  be();
                }
                h = dk(a);
                Gw[e] = [a, h];
              } else {
                a = g[0];
                h = g[1];
              }
              for (let a = 0; f.length > a; a++) {
                h[a] = f[a];
              }
              qe(a, c, d);
              for (let a = 0; f.length > a; a++) {
                f[a] = h[a];
              }
              return f;
            }(a.data, lx.ΔⲆᐃⵠⲆⲆᐃ, lx.ᐃᐃΔᐃᐃΔⵠⵠΔ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                c.ⵠⵠⵠ(e, d, ce);
                break;
              case 1:
                c.ⵠⵠⵠ(e, d, true);
                break;
              case 2:
                c.ᐃᐃⵠΔⵠΔⵠⵠᐃ();
                break;
              case 3:
                c.ᐃΔᐃⲆΔᐃⲆ(new Uint16Array(e));
                break;
              case 4:
                c.ΔΔΔΔⲆᐃⵠᐃⵠ();
                break;
              case 5:
                c.ⲆᐃᐃⵠΔⵠⲆⵠΔ();
                break;
              case 6:
                c.ⵠⵠᐃⲆᐃⵠΔⲆᐃ();
                break;
              case 7:
                c.ᐃΔᐃⲆΔΔᐃⲆⲆ(e);
                break;
              case 8:
                c.ⵠⵠⲆᐃᐃᐃΔⵠⵠ(d[1]);
                break;
              case 9:
                c.ⵠⲆⵠᐃⵠΔᐃΔⵠ(d[1]);
                break;
              case 10:
                c.ᐃΔⲆᐃⲆΔᐃ();
                break;
              case 11:
                c.ⵠᐃⲆΔⲆΔⵠ(d[1], d[2]);
                break;
              case 12:
                c.ⵠⵠⵠⲆⲆ(d[1]);
                break;
              case 13:
                c.ⲆᐃⵠᐃⵠΔⲆⲆΔ(d, e);
                break;
              case 14:
                c.ⲆⵠΔᐃᐃΔⵠ();
                break;
              case 15:
                c.ᐃⲆᐃΔᐃΔΔΔΔ(d[1]);
                break;
              case 16:
                c.ᐃⲆᐃⵠ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                c.ⲆⵠᐃⲆΔⲆⲆⵠⲆ(e);
                break;
              case 18:
                c.ⵠΔⲆΔⵠⲆΔⲆᐃ();
                break;
              case 19:
                c.ⵠⵠΔⵠΔ(d[1]);
                break;
              case 20:
                c.ⵠᐃᐃΔΔΔΔⲆⲆ();
                break;
              case 21:
                c.ΔⵠⲆⵠ(e);
                break;
              case 22:
                c.ΔⲆⵠΔᐃᐃⵠᐃⵠ(d[1]);
                break;
              case 23:
                c.ΔΔⲆⲆΔΔᐃⲆⲆ(e);
                break;
              case 24:
                c.ⲆᐃΔⲆⲆΔΔᐃⵠ(d[1]);
                break;
              case 25:
                c.ⲆᐃⵠΔΔⵠᐃⲆΔ(d[1], e);
                break;
              case 26:
                c.ⵠⲆᐃⵠΔ(d);
                break;
              case 27:
                c.ⵠⵠΔⲆᐃⵠᐃⵠᐃ();
                break;
              case 28:
                c.ⵠᐃᐃΔⲆ(d[1]);
                break;
              case 29:
                c.ᐃⲆⲆΔⵠⵠᐃⵠΔ();
                break;
              case 30:
                c.ᐃᐃᐃΔⲆⲆⲆⵠⲆ();
                break;
              case 31:
                c.ᐃᐃΔᐃⵠΔⲆⵠⵠ(d);
                break;
              case 32:
                c.ΔⲆⲆᐃΔⲆᐃⵠⲆ(d[1]);
                break;
              case 33:
                c.ᐃᐃᐃⲆᐃΔΔᐃⲆ(d[1]);
                break;
              case 34:
                c.ᐃᐃΔⵠΔΔⲆⲆᐃ();
                break;
              case 35:
                c.ΔⵠᐃⲆⵠΔⵠⲆᐃ(d[1]);
                break;
              case 36:
                c.ⵠⲆΔⵠⲆⲆⲆ(d[1]);
                break;
              case 37:
                c.ⲆᐃᐃⵠⵠⲆⵠⵠΔ(d[1], d[2]);
                break;
              case 38:
                c.ΔΔΔⲆⲆⲆⲆᐃⲆ(d[1]);
                break;
              case 39:
                c.ᐃΔΔΔⵠᐃⲆⵠΔ(d[1]);
                break;
              case 40:
                c.ᐃᐃⵠΔⵠⲆΔᐃⲆ();
                break;
              case 41:
                c.ⵠⲆΔΔⵠⵠⵠᐃⵠ(d);
                break;
              case 42:
                c.ᐃⲆᐃⵠⲆⵠΔⲆⵠ(d[1]);
                break;
              case 43:
                c.ⵠⲆⲆⲆⲆⲆᐃⲆΔ(d[1]);
                break;
              case 44:
                c.claimed(d[1]);
                break;
              case 45:
                c.ⲆⵠᐃⵠᐃᐃᐃᐃⲆ(d[1]);
                break;
              case 46:
                c.ⲆⵠⵠᐃᐃⲆⵠΔᐃ(d[1]);
                break;
              case 47:
                c.ΔⲆΔⲆΔ(d[1]);
                break;
              case 48:
                c.ΔⲆΔⲆΔᐃΔⲆΔ();
                break;
              case 50:
                c.ⲆᐃⵠⲆΔⵠⵠⲆⵠ(d[1], d[2], d[3]);
                break;
              case 51:
                c.ⵠᐃᐃⵠⲆΔᐃΔⲆ();
                break;
              case 52:
                c.ⵠⵠΔⲆⵠᐃⵠᐃΔ(d[1]);
                break;
              case 53:
                c.ᐃΔΔⵠⲆⲆΔᐃΔ(d[1]);
                break;
              case 54:
                c.ᐃΔΔⵠᐃᐃⲆⲆΔ();
                break;
              case 55:
                c.ⵠᐃⲆⲆᐃⲆⵠᐃΔ(d[1]);
                break;
              case 56:
                c.ⲆⲆⲆⲆᐃΔⲆⲆᐃ(d[1]);
                break;
              case 57:
                c.ΔⵠⲆⵠᐃⵠⵠᐃᐃ();
                break;
              case 58:
                c.ⵠΔᐃᐃⲆⲆⵠⲆⵠ();
                break;
              case 59:
                c.ⵠᐃⲆᐃⵠΔᐃⵠⲆ();
                break;
              case 60:
                c.ⲆΔΔⲆⲆⵠⵠⵠⲆ();
                break;
              case 61:
                lx.ⲆⲆⵠ.ᐃΔⲆⲆⵠᐃᐃ = 0.2;
                lx.ⲆⲆⵠ.ⵠⲆⲆⲆΔ = 3;
                break;
              case 62:
                c.ΔⲆᐃⵠΔᐃᐃⲆⵠ(new Uint16Array(e));
                break;
              case 63:
                c.ᐃⵠⵠᐃⲆᐃΔᐃⲆ();
                break;
              case 64:
                c.ⲆⲆⲆΔΔΔⵠⵠᐃ();
                break;
              case 65:
                c.ᐃΔⲆⵠᐃⲆⲆⲆⵠ();
                break;
              case 66:
                c.ᐃᐃⵠⲆⲆⲆⲆᐃⲆ();
                break;
              case 67:
                c.ᐃᐃᐃⲆⲆⵠᐃᐃᐃ(d[1]);
                break;
              case 68:
                c.ⵠⲆΔᐃⲆΔⲆᐃᐃ(d[1]);
                break;
              case 69:
                c.ⲆᐃⵠᐃΔΔΔ(d[1]);
                break;
              case 70:
                c.ⵠⵠⲆⵠⵠᐃΔΔΔ(d[1]);
                break;
              case 71:
                c.ⲆⵠΔⲆⲆ(d[1]);
            }
          }
        }
      };
      c.ᐃΔⵠΔ.onerror = function () {
        if (lx.reconnect.enabled) {
          Ya.setTimeout(c.timeout, 2500);
        }
      };
      this.ᐃΔⵠΔ.onopen = function () {
        clearTimeout(c.ⲆΔᐃⲆⵠ);
        lx.ΔⵠΔⲆᐃᐃⲆ = lx.ΔⵠΔⲆᐃᐃⲆ || ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("token");
        ⲆᐃΔ.ᐃΔᐃⵠⲆΔⲆ().then(a => {
          c.ᐃΔⵠΔ[sf](Ra[Da].stringify([hx.ⵠⲆⲆΔΔ.input.value, screen.width + 200, screen.height + 200, 52, lx.ΔᐃᐃⵠⲆ, lx.ΔⵠΔᐃᐃⵠⲆ, lx.reconnect.enabled ? 1 : 0, hx.Δⵠⵠⵠ, hx.ⵠΔⲆΔⵠ, hx.ΔⵠⲆⲆΔ, hx.Δⵠⵠᐃⵠ, hx.ᐃᐃΔⲆᐃ, hx.ⲆᐃᐃⵠΔ, Fx === Ej ? 0 : Fx, Ex === undefined ? 0 : Ex.substring(Ex.length - 50), lf, lx.ΔⵠΔⲆᐃᐃⲆ, a, lx.ⲆⲆⲆⵠᐃᐃᐃ, lx.ΔⲆⵠᐃΔⲆⲆ]));
          lx.ΔⵠΔⲆᐃᐃⲆ = undefined;
          lx.ⲆⲆⲆⵠᐃᐃᐃ = nh;
          lx.ΔⲆⵠᐃΔⲆⲆ = Oh;
          c.ⲆΔᐃⲆⵠ = setTimeout(c.timeout, 2000);
        });
      };
    };
  }();
  var kx;
  var lx;
  var mx;
  var nx = {
    ⲆⵠⵠⲆᐃ: false
  };
  var ox = new function () {
    this.ΔΔΔᐃᐃ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ⲆⵠΔⲆΔⵠᐃ = function (a) {
      return a / kx.w * 100;
    };
    this.ⲆⲆⲆᐃᐃᐃⵠ = function (a) {
      return a / kx.ᐃⵠⲆ * 100;
    };
    this.ⲆᐃΔⲆⵠΔⲆ = function (a, b) {
      a = this.ⲆⵠΔⲆΔⵠᐃ(a) - this.ΔᐃⲆⲆⲆ.x;
      return this.ΔᐃⲆⲆⲆ.x + b * a;
    };
    this.ⵠΔⵠΔⵠⲆΔ = function (a, b) {
      a = Math.abs(this.ⲆⲆⲆᐃᐃᐃⵠ(a) - this.ΔᐃⲆⲆⲆ.y);
      return this.ΔᐃⲆⲆⲆ.y + b * a;
    };
    this.sample = {};
    this.ΔⲆΔⵠΔ = {};
    this.ⲆⲆΔⵠ = {};
    this.ⵠᐃΔⵠⲆⲆⵠ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return bh;
        }
      }
      return false;
    };
    this.ᐃᐃⲆ = function (a, b, c, d) {
      c = this.ⲆᐃΔⲆⵠΔⲆ(c, ΔⲆᐃⲆⲆ.ⲆⵠⵠᐃᐃΔᐃ);
      d = this.ⵠΔⵠΔⵠⲆΔ(d, ΔⲆᐃⲆⲆ.ⲆⵠⵠᐃᐃΔᐃ);
      console.log("HIT", a, b, c, d, ΔⲆᐃⲆⲆ.ⲆⵠⵠᐃᐃΔᐃ);
      if (a) {
        if (b === 1) {
          this.ⵠᐃΔⵠⲆⲆⵠ(this.ⲆⲆΔⵠ.ᐃΔⵠΔᐃᐃᐃ, this.sample.ᐃΔⵠΔᐃᐃᐃ, c, d);
        } else if (b === 0) {
          this.ⵠᐃΔⵠⲆⲆⵠ(this.ⲆⲆΔⵠ.ᐃⵠΔΔⵠⲆⵠ, this.sample.ᐃⵠΔΔⵠⲆⵠ, c, d);
        }
      } else {
        this.ⵠᐃΔⵠⲆⲆⵠ(this.ⲆⲆΔⵠ.ᐃᐃᐃⲆᐃ, this.sample.ᐃᐃᐃⲆᐃ, c, d);
      }
    };
    this.ΔᐃⲆⲆⲆ = {
      y: 0,
      x: 0
    };
    this.ΔᐃⵠΔᐃᐃⲆ = {
      x: 0,
      y: 0
    };
    this.ⵠⲆⲆΔⲆ = {};
    this.ⲆⲆⲆᐃ = [];
    this.ⲆⵠⵠⵠⲆ = function (a, b) {
      for (var c in this.ⵠⲆⲆΔⲆ) {
        var d = this.ⵠⲆⲆΔⲆ[c];
        d.check(a);
        if (d.ΔⲆᐃᐃⵠΔⲆ) {
          if (kx.ΔⲆᐃΔⵠ.now < 460000) {
            d.ⵠⲆⵠⲆΔ();
          }
          if (b) {
            d.ⵠⵠᐃ(a, this.ΔᐃⲆⲆⲆ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ᐃᐃᐃⵠᐃⲆΔᐃⲆ = function () {
      var a = [];
      for (var b = 0; this.ⲆⲆⲆᐃ.length > b; b++) {
        if ((e = this.ⲆⲆⲆᐃ[b]).ⵠΔⲆᐃⵠΔⵠ) {
          a.push(b);
        } else if (!e.ⵠΔⲆᐃⵠΔⵠ && !kx.ⵠΔⲆᐃⵠ[e.ΔᐃⲆⲆ]) {
          e.ⵠⵠᐃⲆᐃⵠᐃ();
          a.push(b);
        }
      }
      var c = kx.ⵠⵠⵠ[0];
      var d = 0;
      for (b = 0; b < c.length && d < a.length; b++) {
        var e = c[b];
        if ((kx.mode != 1 || kx.ⲆⲆⲆᐃ[e.id].ⵠⲆⲆΔΔ !== "spectator") && e.ⲆᐃⵠΔⲆ === -1 && e.ΔᐃⲆⲆ !== lx.ΔᐃⲆⲆ) {
          this.ⲆⲆⲆᐃ[a[d]].ΔⵠΔΔⵠ(e.ΔᐃⲆⲆ);
          d++;
        }
      }
    };
    this.ⵠⵠⵠΔᐃⵠⵠⵠⲆ = function () {
      this.ᐃᐃᐃⵠᐃⲆΔᐃⲆ();
      for (var a = 0; this.ⲆⲆⲆᐃ.length > a; a++) {
        var b = this.ⲆⲆⲆᐃ[a];
        if (!b.ⵠΔⲆᐃⵠΔⵠ && b.check()) {
          b.ⵠⵠᐃ();
        }
      }
    };
    this.ΔⵠⲆⲆⲆⲆᐃⵠΔ = function (a) {
      if (a.x === this.ΔᐃⵠΔᐃᐃⲆ.x && a.y === this.ΔᐃⵠΔᐃᐃⲆ.y) {
        return 0;
      } else {
        this.ΔᐃⵠΔᐃᐃⲆ.x = a.x;
        this.ΔᐃⵠΔᐃᐃⲆ.y = a.y;
        this.ΔᐃⲆⲆⲆ.x = this.ⲆⵠΔⲆΔⵠᐃ(a.x);
        this.ΔᐃⲆⲆⲆ.y = this.ⲆⲆⲆᐃᐃᐃⵠ(a.y);
        Howler.pos(this.ΔᐃⲆⲆⲆ.x, this.ΔᐃⲆⲆⲆ.y, 0);
        return 1;
      }
    };
    this.ᐃᐃᐃΔΔΔⵠⲆⵠ = function () {
      if (this.ΔΔΔᐃᐃ && this.loaded) {
        var a = kx.ⵠΔⲆᐃⵠ[lx.ΔᐃⲆⲆ];
        if (a) {
          a.ⲆᐃⵠΔⲆ = 0;
          var b = this.ΔⵠⲆⲆⲆⲆᐃⵠΔ(a);
          if (kx.mode !== 2 && kx.mode !== 4 && kx.mode !== 5) {
            this.ⲆⵠⵠⵠⲆ(a, b);
          }
          this.ⵠⵠⵠΔᐃⵠⵠⵠⲆ();
        }
      }
    };
    this.ⵠⲆΔⵠΔΔⵠΔΔ = function () {
      for (var b in _w) {
        var c = _w[b];
        if (typeof c === "object" && c.path) {
          c.ⵠΔᐃΔⲆ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ⵠΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ⵠΔᐃΔⲆ.play(d);
            c.ⵠΔᐃΔⲆ.stop(j);
            c.ⵠΔᐃΔⲆ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(Ur, bj);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            ox.sample[d] = g;
          } else {
            ox.sample[d] = g[0];
          }
          ox.ⲆⲆΔⵠ[d] = c.ⵠΔᐃΔⲆ;
        }
      }
    };
    this.Ⲇⵠⵠᐃⵠⵠⵠ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⲆⲆᐃⵠⲆΔⲆ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; d > i; i++) {
        var j = a[i] = [];
        for (ΔᐃⲆ = 0; e > ΔᐃⲆ; ΔᐃⲆ++) {
          j[ΔᐃⲆ] = ox.sample[f + ΔᐃⲆ][i];
          c.ⵠΔᐃΔⲆ.volume(g, j[ΔᐃⲆ]);
        }
      }
    };
    this.ΔⵠΔΔⵠ = function () {
      ox.ⵠⲆΔⵠΔΔⵠΔΔ();
      ox.ΔⲆΔⵠΔ.ⲆⵠᐃΔⵠΔⵠ = [];
      ox.ΔⲆΔⵠΔ.ᐃΔⲆΔⲆ = [];
      ox.ΔⲆΔⵠΔ.ⵠⲆΔⵠΔ = [];
      ox.ⲆⲆᐃⵠⲆΔⲆ(ox.ΔⲆΔⵠΔ.ⲆⵠᐃΔⵠΔⵠ, _w.ᐃᐃⲆⲆᐃⲆⲆ, 8, 3, "p", 0.15);
      ox.ⲆⲆᐃⵠⲆΔⲆ(ox.ΔⲆΔⵠΔ.ᐃΔⲆΔⲆ, _w.ᐃⵠᐃΔⲆᐃⵠ, 8, 4, "w", 0.15);
      ox.ⲆⲆᐃⵠⲆΔⲆ(ox.ΔⲆΔⵠΔ.ⵠⲆΔⵠΔ, _w.ⲆⵠⲆᐃᐃΔΔ, 8, 3, "d", 0.09);
      ox.Ⲇⵠⵠᐃⵠⵠⵠ(ox.sample.ᐃᐃᐃⲆᐃ, ox.ⲆⲆΔⵠ.ᐃᐃᐃⲆᐃ, 0.15);
      ox.Ⲇⵠⵠᐃⵠⵠⵠ(ox.sample.ᐃⵠΔΔⵠⲆⵠ, ox.ⲆⲆΔⵠ.ᐃⵠΔΔⵠⲆⵠ, 0.2);
      ox.Ⲇⵠⵠᐃⵠⵠⵠ(ox.sample.ᐃΔⵠΔᐃᐃᐃ, ox.ⲆⲆΔⵠ.ᐃΔⵠΔᐃᐃᐃ, 1);
      ox.ⵠⲆⲆΔⲆ.ⲆᐃⵠᐃⵠΔΔⵠΔ = new cx(12, this.sample.ⲆΔⲆⲆΔΔⵠ, this.sample.ⵠᐃⵠⵠⲆⵠᐃ, 5000, 0.05, 0.4, _w.ⲆⲆⵠⲆΔᐃⲆ.ⵠΔᐃΔⲆ, 3000, {
        x: tr.ΔΔⵠΔΔⵠⲆ,
        y: tr.ΔⲆΔⵠⵠⵠⲆ,
        w: kx.w,
        ᐃⵠⲆ: kx.ᐃⵠⲆ
      }, {
        x: tr.ΔΔⵠΔΔⵠⲆ - 2300,
        y: tr.ΔⲆΔⵠⵠⵠⲆ - 4000,
        w: kx.w,
        ᐃⵠⲆ: kx.ᐃⵠⲆ
      }, {
        x: tr.ΔΔⵠΔΔⵠⲆ - 1500,
        y: tr.ΔⲆΔⵠⵠⵠⲆ - 2000,
        w: kx.w,
        ᐃⵠⲆ: kx.ᐃⵠⲆ
      });
      ox.ⵠⲆⲆΔⲆ.ⵠⲆΔᐃΔⲆΔΔⲆ = new cx(12, this.sample.ⵠᐃⵠⲆⵠⲆᐃ, this.sample.ⲆᐃⵠᐃΔᐃΔ, 5000, 0.03, 0.25, _w.ⲆⲆⵠⲆΔᐃⲆ.ⵠΔᐃΔⲆ, 3000, {
        x: 0,
        y: tr.ΔⲆΔⵠⵠⵠⲆ + 800,
        w: tr.ΔΔⵠΔΔⵠⲆ - 2300,
        ᐃⵠⲆ: kx.ᐃⵠⲆ
      }, {
        x: -100,
        y: tr.ΔⲆΔⵠⵠⵠⲆ - 300,
        w: tr.ΔΔⵠΔΔⵠⲆ - 100,
        ᐃⵠⲆ: kx.ᐃⵠⲆ
      }, {
        x: -100,
        y: tr.ΔⲆΔⵠⵠⵠⲆ + 400,
        w: tr.ΔΔⵠΔΔⵠⲆ - 1400,
        ᐃⵠⲆ: kx.ᐃⵠⲆ
      });
      ox.ⵠⲆⲆΔⲆ.ΔⵠᐃⲆΔᐃⵠ = new cx(12, this.sample.ᐃⵠᐃᐃⲆΔΔ, this.sample.ᐃᐃΔᐃⵠΔΔ, 5000, 0.01, 0.22, _w.ⲆⲆⵠⲆΔᐃⲆ.ⵠΔᐃΔⲆ, 3000, {
        x: -100,
        y: -100,
        w: kx.w + 200,
        ᐃⵠⲆ: tr.ΔⲆΔⵠⵠⵠⲆ - 1000
      }, {
        x: -100,
        y: -100,
        w: kx.w + 200,
        ᐃⵠⲆ: tr.ΔⲆΔⵠⵠⵠⲆ + 600
      }, {
        x: -100,
        y: -100,
        w: kx.w + 200,
        ᐃⵠⲆ: tr.ΔⲆΔⵠⵠⵠⲆ + 100
      });
      for (var a = 0; a < 8; a++) {
        ox.ⲆⲆⲆᐃ[a] = new ex(a);
      }
      ox.ⲆⲆⲆᐃ[0].ΔⵠΔΔⵠ(lx.ΔᐃⲆⲆ);
      ox.loaded = 1;
    };
    this.ⲆⵠⲆΔⵠⵠⵠΔΔ = function () {
      if (!this.transition && kx.ΔⲆᐃΔⵠ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ᐃΔᐃΔⵠ = function () {
      if (this.ΔΔΔᐃᐃ && this.loaded) {
        for (var a in ox.sample) {
          var b = ox.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              ox.ⲆⲆΔⵠ[a].stop(b[c]);
            }
          } else {
            ox.ⲆⲆΔⵠ[a].stop(b);
          }
        }
        for (c = 0; c < ox.ⲆⲆⲆᐃ.length; c++) {
          ox.ⲆⲆⲆᐃ[c].ⵠⵠᐃⲆᐃⵠᐃ();
        }
      }
    };
    this.select = function () {
      if (ox.ΔΔΔᐃᐃ) {
        ox.ᐃΔᐃΔⵠ();
      } else {
        if (!ox.loaded) {
          ox.ΔⵠΔΔⵠ();
        }
        ox.ⲆⲆⲆᐃ[0].ΔᐃⲆⲆ = lx.ΔᐃⲆⲆ;
        ox.ⲆⲆⲆᐃ[0].ⵠΔⲆᐃⵠΔⵠ = 0;
        ox.ⲆⵠⲆΔⵠⵠⵠΔΔ();
      }
      ox.ΔΔΔᐃᐃ = !ox.ΔΔΔᐃᐃ;
    };
  }();
  var px = new function () {
    this.ⵠΔᐃⵠⲆⲆΔ = function () {
      this.ΔⵠⵠⲆΔ = 81;
      this.ᐃⲆⲆΔⲆ = 68;
      this.ΔⵠΔⵠΔ = 90;
      this.ΔᐃᐃⲆΔⲆΔ = 83;
    };
    this.ΔⵠᐃⵠᐃΔᐃ = function () {
      this.ΔⵠⵠⲆΔ = 65;
      this.ᐃⲆⲆΔⲆ = 68;
      this.ΔⵠΔⵠΔ = 87;
      this.ⲆⲆᐃⲆⲆ = 83;
    };
    this.ⲆⵠⲆⵠΔ = 0;
    this.ΔᐃᐃⲆΔⲆΔ = 1;
    this.ⵠⵠΔΔⲆΔⵠ = 49;
    this.ⵠᐃᐃⵠᐃⲆⵠ = 50;
    this.ⵠⵠⵠⵠᐃⵠⵠ = 51;
    this.ⵠΔΔⲆⵠⵠⲆ = 52;
    this.ΔᐃⵠΔⵠΔⵠⲆᐃ = 53;
    this.ᐃΔⵠⵠᐃⲆⲆ = 17;
    this.ΔΔⲆᐃᐃⲆΔ = 37;
    this.ⲆᐃΔⲆΔΔⲆ = 39;
    this.ⵠΔΔΔᐃⵠᐃ = 38;
    this.ⲆΔᐃᐃΔⲆΔ = 40;
    this.ⲆΔΔⵠΔᐃΔ = 32;
    this.ⵠΔⲆⵠⵠΔⲆ = 82;
    this.ΔΔⲆΔᐃΔⵠ = 71;
    this.ᐃⲆΔᐃⲆⲆⲆ = 86;
    this.ΔⲆᐃᐃⵠⵠΔ = 66;
    this.ΔⵠᐃⵠᐃΔᐃ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ⲆⵠⲆⵠΔ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⲆⵠⲆⵠΔ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ΔⵠⵠⲆΔ == b || this.ΔΔⲆᐃᐃⲆΔ == b) {
        this.ⵠᐃⵠᐃⵠΔⵠ();
      } else if (this.ΔⵠΔⵠΔ == b || this.ⵠΔΔΔᐃⵠᐃ == b) {
        this.ⵠᐃΔΔΔᐃⲆ();
      } else if (this.ΔᐃᐃⲆΔⲆΔ == b || b == this.ⲆⲆⲆⲆⵠⲆⵠΔΔ) {
        this.ⵠⵠΔΔⲆΔⲆ();
      } else if (b == this.ᐃⲆⲆΔⲆ || this.ⲆᐃΔⲆΔΔⲆ == b) {
        this.ⲆΔᐃΔⵠⲆΔ();
      }
      this.keys[b] = this.ΔᐃᐃⲆΔⲆΔ;
      return b;
    };
    this.ⵠᐃⵠᐃⵠΔⵠ = function () {
      this.keys[this.ᐃⲆⲆΔⲆ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⲆᐃΔⲆΔΔⲆ] = this.ⲆⵠⲆⵠΔ;
    };
    this.ⲆΔᐃΔⵠⲆΔ = function () {
      this.keys[this.ΔⵠⵠⲆΔ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ΔΔⲆᐃᐃⲆΔ] = this.ⲆⵠⲆⵠΔ;
    };
    this.ⵠⵠΔΔⲆΔⲆ = function () {
      this.keys[this.ΔⵠΔⵠΔ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⵠΔΔΔᐃⵠᐃ] = this.ⲆⵠⲆⵠΔ;
    };
    this.ⵠᐃΔΔΔᐃⲆ = function () {
      this.keys[this.ⲆⲆᐃⲆⲆ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⲆΔᐃᐃΔⲆΔ] = this.ⲆⵠⲆⵠΔ;
    };
    this.ⲆⵠⵠⵠⵠⲆⵠ = function () {
      this.keys[this.ᐃⲆⲆΔⲆ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⲆᐃΔⲆΔΔⲆ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ΔⵠⵠⲆΔ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ΔΔⲆᐃᐃⲆΔ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ΔⵠΔⵠΔ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⵠΔΔΔᐃⵠᐃ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⲆⲆᐃⲆⲆ] = this.ⲆⵠⲆⵠΔ;
      this.keys[this.ⲆΔᐃᐃΔⲆΔ] = this.ⲆⵠⲆⵠΔ;
    };
    this.ⵠΔᐃⵠᐃΔΔ = function () {
      return this.keys[this.ΔⵠⵠⲆΔ] || this.keys[this.ΔΔⲆᐃᐃⲆΔ];
    };
    this.ⵠΔᐃⵠⲆΔⵠ = function () {
      return this.keys[this.ᐃⲆⲆΔⲆ] || this.keys[this.ⲆᐃΔⲆΔΔⲆ];
    };
    this.ⵠΔⲆⲆΔⲆⵠ = function () {
      return this.keys[this.ΔⵠΔⵠΔ] || this.keys[this.ⵠΔΔΔᐃⵠᐃ];
    };
    this.ⲆΔᐃΔᐃΔᐃ = function () {
      return this.keys[this.ⲆⲆᐃⲆⲆ] || this.keys[this.ⲆΔᐃᐃΔⲆΔ];
    };
    this.ⵠᐃΔⵠⲆΔⵠᐃᐃ = function () {
      return this.keys[this.ᐃΔⵠⵠᐃⲆⲆ];
    };
    this.ⲆⵠᐃⲆᐃⵠᐃⲆΔ = function () {
      return this.keys[this.ⵠⵠΔΔⲆΔⵠ];
    };
    this.ΔⵠΔⲆΔΔᐃΔⲆ = function () {
      return this.keys[this.ⵠᐃᐃⵠᐃⲆⵠ];
    };
    this.ⲆⲆΔⵠⲆᐃⲆⲆⲆ = function () {
      return this.keys[this.ⵠⵠⵠⵠᐃⵠⵠ];
    };
    this.ᐃΔΔΔΔⵠⵠⲆΔ = function () {
      return this.keys[this.ⵠΔΔⲆⵠⵠⲆ];
    };
    this.ᐃᐃΔⲆᐃⵠⵠⵠΔ = function () {
      return this.keys[this.ⲆΔΔⵠΔᐃΔ];
    };
    this.ⵠⲆⵠᐃⲆΔᐃⵠᐃ = function () {
      return this.keys[this.ⵠΔⲆⵠⵠΔⲆ];
    };
    this.ⵠⵠⲆΔᐃᐃᐃⵠΔ = function () {
      return this.keys[this.ΔΔⲆΔᐃΔⵠ];
    };
    this.ΔΔᐃΔᐃᐃⵠΔⲆ = function () {
      return this.keys[this.ᐃⲆΔᐃⲆⲆⲆ];
    };
    this.ᐃΔⲆⲆⵠΔⲆⵠΔ = function () {
      return this.keys[this.ΔⲆᐃᐃⵠⵠΔ];
    };
  }();
  var qx = new function () {
    this.ΔᐃᐃⲆΔⲆΔ = 0;
    this.ⲆⵠⲆⵠΔ = 1;
    this.IDLE = 2;
    this.ⵠⵠⵠⵠΔⵠΔ = 0;
    this.ⲆᐃⵠΔⲆⲆΔⵠⵠ = 1;
    this.ⲆⵠⲆⵠ = {
      x: 0,
      y: 0
    };
    this.ⲆⵠΔΔⲆⵠΔ = 0;
    this.ᐃⵠΔⲆⵠⵠᐃ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ᐃᐃⵠΔ = this.ⵠⵠⵠⵠΔⵠΔ;
    this.down = function () {
      this.state = this.ΔᐃᐃⲆΔⲆΔ;
    };
    this.up = function () {
      this.state = this.ⲆⵠⲆⵠΔ;
    };
    this.ⵠⵠᐃ = function () {
      if (this.ⲆⵠⲆⵠ.x != this.ⲆⵠΔΔⲆⵠΔ || this.ⲆⵠⲆⵠ.y != this.ᐃⵠΔⲆⵠⵠᐃ) {
        this.ⲆⵠΔΔⲆⵠΔ = this.ⲆⵠⲆⵠ.x;
        this.ᐃⵠΔⲆⵠⵠᐃ = this.ⲆⵠⲆⵠ.y;
        return hj;
      } else {
        return hi;
      }
    };
  }();
  var rx = 0;
  var sx = 0;
  var tx = new function (f, e, i) {
    this.ⵠⲆ = f;
    this.Δ = e;
    this.ᐃΔⲆⲆᐃΔⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      style: document.getElementById("loading").style,
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃΔⲆⲆᐃΔⲆ.style.position = "absolute";
    this.ᐃΔⲆⲆᐃΔⲆ.style.display = "inline-block";
    this.ᐃΔⲆⲆᐃΔⲆ.ⵠⵠᐃ();
    this.ⲆⵠⵠⲆᐃ = T;
    this.stop = function () {
      this.ⲆⵠⵠⲆᐃ = false;
    };
    this.ⲆᐃⵠⵠⵠΔᐃ = {
      total: 1
    };
    var j = this;
    function k() {}
    var n = 0;
    function o(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ᐃⲆⵠΔⲆ = function () {
      j.ⵠⵠᐃ();
      if (++n == 40) {
        j.stop();
        k();
        return;
      }
      Ya.setTimeout(j.ᐃⲆⵠΔⲆ, 33);
    };
    this.ᐃΔᐃΔⵠ = function (a) {
      k = a;
      j.ᐃⲆⵠΔⲆ();
    };
    new Date().getTime();
    Object.keys(Ⲇᐃ).length;
    console.log(undefined, go);
    for (var p in Ⲇᐃ) {
      if (o(Ⲇᐃ[p]) === 0) {
        0;
      }
    }
    console.log(Ej, Lg);
    function q() {
      if (this.ⲆⵠⵠΔΔᐃΔ !== 0) {
        return this.ⲆⵠⵠΔΔᐃΔ;
      } else {
        this.ⲆⵠⵠΔΔᐃΔ = 2;
        this.src = this.ᐃΔᐃⲆᐃ;
        return 0;
      }
    }
    function l(a) {
      this.ⲆⵠⵠΔΔᐃΔ = 1;
    }
    var g = 0;
    function s() {
      console.log(undefined);
      if (g !== 1) {
        g = 1;
        console.log(Sh);
        if (sb !== Ls) {
          Ls();
        }
        sb();
        var a = ⲆᐃΔ.ΔⵠΔⲆᐃⵠᐃ("server");
        if (a !== null) {
          Δⵠᐃᐃ.ⵠᐃΔᐃⲆᐃⵠ = 1;
          Δⵠᐃᐃ.ᐃᐃᐃᐃⲆ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        Δⵠᐃᐃ.ⲆⵠᐃⵠⲆⲆΔᐃΔ();
        setTimeout(i, 100);
      }
    }
    function d() {
      let a = function () {
        Δⵠᐃᐃ.ⵠⲆᐃⵠⲆⲆᐃ(s);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(d, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function u() {
      this.ᐃⲆⲆΔΔΔᐃ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃⲆⲆΔΔΔᐃ}`, this);
      if (this.ᐃⲆⲆΔΔΔᐃ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ᐃⲆⲆΔΔΔᐃ;
      var b = this.src;
      var c = o(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⲆᐃⵠᐃⲆΔΔ) {
          if (b.indexOf(ⲆᐃⵠᐃⲆΔΔ[c]) !== -1) {
            Ⲇᐃ[c] = new Image();
            Ⲇᐃ[c].onload = l;
            Ⲇᐃ[c].onerror = u;
            Ⲇᐃ[c].ᐃⲆⲆΔΔΔᐃ = a;
            Ⲇᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function c(a) {
      for (var b in Ⲇᐃ) {
        var c = Ⲇᐃ[b];
        if (typeof c === "string" && o(c) === a) {
          Ⲇᐃ[b] = new Image();
          Ⲇᐃ[b].ⲆⵠⵠΔΔᐃΔ = 0;
          Ⲇᐃ[b].ᐃⲆⲆΔΔΔᐃ = 0;
          Ⲇᐃ[b].onload = l;
          Ⲇᐃ[b].onerror = u;
          Ⲇᐃ[b].ᐃⲆΔⵠⵠᐃΔ = q;
          Ⲇᐃ[b].ᐃΔᐃⲆᐃ = c;
        }
      }
    }
    c(1);
    c(0);
    Tt(1, "l", 20, "#000");
    d();
    Km();
    this.ⵠⵠᐃ = function () {
      this.ᐃΔⲆⲆᐃΔⲆ.translate.x = (Ln - 500) / 2;
      this.ᐃΔⲆⲆᐃΔⲆ.translate.y = (qn - 150) / 2;
      var a = 2500 / (40 - n + 1) - 48;
      this.ᐃΔⲆⲆᐃΔⲆ.translate.y -= a;
      this.ᐃΔⲆⲆᐃΔⲆ.ⵠⵠᐃ();
    };
    this.ᐃΔⲆⲆᐃΔⲆ.ⵠⵠᐃ();
    this.ΔΔⲆⲆ = function () {
      try {
        $m();
      } catch (a) {}
      this.ⵠⵠᐃ();
    };
  }(Jn, Gn, function () {
    Gm();
    nx = new Vf(Jn, Gn);
    (hx = new Sw(Jn, Gn)).Δⵠᐃᐃⵠᐃᐃᐃⵠ();
    mx = new Ow(Jn, Gn);
    kx = new Df();
    lx = new jf();
    tx.ᐃΔᐃΔⵠ(function () {
      tx.ᐃΔⲆⲆᐃΔⲆ.style.display = "none";
      hx.ΔΔΔᐃᐃ();
    });
  });
  function ux() {
    try {
      Ya.Widget.adsRefresh();
    } catch (a) {}
  }
  Ya.onbeforeunload = function () {
    if (nx.ⲆⵠⵠⲆᐃ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Qq();
  (function b(a) {
    Ya.requestAnimationFrame(b);
    rx = (a - sx) / 1000;
    sx = a;
    rx = rx > 1 ? 1 : rx;
    if (nx.ⲆⵠⵠⲆᐃ) {
      nx.ΔΔⲆⲆ();
    } else {
      Gn.clearRect(0, 0, Ln, qn);
      if (tx.ⲆⵠⵠⲆᐃ) {
        tx.ΔΔⲆⲆ();
      } else if (hx.ⲆⵠⵠⲆᐃ) {
        hx.ΔΔⲆⲆ();
      } else if (mx.ⲆⵠⵠⲆᐃ) {
        mx.ΔΔⲆⲆ();
      }
    }
  })(0);
  var vx = 0;
  function wx() {
    xx.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", _k);
    xx.send();
  }
  var xx = new XMLHttpRequest();
  xx.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var yx = "https://token.starve.io/";
  var zx = "https://token2.starve.io/";
  var Ax = 0;
  var Bx = 1;
  var Cx = 4;
  var Dx = undefined;
  var Ex = undefined;
  var Fx = Pn;
  var Gx = 0;
  Ya.ΔΔΔⲆΔᐃᐃ = function () {
    Gx = 1;
  };
  var Hx = {
    ΔᐃⵠᐃⲆΔΔⲆΔ: "ACCESS_TOKEN"
  };
  var Ix = document.createElement("script");
  Ix.type = "text/javascript";
  Ix.async = true;
  Ix.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Ix.addEventListener("load", function (a) {
    Ya.XPayStationWidget.init(Hx);
    Ya.XPayStationWidget.on("status-done", Ux);
  }, ra);
  document.getElementsByTagName("head")[0].appendChild(Ix);
  Ya.fbAsyncInit = function () {
    Px();
    console.log(eb);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Jx = undefined;
  var Kx = Ds;
  function Lx() {
    Ya.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Jx = a).isSignedIn.listen(Mx);
      Jx.currentUser.listen(Nx);
      if (Jx.isSignedIn.get()) {
        Jx.signIn();
      }
      Ox();
    });
  }
  function Mx(a) {}
  function Nx(a) {
    if (bj === Ex && Cn !== Kx && (Ex = Kx.getAuthResponse().id_token) !== undefined) {
      Dx = Ax;
      Fx = Kx.getBasicProfile().getId();
      Ya.ΔΔΔⲆΔᐃᐃ();
      return;
    }
    if (Lg !== a && a.isSignedIn() === true) {
      Fx = (Kx = a).id;
      Fx = Kx.getBasicProfile().getId();
      Ex = Kx.getAuthResponse().id_token;
      Dx = Ax;
      Ya.ΔΔΔⲆΔᐃᐃ();
    }
  }
  function Ox() {
    if (Jx) {
      Kx = Jx.currentUser.get();
    }
  }
  function Px() {
    if (Ya.FB) {
      Ya.FB.init({
        xfbml: Qs,
        version: "v15.0",
        cookie: true,
        appId: "642017356260407"
      });
    }
    if (Fx === Sh) {
      (function () {
        try {
          if (Ya.FB && Ya.FB.getUserID()) {
            Fx = Ya.FB.getUserID();
            if (Ex === undefined) {
              Ya.FB.getLoginStatus(function () {
                Dx = Bx;
                Ex = Ya.FB.getAuthResponse().accessToken;
                Ya.ΔΔΔⲆΔᐃᐃ(Fx);
              });
            }
          }
        } catch (a) {}
        try {
          Fx = Kx.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  function Qx(b, c, d, f) {
    b = Lg === b ? hx.ΔΔⵠᐃΔΔᐃ : b;
    c = eb === c ? hx.ΔⲆⲆⵠΔΔⵠ : c;
    d = Ja === d ? hx.ⲆⲆⵠΔⲆΔᐃ : d;
    f = f === undefined ? hx.ᐃᐃⲆᐃΔΔⵠ : f;
    if (hx.ΔΔⵠᐃΔΔᐃ !== b || c !== hx.ΔⲆⲆⵠΔΔⵠ || d !== hx.ⲆⲆⵠΔⲆΔᐃ || hx.ᐃᐃⲆᐃΔΔⵠ !== f) {
      hx.ΔΔⵠᐃΔΔᐃ = b;
      hx.ΔⲆⲆⵠΔΔⵠ = c;
      hx.ⲆⲆⵠΔⲆΔᐃ = d;
      hx.ᐃᐃⲆᐃΔΔⵠ = f;
      if (hx.ΔΔᐃΔⲆⵠⵠ === f) {
        f = "0";
      } else if (hx.ⲆΔΔⲆⵠΔⵠ === f) {
        f = "1";
      } else if (hx.ᐃⵠⵠΔΔⲆⲆ === f) {
        f = "2";
      } else if (hx.ⵠΔΔᐃⲆΔⲆ === f) {
        f = "3";
      } else if (hx.ⲆᐃᐃⲆⲆⲆΔ === f) {
        f = "4";
      } else if (hx.ⵠᐃⵠⵠᐃΔⵠ === f) {
        f = "5";
      }
      if (c === hx.ⲆΔᐃⲆⵠᐃΔ) {
        c = "total";
      } else if (c === hx.ΔᐃΔᐃΔⵠⵠ) {
        c = "normal";
      } else if (hx.ᐃᐃⵠΔΔⲆᐃ === c) {
        c = "zombie";
      } else if (c === hx.ⵠᐃᐃⲆᐃⲆΔ) {
        c = "vampire";
      } else if (hx.ΔⲆⲆⲆΔᐃΔ === c) {
        c = "forest";
      }
      if (hx.ᐃᐃΔᐃΔⲆΔ === b) {
        b = "all";
      }
      if (hx.ΔᐃᐃⵠⵠΔⵠ === b) {
        b = "week";
      }
      if (hx.ⵠⲆⲆᐃΔⵠᐃ === b) {
        b = "today";
      }
      if (d === hx.ⵠⲆⵠⲆⲆᐃⵠ) {
        d = "kill";
      } else if (d === hx.ᐃΔⵠᐃⲆΔⵠ) {
        d = "score";
      } else if (d === hx.ⵠΔΔΔⲆΔΔ) {
        d = "time";
      }
      var g = new XMLHttpRequest();
      g.open("GET", yx + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
      g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      g.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
          for (var a = JSON.parse(g.responseText), b = "", c = 0; c < a.length; c++) {
            ᐃΔΔΔᐃ = a[c];
            var d = ᐃΔΔΔᐃ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = Ya.decodeURIComponent(Ya.escape(Ya.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += hx.ⵠᐃΔΔⵠⲆⵠ(ᐃΔΔΔᐃ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ᐃΔΔΔᐃ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ᐃΔΔΔᐃ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ᐃΔΔΔᐃ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      g.send();
    }
  }
  function Rx(a) {
    if (Fx) {
      var b = new XMLHttpRequest();
      b.open("GET", yx + "xsolla?userid=" + Fx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          Hx.access_token = b.responseText;
          Ya.XPayStationWidget.init(Hx);
          Ya.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function Sx(a, b) {
    if (hx.Δⵠⵠⵠᐃ <= 0) {
      if (hx.ⲆⲆΔΔᐃ < b) {
        hx.ⲆⲆᐃⲆ(hx.ⲆᐃΔⵠⲆ);
      } else {
        hx.Δⵠⵠⵠᐃ = 2;
        hx.ΔΔΔᐃᐃⲆᐃ = 0;
        hx.ΔΔⲆⲆΔⵠⲆ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", yx + "buySpin?token=" + Ex + "&userid=" + Fx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              hx.ⵠⵠΔΔⲆⵠⲆⲆⲆ(Math.PI * a.rand * 2, a.type, a.id);
              hx.ⲆⲆΔΔᐃ -= b;
            } else {
              hx.Δⵠⵠⵠᐃ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Tx() {
    if (hx.ⲆⲆΔΔᐃ >= 300 || hx.ᐃΔΔΔⲆᐃⲆ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", yx + "changeNickname?token=" + Ex + "&userid=" + Fx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              hx.ⲆⲆΔΔᐃ -= a;
            }
            hx.ᐃΔΔΔⲆᐃⲆ = 1;
            hx.ⲆⲆᐃⲆ(hx.ᐃⲆΔⲆΔ);
          }
        };
        b.send();
      }
    }
  }
  function Ux() {
    var a = new XMLHttpRequest();
    a.open("GET", yx + "claimBread?userid=" + Fx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          hx.ⲆⲆΔΔᐃ = b;
        }
      }
    };
    a.send();
  }
  function Vx(a) {
    var b = new XMLHttpRequest();
    b.open("GET", yx + "setRegion?token=" + Ex + "&userid=" + Fx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          hx.ⲆⲆᐃⲆ(hx.ᐃⵠⵠᐃⵠ);
        } else {
          hx.ⲆⲆᐃⲆ(hx.ⵠⲆΔᐃᐃ);
        }
      }
    };
    b.send();
  }
  function Wx(a, b) {
    if (hx.ⲆⲆΔΔᐃ < b) {
      hx.ⲆⲆᐃⲆ(hx.ⲆᐃΔⵠⲆ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", yx + "buyKit?token=" + Ex + "&userid=" + Fx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          hx.ⲆⲆΔΔᐃ -= b;
          hx.ᐃᐃᐃⵠΔ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  Ya.onload = function () {
    Ya.gapi.load("auth2", Lx);
  };
})();
